begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|RandomAccessFile
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|MessageFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNConflictHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNMergeFileSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNMergeResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNPropertyConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTextConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineRAByteData
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineRAData
import|;
end_import

begin_import
import|import
name|de
operator|.
name|regnis
operator|.
name|q
operator|.
name|sequence
operator|.
name|line
operator|.
name|QSequenceLineRAFileData
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  * @since   1.2.0  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSVNMerger
extends|extends
name|AbstractSVNMerger
implements|implements
name|ISVNMerger
block|{
specifier|private
specifier|static
name|List
name|STATUS_ORDERING
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
static|static
block|{
name|STATUS_ORDERING
operator|.
name|add
argument_list|(
name|SVNStatusType
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|STATUS_ORDERING
operator|.
name|add
argument_list|(
name|SVNStatusType
operator|.
name|UNCHANGED
argument_list|)
expr_stmt|;
name|STATUS_ORDERING
operator|.
name|add
argument_list|(
name|SVNStatusType
operator|.
name|INAPPLICABLE
argument_list|)
expr_stmt|;
name|STATUS_ORDERING
operator|.
name|add
argument_list|(
name|SVNStatusType
operator|.
name|CHANGED
argument_list|)
expr_stmt|;
name|STATUS_ORDERING
operator|.
name|add
argument_list|(
name|SVNStatusType
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|STATUS_ORDERING
operator|.
name|add
argument_list|(
name|SVNStatusType
operator|.
name|OBSTRUCTED
argument_list|)
expr_stmt|;
name|STATUS_ORDERING
operator|.
name|add
argument_list|(
name|SVNStatusType
operator|.
name|CONFLICTED
argument_list|)
expr_stmt|;
block|}
specifier|private
name|ISVNConflictHandler
name|myConflictCallback
decl_stmt|;
specifier|private
name|SVNDiffConflictChoiceStyle
name|myDiffConflictStyle
decl_stmt|;
specifier|public
name|DefaultSVNMerger
parameter_list|(
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|sep
parameter_list|,
name|byte
index|[]
name|end
parameter_list|)
block|{
name|this
argument_list|(
name|start
argument_list|,
name|sep
argument_list|,
name|end
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultSVNMerger
parameter_list|(
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|sep
parameter_list|,
name|byte
index|[]
name|end
parameter_list|,
name|ISVNConflictHandler
name|callback
parameter_list|)
block|{
name|this
argument_list|(
name|start
argument_list|,
name|sep
argument_list|,
name|end
argument_list|,
name|callback
argument_list|,
name|SVNDiffConflictChoiceStyle
operator|.
name|CHOOSE_MODIFIED_LATEST
argument_list|)
expr_stmt|;
block|}
specifier|public
name|DefaultSVNMerger
parameter_list|(
name|byte
index|[]
name|start
parameter_list|,
name|byte
index|[]
name|sep
parameter_list|,
name|byte
index|[]
name|end
parameter_list|,
name|ISVNConflictHandler
name|callback
parameter_list|,
name|SVNDiffConflictChoiceStyle
name|style
parameter_list|)
block|{
name|super
argument_list|(
name|start
argument_list|,
name|sep
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|myConflictCallback
operator|=
name|callback
expr_stmt|;
name|myDiffConflictStyle
operator|=
name|style
expr_stmt|;
block|}
specifier|public
name|SVNMergeResult
name|mergeProperties
parameter_list|(
name|String
name|localPath
parameter_list|,
name|SVNProperties
name|workingProperties
parameter_list|,
name|SVNProperties
name|baseProperties
parameter_list|,
name|SVNProperties
name|serverBaseProps
parameter_list|,
name|SVNProperties
name|propDiff
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|boolean
name|baseMerge
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|propDiff
operator|=
name|propDiff
operator|==
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|()
else|:
name|propDiff
expr_stmt|;
if|if
condition|(
name|baseProperties
operator|==
literal|null
condition|)
block|{
name|baseProperties
operator|=
name|adminArea
operator|.
name|getBaseProperties
argument_list|(
name|localPath
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|workingProperties
operator|==
literal|null
condition|)
block|{
name|workingProperties
operator|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|localPath
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|serverBaseProps
operator|==
literal|null
condition|)
block|{
name|serverBaseProps
operator|=
name|baseProperties
operator|!=
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|(
name|baseProperties
argument_list|)
else|:
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isDir
init|=
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|localPath
argument_list|)
decl_stmt|;
name|List
name|conflicts
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|List
name|conflict
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|SVNStatusType
name|status
init|=
name|SVNStatusType
operator|.
name|UNCHANGED
decl_stmt|;
for|for
control|(
name|Iterator
name|propEntries
init|=
name|propDiff
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propEntries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propEntries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|toValue
init|=
name|propDiff
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|fromValue
init|=
name|serverBaseProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|workingValue
init|=
name|workingProperties
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|baseValue
init|=
name|baseProperties
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|boolean
name|isNormal
init|=
name|SVNProperty
operator|.
name|isRegularProperty
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseMerge
condition|)
block|{
name|changeProperty
argument_list|(
name|baseProperties
argument_list|,
name|propName
argument_list|,
name|toValue
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNormal
condition|)
block|{
name|status
operator|=
name|getPropMergeStatus
argument_list|(
name|status
argument_list|,
name|SVNStatusType
operator|.
name|CHANGED
argument_list|)
expr_stmt|;
block|}
name|SVNStatusType
name|newStatus
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|fromValue
operator|==
literal|null
condition|)
block|{
name|newStatus
operator|=
name|applySinglePropertyAdd
argument_list|(
name|localPath
argument_list|,
name|isDir
argument_list|,
name|isNormal
condition|?
name|status
else|:
literal|null
argument_list|,
name|workingProperties
argument_list|,
name|propName
argument_list|,
name|baseValue
argument_list|,
name|toValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|conflict
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|toValue
operator|==
literal|null
condition|)
block|{
name|newStatus
operator|=
name|applySinglePropertyDelete
argument_list|(
name|localPath
argument_list|,
name|isDir
argument_list|,
name|isNormal
condition|?
name|status
else|:
literal|null
argument_list|,
name|workingProperties
argument_list|,
name|propName
argument_list|,
name|baseValue
argument_list|,
name|fromValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|conflict
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newStatus
operator|=
name|applySinglePropertyChange
argument_list|(
name|localPath
argument_list|,
name|isDir
argument_list|,
name|status
argument_list|,
name|workingProperties
argument_list|,
name|propName
argument_list|,
name|baseValue
argument_list|,
name|fromValue
argument_list|,
name|toValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|conflict
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isNormal
condition|)
block|{
name|status
operator|=
name|newStatus
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conflict
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|isNormal
condition|)
block|{
name|status
operator|=
name|getPropMergeStatus
argument_list|(
name|status
argument_list|,
name|SVNStatusType
operator|.
name|CONFLICTED
argument_list|)
expr_stmt|;
block|}
name|Object
name|conflictDescription
init|=
name|conflict
operator|.
name|remove
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|dryRun
condition|)
block|{
continue|continue;
block|}
name|conflicts
operator|.
name|add
argument_list|(
name|conflictDescription
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dryRun
condition|)
block|{
return|return
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|status
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|log
operator|=
name|log
operator|==
literal|null
condition|?
name|adminArea
operator|.
name|getLog
argument_list|()
else|:
name|log
expr_stmt|;
name|adminArea
operator|.
name|installProperties
argument_list|(
name|localPath
argument_list|,
name|baseProperties
argument_list|,
name|workingProperties
argument_list|,
name|log
argument_list|,
name|baseMerge
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|conflicts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|adminArea
operator|.
name|getVersionedEntry
argument_list|(
name|localPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|prejTmpPath
init|=
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|localPath
argument_list|)
condition|?
literal|"tmp/dir_conflicts"
else|:
literal|"tmp/props/"
operator|+
name|localPath
decl_stmt|;
name|File
name|prejTmpFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|adminArea
operator|.
name|getAdminDirectory
argument_list|()
argument_list|,
name|prejTmpPath
argument_list|,
literal|".prej"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|prejTmpPath
operator|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|prejTmpFile
argument_list|)
expr_stmt|;
name|String
name|prejPath
init|=
name|entry
operator|.
name|getPropRejectFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|prejPath
operator|==
literal|null
condition|)
block|{
name|prejPath
operator|=
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|localPath
argument_list|)
condition|?
literal|"dir_conflicts"
else|:
name|localPath
expr_stmt|;
name|File
name|prejFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|,
name|prejPath
argument_list|,
literal|".prej"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|prejPath
operator|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|prejFile
argument_list|)
expr_stmt|;
block|}
name|File
name|file
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|prejTmpPath
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|Iterator
name|lines
init|=
name|conflicts
operator|.
name|iterator
argument_list|()
init|;
name|lines
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|line
init|=
operator|(
name|String
operator|)
name|lines
operator|.
name|next
argument_list|()
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|SVNEncodingUtil
operator|.
name|fuzzyEscape
argument_list|(
name|line
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|os
operator|.
name|write
argument_list|(
name|SVNEncodingUtil
operator|.
name|fuzzyEscape
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write properties conflict file: {1}"
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|prejTmpPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|prejPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|APPEND
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|prejTmpPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|localPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|PROP_REJECT_FILE
argument_list|)
argument_list|,
name|prejPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|status
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|SVNDiffConflictChoiceStyle
name|getDiffConflictStyle
parameter_list|()
block|{
return|return
name|myDiffConflictStyle
return|;
block|}
specifier|public
name|void
name|setDiffConflictStyle
parameter_list|(
name|SVNDiffConflictChoiceStyle
name|diffConflictStyle
parameter_list|)
block|{
name|myDiffConflictStyle
operator|=
name|diffConflictStyle
expr_stmt|;
block|}
specifier|protected
name|SVNStatusType
name|mergeBinary
parameter_list|(
name|File
name|baseFile
parameter_list|,
name|File
name|localFile
parameter_list|,
name|File
name|repositoryFile
parameter_list|,
name|SVNDiffOptions
name|options
parameter_list|,
name|File
name|resultFile
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|SVNStatusType
operator|.
name|CONFLICTED
return|;
block|}
specifier|protected
name|SVNStatusType
name|mergeText
parameter_list|(
name|File
name|baseFile
parameter_list|,
name|File
name|localFile
parameter_list|,
name|File
name|latestFile
parameter_list|,
name|SVNDiffOptions
name|options
parameter_list|,
name|File
name|resultFile
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSMergerBySequence
name|merger
init|=
operator|new
name|FSMergerBySequence
argument_list|(
name|getConflictStartMarker
argument_list|()
argument_list|,
name|getConflictSeparatorMarker
argument_list|()
argument_list|,
name|getConflictEndMarker
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|mergeResult
init|=
literal|0
decl_stmt|;
name|RandomAccessFile
name|localIS
init|=
literal|null
decl_stmt|;
name|RandomAccessFile
name|latestIS
init|=
literal|null
decl_stmt|;
name|RandomAccessFile
name|baseIS
init|=
literal|null
decl_stmt|;
name|OutputStream
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|resultFile
argument_list|)
expr_stmt|;
name|localIS
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|localFile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|latestIS
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|latestFile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|baseIS
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|baseFile
argument_list|,
literal|"r"
argument_list|)
expr_stmt|;
name|QSequenceLineRAData
name|baseData
init|=
operator|new
name|QSequenceLineRAFileData
argument_list|(
name|baseIS
argument_list|)
decl_stmt|;
name|QSequenceLineRAData
name|localData
init|=
operator|new
name|QSequenceLineRAFileData
argument_list|(
name|localIS
argument_list|)
decl_stmt|;
name|QSequenceLineRAData
name|latestData
init|=
operator|new
name|QSequenceLineRAFileData
argument_list|(
name|latestIS
argument_list|)
decl_stmt|;
name|mergeResult
operator|=
name|merger
operator|.
name|merge
argument_list|(
name|baseData
argument_list|,
name|localData
argument_list|,
name|latestData
argument_list|,
name|options
argument_list|,
name|result
argument_list|,
name|getDiffConflictStyle
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|localIS
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|baseIS
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|latestIS
argument_list|)
expr_stmt|;
block|}
name|SVNStatusType
name|status
init|=
name|SVNStatusType
operator|.
name|UNCHANGED
decl_stmt|;
if|if
condition|(
name|mergeResult
operator|==
name|FSMergerBySequence
operator|.
name|CONFLICTED
condition|)
block|{
name|status
operator|=
name|SVNStatusType
operator|.
name|CONFLICTED
expr_stmt|;
block|}
if|else if
condition|(
name|mergeResult
operator|==
name|FSMergerBySequence
operator|.
name|MERGED
condition|)
block|{
name|status
operator|=
name|SVNStatusType
operator|.
name|MERGED
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
specifier|protected
name|SVNMergeResult
name|processMergedFiles
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|,
name|SVNMergeResult
name|mergeResult
parameter_list|)
throws|throws
name|SVNException
block|{
name|DefaultSVNMergerAction
name|mergeAction
init|=
name|getMergeAction
argument_list|(
name|files
argument_list|,
name|mergeResult
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeAction
operator|==
name|DefaultSVNMergerAction
operator|.
name|MARK_CONFLICTED
condition|)
block|{
name|mergeResult
operator|=
name|handleMarkConflicted
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeAction
operator|==
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_BASE
condition|)
block|{
name|mergeResult
operator|=
name|handleChooseBase
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeAction
operator|==
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_REPOSITORY
condition|)
block|{
name|mergeResult
operator|=
name|handleChooseRepository
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeAction
operator|==
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_WORKING
condition|)
block|{
name|mergeResult
operator|=
name|handleChooseWorking
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeAction
operator|==
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_MERGED_FILE
condition|)
block|{
name|mergeResult
operator|=
name|handleChooseMerged
argument_list|(
name|files
argument_list|,
name|mergeResult
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeAction
operator|==
name|DefaultSVNMergerAction
operator|.
name|MARK_RESOLVED
condition|)
block|{
name|mergeResult
operator|=
name|handleMarkResolved
argument_list|(
name|files
argument_list|,
name|mergeResult
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeAction
operator|==
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_REPOSITORY_CONFLICTED
condition|)
block|{
name|mergeResult
operator|=
name|handleChooseConflicted
argument_list|(
literal|false
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeAction
operator|==
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_WORKING_CONFLICTED
condition|)
block|{
name|mergeResult
operator|=
name|handleChooseConflicted
argument_list|(
literal|true
argument_list|,
name|files
argument_list|)
expr_stmt|;
block|}
name|postMergeCleanup
argument_list|(
name|files
argument_list|)
expr_stmt|;
return|return
name|mergeResult
return|;
block|}
specifier|protected
name|DefaultSVNMergerAction
name|getMergeAction
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|,
name|SVNMergeResult
name|mergeResult
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|mergeResult
operator|.
name|getMergeStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED
condition|)
block|{
if|if
condition|(
name|myConflictCallback
operator|!=
literal|null
condition|)
block|{
name|SVNConflictDescription
name|descr
init|=
operator|new
name|SVNTextConflictDescription
argument_list|(
name|files
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNConflictAction
operator|.
name|EDIT
argument_list|,
name|SVNConflictReason
operator|.
name|EDITED
argument_list|)
decl_stmt|;
name|SVNConflictResult
name|result
init|=
name|myConflictCallback
operator|.
name|handleConflict
argument_list|(
name|descr
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CONFLICT_RESOLVER_FAILURE
argument_list|,
literal|"Conflict callback violated API: returned no results."
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNConflictChoice
name|choice
init|=
name|result
operator|.
name|getConflictChoice
argument_list|()
decl_stmt|;
if|if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|BASE
condition|)
block|{
return|return
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_BASE
return|;
block|}
if|else if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|MERGED
condition|)
block|{
return|return
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_MERGED_FILE
return|;
block|}
if|else if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|MINE_FULL
condition|)
block|{
return|return
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_WORKING
return|;
block|}
if|else if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|THEIRS_FULL
condition|)
block|{
return|return
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_REPOSITORY
return|;
block|}
if|else if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|MINE_CONFLICT
condition|)
block|{
return|return
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_WORKING_CONFLICTED
return|;
block|}
if|else if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|THEIRS_CONFLICT
condition|)
block|{
return|return
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_REPOSITORY_CONFLICTED
return|;
block|}
block|}
return|return
name|DefaultSVNMergerAction
operator|.
name|MARK_CONFLICTED
return|;
block|}
return|return
name|DefaultSVNMergerAction
operator|.
name|CHOOSE_MERGED_FILE
return|;
block|}
specifier|protected
name|SVNMergeResult
name|handleChooseBase
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNLog
name|log
init|=
name|files
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getBasePath
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|SVNStatusType
operator|.
name|MERGED
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|SVNMergeResult
name|handleChooseRepository
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNLog
name|log
init|=
name|files
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getRepositoryPath
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|SVNStatusType
operator|.
name|MERGED
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|SVNMergeResult
name|handleChooseConflicted
parameter_list|(
name|boolean
name|chooseMine
parameter_list|,
name|SVNMergeFileSet
name|files
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|tmpFile
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|files
operator|.
name|getAdminArea
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|separator
init|=
operator|new
name|String
argument_list|(
name|getConflictSeparatorMarker
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|mineMarker
init|=
operator|new
name|String
argument_list|(
name|getConflictStartMarker
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|theirsMarker
init|=
operator|new
name|String
argument_list|(
name|getConflictEndMarker
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|tmpOS
init|=
literal|null
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
name|boolean
name|skip
init|=
literal|false
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|files
operator|.
name|getResultFile
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tmpOS
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|mineMarker
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|skip
operator|=
name|chooseMine
condition|?
literal|false
else|:
literal|true
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|separator
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|skip
operator|=
name|chooseMine
condition|?
literal|true
else|:
literal|false
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|theirsMarker
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|skip
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
name|mineMarker
argument_list|)
condition|)
block|{
name|int
name|ind
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|mineMarker
argument_list|)
decl_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|tmpOS
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|tmpOS
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|skip
operator|=
name|chooseMine
condition|?
literal|false
else|:
literal|true
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
name|separator
argument_list|)
condition|)
block|{
if|if
condition|(
name|chooseMine
condition|)
block|{
name|int
name|ind
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|separator
argument_list|)
decl_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|tmpOS
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|tmpOS
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|skip
operator|=
name|chooseMine
condition|?
literal|true
else|:
literal|false
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|line
operator|.
name|endsWith
argument_list|(
name|theirsMarker
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|chooseMine
condition|)
block|{
name|int
name|ind
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|theirsMarker
argument_list|)
decl_stmt|;
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|ind
argument_list|)
expr_stmt|;
name|tmpOS
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|tmpOS
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|skip
operator|=
literal|false
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|skip
condition|)
block|{
name|tmpOS
operator|.
name|write
argument_list|(
name|line
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
name|tmpOS
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|String
name|conflictedPart
init|=
name|chooseMine
condition|?
literal|"mine-conflict"
else|:
literal|"theirs-conflict"
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Error occured while resolving to "
operator|+
name|conflictedPart
operator|+
literal|": {0}"
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|tmpOS
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|SVNLog
name|log
init|=
name|files
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|String
name|tmpBasePath
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpBasePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpBasePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|SVNStatusType
operator|.
name|MERGED
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|SVNMergeResult
name|handleChooseWorking
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|files
operator|==
literal|null
condition|)
block|{
name|SVNErrorManager
operator|.
name|cancel
argument_list|(
literal|""
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|SVNStatusType
operator|.
name|MERGED
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|SVNMergeResult
name|handleMarkConflicted
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|files
operator|.
name|isBinary
argument_list|()
condition|)
block|{
return|return
name|handleMarkBinaryConflicted
argument_list|(
name|files
argument_list|)
return|;
block|}
return|return
name|handleMarkTextConflicted
argument_list|(
name|files
argument_list|)
return|;
block|}
specifier|protected
name|SVNMergeResult
name|handleMarkBinaryConflicted
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|File
name|root
init|=
name|files
operator|.
name|getAdminArea
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|SVNLog
name|log
init|=
name|files
operator|.
name|getLog
argument_list|()
decl_stmt|;
name|File
name|oldFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|root
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|,
name|files
operator|.
name|getBaseLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|newFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|root
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|,
name|files
operator|.
name|getRepositoryLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|files
operator|.
name|getBaseFile
argument_list|()
argument_list|,
name|oldFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|files
operator|.
name|getRepositoryFile
argument_list|()
argument_list|,
name|newFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|getLocalPath
argument_list|()
operator|.
name|equals
argument_list|(
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|mineFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|root
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|,
name|files
operator|.
name|getLocalLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|minePath
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|mineFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|minePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_WRK
argument_list|)
argument_list|,
name|minePath
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_WRK
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|String
name|newPath
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|String
name|oldPath
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|oldFile
argument_list|)
decl_stmt|;
name|makeBinaryConflictEntry
argument_list|(
name|files
argument_list|,
name|newPath
argument_list|,
name|oldPath
argument_list|)
expr_stmt|;
return|return
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|SVNStatusType
operator|.
name|CONFLICTED
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|void
name|makeBinaryConflictEntry
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|,
name|String
name|newFilePath
parameter_list|,
name|String
name|oldFilePath
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNLog
name|log
init|=
name|files
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_NEW
argument_list|)
argument_list|,
name|newFilePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_OLD
argument_list|)
argument_list|,
name|oldFilePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|logChangedEntryProperties
argument_list|(
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|files
operator|.
name|getAdminArea
argument_list|()
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|SVNMergeResult
name|handleMarkTextConflicted
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|File
name|root
init|=
name|files
operator|.
name|getAdminArea
argument_list|()
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|SVNLog
name|log
init|=
name|files
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|getCopyFromFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|copyFromPath
init|=
name|files
operator|.
name|getCopyFromPath
argument_list|()
decl_stmt|;
name|String
name|detranslatedPath
init|=
name|files
operator|.
name|getWCPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|copyFromPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|detranslatedPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|File
name|mineFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|root
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|,
name|files
operator|.
name|getLocalLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|oldFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|root
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|,
name|files
operator|.
name|getBaseLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|newFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|root
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|,
name|files
operator|.
name|getRepositoryLabel
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|newPath
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
name|String
name|oldPath
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|oldFile
argument_list|)
decl_stmt|;
name|String
name|minePath
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|mineFile
argument_list|)
decl_stmt|;
name|String
name|basePath
init|=
name|files
operator|.
name|getBasePath
argument_list|()
decl_stmt|;
name|String
name|latestPath
init|=
name|files
operator|.
name|getRepositoryPath
argument_list|()
decl_stmt|;
name|File
name|tmpTargetCopy
init|=
name|SVNTranslator
operator|.
name|getTranslatedFile
argument_list|(
name|files
operator|.
name|getAdminArea
argument_list|()
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|,
name|files
operator|.
name|getWCFile
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|tmpTargetCopyPath
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpTargetCopy
argument_list|)
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|oldPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|ATTR2
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|latestPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|newPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|ATTR2
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpTargetCopyPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|minePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|ATTR2
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|tmpTargetCopy
operator|.
name|equals
argument_list|(
name|files
operator|.
name|getLocalFile
argument_list|()
argument_list|)
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpTargetCopyPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getResultPath
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|ATTR2
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|makeTextConflictEntry
argument_list|(
name|files
argument_list|,
name|minePath
argument_list|,
name|newPath
argument_list|,
name|oldPath
argument_list|)
expr_stmt|;
return|return
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|SVNStatusType
operator|.
name|CONFLICTED
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|protected
name|void
name|makeTextConflictEntry
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|,
name|String
name|mineFilePath
parameter_list|,
name|String
name|newFilePath
parameter_list|,
name|String
name|oldFilePath
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNLog
name|log
init|=
name|files
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_WRK
argument_list|)
argument_list|,
name|mineFilePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_NEW
argument_list|)
argument_list|,
name|newFilePath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_OLD
argument_list|)
argument_list|,
name|oldFilePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|logChangedEntryProperties
argument_list|(
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|,
name|command
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|SVNMergeResult
name|handleChooseMerged
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|,
name|SVNMergeResult
name|mergeResult
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNLog
name|log
init|=
name|files
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeResult
operator|.
name|getMergeStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|CONFLICTED
condition|)
block|{
comment|// do normal merge.
if|if
condition|(
name|mergeResult
operator|.
name|getMergeStatus
argument_list|()
operator|!=
name|SVNStatusType
operator|.
name|UNCHANGED
condition|)
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getResultPath
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|mergeResult
return|;
block|}
if|else if
condition|(
name|files
operator|.
name|isBinary
argument_list|()
condition|)
block|{
comment|// this action is not applicable for binary conflited files.
return|return
name|handleMarkConflicted
argument_list|(
name|files
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
comment|// for text file we could use merged version in case of conflict.
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getResultPath
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
return|return
name|SVNMergeResult
operator|.
name|createMergeResult
argument_list|(
name|SVNStatusType
operator|.
name|MERGED
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
specifier|protected
name|SVNMergeResult
name|handleMarkResolved
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|,
name|SVNMergeResult
name|mergeResult
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|files
operator|.
name|isBinary
argument_list|()
condition|)
block|{
comment|// same as choose merged.
return|return
name|handleChooseMerged
argument_list|(
name|files
argument_list|,
name|mergeResult
argument_list|)
return|;
block|}
comment|// same as choose working.
return|return
name|handleChooseWorking
argument_list|(
name|files
argument_list|)
return|;
block|}
specifier|protected
name|void
name|postMergeCleanup
parameter_list|(
name|SVNMergeFileSet
name|files
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNLog
name|log
init|=
name|files
operator|.
name|getLog
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|getLocalPath
argument_list|()
operator|.
name|equals
argument_list|(
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getLocalPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|log
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MAYBE_EXECUTABLE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getWCPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MAYBE_READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|files
operator|.
name|getResultPath
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|SVNStatusType
name|applySinglePropertyAdd
parameter_list|(
name|String
name|localPath
parameter_list|,
name|boolean
name|isDir
parameter_list|,
name|SVNStatusType
name|status
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|baseValue
parameter_list|,
name|SVNPropertyValue
name|newValue
parameter_list|,
name|SVNPropertyValue
name|workingValue
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|Collection
name|conflicts
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|gotConflict
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|workingValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|workingValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|status
operator|=
name|getPropMergeStatus
argument_list|(
name|status
argument_list|,
name|SVNStatusType
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|newValue
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|SVNMergeInfoUtil
operator|.
name|combineMergeInfoProperties
argument_list|(
name|workingValue
operator|.
name|getString
argument_list|()
argument_list|,
name|newValue
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|status
operator|=
name|getPropMergeStatus
argument_list|(
name|status
argument_list|,
name|SVNStatusType
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gotConflict
operator|=
name|maybeGeneratePropConflict
argument_list|(
name|localPath
argument_list|,
name|propName
argument_list|,
name|workingProps
argument_list|,
literal|null
argument_list|,
name|newValue
argument_list|,
name|baseValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|isDir
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|gotConflict
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to add new property ''{0}'' with value ''{1}'',\n"
operator|+
literal|"but property already exists with value ''{2}''."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|newValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|workingValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|baseValue
operator|!=
literal|null
condition|)
block|{
name|gotConflict
operator|=
name|maybeGeneratePropConflict
argument_list|(
name|localPath
argument_list|,
name|propName
argument_list|,
name|workingProps
argument_list|,
literal|null
argument_list|,
name|newValue
argument_list|,
name|baseValue
argument_list|,
literal|null
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|isDir
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|gotConflict
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to create property ''{0}'' with value ''{1}'',\n"
operator|+
literal|"but it has been locally deleted."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|newValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
return|return
name|status
return|;
block|}
specifier|private
name|void
name|changeProperty
parameter_list|(
name|SVNProperties
name|properties
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|propValue
parameter_list|)
block|{
if|if
condition|(
name|propValue
operator|==
literal|null
condition|)
block|{
name|properties
operator|.
name|remove
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|properties
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SVNStatusType
name|applySinglePropertyChange
parameter_list|(
name|String
name|localPath
parameter_list|,
name|boolean
name|isDir
parameter_list|,
name|SVNStatusType
name|status
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|baseValue
parameter_list|,
name|SVNPropertyValue
name|oldValue
parameter_list|,
name|SVNPropertyValue
name|newValue
parameter_list|,
name|SVNPropertyValue
name|workingValue
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|Collection
name|conflicts
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
return|return
name|applySingleMergeInfoPropertyChange
argument_list|(
name|localPath
argument_list|,
name|isDir
argument_list|,
name|status
argument_list|,
name|workingProps
argument_list|,
name|propName
argument_list|,
name|baseValue
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|conflicts
argument_list|,
name|dryRun
argument_list|)
return|;
block|}
return|return
name|applySingleGenericPropertyChange
argument_list|(
name|localPath
argument_list|,
name|isDir
argument_list|,
name|status
argument_list|,
name|workingProps
argument_list|,
name|propName
argument_list|,
name|baseValue
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|conflicts
argument_list|,
name|dryRun
argument_list|)
return|;
block|}
specifier|private
name|SVNStatusType
name|applySingleMergeInfoPropertyChange
parameter_list|(
name|String
name|localPath
parameter_list|,
name|boolean
name|isDir
parameter_list|,
name|SVNStatusType
name|status
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|baseValue
parameter_list|,
name|SVNPropertyValue
name|oldValue
parameter_list|,
name|SVNPropertyValue
name|newValue
parameter_list|,
name|SVNPropertyValue
name|workingValue
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|Collection
name|conflicts
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|gotConflict
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|workingValue
operator|!=
literal|null
operator|&&
name|baseValue
operator|==
literal|null
operator|)
operator|||
operator|(
name|workingValue
operator|==
literal|null
operator|&&
name|baseValue
operator|!=
literal|null
operator|)
operator|||
operator|(
name|workingValue
operator|!=
literal|null
operator|&&
name|baseValue
operator|!=
literal|null
operator|&&
operator|!
name|workingValue
operator|.
name|equals
argument_list|(
name|baseValue
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|workingValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|workingValue
operator|.
name|equals
argument_list|(
name|newValue
argument_list|)
condition|)
block|{
name|status
operator|=
name|getPropMergeStatus
argument_list|(
name|status
argument_list|,
name|SVNStatusType
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newValue
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|SVNMergeInfoUtil
operator|.
name|combineForkedMergeInfoProperties
argument_list|(
name|oldValue
operator|.
name|getString
argument_list|()
argument_list|,
name|workingValue
operator|.
name|getString
argument_list|()
argument_list|,
name|newValue
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|status
operator|=
name|getPropMergeStatus
argument_list|(
name|status
argument_list|,
name|SVNStatusType
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|gotConflict
operator|=
name|maybeGeneratePropConflict
argument_list|(
name|localPath
argument_list|,
name|propName
argument_list|,
name|workingProps
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|,
name|baseValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|isDir
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|gotConflict
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to change property ''{0}'' from ''{1}'' to ''{2}'',\n"
operator|+
literal|"but it has been locally deleted."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|oldValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|newValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|workingValue
operator|==
literal|null
condition|)
block|{
name|Map
name|addedMergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|SVNMergeInfoUtil
operator|.
name|diffMergeInfoProperties
argument_list|(
literal|null
argument_list|,
name|addedMergeInfo
argument_list|,
name|oldValue
operator|.
name|getString
argument_list|()
argument_list|,
literal|null
argument_list|,
name|newValue
operator|.
name|getString
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|newValue
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|SVNMergeInfoUtil
operator|.
name|formatMergeInfoToString
argument_list|(
name|addedMergeInfo
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|baseValue
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newValue
operator|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|SVNMergeInfoUtil
operator|.
name|combineForkedMergeInfoProperties
argument_list|(
name|oldValue
operator|.
name|getString
argument_list|()
argument_list|,
name|workingValue
operator|.
name|getString
argument_list|()
argument_list|,
name|newValue
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|status
operator|=
name|getPropMergeStatus
argument_list|(
name|status
argument_list|,
name|SVNStatusType
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
specifier|private
name|SVNStatusType
name|applySingleGenericPropertyChange
parameter_list|(
name|String
name|localPath
parameter_list|,
name|boolean
name|isDir
parameter_list|,
name|SVNStatusType
name|status
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|baseValue
parameter_list|,
name|SVNPropertyValue
name|oldValue
parameter_list|,
name|SVNPropertyValue
name|newValue
parameter_list|,
name|SVNPropertyValue
name|workingValue
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|Collection
name|conflicts
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|gotConflict
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
name|workingValue
operator|==
literal|null
operator|&&
name|oldValue
operator|==
literal|null
operator|)
operator|||
operator|(
name|workingValue
operator|!=
literal|null
operator|&&
name|oldValue
operator|!=
literal|null
operator|&&
name|workingValue
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
operator|)
condition|)
block|{
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gotConflict
operator|=
name|maybeGeneratePropConflict
argument_list|(
name|localPath
argument_list|,
name|propName
argument_list|,
name|workingProps
argument_list|,
name|oldValue
argument_list|,
name|newValue
argument_list|,
name|baseValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|isDir
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|gotConflict
condition|)
block|{
if|if
condition|(
name|workingValue
operator|!=
literal|null
operator|&&
name|baseValue
operator|!=
literal|null
operator|&&
name|workingValue
operator|.
name|equals
argument_list|(
name|baseValue
argument_list|)
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to change property ''{0}'' from ''{1}'' to ''{2}'',\n"
operator|+
literal|"but property already exists with value ''{3}''."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|oldValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|newValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|workingValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|workingValue
operator|!=
literal|null
operator|&&
name|baseValue
operator|!=
literal|null
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to change property ''{0}'' from ''{1}'' to ''{2}'',\n"
operator|+
literal|"but the property has been locally changed from ''{3}'' to ''{4}''."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|oldValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|newValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|baseValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|workingValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|workingValue
operator|!=
literal|null
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to change property ''{0}'' from ''{1}'' to ''{2}'',\n"
operator|+
literal|"but property has been locally added with value ''{3}''."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|oldValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|newValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|workingValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|baseValue
operator|!=
literal|null
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to change property ''{0}'' from ''{1}'' to ''{2}'',\n"
operator|+
literal|"but it has been locally deleted."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|oldValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|newValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to change property ''{0}'' from ''{1}'' to ''{2}'',\n"
operator|+
literal|"but the property does not exist."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|oldValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|newValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|status
return|;
block|}
specifier|private
name|SVNStatusType
name|applySinglePropertyDelete
parameter_list|(
name|String
name|localPath
parameter_list|,
name|boolean
name|isDir
parameter_list|,
name|SVNStatusType
name|status
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNPropertyValue
name|baseValue
parameter_list|,
name|SVNPropertyValue
name|oldValue
parameter_list|,
name|SVNPropertyValue
name|workingValue
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|Collection
name|conflicts
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|gotConflict
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|baseValue
operator|==
literal|null
condition|)
block|{
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
operator|(
name|SVNPropertyValue
operator|)
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
condition|)
block|{
name|status
operator|=
name|getPropMergeStatus
argument_list|(
name|status
argument_list|,
name|SVNStatusType
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|baseValue
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
if|if
condition|(
name|workingValue
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|workingValue
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
operator|(
name|SVNPropertyValue
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|gotConflict
operator|=
name|maybeGeneratePropConflict
argument_list|(
name|localPath
argument_list|,
name|propName
argument_list|,
name|workingProps
argument_list|,
name|oldValue
argument_list|,
literal|null
argument_list|,
name|baseValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|isDir
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|gotConflict
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to delete property ''{0}'' with value ''{1}''\n "
operator|+
literal|"but it has been modified from ''{2}'' to ''{3}''."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|oldValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|baseValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|workingValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|status
operator|=
name|getPropMergeStatus
argument_list|(
name|status
argument_list|,
name|SVNStatusType
operator|.
name|MERGED
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|gotConflict
operator|=
name|maybeGeneratePropConflict
argument_list|(
name|localPath
argument_list|,
name|propName
argument_list|,
name|workingProps
argument_list|,
name|oldValue
argument_list|,
literal|null
argument_list|,
name|baseValue
argument_list|,
name|workingValue
argument_list|,
name|adminArea
argument_list|,
name|log
argument_list|,
name|isDir
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
if|if
condition|(
name|gotConflict
condition|)
block|{
name|conflicts
operator|.
name|add
argument_list|(
name|MessageFormat
operator|.
name|format
argument_list|(
literal|"Trying to delete property ''{0}'' with value ''{1}''\n "
operator|+
literal|"but the local value is ''{2}''."
argument_list|,
operator|new
name|Object
index|[]
block|{
name|propName
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|baseValue
argument_list|)
block|,
name|SVNPropertyValue
operator|.
name|getPropertyAsString
argument_list|(
name|workingValue
argument_list|)
block|}
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|status
return|;
block|}
specifier|private
specifier|static
name|SVNStatusType
name|getPropMergeStatus
parameter_list|(
name|SVNStatusType
name|status
parameter_list|,
name|SVNStatusType
name|newStatus
parameter_list|)
block|{
if|if
condition|(
name|status
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|statusInd
init|=
name|STATUS_ORDERING
operator|.
name|indexOf
argument_list|(
name|status
argument_list|)
decl_stmt|;
name|int
name|newStatusInd
init|=
name|STATUS_ORDERING
operator|.
name|indexOf
argument_list|(
name|newStatus
argument_list|)
decl_stmt|;
if|if
condition|(
name|newStatusInd
operator|<=
name|statusInd
condition|)
block|{
return|return
name|status
return|;
block|}
return|return
name|newStatus
return|;
block|}
specifier|private
name|boolean
name|maybeGeneratePropConflict
parameter_list|(
name|String
name|localPath
parameter_list|,
name|String
name|propName
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|SVNPropertyValue
name|oldValue
parameter_list|,
name|SVNPropertyValue
name|newValue
parameter_list|,
name|SVNPropertyValue
name|baseValue
parameter_list|,
name|SVNPropertyValue
name|workingValue
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|boolean
name|isDir
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|conflictRemains
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|myConflictCallback
operator|==
literal|null
operator|||
name|dryRun
condition|)
block|{
return|return
name|conflictRemains
return|;
block|}
name|File
name|path
init|=
name|adminArea
operator|.
name|getFile
argument_list|(
name|localPath
argument_list|)
decl_stmt|;
name|File
name|workingFile
init|=
literal|null
decl_stmt|;
name|File
name|newFile
init|=
literal|null
decl_stmt|;
name|File
name|baseFile
init|=
literal|null
decl_stmt|;
name|File
name|mergedFile
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|workingValue
operator|!=
literal|null
condition|)
block|{
name|workingFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|workingFile
argument_list|)
decl_stmt|;
try|try
block|{
name|os
operator|.
name|write
argument_list|(
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|workingValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write a working property value file: {1}"
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newValue
operator|!=
literal|null
condition|)
block|{
name|newFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|newFile
argument_list|)
decl_stmt|;
try|try
block|{
name|os
operator|.
name|write
argument_list|(
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|newValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write a new property value file: {1}"
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|baseValue
operator|!=
literal|null
operator|&&
name|oldValue
operator|==
literal|null
operator|)
operator|||
operator|(
name|baseValue
operator|==
literal|null
operator|&&
name|oldValue
operator|!=
literal|null
operator|)
condition|)
block|{
name|SVNPropertyValue
name|theValue
init|=
name|baseValue
operator|!=
literal|null
condition|?
name|baseValue
else|:
name|oldValue
decl_stmt|;
name|baseFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|baseFile
argument_list|)
decl_stmt|;
try|try
block|{
name|os
operator|.
name|write
argument_list|(
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|theValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write a base property value file: {1}"
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|baseValue
operator|!=
literal|null
operator|&&
name|oldValue
operator|!=
literal|null
condition|)
block|{
name|SVNPropertyValue
name|theValue
init|=
name|baseValue
decl_stmt|;
if|if
condition|(
operator|!
name|baseValue
operator|.
name|equals
argument_list|(
name|oldValue
argument_list|)
condition|)
block|{
if|if
condition|(
name|workingValue
operator|!=
literal|null
operator|&&
name|baseValue
operator|.
name|equals
argument_list|(
name|workingValue
argument_list|)
condition|)
block|{
name|theValue
operator|=
name|oldValue
expr_stmt|;
block|}
block|}
name|baseFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|baseFile
argument_list|)
decl_stmt|;
try|try
block|{
name|os
operator|.
name|write
argument_list|(
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|theValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write a base property value file: {1}"
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|workingValue
operator|!=
literal|null
operator|&&
name|newValue
operator|!=
literal|null
condition|)
block|{
name|FSMergerBySequence
name|merger
init|=
operator|new
name|FSMergerBySequence
argument_list|(
name|getConflictStartMarker
argument_list|()
argument_list|,
name|getConflictSeparatorMarker
argument_list|()
argument_list|,
name|getConflictEndMarker
argument_list|()
argument_list|)
decl_stmt|;
name|OutputStream
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|mergedFile
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|path
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|mergedFile
argument_list|)
expr_stmt|;
name|QSequenceLineRAData
name|baseData
init|=
operator|new
name|QSequenceLineRAByteData
argument_list|(
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|theValue
argument_list|)
argument_list|)
decl_stmt|;
name|QSequenceLineRAData
name|localData
init|=
operator|new
name|QSequenceLineRAByteData
argument_list|(
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|workingValue
argument_list|)
argument_list|)
decl_stmt|;
name|QSequenceLineRAData
name|latestData
init|=
operator|new
name|QSequenceLineRAByteData
argument_list|(
name|SVNPropertyValue
operator|.
name|getPropertyAsBytes
argument_list|(
name|newValue
argument_list|)
argument_list|)
decl_stmt|;
name|merger
operator|.
name|merge
argument_list|(
name|baseData
argument_list|,
name|localData
argument_list|,
name|latestData
argument_list|,
literal|null
argument_list|,
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|isDir
operator|&&
name|workingProps
operator|!=
literal|null
condition|)
block|{
name|mimeType
operator|=
name|workingProps
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
block|}
name|SVNMergeFileSet
name|fileSet
init|=
operator|new
name|SVNMergeFileSet
argument_list|(
name|adminArea
argument_list|,
name|log
argument_list|,
name|baseFile
argument_list|,
name|workingFile
argument_list|,
name|localPath
argument_list|,
name|newFile
argument_list|,
name|mergedFile
argument_list|,
literal|null
argument_list|,
name|mimeType
argument_list|)
decl_stmt|;
name|SVNConflictAction
name|action
init|=
name|SVNConflictAction
operator|.
name|EDIT
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
operator|&&
name|newValue
operator|!=
literal|null
condition|)
block|{
name|action
operator|=
name|SVNConflictAction
operator|.
name|ADD
expr_stmt|;
block|}
if|else if
condition|(
name|oldValue
operator|!=
literal|null
operator|&&
name|newValue
operator|==
literal|null
condition|)
block|{
name|action
operator|=
name|SVNConflictAction
operator|.
name|DELETE
expr_stmt|;
block|}
name|SVNConflictReason
name|reason
init|=
name|SVNConflictReason
operator|.
name|EDITED
decl_stmt|;
if|if
condition|(
name|baseValue
operator|!=
literal|null
operator|&&
name|workingValue
operator|==
literal|null
condition|)
block|{
name|reason
operator|=
name|SVNConflictReason
operator|.
name|DELETED
expr_stmt|;
block|}
if|else if
condition|(
name|baseValue
operator|==
literal|null
operator|&&
name|workingValue
operator|!=
literal|null
condition|)
block|{
name|reason
operator|=
name|SVNConflictReason
operator|.
name|OBSTRUCTED
expr_stmt|;
block|}
name|SVNConflictDescription
name|description
init|=
operator|new
name|SVNPropertyConflictDescription
argument_list|(
name|fileSet
argument_list|,
name|isDir
condition|?
name|SVNNodeKind
operator|.
name|DIR
else|:
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|propName
argument_list|,
name|action
argument_list|,
name|reason
argument_list|)
decl_stmt|;
name|SVNConflictResult
name|result
init|=
name|myConflictCallback
operator|.
name|handleConflict
argument_list|(
name|description
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CONFLICT_RESOLVER_FAILURE
argument_list|,
literal|"Conflict callback violated API: returned no results."
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNConflictChoice
name|choice
init|=
name|result
operator|.
name|getConflictChoice
argument_list|()
decl_stmt|;
if|if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|MINE_FULL
condition|)
block|{
name|conflictRemains
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|THEIRS_FULL
condition|)
block|{
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|conflictRemains
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|BASE
condition|)
block|{
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|baseValue
argument_list|)
expr_stmt|;
name|conflictRemains
operator|=
literal|false
expr_stmt|;
block|}
if|else if
condition|(
name|choice
operator|==
name|SVNConflictChoice
operator|.
name|MERGED
condition|)
block|{
if|if
condition|(
name|mergedFile
operator|==
literal|null
operator|&&
name|result
operator|.
name|getMergedFile
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CONFLICT_RESOLVER_FAILURE
argument_list|,
literal|"Conflict callback violated API: returned no merged file."
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|String
name|mergedString
init|=
name|SVNFileUtil
operator|.
name|readFile
argument_list|(
name|mergedFile
operator|!=
literal|null
condition|?
name|mergedFile
else|:
name|result
operator|.
name|getMergedFile
argument_list|()
argument_list|)
decl_stmt|;
name|changeProperty
argument_list|(
name|workingProps
argument_list|,
name|propName
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|mergedString
argument_list|)
argument_list|)
expr_stmt|;
name|conflictRemains
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|conflictRemains
return|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|workingFile
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|newFile
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|baseFile
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|mergedFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

