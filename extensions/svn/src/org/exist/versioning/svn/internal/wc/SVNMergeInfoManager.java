begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeInfoInheritance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSFS
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSParentPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSRevisionRoot
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNMergeInfoManager
block|{
specifier|public
name|Map
name|getMergeInfo
parameter_list|(
name|String
index|[]
name|paths
parameter_list|,
name|FSRevisionRoot
name|root
parameter_list|,
name|SVNMergeInfoInheritance
name|inherit
parameter_list|,
name|boolean
name|includeDescendants
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|root
operator|.
name|getOwner
argument_list|()
operator|.
name|supportsMergeInfo
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"Querying mergeinfo requires version {0} of the FSFS filesystem schema;"
operator|+
literal|" filesystem ''{1}'' uses only version {2}"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
name|FSFS
operator|.
name|MIN_MERGE_INFO_FORMAT
argument_list|)
block|,
name|root
operator|.
name|getOwner
argument_list|()
operator|.
name|getDBRoot
argument_list|()
block|,
operator|new
name|Integer
argument_list|(
name|root
operator|.
name|getOwner
argument_list|()
operator|.
name|getDBFormat
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|Map
name|mergeInfoAsHashes
init|=
name|getMergeInfoForPaths
argument_list|(
name|root
argument_list|,
name|paths
argument_list|,
name|inherit
argument_list|,
name|includeDescendants
argument_list|)
decl_stmt|;
name|Map
name|mergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|mergeInfoIter
init|=
name|mergeInfoAsHashes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|mergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
name|pathMergeInfo
init|=
operator|(
name|Map
operator|)
name|mergeInfoAsHashes
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|mergeInfo
operator|.
name|put
argument_list|(
name|path
argument_list|,
operator|new
name|SVNMergeInfo
argument_list|(
name|path
argument_list|,
name|pathMergeInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|mergeInfo
return|;
block|}
specifier|private
name|Map
name|getMergeInfoForPaths
parameter_list|(
name|FSRevisionRoot
name|root
parameter_list|,
name|String
index|[]
name|paths
parameter_list|,
name|SVNMergeInfoInheritance
name|inherit
parameter_list|,
name|boolean
name|includeDescendants
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|result
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|path
init|=
name|paths
index|[
name|i
index|]
decl_stmt|;
name|Map
name|pathMergeInfo
init|=
name|getMergeInfoForPath
argument_list|(
name|root
argument_list|,
name|path
argument_list|,
name|inherit
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathMergeInfo
operator|!=
literal|null
condition|)
block|{
name|result
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|pathMergeInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|includeDescendants
condition|)
block|{
name|addDescendantMergeInfo
argument_list|(
name|result
argument_list|,
name|root
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|addDescendantMergeInfo
parameter_list|(
name|Map
name|result
parameter_list|,
name|FSRevisionRoot
name|root
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSRevisionNode
name|node
init|=
name|root
operator|.
name|getRevisionNode
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|hasDescendantsWithMergeInfo
argument_list|()
condition|)
block|{
name|crawlDirectoryForMergeInfo
argument_list|(
name|root
argument_list|,
name|path
argument_list|,
name|node
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Map
name|crawlDirectoryForMergeInfo
parameter_list|(
name|FSRevisionRoot
name|root
parameter_list|,
name|String
name|path
parameter_list|,
name|FSRevisionNode
name|node
parameter_list|,
name|Map
name|result
parameter_list|)
throws|throws
name|SVNException
block|{
name|FSFS
name|fsfs
init|=
name|root
operator|.
name|getOwner
argument_list|()
decl_stmt|;
name|Map
name|entries
init|=
name|node
operator|.
name|getDirEntries
argument_list|(
name|fsfs
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|entriesIter
init|=
name|entries
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entriesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|FSEntry
name|entry
init|=
operator|(
name|FSEntry
operator|)
name|entriesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|kidPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|FSRevisionNode
name|kidNode
init|=
name|root
operator|.
name|getRevisionNode
argument_list|(
name|kidPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|kidNode
operator|.
name|hasMergeInfo
argument_list|()
condition|)
block|{
name|SVNProperties
name|propList
init|=
name|kidNode
operator|.
name|getProperties
argument_list|(
name|fsfs
argument_list|)
decl_stmt|;
name|String
name|mergeInfoString
init|=
name|propList
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfoString
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_CORRUPT
argument_list|,
literal|"Node-revision #''{0}'' claims to have mergeinfo but doesn''t"
argument_list|,
name|entry
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|Map
name|kidMergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|mergeInfoString
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|kidPath
argument_list|,
name|kidMergeInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|kidNode
operator|.
name|hasDescendantsWithMergeInfo
argument_list|()
condition|)
block|{
name|crawlDirectoryForMergeInfo
argument_list|(
name|root
argument_list|,
name|kidPath
argument_list|,
name|kidNode
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Map
name|getMergeInfoForPath
parameter_list|(
name|FSRevisionRoot
name|revRoot
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNMergeInfoInheritance
name|inherit
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|mergeInfo
init|=
literal|null
decl_stmt|;
name|path
operator|=
name|SVNPathUtil
operator|.
name|canonicalizeAbsolutePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|FSParentPath
name|parentPath
init|=
name|revRoot
operator|.
name|openPath
argument_list|(
name|path
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|inherit
operator|==
name|SVNMergeInfoInheritance
operator|.
name|NEAREST_ANCESTOR
operator|&&
name|parentPath
operator|.
name|getParent
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|mergeInfo
return|;
block|}
name|FSParentPath
name|nearestAncestor
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|inherit
operator|==
name|SVNMergeInfoInheritance
operator|.
name|NEAREST_ANCESTOR
condition|)
block|{
name|nearestAncestor
operator|=
name|parentPath
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|nearestAncestor
operator|=
name|parentPath
expr_stmt|;
block|}
name|FSFS
name|fsfs
init|=
name|revRoot
operator|.
name|getOwner
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|boolean
name|hasMergeInfo
init|=
name|nearestAncestor
operator|.
name|getRevNode
argument_list|()
operator|.
name|hasMergeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasMergeInfo
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|inherit
operator|==
name|SVNMergeInfoInheritance
operator|.
name|EXPLICIT
condition|)
block|{
return|return
name|mergeInfo
return|;
block|}
name|nearestAncestor
operator|=
name|nearestAncestor
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|nearestAncestor
operator|==
literal|null
condition|)
block|{
return|return
name|mergeInfo
return|;
block|}
block|}
name|SVNProperties
name|propList
init|=
name|nearestAncestor
operator|.
name|getRevNode
argument_list|()
operator|.
name|getProperties
argument_list|(
name|fsfs
argument_list|)
decl_stmt|;
name|String
name|mergeInfoString
init|=
name|propList
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfoString
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|FS_CORRUPT
argument_list|,
literal|"Node-revision ''{0}@{1}'' claims to have mergeinfo but doesn''t"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|nearestAncestor
operator|.
name|getAbsPath
argument_list|()
block|,
operator|new
name|Long
argument_list|(
name|revRoot
operator|.
name|getRevision
argument_list|()
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nearestAncestor
operator|==
name|parentPath
condition|)
block|{
return|return
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|mergeInfoString
argument_list|)
argument_list|,
literal|null
argument_list|)
return|;
block|}
name|Map
name|tmpMergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|mergeInfoString
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|tmpMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|getInheritableMergeInfo
argument_list|(
name|tmpMergeInfo
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
expr_stmt|;
name|mergeInfo
operator|=
name|appendToMergedFroms
argument_list|(
name|tmpMergeInfo
argument_list|,
name|parentPath
operator|.
name|getRelativePath
argument_list|(
name|nearestAncestor
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|mergeInfo
return|;
block|}
specifier|private
name|Map
name|appendToMergedFroms
parameter_list|(
name|Map
name|mergeInfo
parameter_list|,
name|String
name|pathComponent
parameter_list|)
block|{
name|Map
name|result
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|pathsIter
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|pathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|pathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|pathComponent
argument_list|)
argument_list|,
name|rangeList
operator|.
name|dup
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

