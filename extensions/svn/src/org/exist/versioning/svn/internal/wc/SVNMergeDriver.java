begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ListIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|ISVNEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNBasicClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNDiffClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEventAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNLogClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNLogEntryHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDirEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLogEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNLogEntryPath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeInfoInheritance
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNMergeRangeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNMergeInfoUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNURLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNReusableEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNReporterBaton
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNCapability
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNLocationEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNLocationSegment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNRepositoryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevisionRange
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SVNMergeDriver
extends|extends
name|SVNBasicClient
implements|implements
name|ISVNMergeStrategy
block|{
specifier|protected
name|boolean
name|myAreSourcesAncestral
decl_stmt|;
specifier|protected
name|boolean
name|myIsSameRepository
decl_stmt|;
specifier|protected
name|boolean
name|myIsDryRun
decl_stmt|;
specifier|protected
name|boolean
name|myIsRecordOnly
decl_stmt|;
specifier|protected
name|boolean
name|myIsForce
decl_stmt|;
specifier|protected
name|boolean
name|myIsTargetMissingChild
decl_stmt|;
specifier|protected
name|boolean
name|myHasExistingMergeInfo
decl_stmt|;
specifier|protected
name|boolean
name|myIsTargetHasDummyMergeRange
decl_stmt|;
specifier|protected
name|boolean
name|myIsIgnoreAncestry
decl_stmt|;
specifier|protected
name|boolean
name|myIsSingleFileMerge
decl_stmt|;
specifier|protected
name|boolean
name|myIsMergeInfoCapable
decl_stmt|;
specifier|protected
name|boolean
name|myIsReIntegrateMerge
decl_stmt|;
specifier|protected
name|boolean
name|myIsAddNecessitatedMerge
decl_stmt|;
specifier|protected
name|int
name|myOperativeNotificationsNumber
decl_stmt|;
specifier|protected
name|int
name|myNotificationsNumber
decl_stmt|;
specifier|protected
name|int
name|myCurrentAncestorIndex
decl_stmt|;
specifier|protected
name|Map
name|myConflictedPaths
decl_stmt|;
specifier|protected
name|Map
name|myDryRunDeletions
decl_stmt|;
specifier|protected
name|SVNURL
name|myURL
decl_stmt|;
specifier|protected
name|File
name|myTarget
decl_stmt|;
specifier|private
name|List
name|myMergedPaths
decl_stmt|;
specifier|private
name|List
name|mySkippedPaths
decl_stmt|;
specifier|private
name|List
name|myChildrenWithMergeInfo
decl_stmt|;
specifier|private
name|List
name|myAddedPaths
decl_stmt|;
specifier|protected
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|protected
name|SVNRepository
name|myRepository1
decl_stmt|;
specifier|protected
name|SVNRepository
name|myRepository2
decl_stmt|;
specifier|private
name|SVNLogClient
name|myLogClient
decl_stmt|;
specifier|private
name|List
name|myPathsWithNewMergeInfo
decl_stmt|;
specifier|private
name|LinkedList
name|myPathsWithDeletedMergeInfo
decl_stmt|;
specifier|private
name|MergeSource
name|myCurrentMergeSource
decl_stmt|;
specifier|private
name|SVNMergeRangeList
name|myImplicitSrcGap
decl_stmt|;
specifier|public
name|SVNMergeDriver
parameter_list|(
name|ISVNAuthenticationManager
name|authManager
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|authManager
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|SVNMergeDriver
parameter_list|(
name|ISVNRepositoryPool
name|repositoryPool
parameter_list|,
name|ISVNOptions
name|options
parameter_list|)
block|{
name|super
argument_list|(
name|repositoryPool
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|SVNDiffOptions
name|getMergeOptions
parameter_list|()
function_decl|;
comment|/**      * @param  path       * @param  pegRevision       * @param  mergeSrcURL       * @param  srcPegRevision       * @param  discoverChangedPaths       * @param  revisionProperties       * @param  handler       * @throws SVNException       * @deprecated                    use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetLogMergedMergeInfo(File, SVNRevision, SVNURL, SVNRevision, boolean, String[], ISVNLogEntryHandler)}      *                                instead      */
specifier|public
name|void
name|getLogMergedMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
name|diffClient
operator|.
name|doGetLogMergedMergeInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcURL
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param  url       * @param  pegRevision       * @param  mergeSrcURL       * @param  srcPegRevision       * @param  discoverChangedPaths       * @param  revisionProperties       * @param  handler       * @throws SVNException       * @deprecated                   use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetLogMergedMergeInfo(SVNURL, SVNRevision, SVNURL, SVNRevision, boolean, String[], ISVNLogEntryHandler)}      *                               instead      */
specifier|public
name|void
name|getLogMergedMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
name|diffClient
operator|.
name|doGetLogMergedMergeInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcURL
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param  path       * @param  pegRevision       * @param  mergeSrcPath       * @param  srcPegRevision       * @param  discoverChangedPaths       * @param  revisionProperties       * @param  handler       * @throws SVNException       * @deprecated                    use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetLogMergedMergeInfo(File, SVNRevision, File, SVNRevision, boolean, String[], ISVNLogEntryHandler)}      *                                instead      */
specifier|public
name|void
name|getLogMergedMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
name|diffClient
operator|.
name|doGetLogMergedMergeInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcPath
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param  url       * @param  pegRevision       * @param  mergeSrcPath       * @param  srcPegRevision       * @param  discoverChangedPaths       * @param  revisionProperties       * @param  handler       * @throws SVNException       * @deprecated                   use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetLogMergedMergeInfo(SVNURL, SVNRevision, File, SVNRevision, boolean, String[], ISVNLogEntryHandler)}      *                               instead      */
specifier|public
name|void
name|getLogMergedMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
name|diffClient
operator|.
name|doGetLogMergedMergeInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcPath
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param  path       * @param  pegRevision       * @param  mergeSrcURL       * @param  srcPegRevision       * @param  discoverChangedPaths       * @param  revisionProperties       * @param  handler       * @throws SVNException      * @deprecated                    use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetLogEligibleMergeInfo(File, SVNRevision, SVNURL, SVNRevision, boolean, String[], ISVNLogEntryHandler)}      *                                instead        */
specifier|public
name|void
name|getLogEligibleMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
name|diffClient
operator|.
name|doGetLogEligibleMergeInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcURL
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param  url       * @param  pegRevision       * @param  mergeSrcURL       * @param  srcPegRevision       * @param  discoverChangedPaths       * @param  revisionProperties       * @param  handler       * @throws SVNException       * @deprecated                    use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetLogEligibleMergeInfo(SVNURL, SVNRevision, SVNURL, SVNRevision, boolean, String[], ISVNLogEntryHandler)}      *                                instead      */
specifier|public
name|void
name|getLogEligibleMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|mergeSrcURL
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
name|diffClient
operator|.
name|doGetLogEligibleMergeInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcURL
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param  path       * @param  pegRevision       * @param  mergeSrcPath       * @param  srcPegRevision       * @param  discoverChangedPaths       * @param  revisionProperties       * @param  handler       * @throws SVNException       * @deprecated                    use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetLogEligibleMergeInfo(File, SVNRevision, File, SVNRevision, boolean, String[], ISVNLogEntryHandler)}      *                                instead      */
specifier|public
name|void
name|getLogEligibleMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
name|diffClient
operator|.
name|doGetLogEligibleMergeInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcPath
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param  url       * @param  pegRevision       * @param  mergeSrcPath       * @param  srcPegRevision       * @param  discoverChangedPaths       * @param  revisionProperties       * @param  handler       * @throws SVNException       * @deprecated                     use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetLogEligibleMergeInfo(SVNURL, SVNRevision, File, SVNRevision, boolean, String[], ISVNLogEntryHandler)}      *                                 instead      */
specifier|public
name|void
name|getLogEligibleMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|mergeSrcPath
parameter_list|,
name|SVNRevision
name|srcPegRevision
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revisionProperties
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
name|diffClient
operator|.
name|doGetLogEligibleMergeInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|,
name|mergeSrcPath
argument_list|,
name|srcPegRevision
argument_list|,
name|discoverChangedPaths
argument_list|,
name|revisionProperties
argument_list|,
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @param  path       * @param  pegRevision       * @return                mergeinfo      * @throws SVNException       * @deprecated            use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetMergedMergeInfo(File, SVNRevision)}      *                        instead      */
specifier|public
name|Map
name|getMergedMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
return|return
name|diffClient
operator|.
name|doGetMergedMergeInfo
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param  url       * @param  pegRevision       * @return                   mergeinfo      * @throws SVNException       * @deprecated               use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doGetMergedMergeInfo(SVNURL, SVNRevision)}      *                           instead      */
specifier|public
name|Map
name|getMergedMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
return|return
name|diffClient
operator|.
name|doGetMergedMergeInfo
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param  path       * @param  pegRevision       * @return                mergeinfo      * @throws SVNException       * @deprecate             use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doSuggestMergeSources(File, SVNRevision)}      *                        instead      */
specifier|public
name|Collection
name|suggestMergeSources
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
return|return
name|diffClient
operator|.
name|doSuggestMergeSources
argument_list|(
name|path
argument_list|,
name|pegRevision
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * @param  url       * @param  pegRevision       * @return                mergeinfo      * @throws SVNException       * @deprecated            use {@link org.tmatesoft.svn.core.wc.SVNDiffClient#doSuggestMergeSources(SVNURL, SVNRevision)}      *                        instead      */
specifier|public
name|Collection
name|suggestMergeSources
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|this
operator|instanceof
name|SVNDiffClient
condition|)
block|{
name|SVNDiffClient
name|diffClient
init|=
operator|(
name|SVNDiffClient
operator|)
name|this
decl_stmt|;
return|return
name|diffClient
operator|.
name|doSuggestMergeSources
argument_list|(
name|url
argument_list|,
name|pegRevision
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|isOperativeNotification
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isOperativeNotification
argument_list|(
name|event
argument_list|)
condition|)
block|{
name|myOperativeNotificationsNumber
operator|++
expr_stmt|;
name|isOperativeNotification
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|myAreSourcesAncestral
condition|)
block|{
name|myNotificationsNumber
operator|++
expr_stmt|;
if|if
condition|(
operator|!
name|myIsSingleFileMerge
operator|&&
name|isOperativeNotification
condition|)
block|{
name|Object
name|childrenWithMergeInfoArray
index|[]
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myChildrenWithMergeInfo
operator|!=
literal|null
condition|)
block|{
name|childrenWithMergeInfoArray
operator|=
name|myChildrenWithMergeInfo
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
name|int
name|newNearestAncestorIndex
init|=
name|findNearestAncestor
argument_list|(
name|childrenWithMergeInfoArray
argument_list|,
name|event
operator|.
name|getAction
argument_list|()
operator|!=
name|SVNEventAction
operator|.
name|UPDATE_DELETE
argument_list|,
name|event
operator|.
name|getFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newNearestAncestorIndex
operator|!=
name|myCurrentAncestorIndex
condition|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfoArray
index|[
name|newNearestAncestorIndex
index|]
decl_stmt|;
name|myCurrentAncestorIndex
operator|=
name|newNearestAncestorIndex
expr_stmt|;
if|if
condition|(
operator|!
name|child
operator|.
name|myIsAbsent
operator|&&
operator|!
name|child
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
operator|(
name|newNearestAncestorIndex
operator|==
literal|0
operator|&&
name|myIsTargetHasDummyMergeRange
operator|)
condition|)
block|{
name|SVNMergeRange
name|ranges
index|[]
init|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNEvent
name|mergeBeginEvent
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|child
operator|.
name|myPath
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|myIsSameRepository
condition|?
name|SVNEventAction
operator|.
name|MERGE_BEGIN
else|:
name|SVNEventAction
operator|.
name|FOREIGN_MERGE_BEGIN
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|ranges
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|super
operator|.
name|handleEvent
argument_list|(
name|mergeBeginEvent
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|event
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|MERGED
operator|||
name|event
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|CHANGED
operator|||
name|event
operator|.
name|getPropertiesStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|MERGED
operator|||
name|event
operator|.
name|getPropertiesStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|CHANGED
operator|||
name|event
operator|.
name|getAction
argument_list|()
operator|==
name|SVNEventAction
operator|.
name|UPDATE_ADD
condition|)
block|{
name|File
name|mergedPath
init|=
name|event
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|myMergedPaths
operator|==
literal|null
condition|)
block|{
name|myMergedPaths
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
name|myMergedPaths
operator|.
name|add
argument_list|(
name|mergedPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|event
operator|.
name|getAction
argument_list|()
operator|==
name|SVNEventAction
operator|.
name|SKIP
condition|)
block|{
name|File
name|skippedPath
init|=
name|event
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|mySkippedPaths
operator|==
literal|null
condition|)
block|{
name|mySkippedPaths
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
name|mySkippedPaths
operator|.
name|add
argument_list|(
name|skippedPath
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|event
operator|.
name|getAction
argument_list|()
operator|==
name|SVNEventAction
operator|.
name|UPDATE_ADD
condition|)
block|{
name|boolean
name|isRootOfAddedSubTree
init|=
literal|false
decl_stmt|;
name|File
name|addedPath
init|=
name|event
operator|.
name|getFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|myAddedPaths
operator|==
literal|null
condition|)
block|{
name|isRootOfAddedSubTree
operator|=
literal|true
expr_stmt|;
name|myAddedPaths
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|File
name|addedPathParent
init|=
name|addedPath
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|isRootOfAddedSubTree
operator|=
operator|!
name|myAddedPaths
operator|.
name|contains
argument_list|(
name|addedPathParent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRootOfAddedSubTree
condition|)
block|{
name|myAddedPaths
operator|.
name|add
argument_list|(
name|addedPath
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
operator|!
name|myIsSingleFileMerge
operator|&&
name|myOperativeNotificationsNumber
operator|==
literal|1
operator|&&
name|isOperativeNotification
condition|)
block|{
name|SVNEvent
name|mergeBeginEvent
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|myTarget
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|myIsSameRepository
condition|?
name|SVNEventAction
operator|.
name|MERGE_BEGIN
else|:
name|SVNEventAction
operator|.
name|FOREIGN_MERGE_BEGIN
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|super
operator|.
name|handleEvent
argument_list|(
name|mergeBeginEvent
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|progress
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
name|super
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|SVNLocationEntry
name|getCopySource
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
index|[]
name|pegRev
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
name|SVNRepository
name|repos
init|=
name|createRepository
argument_list|(
name|url
argument_list|,
name|path
argument_list|,
literal|null
argument_list|,
name|revision
argument_list|,
name|revision
argument_list|,
name|pegRev
argument_list|)
decl_stmt|;
name|SVNLocationEntry
name|copyFromEntry
init|=
literal|null
decl_stmt|;
name|String
name|targetPath
init|=
name|getPathRelativeToRoot
argument_list|(
name|path
argument_list|,
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|repos
argument_list|)
decl_stmt|;
name|CopyFromReceiver
name|receiver
init|=
operator|new
name|CopyFromReceiver
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
try|try
block|{
name|repos
operator|.
name|log
argument_list|(
operator|new
name|String
index|[]
block|{
literal|""
block|}
argument_list|,
name|pegRev
index|[
literal|0
index|]
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
name|copyFromEntry
operator|=
name|receiver
operator|.
name|getCopyFromLocation
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNErrorCode
name|errCode
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|errCode
operator|==
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
operator|||
name|errCode
operator|==
name|SVNErrorCode
operator|.
name|RA_DAV_REQUEST_FAILED
condition|)
block|{
return|return
operator|new
name|SVNLocationEntry
argument_list|(
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
literal|null
argument_list|)
return|;
block|}
throw|throw
name|e
throw|;
block|}
return|return
name|copyFromEntry
operator|==
literal|null
condition|?
operator|new
name|SVNLocationEntry
argument_list|(
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
literal|null
argument_list|)
else|:
name|copyFromEntry
return|;
block|}
specifier|protected
name|void
name|getLogsForMergeInfoRangeList
parameter_list|(
name|SVNURL
name|reposRootURL
parameter_list|,
name|String
index|[]
name|paths
parameter_list|,
name|SVNMergeRangeList
name|rangeList
parameter_list|,
name|boolean
name|discoverChangedPaths
parameter_list|,
name|String
index|[]
name|revProps
parameter_list|,
name|ISVNLogEntryHandler
name|handler
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|rangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|SVNMergeRange
index|[]
name|listRanges
init|=
name|rangeList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|Arrays
operator|.
name|sort
argument_list|(
name|listRanges
argument_list|)
expr_stmt|;
name|SVNMergeRange
name|youngestRange
init|=
name|listRanges
index|[
name|listRanges
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|SVNRevision
name|youngestRev
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|youngestRange
operator|.
name|getEndRevision
argument_list|()
argument_list|)
decl_stmt|;
name|SVNMergeRange
name|oldestRange
init|=
name|listRanges
index|[
literal|0
index|]
decl_stmt|;
name|SVNRevision
name|oldestRev
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|oldestRange
operator|.
name|getStartRevision
argument_list|()
argument_list|)
decl_stmt|;
name|LogHandlerFilter
name|filterHandler
init|=
operator|new
name|LogHandlerFilter
argument_list|(
name|handler
argument_list|,
name|rangeList
argument_list|)
decl_stmt|;
name|SVNLogClient
name|logClient
init|=
name|getLogClient
argument_list|()
decl_stmt|;
name|logClient
operator|.
name|doLog
argument_list|(
name|reposRootURL
argument_list|,
name|paths
argument_list|,
name|youngestRev
argument_list|,
name|oldestRev
argument_list|,
name|youngestRev
argument_list|,
literal|false
argument_list|,
name|discoverChangedPaths
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
name|revProps
argument_list|,
name|filterHandler
argument_list|)
expr_stmt|;
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Map
name|getMergeInfo
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|repositoryRoot
index|[]
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|createWCAccess
argument_list|()
decl_stmt|;
try|try
block|{
name|SVNAdminArea
name|adminArea
init|=
name|wcAccess
operator|.
name|probeOpen
argument_list|(
name|path
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|wcAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|long
name|revNum
index|[]
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
name|SVNURL
name|url
init|=
name|getEntryLocation
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|revNum
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|)
decl_stmt|;
name|SVNRepository
name|repository
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repository
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|repository
operator|.
name|assertServerIsMergeInfoCapable
argument_list|(
name|path
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repository
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
name|SVNURL
name|reposRoot
init|=
name|getReposRoot
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|adminArea
argument_list|,
name|wcAccess
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoryRoot
operator|!=
literal|null
operator|&&
name|repositoryRoot
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|repositoryRoot
index|[
literal|0
index|]
operator|=
name|reposRoot
expr_stmt|;
block|}
name|boolean
index|[]
name|indirect
init|=
block|{
literal|false
block|}
decl_stmt|;
return|return
name|getWCOrRepositoryMergeInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
argument_list|,
name|indirect
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|wcAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|Map
name|getMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNURL
name|repositoryRoot
index|[]
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRepository
name|repository
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repository
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|long
name|revisionNum
init|=
name|getRevisionNumber
argument_list|(
name|pegRevision
argument_list|,
name|repository
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNURL
name|reposRoot
init|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|repositoryRoot
operator|!=
literal|null
operator|&&
name|repositoryRoot
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|repositoryRoot
index|[
literal|0
index|]
operator|=
name|reposRoot
expr_stmt|;
block|}
name|String
name|relPath
init|=
name|getPathRelativeToSession
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|relPath
operator|==
literal|null
condition|)
block|{
name|repository
operator|.
name|setLocation
argument_list|(
name|url
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|relPath
operator|=
literal|""
expr_stmt|;
block|}
return|return
name|getReposMergeInfo
argument_list|(
name|repository
argument_list|,
name|relPath
argument_list|,
name|revisionNum
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
argument_list|,
literal|false
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|repository
operator|!=
literal|null
condition|)
block|{
name|repository
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|runPeggedMerge
parameter_list|(
name|SVNURL
name|srcURL
parameter_list|,
name|File
name|srcPath
parameter_list|,
name|Collection
name|rangesToMerge
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|targetWCPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|ignoreAncestry
parameter_list|,
name|boolean
name|recordOnly
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|rangesToMerge
operator|==
literal|null
operator|||
name|rangesToMerge
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
name|myWCAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
name|targetWCPath
operator|=
name|targetWCPath
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
try|try
block|{
name|SVNAdminArea
name|adminArea
init|=
name|myWCAccess
operator|.
name|probeOpen
argument_list|(
name|targetWCPath
argument_list|,
operator|!
name|dryRun
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNEntry
name|targetEntry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|targetWCPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|url
init|=
name|srcURL
operator|==
literal|null
condition|?
name|getURL
argument_list|(
name|srcPath
argument_list|)
else|:
name|srcURL
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|wcReposRoot
init|=
name|getReposRoot
argument_list|(
name|targetWCPath
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
name|adminArea
argument_list|,
name|myWCAccess
argument_list|)
decl_stmt|;
name|List
name|mergeSources
init|=
literal|null
decl_stmt|;
name|SVNRepository
name|repository
init|=
literal|null
decl_stmt|;
name|SVNURL
name|sourceReposRoot
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repository
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sourceReposRoot
operator|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mergeSources
operator|=
name|normalizeMergeSources
argument_list|(
name|srcPath
argument_list|,
name|url
argument_list|,
name|sourceReposRoot
argument_list|,
name|pegRevision
argument_list|,
name|rangesToMerge
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repository
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
name|doMerge
argument_list|(
name|mergeSources
argument_list|,
name|targetWCPath
argument_list|,
name|targetEntry
argument_list|,
name|adminArea
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|wcReposRoot
operator|.
name|equals
argument_list|(
name|sourceReposRoot
argument_list|)
argument_list|,
name|ignoreAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
name|recordOnly
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|myWCAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|runMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|SVNRevision
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|SVNRevision
name|revision2
parameter_list|,
name|File
name|targetWCPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|ignoreAncestry
parameter_list|,
name|boolean
name|recordOnly
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|revision1
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|revision2
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Not all required revisions are specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNRepository
name|repository1
init|=
literal|null
decl_stmt|;
name|SVNRepository
name|repository2
init|=
literal|null
decl_stmt|;
name|myWCAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
name|targetWCPath
operator|=
name|targetWCPath
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
try|try
block|{
name|SVNAdminArea
name|adminArea
init|=
name|myWCAccess
operator|.
name|probeOpen
argument_list|(
name|targetWCPath
argument_list|,
operator|!
name|dryRun
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|targetWCPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|wcReposRoot
init|=
name|getReposRoot
argument_list|(
name|targetWCPath
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
name|adminArea
argument_list|,
name|myWCAccess
argument_list|)
decl_stmt|;
name|long
index|[]
name|latestRev
init|=
operator|new
name|long
index|[
literal|1
index|]
decl_stmt|;
name|latestRev
index|[
literal|0
index|]
operator|=
name|SVNRepository
operator|.
name|INVALID_REVISION
expr_stmt|;
name|repository1
operator|=
name|createRepository
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNURL
name|sourceReposRoot
init|=
name|repository1
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|long
name|rev1
init|=
name|getRevisionNumber
argument_list|(
name|revision1
argument_list|,
name|latestRev
argument_list|,
name|repository1
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|repository2
operator|=
name|createRepository
argument_list|(
name|url2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|long
name|rev2
init|=
name|getRevisionNumber
argument_list|(
name|revision2
argument_list|,
name|latestRev
argument_list|,
name|repository2
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|boolean
name|sameRepos
init|=
name|sourceReposRoot
operator|.
name|equals
argument_list|(
name|wcReposRoot
argument_list|)
decl_stmt|;
name|String
name|youngestCommonPath
init|=
literal|null
decl_stmt|;
name|long
name|youngestCommonRevision
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
if|if
condition|(
operator|!
name|ignoreAncestry
condition|)
block|{
name|SVNLocationEntry
name|youngestLocation
init|=
name|getYoungestCommonAncestor
argument_list|(
literal|null
argument_list|,
name|url1
argument_list|,
name|rev1
argument_list|,
literal|null
argument_list|,
name|url2
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|youngestCommonPath
operator|=
name|youngestLocation
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|youngestCommonRevision
operator|=
name|youngestLocation
operator|.
name|getRevision
argument_list|()
expr_stmt|;
block|}
name|boolean
name|related
init|=
literal|false
decl_stmt|;
name|boolean
name|ancestral
init|=
literal|false
decl_stmt|;
name|List
name|mergeSources
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|youngestCommonPath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestCommonRevision
argument_list|)
condition|)
block|{
name|SVNRevisionRange
name|range
init|=
literal|null
decl_stmt|;
name|List
name|ranges
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|related
operator|=
literal|true
expr_stmt|;
name|SVNURL
name|youngestCommonURL
init|=
name|sourceReposRoot
operator|.
name|appendPath
argument_list|(
name|youngestCommonPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|youngestCommonURL
operator|.
name|equals
argument_list|(
name|url2
argument_list|)
operator|&&
name|youngestCommonRevision
operator|==
name|rev2
condition|)
block|{
name|ancestral
operator|=
literal|true
expr_stmt|;
name|SVNRevision
name|sRev
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|rev1
argument_list|)
decl_stmt|;
name|SVNRevision
name|eRev
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|youngestCommonRevision
argument_list|)
decl_stmt|;
name|range
operator|=
operator|new
name|SVNRevisionRange
argument_list|(
name|sRev
argument_list|,
name|eRev
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|mergeSources
operator|=
name|normalizeMergeSources
argument_list|(
literal|null
argument_list|,
name|url1
argument_list|,
name|sourceReposRoot
argument_list|,
name|sRev
argument_list|,
name|ranges
argument_list|,
name|repository1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|youngestCommonURL
operator|.
name|equals
argument_list|(
name|url1
argument_list|)
operator|&&
name|youngestCommonRevision
operator|==
name|rev1
condition|)
block|{
name|ancestral
operator|=
literal|true
expr_stmt|;
name|SVNRevision
name|sRev
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|youngestCommonRevision
argument_list|)
decl_stmt|;
name|SVNRevision
name|eRev
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|rev2
argument_list|)
decl_stmt|;
name|range
operator|=
operator|new
name|SVNRevisionRange
argument_list|(
name|sRev
argument_list|,
name|eRev
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|mergeSources
operator|=
name|normalizeMergeSources
argument_list|(
literal|null
argument_list|,
name|url2
argument_list|,
name|sourceReposRoot
argument_list|,
name|eRev
argument_list|,
name|ranges
argument_list|,
name|repository2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mergeCousinsAndSupplementMergeInfo
argument_list|(
name|targetWCPath
argument_list|,
name|entry
argument_list|,
name|adminArea
argument_list|,
name|repository1
argument_list|,
name|url1
argument_list|,
name|rev1
argument_list|,
name|url2
argument_list|,
name|rev2
argument_list|,
name|youngestCommonRevision
argument_list|,
name|sourceReposRoot
argument_list|,
name|wcReposRoot
argument_list|,
name|depth
argument_list|,
name|ignoreAncestry
argument_list|,
name|force
argument_list|,
name|recordOnly
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|MergeSource
name|mergeSrc
init|=
operator|new
name|MergeSource
argument_list|()
decl_stmt|;
name|mergeSrc
operator|.
name|myURL1
operator|=
name|url1
expr_stmt|;
name|mergeSrc
operator|.
name|myURL2
operator|=
name|url2
expr_stmt|;
name|mergeSrc
operator|.
name|myRevision1
operator|=
name|rev1
expr_stmt|;
name|mergeSrc
operator|.
name|myRevision2
operator|=
name|rev2
expr_stmt|;
name|mergeSources
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
name|mergeSources
operator|.
name|add
argument_list|(
name|mergeSrc
argument_list|)
expr_stmt|;
block|}
name|repository1
operator|.
name|closeSession
argument_list|()
expr_stmt|;
name|repository2
operator|.
name|closeSession
argument_list|()
expr_stmt|;
name|doMerge
argument_list|(
name|mergeSources
argument_list|,
name|targetWCPath
argument_list|,
name|entry
argument_list|,
name|adminArea
argument_list|,
name|ancestral
argument_list|,
name|related
argument_list|,
name|sameRepos
argument_list|,
name|ignoreAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
name|recordOnly
argument_list|,
literal|false
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|repository1
operator|!=
literal|null
condition|)
block|{
name|repository1
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|repository2
operator|!=
literal|null
condition|)
block|{
name|repository2
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
try|try
block|{
name|myWCAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
comment|//
block|}
block|}
block|}
specifier|protected
name|void
name|runMergeReintegrate
parameter_list|(
name|SVNURL
name|srcURL
parameter_list|,
name|File
name|srcPath
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|File
name|targetWCPath
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|myWCAccess
operator|=
name|createWCAccess
argument_list|()
expr_stmt|;
name|targetWCPath
operator|=
name|targetWCPath
operator|.
name|getAbsoluteFile
argument_list|()
expr_stmt|;
try|try
block|{
name|SVNAdminArea
name|adminArea
init|=
name|myWCAccess
operator|.
name|probeOpen
argument_list|(
name|targetWCPath
argument_list|,
operator|!
name|dryRun
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
name|SVNEntry
name|targetEntry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|targetWCPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|url2
init|=
name|srcURL
operator|==
literal|null
condition|?
name|getURL
argument_list|(
name|srcPath
argument_list|)
else|:
name|srcURL
decl_stmt|;
if|if
condition|(
name|url2
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"''{0}'' has no URL"
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNURL
name|wcReposRoot
init|=
name|getReposRoot
argument_list|(
name|targetWCPath
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
name|adminArea
argument_list|,
name|myWCAccess
argument_list|)
decl_stmt|;
name|SVNRepository
name|repository
init|=
literal|null
decl_stmt|;
name|SVNURL
name|sourceReposRoot
init|=
literal|null
decl_stmt|;
try|try
block|{
name|repository
operator|=
name|createRepository
argument_list|(
name|wcReposRoot
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|sourceReposRoot
operator|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wcReposRoot
operator|.
name|equals
argument_list|(
name|sourceReposRoot
argument_list|)
condition|)
block|{
name|Object
name|source
init|=
name|srcPath
decl_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
name|source
operator|=
name|srcURL
expr_stmt|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_UNRELATED_RESOURCES
argument_list|,
literal|"''{0}'' must be from the same repository as ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|source
block|,
name|targetWCPath
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|ensureWCReflectsRepositorySubTree
argument_list|(
name|targetWCPath
argument_list|)
expr_stmt|;
name|long
index|[]
name|rev1
init|=
block|{
name|targetEntry
operator|.
name|getRevision
argument_list|()
block|}
decl_stmt|;
name|String
name|sourceReposRelPath
init|=
name|getPathRelativeToRoot
argument_list|(
literal|null
argument_list|,
name|url2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|String
name|targetReposRelPath
init|=
name|getPathRelativeToRoot
argument_list|(
name|targetWCPath
argument_list|,
literal|null
argument_list|,
name|wcReposRoot
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|SubTreeMergeInfoHandler
name|handler
init|=
operator|new
name|SubTreeMergeInfoHandler
argument_list|(
name|targetWCPath
argument_list|,
name|wcReposRoot
argument_list|)
decl_stmt|;
name|myWCAccess
operator|.
name|walkEntries
argument_list|(
name|targetWCPath
argument_list|,
name|handler
argument_list|,
literal|true
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
name|long
name|rev2
init|=
name|getRevisionNumber
argument_list|(
name|pegRevision
argument_list|,
name|repository
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|SVNURL
index|[]
name|url1
init|=
block|{
literal|null
block|}
decl_stmt|;
name|Map
name|unmergedToSourceMergeInfoCatalog
init|=
name|calculateLeftHandSide
argument_list|(
name|url1
argument_list|,
name|rev1
argument_list|,
name|targetReposRelPath
argument_list|,
name|handler
operator|.
name|getSubTreesWithMergeInfoPaths
argument_list|()
argument_list|,
name|rev1
index|[
literal|0
index|]
argument_list|,
name|sourceReposRelPath
argument_list|,
name|sourceReposRoot
argument_list|,
name|rev2
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|SVNLocationEntry
name|youngestCommonAncestor
init|=
name|getYoungestCommonAncestor
argument_list|(
literal|null
argument_list|,
name|url2
argument_list|,
name|rev2
argument_list|,
literal|null
argument_list|,
name|url1
index|[
literal|0
index|]
argument_list|,
name|rev1
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|String
name|youngestAncestorPath
init|=
name|youngestCommonAncestor
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|youngestAncestorRevision
init|=
name|youngestCommonAncestor
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|youngestAncestorPath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestAncestorRevision
argument_list|)
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"''{0}@{1}'' must be ancestrally related to ''{2}@{3}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|url1
index|[
literal|0
index|]
block|,
operator|new
name|Long
argument_list|(
name|rev1
index|[
literal|0
index|]
argument_list|)
block|,
name|url2
block|,
operator|new
name|Long
argument_list|(
name|rev2
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rev1
index|[
literal|0
index|]
operator|>
name|youngestAncestorRevision
condition|)
block|{
try|try
block|{
name|ensureAllMissingRangesArePhantoms
argument_list|(
name|repository
argument_list|,
name|unmergedToSourceMergeInfoCatalog
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
condition|)
block|{
name|String
name|srcMergeInfoCatalogString
init|=
name|SVNMergeInfoUtil
operator|.
name|formatMergeInfoCatalogToString
argument_list|(
name|unmergedToSourceMergeInfoCatalog
argument_list|,
literal|"  "
argument_list|,
literal|"    Missing ranges: "
argument_list|)
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"Reintegrate can only be used if revisions {0} through {1} were "
operator|+
literal|"previously merged from {2} to the reintegrate source, but this is not the case:\n{3}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|String
operator|.
name|valueOf
argument_list|(
name|youngestAncestorRevision
operator|+
literal|1
argument_list|)
block|,
name|String
operator|.
name|valueOf
argument_list|(
name|rev2
argument_list|)
block|,
name|targetEntry
operator|.
name|getURL
argument_list|()
block|,
name|srcMergeInfoCatalogString
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
throw|throw
name|svne
throw|;
block|}
block|}
name|mergeCousinsAndSupplementMergeInfo
argument_list|(
name|targetWCPath
argument_list|,
name|targetEntry
argument_list|,
name|adminArea
argument_list|,
name|repository
argument_list|,
name|url1
index|[
literal|0
index|]
argument_list|,
name|rev1
index|[
literal|0
index|]
argument_list|,
name|url2
argument_list|,
name|rev2
argument_list|,
name|youngestAncestorRevision
argument_list|,
name|sourceReposRoot
argument_list|,
name|wcReposRoot
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
name|dryRun
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repository
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|myWCAccess
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doMerge
parameter_list|(
name|List
name|mergeSources
parameter_list|,
name|File
name|target
parameter_list|,
name|SVNEntry
name|targetEntry
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|boolean
name|sourcesAncestral
parameter_list|,
name|boolean
name|sourcesRelated
parameter_list|,
name|boolean
name|sameRepository
parameter_list|,
name|boolean
name|ignoreAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|recordOnly
parameter_list|,
name|boolean
name|reintegrateMerge
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|recordOnly
condition|)
block|{
if|if
condition|(
operator|!
name|sourcesAncestral
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|,
literal|"Use of two URLs is not compatible with mergeinfo modification"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sameRepository
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|,
literal|"Merge from foreign repository is not compatible with mergeinfo modification"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dryRun
condition|)
block|{
return|return;
block|}
block|}
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|depth
operator|=
name|SVNDepth
operator|.
name|INFINITY
expr_stmt|;
block|}
name|myIsForce
operator|=
name|force
expr_stmt|;
name|myIsDryRun
operator|=
name|dryRun
expr_stmt|;
name|myIsRecordOnly
operator|=
name|recordOnly
expr_stmt|;
name|myIsIgnoreAncestry
operator|=
name|ignoreAncestry
expr_stmt|;
name|myIsSameRepository
operator|=
name|sameRepository
expr_stmt|;
name|myIsMergeInfoCapable
operator|=
literal|false
expr_stmt|;
name|myAreSourcesAncestral
operator|=
name|sourcesAncestral
expr_stmt|;
name|myIsTargetMissingChild
operator|=
literal|false
expr_stmt|;
name|myIsSingleFileMerge
operator|=
literal|false
expr_stmt|;
name|myTarget
operator|=
name|target
expr_stmt|;
name|myNotificationsNumber
operator|=
literal|0
expr_stmt|;
name|myOperativeNotificationsNumber
operator|=
literal|0
expr_stmt|;
name|myCurrentAncestorIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|myMergedPaths
operator|=
literal|null
expr_stmt|;
name|mySkippedPaths
operator|=
literal|null
expr_stmt|;
name|myAddedPaths
operator|=
literal|null
expr_stmt|;
name|myChildrenWithMergeInfo
operator|=
literal|null
expr_stmt|;
name|myPathsWithNewMergeInfo
operator|=
literal|null
expr_stmt|;
name|myHasExistingMergeInfo
operator|=
literal|false
expr_stmt|;
name|myIsReIntegrateMerge
operator|=
name|reintegrateMerge
expr_stmt|;
name|myImplicitSrcGap
operator|=
literal|null
expr_stmt|;
name|boolean
name|checkedMergeInfoCapability
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mergeSources
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MergeSource
name|mergeSource
init|=
operator|(
name|MergeSource
operator|)
name|mergeSources
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|SVNURL
name|url1
init|=
name|mergeSource
operator|.
name|myURL1
decl_stmt|;
name|SVNURL
name|url2
init|=
name|mergeSource
operator|.
name|myURL2
decl_stmt|;
name|long
name|revision1
init|=
name|mergeSource
operator|.
name|myRevision1
decl_stmt|;
name|long
name|revision2
init|=
name|mergeSource
operator|.
name|myRevision2
decl_stmt|;
if|if
condition|(
name|revision1
operator|==
name|revision2
operator|&&
name|mergeSource
operator|.
name|myURL1
operator|.
name|equals
argument_list|(
name|mergeSource
operator|.
name|myURL2
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|myRepository1
operator|=
name|ensureRepository
argument_list|(
name|myRepository1
argument_list|,
name|url1
argument_list|)
expr_stmt|;
name|myRepository2
operator|=
name|ensureRepository
argument_list|(
name|myRepository2
argument_list|,
name|url2
argument_list|)
expr_stmt|;
name|myIsTargetHasDummyMergeRange
operator|=
literal|false
expr_stmt|;
name|myURL
operator|=
name|url2
expr_stmt|;
name|myConflictedPaths
operator|=
literal|null
expr_stmt|;
name|myDryRunDeletions
operator|=
name|dryRun
condition|?
operator|new
name|SVNHashMap
argument_list|()
else|:
literal|null
expr_stmt|;
name|myIsAddNecessitatedMerge
operator|=
literal|false
expr_stmt|;
name|myCurrentMergeSource
operator|=
name|mergeSource
expr_stmt|;
if|if
condition|(
operator|!
name|checkedMergeInfoCapability
condition|)
block|{
name|myIsMergeInfoCapable
operator|=
name|myRepository1
operator|.
name|hasCapability
argument_list|(
name|SVNCapability
operator|.
name|MERGE_INFO
argument_list|)
expr_stmt|;
name|checkedMergeInfoCapability
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|targetEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|doFileMerge
argument_list|(
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|target
argument_list|,
name|adminArea
argument_list|,
name|sourcesRelated
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|targetEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|doDirectoryMerge
argument_list|(
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|targetEntry
argument_list|,
name|adminArea
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|elideMergeInfo
argument_list|(
name|myWCAccess
argument_list|,
name|target
argument_list|,
name|targetEntry
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|SVNEvent
name|mergeCompletedEvent
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|target
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNStatusType
operator|.
name|INAPPLICABLE
argument_list|,
name|SVNStatusType
operator|.
name|INAPPLICABLE
argument_list|,
name|SVNStatusType
operator|.
name|LOCK_INAPPLICABLE
argument_list|,
name|SVNEventAction
operator|.
name|MERGE_COMPLETE
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|super
operator|.
name|handleEvent
argument_list|(
name|mergeCompletedEvent
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|myRepository1
operator|!=
literal|null
condition|)
block|{
name|myRepository1
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|myRepository2
operator|!=
literal|null
condition|)
block|{
name|myRepository2
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|addPathWithNewMergeInfo
parameter_list|(
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|myPathsWithNewMergeInfo
operator|==
literal|null
condition|)
block|{
name|myPathsWithNewMergeInfo
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
name|myPathsWithNewMergeInfo
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addPathWithDeletedMergeInfo
parameter_list|(
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|myPathsWithDeletedMergeInfo
operator|==
literal|null
condition|)
block|{
name|myPathsWithDeletedMergeInfo
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
block|}
name|myPathsWithDeletedMergeInfo
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|SVNRepository
name|ensureRepository
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|SVNURL
name|url
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|repository
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|ensureSessionURL
argument_list|(
name|repository
argument_list|,
name|url
argument_list|)
expr_stmt|;
return|return
name|repository
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
name|repository
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|repository
operator|==
literal|null
condition|)
block|{
name|repository
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|repository
return|;
block|}
specifier|public
name|Object
index|[]
name|calculateRemainingRangeList
parameter_list|(
name|File
name|targetFile
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|SVNURL
name|sourceRoot
parameter_list|,
name|boolean
index|[]
name|indirect
parameter_list|,
name|SVNURL
name|url1
parameter_list|,
name|long
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|long
name|revision2
parameter_list|,
name|SVNMergeRange
name|range
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNMergeRangeList
name|remainingRangeList
init|=
literal|null
decl_stmt|;
name|Map
name|targetMergeInfo
init|=
literal|null
decl_stmt|;
name|Map
name|implicitMergeInfo
init|=
literal|null
decl_stmt|;
name|boolean
name|honorMergeInfo
init|=
name|isHonorMergeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
name|honorMergeInfo
condition|)
block|{
name|MergePath
name|mergeTarget
init|=
operator|new
name|MergePath
argument_list|()
decl_stmt|;
name|myRepository1
operator|.
name|setLocation
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|Map
index|[]
name|fullMergeInfo
init|=
name|getFullMergeInfo
argument_list|(
name|entry
argument_list|,
name|indirect
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
argument_list|,
name|myRepository1
argument_list|,
name|targetFile
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|)
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|)
argument_list|)
decl_stmt|;
name|targetMergeInfo
operator|=
name|fullMergeInfo
index|[
literal|0
index|]
expr_stmt|;
name|implicitMergeInfo
operator|=
name|fullMergeInfo
index|[
literal|1
index|]
expr_stmt|;
name|myRepository1
operator|.
name|setLocation
argument_list|(
name|url1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|myIsRecordOnly
condition|)
block|{
name|calculateRemainingRanges
argument_list|(
literal|null
argument_list|,
name|mergeTarget
argument_list|,
name|sourceRoot
argument_list|,
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|targetMergeInfo
argument_list|,
name|implicitMergeInfo
argument_list|,
name|myImplicitSrcGap
argument_list|,
literal|false
argument_list|,
name|entry
argument_list|,
name|myRepository1
argument_list|)
expr_stmt|;
name|remainingRangeList
operator|=
name|mergeTarget
operator|.
name|myRemainingRanges
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|honorMergeInfo
operator|||
name|myIsRecordOnly
condition|)
block|{
name|remainingRangeList
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Object
index|[]
block|{
name|remainingRangeList
block|,
name|targetMergeInfo
block|,
name|implicitMergeInfo
block|}
return|;
block|}
specifier|protected
name|void
name|findGapsInMergeSourceHistory
parameter_list|(
name|long
index|[]
name|gap
parameter_list|,
name|String
name|mergeSrcCanonPath
parameter_list|,
name|SVNURL
name|url1
parameter_list|,
name|long
name|rev1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|long
name|rev2
parameter_list|,
name|SVNRepository
name|repos
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|youngRev
init|=
name|Math
operator|.
name|max
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|long
name|oldRev
init|=
name|Math
operator|.
name|min
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
decl_stmt|;
name|SVNURL
name|url
init|=
name|rev2
operator|<
name|rev1
condition|?
name|url1
else|:
name|url2
decl_stmt|;
name|gap
index|[
literal|0
index|]
operator|=
name|gap
index|[
literal|1
index|]
operator|=
operator|-
literal|1
expr_stmt|;
name|SVNRevision
name|pegRevision
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|youngRev
argument_list|)
decl_stmt|;
name|SVNURL
name|oldURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repos
operator|!=
literal|null
condition|)
block|{
name|oldURL
operator|=
name|ensureSessionURL
argument_list|(
name|repos
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
name|Map
name|implicitSrcMergeInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
name|implicitSrcMergeInfo
operator|=
name|getHistoryAsMergeInfo
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|pegRevision
argument_list|,
name|youngRev
argument_list|,
name|oldRev
argument_list|,
name|repos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|repos
operator|!=
literal|null
operator|&&
name|oldURL
operator|!=
literal|null
condition|)
block|{
name|repos
operator|.
name|setLocation
argument_list|(
name|oldURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNMergeRangeList
name|rangelist
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|implicitSrcMergeInfo
operator|.
name|get
argument_list|(
name|mergeSrcCanonPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangelist
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|rangelist
operator|.
name|getSize
argument_list|()
operator|>
literal|1
condition|)
block|{
name|gap
index|[
literal|0
index|]
operator|=
name|Math
operator|.
name|min
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
expr_stmt|;
name|gap
index|[
literal|1
index|]
operator|=
name|rangelist
operator|.
name|getRanges
argument_list|()
index|[
name|rangelist
operator|.
name|getSize
argument_list|()
operator|-
literal|1
index|]
operator|.
name|getStartRevision
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|implicitSrcMergeInfo
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|SVNMergeRangeList
name|implicitMergeRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|requestedMergeRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|Math
operator|.
name|min
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|implicitSrcMergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|rangelist
operator|=
operator|(
name|SVNMergeRangeList
operator|)
name|implicitSrcMergeInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|implicitMergeRangeList
operator|=
name|implicitMergeRangeList
operator|!=
literal|null
condition|?
name|implicitMergeRangeList
operator|.
name|merge
argument_list|(
name|rangelist
argument_list|)
else|:
name|rangelist
expr_stmt|;
block|}
name|SVNMergeRangeList
name|gapRangeList
init|=
name|requestedMergeRangeList
operator|.
name|diff
argument_list|(
name|implicitMergeRangeList
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|gapRangeList
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|gap
index|[
literal|0
index|]
operator|=
name|gapRangeList
operator|.
name|getRanges
argument_list|()
index|[
literal|0
index|]
operator|.
name|getStartRevision
argument_list|()
expr_stmt|;
name|gap
index|[
literal|1
index|]
operator|=
name|gapRangeList
operator|.
name|getRanges
argument_list|()
index|[
literal|0
index|]
operator|.
name|getEndRevision
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|doFileMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|long
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|long
name|revision2
parameter_list|,
name|File
name|targetWCPath
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|boolean
name|sourcesRelated
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|isRollBack
init|=
name|revision1
operator|>
name|revision2
decl_stmt|;
name|SVNURL
name|primaryURL
init|=
name|isRollBack
condition|?
name|url1
else|:
name|url2
decl_stmt|;
name|boolean
name|honorMergeInfo
init|=
name|isHonorMergeInfo
argument_list|()
decl_stmt|;
name|boolean
name|recordMergeInfo
init|=
name|isRecordMergeInfo
argument_list|()
decl_stmt|;
name|myIsSingleFileMerge
operator|=
literal|true
expr_stmt|;
name|boolean
index|[]
name|indirect
init|=
block|{
literal|false
block|}
decl_stmt|;
name|boolean
index|[]
name|isTreeConflict
init|=
block|{
literal|false
block|}
decl_stmt|;
name|Map
name|targetMergeInfo
decl_stmt|;
name|Map
name|implicitMergeInfo
decl_stmt|;
name|SVNURL
name|sourceRootURL
init|=
literal|null
decl_stmt|;
name|String
name|mergeInfoPath
init|=
literal|null
decl_stmt|;
name|SVNMergeRange
name|conflictedRange
init|=
literal|null
decl_stmt|;
name|myWCAccess
operator|.
name|probeTry
argument_list|(
name|targetWCPath
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|targetWCPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|honorMergeInfo
condition|)
block|{
name|sourceRootURL
operator|=
name|myRepository1
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mergeInfoPath
operator|=
name|getPathRelativeToRoot
argument_list|(
literal|null
argument_list|,
name|primaryURL
argument_list|,
name|sourceRootURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|SVNMergeRange
name|range
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|Object
index|[]
name|mergeInfoBundle
init|=
name|calculateRemainingRangeList
argument_list|(
name|targetWCPath
argument_list|,
name|entry
argument_list|,
name|sourceRootURL
argument_list|,
name|indirect
argument_list|,
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|range
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|remainingRangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfoBundle
index|[
literal|0
index|]
decl_stmt|;
name|targetMergeInfo
operator|=
operator|(
name|Map
operator|)
name|mergeInfoBundle
index|[
literal|1
index|]
expr_stmt|;
name|implicitMergeInfo
operator|=
operator|(
name|Map
operator|)
name|mergeInfoBundle
index|[
literal|1
index|]
expr_stmt|;
name|SVNMergeRange
index|[]
name|remainingRanges
init|=
name|remainingRangeList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|AbstractDiffCallback
name|callback
init|=
name|getMergeCallback
argument_list|(
name|adminArea
argument_list|)
decl_stmt|;
name|String
name|targetName
init|=
name|targetWCPath
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|myIsRecordOnly
condition|)
block|{
name|SVNMergeRangeList
name|rangeListToMerge
init|=
name|remainingRangeList
decl_stmt|;
if|if
condition|(
name|myAreSourcesAncestral
operator|&&
name|remainingRangeList
operator|.
name|getSize
argument_list|()
operator|>
literal|1
condition|)
block|{
name|SVNURL
name|oldSessionURL
init|=
name|ensureSessionURL
argument_list|(
name|myRepository1
argument_list|,
name|primaryURL
argument_list|)
decl_stmt|;
name|rangeListToMerge
operator|=
name|removeNoOpMergeRanges
argument_list|(
name|myRepository1
argument_list|,
name|remainingRangeList
argument_list|)
expr_stmt|;
if|if
condition|(
name|oldSessionURL
operator|!=
literal|null
condition|)
block|{
name|myRepository1
operator|.
name|setLocation
argument_list|(
name|oldSessionURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNMergeRange
index|[]
name|rangesToMerge
init|=
name|rangeListToMerge
operator|.
name|getRanges
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rangesToMerge
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNMergeRange
name|nextRange
init|=
name|rangesToMerge
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|headerSent
init|=
literal|false
decl_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|targetWCPath
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|myIsSameRepository
condition|?
name|SVNEventAction
operator|.
name|MERGE_BEGIN
else|:
name|SVNEventAction
operator|.
name|FOREIGN_MERGE_BEGIN
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|myAreSourcesAncestral
condition|?
name|nextRange
else|:
literal|null
argument_list|)
decl_stmt|;
name|SVNProperties
name|props1
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNProperties
name|props2
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|File
name|f1
init|=
literal|null
decl_stmt|;
name|File
name|f2
init|=
literal|null
decl_stmt|;
name|String
name|mimeType2
decl_stmt|;
name|String
name|mimeType1
decl_stmt|;
name|SVNStatusType
index|[]
name|mergeResult
decl_stmt|;
name|SVNRepository
name|repos1
init|=
name|myRepository1
decl_stmt|;
name|SVNRepository
name|repos2
init|=
name|myRepository2
decl_stmt|;
if|if
condition|(
name|honorMergeInfo
operator|&&
operator|!
name|url1
operator|.
name|equals
argument_list|(
name|url2
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|isRollBack
operator|&&
name|nextRange
operator|.
name|getStartRevision
argument_list|()
operator|!=
name|revision1
condition|)
block|{
name|repos1
operator|=
name|repos2
expr_stmt|;
block|}
if|else if
condition|(
name|isRollBack
operator|&&
name|nextRange
operator|.
name|getEndRevision
argument_list|()
operator|!=
name|revision2
condition|)
block|{
name|repos2
operator|=
name|repos1
expr_stmt|;
block|}
block|}
try|try
block|{
name|f1
operator|=
name|loadFile
argument_list|(
name|repos1
argument_list|,
name|nextRange
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|props1
argument_list|,
name|adminArea
argument_list|)
expr_stmt|;
name|f2
operator|=
name|loadFile
argument_list|(
name|repos2
argument_list|,
name|nextRange
operator|.
name|getEndRevision
argument_list|()
argument_list|,
name|props2
argument_list|,
name|adminArea
argument_list|)
expr_stmt|;
name|mimeType1
operator|=
name|props1
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
name|mimeType2
operator|=
name|props2
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
name|props1
operator|=
name|filterProperties
argument_list|(
name|props1
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|props2
operator|=
name|filterProperties
argument_list|(
name|props2
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNProperties
name|propsDiff
init|=
name|computePropsDiff
argument_list|(
name|props1
argument_list|,
name|props2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|myIsIgnoreAncestry
operator|||
name|sourcesRelated
operator|)
condition|)
block|{
name|SVNStatusType
name|cstatus
init|=
name|callback
operator|.
name|fileDeleted
argument_list|(
name|targetName
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|mimeType1
argument_list|,
name|mimeType2
argument_list|,
name|props1
argument_list|,
name|isTreeConflict
argument_list|)
decl_stmt|;
name|headerSent
operator|=
name|notifySingleFileMerge
argument_list|(
name|targetWCPath
argument_list|,
name|isTreeConflict
index|[
literal|0
index|]
condition|?
name|SVNEventAction
operator|.
name|TREE_CONFLICT
else|:
name|SVNEventAction
operator|.
name|UPDATE_DELETE
argument_list|,
name|cstatus
argument_list|,
name|SVNStatusType
operator|.
name|UNKNOWN
argument_list|,
name|event
argument_list|,
name|headerSent
argument_list|)
expr_stmt|;
name|mergeResult
operator|=
name|callback
operator|.
name|fileAdded
argument_list|(
name|targetName
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|nextRange
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|nextRange
operator|.
name|getEndRevision
argument_list|()
argument_list|,
name|mimeType1
argument_list|,
name|mimeType2
argument_list|,
name|props1
argument_list|,
name|propsDiff
argument_list|,
name|isTreeConflict
argument_list|)
expr_stmt|;
name|headerSent
operator|=
name|notifySingleFileMerge
argument_list|(
name|targetWCPath
argument_list|,
name|isTreeConflict
index|[
literal|0
index|]
condition|?
name|SVNEventAction
operator|.
name|TREE_CONFLICT
else|:
name|SVNEventAction
operator|.
name|UPDATE_ADD
argument_list|,
name|mergeResult
index|[
literal|0
index|]
argument_list|,
name|mergeResult
index|[
literal|1
index|]
argument_list|,
name|event
argument_list|,
name|headerSent
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mergeResult
operator|=
name|callback
operator|.
name|fileChanged
argument_list|(
name|targetName
argument_list|,
name|f1
argument_list|,
name|f2
argument_list|,
name|nextRange
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|nextRange
operator|.
name|getEndRevision
argument_list|()
argument_list|,
name|mimeType1
argument_list|,
name|mimeType2
argument_list|,
name|props1
argument_list|,
name|propsDiff
argument_list|,
name|isTreeConflict
argument_list|)
expr_stmt|;
name|headerSent
operator|=
name|notifySingleFileMerge
argument_list|(
name|targetWCPath
argument_list|,
name|isTreeConflict
index|[
literal|0
index|]
condition|?
name|SVNEventAction
operator|.
name|TREE_CONFLICT
else|:
name|SVNEventAction
operator|.
name|UPDATE_UPDATE
argument_list|,
name|mergeResult
index|[
literal|0
index|]
argument_list|,
name|mergeResult
index|[
literal|1
index|]
argument_list|,
name|event
argument_list|,
name|headerSent
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|f1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|f2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|<
name|rangesToMerge
operator|.
name|length
operator|-
literal|1
operator|&&
name|myConflictedPaths
operator|!=
literal|null
operator|&&
operator|!
name|myConflictedPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|conflictedRange
operator|=
name|nextRange
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|recordMergeInfo
operator|&&
name|remainingRanges
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|SVNMergeRangeList
name|filteredRangeList
init|=
name|filterNaturalHistoryFromMergeInfo
argument_list|(
name|mergeInfoPath
argument_list|,
name|implicitMergeInfo
argument_list|,
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filteredRangeList
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|mySkippedPaths
operator|==
literal|null
operator|||
name|mySkippedPaths
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|indirect
index|[
literal|0
index|]
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|recordWCMergeInfo
argument_list|(
name|targetWCPath
argument_list|,
name|targetMergeInfo
argument_list|,
name|myWCAccess
argument_list|)
expr_stmt|;
block|}
name|Map
name|merges
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|merges
operator|.
name|put
argument_list|(
name|targetWCPath
argument_list|,
name|filteredRangeList
argument_list|)
expr_stmt|;
name|updateWCMergeInfo
argument_list|(
name|targetWCPath
argument_list|,
name|mergeInfoPath
argument_list|,
name|entry
argument_list|,
name|merges
argument_list|,
name|isRollBack
argument_list|)
expr_stmt|;
block|}
block|}
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
if|if
condition|(
name|conflictedRange
operator|!=
literal|null
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|makeMergeConflictError
argument_list|(
name|targetWCPath
argument_list|,
name|conflictedRange
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|doMergeInfoUnawareDirectoryMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|long
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|long
name|revision2
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|targetWCPath
init|=
name|adminArea
operator|.
name|getRoot
argument_list|()
decl_stmt|;
name|boolean
name|isRollBack
init|=
name|revision1
operator|>
name|revision2
decl_stmt|;
name|MergePath
name|item
init|=
operator|new
name|MergePath
argument_list|(
name|targetWCPath
argument_list|)
decl_stmt|;
name|SVNMergeRange
name|itemRange
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|item
operator|.
name|myRemainingRanges
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|itemRange
argument_list|)
expr_stmt|;
name|myChildrenWithMergeInfo
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|driveMergeReportEditor
argument_list|(
name|targetWCPath
argument_list|,
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
literal|null
argument_list|,
name|isRollBack
argument_list|,
name|depth
argument_list|,
name|adminArea
argument_list|,
name|getMergeCallback
argument_list|(
name|adminArea
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|recordMergeInfoForDirectoryMerge
parameter_list|(
name|SVNEntry
name|targetEntry
parameter_list|,
name|SVNMergeRange
name|range
parameter_list|,
name|String
name|mergeInfoPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|isRollBack
init|=
name|range
operator|.
name|getStartRevision
argument_list|()
operator|>
name|range
operator|.
name|getEndRevision
argument_list|()
decl_stmt|;
name|removeAbsentChildren
argument_list|(
name|myTarget
argument_list|,
name|myChildrenWithMergeInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myChildrenWithMergeInfo
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|myChildrenWithMergeInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
operator|||
name|child
operator|.
name|myIsAbsent
condition|)
block|{
continue|continue;
block|}
name|String
name|childReposPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|myPath
operator|.
name|equals
argument_list|(
name|myTarget
argument_list|)
condition|)
block|{
name|childReposPath
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|childReposPath
operator|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|myTarget
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|child
operator|.
name|myPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|childEntry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|child
operator|.
name|myPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|String
name|childMergeSourcePath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|mergeInfoPath
argument_list|,
name|childReposPath
argument_list|)
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|childMergeRangeList
init|=
name|filterNaturalHistoryFromMergeInfo
argument_list|(
name|childMergeSourcePath
argument_list|,
name|child
operator|.
name|myImplicitMergeInfo
argument_list|,
name|range
argument_list|)
decl_stmt|;
if|if
condition|(
name|childMergeRangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|recordSkips
argument_list|(
name|mergeInfoPath
argument_list|,
name|targetEntry
argument_list|,
name|isRollBack
argument_list|)
expr_stmt|;
block|}
name|calculateMergeInheritance
argument_list|(
name|childMergeRangeList
argument_list|,
name|childEntry
argument_list|,
name|i
operator|==
literal|0
argument_list|,
name|child
operator|.
name|myHasMissingChildren
argument_list|,
name|depth
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|myIsIndirectMergeInfo
condition|)
block|{
name|SVNPropertiesManager
operator|.
name|recordWCMergeInfo
argument_list|(
name|child
operator|.
name|myPath
argument_list|,
name|child
operator|.
name|myPreMergeMergeInfo
argument_list|,
name|myWCAccess
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myImplicitSrcGap
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|isRollBack
condition|)
block|{
name|childMergeRangeList
operator|.
name|reverse
argument_list|()
expr_stmt|;
block|}
name|childMergeRangeList
operator|=
name|childMergeRangeList
operator|.
name|diff
argument_list|(
name|myImplicitSrcGap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRollBack
condition|)
block|{
name|childMergeRangeList
operator|.
name|reverse
argument_list|()
expr_stmt|;
block|}
block|}
name|Map
name|childMerges
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|childMerges
operator|.
name|put
argument_list|(
name|child
operator|.
name|myPath
argument_list|,
name|childMergeRangeList
argument_list|)
expr_stmt|;
name|updateWCMergeInfo
argument_list|(
name|child
operator|.
name|myPath
argument_list|,
name|childMergeSourcePath
argument_list|,
name|childEntry
argument_list|,
name|childMerges
argument_list|,
name|isRollBack
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|boolean
name|isInSwitchedSubTree
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|myIsSwitched
condition|)
block|{
name|isInSwitchedSubTree
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|i
operator|>
literal|1
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
name|i
operator|-
literal|1
init|;
name|j
operator|>
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|MergePath
name|parent
init|=
operator|(
name|MergePath
operator|)
name|myChildrenWithMergeInfo
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|myIsSwitched
operator|&&
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|parent
operator|.
name|myPath
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
argument_list|,
name|child
operator|.
name|myPath
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
name|isInSwitchedSubTree
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
name|elideMergeInfo
argument_list|(
name|myWCAccess
argument_list|,
name|child
operator|.
name|myPath
argument_list|,
name|childEntry
argument_list|,
name|isInSwitchedSubTree
condition|?
literal|null
else|:
name|myTarget
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|recordMergeInfoForAddedSubtrees
parameter_list|(
name|SVNMergeRange
name|range
parameter_list|,
name|String
name|mergeInfoPath
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myAddedPaths
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|addedPathsIter
init|=
name|myAddedPaths
operator|.
name|iterator
argument_list|()
init|;
name|addedPathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|addedPath
init|=
operator|(
name|File
operator|)
name|addedPathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|addedPathParentPropValue
init|=
name|SVNPropertiesManager
operator|.
name|getProperty
argument_list|(
name|myWCAccess
argument_list|,
name|addedPath
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|)
decl_stmt|;
name|String
name|addedPathParentPropValueStr
init|=
name|addedPathParentPropValue
operator|!=
literal|null
condition|?
name|addedPathParentPropValue
operator|.
name|getString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|addedPathParentPropValueStr
operator|!=
literal|null
operator|&&
name|addedPathParentPropValueStr
operator|.
name|indexOf
argument_list|(
name|SVNMergeRangeList
operator|.
name|MERGE_INFO_NONINHERITABLE_STRING
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|addedPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|mergeMergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|MergePath
name|targetMergePath
init|=
operator|(
name|MergePath
operator|)
name|myChildrenWithMergeInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SVNMergeRange
name|rng
init|=
name|range
operator|.
name|dup
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|rng
operator|.
name|setInheritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rng
operator|.
name|setInheritable
argument_list|(
operator|!
operator|(
name|depth
operator|==
name|SVNDepth
operator|.
name|INFINITY
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|)
argument_list|)
expr_stmt|;
block|}
name|String
name|addedPathStr
init|=
name|SVNPathUtil
operator|.
name|validateFilePath
argument_list|(
name|addedPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|targetMergePathStr
init|=
name|SVNPathUtil
operator|.
name|validateFilePath
argument_list|(
name|targetMergePath
operator|.
name|myPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|commonAncestorPath
init|=
name|SVNPathUtil
operator|.
name|getCommonPathAncestor
argument_list|(
name|addedPathStr
argument_list|,
name|targetMergePathStr
argument_list|)
decl_stmt|;
name|String
name|relativeAddedPath
init|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|commonAncestorPath
argument_list|,
name|addedPathStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|relativeAddedPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|relativeAddedPath
operator|=
name|relativeAddedPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|SVNMergeRangeList
name|rangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|rng
argument_list|)
decl_stmt|;
name|mergeMergeInfo
operator|.
name|put
argument_list|(
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|mergeInfoPath
argument_list|,
name|relativeAddedPath
argument_list|)
argument_list|)
argument_list|,
name|rangeList
argument_list|)
expr_stmt|;
name|boolean
index|[]
name|inherited
init|=
block|{
literal|false
block|}
decl_stmt|;
name|Map
name|addedPathMergeInfo
init|=
name|getWCMergeInfo
argument_list|(
name|addedPath
argument_list|,
name|entry
argument_list|,
literal|null
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|EXPLICIT
argument_list|,
literal|false
argument_list|,
name|inherited
argument_list|)
decl_stmt|;
if|if
condition|(
name|addedPathMergeInfo
operator|!=
literal|null
condition|)
block|{
name|mergeMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|mergeMergeInfo
argument_list|,
name|addedPathMergeInfo
argument_list|)
expr_stmt|;
block|}
name|SVNPropertiesManager
operator|.
name|recordWCMergeInfo
argument_list|(
name|addedPath
argument_list|,
name|mergeMergeInfo
argument_list|,
name|myWCAccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|doDirectoryMerge
parameter_list|(
name|SVNURL
name|url1
parameter_list|,
name|long
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|long
name|revision2
parameter_list|,
name|SVNEntry
name|parentEntry
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|isRollBack
init|=
name|revision1
operator|>
name|revision2
decl_stmt|;
name|SVNURL
name|primaryURL
init|=
name|isRollBack
condition|?
name|url1
else|:
name|url2
decl_stmt|;
name|boolean
name|honorMergeInfo
init|=
name|isHonorMergeInfo
argument_list|()
decl_stmt|;
name|boolean
name|recordMergeInfo
init|=
name|isRecordMergeInfo
argument_list|()
decl_stmt|;
name|boolean
name|sameURLs
init|=
name|url1
operator|.
name|equals
argument_list|(
name|url2
argument_list|)
decl_stmt|;
name|SVNMergeCallback
name|mergeCallback
init|=
name|getMergeCallback
argument_list|(
name|adminArea
argument_list|)
decl_stmt|;
name|myChildrenWithMergeInfo
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|honorMergeInfo
condition|)
block|{
name|doMergeInfoUnawareDirectoryMerge
argument_list|(
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|adminArea
argument_list|,
name|depth
argument_list|)
expr_stmt|;
return|return;
block|}
name|SVNRepository
name|repository
init|=
name|isRollBack
condition|?
name|myRepository1
else|:
name|myRepository2
decl_stmt|;
name|SVNURL
name|sourceRootURL
init|=
name|repository
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|mergeInfoPath
init|=
name|getPathRelativeToRoot
argument_list|(
literal|null
argument_list|,
name|primaryURL
argument_list|,
name|sourceRootURL
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|myChildrenWithMergeInfo
operator|=
name|getMergeInfoPaths
argument_list|(
name|myChildrenWithMergeInfo
argument_list|,
name|mergeInfoPath
argument_list|,
name|parentEntry
argument_list|,
name|sourceRootURL
argument_list|,
name|revision1
argument_list|,
name|revision2
argument_list|,
name|honorMergeInfo
argument_list|,
name|repository
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|MergePath
name|targetMergePath
init|=
operator|(
name|MergePath
operator|)
name|myChildrenWithMergeInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|myIsTargetMissingChild
operator|=
name|targetMergePath
operator|.
name|myHasMissingChildren
expr_stmt|;
name|populateRemainingRanges
argument_list|(
name|myChildrenWithMergeInfo
argument_list|,
name|sourceRootURL
argument_list|,
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|honorMergeInfo
argument_list|,
name|repository
argument_list|,
name|mergeInfoPath
argument_list|)
expr_stmt|;
name|SVNMergeRange
name|range
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|ISVNReusableEditor
name|editor
init|=
literal|null
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|honorMergeInfo
operator|&&
operator|!
name|myIsRecordOnly
condition|)
block|{
name|long
name|startRev
init|=
name|getMostInclusiveStartRevision
argument_list|(
name|myChildrenWithMergeInfo
argument_list|,
name|isRollBack
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|startRev
argument_list|)
condition|)
block|{
name|range
operator|.
name|setStartRevision
argument_list|(
name|startRev
argument_list|)
expr_stmt|;
name|long
name|endRev
init|=
name|getMostInclusiveEndRevision
argument_list|(
name|myChildrenWithMergeInfo
argument_list|,
name|isRollBack
argument_list|)
decl_stmt|;
while|while
condition|(
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|endRev
argument_list|)
condition|)
block|{
name|SVNURL
name|realURL1
init|=
name|url1
decl_stmt|;
name|SVNURL
name|realURL2
init|=
name|url2
decl_stmt|;
name|SVNURL
name|oldURL1
init|=
literal|null
decl_stmt|;
name|SVNURL
name|oldURL2
init|=
literal|null
decl_stmt|;
name|long
name|nextEndRev
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
name|sliceRemainingRanges
argument_list|(
name|myChildrenWithMergeInfo
argument_list|,
name|isRollBack
argument_list|,
name|endRev
argument_list|)
expr_stmt|;
name|myCurrentAncestorIndex
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|sameURLs
condition|)
block|{
if|if
condition|(
name|isRollBack
operator|&&
name|endRev
operator|!=
name|revision2
condition|)
block|{
name|realURL2
operator|=
name|url1
expr_stmt|;
name|oldURL2
operator|=
name|ensureSessionURL
argument_list|(
name|myRepository2
argument_list|,
name|realURL2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isRollBack
operator|&&
name|startRev
operator|!=
name|revision1
condition|)
block|{
name|realURL1
operator|=
name|url2
expr_stmt|;
name|oldURL1
operator|=
name|ensureSessionURL
argument_list|(
name|myRepository1
argument_list|,
name|realURL1
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|editor
operator|=
name|driveMergeReportEditor
argument_list|(
name|myTarget
argument_list|,
name|realURL1
argument_list|,
name|startRev
argument_list|,
name|realURL2
argument_list|,
name|endRev
argument_list|,
name|myChildrenWithMergeInfo
argument_list|,
name|isRollBack
argument_list|,
name|depth
argument_list|,
name|adminArea
argument_list|,
name|mergeCallback
argument_list|,
name|editor
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|oldURL1
operator|!=
literal|null
condition|)
block|{
name|myRepository1
operator|.
name|setLocation
argument_list|(
name|oldURL1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldURL2
operator|!=
literal|null
condition|)
block|{
name|myRepository2
operator|.
name|setLocation
argument_list|(
name|oldURL2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|processChildrenWithNewMergeInfo
argument_list|()
expr_stmt|;
name|processChildrenWithDeletedMergeInfo
argument_list|()
expr_stmt|;
name|removeFirstRangeFromRemainingRanges
argument_list|(
name|endRev
argument_list|,
name|myChildrenWithMergeInfo
argument_list|)
expr_stmt|;
name|nextEndRev
operator|=
name|getMostInclusiveEndRevision
argument_list|(
name|myChildrenWithMergeInfo
argument_list|,
name|isRollBack
argument_list|)
expr_stmt|;
if|if
condition|(
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|nextEndRev
argument_list|)
operator|&&
name|myConflictedPaths
operator|!=
literal|null
operator|&&
operator|!
name|myConflictedPaths
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|myIsDryRun
condition|)
block|{
name|SVNMergeRange
name|conflictedRange
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|startRev
argument_list|,
name|endRev
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|err
operator|=
name|makeMergeConflictError
argument_list|(
name|myTarget
argument_list|,
name|conflictedRange
argument_list|)
expr_stmt|;
name|range
operator|.
name|setEndRevision
argument_list|(
name|endRev
argument_list|)
expr_stmt|;
break|break;
block|}
name|startRev
operator|=
name|getMostInclusiveStartRevision
argument_list|(
name|myChildrenWithMergeInfo
argument_list|,
name|isRollBack
argument_list|)
expr_stmt|;
name|endRev
operator|=
name|nextEndRev
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|myIsRecordOnly
condition|)
block|{
name|myCurrentAncestorIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|editor
operator|=
name|driveMergeReportEditor
argument_list|(
name|myTarget
argument_list|,
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
literal|null
argument_list|,
name|isRollBack
argument_list|,
name|depth
argument_list|,
name|adminArea
argument_list|,
name|mergeCallback
argument_list|,
name|editor
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|recordMergeInfo
condition|)
block|{
name|recordMergeInfoForDirectoryMerge
argument_list|(
name|parentEntry
argument_list|,
name|range
argument_list|,
name|mergeInfoPath
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|recordMergeInfoForAddedSubtrees
argument_list|(
name|range
argument_list|,
name|mergeInfoPath
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|err
operator|!=
literal|null
condition|)
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|SVNProperties
name|filterSelfReferentialMergeInfo
parameter_list|(
name|SVNProperties
name|props
parameter_list|,
name|File
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|honorMergeInfo
init|=
name|isHonorMergeInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|honorMergeInfo
operator|&&
name|myIsSameRepository
operator|&&
operator|!
name|myIsReIntegrateMerge
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNEntry
name|targetEntry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|myIsSameRepository
operator|&&
operator|(
name|targetEntry
operator|.
name|isScheduledForAddition
argument_list|()
operator|||
name|targetEntry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNProperties
name|adjustedProperties
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|propNamesIter
init|=
name|props
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNamesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|props
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|&&
operator|!
name|myIsSameRepository
condition|)
block|{
comment|// skip mergeinfo from foreign repository
block|}
if|else if
condition|(
operator|!
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
operator|||
name|propValue
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|propValue
operator|.
name|getString
argument_list|()
argument_list|)
condition|)
block|{
name|adjustedProperties
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNURL
name|mergeSourceRootURL
init|=
name|myRepository2
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNURL
name|targetURL
init|=
name|getURL
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNURL
name|oldURL
init|=
name|ensureSessionURL
argument_list|(
name|myRepository2
argument_list|,
name|targetURL
argument_list|)
decl_stmt|;
name|Map
name|filteredYoungerMergeInfo
init|=
literal|null
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|propValue
operator|.
name|getString
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
index|[]
name|mergeInfoArr
init|=
block|{
name|mergeInfo
block|}
decl_stmt|;
name|Map
name|youngerMergeInfo
init|=
name|splitMergeInfoOnRevision
argument_list|(
name|mergeInfoArr
argument_list|,
name|targetEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
decl_stmt|;
name|mergeInfo
operator|=
name|mergeInfoArr
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|youngerMergeInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|youngerMergeInfoIter
init|=
name|youngerMergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|youngerMergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|sourcePath
init|=
operator|(
name|String
operator|)
name|youngerMergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|youngerMergeInfo
operator|.
name|get
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
name|SVNMergeRange
name|ranges
index|[]
init|=
name|rangeList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|LinkedList
name|adjustedRanges
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|SVNURL
name|mergeSourceURL
init|=
name|mergeSourceRootURL
operator|.
name|appendPath
argument_list|(
name|sourcePath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
name|SVNRepositoryLocation
index|[]
name|locations
init|=
literal|null
decl_stmt|;
try|try
block|{
name|locations
operator|=
name|getLocations
argument_list|(
name|targetURL
argument_list|,
literal|null
argument_list|,
name|myRepository2
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|targetEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|SVNURL
name|startURL
init|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|mergeSourceURL
operator|.
name|equals
argument_list|(
name|startURL
argument_list|)
condition|)
block|{
name|adjustedRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|code
operator|==
name|SVNErrorCode
operator|.
name|CLIENT_UNRELATED_RESOURCES
operator|||
name|code
operator|==
name|SVNErrorCode
operator|.
name|RA_DAV_PATH_NOT_FOUND
operator|||
name|code
operator|==
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
operator|||
name|code
operator|==
name|SVNErrorCode
operator|.
name|FS_NO_SUCH_REVISION
condition|)
block|{
name|adjustedRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|svne
throw|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|adjustedRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|filteredYoungerMergeInfo
operator|==
literal|null
condition|)
block|{
name|filteredYoungerMergeInfo
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
block|}
name|SVNMergeRangeList
name|adjustedRangeList
init|=
name|SVNMergeRangeList
operator|.
name|fromCollection
argument_list|(
name|adjustedRanges
argument_list|)
decl_stmt|;
name|filteredYoungerMergeInfo
operator|.
name|put
argument_list|(
name|sourcePath
argument_list|,
name|adjustedRangeList
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
name|filteredMergeInfo
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|mergeInfo
operator|!=
literal|null
operator|&&
operator|!
name|mergeInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Map
name|implicitMergeInfo
init|=
name|getHistoryAsMergeInfo
argument_list|(
literal|null
argument_list|,
name|path
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|targetEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|,
name|targetEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|myRepository2
argument_list|,
name|myWCAccess
argument_list|)
decl_stmt|;
name|filteredMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|removeMergeInfo
argument_list|(
name|implicitMergeInfo
argument_list|,
name|mergeInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|oldURL
operator|!=
literal|null
condition|)
block|{
name|myRepository2
operator|.
name|setLocation
argument_list|(
name|oldURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filteredMergeInfo
operator|!=
literal|null
operator|&&
name|filteredYoungerMergeInfo
operator|!=
literal|null
condition|)
block|{
name|filteredMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|filteredMergeInfo
argument_list|,
name|filteredYoungerMergeInfo
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|filteredYoungerMergeInfo
operator|!=
literal|null
condition|)
block|{
name|filteredMergeInfo
operator|=
name|filteredYoungerMergeInfo
expr_stmt|;
block|}
if|if
condition|(
name|filteredMergeInfo
operator|!=
literal|null
operator|&&
operator|!
name|filteredMergeInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|filteredMergeInfoStr
init|=
name|SVNMergeInfoUtil
operator|.
name|formatMergeInfoToString
argument_list|(
name|filteredMergeInfo
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|adjustedProperties
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|,
name|filteredMergeInfoStr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|adjustedProperties
return|;
block|}
specifier|protected
name|SVNLogClient
name|getLogClient
parameter_list|()
block|{
if|if
condition|(
name|myLogClient
operator|==
literal|null
condition|)
block|{
name|myLogClient
operator|=
operator|new
name|SVNLogClient
argument_list|(
name|getRepositoryPool
argument_list|()
argument_list|,
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|myLogClient
return|;
block|}
specifier|protected
name|void
name|recordTreeConflict
parameter_list|(
name|File
name|victim
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|SVNConflictAction
name|action
parameter_list|,
name|SVNConflictReason
name|reason
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myIsRecordOnly
operator|||
name|myIsDryRun
condition|)
block|{
return|return;
block|}
name|SVNTreeConflictDescription
name|conflict
init|=
name|makeTreeConflict
argument_list|(
name|victim
argument_list|,
name|kind
argument_list|,
name|action
argument_list|,
name|reason
argument_list|)
decl_stmt|;
name|adminArea
operator|.
name|addTreeConflict
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|recordTreeConflictOnAdd
parameter_list|(
name|File
name|victim
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|SVNConflictAction
name|action
parameter_list|,
name|SVNConflictReason
name|reason
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myIsRecordOnly
operator|||
name|myIsDryRun
condition|)
block|{
return|return;
block|}
name|SVNTreeConflictDescription
name|conflict
init|=
name|makeTreeConflict
argument_list|(
name|victim
argument_list|,
name|kind
argument_list|,
name|action
argument_list|,
name|reason
argument_list|)
decl_stmt|;
name|SVNTreeConflictDescription
name|existingConflict
init|=
name|myWCAccess
operator|.
name|getTreeConflict
argument_list|(
name|conflict
operator|.
name|getPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingConflict
operator|!=
literal|null
operator|&&
name|existingConflict
operator|.
name|getConflictAction
argument_list|()
operator|==
name|SVNConflictAction
operator|.
name|DELETE
operator|&&
name|conflict
operator|.
name|getConflictAction
argument_list|()
operator|==
name|SVNConflictAction
operator|.
name|ADD
condition|)
block|{
name|adminArea
operator|.
name|deleteTreeConflict
argument_list|(
name|conflict
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|conflict
operator|=
operator|new
name|SVNTreeConflictDescription
argument_list|(
name|conflict
operator|.
name|getPath
argument_list|()
argument_list|,
name|conflict
operator|.
name|getNodeKind
argument_list|()
argument_list|,
name|SVNConflictAction
operator|.
name|DELETE
argument_list|,
name|existingConflict
operator|.
name|getConflictReason
argument_list|()
argument_list|,
name|conflict
operator|.
name|getOperation
argument_list|()
argument_list|,
name|existingConflict
operator|.
name|getSourceLeftVersion
argument_list|()
argument_list|,
name|conflict
operator|.
name|getSourceRightVersion
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|adminArea
operator|.
name|addTreeConflict
argument_list|(
name|conflict
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|SVNTreeConflictDescription
name|makeTreeConflict
parameter_list|(
name|File
name|victim
parameter_list|,
name|SVNNodeKind
name|kind
parameter_list|,
name|SVNConflictAction
name|action
parameter_list|,
name|SVNConflictReason
name|reason
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|srcReposRoot
init|=
name|myRepository1
operator|.
name|getRepositoryRoot
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|String
name|child
init|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|myTarget
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|victim
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|SVNURL
name|leftURL
init|=
literal|null
decl_stmt|;
name|SVNURL
name|rightURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
block|{
name|leftURL
operator|=
name|myCurrentMergeSource
operator|.
name|myURL1
operator|.
name|appendPath
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|rightURL
operator|=
name|myCurrentMergeSource
operator|.
name|myURL2
operator|.
name|appendPath
argument_list|(
name|child
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|leftURL
operator|=
name|myCurrentMergeSource
operator|.
name|myURL1
expr_stmt|;
name|rightURL
operator|=
name|myCurrentMergeSource
operator|.
name|myURL2
expr_stmt|;
block|}
name|SVNConflictVersion
name|leftConflictVersion
init|=
operator|new
name|SVNConflictVersion
argument_list|(
name|srcReposRoot
argument_list|,
name|SVNURLUtil
operator|.
name|getRelativeURL
argument_list|(
name|srcReposRoot
argument_list|,
name|leftURL
argument_list|)
argument_list|,
name|myCurrentMergeSource
operator|.
name|myRevision1
argument_list|,
name|kind
argument_list|)
decl_stmt|;
name|SVNConflictVersion
name|rightConflictVersion
init|=
operator|new
name|SVNConflictVersion
argument_list|(
name|srcReposRoot
argument_list|,
name|SVNURLUtil
operator|.
name|getRelativeURL
argument_list|(
name|srcReposRoot
argument_list|,
name|rightURL
argument_list|)
argument_list|,
name|myCurrentMergeSource
operator|.
name|myRevision2
argument_list|,
name|kind
argument_list|)
decl_stmt|;
name|SVNTreeConflictDescription
name|conflictDescription
init|=
operator|new
name|SVNTreeConflictDescription
argument_list|(
name|victim
argument_list|,
name|kind
argument_list|,
name|action
argument_list|,
name|reason
argument_list|,
name|SVNOperation
operator|.
name|MERGE
argument_list|,
name|leftConflictVersion
argument_list|,
name|rightConflictVersion
argument_list|)
decl_stmt|;
return|return
name|conflictDescription
return|;
block|}
specifier|private
name|SVNMergeCallback
name|getMergeCallback
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|)
block|{
return|return
name|myWCAccess
operator|.
name|createMergeCallback
argument_list|(
name|this
argument_list|,
name|adminArea
argument_list|,
name|myURL
argument_list|,
name|getMergeOptions
argument_list|()
argument_list|,
name|myConflictedPaths
argument_list|,
name|myIsForce
argument_list|,
name|myIsDryRun
argument_list|)
return|;
block|}
specifier|private
name|void
name|processChildrenWithNewMergeInfo
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myPathsWithNewMergeInfo
operator|!=
literal|null
operator|&&
operator|!
name|myIsDryRun
condition|)
block|{
for|for
control|(
name|Iterator
name|pathsIter
init|=
name|myPathsWithNewMergeInfo
operator|.
name|iterator
argument_list|()
init|;
name|pathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|pathWithNewMergeInfo
init|=
operator|(
name|File
operator|)
name|pathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNEntry
name|pathEntry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|pathWithNewMergeInfo
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
index|[]
name|indirect
init|=
block|{
literal|false
block|}
decl_stmt|;
name|Map
name|pathExplicitMergeInfo
init|=
name|getWCMergeInfo
argument_list|(
name|pathWithNewMergeInfo
argument_list|,
name|pathEntry
argument_list|,
literal|null
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|EXPLICIT
argument_list|,
literal|false
argument_list|,
name|indirect
argument_list|)
decl_stmt|;
name|SVNURL
name|oldURL
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|pathExplicitMergeInfo
operator|!=
literal|null
condition|)
block|{
name|oldURL
operator|=
name|ensureSessionURL
argument_list|(
name|myRepository2
argument_list|,
name|pathEntry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
expr_stmt|;
name|Map
name|pathInheritedMergeInfo
init|=
name|getWCOrRepositoryMergeInfo
argument_list|(
name|pathWithNewMergeInfo
argument_list|,
name|pathEntry
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|NEAREST_ANCESTOR
argument_list|,
name|indirect
argument_list|,
literal|false
argument_list|,
name|myRepository2
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathInheritedMergeInfo
operator|!=
literal|null
condition|)
block|{
name|pathExplicitMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|pathExplicitMergeInfo
argument_list|,
name|pathInheritedMergeInfo
argument_list|)
expr_stmt|;
name|SVNPropertiesManager
operator|.
name|recordWCMergeInfo
argument_list|(
name|pathWithNewMergeInfo
argument_list|,
name|pathExplicitMergeInfo
argument_list|,
name|myWCAccess
argument_list|)
expr_stmt|;
block|}
name|MergePath
name|newChild
init|=
operator|new
name|MergePath
argument_list|(
name|pathWithNewMergeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|myChildrenWithMergeInfo
operator|.
name|contains
argument_list|(
name|newChild
argument_list|)
condition|)
block|{
name|int
name|parentIndex
init|=
name|findNearestAncestor
argument_list|(
name|myChildrenWithMergeInfo
operator|.
name|toArray
argument_list|()
argument_list|,
literal|false
argument_list|,
name|pathWithNewMergeInfo
argument_list|)
decl_stmt|;
name|MergePath
name|parent
init|=
operator|(
name|MergePath
operator|)
name|myChildrenWithMergeInfo
operator|.
name|get
argument_list|(
name|parentIndex
argument_list|)
decl_stmt|;
name|newChild
operator|.
name|myRemainingRanges
operator|=
name|parent
operator|.
name|myRemainingRanges
operator|.
name|dup
argument_list|()
expr_stmt|;
name|myChildrenWithMergeInfo
operator|.
name|add
argument_list|(
name|newChild
argument_list|)
expr_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|myChildrenWithMergeInfo
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|oldURL
operator|!=
literal|null
condition|)
block|{
name|myRepository2
operator|.
name|setLocation
argument_list|(
name|oldURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|processChildrenWithDeletedMergeInfo
parameter_list|()
block|{
if|if
condition|(
name|myPathsWithDeletedMergeInfo
operator|!=
literal|null
operator|&&
operator|!
name|myIsDryRun
condition|)
block|{
name|Iterator
name|children
init|=
name|myChildrenWithMergeInfo
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|children
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// skip first.
while|while
condition|(
name|children
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|MergePath
name|path
init|=
operator|(
name|MergePath
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
name|myPathsWithDeletedMergeInfo
operator|.
name|contains
argument_list|(
name|path
operator|.
name|myPath
argument_list|)
condition|)
block|{
name|children
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|Map
name|splitMergeInfoOnRevision
parameter_list|(
name|Map
index|[]
name|mergeInfo
parameter_list|,
name|long
name|revision
parameter_list|)
block|{
name|Map
name|youngerMergeInfo
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|mergeInfoIter
init|=
name|mergeInfo
index|[
literal|0
index|]
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergeInfoIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|mergeSourcePath
init|=
operator|(
name|String
operator|)
name|mergeInfoIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
index|[
literal|0
index|]
operator|.
name|get
argument_list|(
name|mergeSourcePath
argument_list|)
decl_stmt|;
name|SVNMergeRange
index|[]
name|ranges
init|=
name|rangeList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|range
operator|.
name|getEndRevision
argument_list|()
operator|<
name|revision
condition|)
block|{
continue|continue;
block|}
name|LinkedList
name|youngerRanges
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|ranges
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|SVNMergeRange
name|youngerRange
init|=
name|ranges
index|[
name|j
index|]
operator|.
name|dup
argument_list|()
decl_stmt|;
if|if
condition|(
name|j
operator|==
name|i
operator|&&
name|youngerRange
operator|.
name|getStartRevision
argument_list|()
operator|<
name|revision
condition|)
block|{
name|youngerRange
operator|.
name|setStartRevision
argument_list|(
name|revision
argument_list|)
expr_stmt|;
name|range
operator|.
name|setEndRevision
argument_list|(
name|revision
argument_list|)
expr_stmt|;
block|}
name|youngerRanges
operator|.
name|add
argument_list|(
name|youngerRange
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|youngerMergeInfo
operator|==
literal|null
condition|)
block|{
name|youngerMergeInfo
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
block|}
name|youngerMergeInfo
operator|.
name|put
argument_list|(
name|mergeSourcePath
argument_list|,
name|SVNMergeRangeList
operator|.
name|fromCollection
argument_list|(
name|youngerRanges
argument_list|)
argument_list|)
expr_stmt|;
name|mergeInfo
index|[
literal|0
index|]
operator|=
name|SVNMergeInfoUtil
operator|.
name|removeMergeInfo
argument_list|(
name|youngerMergeInfo
argument_list|,
name|mergeInfo
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|youngerMergeInfo
return|;
block|}
specifier|private
name|void
name|ensureWCReflectsRepositorySubTree
parameter_list|(
name|File
name|targetWCPath
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNRevisionStatus
name|wcStatus
init|=
name|SVNStatusUtil
operator|.
name|getRevisionStatus
argument_list|(
name|targetWCPath
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|,
name|getEventDispatcher
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcStatus
operator|.
name|isSwitched
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"Cannot reintegrate into a working copy with a switched subtree"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wcStatus
operator|.
name|isSparseCheckout
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"Cannot reintegrate into a working copy not entirely at infinite depth"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wcStatus
operator|.
name|isModified
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"Cannot reintegrate into a working copy that has local modifications"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|wcStatus
operator|.
name|getMinRevision
argument_list|()
argument_list|)
operator|||
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|wcStatus
operator|.
name|getMaxRevision
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"Cannot determine revision of working copy"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|wcStatus
operator|.
name|getMinRevision
argument_list|()
operator|!=
name|wcStatus
operator|.
name|getMaxRevision
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"Cannot reintegrate into mixed-revision working copy; try updating first"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|ensureAllMissingRangesArePhantoms
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|Map
name|unmergedHistory
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|unmergedHistoryIter
init|=
name|unmergedHistory
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|unmergedHistoryIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|catalogPath
init|=
operator|(
name|String
operator|)
name|unmergedHistoryIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Map
name|historyAsMergeInfo
init|=
operator|(
name|Map
operator|)
name|unmergedHistory
operator|.
name|get
argument_list|(
name|catalogPath
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|pathsIter
init|=
name|historyAsMergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|pathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|pathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|historyAsMergeInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNMergeRange
index|[]
name|ranges
init|=
name|rangeList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNMergeRange
name|mergeRange
init|=
name|ranges
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|mergeRange
operator|.
name|getStartRevision
argument_list|()
operator|>=
name|mergeRange
operator|.
name|getEndRevision
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"range start>= end"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNDirEntry
name|dirEntry
init|=
name|repository
operator|.
name|info
argument_list|(
name|path
argument_list|,
name|mergeRange
operator|.
name|getEndRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeRangeContainsRevision
argument_list|(
name|mergeRange
argument_list|,
name|dirEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|SVNURL
name|fullURL
init|=
name|repository
operator|.
name|getLocation
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|fullURL
operator|=
name|fullURL
operator|.
name|appendPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"At least one revision (r{0}) not yet merged from ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Long
argument_list|(
name|dirEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
block|,
name|fullURL
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|Map
name|findUnmergedMergeInfo
parameter_list|(
name|boolean
index|[]
name|neverSynched
parameter_list|,
name|long
index|[]
name|youngestMergedRev
parameter_list|,
name|long
index|[]
name|ycAncestorRev
parameter_list|,
name|Map
name|srcCatalog
parameter_list|,
name|Map
name|targetSegments
parameter_list|,
name|String
name|sourceReposPath
parameter_list|,
name|String
name|targetReposPath
parameter_list|,
name|long
name|targetRev
parameter_list|,
name|long
name|srcRev
parameter_list|,
name|SVNRepository
name|repos
parameter_list|)
throws|throws
name|SVNException
block|{
name|neverSynched
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
name|youngestMergedRev
index|[
literal|0
index|]
operator|=
name|SVNRepository
operator|.
name|INVALID_REVISION
expr_stmt|;
name|Map
name|newCatalog
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|targetSegmentsIter
init|=
name|targetSegments
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|targetSegmentsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|targetSegmentsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|segments
init|=
operator|(
name|Collection
operator|)
name|targetSegments
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|srcPath
init|=
name|path
operator|.
name|substring
argument_list|(
name|targetReposPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|srcPath
operator|=
name|srcPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|srcPath
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|sourceReposPath
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|srcPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|srcPath
operator|=
literal|"/"
operator|+
name|srcPath
expr_stmt|;
block|}
name|Map
name|targetHistoryAsMergeInfo
init|=
name|getMergeInfoFromSegments
argument_list|(
name|segments
argument_list|)
decl_stmt|;
name|targetHistoryAsMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|filterMergeInfoByRanges
argument_list|(
name|targetHistoryAsMergeInfo
argument_list|,
name|srcRev
argument_list|,
name|ycAncestorRev
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|SVNMergeInfo
name|sourceMergeInfoObject
init|=
operator|(
name|SVNMergeInfo
operator|)
name|srcCatalog
operator|.
name|get
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|Map
name|srcMergeInfo
init|=
name|sourceMergeInfoObject
operator|!=
literal|null
condition|?
name|sourceMergeInfoObject
operator|.
name|getMergeSourcesToMergeLists
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|srcMergeInfo
operator|!=
literal|null
condition|)
block|{
name|srcCatalog
operator|.
name|remove
argument_list|(
name|srcPath
argument_list|)
expr_stmt|;
name|Map
name|explicitSrcTgtHistoryIntersection
init|=
name|SVNMergeInfoUtil
operator|.
name|intersectMergeInfo
argument_list|(
name|srcMergeInfo
argument_list|,
name|targetHistoryAsMergeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|explicitSrcTgtHistoryIntersection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|neverSynched
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|long
index|[]
name|endPoints
init|=
name|SVNMergeInfoUtil
operator|.
name|getRangeEndPoints
argument_list|(
name|explicitSrcTgtHistoryIntersection
argument_list|)
decl_stmt|;
name|long
name|youngRev
init|=
name|endPoints
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestMergedRev
index|[
literal|0
index|]
argument_list|)
operator|||
operator|(
name|youngRev
operator|>
name|youngestMergedRev
index|[
literal|0
index|]
operator|)
condition|)
block|{
name|youngestMergedRev
index|[
literal|0
index|]
operator|=
name|youngRev
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|SVNNodeKind
name|kind
init|=
name|repos
operator|.
name|checkPath
argument_list|(
name|srcPath
argument_list|,
name|srcRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
continue|continue;
block|}
name|Map
name|subTreeCatalog
init|=
name|repos
operator|.
name|getMergeInfo
argument_list|(
operator|new
name|String
index|[]
block|{
name|srcPath
block|}
argument_list|,
name|srcRev
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|subTreeCatalog
operator|!=
literal|null
condition|)
block|{
name|SVNMergeInfo
name|sourceMergeInfo
init|=
operator|(
name|SVNMergeInfo
operator|)
name|subTreeCatalog
operator|.
name|get
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|srcMergeInfo
operator|=
name|sourceMergeInfo
operator|!=
literal|null
condition|?
name|sourceMergeInfo
operator|.
name|getMergeSourcesToMergeLists
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|srcMergeInfo
operator|==
literal|null
condition|)
block|{
name|srcMergeInfo
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
block|}
block|}
name|segments
operator|=
name|repos
operator|.
name|getLocationSegments
argument_list|(
name|srcPath
argument_list|,
name|srcRev
argument_list|,
name|srcRev
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
expr_stmt|;
name|Map
name|srcHistoryAsMergeInfo
init|=
name|getMergeInfoFromSegments
argument_list|(
name|segments
argument_list|)
decl_stmt|;
name|srcMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|srcMergeInfo
argument_list|,
name|srcHistoryAsMergeInfo
argument_list|)
expr_stmt|;
name|Map
name|commonMergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|intersectMergeInfo
argument_list|(
name|srcMergeInfo
argument_list|,
name|targetHistoryAsMergeInfo
argument_list|)
decl_stmt|;
name|Map
name|filteredMergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|removeMergeInfo
argument_list|(
name|commonMergeInfo
argument_list|,
name|targetHistoryAsMergeInfo
argument_list|)
decl_stmt|;
name|newCatalog
operator|.
name|put
argument_list|(
name|srcPath
argument_list|,
name|filteredMergeInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|srcCatalog
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|srcCatalogIter
init|=
name|srcCatalog
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|srcCatalogIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|srcPath
init|=
operator|(
name|String
operator|)
name|srcCatalogIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeInfo
name|sourceMergeInfoObject
init|=
operator|(
name|SVNMergeInfo
operator|)
name|srcCatalog
operator|.
name|get
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
name|Map
name|srcMergeInfo
init|=
name|sourceMergeInfoObject
operator|.
name|getMergeSourcesToMergeLists
argument_list|()
decl_stmt|;
name|String
name|targetPath
init|=
name|srcPath
operator|.
name|substring
argument_list|(
name|sourceReposPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|targetPath
operator|=
name|targetPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|targetPath
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|targetReposPath
argument_list|,
name|targetPath
argument_list|)
expr_stmt|;
name|Collection
name|segments
init|=
literal|null
decl_stmt|;
name|boolean
name|tgtPathExists
init|=
literal|true
decl_stmt|;
try|try
block|{
name|segments
operator|=
name|repos
operator|.
name|getLocationSegments
argument_list|(
name|targetPath
argument_list|,
name|targetRev
argument_list|,
name|targetRev
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
decl_stmt|;
name|SVNErrorCode
name|errCode
init|=
name|err
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|errCode
operator|!=
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
operator|&&
name|errCode
operator|!=
name|SVNErrorCode
operator|.
name|RA_DAV_REQUEST_FAILED
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
name|tgtPathExists
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|tgtPathExists
condition|)
block|{
name|Map
name|targetHistoryAsMergeInfo
init|=
name|getMergeInfoFromSegments
argument_list|(
name|segments
argument_list|)
decl_stmt|;
name|Map
name|explicitSrcTgtHistoryIntersection
init|=
name|SVNMergeInfoUtil
operator|.
name|intersectMergeInfo
argument_list|(
name|srcMergeInfo
argument_list|,
name|targetHistoryAsMergeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|explicitSrcTgtHistoryIntersection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|neverSynched
index|[
literal|0
index|]
operator|=
literal|false
expr_stmt|;
name|long
index|[]
name|endPoints
init|=
name|SVNMergeInfoUtil
operator|.
name|getRangeEndPoints
argument_list|(
name|explicitSrcTgtHistoryIntersection
argument_list|)
decl_stmt|;
name|long
name|youngRev
init|=
name|endPoints
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestMergedRev
index|[
literal|0
index|]
argument_list|)
operator|||
operator|(
name|youngRev
operator|>
name|youngestMergedRev
index|[
literal|0
index|]
operator|)
condition|)
block|{
name|youngestMergedRev
index|[
literal|0
index|]
operator|=
name|youngRev
expr_stmt|;
block|}
block|}
name|segments
operator|=
name|repos
operator|.
name|getLocationSegments
argument_list|(
name|srcPath
argument_list|,
name|targetRev
argument_list|,
name|targetRev
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
expr_stmt|;
name|Map
name|srcHistoryAsMergeInfo
init|=
name|getMergeInfoFromSegments
argument_list|(
name|segments
argument_list|)
decl_stmt|;
name|srcMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|srcMergeInfo
argument_list|,
name|srcHistoryAsMergeInfo
argument_list|)
expr_stmt|;
name|Map
name|commonMergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|intersectMergeInfo
argument_list|(
name|srcMergeInfo
argument_list|,
name|targetHistoryAsMergeInfo
argument_list|)
decl_stmt|;
name|Map
name|filteredMergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|removeMergeInfo
argument_list|(
name|commonMergeInfo
argument_list|,
name|targetHistoryAsMergeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|filteredMergeInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newCatalog
operator|.
name|put
argument_list|(
name|srcPath
argument_list|,
name|filteredMergeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestMergedRev
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|newCatalog
operator|=
name|SVNMergeInfoUtil
operator|.
name|filterCatalogByRanges
argument_list|(
name|newCatalog
argument_list|,
name|youngestMergedRev
index|[
literal|0
index|]
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|newCatalog
return|;
block|}
specifier|private
name|Map
name|calculateLeftHandSide
parameter_list|(
name|SVNURL
index|[]
name|leftURL
parameter_list|,
name|long
index|[]
name|leftRev
parameter_list|,
name|String
name|targetReposRelPath
parameter_list|,
name|Collection
name|subTreesWithMergeInfo
parameter_list|,
name|long
name|targetRev
parameter_list|,
name|String
name|sourceReposRelPath
parameter_list|,
name|SVNURL
name|sourceReposRoot
parameter_list|,
name|long
name|sourceRev
parameter_list|,
name|SVNRepository
name|repository
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|segmentsMap
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|subTreesPathIter
init|=
name|subTreesWithMergeInfo
operator|.
name|iterator
argument_list|()
init|;
name|subTreesPathIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|subTreesPathIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|segments
init|=
name|repository
operator|.
name|getLocationSegments
argument_list|(
name|path
argument_list|,
name|targetRev
argument_list|,
name|targetRev
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|)
decl_stmt|;
name|segmentsMap
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|segments
argument_list|)
expr_stmt|;
block|}
name|Map
name|mergeInfoCatalog
init|=
name|repository
operator|.
name|getMergeInfo
argument_list|(
operator|new
name|String
index|[]
block|{
name|sourceReposRelPath
block|}
argument_list|,
name|sourceRev
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfoCatalog
operator|==
literal|null
condition|)
block|{
name|mergeInfoCatalog
operator|=
name|Collections
operator|.
name|EMPTY_MAP
expr_stmt|;
block|}
name|boolean
index|[]
name|neverSynched
init|=
operator|new
name|boolean
index|[
literal|1
index|]
decl_stmt|;
name|long
index|[]
name|youngestMergedRev
init|=
operator|new
name|long
index|[
literal|1
index|]
decl_stmt|;
name|SVNURL
name|sourceURL
init|=
name|sourceReposRoot
operator|.
name|appendPath
argument_list|(
name|sourceReposRelPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|sourceReposRelPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|sourceReposRelPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|targetURL
init|=
name|sourceReposRoot
operator|.
name|appendPath
argument_list|(
name|targetReposRelPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|targetReposRelPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|targetReposRelPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNLocationEntry
name|youngestLocation
init|=
name|getYoungestCommonAncestor
argument_list|(
literal|null
argument_list|,
name|sourceURL
argument_list|,
name|sourceRev
argument_list|,
literal|null
argument_list|,
name|targetURL
argument_list|,
name|targetRev
argument_list|)
decl_stmt|;
name|String
name|youngestCommonAncestorPath
init|=
name|youngestLocation
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|leftRev
index|[
literal|0
index|]
operator|=
name|youngestLocation
operator|.
name|getRevision
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|youngestCommonAncestorPath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|leftRev
index|[
literal|0
index|]
argument_list|)
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"''{0}@{1}'' must be ancestrally related to ''{2}@{3}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|sourceURL
block|,
operator|new
name|Long
argument_list|(
name|sourceRev
argument_list|)
block|,
name|targetURL
block|,
operator|new
name|Long
argument_list|(
name|targetRev
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|Map
name|unmergedCatalog
init|=
name|findUnmergedMergeInfo
argument_list|(
name|neverSynched
argument_list|,
name|youngestMergedRev
argument_list|,
name|leftRev
argument_list|,
name|mergeInfoCatalog
argument_list|,
name|segmentsMap
argument_list|,
name|sourceReposRelPath
argument_list|,
name|targetReposRelPath
argument_list|,
name|targetRev
argument_list|,
name|sourceRev
argument_list|,
name|repository
argument_list|)
decl_stmt|;
name|unmergedCatalog
operator|=
name|SVNMergeInfoUtil
operator|.
name|elideMergeInfoCatalog
argument_list|(
name|unmergedCatalog
argument_list|)
expr_stmt|;
if|if
condition|(
name|neverSynched
index|[
literal|0
index|]
condition|)
block|{
name|leftURL
index|[
literal|0
index|]
operator|=
name|sourceReposRoot
operator|.
name|appendPath
argument_list|(
name|youngestCommonAncestorPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|?
name|youngestCommonAncestorPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
else|:
name|youngestCommonAncestorPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|leftRev
index|[
literal|0
index|]
operator|=
name|youngestMergedRev
index|[
literal|0
index|]
expr_stmt|;
name|leftURL
index|[
literal|0
index|]
operator|=
name|deriveLocation
argument_list|(
literal|null
argument_list|,
name|sourceReposRoot
operator|.
name|appendPath
argument_list|(
name|targetReposRelPath
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|youngestMergedRev
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|repository
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|unmergedCatalog
return|;
block|}
specifier|private
name|boolean
name|mergeRangeContainsRevision
parameter_list|(
name|SVNMergeRange
name|range
parameter_list|,
name|long
name|rev
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"invalid start range revision"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"invalid end range revision"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|range
operator|.
name|getStartRevision
argument_list|()
operator|==
name|range
operator|.
name|getEndRevision
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"start range revision is equal to end range revision"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|range
operator|.
name|getStartRevision
argument_list|()
operator|<
name|range
operator|.
name|getEndRevision
argument_list|()
condition|)
block|{
return|return
name|rev
operator|>
name|range
operator|.
name|getStartRevision
argument_list|()
operator|&&
name|rev
operator|<=
name|range
operator|.
name|getEndRevision
argument_list|()
return|;
block|}
return|return
name|rev
operator|>
name|range
operator|.
name|getEndRevision
argument_list|()
operator|&&
name|rev
operator|<=
name|range
operator|.
name|getStartRevision
argument_list|()
return|;
block|}
specifier|private
name|void
name|mergeCousinsAndSupplementMergeInfo
parameter_list|(
name|File
name|targetWCPath
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNRepository
name|repository
parameter_list|,
name|SVNURL
name|url1
parameter_list|,
name|long
name|rev1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|long
name|rev2
parameter_list|,
name|long
name|youngestCommonRev
parameter_list|,
name|SVNURL
name|sourceReposRoot
parameter_list|,
name|SVNURL
name|wcReposRoot
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|boolean
name|ignoreAncestry
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|recordOnly
parameter_list|,
name|boolean
name|dryRun
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|oldURL
init|=
name|repository
operator|.
name|getLocation
argument_list|()
decl_stmt|;
name|List
name|addSources
init|=
literal|null
decl_stmt|;
name|List
name|removeSources
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SVNRevision
name|sRev
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|rev1
argument_list|)
decl_stmt|;
name|SVNRevision
name|eRev
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|youngestCommonRev
argument_list|)
decl_stmt|;
name|SVNRevisionRange
name|range
init|=
operator|new
name|SVNRevisionRange
argument_list|(
name|sRev
argument_list|,
name|eRev
argument_list|)
decl_stmt|;
name|List
name|ranges
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setLocation
argument_list|(
name|url1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|removeSources
operator|=
name|normalizeMergeSources
argument_list|(
literal|null
argument_list|,
name|url1
argument_list|,
name|sourceReposRoot
argument_list|,
name|sRev
argument_list|,
name|ranges
argument_list|,
name|repository
argument_list|)
expr_stmt|;
name|sRev
operator|=
name|eRev
expr_stmt|;
name|eRev
operator|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|rev2
argument_list|)
expr_stmt|;
name|range
operator|=
operator|new
name|SVNRevisionRange
argument_list|(
name|sRev
argument_list|,
name|eRev
argument_list|)
expr_stmt|;
name|ranges
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ranges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|repository
operator|.
name|setLocation
argument_list|(
name|url2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|addSources
operator|=
name|normalizeMergeSources
argument_list|(
literal|null
argument_list|,
name|url2
argument_list|,
name|sourceReposRoot
argument_list|,
name|eRev
argument_list|,
name|ranges
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|repository
operator|.
name|setLocation
argument_list|(
name|oldURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|boolean
name|sameRepos
init|=
name|sourceReposRoot
operator|.
name|equals
argument_list|(
name|wcReposRoot
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|recordOnly
condition|)
block|{
name|MergeSource
name|fauxSource
init|=
operator|new
name|MergeSource
argument_list|()
decl_stmt|;
name|fauxSource
operator|.
name|myURL1
operator|=
name|url1
expr_stmt|;
name|fauxSource
operator|.
name|myURL2
operator|=
name|url2
expr_stmt|;
name|fauxSource
operator|.
name|myRevision1
operator|=
name|rev1
expr_stmt|;
name|fauxSource
operator|.
name|myRevision2
operator|=
name|rev2
expr_stmt|;
name|List
name|fauxSources
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|fauxSources
operator|.
name|add
argument_list|(
name|fauxSource
argument_list|)
expr_stmt|;
name|doMerge
argument_list|(
name|fauxSources
argument_list|,
name|targetWCPath
argument_list|,
name|entry
argument_list|,
name|adminArea
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|sourceReposRoot
operator|.
name|equals
argument_list|(
name|wcReposRoot
argument_list|)
argument_list|,
name|ignoreAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|sameRepos
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|,
literal|"Merge from foreign repository is not compatible with mergeinfo modification"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sameRepos
condition|)
block|{
name|doMerge
argument_list|(
name|addSources
argument_list|,
name|targetWCPath
argument_list|,
name|entry
argument_list|,
name|adminArea
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|sameRepos
argument_list|,
name|ignoreAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|)
expr_stmt|;
name|doMerge
argument_list|(
name|removeSources
argument_list|,
name|targetWCPath
argument_list|,
name|entry
argument_list|,
name|adminArea
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|sameRepos
argument_list|,
name|ignoreAncestry
argument_list|,
name|force
argument_list|,
name|dryRun
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
name|depth
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|isSameRepository
parameter_list|()
block|{
return|return
name|myIsSameRepository
return|;
block|}
specifier|protected
name|boolean
name|isHonorMergeInfo
parameter_list|()
block|{
return|return
name|myIsMergeInfoCapable
operator|&&
name|myAreSourcesAncestral
operator|&&
name|myIsSameRepository
operator|&&
operator|!
name|myIsIgnoreAncestry
return|;
block|}
specifier|public
name|boolean
name|isRecordMergeInfo
parameter_list|()
block|{
return|return
name|myIsMergeInfoCapable
operator|&&
name|myAreSourcesAncestral
operator|&&
name|myIsSameRepository
operator|&&
operator|!
name|myIsIgnoreAncestry
operator|&&
operator|!
name|myIsDryRun
return|;
block|}
specifier|protected
name|MergeSource
name|getCurrentMergeSource
parameter_list|()
block|{
return|return
name|myCurrentMergeSource
return|;
block|}
specifier|private
name|List
name|normalizeMergeSources
parameter_list|(
name|File
name|source
parameter_list|,
name|SVNURL
name|sourceURL
parameter_list|,
name|SVNURL
name|sourceRootURL
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|Collection
name|rangesToMerge
parameter_list|,
name|SVNRepository
name|repository
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|youngestRevision
index|[]
init|=
block|{
name|SVNRepository
operator|.
name|INVALID_REVISION
block|}
decl_stmt|;
name|long
name|pegRevNum
init|=
name|getRevisionNumber
argument_list|(
name|pegRevision
argument_list|,
name|youngestRevision
argument_list|,
name|repository
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|pegRevNum
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|List
name|mergeRanges
init|=
operator|new
name|ArrayList
argument_list|(
name|rangesToMerge
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|rangesIter
init|=
name|rangesToMerge
operator|.
name|iterator
argument_list|()
init|;
name|rangesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNRevisionRange
name|revRange
init|=
operator|(
name|SVNRevisionRange
operator|)
name|rangesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNRevision
name|rangeStart
init|=
name|revRange
operator|.
name|getStartRevision
argument_list|()
decl_stmt|;
name|SVNRevision
name|rangeEnd
init|=
name|revRange
operator|.
name|getEndRevision
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|rangeStart
operator|.
name|isValid
argument_list|()
operator|||
operator|!
name|rangeEnd
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_BAD_REVISION
argument_list|,
literal|"Not all required revisions are specified"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|long
name|rangeStartRev
init|=
name|getRevisionNumber
argument_list|(
name|rangeStart
argument_list|,
name|youngestRevision
argument_list|,
name|repository
argument_list|,
name|source
argument_list|)
decl_stmt|;
name|long
name|rangeEndRev
init|=
name|getRevisionNumber
argument_list|(
name|rangeEnd
argument_list|,
name|youngestRevision
argument_list|,
name|repository
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeStartRev
operator|!=
name|rangeEndRev
condition|)
block|{
name|SVNMergeRange
name|range
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|rangeStartRev
argument_list|,
name|rangeEndRev
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|mergeRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNMergeRangeList
name|mergeRangesList
init|=
name|SVNMergeRangeList
operator|.
name|fromCollection
argument_list|(
name|mergeRanges
argument_list|)
decl_stmt|;
name|mergeRanges
operator|=
name|mergeRangesList
operator|.
name|getRangesAsList
argument_list|()
expr_stmt|;
if|if
condition|(
name|mergeRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|mergeRanges
return|;
block|}
name|long
name|oldestRequestedRev
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
name|long
name|youngestRequestedRev
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
for|for
control|(
name|Iterator
name|rangesIter
init|=
name|mergeRanges
operator|.
name|iterator
argument_list|()
init|;
name|rangesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNMergeRange
name|range
init|=
operator|(
name|SVNMergeRange
operator|)
name|rangesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|long
name|minRev
init|=
name|Math
operator|.
name|min
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|maxRev
init|=
name|Math
operator|.
name|max
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|oldestRequestedRev
argument_list|)
operator|||
name|minRev
operator|<
name|oldestRequestedRev
condition|)
block|{
name|oldestRequestedRev
operator|=
name|minRev
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestRequestedRev
argument_list|)
operator|||
name|maxRev
operator|>
name|youngestRequestedRev
condition|)
block|{
name|youngestRequestedRev
operator|=
name|maxRev
expr_stmt|;
block|}
block|}
if|if
condition|(
name|pegRevNum
operator|<
name|youngestRequestedRev
condition|)
block|{
name|getLocations
argument_list|(
name|sourceURL
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|pegRevNum
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|youngestRequestedRev
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|pegRevNum
operator|=
name|youngestRequestedRev
expr_stmt|;
block|}
name|LinkedList
name|segments
init|=
operator|(
name|LinkedList
operator|)
name|repository
operator|.
name|getLocationSegments
argument_list|(
literal|""
argument_list|,
name|pegRevNum
argument_list|,
name|youngestRequestedRev
argument_list|,
name|oldestRequestedRev
argument_list|)
decl_stmt|;
name|long
name|trimRevision
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
if|if
condition|(
operator|!
name|segments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNLocationSegment
name|segment
init|=
operator|(
name|SVNLocationSegment
operator|)
name|segments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|segment
operator|.
name|getStartRevision
argument_list|()
operator|!=
name|oldestRequestedRev
condition|)
block|{
name|trimRevision
operator|=
name|segment
operator|.
name|getStartRevision
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|segment
operator|.
name|getPath
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|segments
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|SVNLocationSegment
name|segment2
init|=
operator|(
name|SVNLocationSegment
operator|)
name|segments
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|SVNURL
name|segmentURL
init|=
name|sourceRootURL
operator|.
name|appendPath
argument_list|(
name|segment2
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNLocationEntry
name|copyFromLocation
init|=
name|getCopySource
argument_list|(
literal|null
argument_list|,
name|segmentURL
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|segment2
operator|.
name|getStartRevision
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|copyFromPath
init|=
name|copyFromLocation
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|long
name|copyFromRevision
init|=
name|copyFromLocation
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|copyFromPath
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|copyFromRevision
argument_list|)
condition|)
block|{
name|SVNLocationSegment
name|newSegment
init|=
operator|new
name|SVNLocationSegment
argument_list|(
name|copyFromRevision
argument_list|,
name|copyFromRevision
argument_list|,
name|copyFromPath
argument_list|)
decl_stmt|;
name|segment
operator|.
name|setStartRevision
argument_list|(
name|copyFromRevision
operator|+
literal|1
argument_list|)
expr_stmt|;
name|segments
operator|.
name|addFirst
argument_list|(
name|newSegment
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|SVNLocationSegment
index|[]
name|segmentsArray
init|=
operator|(
name|SVNLocationSegment
index|[]
operator|)
name|segments
operator|.
name|toArray
argument_list|(
operator|new
name|SVNLocationSegment
index|[
name|segments
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
name|List
name|resultMergeSources
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|rangesIter
init|=
name|mergeRanges
operator|.
name|iterator
argument_list|()
init|;
name|rangesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNMergeRange
name|range
init|=
operator|(
name|SVNMergeRange
operator|)
name|rangesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|trimRevision
argument_list|)
condition|)
block|{
if|if
condition|(
name|Math
operator|.
name|max
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
operator|<
name|trimRevision
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|range
operator|.
name|getStartRevision
argument_list|()
operator|<
name|trimRevision
condition|)
block|{
name|range
operator|.
name|setStartRevision
argument_list|(
name|trimRevision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|range
operator|.
name|getEndRevision
argument_list|()
operator|<
name|trimRevision
condition|)
block|{
name|range
operator|.
name|setEndRevision
argument_list|(
name|trimRevision
argument_list|)
expr_stmt|;
block|}
block|}
name|List
name|mergeSources
init|=
name|combineRangeWithSegments
argument_list|(
name|range
argument_list|,
name|segmentsArray
argument_list|,
name|sourceRootURL
argument_list|)
decl_stmt|;
name|resultMergeSources
operator|.
name|addAll
argument_list|(
name|mergeSources
argument_list|)
expr_stmt|;
block|}
return|return
name|resultMergeSources
return|;
block|}
specifier|private
name|List
name|combineRangeWithSegments
parameter_list|(
name|SVNMergeRange
name|range
parameter_list|,
name|SVNLocationSegment
index|[]
name|segments
parameter_list|,
name|SVNURL
name|sourceRootURL
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|minRev
init|=
name|Math
operator|.
name|min
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|long
name|maxRev
init|=
name|Math
operator|.
name|max
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
decl_stmt|;
name|boolean
name|subtractive
init|=
name|range
operator|.
name|getStartRevision
argument_list|()
operator|>
name|range
operator|.
name|getEndRevision
argument_list|()
decl_stmt|;
name|List
name|mergeSources
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|SVNLocationSegment
name|segment
init|=
name|segments
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|segment
operator|.
name|getEndRevision
argument_list|()
operator|<
name|minRev
operator|||
name|segment
operator|.
name|getStartRevision
argument_list|()
operator|>
name|maxRev
operator|||
name|segment
operator|.
name|getPath
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|path1
init|=
literal|null
decl_stmt|;
name|long
name|rev1
init|=
name|Math
operator|.
name|max
argument_list|(
name|segment
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|minRev
argument_list|)
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|minRev
operator|<=
name|segment
operator|.
name|getStartRevision
argument_list|()
condition|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|path1
operator|=
name|segments
index|[
name|i
operator|-
literal|1
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|path1
operator|==
literal|null
operator|&&
name|i
operator|>
literal|1
condition|)
block|{
name|path1
operator|=
name|segments
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|getPath
argument_list|()
expr_stmt|;
name|rev1
operator|=
name|segments
index|[
name|i
operator|-
literal|2
index|]
operator|.
name|getEndRevision
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|path1
operator|=
name|segment
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|path1
operator|==
literal|null
operator|||
name|segment
operator|.
name|getPath
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|MergeSource
name|mergeSource
init|=
operator|new
name|MergeSource
argument_list|()
decl_stmt|;
name|mergeSource
operator|.
name|myURL1
operator|=
name|sourceRootURL
operator|.
name|appendPath
argument_list|(
name|path1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mergeSource
operator|.
name|myURL2
operator|=
name|sourceRootURL
operator|.
name|appendPath
argument_list|(
name|segment
operator|.
name|getPath
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|mergeSource
operator|.
name|myRevision1
operator|=
name|rev1
expr_stmt|;
name|mergeSource
operator|.
name|myRevision2
operator|=
name|Math
operator|.
name|min
argument_list|(
name|segment
operator|.
name|getEndRevision
argument_list|()
argument_list|,
name|maxRev
argument_list|)
expr_stmt|;
if|if
condition|(
name|subtractive
condition|)
block|{
name|long
name|tmpRev
init|=
name|mergeSource
operator|.
name|myRevision1
decl_stmt|;
name|SVNURL
name|tmpURL
init|=
name|mergeSource
operator|.
name|myURL1
decl_stmt|;
name|mergeSource
operator|.
name|myRevision1
operator|=
name|mergeSource
operator|.
name|myRevision2
expr_stmt|;
name|mergeSource
operator|.
name|myURL1
operator|=
name|mergeSource
operator|.
name|myURL2
expr_stmt|;
name|mergeSource
operator|.
name|myRevision2
operator|=
name|tmpRev
expr_stmt|;
name|mergeSource
operator|.
name|myURL2
operator|=
name|tmpURL
expr_stmt|;
block|}
name|mergeSources
operator|.
name|add
argument_list|(
name|mergeSource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|subtractive
operator|&&
operator|!
name|mergeSources
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|mergeSources
argument_list|,
operator|new
name|Comparator
argument_list|()
block|{
specifier|public
name|int
name|compare
parameter_list|(
name|Object
name|o1
parameter_list|,
name|Object
name|o2
parameter_list|)
block|{
name|MergeSource
name|source1
init|=
operator|(
name|MergeSource
operator|)
name|o1
decl_stmt|;
name|MergeSource
name|source2
init|=
operator|(
name|MergeSource
operator|)
name|o2
decl_stmt|;
name|long
name|src1Rev1
init|=
name|source1
operator|.
name|myRevision1
decl_stmt|;
name|long
name|src2Rev1
init|=
name|source2
operator|.
name|myRevision1
decl_stmt|;
if|if
condition|(
name|src1Rev1
operator|==
name|src2Rev1
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|src1Rev1
operator|<
name|src2Rev1
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|mergeSources
return|;
block|}
specifier|private
name|SVNLocationEntry
name|getYoungestCommonAncestor
parameter_list|(
name|File
name|path1
parameter_list|,
name|SVNURL
name|url1
parameter_list|,
name|long
name|revision1
parameter_list|,
name|File
name|path2
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|long
name|revision2
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|history1
init|=
name|getHistoryAsMergeInfo
argument_list|(
name|url1
argument_list|,
name|path1
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|revision1
argument_list|)
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Map
name|history2
init|=
name|getHistoryAsMergeInfo
argument_list|(
name|url2
argument_list|,
name|path2
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|revision2
argument_list|)
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|long
name|youngestCommonRevision
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
name|String
name|youngestCommonPath
init|=
literal|null
decl_stmt|;
for|for
control|(
name|Iterator
name|historyIter
init|=
name|history1
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|historyIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|historyEntry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|historyIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|path
init|=
operator|(
name|String
operator|)
name|historyEntry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|ranges1
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|historyEntry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|ranges2
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|history2
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|ranges2
operator|!=
literal|null
condition|)
block|{
name|SVNMergeRangeList
name|commonList
init|=
name|ranges2
operator|.
name|intersect
argument_list|(
name|ranges1
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|commonList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNMergeRange
name|commonRanges
index|[]
init|=
name|commonList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|youngestCommonRange
init|=
name|commonRanges
index|[
name|commonRanges
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestCommonRevision
argument_list|)
operator|||
name|youngestCommonRange
operator|.
name|getEndRevision
argument_list|()
operator|>
name|youngestCommonRevision
condition|)
block|{
name|youngestCommonRevision
operator|=
name|youngestCommonRange
operator|.
name|getEndRevision
argument_list|()
expr_stmt|;
name|youngestCommonPath
operator|=
name|path
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
operator|new
name|SVNLocationEntry
argument_list|(
name|youngestCommonRevision
argument_list|,
name|youngestCommonPath
argument_list|)
return|;
block|}
specifier|protected
name|Map
index|[]
name|getFullMergeInfo
parameter_list|(
name|SVNEntry
name|entry
parameter_list|,
name|boolean
index|[]
name|indirect
parameter_list|,
name|SVNMergeInfoInheritance
name|inherit
parameter_list|,
name|SVNRepository
name|repos
parameter_list|,
name|File
name|target
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
index|[]
name|result
init|=
operator|new
name|Map
index|[
literal|2
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|start
argument_list|)
operator|||
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|end
argument_list|)
operator|||
name|start
operator|<=
name|end
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"ASSERTION FAILED in SVNMergeDriver.getFullMergeInfo()"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
comment|//get recorded merge info
name|result
index|[
literal|0
index|]
operator|=
name|getWCOrRepositoryMergeInfo
argument_list|(
name|target
argument_list|,
name|entry
argument_list|,
name|inherit
argument_list|,
name|indirect
argument_list|,
literal|false
argument_list|,
name|repos
argument_list|)
expr_stmt|;
name|long
index|[]
name|targetRev
init|=
operator|new
name|long
index|[
literal|1
index|]
decl_stmt|;
name|targetRev
index|[
literal|0
index|]
operator|=
name|SVNRepository
operator|.
name|INVALID_REVISION
expr_stmt|;
name|SVNURL
name|url
init|=
name|deriveLocation
argument_list|(
name|target
argument_list|,
literal|null
argument_list|,
name|targetRev
argument_list|,
name|SVNRevision
operator|.
name|WORKING
argument_list|,
name|repos
argument_list|,
name|myWCAccess
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetRev
index|[
literal|0
index|]
operator|<=
name|end
condition|)
block|{
name|result
index|[
literal|1
index|]
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
comment|//implicit merge info
return|return
name|result
return|;
block|}
name|Map
name|implicitMergeInfo
init|=
name|calculateImplicitMergeInfo
argument_list|(
name|repos
argument_list|,
name|url
argument_list|,
name|targetRev
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
if|if
condition|(
name|implicitMergeInfo
operator|!=
literal|null
condition|)
block|{
name|result
index|[
literal|1
index|]
operator|=
name|implicitMergeInfo
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Map
name|calculateImplicitMergeInfo
parameter_list|(
name|SVNRepository
name|repos
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|long
index|[]
name|targetRev
parameter_list|,
name|long
name|start
parameter_list|,
name|long
name|end
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|implicitMergeInfo
init|=
literal|null
decl_stmt|;
name|boolean
name|closeSession
init|=
literal|false
decl_stmt|;
name|SVNURL
name|sessionURL
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|repos
operator|!=
literal|null
condition|)
block|{
name|sessionURL
operator|=
name|ensureSessionURL
argument_list|(
name|repos
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|repos
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|closeSession
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|targetRev
index|[
literal|0
index|]
operator|<
name|start
condition|)
block|{
name|getLocations
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|repos
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|targetRev
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|start
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|targetRev
index|[
literal|0
index|]
operator|=
name|start
expr_stmt|;
block|}
name|implicitMergeInfo
operator|=
name|getHistoryAsMergeInfo
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|targetRev
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|start
argument_list|,
name|end
argument_list|,
name|repos
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|sessionURL
operator|!=
literal|null
condition|)
block|{
name|repos
operator|.
name|setLocation
argument_list|(
name|sessionURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|closeSession
condition|)
block|{
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|implicitMergeInfo
return|;
block|}
specifier|private
name|int
name|findNearestAncestor
parameter_list|(
name|Object
index|[]
name|childrenWithMergeInfoArray
parameter_list|,
name|boolean
name|pathIsOwnAncestor
parameter_list|,
name|File
name|path
parameter_list|)
block|{
if|if
condition|(
name|childrenWithMergeInfoArray
operator|==
literal|null
condition|)
block|{
return|return
literal|0
return|;
block|}
name|int
name|ancestorIndex
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenWithMergeInfoArray
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfoArray
index|[
name|i
index|]
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|myPath
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|pathStr
init|=
name|path
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|childPath
argument_list|,
name|pathStr
argument_list|)
operator|&&
operator|(
operator|!
name|childPath
operator|.
name|equals
argument_list|(
name|pathStr
argument_list|)
operator|||
name|pathIsOwnAncestor
operator|)
condition|)
block|{
name|ancestorIndex
operator|=
name|i
expr_stmt|;
block|}
block|}
return|return
name|ancestorIndex
return|;
block|}
specifier|protected
name|Map
name|getHistoryAsMergeInfo
parameter_list|(
name|SVNURL
name|url
parameter_list|,
name|File
name|path
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|long
name|rangeYoungest
parameter_list|,
name|long
name|rangeOldest
parameter_list|,
name|SVNRepository
name|repos
parameter_list|,
name|SVNWCAccess
name|access
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
index|[]
name|pegRevNum
init|=
operator|new
name|long
index|[
literal|1
index|]
decl_stmt|;
name|pegRevNum
index|[
literal|0
index|]
operator|=
name|SVNRepository
operator|.
name|INVALID_REVISION
expr_stmt|;
name|url
operator|=
name|deriveLocation
argument_list|(
name|path
argument_list|,
name|url
argument_list|,
name|pegRevNum
argument_list|,
name|pegRevision
argument_list|,
name|repos
argument_list|,
name|access
argument_list|)
expr_stmt|;
name|boolean
name|closeSession
init|=
literal|false
decl_stmt|;
try|try
block|{
if|if
condition|(
name|repos
operator|==
literal|null
condition|)
block|{
name|repos
operator|=
name|createRepository
argument_list|(
name|url
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|closeSession
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|rangeYoungest
argument_list|)
condition|)
block|{
name|rangeYoungest
operator|=
name|pegRevNum
index|[
literal|0
index|]
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|rangeOldest
argument_list|)
condition|)
block|{
name|rangeOldest
operator|=
literal|0
expr_stmt|;
block|}
name|Collection
name|segments
init|=
name|repos
operator|.
name|getLocationSegments
argument_list|(
literal|""
argument_list|,
name|pegRevNum
index|[
literal|0
index|]
argument_list|,
name|rangeYoungest
argument_list|,
name|rangeOldest
argument_list|)
decl_stmt|;
return|return
name|getMergeInfoFromSegments
argument_list|(
name|segments
argument_list|)
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|closeSession
condition|)
block|{
name|repos
operator|.
name|closeSession
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Map
name|getMergeInfoFromSegments
parameter_list|(
name|Collection
name|segments
parameter_list|)
block|{
name|Map
name|mergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|segmentsIter
init|=
name|segments
operator|.
name|iterator
argument_list|()
init|;
name|segmentsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNLocationSegment
name|segment
init|=
operator|(
name|SVNLocationSegment
operator|)
name|segmentsIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|segment
operator|.
name|getPath
argument_list|()
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
name|String
name|sourcePath
init|=
name|segment
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|Collection
name|pathRanges
init|=
operator|(
name|Collection
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|sourcePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathRanges
operator|==
literal|null
condition|)
block|{
name|pathRanges
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
name|mergeInfo
operator|.
name|put
argument_list|(
name|sourcePath
argument_list|,
name|pathRanges
argument_list|)
expr_stmt|;
block|}
name|SVNMergeRange
name|range
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|Math
operator|.
name|max
argument_list|(
name|segment
operator|.
name|getStartRevision
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|segment
operator|.
name|getEndRevision
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|pathRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
name|Map
name|result
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|paths
init|=
name|mergeInfo
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|paths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|path
init|=
operator|(
name|String
operator|)
name|paths
operator|.
name|next
argument_list|()
decl_stmt|;
name|Collection
name|pathRanges
init|=
operator|(
name|Collection
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|result
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|SVNMergeRangeList
operator|.
name|fromCollection
argument_list|(
name|pathRanges
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|removeAbsentChildren
parameter_list|(
name|File
name|targetWCPath
parameter_list|,
name|List
name|childrenWithMergeInfo
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|children
init|=
name|childrenWithMergeInfo
operator|.
name|iterator
argument_list|()
init|;
name|children
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|topDir
init|=
name|targetWCPath
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|childPath
init|=
name|child
operator|.
name|myPath
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
operator|&&
operator|(
name|child
operator|.
name|myIsAbsent
operator|||
name|child
operator|.
name|myIsScheduledForDeletion
operator|)
operator|&&
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|topDir
argument_list|,
name|childPath
argument_list|)
condition|)
block|{
if|if
condition|(
name|mySkippedPaths
operator|!=
literal|null
condition|)
block|{
name|mySkippedPaths
operator|.
name|remove
argument_list|(
name|child
operator|.
name|myPath
argument_list|)
expr_stmt|;
block|}
name|children
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|removeFirstRangeFromRemainingRanges
parameter_list|(
name|long
name|endRevision
parameter_list|,
name|List
name|childrenWithMergeInfo
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|children
init|=
name|childrenWithMergeInfo
operator|.
name|iterator
argument_list|()
init|;
name|children
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
operator|||
name|child
operator|.
name|myIsAbsent
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|child
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNMergeRange
index|[]
name|originalRemainingRanges
init|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|firstRange
init|=
name|originalRemainingRanges
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|firstRange
operator|.
name|getEndRevision
argument_list|()
operator|==
name|endRevision
condition|)
block|{
name|SVNMergeRange
index|[]
name|remainingRanges
init|=
operator|new
name|SVNMergeRange
index|[
name|originalRemainingRanges
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|originalRemainingRanges
argument_list|,
literal|1
argument_list|,
name|remainingRanges
argument_list|,
literal|0
argument_list|,
name|originalRemainingRanges
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|remainingRanges
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|SVNMergeRangeList
name|removeNoOpMergeRanges
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|SVNMergeRangeList
name|ranges
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|oldestRev
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
name|long
name|youngestRev
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
name|SVNMergeRange
index|[]
name|mergeRanges
init|=
name|ranges
operator|.
name|getRanges
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SVNMergeRange
name|range
init|=
name|mergeRanges
index|[
name|i
index|]
decl_stmt|;
name|long
name|maxRev
init|=
name|Math
operator|.
name|max
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
decl_stmt|;
name|long
name|minRev
init|=
name|Math
operator|.
name|min
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|youngestRev
argument_list|)
operator|||
name|maxRev
operator|>
name|youngestRev
condition|)
block|{
name|youngestRev
operator|=
name|maxRev
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|oldestRev
argument_list|)
operator|||
name|minRev
operator|<
name|oldestRev
condition|)
block|{
name|oldestRev
operator|=
name|minRev
expr_stmt|;
block|}
block|}
specifier|final
name|List
name|changedRevs
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|repository
operator|.
name|log
argument_list|(
operator|new
name|String
index|[]
block|{
literal|""
block|}
argument_list|,
name|youngestRev
argument_list|,
name|oldestRev
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|,
literal|false
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
operator|new
name|ISVNLogEntryHandler
argument_list|()
block|{
specifier|public
name|void
name|handleLogEntry
parameter_list|(
name|SVNLogEntry
name|logEntry
parameter_list|)
throws|throws
name|SVNException
block|{
name|changedRevs
operator|.
name|add
argument_list|(
operator|new
name|Long
argument_list|(
name|logEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|long
name|youngestChangedRevision
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
name|long
name|oldestChangedRevision
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
if|if
condition|(
name|changedRevs
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|youngestChangedRevision
operator|=
operator|(
operator|(
name|Long
operator|)
name|changedRevs
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
name|oldestChangedRevision
operator|=
operator|(
operator|(
name|Long
operator|)
name|changedRevs
operator|.
name|get
argument_list|(
name|changedRevs
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
name|List
name|operativeRanges
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|SVNMergeRange
name|range
init|=
name|mergeRanges
index|[
name|i
index|]
decl_stmt|;
name|long
name|rangeMinRev
init|=
name|Math
operator|.
name|min
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
operator|+
literal|1
decl_stmt|;
name|long
name|rangeMaxRev
init|=
name|Math
operator|.
name|max
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeMinRev
operator|>
name|youngestChangedRevision
operator|||
name|rangeMaxRev
operator|<
name|oldestChangedRevision
condition|)
block|{
continue|continue;
block|}
for|for
control|(
name|Iterator
name|changedRevsIter
init|=
name|changedRevs
operator|.
name|iterator
argument_list|()
init|;
name|changedRevsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|long
name|changedRev
init|=
operator|(
operator|(
name|Long
operator|)
name|changedRevsIter
operator|.
name|next
argument_list|()
operator|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|changedRev
operator|>=
name|rangeMinRev
operator|&&
name|changedRev
operator|<=
name|rangeMaxRev
condition|)
block|{
name|operativeRanges
operator|.
name|add
argument_list|(
name|range
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|SVNMergeRangeList
operator|.
name|fromCollection
argument_list|(
name|operativeRanges
argument_list|)
return|;
block|}
specifier|private
name|SVNMergeRangeList
name|filterNaturalHistoryFromMergeInfo
parameter_list|(
name|String
name|srcPath
parameter_list|,
name|Map
name|implicitMergeInfo
parameter_list|,
name|SVNMergeRange
name|requestedRange
parameter_list|)
block|{
name|SVNMergeRangeList
name|requestedRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|requestedRange
operator|.
name|dup
argument_list|()
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|filteredRangeList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|implicitMergeInfo
operator|!=
literal|null
operator|&&
name|requestedRange
operator|.
name|getStartRevision
argument_list|()
operator|<
name|requestedRange
operator|.
name|getEndRevision
argument_list|()
condition|)
block|{
name|SVNMergeRangeList
name|impliedRangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|implicitMergeInfo
operator|.
name|get
argument_list|(
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|impliedRangeList
operator|!=
literal|null
condition|)
block|{
name|filteredRangeList
operator|=
name|requestedRangeList
operator|.
name|diff
argument_list|(
name|impliedRangeList
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|filteredRangeList
operator|==
literal|null
condition|)
block|{
name|filteredRangeList
operator|=
name|requestedRangeList
expr_stmt|;
block|}
return|return
name|filteredRangeList
return|;
block|}
specifier|private
name|void
name|sliceRemainingRanges
parameter_list|(
name|List
name|childrenWithMergeInfo
parameter_list|,
name|boolean
name|isRollBack
parameter_list|,
name|long
name|endRevision
parameter_list|)
block|{
for|for
control|(
name|Iterator
name|children
init|=
name|childrenWithMergeInfo
operator|.
name|iterator
argument_list|()
init|;
name|children
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|children
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
operator|||
name|child
operator|.
name|myIsAbsent
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|child
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNMergeRange
index|[]
name|originalRemainingRanges
init|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|range
init|=
name|originalRemainingRanges
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|(
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|>
name|endRevision
operator|&&
name|range
operator|.
name|getEndRevision
argument_list|()
operator|<
name|endRevision
operator|)
operator|||
operator|(
operator|!
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|<
name|endRevision
operator|&&
name|range
operator|.
name|getEndRevision
argument_list|()
operator|>
name|endRevision
operator|)
condition|)
block|{
name|SVNMergeRange
name|splitRange1
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|endRevision
argument_list|,
name|range
operator|.
name|isInheritable
argument_list|()
argument_list|)
decl_stmt|;
name|SVNMergeRange
name|splitRange2
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|endRevision
argument_list|,
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|,
name|range
operator|.
name|isInheritable
argument_list|()
argument_list|)
decl_stmt|;
name|SVNMergeRange
index|[]
name|remainingRanges
init|=
operator|new
name|SVNMergeRange
index|[
name|originalRemainingRanges
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|remainingRanges
index|[
literal|0
index|]
operator|=
name|splitRange1
expr_stmt|;
name|remainingRanges
index|[
literal|1
index|]
operator|=
name|splitRange2
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|originalRemainingRanges
argument_list|,
literal|1
argument_list|,
name|remainingRanges
argument_list|,
literal|2
argument_list|,
name|originalRemainingRanges
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|remainingRanges
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|long
name|getMostInclusiveEndRevision
parameter_list|(
name|List
name|childrenWithMergeInfo
parameter_list|,
name|boolean
name|isRollBack
parameter_list|)
block|{
name|long
name|endRev
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenWithMergeInfo
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
operator|||
name|child
operator|.
name|myIsAbsent
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|child
operator|.
name|myRemainingRanges
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SVNMergeRange
name|ranges
index|[]
init|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|endRev
argument_list|)
operator|||
operator|(
name|isRollBack
operator|&&
name|range
operator|.
name|getEndRevision
argument_list|()
operator|>
name|endRev
operator|)
operator|||
operator|(
operator|!
name|isRollBack
operator|&&
name|range
operator|.
name|getEndRevision
argument_list|()
operator|<
name|endRev
operator|)
condition|)
block|{
name|endRev
operator|=
name|range
operator|.
name|getEndRevision
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|endRev
return|;
block|}
specifier|private
name|long
name|getMostInclusiveStartRevision
parameter_list|(
name|List
name|childrenWithMergeInfo
parameter_list|,
name|boolean
name|isRollBack
parameter_list|)
block|{
name|long
name|startRev
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenWithMergeInfo
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
operator|||
name|child
operator|.
name|myIsAbsent
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|child
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
name|SVNMergeRange
name|ranges
index|[]
init|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|==
name|range
operator|.
name|getEndRevision
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|startRev
argument_list|)
operator|||
operator|(
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|>
name|startRev
operator|)
operator|||
operator|(
operator|!
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|<
name|startRev
operator|)
condition|)
block|{
name|startRev
operator|=
name|range
operator|.
name|getStartRevision
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|startRev
return|;
block|}
specifier|private
name|void
name|populateRemainingRanges
parameter_list|(
name|List
name|childrenWithMergeInfo
parameter_list|,
name|SVNURL
name|sourceRootURL
parameter_list|,
name|SVNURL
name|url1
parameter_list|,
name|long
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|long
name|revision2
parameter_list|,
name|boolean
name|honorMergeInfo
parameter_list|,
name|SVNRepository
name|repository
parameter_list|,
name|String
name|parentMergeSrcCanonPath
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|honorMergeInfo
operator|||
name|myIsRecordOnly
condition|)
block|{
for|for
control|(
name|ListIterator
name|childrenIter
init|=
name|childrenWithMergeInfo
operator|.
name|listIterator
argument_list|()
init|;
name|childrenIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|childrenIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|range
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|range
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|long
index|[]
name|gap
init|=
operator|new
name|long
index|[
literal|2
index|]
decl_stmt|;
name|findGapsInMergeSourceHistory
argument_list|(
name|gap
argument_list|,
name|parentMergeSrcCanonPath
argument_list|,
name|url1
argument_list|,
name|revision1
argument_list|,
name|url2
argument_list|,
name|revision2
argument_list|,
name|repository
argument_list|)
expr_stmt|;
if|if
condition|(
name|gap
index|[
literal|0
index|]
operator|>=
literal|0
operator|&&
name|gap
index|[
literal|1
index|]
operator|>=
literal|0
condition|)
block|{
name|myImplicitSrcGap
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|gap
index|[
literal|0
index|]
argument_list|,
name|gap
index|[
literal|1
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|ListIterator
name|childrenIter
init|=
name|childrenWithMergeInfo
operator|.
name|listIterator
argument_list|()
init|;
name|childrenIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|childrenIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
operator|||
name|child
operator|.
name|myIsAbsent
condition|)
block|{
name|index
operator|++
expr_stmt|;
continue|continue;
block|}
name|String
name|childRelativePath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myTarget
operator|.
name|equals
argument_list|(
name|child
operator|.
name|myPath
argument_list|)
condition|)
block|{
name|childRelativePath
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|childRelativePath
operator|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|myTarget
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|child
operator|.
name|myPath
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|MergePath
name|parent
init|=
literal|null
decl_stmt|;
name|SVNURL
name|childURL1
init|=
name|url1
operator|.
name|appendPath
argument_list|(
name|childRelativePath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNURL
name|childURL2
init|=
name|url2
operator|.
name|appendPath
argument_list|(
name|childRelativePath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNEntry
name|childEntry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|child
operator|.
name|myPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|boolean
name|indirect
index|[]
init|=
block|{
literal|false
block|}
decl_stmt|;
name|Map
name|mergeInfo
index|[]
init|=
name|getFullMergeInfo
argument_list|(
name|childEntry
argument_list|,
name|indirect
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|INHERITED
argument_list|,
name|repository
argument_list|,
name|child
operator|.
name|myPath
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|)
argument_list|,
name|Math
operator|.
name|min
argument_list|(
name|revision1
argument_list|,
name|revision2
argument_list|)
argument_list|)
decl_stmt|;
name|child
operator|.
name|myPreMergeMergeInfo
operator|=
name|mergeInfo
index|[
literal|0
index|]
expr_stmt|;
name|child
operator|.
name|myImplicitMergeInfo
operator|=
name|mergeInfo
index|[
literal|1
index|]
expr_stmt|;
name|child
operator|.
name|myIsIndirectMergeInfo
operator|=
name|indirect
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
name|index
operator|>
literal|0
condition|)
block|{
name|Object
index|[]
name|childrenWithMergeInfoArray
init|=
name|childrenWithMergeInfo
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|int
name|parentIndex
init|=
name|findNearestAncestor
argument_list|(
name|childrenWithMergeInfoArray
argument_list|,
literal|false
argument_list|,
name|child
operator|.
name|myPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIndex
operator|>=
literal|0
operator|&&
name|parentIndex
operator|<
name|childrenWithMergeInfoArray
operator|.
name|length
condition|)
block|{
name|parent
operator|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfoArray
index|[
name|parentIndex
index|]
expr_stmt|;
block|}
block|}
name|calculateRemainingRanges
argument_list|(
name|parent
argument_list|,
name|child
argument_list|,
name|sourceRootURL
argument_list|,
name|childURL1
argument_list|,
name|revision1
argument_list|,
name|childURL2
argument_list|,
name|revision2
argument_list|,
name|child
operator|.
name|myPreMergeMergeInfo
argument_list|,
name|child
operator|.
name|myImplicitMergeInfo
argument_list|,
name|myImplicitSrcGap
argument_list|,
name|index
operator|>
literal|0
argument_list|,
name|childEntry
argument_list|,
name|repository
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|myRemainingRanges
operator|.
name|getSize
argument_list|()
operator|>
literal|0
operator|&&
name|myImplicitSrcGap
operator|!=
literal|null
condition|)
block|{
name|long
name|start
decl_stmt|,
name|end
decl_stmt|;
name|boolean
name|properSubset
init|=
literal|false
decl_stmt|;
name|boolean
name|equals
init|=
literal|false
decl_stmt|;
name|boolean
name|overlapsOrAdjoins
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|revision1
operator|>
name|revision2
condition|)
block|{
name|child
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|child
operator|.
name|myRemainingRanges
operator|.
name|getSize
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|start
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|getRanges
argument_list|()
index|[
name|j
index|]
operator|.
name|getStartRevision
argument_list|()
expr_stmt|;
name|end
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|getRanges
argument_list|()
index|[
name|j
index|]
operator|.
name|getEndRevision
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|start
operator|<=
name|gap
index|[
literal|0
index|]
operator|&&
name|gap
index|[
literal|1
index|]
operator|<
name|end
operator|)
operator|||
operator|(
name|start
operator|<
name|gap
index|[
literal|0
index|]
operator|&&
name|gap
index|[
literal|1
index|]
operator|<=
name|end
operator|)
condition|)
block|{
name|properSubset
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|gap
index|[
literal|0
index|]
operator|==
name|start
operator|&&
name|gap
index|[
literal|1
index|]
operator|==
name|end
condition|)
block|{
name|equals
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|else if
condition|(
name|gap
index|[
literal|0
index|]
operator|<=
name|end
operator|&&
name|start
operator|<=
name|gap
index|[
literal|1
index|]
condition|)
block|{
name|overlapsOrAdjoins
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|properSubset
condition|)
block|{
if|if
condition|(
name|overlapsOrAdjoins
condition|)
block|{
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|merge
argument_list|(
name|myImplicitSrcGap
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|equals
condition|)
block|{
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|diff
argument_list|(
name|myImplicitSrcGap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|revision1
operator|>
name|revision2
condition|)
block|{
name|child
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
block|}
block|}
name|index
operator|++
expr_stmt|;
block|}
if|if
condition|(
name|childrenWithMergeInfo
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNMergeRange
name|dummyRange
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|revision2
argument_list|,
name|revision2
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|dummyRange
argument_list|)
expr_stmt|;
name|myIsTargetHasDummyMergeRange
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ISVNReusableEditor
name|driveMergeReportEditor
parameter_list|(
name|File
name|targetWCPath
parameter_list|,
name|SVNURL
name|url1
parameter_list|,
name|long
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
specifier|final
name|long
name|revision2
parameter_list|,
specifier|final
name|List
name|childrenWithMergeInfo
parameter_list|,
specifier|final
name|boolean
name|isRollBack
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNMergeCallback
name|mergeCallback
parameter_list|,
name|ISVNReusableEditor
name|editor
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|boolean
name|honorMergeInfo
init|=
name|isHonorMergeInfo
argument_list|()
decl_stmt|;
name|long
name|defaultStart
init|=
name|revision1
decl_stmt|;
name|long
name|targetStart
init|=
name|revision1
decl_stmt|;
if|if
condition|(
name|honorMergeInfo
condition|)
block|{
if|if
condition|(
name|myIsTargetHasDummyMergeRange
condition|)
block|{
name|targetStart
operator|=
name|revision2
expr_stmt|;
block|}
if|else if
condition|(
name|childrenWithMergeInfo
operator|!=
literal|null
operator|&&
operator|!
name|childrenWithMergeInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|MergePath
name|targetMergePath
init|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfo
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|remainingRanges
init|=
name|targetMergePath
operator|.
name|myRemainingRanges
decl_stmt|;
if|if
condition|(
name|remainingRanges
operator|!=
literal|null
operator|&&
operator|!
name|remainingRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNMergeRange
index|[]
name|ranges
init|=
name|remainingRanges
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|SVNMergeRange
name|range
init|=
name|ranges
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|>
name|revision2
operator|)
operator|||
operator|(
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|<
name|revision2
operator|)
condition|)
block|{
name|targetStart
operator|=
name|revision2
expr_stmt|;
block|}
else|else
block|{
name|targetStart
operator|=
name|range
operator|.
name|getStartRevision
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
name|editor
operator|=
name|getMergeReportEditor
argument_list|(
name|defaultStart
argument_list|,
name|revision2
argument_list|,
name|adminArea
argument_list|,
name|depth
argument_list|,
name|mergeCallback
argument_list|,
name|editor
argument_list|)
expr_stmt|;
name|SVNURL
name|oldURL
init|=
name|ensureSessionURL
argument_list|(
name|myRepository2
argument_list|,
name|url1
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|SVNDepth
name|reportDepth
init|=
name|depth
decl_stmt|;
specifier|final
name|long
name|reportStart
init|=
name|targetStart
decl_stmt|;
specifier|final
name|String
name|targetPath
init|=
name|targetWCPath
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
literal|"repository1 location: "
operator|+
name|myRepository1
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
literal|"repository2 location: "
operator|+
name|myRepository2
operator|.
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
name|myRepository1
operator|.
name|diff
argument_list|(
name|url2
argument_list|,
name|revision2
argument_list|,
name|revision2
argument_list|,
literal|null
argument_list|,
name|myIsIgnoreAncestry
argument_list|,
name|depth
argument_list|,
literal|true
argument_list|,
operator|new
name|ISVNReporterBaton
argument_list|()
block|{
specifier|public
name|void
name|report
parameter_list|(
name|ISVNReporter
name|reporter
parameter_list|)
throws|throws
name|SVNException
block|{
name|reporter
operator|.
name|setPath
argument_list|(
literal|""
argument_list|,
literal|null
argument_list|,
name|reportStart
argument_list|,
name|reportDepth
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|honorMergeInfo
operator|&&
name|childrenWithMergeInfo
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|childrenWithMergeInfo
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MergePath
name|childMergePath
init|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|MergePath
name|parent
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|childMergePath
operator|==
literal|null
operator|||
name|childMergePath
operator|.
name|myIsAbsent
condition|)
block|{
continue|continue;
block|}
name|Object
index|[]
name|childrenWithMergeInfoArray
init|=
name|childrenWithMergeInfo
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|int
name|parentIndex
init|=
name|findNearestAncestor
argument_list|(
name|childrenWithMergeInfoArray
argument_list|,
literal|false
argument_list|,
name|childMergePath
operator|.
name|myPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentIndex
operator|>=
literal|0
operator|&&
name|parentIndex
operator|<
name|childrenWithMergeInfoArray
operator|.
name|length
condition|)
block|{
name|parent
operator|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfoArray
index|[
name|parentIndex
index|]
expr_stmt|;
block|}
name|String
name|parentPath
init|=
name|parent
operator|.
name|myPath
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|boolean
name|nearestParentIsTarget
init|=
name|parentPath
operator|.
name|equals
argument_list|(
name|targetPath
argument_list|)
decl_stmt|;
name|SVNMergeRange
name|range
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|childMergePath
operator|.
name|myRemainingRanges
operator|!=
literal|null
operator|&&
operator|!
name|childMergePath
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNMergeRangeList
name|remainingRangesList
init|=
name|childMergePath
operator|.
name|myRemainingRanges
decl_stmt|;
name|SVNMergeRange
index|[]
name|remainingRanges
init|=
name|remainingRangesList
operator|.
name|getRanges
argument_list|()
decl_stmt|;
name|range
operator|=
name|remainingRanges
index|[
literal|0
index|]
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|>
name|revision2
operator|)
operator|||
operator|(
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|<
name|revision2
operator|)
condition|)
block|{
continue|continue;
block|}
if|else if
condition|(
name|parent
operator|.
name|myRemainingRanges
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNMergeRange
name|parentRange
init|=
name|parent
operator|.
name|myRemainingRanges
operator|.
name|getRanges
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
name|SVNMergeRange
name|childRange
init|=
name|childMergePath
operator|.
name|myRemainingRanges
operator|.
name|getRanges
argument_list|()
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|parentRange
operator|.
name|getStartRevision
argument_list|()
operator|==
name|childRange
operator|.
name|getStartRevision
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
operator|(
name|parent
operator|.
name|myRemainingRanges
operator|==
literal|null
operator|||
name|parent
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
name|nearestParentIsTarget
operator|&&
name|myIsTargetHasDummyMergeRange
operator|)
condition|)
block|{
continue|continue;
block|}
block|}
name|String
name|childPath
init|=
name|childMergePath
operator|.
name|myPath
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|childPath
operator|=
name|childPath
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|relChildPath
init|=
name|childPath
operator|.
name|substring
argument_list|(
name|targetPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|relChildPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|relChildPath
operator|=
name|relChildPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childMergePath
operator|.
name|myRemainingRanges
operator|==
literal|null
operator|||
name|childMergePath
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|<
name|revision2
operator|)
operator|||
operator|(
operator|!
name|isRollBack
operator|&&
name|range
operator|.
name|getStartRevision
argument_list|()
operator|>
name|revision2
operator|)
condition|)
block|{
name|reporter
operator|.
name|setPath
argument_list|(
name|relChildPath
argument_list|,
literal|null
argument_list|,
name|revision2
argument_list|,
name|reportDepth
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reporter
operator|.
name|setPath
argument_list|(
name|relChildPath
argument_list|,
literal|null
argument_list|,
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|reportDepth
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|reporter
operator|.
name|finishReport
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|,
name|SVNCancellableEditor
operator|.
name|newInstance
argument_list|(
name|editor
argument_list|,
name|this
argument_list|,
name|getDebugLog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|oldURL
operator|!=
literal|null
condition|)
block|{
name|myRepository2
operator|.
name|setLocation
argument_list|(
name|oldURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|editor
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
name|sleepForTimeStamp
argument_list|()
expr_stmt|;
if|if
condition|(
name|myConflictedPaths
operator|==
literal|null
condition|)
block|{
name|myConflictedPaths
operator|=
name|mergeCallback
operator|.
name|getConflictedPaths
argument_list|()
expr_stmt|;
block|}
return|return
name|editor
return|;
block|}
specifier|public
name|ISVNReusableEditor
name|getMergeReportEditor
parameter_list|(
name|long
name|defaultStart
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|AbstractDiffCallback
name|mergeCallback
parameter_list|,
name|ISVNReusableEditor
name|editor
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|editor
operator|==
literal|null
condition|)
block|{
name|editor
operator|=
operator|new
name|SVNRemoteDiffEditor
argument_list|(
name|adminArea
argument_list|,
name|adminArea
operator|.
name|getRoot
argument_list|()
argument_list|,
name|mergeCallback
argument_list|,
name|myRepository2
argument_list|,
name|defaultStart
argument_list|,
name|revision
argument_list|,
name|myIsDryRun
argument_list|,
name|this
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|editor
operator|.
name|reset
argument_list|(
name|defaultStart
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
return|return
name|editor
return|;
block|}
specifier|private
name|SVNErrorMessage
name|makeMergeConflictError
parameter_list|(
name|File
name|targetPath
parameter_list|,
name|SVNMergeRange
name|range
parameter_list|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_FOUND_CONFLICT
argument_list|,
literal|"One or more conflicts were produced while merging r{0}:{1} into\n"
operator|+
literal|"''{2}'' --\n"
operator|+
literal|"resolve all conflicts and rerun the merge to apply the remaining\n"
operator|+
literal|"unmerged revisions"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Long
operator|.
name|toString
argument_list|(
name|range
operator|.
name|getStartRevision
argument_list|()
argument_list|)
block|,
name|Long
operator|.
name|toString
argument_list|(
name|range
operator|.
name|getEndRevision
argument_list|()
argument_list|)
block|,
name|targetPath
block|}
argument_list|)
decl_stmt|;
return|return
name|error
return|;
block|}
specifier|private
name|List
name|getMergeInfoPaths
parameter_list|(
specifier|final
name|List
name|children
parameter_list|,
specifier|final
name|String
name|mergeSrcPath
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
specifier|final
name|SVNURL
name|sourceRootURL
parameter_list|,
specifier|final
name|long
name|revision1
parameter_list|,
specifier|final
name|long
name|revision2
parameter_list|,
name|boolean
name|honorMergeInfo
parameter_list|,
specifier|final
name|SVNRepository
name|repository
parameter_list|,
specifier|final
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|List
name|childrenWithMergeInfo
init|=
name|children
operator|==
literal|null
condition|?
operator|new
name|LinkedList
argument_list|()
else|:
name|children
decl_stmt|;
name|ISVNEntryHandler
name|handler
init|=
name|getMergeInfoEntryHandler
argument_list|(
name|mergeSrcPath
argument_list|,
name|sourceRootURL
argument_list|,
name|revision1
argument_list|,
name|revision2
argument_list|,
name|repository
argument_list|,
name|depth
argument_list|,
name|childrenWithMergeInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|handler
operator|.
name|handleEntry
argument_list|(
name|myTarget
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|myWCAccess
operator|.
name|walkEntries
argument_list|(
name|myTarget
argument_list|,
name|handler
argument_list|,
literal|true
argument_list|,
name|honorMergeInfo
condition|?
name|depth
else|:
name|SVNDepth
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|honorMergeInfo
operator|&&
name|SVNDepth
operator|.
name|EMPTY
operator|.
name|compareTo
argument_list|(
name|depth
argument_list|)
operator|<
literal|0
condition|)
block|{
name|Collections
operator|.
name|sort
argument_list|(
name|childrenWithMergeInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childrenWithMergeInfo
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|MergePath
name|child
init|=
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfo
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|myHasNonInheritableMergeInfo
condition|)
block|{
name|SVNAdminArea
name|childArea
init|=
name|myWCAccess
operator|.
name|probeTry
argument_list|(
name|child
operator|.
name|myPath
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|childArea
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|childEntry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|childArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|childPath
init|=
name|childArea
operator|.
name|getFile
argument_list|(
name|childEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MergePath
name|childOfNonInheritable
init|=
operator|new
name|MergePath
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childrenWithMergeInfo
operator|.
name|contains
argument_list|(
name|childOfNonInheritable
argument_list|)
condition|)
block|{
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
name|SVNEntry
name|childEntry2
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|childPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|childEntry2
operator|==
literal|null
operator|||
operator|!
name|childEntry2
operator|.
name|isFile
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
name|childrenWithMergeInfo
operator|.
name|add
argument_list|(
name|childOfNonInheritable
argument_list|)
expr_stmt|;
comment|//TODO: optimize these repeating sorts
name|Collections
operator|.
name|sort
argument_list|(
name|childrenWithMergeInfo
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|myIsDryRun
operator|&&
name|myIsSameRepository
condition|)
block|{
name|SVNEntry
name|childOfNonInheritableEntry
init|=
name|myWCAccess
operator|.
name|getVersionedEntry
argument_list|(
name|childOfNonInheritable
operator|.
name|myPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|getWCMergeInfo
argument_list|(
name|childOfNonInheritable
operator|.
name|myPath
argument_list|,
name|childOfNonInheritableEntry
argument_list|,
name|myTarget
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|NEAREST_ANCESTOR
argument_list|,
literal|false
argument_list|,
operator|new
name|boolean
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|SVNPropertiesManager
operator|.
name|recordWCMergeInfo
argument_list|(
name|childPath
argument_list|,
name|mergeInfo
argument_list|,
name|myWCAccess
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|child
operator|.
name|myIsAbsent
operator|||
operator|(
name|child
operator|.
name|myIsSwitched
operator|&&
operator|!
name|myTarget
operator|.
name|equals
argument_list|(
name|child
operator|.
name|myPath
argument_list|)
operator|)
condition|)
block|{
name|File
name|parentPath
init|=
name|child
operator|.
name|myPath
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
name|int
name|parentInd
init|=
name|childrenWithMergeInfo
operator|.
name|indexOf
argument_list|(
operator|new
name|MergePath
argument_list|(
name|parentPath
argument_list|)
argument_list|)
decl_stmt|;
name|MergePath
name|parent
init|=
name|parentInd
operator|!=
operator|-
literal|1
condition|?
operator|(
name|MergePath
operator|)
name|childrenWithMergeInfo
operator|.
name|get
argument_list|(
name|parentInd
argument_list|)
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
name|parent
operator|.
name|myHasMissingChildren
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|=
operator|new
name|MergePath
argument_list|(
name|parentPath
argument_list|)
expr_stmt|;
name|parent
operator|.
name|myHasMissingChildren
operator|=
literal|true
expr_stmt|;
name|childrenWithMergeInfo
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
comment|//TODO: optimize these repeating sorts
name|Collections
operator|.
name|sort
argument_list|(
name|childrenWithMergeInfo
argument_list|)
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
name|SVNAdminArea
name|parentArea
init|=
name|myWCAccess
operator|.
name|probeTry
argument_list|(
name|parentPath
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|siblings
init|=
name|parentArea
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|siblings
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|siblingEntry
init|=
operator|(
name|SVNEntry
operator|)
name|siblings
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|siblingEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|siblingPath
init|=
name|parentArea
operator|.
name|getFile
argument_list|(
name|siblingEntry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|MergePath
name|siblingOfMissing
init|=
operator|new
name|MergePath
argument_list|(
name|siblingPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|childrenWithMergeInfo
operator|.
name|contains
argument_list|(
name|siblingOfMissing
argument_list|)
condition|)
block|{
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
condition|)
block|{
name|SVNEntry
name|childEntry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|siblingPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|childEntry
operator|==
literal|null
operator|||
operator|!
name|childEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
name|childrenWithMergeInfo
operator|.
name|add
argument_list|(
name|siblingOfMissing
argument_list|)
expr_stmt|;
comment|//TODO: optimize these repeating sorts
name|Collections
operator|.
name|sort
argument_list|(
name|childrenWithMergeInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
return|return
name|childrenWithMergeInfo
return|;
block|}
specifier|public
name|ISVNEntryHandler
name|getMergeInfoEntryHandler
parameter_list|(
name|String
name|mergeSrcPath
parameter_list|,
name|SVNURL
name|sourceRootURL
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|SVNRepository
name|repository
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|List
name|childrenWithMergeInfo
parameter_list|)
block|{
return|return
operator|new
name|MergeInfoFetcher
argument_list|(
name|mergeSrcPath
argument_list|,
name|sourceRootURL
argument_list|,
name|revision1
argument_list|,
name|revision2
argument_list|,
name|repository
argument_list|,
name|depth
argument_list|,
name|childrenWithMergeInfo
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|notifySingleFileMerge
parameter_list|(
name|File
name|targetWCPath
parameter_list|,
name|SVNEventAction
name|action
parameter_list|,
name|SVNStatusType
name|cstate
parameter_list|,
name|SVNStatusType
name|pstate
parameter_list|,
name|SVNEvent
name|headerEvent
parameter_list|,
name|boolean
name|isHeaderSent
parameter_list|)
throws|throws
name|SVNException
block|{
name|action
operator|=
name|cstate
operator|==
name|SVNStatusType
operator|.
name|MISSING
condition|?
name|SVNEventAction
operator|.
name|SKIP
else|:
name|action
expr_stmt|;
name|SVNEvent
name|event
init|=
name|SVNEventFactory
operator|.
name|createSVNEvent
argument_list|(
name|targetWCPath
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|cstate
argument_list|,
name|pstate
argument_list|,
name|SVNStatusType
operator|.
name|LOCK_INAPPLICABLE
argument_list|,
name|action
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|isOperativeNotification
argument_list|(
name|event
argument_list|)
operator|&&
name|headerEvent
operator|!=
literal|null
operator|&&
operator|!
name|isHeaderSent
condition|)
block|{
name|handleEvent
argument_list|(
name|headerEvent
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
name|isHeaderSent
operator|=
literal|true
expr_stmt|;
block|}
name|this
operator|.
name|handleEvent
argument_list|(
name|event
argument_list|,
name|ISVNEventHandler
operator|.
name|UNKNOWN
argument_list|)
expr_stmt|;
return|return
name|isHeaderSent
return|;
block|}
specifier|private
name|boolean
name|isOperativeNotification
parameter_list|(
name|SVNEvent
name|event
parameter_list|)
block|{
return|return
name|event
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED
operator|||
name|event
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|MERGED
operator|||
name|event
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|CHANGED
operator|||
name|event
operator|.
name|getPropertiesStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED
operator|||
name|event
operator|.
name|getPropertiesStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|MERGED
operator|||
name|event
operator|.
name|getPropertiesStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|CHANGED
operator|||
name|event
operator|.
name|getAction
argument_list|()
operator|==
name|SVNEventAction
operator|.
name|UPDATE_ADD
operator|||
name|event
operator|.
name|getAction
argument_list|()
operator|==
name|SVNEventAction
operator|.
name|TREE_CONFLICT
return|;
block|}
specifier|private
name|void
name|calculateMergeInheritance
parameter_list|(
name|SVNMergeRangeList
name|rangeList
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|boolean
name|wcPathIsMergeTarget
parameter_list|,
name|boolean
name|wcPathHasMissingChild
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|rangeList
operator|.
name|setInheritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|wcPathIsMergeTarget
condition|)
block|{
if|if
condition|(
name|wcPathHasMissingChild
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
name|rangeList
operator|.
name|setInheritable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rangeList
operator|.
name|setInheritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|wcPathHasMissingChild
operator|||
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|rangeList
operator|.
name|setInheritable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rangeList
operator|.
name|setInheritable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|recordSkips
parameter_list|(
name|String
name|mergeInfoPath
parameter_list|,
name|SVNEntry
name|targetEntry
parameter_list|,
name|boolean
name|isRollback
parameter_list|)
throws|throws
name|SVNException
block|{
name|int
name|numberOfSkippedPaths
init|=
name|mySkippedPaths
operator|!=
literal|null
condition|?
name|mySkippedPaths
operator|.
name|size
argument_list|()
else|:
literal|0
decl_stmt|;
if|if
condition|(
name|numberOfSkippedPaths
operator|>
literal|0
condition|)
block|{
name|Map
name|merges
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|skippedPaths
init|=
name|mySkippedPaths
operator|.
name|iterator
argument_list|()
init|;
name|skippedPaths
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|File
name|skippedPath
init|=
operator|(
name|File
operator|)
name|skippedPaths
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNStatus
name|status
init|=
name|SVNStatusUtil
operator|.
name|getStatus
argument_list|(
name|skippedPath
argument_list|,
name|myWCAccess
argument_list|)
decl_stmt|;
if|if
condition|(
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_NONE
operator|||
name|status
operator|.
name|getContentsStatus
argument_list|()
operator|==
name|SVNStatusType
operator|.
name|STATUS_UNVERSIONED
condition|)
block|{
continue|continue;
block|}
name|merges
operator|.
name|put
argument_list|(
name|skippedPath
argument_list|,
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|updateWCMergeInfo
argument_list|(
name|myTarget
argument_list|,
name|mergeInfoPath
argument_list|,
name|targetEntry
argument_list|,
name|merges
argument_list|,
name|isRollback
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|updateWCMergeInfo
parameter_list|(
name|File
name|targetPath
parameter_list|,
name|String
name|parentReposPath
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|Map
name|merges
parameter_list|,
name|boolean
name|isRollBack
parameter_list|)
throws|throws
name|SVNException
block|{
for|for
control|(
name|Iterator
name|mergesEntries
init|=
name|merges
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|mergesEntries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|pathToRangeList
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|mergesEntries
operator|.
name|next
argument_list|()
decl_stmt|;
name|File
name|path
init|=
operator|(
name|File
operator|)
name|pathToRangeList
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|SVNMergeRangeList
name|ranges
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|pathToRangeList
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|Map
name|mergeInfo
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// TODO this is a hack: assert that path is not missing if it is directory.
name|SVNEntry
name|pathEntry
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|pathEntry
operator|!=
literal|null
operator|&&
name|pathEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|pathEntry
operator|.
name|getAdminArea
argument_list|()
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|mergeInfo
operator|=
name|SVNPropertiesManager
operator|.
name|parseMergeInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
continue|continue;
block|}
throw|throw
name|svne
throw|;
block|}
if|if
condition|(
name|mergeInfo
operator|==
literal|null
operator|&&
name|ranges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mergeInfo
operator|=
name|getWCMergeInfo
argument_list|(
name|path
argument_list|,
name|entry
argument_list|,
literal|null
argument_list|,
name|SVNMergeInfoInheritance
operator|.
name|NEAREST_ANCESTOR
argument_list|,
literal|true
argument_list|,
operator|new
name|boolean
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mergeInfo
operator|==
literal|null
condition|)
block|{
name|mergeInfo
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
block|}
name|String
name|parent
init|=
name|targetPath
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|parent
operator|=
name|parent
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|child
init|=
name|path
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|child
operator|=
name|child
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|String
name|reposPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|parent
operator|.
name|length
argument_list|()
operator|<
name|child
operator|.
name|length
argument_list|()
condition|)
block|{
name|String
name|childRelPath
init|=
name|child
operator|.
name|substring
argument_list|(
name|parent
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childRelPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|childRelPath
operator|=
name|childRelPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|reposPath
operator|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parentReposPath
argument_list|,
name|childRelPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reposPath
operator|=
name|parentReposPath
expr_stmt|;
block|}
name|SVNMergeRangeList
name|rangeList
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|reposPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|rangeList
operator|==
literal|null
condition|)
block|{
name|rangeList
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRollBack
condition|)
block|{
name|ranges
operator|=
name|ranges
operator|.
name|dup
argument_list|()
expr_stmt|;
name|ranges
operator|=
name|ranges
operator|.
name|reverse
argument_list|()
expr_stmt|;
name|rangeList
operator|=
name|rangeList
operator|.
name|diff
argument_list|(
name|ranges
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rangeList
operator|=
name|rangeList
operator|.
name|merge
argument_list|(
name|ranges
argument_list|)
expr_stmt|;
block|}
name|mergeInfo
operator|.
name|put
argument_list|(
name|reposPath
argument_list|,
name|rangeList
argument_list|)
expr_stmt|;
comment|//TODO: I do not understand this:) how mergeInfo can be ever empty here????
if|if
condition|(
name|isRollBack
operator|&&
name|mergeInfo
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|mergeInfo
operator|=
literal|null
expr_stmt|;
block|}
name|SVNMergeInfoUtil
operator|.
name|removeEmptyRangeLists
argument_list|(
name|mergeInfo
argument_list|)
expr_stmt|;
try|try
block|{
name|SVNPropertiesManager
operator|.
name|recordWCMergeInfo
argument_list|(
name|path
argument_list|,
name|mergeInfo
argument_list|,
name|myWCAccess
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
name|svne
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|calculateRemainingRanges
parameter_list|(
name|MergePath
name|parent
parameter_list|,
name|MergePath
name|child
parameter_list|,
name|SVNURL
name|sourceRootURL
parameter_list|,
name|SVNURL
name|url1
parameter_list|,
name|long
name|revision1
parameter_list|,
name|SVNURL
name|url2
parameter_list|,
name|long
name|revision2
parameter_list|,
name|Map
name|targetMergeInfo
parameter_list|,
name|Map
name|implicitMergeInfo
parameter_list|,
name|SVNMergeRangeList
name|implicitSrcGap
parameter_list|,
name|boolean
name|isSubtree
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|SVNRepository
name|repository
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNURL
name|primaryURL
init|=
name|revision1
operator|<
name|revision2
condition|?
name|url2
else|:
name|url1
decl_stmt|;
name|Map
name|adjustedTargetMergeInfo
init|=
literal|null
decl_stmt|;
name|String
name|mergeInfoPath
init|=
name|getPathRelativeToRoot
argument_list|(
literal|null
argument_list|,
name|primaryURL
argument_list|,
name|sourceRootURL
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|implicitSrcGap
operator|!=
literal|null
operator|&&
name|child
operator|.
name|myPreMergeMergeInfo
operator|!=
literal|null
condition|)
block|{
name|SVNMergeRangeList
name|explicitMergeInfoGapRanges
init|=
operator|(
name|SVNMergeRangeList
operator|)
name|child
operator|.
name|myPreMergeMergeInfo
operator|.
name|get
argument_list|(
name|mergeInfoPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|explicitMergeInfoGapRanges
operator|!=
literal|null
condition|)
block|{
name|Map
name|gapMergeInfo
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
name|gapMergeInfo
operator|.
name|put
argument_list|(
name|mergeInfoPath
argument_list|,
name|implicitSrcGap
argument_list|)
expr_stmt|;
name|adjustedTargetMergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|removeMergeInfo
argument_list|(
name|gapMergeInfo
argument_list|,
name|targetMergeInfo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|adjustedTargetMergeInfo
operator|=
name|targetMergeInfo
expr_stmt|;
block|}
name|filterMergedRevisions
argument_list|(
name|child
argument_list|,
name|mergeInfoPath
argument_list|,
name|adjustedTargetMergeInfo
argument_list|,
name|implicitMergeInfo
argument_list|,
name|revision1
argument_list|,
name|revision2
argument_list|)
expr_stmt|;
if|if
condition|(
name|isSubtree
condition|)
block|{
name|SVNMergeRangeList
index|[]
name|rangeListDiff
init|=
name|SVNMergeInfoUtil
operator|.
name|diffMergeRangeLists
argument_list|(
name|child
operator|.
name|myRemainingRanges
argument_list|,
name|parent
operator|.
name|myRemainingRanges
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|deletedRangeList
init|=
name|rangeListDiff
index|[
literal|0
index|]
decl_stmt|;
name|SVNMergeRangeList
name|addedRangeList
init|=
name|rangeListDiff
index|[
literal|1
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|deletedRangeList
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|addedRangeList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|adjustDeletedSubTreeRanges
argument_list|(
name|child
argument_list|,
name|parent
argument_list|,
name|revision1
argument_list|,
name|revision2
argument_list|,
name|primaryURL
argument_list|,
name|repository
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|child
operator|.
name|myRemainingRanges
operator|==
literal|null
operator|||
name|child
operator|.
name|myRemainingRanges
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
operator|(
name|revision2
operator|<
name|revision1
operator|)
operator|&&
operator|(
name|entry
operator|.
name|getRevision
argument_list|()
operator|<=
name|revision2
operator|)
condition|)
block|{
name|SVNRepositoryLocation
index|[]
name|locations
init|=
literal|null
decl_stmt|;
try|try
block|{
name|locations
operator|=
name|getLocations
argument_list|(
name|url1
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|revision1
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|UNDEFINED
argument_list|)
expr_stmt|;
name|SVNURL
name|startURL
init|=
name|locations
index|[
literal|0
index|]
operator|.
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|startURL
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getSVNURL
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|CLIENT_NOT_READY_TO_MERGE
argument_list|,
literal|"Cannot reverse-merge a range from a path's own future history; try updating first"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|code
operator|==
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
operator|||
name|code
operator|==
name|SVNErrorCode
operator|.
name|RA_DAV_PATH_NOT_FOUND
operator|||
name|code
operator|==
name|SVNErrorCode
operator|.
name|CLIENT_UNRELATED_RESOURCES
operator|)
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|adjustDeletedSubTreeRanges
parameter_list|(
name|MergePath
name|child
parameter_list|,
name|MergePath
name|parent
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|SVNURL
name|primaryURL
parameter_list|,
name|SVNRepository
name|repository
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|parent
operator|.
name|myRemainingRanges
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"Assertions failed: parent must already have non-null remaining ranges set"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|relativePath
init|=
name|getPathRelativeToRoot
argument_list|(
literal|null
argument_list|,
name|primaryURL
argument_list|,
name|repository
operator|.
name|getLocation
argument_list|()
argument_list|,
literal|null
argument_list|,
name|repository
argument_list|)
decl_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|relativePath
operator|=
name|relativePath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|boolean
name|isRollback
init|=
name|revision2
operator|<
name|revision1
decl_stmt|;
name|long
name|pegRev
init|=
name|isRollback
condition|?
name|revision1
else|:
name|revision2
decl_stmt|;
name|long
name|youngerRev
init|=
name|pegRev
decl_stmt|;
name|long
name|olderRev
init|=
name|isRollback
condition|?
name|revision2
else|:
name|revision1
decl_stmt|;
name|List
name|locationSegments
init|=
literal|null
decl_stmt|;
try|try
block|{
name|locationSegments
operator|=
name|repository
operator|.
name|getLocationSegments
argument_list|(
name|relativePath
argument_list|,
name|pegRev
argument_list|,
name|youngerRev
argument_list|,
name|olderRev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|SVNErrorCode
name|errCode
init|=
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|errCode
operator|==
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
operator|||
name|errCode
operator|==
name|SVNErrorCode
operator|.
name|RA_DAV_REQUEST_FAILED
condition|)
block|{
name|SVNNodeKind
name|kind
init|=
name|repository
operator|.
name|checkPath
argument_list|(
name|relativePath
argument_list|,
name|olderRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|child
operator|.
name|myRemainingRanges
operator|=
name|parent
operator|.
name|myRemainingRanges
operator|.
name|dup
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|long
name|primaryURLDeletedRevision
init|=
name|repository
operator|.
name|getDeletedRevision
argument_list|(
name|relativePath
argument_list|,
name|olderRev
argument_list|,
name|youngerRev
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|primaryURLDeletedRevision
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"Assertion failed: deleted revision must exist"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isRollback
condition|)
block|{
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
name|parent
operator|.
name|myRemainingRanges
operator|=
name|parent
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
block|}
name|SVNMergeRangeList
name|existingRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
argument_list|(
name|olderRev
argument_list|,
name|primaryURLDeletedRevision
operator|-
literal|1
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|intersect
argument_list|(
name|existingRangeList
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNMergeRangeList
name|deletedRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
argument_list|(
name|primaryURLDeletedRevision
operator|-
literal|1
argument_list|,
name|pegRev
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|deletedRangeList
operator|=
name|parent
operator|.
name|myRemainingRanges
operator|.
name|intersect
argument_list|(
name|deletedRangeList
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|merge
argument_list|(
name|deletedRangeList
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRollback
condition|)
block|{
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
name|parent
operator|.
name|myRemainingRanges
operator|=
name|parent
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|locationSegments
operator|!=
literal|null
operator|&&
operator|!
name|locationSegments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNLocationSegment
name|segment
init|=
operator|(
name|SVNLocationSegment
operator|)
name|locationSegments
operator|.
name|get
argument_list|(
name|locationSegments
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|segment
operator|.
name|getStartRevision
argument_list|()
operator|==
name|olderRev
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|isRollback
condition|)
block|{
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
name|parent
operator|.
name|myRemainingRanges
operator|=
name|parent
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
block|}
name|SVNMergeRangeList
name|existingRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
argument_list|(
name|segment
operator|.
name|getStartRevision
argument_list|()
argument_list|,
name|pegRev
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|intersect
argument_list|(
name|existingRangeList
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNMergeRangeList
name|nonExistentRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
argument_list|(
name|olderRev
argument_list|,
name|segment
operator|.
name|getStartRevision
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|nonExistentRangeList
operator|=
name|parent
operator|.
name|myRemainingRanges
operator|.
name|intersect
argument_list|(
name|nonExistentRangeList
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|merge
argument_list|(
name|nonExistentRangeList
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRollback
condition|)
block|{
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
name|parent
operator|.
name|myRemainingRanges
operator|=
name|parent
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|filterMergedRevisions
parameter_list|(
name|MergePath
name|child
parameter_list|,
name|String
name|mergeInfoPath
parameter_list|,
name|Map
name|targetMergeInfo
parameter_list|,
name|Map
name|implicitMergeInfo
parameter_list|,
name|long
name|rev1
parameter_list|,
name|long
name|rev2
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|mergeInfo
init|=
name|implicitMergeInfo
decl_stmt|;
name|SVNMergeRangeList
name|targetRangeList
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|rev1
operator|>
name|rev2
condition|)
block|{
if|if
condition|(
name|targetMergeInfo
operator|!=
literal|null
condition|)
block|{
name|mergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|dupMergeInfo
argument_list|(
name|implicitMergeInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|mergeInfo
argument_list|,
name|targetMergeInfo
argument_list|)
expr_stmt|;
block|}
name|targetRangeList
operator|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|mergeInfoPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetRangeList
operator|!=
literal|null
condition|)
block|{
name|SVNMergeRangeList
name|requestedMergeRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|requestedMergeRangeList
operator|=
name|requestedMergeRangeList
operator|.
name|reverse
argument_list|()
expr_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
name|targetRangeList
operator|.
name|intersect
argument_list|(
name|requestedMergeRangeList
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
name|child
operator|.
name|myRemainingRanges
operator|.
name|reverse
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|child
operator|.
name|myRemainingRanges
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|getOptions
argument_list|()
operator|.
name|isAllowAllForwardMergesFromSelf
argument_list|()
condition|)
block|{
if|if
condition|(
name|targetMergeInfo
operator|!=
literal|null
condition|)
block|{
name|targetRangeList
operator|=
operator|(
name|SVNMergeRangeList
operator|)
name|targetMergeInfo
operator|.
name|get
argument_list|(
name|mergeInfoPath
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|targetMergeInfo
operator|!=
literal|null
condition|)
block|{
name|mergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|dupMergeInfo
argument_list|(
name|implicitMergeInfo
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mergeInfo
operator|=
name|SVNMergeInfoUtil
operator|.
name|mergeMergeInfos
argument_list|(
name|mergeInfo
argument_list|,
name|targetMergeInfo
argument_list|)
expr_stmt|;
block|}
name|targetRangeList
operator|=
operator|(
name|SVNMergeRangeList
operator|)
name|mergeInfo
operator|.
name|get
argument_list|(
name|mergeInfoPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetRangeList
operator|!=
literal|null
condition|)
block|{
name|SVNMergeRangeList
name|requestedRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
name|child
operator|.
name|myRemainingRanges
operator|=
name|requestedRangeList
operator|.
name|diff
argument_list|(
name|targetRangeList
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|child
operator|.
name|myRemainingRanges
operator|=
operator|new
name|SVNMergeRangeList
argument_list|(
operator|new
name|SVNMergeRange
argument_list|(
name|rev1
argument_list|,
name|rev2
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|File
name|loadFile
parameter_list|(
name|SVNRepository
name|repository
parameter_list|,
name|long
name|revision
parameter_list|,
name|SVNProperties
name|properties
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|tmpDir
init|=
name|adminArea
operator|.
name|getAdminTempDirectory
argument_list|()
decl_stmt|;
name|File
name|result
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|tmpDir
argument_list|,
literal|".merge"
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|repository
operator|.
name|getFile
argument_list|(
literal|""
argument_list|,
name|revision
argument_list|,
name|properties
argument_list|,
operator|new
name|SVNCancellableOutputStream
argument_list|(
name|os
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|SVNProperties
name|computePropsDiff
parameter_list|(
name|SVNProperties
name|props1
parameter_list|,
name|SVNProperties
name|props2
parameter_list|)
block|{
name|SVNProperties
name|propsDiff
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|props2
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|newPropName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|props1
operator|.
name|containsName
argument_list|(
name|newPropName
argument_list|)
condition|)
block|{
comment|// changed.
name|SVNPropertyValue
name|oldValue
init|=
name|props2
operator|.
name|getSVNPropertyValue
argument_list|(
name|newPropName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|props1
operator|.
name|getSVNPropertyValue
argument_list|(
name|newPropName
argument_list|)
argument_list|)
condition|)
block|{
name|propsDiff
operator|.
name|put
argument_list|(
name|newPropName
argument_list|,
name|props2
operator|.
name|getSVNPropertyValue
argument_list|(
name|newPropName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// added.
name|propsDiff
operator|.
name|put
argument_list|(
name|newPropName
argument_list|,
name|props2
operator|.
name|getSVNPropertyValue
argument_list|(
name|newPropName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|names
init|=
name|props1
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|oldPropName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|props2
operator|.
name|containsName
argument_list|(
name|oldPropName
argument_list|)
condition|)
block|{
comment|// deleted
name|propsDiff
operator|.
name|put
argument_list|(
name|oldPropName
argument_list|,
operator|(
name|SVNPropertyValue
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|propsDiff
return|;
block|}
specifier|private
specifier|static
name|SVNProperties
name|filterProperties
parameter_list|(
name|SVNProperties
name|props1
parameter_list|,
name|boolean
name|leftRegular
parameter_list|,
name|boolean
name|leftEntry
parameter_list|,
name|boolean
name|leftWC
parameter_list|)
block|{
name|SVNProperties
name|result
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|props1
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|leftEntry
operator|&&
name|propName
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|leftWC
operator|&&
name|propName
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_WC_PREFIX
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|leftRegular
operator|&&
operator|!
operator|(
name|propName
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_ENTRY_PREFIX
argument_list|)
operator|||
name|propName
operator|.
name|startsWith
argument_list|(
name|SVNProperty
operator|.
name|SVN_WC_PREFIX
argument_list|)
operator|)
condition|)
block|{
continue|continue;
block|}
name|result
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|props1
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|protected
class|class
name|MergeSource
block|{
specifier|private
name|SVNURL
name|myURL1
decl_stmt|;
specifier|private
name|long
name|myRevision1
decl_stmt|;
specifier|private
name|SVNURL
name|myURL2
decl_stmt|;
specifier|private
name|long
name|myRevision2
decl_stmt|;
specifier|public
name|SVNURL
name|getURL1
parameter_list|()
block|{
return|return
name|myURL1
return|;
block|}
specifier|public
name|SVNURL
name|getURL2
parameter_list|()
block|{
return|return
name|myURL2
return|;
block|}
specifier|public
name|long
name|getRevision1
parameter_list|()
block|{
return|return
name|myRevision1
return|;
block|}
specifier|public
name|long
name|getRevision2
parameter_list|()
block|{
return|return
name|myRevision2
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|MergeAction
block|{
specifier|public
specifier|static
specifier|final
name|MergeAction
name|MERGE
init|=
operator|new
name|MergeAction
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MergeAction
name|ROLL_BACK
init|=
operator|new
name|MergeAction
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|MergeAction
name|NO_OP
init|=
operator|new
name|MergeAction
argument_list|()
decl_stmt|;
block|}
specifier|protected
class|class
name|MergePath
implements|implements
name|Comparable
block|{
specifier|protected
name|File
name|myPath
decl_stmt|;
specifier|protected
name|boolean
name|myHasMissingChildren
decl_stmt|;
specifier|protected
name|boolean
name|myIsSwitched
decl_stmt|;
specifier|protected
name|boolean
name|myHasNonInheritableMergeInfo
decl_stmt|;
specifier|protected
name|boolean
name|myIsAbsent
decl_stmt|;
specifier|protected
name|boolean
name|myIsIndirectMergeInfo
decl_stmt|;
specifier|protected
name|boolean
name|myIsScheduledForDeletion
decl_stmt|;
specifier|public
name|SVNMergeRangeList
name|myRemainingRanges
decl_stmt|;
specifier|protected
name|Map
name|myPreMergeMergeInfo
decl_stmt|;
specifier|protected
name|Map
name|myImplicitMergeInfo
decl_stmt|;
specifier|public
name|MergePath
parameter_list|()
block|{
block|}
specifier|public
name|MergePath
parameter_list|(
name|File
name|path
parameter_list|)
block|{
name|myPath
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
name|obj
operator|.
name|getClass
argument_list|()
operator|!=
name|MergePath
operator|.
name|class
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
name|MergePath
name|mergePath
init|=
operator|(
name|MergePath
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|this
operator|==
name|mergePath
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|myPath
operator|.
name|compareTo
argument_list|(
name|mergePath
operator|.
name|myPath
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
return|return
name|compareTo
argument_list|(
name|obj
argument_list|)
operator|==
literal|0
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|myPath
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|private
class|class
name|LogHandlerFilter
implements|implements
name|ISVNLogEntryHandler
block|{
name|ISVNLogEntryHandler
name|myRealHandler
decl_stmt|;
name|SVNMergeRangeList
name|myRangeList
decl_stmt|;
specifier|public
name|LogHandlerFilter
parameter_list|(
name|ISVNLogEntryHandler
name|handler
parameter_list|,
name|SVNMergeRangeList
name|rangeList
parameter_list|)
block|{
name|myRealHandler
operator|=
name|handler
expr_stmt|;
name|myRangeList
operator|=
name|rangeList
expr_stmt|;
block|}
specifier|public
name|void
name|handleLogEntry
parameter_list|(
name|SVNLogEntry
name|logEntry
parameter_list|)
throws|throws
name|SVNException
block|{
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNMergeRange
name|range
init|=
operator|new
name|SVNMergeRange
argument_list|(
name|logEntry
operator|.
name|getRevision
argument_list|()
operator|-
literal|1
argument_list|,
name|logEntry
operator|.
name|getRevision
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|thisRangeList
init|=
operator|new
name|SVNMergeRangeList
argument_list|(
name|range
argument_list|)
decl_stmt|;
name|SVNMergeRangeList
name|intersection
init|=
name|thisRangeList
operator|.
name|intersect
argument_list|(
name|myRangeList
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|intersection
operator|==
literal|null
operator|||
name|intersection
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|intersection
operator|.
name|getSize
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"assertion failure in SVNMergeDriver.LogHandlerFilter.handleLogEntry: intersection list "
operator|+
literal|"size is {0}"
argument_list|,
operator|new
name|Integer
argument_list|(
name|intersection
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myRealHandler
operator|!=
literal|null
condition|)
block|{
name|myRealHandler
operator|.
name|handleLogEntry
argument_list|(
name|logEntry
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|CopyFromReceiver
implements|implements
name|ISVNLogEntryHandler
block|{
specifier|private
name|String
name|myTargetPath
decl_stmt|;
specifier|private
name|SVNLocationEntry
name|myCopyFromLocation
decl_stmt|;
specifier|public
name|CopyFromReceiver
parameter_list|(
name|String
name|targetPath
parameter_list|)
block|{
name|myTargetPath
operator|=
name|targetPath
expr_stmt|;
block|}
specifier|public
name|void
name|handleLogEntry
parameter_list|(
name|SVNLogEntry
name|logEntry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCopyFromLocation
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|Map
name|changedPaths
init|=
name|logEntry
operator|.
name|getChangedPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|changedPaths
operator|!=
literal|null
operator|&&
operator|!
name|changedPaths
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|TreeMap
name|sortedChangedPaths
init|=
operator|new
name|TreeMap
argument_list|(
name|Collections
operator|.
name|reverseOrder
argument_list|()
argument_list|)
decl_stmt|;
name|sortedChangedPaths
operator|.
name|putAll
argument_list|(
name|changedPaths
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|changedPathsIter
init|=
name|sortedChangedPaths
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|changedPathsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|changedPath
init|=
operator|(
name|String
operator|)
name|changedPathsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNLogEntryPath
name|logEntryPath
init|=
operator|(
name|SVNLogEntryPath
operator|)
name|sortedChangedPaths
operator|.
name|get
argument_list|(
name|changedPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|logEntryPath
operator|.
name|getCopyPath
argument_list|()
operator|!=
literal|null
operator|&&
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|logEntryPath
operator|.
name|getCopyRevision
argument_list|()
argument_list|)
operator|&&
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|changedPath
argument_list|,
name|myTargetPath
argument_list|)
condition|)
block|{
name|String
name|copyFromPath
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|changedPath
operator|.
name|equals
argument_list|(
name|myTargetPath
argument_list|)
condition|)
block|{
name|copyFromPath
operator|=
name|logEntryPath
operator|.
name|getCopyPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|relPath
init|=
name|myTargetPath
operator|.
name|substring
argument_list|(
name|changedPath
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|relPath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|relPath
operator|=
name|relPath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|copyFromPath
operator|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|logEntryPath
operator|.
name|getCopyPath
argument_list|()
argument_list|,
name|relPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|myCopyFromLocation
operator|=
operator|new
name|SVNLocationEntry
argument_list|(
name|logEntryPath
operator|.
name|getCopyRevision
argument_list|()
argument_list|,
name|copyFromPath
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|public
name|SVNLocationEntry
name|getCopyFromLocation
parameter_list|()
block|{
return|return
name|myCopyFromLocation
return|;
block|}
block|}
specifier|protected
class|class
name|SubTreeMergeInfoHandler
implements|implements
name|ISVNEntryHandler
block|{
specifier|private
name|File
name|myTargetPath
decl_stmt|;
specifier|private
name|SVNURL
name|myTargetReposRoot
decl_stmt|;
specifier|private
name|Collection
name|mySubTreesWithMergeInfoPaths
decl_stmt|;
specifier|public
name|SubTreeMergeInfoHandler
parameter_list|(
name|File
name|targetPath
parameter_list|,
name|SVNURL
name|targetReposRoot
parameter_list|)
block|{
name|mySubTreesWithMergeInfoPaths
operator|=
operator|new
name|LinkedList
argument_list|()
expr_stmt|;
name|myTargetPath
operator|=
name|targetPath
expr_stmt|;
name|myTargetReposRoot
operator|=
name|targetReposRoot
expr_stmt|;
block|}
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|adminArea
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
operator|!
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|entry
operator|.
name|isAbsent
argument_list|()
condition|)
block|{
return|return;
block|}
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|mergeInfoProp
init|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfoProp
operator|!=
literal|null
operator|||
name|path
operator|.
name|equals
argument_list|(
name|myTargetPath
argument_list|)
condition|)
block|{
name|String
name|storedPath
init|=
name|getPathRelativeToRoot
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|myTargetReposRoot
argument_list|,
name|adminArea
operator|.
name|getWCAccess
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|mySubTreesWithMergeInfoPaths
operator|.
name|add
argument_list|(
name|storedPath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
while|while
condition|(
name|error
operator|.
name|hasChildErrorMessage
argument_list|()
condition|)
block|{
name|error
operator|=
name|error
operator|.
name|getChildErrorMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_PATH_NOT_FOUND
operator|||
name|error
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
return|return;
block|}
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
name|getSubTreesWithMergeInfoPaths
parameter_list|()
block|{
return|return
name|mySubTreesWithMergeInfoPaths
return|;
block|}
block|}
specifier|protected
class|class
name|MergeInfoFetcher
implements|implements
name|ISVNEntryHandler
block|{
specifier|private
name|String
name|myMergeSrcPath
decl_stmt|;
specifier|private
name|SVNURL
name|mySourceRootURL
decl_stmt|;
specifier|private
name|long
name|myRevision1
decl_stmt|;
specifier|private
name|long
name|myRevision2
decl_stmt|;
specifier|private
name|SVNRepository
name|myRepository
decl_stmt|;
specifier|private
name|SVNDepth
name|myDepth
decl_stmt|;
specifier|private
name|List
name|myChildrenWithMergeInfo
decl_stmt|;
specifier|protected
name|MergeInfoFetcher
parameter_list|(
name|String
name|mergeSrcPath
parameter_list|,
name|SVNURL
name|sourceRootURL
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|SVNRepository
name|repository
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|List
name|childrenWithMergeInfo
parameter_list|)
block|{
name|myMergeSrcPath
operator|=
name|mergeSrcPath
expr_stmt|;
name|mySourceRootURL
operator|=
name|sourceRootURL
expr_stmt|;
name|myRevision1
operator|=
name|revision1
expr_stmt|;
name|myRevision2
operator|=
name|revision2
expr_stmt|;
name|myRepository
operator|=
name|repository
expr_stmt|;
name|myDepth
operator|=
name|depth
expr_stmt|;
name|myChildrenWithMergeInfo
operator|=
name|childrenWithMergeInfo
expr_stmt|;
block|}
specifier|public
name|MergeInfoFetcher
parameter_list|()
block|{
block|}
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|target
init|=
name|myTarget
decl_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|entry
operator|.
name|getAdminArea
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
operator|!
name|entry
operator|.
name|isAbsent
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
return|return;
block|}
name|boolean
name|isSwitched
init|=
literal|false
decl_stmt|;
name|boolean
name|hasMergeInfoFromMergeSrc
init|=
literal|false
decl_stmt|;
name|boolean
name|pathIsMergeTarget
init|=
name|target
operator|.
name|equals
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|String
name|mergeInfoProp
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|entry
operator|.
name|isAbsent
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|SVNVersionedProperties
name|props
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|mergeInfoProp
operator|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
name|mergeInfoProp
operator|!=
literal|null
operator|&&
operator|!
name|pathIsMergeTarget
condition|)
block|{
name|String
name|relToTargetPath
init|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|target
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|path
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|mergeSrcChildPath
init|=
name|SVNPathUtil
operator|.
name|getAbsolutePath
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|myMergeSrcPath
argument_list|,
name|relToTargetPath
argument_list|)
argument_list|)
decl_stmt|;
name|Map
name|mergeInfo
init|=
name|SVNMergeInfoUtil
operator|.
name|parseMergeInfo
argument_list|(
operator|new
name|StringBuffer
argument_list|(
name|mergeInfoProp
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfoProp
operator|==
literal|null
operator|||
name|mergeInfoProp
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|mergeInfo
operator|.
name|containsKey
argument_list|(
name|mergeSrcChildPath
argument_list|)
condition|)
block|{
name|hasMergeInfoFromMergeSrc
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|SVNURL
name|mergeInfoURL
init|=
name|mySourceRootURL
operator|.
name|appendPath
argument_list|(
name|mergeSrcChildPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNRevision
name|pegRevision
init|=
name|SVNRevision
operator|.
name|create
argument_list|(
name|myRevision1
operator|<
name|myRevision2
condition|?
name|myRevision2
else|:
name|myRevision1
argument_list|)
decl_stmt|;
name|SVNErrorCode
name|code
init|=
literal|null
decl_stmt|;
name|SVNURL
name|originalURL
init|=
literal|null
decl_stmt|;
try|try
block|{
name|originalURL
operator|=
name|ensureSessionURL
argument_list|(
name|myRepository
argument_list|,
name|mergeInfoURL
argument_list|)
expr_stmt|;
name|getLocations
argument_list|(
name|mergeInfoURL
argument_list|,
literal|null
argument_list|,
name|myRepository
argument_list|,
name|pegRevision
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|myRevision1
argument_list|)
argument_list|,
name|SVNRevision
operator|.
name|create
argument_list|(
name|myRevision2
argument_list|)
argument_list|)
expr_stmt|;
name|hasMergeInfoFromMergeSrc
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|code
operator|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
expr_stmt|;
if|if
condition|(
name|code
operator|!=
name|SVNErrorCode
operator|.
name|FS_NOT_FOUND
operator|&&
name|code
operator|!=
name|SVNErrorCode
operator|.
name|RA_DAV_PATH_NOT_FOUND
operator|&&
name|code
operator|!=
name|SVNErrorCode
operator|.
name|CLIENT_UNRELATED_RESOURCES
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|originalURL
operator|!=
literal|null
condition|)
block|{
name|myRepository
operator|.
name|setLocation
argument_list|(
name|originalURL
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|isSwitched
operator|=
name|SVNWCManager
operator|.
name|isEntrySwitched
argument_list|(
name|path
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
name|File
name|parent
init|=
name|path
operator|.
name|getParentFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|pathIsMergeTarget
operator|||
name|hasMergeInfoFromMergeSrc
operator|||
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|||
name|isSwitched
operator|||
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
name|entry
operator|.
name|isAbsent
argument_list|()
operator|||
operator|(
name|myDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|parent
operator|!=
literal|null
operator|&&
operator|!
name|parent
operator|.
name|equals
argument_list|(
name|path
argument_list|)
operator|&&
name|parent
operator|.
name|equals
argument_list|(
name|target
argument_list|)
operator|)
operator|||
operator|(
name|myDepth
operator|==
name|SVNDepth
operator|.
name|FILES
operator|&&
name|entry
operator|.
name|isFile
argument_list|()
operator|&&
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|equals
argument_list|(
name|target
argument_list|)
operator|)
condition|)
block|{
name|boolean
name|hasMissingChild
init|=
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|FILES
operator|||
operator|(
name|myDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|equals
argument_list|(
name|target
argument_list|)
operator|)
decl_stmt|;
name|boolean
name|hasNonInheritable
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|mergeInfoProp
operator|!=
literal|null
operator|&&
name|mergeInfoProp
operator|.
name|indexOf
argument_list|(
name|SVNMergeRangeList
operator|.
name|MERGE_INFO_NONINHERITABLE_STRING
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|hasNonInheritable
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|hasNonInheritable
operator|&&
operator|(
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|||
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|FILES
operator|)
condition|)
block|{
name|hasNonInheritable
operator|=
literal|true
expr_stmt|;
block|}
name|MergePath
name|child
init|=
operator|new
name|MergePath
argument_list|()
decl_stmt|;
name|child
operator|.
name|myPath
operator|=
name|path
expr_stmt|;
name|child
operator|.
name|myHasMissingChildren
operator|=
name|hasMissingChild
expr_stmt|;
name|child
operator|.
name|myIsSwitched
operator|=
name|isSwitched
expr_stmt|;
name|child
operator|.
name|myIsAbsent
operator|=
name|entry
operator|.
name|isAbsent
argument_list|()
expr_stmt|;
name|child
operator|.
name|myIsScheduledForDeletion
operator|=
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
expr_stmt|;
name|child
operator|.
name|myHasNonInheritableMergeInfo
operator|=
name|hasNonInheritable
expr_stmt|;
name|myChildrenWithMergeInfo
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
while|while
condition|(
name|error
operator|.
name|hasChildErrorMessage
argument_list|()
condition|)
block|{
name|error
operator|=
name|error
operator|.
name|getChildErrorMessage
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|error
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_PATH_NOT_FOUND
operator|||
name|error
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
return|return;
block|}
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

