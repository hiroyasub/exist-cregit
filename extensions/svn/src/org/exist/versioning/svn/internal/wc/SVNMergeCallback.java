begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNMergeDriver
operator|.
name|MergeSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNEventHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNEvent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNMergeCallback
extends|extends
name|AbstractDiffCallback
block|{
specifier|protected
name|boolean
name|myIsDryRun
decl_stmt|;
specifier|protected
name|SVNURL
name|myURL
decl_stmt|;
specifier|protected
name|boolean
name|myIsAddNecessitatedMerge
decl_stmt|;
specifier|protected
name|String
name|myAddedPath
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|myIsForce
decl_stmt|;
specifier|protected
name|SVNDiffOptions
name|myDiffOptions
decl_stmt|;
specifier|protected
name|Map
name|myConflictedPaths
decl_stmt|;
specifier|protected
name|SVNMergeDriver
name|myMergeDriver
decl_stmt|;
specifier|public
name|SVNMergeCallback
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|SVNDiffOptions
name|options
parameter_list|,
name|Map
name|conflictedPathsGetter
parameter_list|,
name|SVNMergeDriver
name|mergeDriver
parameter_list|)
block|{
name|super
argument_list|(
name|adminArea
argument_list|)
expr_stmt|;
name|myURL
operator|=
name|url
expr_stmt|;
name|myIsDryRun
operator|=
name|dryRun
expr_stmt|;
name|myIsForce
operator|=
name|force
expr_stmt|;
name|myDiffOptions
operator|=
name|options
expr_stmt|;
name|myConflictedPaths
operator|=
name|conflictedPathsGetter
expr_stmt|;
name|myMergeDriver
operator|=
name|mergeDriver
expr_stmt|;
block|}
specifier|public
name|File
name|createTempDirectory
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|SVNFileUtil
operator|.
name|createTempDirectory
argument_list|(
literal|"merge"
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|isDiffUnversioned
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isDiffCopiedAsAdded
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|Map
name|getConflictedPaths
parameter_list|()
block|{
return|return
name|myConflictedPaths
return|;
block|}
specifier|public
name|SVNStatusType
name|propertiesChanged
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNStatusType
name|obstructedStatus
init|=
name|getStatusForObstructedOrMissing
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|obstructedStatus
operator|!=
name|SVNStatusType
operator|.
name|INAPPLICABLE
condition|)
block|{
return|return
name|obstructedStatus
return|;
block|}
name|SVNProperties
name|regularProps
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|categorizeProperties
argument_list|(
name|diff
argument_list|,
name|regularProps
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|regularProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|UNKNOWN
return|;
block|}
try|try
block|{
name|File
name|file
init|=
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNWCAccess
name|wcAccess
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
if|if
condition|(
name|wcAccess
operator|.
name|getAdminArea
argument_list|(
name|file
argument_list|)
operator|==
literal|null
condition|)
block|{
name|wcAccess
operator|.
name|probeTry
argument_list|(
name|file
argument_list|,
literal|true
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
expr_stmt|;
block|}
name|MergeSource
name|mergeSource
init|=
name|myMergeDriver
operator|.
name|getCurrentMergeSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|mergeSource
operator|.
name|getRevision1
argument_list|()
operator|<
name|mergeSource
operator|.
name|getRevision2
argument_list|()
condition|)
block|{
name|SVNProperties
name|filteredProps
init|=
name|myMergeDriver
operator|.
name|filterSelfReferentialMergeInfo
argument_list|(
name|regularProps
argument_list|,
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|filteredProps
operator|!=
literal|null
condition|)
block|{
name|regularProps
operator|=
name|filteredProps
expr_stmt|;
block|}
block|}
name|SVNStatusType
name|status
init|=
name|SVNPropertiesManager
operator|.
name|mergeProperties
argument_list|(
name|getWCAccess
argument_list|()
argument_list|,
name|file
argument_list|,
name|originalProperties
argument_list|,
name|regularProps
argument_list|,
literal|false
argument_list|,
name|myIsDryRun
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|myIsDryRun
condition|)
block|{
for|for
control|(
name|Iterator
name|propsIter
init|=
name|regularProps
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propsIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propsIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|regularProps
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
name|SVNPropertyValue
name|mergeInfoProp
init|=
name|originalProperties
operator|.
name|getSVNPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MERGE_INFO
argument_list|)
decl_stmt|;
if|if
condition|(
name|mergeInfoProp
operator|==
literal|null
operator|&&
name|propValue
operator|!=
literal|null
condition|)
block|{
name|myMergeDriver
operator|.
name|addPathWithNewMergeInfo
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mergeInfoProp
operator|!=
literal|null
operator|&&
name|propValue
operator|==
literal|null
condition|)
block|{
name|myMergeDriver
operator|.
name|addPathWithDeletedMergeInfo
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|status
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|UNVERSIONED_RESOURCE
operator|||
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
condition|)
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|MISSING
return|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|SVNStatusType
name|directoryAdded
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|mergedFile
init|=
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|mergedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|myIsDryRun
operator|&&
name|myAddedPath
operator|!=
literal|null
operator|&&
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|myAddedPath
argument_list|,
name|path
argument_list|)
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|CHANGED
return|;
block|}
return|return
name|SVNStatusType
operator|.
name|MISSING
return|;
block|}
name|SVNURL
name|copyFromURL
init|=
literal|null
decl_stmt|;
name|long
name|copyFromRevision
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
if|if
condition|(
name|myMergeDriver
operator|.
name|myIsSameRepository
condition|)
block|{
name|copyFromURL
operator|=
name|myURL
operator|.
name|appendPath
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|copyFromRevision
operator|=
name|revision
expr_stmt|;
comment|// TODO protocol
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|mergedFile
argument_list|)
decl_stmt|;
name|SVNStatusType
name|obstructedStatus
init|=
name|getStatusForObstructedOrMissing
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|obstructedStatus
operator|==
name|SVNStatusType
operator|.
name|MISSING
operator|||
operator|(
name|obstructedStatus
operator|==
name|SVNStatusType
operator|.
name|OBSTRUCTED
operator|&&
operator|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
operator|)
operator|)
condition|)
block|{
return|return
name|obstructedStatus
return|;
block|}
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
if|if
condition|(
name|myIsDryRun
condition|)
block|{
name|myAddedPath
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|mergedFile
operator|.
name|mkdirs
argument_list|()
condition|)
block|{
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|mergedFile
argument_list|)
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot create directory ''{0}''"
argument_list|,
name|mergedFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
block|}
name|ISVNEventHandler
name|oldEventHandler
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|SVNWCManager
operator|.
name|add
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|copyFromURL
argument_list|,
name|copyFromRevision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
name|oldEventHandler
argument_list|)
expr_stmt|;
block|}
return|return
name|SVNStatusType
operator|.
name|CHANGED
return|;
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|SVNEntry
name|entry
init|=
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|mergedFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|myIsDryRun
condition|)
block|{
name|ISVNEventHandler
name|oldEventHandler
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|SVNWCManager
operator|.
name|add
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|copyFromURL
argument_list|,
name|copyFromRevision
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
name|oldEventHandler
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myIsDryRun
condition|)
block|{
name|myAddedPath
operator|=
name|path
expr_stmt|;
block|}
return|return
name|SVNStatusType
operator|.
name|CHANGED
return|;
block|}
if|if
condition|(
name|myIsDryRun
operator|&&
name|isPathDeleted
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|CHANGED
return|;
block|}
name|myMergeDriver
operator|.
name|recordTreeConflictOnAdd
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNConflictAction
operator|.
name|ADD
argument_list|,
name|SVNConflictReason
operator|.
name|ADDED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|OBSTRUCTED
return|;
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
if|if
condition|(
name|myIsDryRun
condition|)
block|{
name|myAddedPath
operator|=
literal|null
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|mergedFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|myIsDryRun
operator|&&
name|isPathDeleted
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|CHANGED
return|;
block|}
name|myMergeDriver
operator|.
name|recordTreeConflictOnAdd
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNConflictAction
operator|.
name|ADD
argument_list|,
name|SVNConflictReason
operator|.
name|OBSTRUCTED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|OBSTRUCTED
return|;
block|}
if|if
condition|(
name|myIsDryRun
condition|)
block|{
name|myAddedPath
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|SVNStatusType
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|SVNStatusType
name|directoryDeleted
parameter_list|(
specifier|final
name|String
name|path
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|File
name|mergedFile
init|=
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|mergedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|MISSING
return|;
block|}
name|SVNEntry
name|entry
init|=
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|mergedFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNStatusType
name|obstructedStatus
init|=
name|getStatusForObstructedOrMissing
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|obstructedStatus
operator|!=
name|SVNStatusType
operator|.
name|INAPPLICABLE
condition|)
block|{
return|return
name|obstructedStatus
return|;
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|mergedFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
specifier|final
name|ISVNEventHandler
name|oldEventHandler
init|=
name|getWCAccess
argument_list|()
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
name|ISVNEventHandler
name|handler
init|=
operator|new
name|ISVNEventHandler
argument_list|()
block|{
specifier|public
name|void
name|checkCancelled
parameter_list|()
throws|throws
name|SVNCancelException
block|{
name|oldEventHandler
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|handleEvent
parameter_list|(
name|SVNEvent
name|event
parameter_list|,
name|double
name|progress
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
block|}
decl_stmt|;
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
try|try
block|{
name|delete
argument_list|(
name|mergedFile
argument_list|,
name|myIsForce
argument_list|,
name|myIsDryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNConflictAction
operator|.
name|DELETE
argument_list|,
name|SVNConflictReason
operator|.
name|EDITED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|CONFLICTED
return|;
block|}
finally|finally
block|{
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
name|oldEventHandler
argument_list|)
expr_stmt|;
block|}
return|return
name|SVNStatusType
operator|.
name|CHANGED
return|;
block|}
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNConflictAction
operator|.
name|DELETE
argument_list|,
name|SVNConflictReason
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|OBSTRUCTED
return|;
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNConflictAction
operator|.
name|DELETE
argument_list|,
name|SVNConflictReason
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|MISSING
return|;
block|}
return|return
name|SVNStatusType
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|void
name|directoryOpened
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|mergedFile
init|=
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|mergedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|myIsDryRun
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|SVNEntry
name|entry
init|=
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|mergedFile
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|mergedFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNConflictAction
operator|.
name|EDIT
argument_list|,
name|SVNConflictReason
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|type
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNConflictAction
operator|.
name|EDIT
argument_list|,
name|SVNConflictReason
operator|.
name|MISSING
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|type
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNConflictAction
operator|.
name|EDIT
argument_list|,
name|SVNConflictReason
operator|.
name|OBSTRUCTED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|!=
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
comment|// entry of different kind as well, directory has been deleted.
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|DIR
argument_list|,
name|SVNConflictAction
operator|.
name|EDIT
argument_list|,
name|SVNConflictReason
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SVNStatusType
index|[]
name|fileChanged
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|needsMerge
init|=
literal|true
decl_stmt|;
name|File
name|mergedFile
init|=
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|mergedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|myIsDryRun
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|SVNStatusType
index|[]
block|{
name|SVNStatusType
operator|.
name|MISSING
block|,
name|SVNStatusType
operator|.
name|MISSING
block|}
return|;
block|}
name|SVNStatusType
name|obstructedStatus
init|=
name|getStatusForObstructedOrMissing
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|obstructedStatus
operator|!=
name|SVNStatusType
operator|.
name|INAPPLICABLE
condition|)
block|{
return|return
operator|new
name|SVNStatusType
index|[]
block|{
name|obstructedStatus
block|,
name|SVNStatusType
operator|.
name|UNCHANGED
block|}
return|;
block|}
name|SVNStatusType
index|[]
name|result
init|=
operator|new
name|SVNStatusType
index|[]
block|{
name|SVNStatusType
operator|.
name|UNCHANGED
block|,
name|SVNStatusType
operator|.
name|UNCHANGED
block|}
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|mergedFile
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNFileType
name|fileType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|fileType
operator|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|mergedFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
operator|(
name|fileType
operator|!=
name|SVNFileType
operator|.
name|FILE
operator|&&
name|fileType
operator|!=
name|SVNFileType
operator|.
name|SYMLINK
operator|)
condition|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNConflictAction
operator|.
name|EDIT
argument_list|,
name|SVNConflictReason
operator|.
name|MISSING
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
operator|new
name|SVNStatusType
index|[]
block|{
name|SVNStatusType
operator|.
name|MISSING
block|,
name|SVNStatusType
operator|.
name|MISSING
block|}
return|;
block|}
if|if
condition|(
name|diff
operator|!=
literal|null
operator|&&
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|boolean
index|[]
name|isTreeConflicted2
init|=
block|{
literal|false
block|}
decl_stmt|;
name|result
index|[
literal|1
index|]
operator|=
name|propertiesChanged
argument_list|(
name|path
argument_list|,
name|originalProperties
argument_list|,
name|diff
argument_list|,
name|isTreeConflicted2
argument_list|)
expr_stmt|;
if|if
condition|(
name|isTreeConflicted2
index|[
literal|0
index|]
condition|)
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
name|String
name|name
init|=
name|mergedFile
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|file1
operator|!=
literal|null
condition|)
block|{
name|boolean
name|textModified
init|=
name|dir
operator|.
name|hasTextModifications
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|textModified
operator|&&
operator|(
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType1
argument_list|)
operator|||
name|SVNProperty
operator|.
name|isBinaryMimeType
argument_list|(
name|mimeType2
argument_list|)
operator|)
condition|)
block|{
name|boolean
name|same
init|=
name|SVNFileUtil
operator|.
name|compareFiles
argument_list|(
operator|!
name|myIsAddNecessitatedMerge
condition|?
name|file1
else|:
name|file2
argument_list|,
name|mergedFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|same
condition|)
block|{
if|if
condition|(
operator|!
name|myIsDryRun
operator|&&
operator|!
name|myIsAddNecessitatedMerge
condition|)
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|file2
argument_list|,
name|mergedFile
argument_list|)
expr_stmt|;
block|}
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
name|needsMerge
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|needsMerge
condition|)
block|{
name|String
name|localLabel
init|=
literal|".working"
decl_stmt|;
name|String
name|baseLabel
init|=
literal|".merge-left.r"
operator|+
name|revision1
decl_stmt|;
name|String
name|latestLabel
init|=
literal|".merge-right.r"
operator|+
name|revision2
decl_stmt|;
name|SVNStatusType
name|mergeResult
init|=
name|dir
operator|.
name|mergeText
argument_list|(
name|name
argument_list|,
name|file1
argument_list|,
name|file2
argument_list|,
literal|null
argument_list|,
name|localLabel
argument_list|,
name|baseLabel
argument_list|,
name|latestLabel
argument_list|,
name|diff
argument_list|,
name|myIsDryRun
argument_list|,
name|myDiffOptions
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|dir
operator|.
name|runLogs
argument_list|()
expr_stmt|;
if|if
condition|(
name|mergeResult
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED
operator|||
name|mergeResult
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED_UNRESOLVED
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|mergeResult
expr_stmt|;
block|}
if|else if
condition|(
name|textModified
operator|&&
name|mergeResult
operator|!=
name|SVNStatusType
operator|.
name|UNCHANGED
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|MERGED
expr_stmt|;
block|}
if|else if
condition|(
name|mergeResult
operator|==
name|SVNStatusType
operator|.
name|MERGED
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
block|}
if|else if
condition|(
name|mergeResult
operator|!=
name|SVNStatusType
operator|.
name|MISSING
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|UNCHANGED
expr_stmt|;
block|}
if|if
condition|(
name|mergeResult
operator|==
name|SVNStatusType
operator|.
name|CONFLICTED
condition|)
block|{
if|if
condition|(
name|myConflictedPaths
operator|==
literal|null
condition|)
block|{
name|myConflictedPaths
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
name|myConflictedPaths
operator|.
name|put
argument_list|(
name|path
argument_list|,
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|SVNStatusType
index|[]
name|fileAdded
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|long
name|revision1
parameter_list|,
name|long
name|revision2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|SVNProperties
name|diff
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNStatusType
index|[]
name|result
init|=
operator|new
name|SVNStatusType
index|[]
block|{
literal|null
block|,
name|SVNStatusType
operator|.
name|UNKNOWN
block|}
decl_stmt|;
name|SVNProperties
name|newProps
init|=
operator|new
name|SVNProperties
argument_list|(
name|originalProperties
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|propChangesIter
init|=
name|diff
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propChangesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propChangesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|isWorkingCopyProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|myMergeDriver
operator|.
name|isSameRepository
argument_list|()
operator|&&
operator|!
name|SVNProperty
operator|.
name|isRegularProperty
argument_list|(
name|propName
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|myMergeDriver
operator|.
name|isSameRepository
argument_list|()
operator|&&
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNPropertyValue
name|propValue
init|=
name|diff
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|newProps
operator|.
name|put
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
name|File
name|mergedFile
init|=
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|mergedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|myIsDryRun
operator|&&
name|myAddedPath
operator|!=
literal|null
operator|&&
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|myAddedPath
argument_list|,
name|path
argument_list|)
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
if|if
condition|(
operator|!
name|newProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
index|[
literal|1
index|]
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|MISSING
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
name|SVNStatusType
name|obstructedStatus
init|=
name|getStatusForObstructedOrMissing
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|obstructedStatus
operator|!=
name|SVNStatusType
operator|.
name|INAPPLICABLE
condition|)
block|{
return|return
operator|new
name|SVNStatusType
index|[]
block|{
name|obstructedStatus
block|,
name|SVNStatusType
operator|.
name|UNCHANGED
block|}
return|;
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|mergedFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
if|if
condition|(
operator|!
name|myIsDryRun
condition|)
block|{
name|String
name|copyFromURL
init|=
literal|null
decl_stmt|;
name|long
name|copyFromRevision
init|=
name|SVNRepository
operator|.
name|INVALID_REVISION
decl_stmt|;
if|if
condition|(
name|myMergeDriver
operator|.
name|myIsSameRepository
condition|)
block|{
name|String
name|targePath
init|=
name|myMergeDriver
operator|.
name|myTarget
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|minePath
init|=
name|mergedFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|relativePath
init|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|targePath
argument_list|,
name|minePath
argument_list|)
decl_stmt|;
name|copyFromURL
operator|=
name|myURL
operator|.
name|appendPath
argument_list|(
name|relativePath
argument_list|,
literal|false
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|copyFromRevision
operator|=
name|revision2
expr_stmt|;
comment|// TODO compare protocols with dir one.
block|}
name|SVNTreeConflictDescription
name|existingConflict
init|=
name|getWCAccess
argument_list|()
operator|.
name|getTreeConflict
argument_list|(
name|mergedFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|existingConflict
operator|!=
literal|null
condition|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflictOnAdd
argument_list|(
name|mergedFile
argument_list|,
name|getAdminArea
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNConflictAction
operator|.
name|ADD
argument_list|,
name|SVNConflictReason
operator|.
name|ADDED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNWCManager
operator|.
name|addRepositoryFile
argument_list|(
name|dir
argument_list|,
name|mergedFile
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|file2
argument_list|,
name|newProps
argument_list|,
literal|null
argument_list|,
name|copyFromURL
argument_list|,
name|copyFromRevision
argument_list|)
expr_stmt|;
block|}
block|}
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
if|if
condition|(
operator|!
name|newProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
index|[
literal|1
index|]
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflictOnAdd
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNConflictAction
operator|.
name|ADD
argument_list|,
name|SVNConflictReason
operator|.
name|OBSTRUCTED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|myIsDryRun
operator|&&
name|isPathDeleted
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
block|}
else|else
block|{
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|OBSTRUCTED
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
if|if
condition|(
name|myIsDryRun
operator|&&
name|isPathDeleted
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|result
index|[
literal|0
index|]
operator|=
name|SVNStatusType
operator|.
name|CHANGED
expr_stmt|;
block|}
else|else
block|{
name|myMergeDriver
operator|.
name|recordTreeConflictOnAdd
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNConflictAction
operator|.
name|ADD
argument_list|,
name|SVNConflictReason
operator|.
name|ADDED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
name|SVNStatusType
name|fileDeleted
parameter_list|(
name|String
name|path
parameter_list|,
name|File
name|file1
parameter_list|,
name|File
name|file2
parameter_list|,
name|String
name|mimeType1
parameter_list|,
name|String
name|mimeType2
parameter_list|,
name|SVNProperties
name|originalProperties
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|mergedFile
init|=
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|mergedFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|==
literal|null
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|MISSING
return|;
block|}
name|SVNStatusType
name|obstructedStatus
init|=
name|getStatusForObstructedOrMissing
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|obstructedStatus
operator|!=
name|SVNStatusType
operator|.
name|INAPPLICABLE
condition|)
block|{
return|return
name|obstructedStatus
return|;
block|}
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|mergedFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
if|if
condition|(
name|areFilesTheSame
argument_list|(
name|file1
argument_list|,
name|originalProperties
argument_list|,
name|mergedFile
argument_list|,
name|dir
argument_list|)
operator|||
name|myMergeDriver
operator|.
name|myIsForce
operator|||
name|myMergeDriver
operator|.
name|myIsRecordOnly
condition|)
block|{
name|ISVNEventHandler
name|oldEventHandler
init|=
name|getWCAccess
argument_list|()
operator|.
name|getEventHandler
argument_list|()
decl_stmt|;
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
try|try
block|{
name|delete
argument_list|(
name|mergedFile
argument_list|,
literal|true
argument_list|,
name|myIsDryRun
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
return|return
name|SVNStatusType
operator|.
name|OBSTRUCTED
return|;
block|}
finally|finally
block|{
name|getWCAccess
argument_list|()
operator|.
name|setEventHandler
argument_list|(
name|oldEventHandler
argument_list|)
expr_stmt|;
block|}
return|return
name|SVNStatusType
operator|.
name|CHANGED
return|;
block|}
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNConflictAction
operator|.
name|DELETE
argument_list|,
name|SVNConflictReason
operator|.
name|EDITED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|OBSTRUCTED
return|;
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNConflictAction
operator|.
name|DELETE
argument_list|,
name|SVNConflictReason
operator|.
name|OBSTRUCTED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|OBSTRUCTED
return|;
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|myMergeDriver
operator|.
name|recordTreeConflict
argument_list|(
name|mergedFile
argument_list|,
name|dir
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
name|SVNConflictAction
operator|.
name|DELETE
argument_list|,
name|SVNConflictReason
operator|.
name|DELETED
argument_list|)
expr_stmt|;
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|SVNStatusType
operator|.
name|MISSING
return|;
block|}
return|return
name|SVNStatusType
operator|.
name|UNKNOWN
return|;
block|}
specifier|public
name|SVNStatusType
index|[]
name|directoryClosed
parameter_list|(
name|String
name|path
parameter_list|,
name|boolean
index|[]
name|isTreeConflicted
parameter_list|)
throws|throws
name|SVNException
block|{
name|setIsConflicted
argument_list|(
name|isTreeConflicted
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
operator|new
name|SVNStatusType
index|[]
block|{
name|SVNStatusType
operator|.
name|UNKNOWN
block|,
name|SVNStatusType
operator|.
name|UNKNOWN
block|}
return|;
block|}
specifier|protected
name|File
name|getFile
parameter_list|(
name|String
name|path
parameter_list|)
block|{
return|return
name|getAdminArea
argument_list|()
operator|.
name|getFile
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|protected
name|SVNAdminArea
name|retrieve
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|lenient
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|getAdminArea
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
return|return
name|getAdminArea
argument_list|()
operator|.
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|lenient
condition|)
block|{
return|return
literal|null
return|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|protected
name|void
name|delete
parameter_list|(
name|File
name|path
parameter_list|,
name|boolean
name|force
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|boolean
name|keepLocal
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|force
operator|&&
operator|!
name|keepLocal
condition|)
block|{
name|SVNWCManager
operator|.
name|canDelete
argument_list|(
name|path
argument_list|,
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
argument_list|,
name|getWCAccess
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|SVNAdminArea
name|root
init|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|path
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dryRun
condition|)
block|{
name|SVNWCManager
operator|.
name|delete
argument_list|(
name|getWCAccess
argument_list|()
argument_list|,
name|root
argument_list|,
name|path
argument_list|,
operator|!
name|keepLocal
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|boolean
name|areFilesTheSame
parameter_list|(
name|File
name|older
parameter_list|,
name|SVNProperties
name|originalProps
parameter_list|,
name|File
name|mine
parameter_list|,
name|SVNAdminArea
name|adminArea
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|workingProps
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|mine
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|arePropsTheSame
argument_list|(
name|originalProps
argument_list|,
name|workingProps
argument_list|)
condition|)
block|{
return|return
operator|!
name|adminArea
operator|.
name|hasVersionedFileTextChanges
argument_list|(
name|mine
argument_list|,
name|older
argument_list|,
literal|true
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|SVNStatusType
name|getStatusForObstructedOrMissing
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|File
name|file
init|=
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
try|try
block|{
name|entry
operator|=
name|getWCAccess
argument_list|()
operator|.
name|getEntry
argument_list|(
name|file
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
comment|//
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isAbsent
argument_list|()
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|MISSING
return|;
block|}
name|SVNNodeKind
name|expectedKind
init|=
name|getWorkingNodeKind
argument_list|(
name|entry
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNNodeKind
name|diskKind
init|=
name|getDiskKind
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|&&
name|diskKind
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|expectedKind
operator|=
name|SVNNodeKind
operator|.
name|DIR
expr_stmt|;
block|}
if|if
condition|(
name|expectedKind
operator|==
name|diskKind
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|INAPPLICABLE
return|;
block|}
if|else if
condition|(
name|diskKind
operator|==
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|MISSING
return|;
block|}
return|return
name|SVNStatusType
operator|.
name|OBSTRUCTED
return|;
block|}
specifier|private
name|SVNNodeKind
name|getWorkingNodeKind
parameter_list|(
name|SVNEntry
name|entry
parameter_list|,
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|||
operator|(
name|myIsDryRun
operator|&&
name|isPathDeleted
argument_list|(
name|path
argument_list|)
operator|)
operator|||
operator|(
name|entry
operator|.
name|isDeleted
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|)
condition|)
block|{
return|return
name|SVNNodeKind
operator|.
name|NONE
return|;
block|}
return|return
name|entry
operator|.
name|getKind
argument_list|()
return|;
block|}
specifier|private
name|SVNNodeKind
name|getDiskKind
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|File
name|file
init|=
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNFileType
name|type
init|=
literal|null
decl_stmt|;
name|type
operator|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|UNKNOWN
condition|)
block|{
return|return
name|SVNNodeKind
operator|.
name|UNKNOWN
return|;
block|}
if|if
condition|(
name|myIsDryRun
operator|&&
name|isPathDeleted
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|SVNNodeKind
operator|.
name|NONE
return|;
block|}
return|return
name|SVNFileType
operator|.
name|getNodeKind
argument_list|(
name|type
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|arePropsTheSame
parameter_list|(
name|SVNProperties
name|props1
parameter_list|,
name|SVNProperties
name|props2
parameter_list|)
block|{
name|SVNProperties
name|propsDiff
init|=
name|props2
operator|.
name|compareTo
argument_list|(
name|props1
argument_list|)
decl_stmt|;
name|SVNProperties
name|regularPropsDiff
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|categorizeProperties
argument_list|(
name|propsDiff
argument_list|,
name|regularPropsDiff
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|propNamesIter
init|=
name|regularPropsDiff
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNamesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNamesIter
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|SVNProperty
operator|.
name|MERGE_INFO
operator|.
name|equals
argument_list|(
name|propName
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

