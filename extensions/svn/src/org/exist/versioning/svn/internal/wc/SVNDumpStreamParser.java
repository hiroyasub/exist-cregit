begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html.  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|CharsetDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|ISVNCanceller
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|wc
operator|.
name|ISVNLoadHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNDumpStreamParser
block|{
specifier|private
name|ISVNCanceller
name|myCanceller
decl_stmt|;
specifier|public
name|SVNDumpStreamParser
parameter_list|(
name|ISVNCanceller
name|canceller
parameter_list|)
block|{
name|myCanceller
operator|=
name|canceller
expr_stmt|;
block|}
specifier|public
name|void
name|parseDumpStream
parameter_list|(
name|InputStream
name|dumpStream
parameter_list|,
name|ISVNLoadHandler
name|handler
parameter_list|,
name|CharsetDecoder
name|decoder
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|line
init|=
literal|null
decl_stmt|;
name|int
name|version
init|=
operator|-
literal|1
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
try|try
block|{
name|line
operator|=
name|SVNFileUtil
operator|.
name|readLineFromStream
argument_list|(
name|dumpStream
argument_list|,
name|buffer
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateIncompleteDataError
argument_list|()
expr_stmt|;
block|}
comment|//parse format
if|if
condition|(
operator|!
name|line
operator|.
name|startsWith
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_MAGIC_HEADER
operator|+
literal|":"
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|line
operator|=
name|line
operator|.
name|substring
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_MAGIC_HEADER
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|trim
argument_list|()
expr_stmt|;
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|version
operator|>
name|SVNAdminHelper
operator|.
name|DUMPFILE_FORMAT_VERSION
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Unsupported dumpfile version: {0}"
argument_list|,
operator|new
name|Integer
argument_list|(
name|version
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|myCanceller
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|boolean
name|foundNode
init|=
literal|false
decl_stmt|;
comment|//skip empty lines
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|line
operator|=
name|SVNFileUtil
operator|.
name|readLineFromStream
argument_list|(
name|dumpStream
argument_list|,
name|buffer
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateIncompleteDataError
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|Character
operator|.
name|isWhitespace
argument_list|(
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Map
name|headers
init|=
name|readHeaderBlock
argument_list|(
name|dumpStream
argument_list|,
name|line
argument_list|,
name|decoder
argument_list|)
decl_stmt|;
if|if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_REVISION_NUMBER
argument_list|)
condition|)
block|{
name|handler
operator|.
name|closeRevision
argument_list|()
expr_stmt|;
name|handler
operator|.
name|openRevision
argument_list|(
name|headers
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_PATH
argument_list|)
condition|)
block|{
name|handler
operator|.
name|openNode
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|foundNode
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_UUID
argument_list|)
condition|)
block|{
name|String
name|uuid
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_UUID
argument_list|)
decl_stmt|;
name|handler
operator|.
name|parseUUID
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|headers
operator|.
name|containsKey
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_MAGIC_HEADER
argument_list|)
condition|)
block|{
try|try
block|{
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_MAGIC_HEADER
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Unrecognized record type in stream"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|String
name|contentLength
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_CONTENT_LENGTH
argument_list|)
decl_stmt|;
name|String
name|propContentLength
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_PROP_CONTENT_LENGTH
argument_list|)
decl_stmt|;
name|String
name|textContentLength
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_CONTENT_LENGTH
argument_list|)
decl_stmt|;
name|boolean
name|isOldVersion
init|=
name|version
operator|==
literal|1
operator|&&
name|contentLength
operator|!=
literal|null
operator|&&
name|propContentLength
operator|==
literal|null
operator|&&
name|textContentLength
operator|==
literal|null
decl_stmt|;
name|long
name|actualPropLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|propContentLength
operator|!=
literal|null
operator|||
name|isOldVersion
condition|)
block|{
name|String
name|delta
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_PROP_DELTA
argument_list|)
decl_stmt|;
name|boolean
name|isDelta
init|=
name|delta
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|delta
argument_list|)
decl_stmt|;
if|if
condition|(
name|foundNode
operator|&&
operator|!
name|isDelta
condition|)
block|{
name|handler
operator|.
name|removeNodeProperties
argument_list|()
expr_stmt|;
block|}
name|long
name|length
init|=
literal|0
decl_stmt|;
try|try
block|{
name|length
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|propContentLength
operator|!=
literal|null
condition|?
name|propContentLength
else|:
name|contentLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header: can't parse property block length header"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|actualPropLength
operator|+=
name|parsePropertyBlock
argument_list|(
name|dumpStream
argument_list|,
name|handler
argument_list|,
name|decoder
argument_list|,
name|length
argument_list|,
name|foundNode
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|textContentLength
operator|!=
literal|null
condition|)
block|{
name|String
name|delta
init|=
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_TEXT_DELTA
argument_list|)
decl_stmt|;
name|boolean
name|isDelta
init|=
name|delta
operator|!=
literal|null
operator|&&
literal|"true"
operator|.
name|equals
argument_list|(
name|delta
argument_list|)
decl_stmt|;
name|long
name|length
init|=
literal|0
decl_stmt|;
try|try
block|{
name|length
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|textContentLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header: can't parse text block length header"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|parseTextBlock
argument_list|(
name|dumpStream
argument_list|,
name|length
argument_list|,
name|isDelta
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isOldVersion
condition|)
block|{
name|long
name|length
init|=
literal|0
decl_stmt|;
try|try
block|{
name|length
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|contentLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header: can't parse content length header"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|length
operator|-=
name|actualPropLength
expr_stmt|;
if|if
condition|(
name|length
operator|>
literal|0
operator|||
name|SVNNodeKind
operator|.
name|parseKind
argument_list|(
operator|(
name|String
operator|)
name|headers
operator|.
name|get
argument_list|(
name|SVNAdminHelper
operator|.
name|DUMPFILE_NODE_KIND
argument_list|)
argument_list|)
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|handler
operator|.
name|parseTextBlock
argument_list|(
name|dumpStream
argument_list|,
name|length
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contentLength
operator|!=
literal|null
operator|&&
operator|!
name|isOldVersion
condition|)
block|{
name|long
name|remaining
init|=
literal|0
decl_stmt|;
try|try
block|{
name|remaining
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|contentLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header: can't parse content length header"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|long
name|propertyContentLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|propContentLength
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|propertyContentLength
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|propContentLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header: can't parse property block length header"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
name|remaining
operator|-=
name|propertyContentLength
expr_stmt|;
name|long
name|txtContentLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|textContentLength
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|txtContentLength
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|textContentLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header: can't parse text block length header"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
name|remaining
operator|-=
name|txtContentLength
expr_stmt|;
if|if
condition|(
name|remaining
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Sum of subblock sizes larger than total block content length"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|byte
name|buf
index|[]
init|=
operator|new
name|byte
index|[
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
index|]
decl_stmt|;
name|long
name|numRead
init|=
literal|0
decl_stmt|;
name|long
name|numToRead
init|=
name|remaining
decl_stmt|;
while|while
condition|(
name|remaining
operator|>
literal|0
condition|)
block|{
name|int
name|readSize
init|=
name|remaining
operator|>=
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
condition|?
name|SVNFileUtil
operator|.
name|STREAM_CHUNK_SIZE
else|:
operator|(
name|int
operator|)
name|remaining
decl_stmt|;
name|int
name|r
init|=
name|dumpStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|readSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|<
literal|0
condition|)
block|{
break|break;
block|}
name|numRead
operator|+=
name|r
expr_stmt|;
name|remaining
operator|-=
name|r
expr_stmt|;
block|}
if|if
condition|(
name|numRead
operator|!=
name|numToRead
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateIncompleteDataError
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|foundNode
condition|)
block|{
name|handler
operator|.
name|closeNode
argument_list|()
expr_stmt|;
name|foundNode
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|handler
operator|.
name|closeRevision
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|long
name|parsePropertyBlock
parameter_list|(
name|InputStream
name|dumpStream
parameter_list|,
name|ISVNLoadHandler
name|handler
parameter_list|,
name|CharsetDecoder
name|decoder
parameter_list|,
name|long
name|contentLength
parameter_list|,
name|boolean
name|isNode
parameter_list|)
throws|throws
name|SVNException
block|{
name|long
name|actualLength
init|=
literal|0
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|String
name|line
init|=
literal|null
decl_stmt|;
try|try
block|{
while|while
condition|(
name|contentLength
operator|!=
name|actualLength
condition|)
block|{
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|line
operator|=
name|SVNFileUtil
operator|.
name|readLineFromStream
argument_list|(
name|dumpStream
argument_list|,
name|buffer
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Incomplete or unterminated property block"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
comment|//including '\n'
name|actualLength
operator|+=
name|line
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
literal|"PROPS-END"
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
break|break;
block|}
if|else if
condition|(
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'K'
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
try|try
block|{
name|len
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header: can't parse node property key length"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|buff
init|=
operator|new
name|byte
index|[
name|len
operator|+
literal|1
index|]
decl_stmt|;
name|actualLength
operator|+=
name|SVNAdminHelper
operator|.
name|readKeyOrValue
argument_list|(
name|dumpStream
argument_list|,
name|buff
argument_list|,
name|len
operator|+
literal|1
argument_list|)
expr_stmt|;
name|String
name|propName
init|=
operator|new
name|String
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|line
operator|=
name|SVNFileUtil
operator|.
name|readLineFromStream
argument_list|(
name|dumpStream
argument_list|,
name|buffer
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateIncompleteDataError
argument_list|()
expr_stmt|;
block|}
comment|//including '\n'
name|actualLength
operator|+=
name|line
operator|.
name|length
argument_list|()
operator|+
literal|1
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'V'
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
try|try
block|{
name|len
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header: can't parse node property value length"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|buff
operator|=
operator|new
name|byte
index|[
name|len
operator|+
literal|1
index|]
expr_stmt|;
name|actualLength
operator|+=
name|SVNAdminHelper
operator|.
name|readKeyOrValue
argument_list|(
name|dumpStream
argument_list|,
name|buff
argument_list|,
name|len
operator|+
literal|1
argument_list|)
expr_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|SVNPropertyValue
operator|.
name|create
argument_list|(
name|propName
argument_list|,
name|buff
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
decl_stmt|;
if|if
condition|(
name|isNode
condition|)
block|{
name|handler
operator|.
name|setNodeProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handler
operator|.
name|setRevisionProperty
argument_list|(
name|propName
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|SVNAdminHelper
operator|.
name|generateStreamMalformedError
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'D'
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|int
name|len
init|=
literal|0
decl_stmt|;
try|try
block|{
name|len
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|line
operator|.
name|substring
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Malformed dumpfile header: can't parse node property key length"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|nfe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|buff
init|=
operator|new
name|byte
index|[
name|len
operator|+
literal|1
index|]
decl_stmt|;
name|actualLength
operator|+=
name|SVNAdminHelper
operator|.
name|readKeyOrValue
argument_list|(
name|dumpStream
argument_list|,
name|buff
argument_list|,
name|len
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNode
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateStreamMalformedError
argument_list|()
expr_stmt|;
block|}
name|String
name|propName
init|=
operator|new
name|String
argument_list|(
name|buff
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|handler
operator|.
name|deleteNodeProperty
argument_list|(
name|propName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNAdminHelper
operator|.
name|generateStreamMalformedError
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
return|return
name|actualLength
return|;
block|}
specifier|private
name|Map
name|readHeaderBlock
parameter_list|(
name|InputStream
name|dumpStream
parameter_list|,
name|String
name|firstHeader
parameter_list|,
name|CharsetDecoder
name|decoder
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
block|{
name|Map
name|headers
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|String
name|header
init|=
literal|null
decl_stmt|;
name|buffer
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|firstHeader
operator|!=
literal|null
condition|)
block|{
name|header
operator|=
name|firstHeader
expr_stmt|;
name|firstHeader
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|header
operator|=
name|SVNFileUtil
operator|.
name|readLineFromStream
argument_list|(
name|dumpStream
argument_list|,
name|buffer
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
if|if
condition|(
name|header
operator|==
literal|null
operator|&&
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SVNAdminHelper
operator|.
name|generateIncompleteDataError
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|buffer
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
block|}
name|int
name|colonInd
init|=
name|header
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonInd
operator|==
operator|-
literal|1
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Dump stream contains a malformed header (with no '':'') at ''{0}''"
argument_list|,
name|header
operator|.
name|length
argument_list|()
operator|>
literal|20
condition|?
name|header
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|19
argument_list|)
else|:
name|header
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|header
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|colonInd
argument_list|)
decl_stmt|;
if|if
condition|(
name|colonInd
operator|+
literal|2
operator|>
name|header
operator|.
name|length
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|STREAM_MALFORMED_DATA
argument_list|,
literal|"Dump stream contains a malformed header (with no value) at ''{0}''"
argument_list|,
name|header
operator|.
name|length
argument_list|()
operator|>
literal|20
condition|?
name|header
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|19
argument_list|)
else|:
name|header
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|FSFS
argument_list|)
expr_stmt|;
block|}
name|String
name|value
init|=
name|header
operator|.
name|substring
argument_list|(
name|colonInd
operator|+
literal|2
argument_list|)
decl_stmt|;
name|headers
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
name|headers
return|;
block|}
block|}
end_class

end_unit

