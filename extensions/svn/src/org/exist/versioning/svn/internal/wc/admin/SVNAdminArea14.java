begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|io
operator|.
name|fs
operator|.
name|FSFile
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileListUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNWCProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNFormatUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNAdminArea14
extends|extends
name|SVNAdminArea
block|{
specifier|public
specifier|static
specifier|final
name|int
name|WC_FORMAT
init|=
name|SVNAdminArea14Factory
operator|.
name|WC_FORMAT
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|ourCachableProperties
init|=
operator|new
name|String
index|[]
block|{
name|SVNProperty
operator|.
name|SPECIAL
block|,
name|SVNProperty
operator|.
name|EXTERNALS
block|,
name|SVNProperty
operator|.
name|NEEDS_LOCK
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ATTRIBUTE_COPIED
init|=
literal|"copied"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ATTRIBUTE_DELETED
init|=
literal|"deleted"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ATTRIBUTE_ABSENT
init|=
literal|"absent"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ATTRIBUTE_INCOMPLETE
init|=
literal|"incomplete"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ATTRIBUTE_HAS_PROPS
init|=
literal|"has-props"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|ATTRIBUTE_HAS_PROP_MODS
init|=
literal|"has-prop-mods"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|KILL_ADM_ONLY
init|=
literal|"adm-only"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|THIS_DIR
init|=
literal|""
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Set
name|INAPPLICABLE_PROPERTIES
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
static|static
block|{
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|KEEP_LOCAL
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|CHANGELIST
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|DEPTH
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|PROP_TIME
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PATH
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_REVISION
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|FILE_EXTERNAL_PEG_REVISION
argument_list|)
expr_stmt|;
name|INAPPLICABLE_PROPERTIES
operator|.
name|add
argument_list|(
name|SVNProperty
operator|.
name|TREE_CONFLICT_DATA
argument_list|)
expr_stmt|;
block|}
specifier|private
name|File
name|myLockFile
decl_stmt|;
specifier|private
name|File
name|myEntriesFile
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|ourIsOptimizedWritingEnabled
decl_stmt|;
specifier|public
name|SVNAdminArea14
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|super
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|myLockFile
operator|=
operator|new
name|Resource
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|,
literal|"lock"
argument_list|)
expr_stmt|;
name|myEntriesFile
operator|=
operator|new
name|Resource
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|,
literal|"entries"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|setOptimizedWritingEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|ourIsOptimizedWritingEnabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|getCachableProperties
parameter_list|()
block|{
return|return
name|ourCachableProperties
return|;
block|}
specifier|public
name|void
name|saveWCProperties
parameter_list|(
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|wcPropsCache
init|=
name|getWCPropertiesStorage
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcPropsCache
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|boolean
name|hasAnyProps
init|=
literal|false
decl_stmt|;
name|File
name|dstFile
init|=
name|getAdminFile
argument_list|(
literal|"all-wcprops"
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|getAdminFile
argument_list|(
literal|"tmp/all-wcprops"
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|wcPropsCache
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|wcPropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hasAnyProps
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|hasAnyProps
condition|)
block|{
name|OutputStream
name|target
init|=
literal|null
decl_stmt|;
try|try
block|{
name|target
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|wcPropsCache
operator|.
name|get
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
operator|&&
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|SVNWCProperties
operator|.
name|setProperties
argument_list|(
name|props
operator|.
name|asMap
argument_list|()
argument_list|,
name|target
argument_list|,
name|SVNWCProperties
operator|.
name|SVN_HASH_TERMINATOR
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNWCProperties
operator|.
name|setProperties
argument_list|(
operator|new
name|SVNProperties
argument_list|()
argument_list|,
name|target
argument_list|,
name|SVNWCProperties
operator|.
name|SVN_HASH_TERMINATOR
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|entries
init|=
name|wcPropsCache
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|props
operator|=
operator|(
name|SVNVersionedProperties
operator|)
name|wcPropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|target
operator|.
name|write
argument_list|(
name|name
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|target
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|SVNWCProperties
operator|.
name|setProperties
argument_list|(
name|props
operator|.
name|asMap
argument_list|()
argument_list|,
name|target
argument_list|,
name|SVNWCProperties
operator|.
name|SVN_HASH_TERMINATOR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|ioe
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|ioe
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|target
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|tmpFile
argument_list|,
name|dstFile
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|dstFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|dstFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|close
condition|)
block|{
name|closeWCProperties
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|SVNVersionedProperties
name|getBaseProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|basePropsCache
init|=
name|getBasePropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|basePropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
return|return
name|props
return|;
block|}
name|SVNProperties
name|baseProps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|baseProps
operator|=
name|readBaseProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Failed to load properties from disk"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|props
operator|=
operator|new
name|SVNProperties13
argument_list|(
name|baseProps
argument_list|)
expr_stmt|;
name|basePropsCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
name|SVNVersionedProperties
name|getRevertProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|revertPropsCache
init|=
name|getRevertPropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|revertPropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
return|return
name|props
return|;
block|}
name|SVNProperties
name|revertProps
init|=
literal|null
decl_stmt|;
try|try
block|{
name|revertProps
operator|=
name|readRevertProperties
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Failed to load properties from disk"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|props
operator|=
operator|new
name|SVNProperties13
argument_list|(
name|revertProps
argument_list|)
expr_stmt|;
name|revertPropsCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
name|SVNVersionedProperties
name|getProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|propsCache
init|=
name|getPropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|propsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
return|return
name|props
return|;
block|}
specifier|final
name|String
name|entryName
init|=
name|name
decl_stmt|;
name|props
operator|=
operator|new
name|SVNProperties14
argument_list|(
literal|null
argument_list|,
name|this
argument_list|,
name|name
argument_list|)
block|{
specifier|protected
name|SVNProperties
name|loadProperties
parameter_list|()
throws|throws
name|SVNException
block|{
name|SVNProperties
name|props
init|=
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|props
operator|=
name|readProperties
argument_list|(
name|entryName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Failed to load properties from disk"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|props
operator|=
name|props
operator|!=
literal|null
condition|?
name|props
else|:
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|setPropertiesMap
argument_list|(
name|props
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
block|}
expr_stmt|;
name|propsCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|props
argument_list|)
expr_stmt|;
return|return
name|props
return|;
block|}
specifier|public
name|SVNVersionedProperties
name|getWCProperties
parameter_list|(
name|String
name|entryName
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|entryName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
name|wcPropsCache
init|=
name|getWCPropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|wcPropsCache
operator|.
name|get
argument_list|(
name|entryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|!=
literal|null
condition|)
block|{
return|return
name|props
return|;
block|}
if|if
condition|(
name|wcPropsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wcPropsCache
operator|=
name|readAllWCProperties
argument_list|()
expr_stmt|;
block|}
name|props
operator|=
operator|(
name|SVNVersionedProperties
operator|)
name|wcPropsCache
operator|.
name|get
argument_list|(
name|entryName
argument_list|)
expr_stmt|;
if|if
condition|(
name|props
operator|==
literal|null
condition|)
block|{
name|props
operator|=
operator|new
name|SVNProperties13
argument_list|(
operator|new
name|SVNProperties
argument_list|()
argument_list|)
expr_stmt|;
name|wcPropsCache
operator|.
name|put
argument_list|(
name|entryName
argument_list|,
name|props
argument_list|)
expr_stmt|;
block|}
return|return
name|props
return|;
block|}
specifier|private
name|Map
name|readAllWCProperties
parameter_list|()
throws|throws
name|SVNException
block|{
name|Map
name|wcPropsCache
init|=
name|getWCPropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|wcPropsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
name|File
name|propertiesFile
init|=
name|getAdminFile
argument_list|(
literal|"all-wcprops"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propertiesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
name|wcPropsCache
return|;
block|}
name|FSFile
name|wcpropsFile
init|=
literal|null
decl_stmt|;
try|try
block|{
name|wcpropsFile
operator|=
operator|new
name|FSFile
argument_list|(
name|propertiesFile
argument_list|)
expr_stmt|;
name|SVNProperties
name|wcProps
init|=
name|wcpropsFile
operator|.
name|readProperties
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|entryWCProps
init|=
operator|new
name|SVNProperties13
argument_list|(
name|wcProps
argument_list|)
decl_stmt|;
name|wcPropsCache
operator|.
name|put
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
name|entryWCProps
argument_list|)
expr_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|name
operator|=
name|wcpropsFile
operator|.
name|readLine
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|STREAM_UNEXPECTED_EOF
operator|&&
name|buffer
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Missing end of line in wcprops file for ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|wcProps
operator|=
name|wcpropsFile
operator|.
name|readProperties
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|entryWCProps
operator|=
operator|new
name|SVNProperties13
argument_list|(
name|wcProps
argument_list|)
expr_stmt|;
name|wcPropsCache
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|entryWCProps
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|delete
argument_list|(
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Failed to load properties from disk"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|wcpropsFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
name|wcPropsCache
return|;
block|}
specifier|private
name|SVNProperties
name|readBaseProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|propertiesFile
init|=
name|getBasePropertiesFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|propertiesFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|asMap
argument_list|()
return|;
block|}
specifier|private
name|SVNProperties
name|readRevertProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|propertiesFile
init|=
name|getRevertPropertiesFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|propertiesFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|asMap
argument_list|()
return|;
block|}
specifier|private
name|SVNProperties
name|readProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|hasPropModifications
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|File
name|propertiesFile
init|=
name|getPropertiesFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|propertiesFile
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|props
operator|.
name|asMap
argument_list|()
return|;
block|}
name|Map
name|basePropsCache
init|=
name|getBasePropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|basePropsCache
operator|!=
literal|null
condition|)
block|{
name|SVNVersionedProperties
name|baseProps
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|basePropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseProps
operator|!=
literal|null
condition|)
block|{
return|return
name|baseProps
operator|.
name|asMap
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|hasProperties
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|readBaseProperties
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
operator|new
name|SVNProperties
argument_list|()
return|;
block|}
specifier|public
name|void
name|saveVersionedProperties
parameter_list|(
name|SVNLog
name|log
parameter_list|,
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|Set
name|processedEntries
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
name|Map
name|propsCache
init|=
name|getPropertiesStorage
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|propsCache
operator|!=
literal|null
operator|&&
operator|!
name|propsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|entries
init|=
name|propsCache
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|props
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|propsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|props
operator|.
name|isModified
argument_list|()
condition|)
block|{
name|SVNVersionedProperties
name|baseProps
init|=
name|getBaseProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|propsDiff
init|=
name|baseProps
operator|.
name|compareTo
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|String
index|[]
name|cachableProps
init|=
name|SVNAdminArea14
operator|.
name|getCachableProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
argument_list|,
name|asString
argument_list|(
name|cachableProps
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|SVNProperties
name|propsMap
init|=
name|props
operator|.
name|loadProperties
argument_list|()
decl_stmt|;
name|LinkedList
name|presentProps
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cachableProps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|propsMap
operator|.
name|containsName
argument_list|(
name|cachableProps
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|presentProps
operator|.
name|addLast
argument_list|(
name|cachableProps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|presentProps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|presentPropsString
init|=
name|asString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|presentProps
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|presentProps
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|PRESENT_PROPS
argument_list|)
argument_list|,
name|presentPropsString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|PRESENT_PROPS
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROPS
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|hasPropModifications
init|=
operator|!
name|propsDiff
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROP_MODS
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|hasPropModifications
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|processedEntries
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|dstPath
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-props"
else|:
literal|"props/"
operator|+
name|name
operator|+
literal|".svn-work"
decl_stmt|;
name|dstPath
operator|=
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|dstPath
expr_stmt|;
if|if
condition|(
name|hasPropModifications
condition|)
block|{
name|String
name|tmpPath
init|=
literal|"tmp/"
decl_stmt|;
name|tmpPath
operator|+=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-props"
else|:
literal|"props/"
operator|+
name|name
operator|+
literal|".svn-work"
expr_stmt|;
name|File
name|tmpFile
init|=
name|getAdminFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|String
name|srcPath
init|=
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|tmpPath
decl_stmt|;
name|SVNWCProperties
name|tmpProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpFile
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tmpProps
operator|.
name|setProperties
argument_list|(
name|props
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|props
operator|.
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|Map
name|basePropsCache
init|=
name|getBasePropertiesStorage
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|basePropsCache
operator|!=
literal|null
operator|&&
operator|!
name|basePropsCache
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|entries
init|=
name|basePropsCache
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNVersionedProperties
name|baseProps
init|=
operator|(
name|SVNVersionedProperties
operator|)
name|basePropsCache
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseProps
operator|.
name|isModified
argument_list|()
condition|)
block|{
name|String
name|dstPath
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-prop-base"
else|:
literal|"prop-base/"
operator|+
name|name
operator|+
literal|".svn-base"
decl_stmt|;
name|dstPath
operator|=
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|dstPath
expr_stmt|;
name|boolean
name|isEntryProcessed
init|=
name|processedEntries
operator|.
name|contains
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isEntryProcessed
condition|)
block|{
name|SVNVersionedProperties
name|props
init|=
name|getProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
index|[]
name|cachableProps
init|=
name|SVNAdminArea14
operator|.
name|getCachableProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
argument_list|,
name|asString
argument_list|(
name|cachableProps
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|SVNProperties
name|propsMap
init|=
name|props
operator|.
name|loadProperties
argument_list|()
decl_stmt|;
name|LinkedList
name|presentProps
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cachableProps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|propsMap
operator|.
name|containsName
argument_list|(
name|cachableProps
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|presentProps
operator|.
name|addLast
argument_list|(
name|cachableProps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|presentProps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|presentPropsString
init|=
name|asString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|presentProps
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|presentProps
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|PRESENT_PROPS
argument_list|)
argument_list|,
name|presentPropsString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|PRESENT_PROPS
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROPS
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
operator|!
name|props
operator|.
name|isEmpty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|SVNVersionedProperties
name|propsDiff
init|=
name|baseProps
operator|.
name|compareTo
argument_list|(
name|props
argument_list|)
decl_stmt|;
name|boolean
name|hasPropModifications
init|=
operator|!
name|propsDiff
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROP_MODS
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|hasPropModifications
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|hasPropModifications
condition|)
block|{
name|String
name|workingPropsPath
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-props"
else|:
literal|"props/"
operator|+
name|name
operator|+
literal|".svn-work"
decl_stmt|;
name|workingPropsPath
operator|=
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|workingPropsPath
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|workingPropsPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|baseProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|tmpPath
init|=
literal|"tmp/"
decl_stmt|;
name|tmpPath
operator|+=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-prop-base"
else|:
literal|"prop-base/"
operator|+
name|name
operator|+
literal|".svn-base"
expr_stmt|;
name|File
name|tmpFile
init|=
name|getAdminFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|String
name|srcPath
init|=
name|getAdminDirectory
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"/"
operator|+
name|tmpPath
decl_stmt|;
name|SVNWCProperties
name|tmpProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpFile
argument_list|,
name|srcPath
argument_list|)
decl_stmt|;
name|tmpProps
operator|.
name|setProperties
argument_list|(
name|baseProps
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|srcPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|baseProps
operator|.
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|close
condition|)
block|{
name|closeVersionedProperties
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|installProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNProperties
name|baseProps
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|boolean
name|writeBaseProps
parameter_list|,
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|name
operator|.
name|equals
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
condition|?
name|SVNNodeKind
operator|.
name|DIR
else|:
name|SVNNodeKind
operator|.
name|FILE
decl_stmt|;
name|SVNProperties
name|propDiff
init|=
name|baseProps
operator|.
name|compareTo
argument_list|(
name|workingProps
argument_list|)
decl_stmt|;
name|boolean
name|hasPropMods
init|=
operator|!
name|propDiff
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROP_MODS
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|hasPropMods
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROPS
argument_list|)
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
operator|!
name|workingProps
operator|.
name|isEmpty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|String
index|[]
name|cachableProps
init|=
name|SVNAdminArea14
operator|.
name|getCachableProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
argument_list|,
name|asString
argument_list|(
name|cachableProps
argument_list|,
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|LinkedList
name|presentProps
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cachableProps
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|workingProps
operator|.
name|containsName
argument_list|(
name|cachableProps
index|[
name|i
index|]
argument_list|)
condition|)
block|{
name|presentProps
operator|.
name|addLast
argument_list|(
name|cachableProps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|presentProps
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|presentPropsString
init|=
name|asString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|presentProps
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|presentProps
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|PRESENT_PROPS
argument_list|)
argument_list|,
name|presentPropsString
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|PRESENT_PROPS
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|String
name|dstPath
init|=
name|SVNAdminUtil
operator|.
name|getPropPath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasPropMods
condition|)
block|{
name|String
name|tmpPath
init|=
name|SVNAdminUtil
operator|.
name|getPropPath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|getFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|tmpProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpFile
argument_list|,
name|tmpPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|workingProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tmpProps
operator|.
name|setProperties
argument_list|(
name|workingProps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasPropModifications
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|dstPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|writeBaseProps
condition|)
block|{
name|String
name|basePath
init|=
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseProps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|tmpPath
init|=
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|name
argument_list|,
name|kind
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|getFile
argument_list|(
name|tmpPath
argument_list|)
decl_stmt|;
name|SVNWCProperties
name|tmpProps
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpFile
argument_list|,
name|tmpPath
argument_list|)
decl_stmt|;
name|tmpProps
operator|.
name|setProperties
argument_list|(
name|baseProps
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|READONLY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|hasProperties
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|basePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|close
condition|)
block|{
name|closeVersionedProperties
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|handleKillMe
parameter_list|()
throws|throws
name|SVNException
block|{
name|boolean
name|killMe
init|=
name|isKillMe
argument_list|()
decl_stmt|;
if|if
condition|(
name|killMe
condition|)
block|{
name|String
name|contents
init|=
name|SVNFileUtil
operator|.
name|readFile
argument_list|(
name|getAdminFile
argument_list|(
name|ADM_KILLME
argument_list|)
argument_list|)
decl_stmt|;
name|boolean
name|killAdmOnly
init|=
name|KILL_ADM_ONLY
operator|.
name|equals
argument_list|(
name|contents
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|long
name|dirRevision
init|=
name|entry
operator|!=
literal|null
condition|?
name|entry
operator|.
name|getRevision
argument_list|()
else|:
operator|-
literal|1
decl_stmt|;
comment|// deleted dir, files and entry in parent.
name|File
name|dir
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|SVNWCAccess
name|access
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
name|boolean
name|isWCRoot
init|=
name|access
operator|.
name|isWCRoot
argument_list|(
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|removeFromRevisionControl
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
operator|!
name|killAdmOnly
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
if|if
condition|(
name|isWCRoot
condition|)
block|{
return|return;
block|}
comment|// compare revision with parent's one
name|SVNAdminArea
name|parentArea
init|=
name|access
operator|.
name|retrieve
argument_list|(
name|dir
operator|.
name|getParentFile
argument_list|()
argument_list|)
decl_stmt|;
name|SVNEntry
name|parentEntry
init|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|parentArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirRevision
operator|>
name|parentEntry
operator|.
name|getRevision
argument_list|()
condition|)
block|{
name|SVNEntry
name|entryInParent
init|=
name|parentArea
operator|.
name|addEntry
argument_list|(
name|dir
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
name|Boolean
operator|.
name|TRUE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|SVNProperty
operator|.
name|KIND_DIR
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|dirRevision
argument_list|)
argument_list|)
expr_stmt|;
name|parentArea
operator|.
name|modifyEntry
argument_list|(
name|entryInParent
operator|.
name|getName
argument_list|()
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|saveEntries
parameter_list|(
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myEntries
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|isLocked
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"No write-lock in ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|rootEntry
init|=
operator|(
name|SVNEntry
operator|)
name|myEntries
operator|.
name|get
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootEntry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"No default entry in directory ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|String
name|reposURL
init|=
name|rootEntry
operator|.
name|getRepositoryRoot
argument_list|()
decl_stmt|;
name|String
name|url
init|=
name|rootEntry
operator|.
name|getURL
argument_list|()
decl_stmt|;
if|if
condition|(
name|reposURL
operator|!=
literal|null
operator|&&
operator|!
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|reposURL
argument_list|,
name|url
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"Entry ''{0}'' has inconsistent repository root and url"
argument_list|,
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|Resource
name|tmpFile
init|=
operator|new
name|Resource
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|,
literal|"tmp/entries"
argument_list|)
decl_stmt|;
name|Writer
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//os = new OutputStreamWriter(SVNFileUtil.openFileForWriting(tmpFile), "UTF-8");
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|writeEntries
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot write entries file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myEntriesFile
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|tmpFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|tmpFile
argument_list|,
name|myEntriesFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|close
condition|)
block|{
name|closeEntries
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|Map
name|fetchEntries
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myEntriesFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Map
name|entries
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|BufferedReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|myEntriesFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
comment|//skip format line
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|int
name|entryNumber
init|=
literal|1
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
try|try
block|{
name|SVNEntry
name|entry
init|=
name|readEntry
argument_list|(
name|reader
argument_list|,
name|entryNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
break|break;
block|}
name|entries
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Error at entry {0} in entries file for ''{1}'':"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
name|entryNumber
argument_list|)
block|,
name|getRoot
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
operator|++
name|entryNumber
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot read entries file ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|myEntriesFile
block|,
name|e
operator|.
name|getMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|defaultEntry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultEntry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"Missing default entry"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|Map
name|defaultEntryAttrs
init|=
name|defaultEntry
operator|.
name|asMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_REVISION
argument_list|,
literal|"Default entry has no revision number"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"Default entry is missing URL"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|entriesIter
init|=
name|entries
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|entriesIter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entriesIter
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Map
name|entryAttributes
init|=
name|entry
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|SVNNodeKind
operator|.
name|parseKind
argument_list|(
operator|(
name|String
operator|)
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
operator|==
literal|null
operator|||
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|<
literal|0
condition|)
block|{
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|rootURL
init|=
operator|(
name|String
operator|)
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|rootURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|,
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|schedule
init|=
operator|(
name|String
operator|)
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|||
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|)
condition|)
block|{
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|,
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|,
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|entries
return|;
block|}
specifier|protected
name|SVNEntry
name|readEntry
parameter_list|(
name|BufferedReader
name|reader
parameter_list|,
name|int
name|entryNumber
parameter_list|)
throws|throws
name|IOException
throws|,
name|SVNException
block|{
name|String
name|line
init|=
name|reader
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
operator|&&
name|entryNumber
operator|>
literal|1
condition|)
block|{
return|return
literal|null
return|;
block|}
name|String
name|name
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
name|name
operator|=
name|name
operator|!=
literal|null
condition|?
name|name
else|:
name|getThisDirName
argument_list|()
expr_stmt|;
name|Map
name|entryAttrs
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|NAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|SVNEntry
name|entry
init|=
operator|new
name|SVNEntry
argument_list|(
name|entryAttrs
argument_list|,
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|entry
operator|.
name|setDepth
argument_list|(
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|String
name|kind
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
literal|null
condition|)
block|{
name|SVNNodeKind
name|parsedKind
init|=
name|SVNNodeKind
operator|.
name|parseKind
argument_list|(
name|kind
argument_list|)
decl_stmt|;
if|if
condition|(
name|parsedKind
operator|!=
name|SVNNodeKind
operator|.
name|UNKNOWN
operator|&&
name|parsedKind
operator|!=
name|SVNNodeKind
operator|.
name|NONE
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|kind
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|NODE_UNKNOWN_KIND
argument_list|,
literal|"Entry ''{0}'' has invalid node kind"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|SVNNodeKind
operator|.
name|NONE
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|revision
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|revision
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|url
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|reposRoot
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|reposRoot
operator|!=
literal|null
operator|&&
name|url
operator|!=
literal|null
operator|&&
operator|!
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|reposRoot
argument_list|,
name|url
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Entry for ''{0}'' has invalid repository root"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|reposRoot
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|,
name|reposRoot
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|schedule
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedule
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|||
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|||
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|schedule
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_ATTRIBUTE_INVALID
argument_list|,
literal|"Entry ''{0}'' has invalid ''{1}'' value"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|name
block|,
name|SVNProperty
operator|.
name|SCHEDULE
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|timestamp
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|timestamp
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|,
name|timestamp
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|checksum
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|checksum
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CHECKSUM
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|committedDate
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|committedDate
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_DATE
argument_list|,
name|committedDate
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|committedRevision
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|committedRevision
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_REVISION
argument_list|,
name|committedRevision
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|committedAuthor
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|committedAuthor
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|LAST_AUTHOR
argument_list|,
name|committedAuthor
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|boolean
name|hasProps
init|=
name|parseBoolean
argument_list|(
name|line
argument_list|,
name|ATTRIBUTE_HAS_PROPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasProps
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROPS
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|hasProps
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|boolean
name|hasPropMods
init|=
name|parseBoolean
argument_list|(
name|line
argument_list|,
name|ATTRIBUTE_HAS_PROP_MODS
argument_list|)
decl_stmt|;
if|if
condition|(
name|hasPropMods
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROP_MODS
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|hasPropMods
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|cachablePropsStr
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|cachablePropsStr
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|cachableProps
init|=
name|fromString
argument_list|(
name|cachablePropsStr
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|,
name|cachableProps
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|presentPropsStr
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|presentPropsStr
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|presentProps
init|=
name|fromString
argument_list|(
name|presentPropsStr
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|PRESENT_PROPS
argument_list|,
name|presentProps
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|prejFile
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|prejFile
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|PROP_REJECT_FILE
argument_list|,
name|prejFile
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|conflictOldFile
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictOldFile
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_OLD
argument_list|,
name|conflictOldFile
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|conflictNewFile
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictNewFile
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_NEW
argument_list|,
name|conflictNewFile
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|conflictWorkFile
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflictWorkFile
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_WRK
argument_list|,
name|conflictWorkFile
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|boolean
name|isCopied
init|=
name|parseBoolean
argument_list|(
name|line
argument_list|,
name|ATTRIBUTE_COPIED
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCopied
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|isCopied
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|copyfromURL
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyfromURL
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_URL
argument_list|,
name|copyfromURL
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|copyfromRevision
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|copyfromRevision
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_REVISION
argument_list|,
name|copyfromRevision
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|boolean
name|isDeleted
init|=
name|parseBoolean
argument_list|(
name|line
argument_list|,
name|ATTRIBUTE_DELETED
argument_list|)
decl_stmt|;
if|if
condition|(
name|isDeleted
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|isDeleted
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|boolean
name|isAbsent
init|=
name|parseBoolean
argument_list|(
name|line
argument_list|,
name|ATTRIBUTE_ABSENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAbsent
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|ABSENT
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|isAbsent
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|boolean
name|isIncomplete
init|=
name|parseBoolean
argument_list|(
name|line
argument_list|,
name|ATTRIBUTE_INCOMPLETE
argument_list|)
decl_stmt|;
if|if
condition|(
name|isIncomplete
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|INCOMPLETE
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|isIncomplete
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|uuid
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|,
name|uuid
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|lockToken
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockToken
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|LOCK_TOKEN
argument_list|,
name|lockToken
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|lockOwner
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockOwner
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|LOCK_OWNER
argument_list|,
name|lockOwner
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|lockComment
init|=
name|parseString
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockComment
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|LOCK_COMMENT
argument_list|,
name|lockComment
argument_list|)
expr_stmt|;
block|}
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|isEntryFinished
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
name|String
name|lockCreationDate
init|=
name|parseValue
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockCreationDate
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|LOCK_CREATION_DATE
argument_list|,
name|lockCreationDate
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|readExtraOptions
argument_list|(
name|reader
argument_list|,
name|entryAttrs
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
do|do
block|{
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Missing entry terminator"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\f'
condition|)
block|{
break|break;
block|}
block|}
do|while
condition|(
name|line
operator|!=
literal|null
condition|)
do|;
return|return
name|entry
return|;
block|}
specifier|protected
name|boolean
name|isEntryFinished
parameter_list|(
name|String
name|line
parameter_list|)
block|{
return|return
name|line
operator|!=
literal|null
operator|&&
name|line
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|line
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\f'
return|;
block|}
specifier|protected
name|boolean
name|parseBoolean
parameter_list|(
name|String
name|line
parameter_list|,
name|String
name|field
parameter_list|)
throws|throws
name|SVNException
block|{
name|line
operator|=
name|parseValue
argument_list|(
name|line
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|equals
argument_list|(
name|field
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Invalid value for field ''{0}''"
argument_list|,
name|field
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|String
name|parseString
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Unexpected end of entry"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|fromIndex
init|=
literal|0
decl_stmt|;
name|int
name|ind
init|=
operator|-
literal|1
decl_stmt|;
name|StringBuffer
name|buffer
init|=
literal|null
decl_stmt|;
name|String
name|escapedString
init|=
literal|null
decl_stmt|;
while|while
condition|(
operator|(
name|ind
operator|=
name|line
operator|.
name|indexOf
argument_list|(
literal|'\\'
argument_list|,
name|fromIndex
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|line
operator|.
name|length
argument_list|()
operator|<
name|ind
operator|+
literal|4
operator|||
name|line
operator|.
name|charAt
argument_list|(
name|ind
operator|+
literal|1
argument_list|)
operator|!=
literal|'x'
operator|||
operator|!
name|SVNEncodingUtil
operator|.
name|isHexDigit
argument_list|(
name|line
operator|.
name|charAt
argument_list|(
name|ind
operator|+
literal|2
argument_list|)
argument_list|)
operator|||
operator|!
name|SVNEncodingUtil
operator|.
name|isHexDigit
argument_list|(
name|line
operator|.
name|charAt
argument_list|(
name|ind
operator|+
literal|3
argument_list|)
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Invalid escape sequence"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|==
literal|null
condition|)
block|{
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
block|}
name|escapedString
operator|=
name|line
operator|.
name|substring
argument_list|(
name|ind
operator|+
literal|2
argument_list|,
name|ind
operator|+
literal|4
argument_list|)
expr_stmt|;
name|int
name|escapedByte
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|escapedString
argument_list|,
literal|16
argument_list|)
decl_stmt|;
if|if
condition|(
name|ind
operator|>
name|fromIndex
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|fromIndex
argument_list|,
name|ind
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
name|escapedByte
operator|&
literal|0xFF
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
name|escapedByte
operator|&
literal|0xFF
operator|)
argument_list|)
expr_stmt|;
block|}
name|fromIndex
operator|=
name|ind
operator|+
literal|4
expr_stmt|;
block|}
if|if
condition|(
name|buffer
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fromIndex
operator|<
name|line
operator|.
name|length
argument_list|()
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
name|line
operator|.
name|substring
argument_list|(
name|fromIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
return|return
name|line
return|;
block|}
specifier|protected
name|String
name|parseValue
parameter_list|(
name|String
name|line
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|line
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Unexpected end of entry"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|line
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|line
return|;
block|}
specifier|public
name|String
name|getThisDirName
parameter_list|()
block|{
return|return
name|THIS_DIR
return|;
block|}
specifier|protected
name|boolean
name|readExtraOptions
parameter_list|(
name|BufferedReader
name|reader
parameter_list|,
name|Map
name|entryAttrs
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
block|{
return|return
literal|false
return|;
block|}
specifier|protected
name|void
name|writeEntries
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
throws|,
name|SVNException
block|{
name|SVNEntry
name|rootEntry
init|=
operator|(
name|SVNEntry
operator|)
name|myEntries
operator|.
name|get
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|getFormatVersion
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
name|writeEntry
argument_list|(
name|writer
argument_list|,
name|getThisDirName
argument_list|()
argument_list|,
name|rootEntry
operator|.
name|asMap
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|List
name|names
init|=
operator|new
name|ArrayList
argument_list|(
name|myEntries
operator|.
name|keySet
argument_list|()
argument_list|)
decl_stmt|;
name|Collections
operator|.
name|sort
argument_list|(
name|names
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|names
operator|.
name|iterator
argument_list|()
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|myEntries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|Map
name|entryAttributes
init|=
name|entry
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|Map
name|defaultEntryAttrs
init|=
name|rootEntry
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|SVNNodeKind
operator|.
name|parseKind
argument_list|(
operator|(
name|String
operator|)
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
operator|==
literal|null
operator|||
name|Long
operator|.
name|parseLong
argument_list|(
operator|(
name|String
operator|)
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
argument_list|,
literal|10
argument_list|)
operator|<
literal|0
condition|)
block|{
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|rootURL
init|=
operator|(
name|String
operator|)
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
decl_stmt|;
name|String
name|url
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|rootURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|,
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|)
operator|==
literal|null
condition|)
block|{
name|String
name|schedule
init|=
operator|(
name|String
operator|)
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|||
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|)
condition|)
block|{
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|,
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entryAttributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
operator|==
literal|null
condition|)
block|{
name|entryAttributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|,
name|defaultEntryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|writeEntry
argument_list|(
name|writer
argument_list|,
name|name
argument_list|,
name|entryAttributes
argument_list|,
name|rootEntry
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeEntry
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|name
parameter_list|,
name|Map
name|entry
parameter_list|,
name|Map
name|rootEntry
parameter_list|)
throws|throws
name|IOException
throws|,
name|SVNException
block|{
name|boolean
name|isThisDir
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|isSubDir
init|=
operator|!
name|isThisDir
operator|&&
name|SVNProperty
operator|.
name|KIND_DIR
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|emptyFields
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|writeString
argument_list|(
name|writer
argument_list|,
name|name
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|kind
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeValue
argument_list|(
name|writer
argument_list|,
name|kind
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|revision
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isThisDir
condition|)
block|{
name|revision
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isSubDir
condition|)
block|{
name|revision
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
expr_stmt|;
if|if
condition|(
name|revision
operator|!=
literal|null
operator|&&
name|revision
operator|.
name|equals
argument_list|(
name|rootEntry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|)
argument_list|)
condition|)
block|{
name|revision
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|writeRevision
argument_list|(
name|writer
argument_list|,
name|revision
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|url
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isThisDir
condition|)
block|{
name|url
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isSubDir
condition|)
block|{
name|url
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
expr_stmt|;
name|String
name|expectedURL
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|rootEntry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|URL
argument_list|)
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
operator|&&
name|url
operator|.
name|equals
argument_list|(
name|expectedURL
argument_list|)
condition|)
block|{
name|url
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|url
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|root
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isThisDir
condition|)
block|{
name|root
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|isSubDir
condition|)
block|{
name|String
name|thisDirRoot
init|=
operator|(
name|String
operator|)
name|rootEntry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
decl_stmt|;
name|root
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|REPOS
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
name|root
operator|.
name|equals
argument_list|(
name|thisDirRoot
argument_list|)
condition|)
block|{
name|root
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|root
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|schedule
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedule
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|&&
operator|!
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|&&
operator|!
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|)
condition|)
block|{
name|schedule
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|writeValue
argument_list|(
name|writer
argument_list|,
name|schedule
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|textTime
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeTime
argument_list|(
name|writer
argument_list|,
name|textTime
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|checksum
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CHECKSUM
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeValue
argument_list|(
name|writer
argument_list|,
name|checksum
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|committedDate
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_DATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeTime
argument_list|(
name|writer
argument_list|,
name|committedDate
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|committedRevision
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_REVISION
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeRevision
argument_list|(
name|writer
argument_list|,
name|committedRevision
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|committedAuthor
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|LAST_AUTHOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|committedAuthor
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|hasProps
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROPS
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|booleanValue
argument_list|(
name|hasProps
argument_list|)
condition|)
block|{
name|writeValue
argument_list|(
name|writer
argument_list|,
name|ATTRIBUTE_HAS_PROPS
argument_list|,
name|emptyFields
argument_list|)
expr_stmt|;
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|hasPropMods
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROP_MODS
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|booleanValue
argument_list|(
name|hasPropMods
argument_list|)
condition|)
block|{
name|writeValue
argument_list|(
name|writer
argument_list|,
name|ATTRIBUTE_HAS_PROP_MODS
argument_list|,
name|emptyFields
argument_list|)
expr_stmt|;
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|cachableProps
init|=
name|asString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isThisDir
condition|)
block|{
name|String
name|thisDirCachableProps
init|=
name|asString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|rootEntry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisDirCachableProps
operator|!=
literal|null
operator|&&
name|cachableProps
operator|!=
literal|null
operator|&&
name|thisDirCachableProps
operator|.
name|equals
argument_list|(
name|cachableProps
argument_list|)
condition|)
block|{
name|cachableProps
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|writeValue
argument_list|(
name|writer
argument_list|,
name|cachableProps
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|presentProps
init|=
name|asString
argument_list|(
operator|(
name|String
index|[]
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|PRESENT_PROPS
argument_list|)
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeValue
argument_list|(
name|writer
argument_list|,
name|presentProps
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|propRejectFile
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|PROP_REJECT_FILE
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|propRejectFile
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|conflictOldFile
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_OLD
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|conflictOldFile
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|conflictNewFile
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_NEW
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|conflictNewFile
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|conflictWrkFile
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_WRK
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|conflictWrkFile
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|copiedAttr
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|booleanValue
argument_list|(
name|copiedAttr
argument_list|)
condition|)
block|{
name|writeValue
argument_list|(
name|writer
argument_list|,
name|ATTRIBUTE_COPIED
argument_list|,
name|emptyFields
argument_list|)
expr_stmt|;
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|copyfromURL
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_URL
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|copyfromURL
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|copyfromRevision
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_REVISION
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeRevision
argument_list|(
name|writer
argument_list|,
name|copyfromRevision
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|deletedAttr
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|booleanValue
argument_list|(
name|deletedAttr
argument_list|)
condition|)
block|{
name|writeValue
argument_list|(
name|writer
argument_list|,
name|ATTRIBUTE_DELETED
argument_list|,
name|emptyFields
argument_list|)
expr_stmt|;
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|absentAttr
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|ABSENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|booleanValue
argument_list|(
name|absentAttr
argument_list|)
condition|)
block|{
name|writeValue
argument_list|(
name|writer
argument_list|,
name|ATTRIBUTE_ABSENT
argument_list|,
name|emptyFields
argument_list|)
expr_stmt|;
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|incompleteAttr
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|INCOMPLETE
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|booleanValue
argument_list|(
name|incompleteAttr
argument_list|)
condition|)
block|{
name|writeValue
argument_list|(
name|writer
argument_list|,
name|ATTRIBUTE_INCOMPLETE
argument_list|,
name|emptyFields
argument_list|)
expr_stmt|;
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|uuid
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isThisDir
condition|)
block|{
name|String
name|thisDirUUID
init|=
operator|(
name|String
operator|)
name|rootEntry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|UUID
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisDirUUID
operator|!=
literal|null
operator|&&
name|uuid
operator|!=
literal|null
operator|&&
name|thisDirUUID
operator|.
name|equals
argument_list|(
name|uuid
argument_list|)
condition|)
block|{
name|uuid
operator|=
literal|null
expr_stmt|;
block|}
block|}
if|if
condition|(
name|writeValue
argument_list|(
name|writer
argument_list|,
name|uuid
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|lockToken
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|LOCK_TOKEN
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|lockToken
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|lockOwner
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|LOCK_OWNER
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|lockOwner
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|lockComment
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|LOCK_COMMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeString
argument_list|(
name|writer
argument_list|,
name|lockComment
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|String
name|lockCreationDate
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|LOCK_CREATION_DATE
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeTime
argument_list|(
name|writer
argument_list|,
name|lockCreationDate
argument_list|,
name|emptyFields
argument_list|)
condition|)
block|{
name|emptyFields
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
operator|++
name|emptyFields
expr_stmt|;
block|}
name|writeExtraOptions
argument_list|(
name|writer
argument_list|,
name|name
argument_list|,
name|entry
argument_list|,
name|emptyFields
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"\f\n"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|int
name|writeExtraOptions
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|entryName
parameter_list|,
name|Map
name|entryAttrs
parameter_list|,
name|int
name|emptyFields
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
block|{
return|return
name|emptyFields
return|;
block|}
specifier|protected
name|boolean
name|writeString
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|str
parameter_list|,
name|int
name|emptyFields
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|str
operator|!=
literal|null
operator|&&
name|str
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|emptyFields
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|ch
init|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNEncodingUtil
operator|.
name|isASCIIControlChar
argument_list|(
name|ch
argument_list|)
operator|||
name|ch
operator|==
literal|'\\'
condition|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"\\x"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|SVNFormatUtil
operator|.
name|getHexNumberFromByte
argument_list|(
operator|(
name|byte
operator|)
name|ch
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|writer
operator|.
name|write
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|writeValue
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|val
parameter_list|,
name|int
name|emptyFields
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
name|val
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|emptyFields
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|writeTime
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|val
parameter_list|,
name|int
name|emptyFields
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|val
operator|!=
literal|null
operator|&&
name|val
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|long
name|time
init|=
name|SVNDate
operator|.
name|parseDateAsMilliseconds
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
name|time
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|emptyFields
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|boolean
name|writeRevision
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|rev
parameter_list|,
name|int
name|emptyFields
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|revValue
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|revValue
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|nfe
parameter_list|)
block|{
comment|//
block|}
if|if
condition|(
name|rev
operator|!=
literal|null
operator|&&
name|rev
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|revValue
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|emptyFields
condition|;
name|i
operator|++
control|)
block|{
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|write
argument_list|(
name|rev
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasPropModifications
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|Map
name|entryAttrs
init|=
name|entry
operator|.
name|asMap
argument_list|()
decl_stmt|;
return|return
name|SVNProperty
operator|.
name|booleanValue
argument_list|(
operator|(
name|String
operator|)
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROP_MODS
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|Map
name|entryAttrs
init|=
name|entry
operator|.
name|asMap
argument_list|()
decl_stmt|;
return|return
name|SVNProperty
operator|.
name|booleanValue
argument_list|(
operator|(
name|String
operator|)
name|entryAttrs
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROPS
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|lock
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|lock
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|lock
parameter_list|(
name|boolean
name|stealLock
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|isVersioned
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|stealLock
operator|&&
name|myLockFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|boolean
name|created
init|=
literal|false
decl_stmt|;
try|try
block|{
comment|// Stian was here.
name|created
operator|=
name|SVNFileUtil
operator|.
name|createNewFile
argument_list|(
name|myLockFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorCode
name|code
init|=
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"denied"
argument_list|)
operator|>=
literal|0
condition|?
name|SVNErrorCode
operator|.
name|WC_LOCKED
else|:
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
decl_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|code
argument_list|,
literal|"Cannot lock working copy ''{0}'': {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|getRoot
argument_list|()
block|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|created
condition|)
block|{
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|created
return|;
block|}
if|if
condition|(
name|myLockFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Working copy ''{0}'' locked; try performing ''cleanup''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Cannot lock working copy ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|SVNAdminArea
name|createVersionedDirectory
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|rootURL
parameter_list|,
name|String
name|uuid
parameter_list|,
name|long
name|revNumber
parameter_list|,
name|boolean
name|createMyself
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|dir
operator|=
name|createMyself
condition|?
name|getRoot
argument_list|()
else|:
name|dir
expr_stmt|;
name|dir
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|adminDir
init|=
name|createMyself
condition|?
name|getAdminDirectory
argument_list|()
else|:
operator|new
name|Resource
argument_list|(
name|dir
argument_list|,
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
decl_stmt|;
name|adminDir
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|SVNFileUtil
operator|.
name|setHidden
argument_list|(
name|adminDir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// lock dir.
name|File
name|lockFile
init|=
name|createMyself
condition|?
name|myLockFile
else|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"lock"
argument_list|)
decl_stmt|;
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|lockFile
argument_list|)
expr_stmt|;
name|File
index|[]
name|tmp
init|=
block|{
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"tmp"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"tmp"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"props"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"props"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"prop-base"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"prop-base"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"text-base"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"tmp"
operator|+
name|Resource
operator|.
name|separatorChar
operator|+
literal|"text-base"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"props"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"props"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"prop-base"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"prop-base"
argument_list|)
block|,
name|createMyself
operator|?
name|getAdminFile
argument_list|(
literal|"text-base"
argument_list|)
operator|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"text-base"
argument_list|)
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|tmp
index|[
name|i
index|]
operator|.
name|mkdir
argument_list|()
expr_stmt|;
block|}
comment|// for backward compatibility
name|createFormatFile
argument_list|(
name|createMyself
condition|?
literal|null
else|:
operator|new
name|Resource
argument_list|(
name|adminDir
argument_list|,
literal|"format"
argument_list|)
argument_list|,
name|createMyself
argument_list|)
expr_stmt|;
name|SVNAdminArea
name|adminArea
init|=
name|createMyself
condition|?
name|this
else|:
name|createAdminAreaForDir
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|adminArea
operator|.
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SVNEntry
name|rootEntry
init|=
name|adminArea
operator|.
name|getEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootEntry
operator|==
literal|null
condition|)
block|{
name|rootEntry
operator|=
name|adminArea
operator|.
name|addEntry
argument_list|(
name|adminArea
operator|.
name|getThisDirName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|rootEntry
operator|.
name|setURL
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
name|rootEntry
operator|.
name|setRepositoryRoot
argument_list|(
name|rootURL
argument_list|)
expr_stmt|;
name|rootEntry
operator|.
name|setRevision
argument_list|(
name|revNumber
argument_list|)
expr_stmt|;
name|rootEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
name|rootEntry
operator|.
name|setDepth
argument_list|(
name|depth
argument_list|)
expr_stmt|;
if|if
condition|(
name|uuid
operator|!=
literal|null
condition|)
block|{
name|rootEntry
operator|.
name|setUUID
argument_list|(
name|uuid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|revNumber
operator|>
literal|0
condition|)
block|{
name|rootEntry
operator|.
name|setIncomplete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|rootEntry
operator|.
name|setCachableProperties
argument_list|(
name|ourCachableProperties
argument_list|)
expr_stmt|;
try|try
block|{
name|adminArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Error writing entries file for ''{0}''"
argument_list|,
name|dir
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
comment|// unlock dir.
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|lockFile
argument_list|)
expr_stmt|;
return|return
name|adminArea
return|;
block|}
specifier|protected
name|SVNVersionedProperties
name|formatBaseProperties
parameter_list|(
name|SVNProperties
name|srcProperties
parameter_list|)
block|{
name|SVNProperties
name|props
init|=
operator|new
name|SVNProperties
argument_list|(
name|srcProperties
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNProperties13
argument_list|(
name|props
argument_list|)
return|;
block|}
specifier|protected
name|SVNVersionedProperties
name|formatProperties
parameter_list|(
name|SVNEntry
name|entry
parameter_list|,
name|SVNProperties
name|srcProperties
parameter_list|)
block|{
name|SVNProperties
name|props
init|=
operator|new
name|SVNProperties
argument_list|(
name|srcProperties
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNProperties14
argument_list|(
name|props
argument_list|,
name|this
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
block|{
specifier|protected
name|SVNProperties
name|loadProperties
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|getProperties
argument_list|()
return|;
block|}
block|}
return|;
block|}
specifier|private
name|void
name|makeKillMe
parameter_list|(
name|boolean
name|killAdminOnly
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|killMe
init|=
name|getAdminFile
argument_list|(
name|ADM_KILLME
argument_list|)
decl_stmt|;
if|if
condition|(
name|killMe
operator|.
name|getParentFile
argument_list|()
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|createFile
argument_list|(
name|killMe
argument_list|,
name|killAdminOnly
condition|?
name|KILL_ADM_ONLY
else|:
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|postCommit
parameter_list|(
name|String
name|fileName
parameter_list|,
name|long
name|revisionNumber
parameter_list|,
name|boolean
name|implicit
parameter_list|,
name|boolean
name|rerun
parameter_list|,
name|SVNErrorCode
name|errorCode
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
operator|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
operator|&&
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|FILE
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Log command for directory ''{0}'' is mislocated"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|implicit
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
if|if
condition|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setRevision
argument_list|(
name|revisionNumber
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|DIR
argument_list|)
expr_stmt|;
if|if
condition|(
name|rerun
condition|)
block|{
name|File
name|killMe
init|=
name|getAdminFile
argument_list|(
name|ADM_KILLME
argument_list|)
decl_stmt|;
if|if
condition|(
name|killMe
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
name|makeKillMe
argument_list|(
name|entry
operator|.
name|isKeepLocal
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|removeFromRevisionControl
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|SVNEntry
name|parentEntry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|revisionNumber
operator|>
name|parentEntry
operator|.
name|getRevision
argument_list|()
condition|)
block|{
name|SVNEntry
name|fileEntry
init|=
name|addEntry
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|fileEntry
operator|.
name|setKind
argument_list|(
name|SVNNodeKind
operator|.
name|FILE
argument_list|)
expr_stmt|;
name|fileEntry
operator|.
name|setDeleted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fileEntry
operator|.
name|setRevision
argument_list|(
name|revisionNumber
argument_list|)
expr_stmt|;
block|}
block|}
return|return;
block|}
if|if
condition|(
operator|!
name|implicit
operator|&&
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|&&
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|ents
init|=
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|currentEntry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|currentEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|currentEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
operator|||
name|currentEntry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|removeFromRevisionControl
argument_list|(
name|currentEntry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|fileLength
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|File
name|workingFile
init|=
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|fileLength
operator|=
name|workingFile
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
name|long
name|textTime
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|implicit
operator|&&
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|File
name|tmpFile
init|=
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|boolean
name|modified
init|=
literal|false
decl_stmt|;
name|File
name|workingFile
init|=
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|long
name|tmpTimestamp
init|=
name|tmpFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
name|long
name|wkTimestamp
init|=
name|workingFile
operator|.
name|lastModified
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpTimestamp
operator|!=
name|wkTimestamp
condition|)
block|{
comment|// check if wc file is not modified
name|File
name|tmpFile2
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|tmpFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|fileName
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|tmpFile2Path
init|=
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpFile2
argument_list|)
decl_stmt|;
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|this
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|,
name|tmpFile2Path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|modified
operator|=
operator|!
name|SVNFileUtil
operator|.
name|compareFiles
argument_list|(
name|tmpFile
argument_list|,
name|tmpFile2
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Error comparing ''{0}'' and ''{1}''"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|workingFile
block|,
name|tmpFile
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmpFile2
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
name|textTime
operator|=
name|modified
condition|?
name|tmpTimestamp
else|:
name|wkTimestamp
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|implicit
operator|&&
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|getBasePropertiesFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|boolean
name|setReadWrite
init|=
literal|false
decl_stmt|;
name|boolean
name|setNotExecutable
init|=
literal|false
decl_stmt|;
name|SVNVersionedProperties
name|baseProps
init|=
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|wcProps
init|=
name|getProperties
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
comment|//TODO: to work properly we must create a tmp working props file
comment|//instead of tmp base props one
name|File
name|tmpPropsFile
init|=
name|getPropertiesFile
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|wcPropsFile
init|=
name|getPropertiesFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|basePropertiesFile
init|=
name|getBasePropertiesFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNFileType
name|tmpPropsType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|tmpPropsFile
argument_list|)
decl_stmt|;
comment|// tmp may be missing when there were no prop change at all!
if|if
condition|(
name|tmpPropsType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|SVNVersionedProperties
name|propDiff
init|=
name|baseProps
operator|.
name|compareTo
argument_list|(
name|wcProps
argument_list|)
decl_stmt|;
name|setReadWrite
operator|=
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|containsProperty
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|&&
name|propDiff
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|==
literal|null
expr_stmt|;
name|setNotExecutable
operator|=
name|propDiff
operator|!=
literal|null
operator|&&
name|propDiff
operator|.
name|containsProperty
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|&&
name|propDiff
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|==
literal|null
expr_stmt|;
block|}
try|try
block|{
if|if
condition|(
operator|!
name|tmpPropsFile
operator|.
name|exists
argument_list|()
operator|||
name|tmpPropsFile
operator|.
name|length
argument_list|()
operator|<=
literal|4
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|basePropertiesFile
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|tmpPropsFile
argument_list|,
name|basePropertiesFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|basePropertiesFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpPropsFile
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
operator|&&
operator|!
name|implicit
condition|)
block|{
name|File
name|tmpFile
init|=
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|File
name|baseFile
init|=
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|wcFile
init|=
name|getFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|File
name|tmpFile2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tmpFile2
operator|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|tmpFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
name|fileName
argument_list|,
literal|".tmp"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|boolean
name|overwritten
init|=
literal|false
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
operator|||
operator|!
name|special
condition|)
block|{
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|this
argument_list|,
name|fileName
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpFile
argument_list|)
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpFile2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|this
argument_list|,
name|fileName
argument_list|,
name|fileName
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|tmpFile2
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|SVNFileUtil
operator|.
name|compareFiles
argument_list|(
name|tmpFile2
argument_list|,
name|wcFile
argument_list|,
literal|null
argument_list|)
condition|)
block|{
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|tmpFile2
argument_list|,
name|wcFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|boolean
name|needsReadonly
init|=
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getLockToken
argument_list|()
operator|==
literal|null
decl_stmt|;
name|boolean
name|needsExecutable
init|=
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|needsReadonly
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|wcFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|needsExecutable
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|wcFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|tmpFile
argument_list|,
name|baseFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|setReadWrite
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|wcFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|setNotExecutable
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|wcFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|overwritten
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|overwritten
condition|)
block|{
name|textTime
operator|=
name|wcFile
operator|.
name|lastModified
argument_list|()
expr_stmt|;
name|fileLength
operator|=
name|wcFile
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Error replacing text-base of ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|tmpFile2
operator|.
name|delete
argument_list|()
expr_stmt|;
name|tmpFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
comment|// update entry
name|Map
name|entryAttrs
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|REVISION
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
name|revisionNumber
argument_list|)
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|KIND
argument_list|,
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|?
name|SVNProperty
operator|.
name|KIND_DIR
else|:
name|SVNProperty
operator|.
name|KIND_FILE
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|implicit
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|textTime
operator|!=
literal|0
operator|&&
operator|!
name|implicit
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|textTime
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_NEW
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_OLD
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|CONFLICT_WRK
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|PROP_REJECT_FILE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_REVISION
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_URL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|HAS_PROP_MODS
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|fileLength
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|modifyEntry
argument_list|(
name|fileName
argument_list|,
name|entryAttrs
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Error modifying entry of ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|wcPropsFile
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
return|return;
block|}
comment|// update entry in parent.
name|File
name|dirFile
init|=
name|getRoot
argument_list|()
decl_stmt|;
if|if
condition|(
name|getWCAccess
argument_list|()
operator|.
name|isWCRoot
argument_list|(
name|getRoot
argument_list|()
argument_list|)
condition|)
block|{
return|return;
block|}
name|boolean
name|unassociated
init|=
literal|false
decl_stmt|;
name|SVNAdminArea
name|parentArea
init|=
literal|null
decl_stmt|;
try|try
block|{
name|parentArea
operator|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|dirFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
condition|)
block|{
name|parentArea
operator|=
name|getWCAccess
argument_list|()
operator|.
name|open
argument_list|(
name|dirFile
operator|.
name|getParentFile
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|unassociated
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|svne
throw|;
block|}
block|}
name|SVNEntry
name|entryInParent
init|=
name|parentArea
operator|.
name|getEntry
argument_list|(
name|dirFile
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryInParent
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|implicit
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPIED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_REVISION
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|COPYFROM_URL
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|DELETED
argument_list|,
name|SVNProperty
operator|.
name|toString
argument_list|(
literal|false
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|parentArea
operator|.
name|modifyEntry
argument_list|(
name|entryInParent
operator|.
name|getName
argument_list|()
argument_list|,
name|entryAttrs
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|errorCode
argument_list|,
literal|"Error modifying entry of ''{0}''"
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|svne
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|parentArea
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|unassociated
condition|)
block|{
name|getWCAccess
argument_list|()
operator|.
name|closeAdminArea
argument_list|(
name|dirFile
operator|.
name|getParentFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|unlock
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myLockFile
operator|.
name|exists
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|// only if there are not locks or killme files.
name|boolean
name|killMe
init|=
name|getAdminFile
argument_list|(
name|ADM_KILLME
argument_list|)
operator|.
name|exists
argument_list|()
decl_stmt|;
if|if
condition|(
name|killMe
condition|)
block|{
return|return
literal|false
return|;
block|}
name|File
index|[]
name|logs
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|logs
operator|!=
literal|null
operator|&&
name|i
operator|<
name|logs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|log
init|=
name|logs
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
literal|"log"
operator|.
name|equals
argument_list|(
name|log
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|log
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"log."
argument_list|)
condition|)
block|{
if|if
condition|(
name|log
operator|.
name|isFile
argument_list|()
operator|&&
name|log
operator|.
name|exists
argument_list|()
condition|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFiner
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
literal|"unlock: log file: '"
operator|+
name|log
operator|.
name|getName
argument_list|()
operator|+
literal|"', listed, and exists."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFiner
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
literal|"unlock: log file: '"
operator|+
name|log
operator|.
name|getName
argument_list|()
operator|+
literal|"', listed, but does not exist."
argument_list|)
expr_stmt|;
block|}
block|}
name|boolean
name|deleted
init|=
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|myLockFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Failed to unlock working copy ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|deleted
return|;
block|}
specifier|public
name|boolean
name|isVersioned
parameter_list|()
block|{
if|if
condition|(
name|getAdminDirectory
argument_list|()
operator|.
name|isDirectory
argument_list|()
operator|&&
name|myEntriesFile
operator|.
name|canRead
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|getEntry
argument_list|(
literal|""
argument_list|,
literal|false
argument_list|)
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|isLocked
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myWasLocked
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|myLockFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LOCKED
argument_list|,
literal|"Lock file ''{0}'' is not a regular file"
argument_list|,
name|myLockFile
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasTreeConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|SVNTreeConflictDescription
name|getTreeConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|addTreeConflict
parameter_list|(
name|SVNTreeConflictDescription
name|conflict
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"This feature is not supported in version {0} of working copy format"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getFormatVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SVNTreeConflictDescription
name|deleteTreeConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"This feature is not supported in version {0} of working copy format"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getFormatVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setFileExternalLocation
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNURL
name|reposRootURL
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNSUPPORTED_FEATURE
argument_list|,
literal|"This feature is not supported in version {0} of working copy format"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getFormatVersion
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getFormatVersion
parameter_list|()
block|{
return|return
name|WC_FORMAT
return|;
block|}
specifier|protected
name|SVNAdminArea
name|createAdminAreaForDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
return|return
operator|new
name|SVNAdminArea14
argument_list|(
name|dir
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|isEntryPropertyApplicable
parameter_list|(
name|String
name|propName
parameter_list|)
block|{
return|return
name|propName
operator|!=
literal|null
operator|&&
operator|!
name|INAPPLICABLE_PROPERTIES
operator|.
name|contains
argument_list|(
name|propName
argument_list|)
return|;
block|}
block|}
end_class

end_unit

