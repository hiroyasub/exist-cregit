begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminArea
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNAdminAreaInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNTranslator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNVersionedProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
operator|.
name|SVNWCAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNWCUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|ISVNEditor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDeltaProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|diff
operator|.
name|SVNDiffWindow
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
class|class
name|SVNDiffEditor
implements|implements
name|ISVNEditor
block|{
specifier|private
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|private
name|boolean
name|myUseAncestry
decl_stmt|;
specifier|private
name|boolean
name|myIsReverseDiff
decl_stmt|;
specifier|private
name|boolean
name|myIsCompareToBase
decl_stmt|;
specifier|private
name|boolean
name|myIsRootOpen
decl_stmt|;
specifier|private
name|long
name|myTargetRevision
decl_stmt|;
specifier|private
name|SVNDirectoryInfo
name|myCurrentDirectory
decl_stmt|;
specifier|private
name|SVNFileInfo
name|myCurrentFile
decl_stmt|;
specifier|private
name|SVNDeltaProcessor
name|myDeltaProcessor
decl_stmt|;
specifier|private
name|SVNAdminAreaInfo
name|myAdminInfo
decl_stmt|;
specifier|private
name|SVNDepth
name|myDepth
decl_stmt|;
specifier|private
name|File
name|myTempDirectory
decl_stmt|;
specifier|private
name|AbstractDiffCallback
name|myDiffCallback
decl_stmt|;
specifier|private
name|Collection
name|myChangeLists
decl_stmt|;
specifier|private
name|String
name|myWCRootPath
decl_stmt|;
specifier|public
name|SVNDiffEditor
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|,
name|SVNAdminAreaInfo
name|info
parameter_list|,
name|AbstractDiffCallback
name|callback
parameter_list|,
name|boolean
name|useAncestry
parameter_list|,
name|boolean
name|reverseDiff
parameter_list|,
name|boolean
name|compareToBase
parameter_list|,
name|SVNDepth
name|depth
parameter_list|,
name|Collection
name|changeLists
parameter_list|)
block|{
name|myWCAccess
operator|=
name|wcAccess
expr_stmt|;
name|myAdminInfo
operator|=
name|info
expr_stmt|;
name|myUseAncestry
operator|=
name|useAncestry
expr_stmt|;
name|myIsReverseDiff
operator|=
name|reverseDiff
expr_stmt|;
name|myDepth
operator|=
name|depth
expr_stmt|;
name|myIsCompareToBase
operator|=
name|compareToBase
expr_stmt|;
name|myDiffCallback
operator|=
name|callback
expr_stmt|;
name|myChangeLists
operator|=
name|changeLists
operator|!=
literal|null
condition|?
name|changeLists
else|:
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
name|myDeltaProcessor
operator|=
operator|new
name|SVNDeltaProcessor
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|targetRevision
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myTargetRevision
operator|=
name|revision
expr_stmt|;
block|}
specifier|public
name|void
name|openRoot
parameter_list|(
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|myIsRootOpen
operator|=
literal|true
expr_stmt|;
name|myCurrentDirectory
operator|=
name|createDirInfo
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
name|myDepth
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|fullPath
init|=
operator|new
name|Resource
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getRoot
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|myWCAccess
operator|.
name|probeRetrieve
argument_list|(
name|fullPath
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|fullPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|myCurrentDirectory
operator|.
name|myComparedEntries
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|myIsCompareToBase
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|myIsReverseDiff
condition|)
block|{
name|File
name|baseFile
init|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNProperties
name|baseProps
init|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|name
argument_list|)
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|getDiffCallback
argument_list|()
operator|.
name|fileDeleted
argument_list|(
name|path
argument_list|,
name|baseFile
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
name|baseProps
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reportAddedFile
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNDirectoryInfo
name|info
init|=
name|createDirInfo
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
decl_stmt|;
name|reportAddedDir
argument_list|(
name|info
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reportAddedDir
parameter_list|(
name|SVNDirectoryInfo
name|info
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|info
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|SVNEntry
name|thisDirEntry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|myChangeLists
argument_list|,
name|thisDirEntry
argument_list|)
condition|)
block|{
name|SVNProperties
name|wcProps
decl_stmt|;
if|if
condition|(
name|myIsCompareToBase
condition|)
block|{
name|wcProps
operator|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wcProps
operator|=
name|dir
operator|.
name|getProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
name|SVNProperties
name|propDiff
init|=
name|computePropsDiff
argument_list|(
operator|new
name|SVNProperties
argument_list|()
argument_list|,
name|wcProps
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|propDiff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getDiffCallback
argument_list|()
operator|.
name|propertiesChanged
argument_list|(
name|info
operator|.
name|myPath
argument_list|,
literal|null
argument_list|,
name|propDiff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|entries
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|myIsCompareToBase
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|reportAddedFile
argument_list|(
name|info
argument_list|,
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|info
operator|.
name|myPath
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|myDepth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|FILES
argument_list|)
operator|>
literal|0
operator|||
name|info
operator|.
name|myDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|SVNDepth
name|depthBelowHere
init|=
name|info
operator|.
name|myDepth
decl_stmt|;
if|if
condition|(
name|depthBelowHere
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|depthBelowHere
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|SVNDirectoryInfo
name|childInfo
init|=
name|createDirInfo
argument_list|(
name|info
argument_list|,
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|info
operator|.
name|myPath
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|depthBelowHere
argument_list|)
decl_stmt|;
name|reportAddedDir
argument_list|(
name|childInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|reportAddedFile
parameter_list|(
name|SVNDirectoryInfo
name|info
parameter_list|,
name|String
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|myChangeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|entry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
if|if
condition|(
name|myIsCompareToBase
condition|)
block|{
return|return;
block|}
name|reportModifiedFile
argument_list|(
name|info
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return;
block|}
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|info
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|SVNProperties
name|wcProps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myIsCompareToBase
condition|)
block|{
name|wcProps
operator|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|name
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|wcProps
operator|=
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
name|String
name|mimeType
init|=
name|wcProps
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|SVNProperties
name|propDiff
init|=
name|computePropsDiff
argument_list|(
operator|new
name|SVNProperties
argument_list|()
argument_list|,
name|wcProps
argument_list|)
decl_stmt|;
name|File
name|sourceFile
decl_stmt|;
if|if
condition|(
name|myIsCompareToBase
condition|)
block|{
name|sourceFile
operator|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sourceFile
operator|=
name|detranslateFile
argument_list|(
name|dir
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
name|getDiffCallback
argument_list|()
operator|.
name|fileAdded
argument_list|(
name|path
argument_list|,
literal|null
argument_list|,
name|sourceFile
argument_list|,
literal|0
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
literal|null
argument_list|,
name|mimeType
argument_list|,
literal|null
argument_list|,
name|propDiff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|reportModifiedFile
parameter_list|(
name|SVNDirectoryInfo
name|dirInfo
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|dirInfo
operator|.
name|myPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|myChangeLists
argument_list|,
name|entry
argument_list|)
condition|)
block|{
return|return;
block|}
name|String
name|schedule
init|=
name|entry
operator|.
name|getSchedule
argument_list|()
decl_stmt|;
name|String
name|fileName
init|=
name|entry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getDiffCallback
argument_list|()
operator|.
name|isDiffCopiedAsAdded
argument_list|()
operator|&&
name|entry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|schedule
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myUseAncestry
operator|&&
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|schedule
operator|=
literal|null
expr_stmt|;
block|}
name|SVNProperties
name|propDiff
init|=
literal|null
decl_stmt|;
name|SVNProperties
name|baseProps
init|=
literal|null
decl_stmt|;
name|File
name|baseFile
init|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNFileType
operator|.
name|getType
argument_list|(
name|baseFile
argument_list|)
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|baseFile
operator|=
name|dir
operator|.
name|getFile
argument_list|(
name|SVNAdminUtil
operator|.
name|getTextRevertPath
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
if|if
condition|(
name|getDiffCallback
argument_list|()
operator|.
name|isDiffCopiedAsAdded
argument_list|()
operator|&&
name|entry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|propDiff
operator|=
name|dir
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|modified
init|=
name|dir
operator|.
name|hasPropModifications
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|modified
condition|)
block|{
name|baseProps
operator|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
name|propDiff
operator|=
name|computePropsDiff
argument_list|(
name|baseProps
argument_list|,
name|dir
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|propDiff
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|baseProps
operator|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
name|boolean
name|isAdded
init|=
name|schedule
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
decl_stmt|;
name|String
name|filePath
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|dirInfo
operator|.
name|myPath
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|schedule
operator|!=
literal|null
operator|&&
operator|(
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|||
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|)
condition|)
block|{
name|String
name|mimeType
init|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|getDiffCallback
argument_list|()
operator|.
name|fileDeleted
argument_list|(
name|filePath
argument_list|,
name|baseFile
argument_list|,
literal|null
argument_list|,
name|mimeType
argument_list|,
literal|null
argument_list|,
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|asMap
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|isAdded
operator|=
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|isAdded
condition|)
block|{
name|String
name|mimeType
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|detranslateFile
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|SVNProperties
name|originalProperties
init|=
literal|null
decl_stmt|;
name|long
name|revision
init|=
name|entry
operator|.
name|getRevision
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isCopied
argument_list|()
operator|&&
name|getDiffCallback
argument_list|()
operator|.
name|isDiffCopiedAsAdded
argument_list|()
condition|)
block|{
name|originalProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
name|revision
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|originalProperties
operator|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
name|getDiffCallback
argument_list|()
operator|.
name|fileAdded
argument_list|(
name|filePath
argument_list|,
literal|null
argument_list|,
name|tmpFile
argument_list|,
literal|0
argument_list|,
name|revision
argument_list|,
name|mimeType
argument_list|,
literal|null
argument_list|,
name|originalProperties
argument_list|,
name|propDiff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|schedule
operator|==
literal|null
condition|)
block|{
name|boolean
name|modified
init|=
name|dir
operator|.
name|hasTextModifications
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|modified
condition|)
block|{
name|tmpFile
operator|=
name|detranslateFile
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modified
operator|||
operator|(
name|propDiff
operator|!=
literal|null
operator|&&
operator|!
name|propDiff
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|String
name|baseMimeType
init|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|getDiffCallback
argument_list|()
operator|.
name|fileChanged
argument_list|(
name|filePath
argument_list|,
name|modified
condition|?
name|baseFile
else|:
literal|null
argument_list|,
name|tmpFile
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|baseMimeType
argument_list|,
name|mimeType
argument_list|,
name|baseProps
argument_list|,
name|propDiff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|addDir
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNDepth
name|subDirDepth
init|=
name|myCurrentDirectory
operator|.
name|myDepth
decl_stmt|;
if|if
condition|(
name|subDirDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|subDirDepth
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|myCurrentDirectory
operator|=
name|createDirInfo
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
literal|true
argument_list|,
name|subDirDepth
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openDir
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNDepth
name|subDirDepth
init|=
name|myCurrentDirectory
operator|.
name|myDepth
decl_stmt|;
if|if
condition|(
name|subDirDepth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|subDirDepth
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|myCurrentDirectory
operator|=
name|createDirInfo
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
literal|false
argument_list|,
name|subDirDepth
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeDirProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myPropertyDiff
operator|==
literal|null
condition|)
block|{
name|myCurrentDirectory
operator|.
name|myPropertyDiff
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
name|myCurrentDirectory
operator|.
name|myPropertyDiff
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|closeDir
parameter_list|()
throws|throws
name|SVNException
block|{
comment|// display dir prop changes.
name|SVNProperties
name|diff
init|=
name|myCurrentDirectory
operator|.
name|myPropertyDiff
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
literal|null
operator|&&
operator|!
name|diff
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// reverse changes
name|SVNProperties
name|originalProps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myCurrentDirectory
operator|.
name|myIsAdded
condition|)
block|{
name|originalProps
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|myCurrentDirectory
operator|.
name|myPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
operator|&&
name|myIsCompareToBase
condition|)
block|{
name|originalProps
operator|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|originalProps
operator|=
name|dir
operator|.
name|getProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
name|SVNProperties
name|baseProps
init|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|SVNProperties
name|reposProps
init|=
name|applyPropChanges
argument_list|(
name|baseProps
argument_list|,
name|myCurrentDirectory
operator|.
name|myPropertyDiff
argument_list|)
decl_stmt|;
name|diff
operator|=
name|computePropsDiff
argument_list|(
name|originalProps
argument_list|,
name|reposProps
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|myIsReverseDiff
condition|)
block|{
name|reversePropChanges
argument_list|(
name|originalProps
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
name|getDiffCallback
argument_list|()
operator|.
name|propertiesChanged
argument_list|(
name|myCurrentDirectory
operator|.
name|myPath
argument_list|,
name|originalProps
argument_list|,
name|diff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|myCurrentDirectory
operator|.
name|myComparedEntries
operator|.
name|add
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myCurrentDirectory
operator|.
name|myIsAdded
condition|)
block|{
name|localDirectoryDiff
argument_list|(
name|myCurrentDirectory
argument_list|)
expr_stmt|;
block|}
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|myCurrentDirectory
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|myCurrentDirectory
operator|=
name|myCurrentDirectory
operator|.
name|myParent
expr_stmt|;
if|if
condition|(
name|myCurrentDirectory
operator|!=
literal|null
condition|)
block|{
name|myCurrentDirectory
operator|.
name|myComparedEntries
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addFile
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|copyFromPath
parameter_list|,
name|long
name|copyFromRevision
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|myCurrentFile
operator|=
name|createFileInfo
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|myCurrentDirectory
operator|.
name|myComparedEntries
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|openFile
parameter_list|(
name|String
name|path
parameter_list|,
name|long
name|revision
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|name
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|myCurrentFile
operator|=
name|createFileInfo
argument_list|(
name|myCurrentDirectory
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|myCurrentDirectory
operator|.
name|myComparedEntries
operator|.
name|add
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|changeFileProperty
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|name
parameter_list|,
name|SVNPropertyValue
name|value
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|==
literal|null
condition|)
block|{
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|applyTextDelta
parameter_list|(
name|String
name|path
parameter_list|,
name|String
name|baseChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|myCurrentFile
operator|.
name|myPath
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|isCopied
argument_list|()
condition|)
block|{
name|myCurrentFile
operator|.
name|myIsAdded
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|myCurrentFile
operator|.
name|myIsAdded
condition|)
block|{
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|myCurrentDirectory
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|String
name|fileName
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|myCurrentFile
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|myCurrentFile
operator|.
name|myBaseFile
operator|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|myCurrentFile
operator|.
name|myFile
operator|=
name|createTempFile
argument_list|()
expr_stmt|;
name|myDeltaProcessor
operator|.
name|applyTextDelta
argument_list|(
name|myCurrentFile
operator|.
name|myBaseFile
argument_list|,
name|myCurrentFile
operator|.
name|myFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|textDeltaChunk
parameter_list|(
name|String
name|path
parameter_list|,
name|SVNDiffWindow
name|diffWindow
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|myDeltaProcessor
operator|.
name|textDeltaChunk
argument_list|(
name|diffWindow
argument_list|)
return|;
block|}
specifier|public
name|void
name|textDeltaEnd
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|myDeltaProcessor
operator|.
name|textDeltaEnd
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|closeFile
parameter_list|(
name|String
name|commitPath
parameter_list|,
name|String
name|textChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|fileName
init|=
name|SVNPathUtil
operator|.
name|tail
argument_list|(
name|myCurrentFile
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|File
name|filePath
init|=
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|myCurrentFile
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|dir
init|=
name|myWCAccess
operator|.
name|probeRetrieve
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|myWCAccess
operator|.
name|getEntry
argument_list|(
name|filePath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|SVNProperties
name|baseProperties
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myCurrentFile
operator|.
name|myIsAdded
condition|)
block|{
name|baseProperties
operator|=
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|baseProperties
operator|=
name|dir
operator|!=
literal|null
condition|?
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|asMap
argument_list|()
else|:
operator|new
name|SVNProperties
argument_list|()
expr_stmt|;
block|}
name|SVNProperties
name|reposProperties
init|=
name|applyPropChanges
argument_list|(
name|baseProperties
argument_list|,
name|myCurrentFile
operator|.
name|myPropertyDiff
argument_list|)
decl_stmt|;
name|String
name|reposMimeType
init|=
name|reposProperties
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
name|File
name|reposFile
init|=
name|myCurrentFile
operator|.
name|myFile
decl_stmt|;
name|File
name|localFile
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|reposFile
operator|==
literal|null
condition|)
block|{
name|reposFile
operator|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myCurrentFile
operator|.
name|myIsAdded
operator|||
operator|(
operator|!
name|myIsCompareToBase
operator|&&
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|myIsReverseDiff
condition|)
block|{
name|getDiffCallback
argument_list|()
operator|.
name|fileAdded
argument_list|(
name|commitPath
argument_list|,
literal|null
argument_list|,
name|reposFile
argument_list|,
literal|0
argument_list|,
name|myTargetRevision
argument_list|,
literal|null
argument_list|,
name|reposMimeType
argument_list|,
literal|null
argument_list|,
name|myCurrentFile
operator|.
name|myPropertyDiff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getDiffCallback
argument_list|()
operator|.
name|fileDeleted
argument_list|(
name|commitPath
argument_list|,
name|reposFile
argument_list|,
literal|null
argument_list|,
name|reposMimeType
argument_list|,
literal|null
argument_list|,
name|reposProperties
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return;
block|}
name|boolean
name|modified
init|=
name|myCurrentFile
operator|.
name|myFile
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|modified
operator|&&
operator|!
name|myIsCompareToBase
condition|)
block|{
name|modified
operator|=
name|dir
operator|.
name|hasTextModifications
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|modified
condition|)
block|{
if|if
condition|(
name|myIsCompareToBase
condition|)
block|{
name|localFile
operator|=
name|dir
operator|.
name|getBaseFile
argument_list|(
name|fileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|localFile
operator|=
name|detranslateFile
argument_list|(
name|dir
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|localFile
operator|=
literal|null
expr_stmt|;
name|reposFile
operator|=
literal|null
expr_stmt|;
block|}
name|SVNProperties
name|originalProps
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|myIsCompareToBase
condition|)
block|{
name|originalProps
operator|=
name|baseProperties
expr_stmt|;
block|}
else|else
block|{
name|originalProps
operator|=
name|dir
operator|.
name|getProperties
argument_list|(
name|fileName
argument_list|)
operator|.
name|asMap
argument_list|()
expr_stmt|;
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|=
name|computePropsDiff
argument_list|(
name|originalProps
argument_list|,
name|reposProperties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localFile
operator|!=
literal|null
operator|||
operator|(
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|!=
literal|null
operator|&&
operator|!
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|String
name|originalMimeType
init|=
name|originalProps
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
decl_stmt|;
if|if
condition|(
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|!=
literal|null
operator|&&
operator|!
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|myIsReverseDiff
condition|)
block|{
name|reversePropChanges
argument_list|(
name|originalProps
argument_list|,
name|myCurrentFile
operator|.
name|myPropertyDiff
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|localFile
operator|!=
literal|null
operator|||
name|reposFile
operator|!=
literal|null
operator|||
operator|(
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|!=
literal|null
operator|&&
operator|!
name|myCurrentFile
operator|.
name|myPropertyDiff
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|getDiffCallback
argument_list|()
operator|.
name|fileChanged
argument_list|(
name|commitPath
argument_list|,
name|myIsReverseDiff
condition|?
name|localFile
else|:
name|reposFile
argument_list|,
name|myIsReverseDiff
condition|?
name|reposFile
else|:
name|localFile
argument_list|,
name|myIsReverseDiff
condition|?
operator|-
literal|1
else|:
name|myTargetRevision
argument_list|,
name|myIsReverseDiff
condition|?
name|myTargetRevision
else|:
operator|-
literal|1
argument_list|,
name|myIsReverseDiff
condition|?
name|originalMimeType
else|:
name|reposMimeType
argument_list|,
name|myIsReverseDiff
condition|?
name|reposMimeType
else|:
name|originalMimeType
argument_list|,
name|originalProps
argument_list|,
name|myCurrentFile
operator|.
name|myPropertyDiff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|SVNCommitInfo
name|closeEdit
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|myIsRootOpen
condition|)
block|{
name|localDirectoryDiff
argument_list|(
name|createDirInfo
argument_list|(
literal|null
argument_list|,
literal|""
argument_list|,
literal|false
argument_list|,
name|myDepth
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|abortEdit
parameter_list|()
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentDir
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|absentFile
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
block|}
specifier|public
name|void
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|myTempDirectory
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|myTempDirectory
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|SVNProperties
name|applyPropChanges
parameter_list|(
name|SVNProperties
name|props
parameter_list|,
name|SVNProperties
name|propChanges
parameter_list|)
block|{
name|SVNProperties
name|result
init|=
operator|new
name|SVNProperties
argument_list|(
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|propChanges
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|names
init|=
name|propChanges
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|value
init|=
name|propChanges
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
name|result
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|localDirectoryDiff
parameter_list|(
name|SVNDirectoryInfo
name|info
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myIsCompareToBase
condition|)
block|{
return|return;
block|}
name|SVNAdminArea
name|dir
init|=
name|retrieve
argument_list|(
name|info
operator|.
name|myPath
argument_list|)
decl_stmt|;
name|boolean
name|anchor
init|=
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|myAdminInfo
operator|.
name|getTargetName
argument_list|()
argument_list|)
operator|&&
name|dir
operator|==
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
decl_stmt|;
name|SVNEntry
name|thisDirEntry
init|=
name|dir
operator|.
name|getEntry
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|SVNWCAccess
operator|.
name|matchesChangeList
argument_list|(
name|myChangeLists
argument_list|,
name|thisDirEntry
argument_list|)
operator|&&
operator|!
name|anchor
operator|&&
operator|!
name|info
operator|.
name|myComparedEntries
operator|.
name|contains
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// generate prop diff for dir.
if|if
condition|(
name|dir
operator|.
name|hasPropModifications
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
condition|)
block|{
name|SVNVersionedProperties
name|baseProps
init|=
name|dir
operator|.
name|getBaseProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNProperties
name|propDiff
init|=
name|baseProps
operator|.
name|compareTo
argument_list|(
name|dir
operator|.
name|getProperties
argument_list|(
name|dir
operator|.
name|getThisDirName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|asMap
argument_list|()
decl_stmt|;
name|getDiffCallback
argument_list|()
operator|.
name|propertiesChanged
argument_list|(
name|info
operator|.
name|myPath
argument_list|,
name|baseProps
operator|.
name|asMap
argument_list|()
argument_list|,
name|propDiff
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|info
operator|.
name|myDepth
operator|==
name|SVNDepth
operator|.
name|EMPTY
operator|&&
operator|!
name|anchor
condition|)
block|{
return|return;
block|}
name|Set
name|processedFiles
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|getDiffCallback
argument_list|()
operator|.
name|isDiffUnversioned
argument_list|()
condition|)
block|{
name|processedFiles
operator|=
operator|new
name|SVNHashSet
argument_list|()
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|entries
init|=
name|dir
operator|.
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|processedFiles
operator|!=
literal|null
operator|&&
operator|!
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|processedFiles
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|anchor
operator|&&
operator|!
name|myAdminInfo
operator|.
name|getTargetName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|dir
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|info
operator|.
name|myComparedEntries
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|info
operator|.
name|myComparedEntries
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|reportModifiedFile
argument_list|(
name|info
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
if|if
condition|(
name|anchor
operator|||
name|info
operator|.
name|myDepth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|FILES
argument_list|)
operator|>
literal|0
operator|||
name|info
operator|.
name|myDepth
operator|==
name|SVNDepth
operator|.
name|UNKNOWN
condition|)
block|{
name|SVNDepth
name|depthBelowHere
init|=
name|info
operator|.
name|myDepth
decl_stmt|;
if|if
condition|(
name|depthBelowHere
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|depthBelowHere
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
name|SVNDirectoryInfo
name|childInfo
init|=
name|createDirInfo
argument_list|(
name|info
argument_list|,
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|info
operator|.
name|myPath
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
name|depthBelowHere
argument_list|)
decl_stmt|;
name|localDirectoryDiff
argument_list|(
name|childInfo
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|getDiffCallback
argument_list|()
operator|.
name|isDiffUnversioned
argument_list|()
condition|)
block|{
name|String
name|relativePath
init|=
name|dir
operator|.
name|getRelativePath
argument_list|(
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
argument_list|)
decl_stmt|;
name|diffUnversioned
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|,
name|dir
argument_list|,
name|relativePath
argument_list|,
name|anchor
argument_list|,
name|processedFiles
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|diffUnversioned
parameter_list|(
name|File
name|root
parameter_list|,
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|parentRelativePath
parameter_list|,
name|boolean
name|anchor
parameter_list|,
name|Set
name|processedFiles
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
index|[]
name|allFiles
init|=
name|SVNFileListUtil
operator|.
name|listFiles
argument_list|(
name|root
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|allFiles
operator|!=
literal|null
operator|&&
name|i
operator|<
name|allFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|File
name|file
init|=
name|allFiles
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|processedFiles
operator|!=
literal|null
operator|&&
name|processedFiles
operator|.
name|contains
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|anchor
operator|&&
operator|!
name|myAdminInfo
operator|.
name|getTargetName
argument_list|()
operator|.
name|equals
argument_list|(
name|file
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|else if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
comment|//&& SVNStatusEditor.isIgnored(, name)dir.isIgnored(file.getName())) {
name|Collection
name|globalIgnores
init|=
name|SVNStatusEditor
operator|.
name|getGlobalIgnores
argument_list|(
name|myWCAccess
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|Collection
name|ignores
init|=
name|SVNStatusEditor
operator|.
name|getIgnorePatterns
argument_list|(
name|dir
argument_list|,
name|globalIgnores
argument_list|)
decl_stmt|;
name|String
name|rootRelativePath
init|=
literal|null
decl_stmt|;
name|boolean
name|needToComputeRelativePath
init|=
literal|false
decl_stmt|;
for|for
control|(
name|Iterator
name|patterns
init|=
name|ignores
operator|.
name|iterator
argument_list|()
init|;
name|patterns
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|pattern
init|=
operator|(
name|String
operator|)
name|patterns
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|needToComputeRelativePath
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|needToComputeRelativePath
condition|)
block|{
if|if
condition|(
name|myWCRootPath
operator|==
literal|null
condition|)
block|{
name|File
name|wcRoot
init|=
name|SVNWCUtil
operator|.
name|getWorkingCopyRoot
argument_list|(
name|dir
operator|.
name|getRoot
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|myWCRootPath
operator|=
name|wcRoot
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|myWCRootPath
operator|!=
literal|null
condition|)
block|{
name|rootRelativePath
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
name|rootRelativePath
operator|=
name|SVNPathUtil
operator|.
name|getPathAsChild
argument_list|(
name|myWCRootPath
argument_list|,
name|rootRelativePath
argument_list|)
expr_stmt|;
if|if
condition|(
name|rootRelativePath
operator|!=
literal|null
operator|&&
operator|!
name|rootRelativePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|rootRelativePath
operator|=
literal|"/"
operator|+
name|rootRelativePath
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|SVNStatusEditor
operator|.
name|isIgnored
argument_list|(
name|ignores
argument_list|,
name|file
argument_list|,
name|rootRelativePath
argument_list|)
condition|)
block|{
continue|continue;
block|}
block|}
comment|// generate patch as for added file.
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|DIRECTORY
condition|)
block|{
name|diffUnversioned
argument_list|(
name|file
argument_list|,
literal|null
argument_list|,
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parentRelativePath
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
condition|)
block|{
name|String
name|mimeType1
init|=
literal|null
decl_stmt|;
name|String
name|mimeType2
init|=
name|SVNFileUtil
operator|.
name|detectMimeType
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|filePath
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parentRelativePath
argument_list|,
name|file
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|getDiffCallback
argument_list|()
operator|.
name|fileAdded
argument_list|(
name|filePath
argument_list|,
literal|null
argument_list|,
name|file
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|mimeType1
argument_list|,
name|mimeType2
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|SVNDirectoryInfo
name|createDirInfo
parameter_list|(
name|SVNDirectoryInfo
name|parent
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|added
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
block|{
name|SVNDirectoryInfo
name|info
init|=
operator|new
name|SVNDirectoryInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|myParent
operator|=
name|parent
expr_stmt|;
name|info
operator|.
name|myPath
operator|=
name|path
expr_stmt|;
name|info
operator|.
name|myIsAdded
operator|=
name|added
expr_stmt|;
name|info
operator|.
name|myDepth
operator|=
name|depth
expr_stmt|;
return|return
name|info
return|;
block|}
specifier|private
name|SVNFileInfo
name|createFileInfo
parameter_list|(
name|SVNDirectoryInfo
name|parent
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|added
parameter_list|)
block|{
name|SVNFileInfo
name|info
init|=
operator|new
name|SVNFileInfo
argument_list|()
decl_stmt|;
name|info
operator|.
name|myPath
operator|=
name|path
expr_stmt|;
name|info
operator|.
name|myIsAdded
operator|=
name|added
expr_stmt|;
if|if
condition|(
name|parent
operator|.
name|myIsAdded
condition|)
block|{
while|while
condition|(
name|parent
operator|.
name|myIsAdded
condition|)
block|{
name|parent
operator|=
name|parent
operator|.
name|myParent
expr_stmt|;
block|}
name|info
operator|.
name|myPath
operator|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|parent
operator|.
name|myPath
argument_list|,
literal|"fake"
argument_list|)
expr_stmt|;
block|}
return|return
name|info
return|;
block|}
specifier|private
name|File
name|detranslateFile
parameter_list|(
name|SVNAdminArea
name|dir
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNVersionedProperties
name|properties
init|=
name|dir
operator|.
name|getProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|keywords
init|=
name|properties
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|String
name|eolStyle
init|=
name|properties
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
decl_stmt|;
name|String
name|charsetProp
init|=
name|properties
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
name|ISVNOptions
name|options
init|=
name|dir
operator|.
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
decl_stmt|;
name|String
name|charset
init|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|charsetProp
argument_list|,
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
operator|.
name|getPath
argument_list|()
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|properties
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|charset
operator|==
literal|null
operator|&&
name|keywords
operator|==
literal|null
operator|&&
name|eolStyle
operator|==
literal|null
operator|&&
operator|(
operator|!
name|special
operator|||
operator|!
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
operator|)
condition|)
block|{
return|return
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
return|;
block|}
name|byte
index|[]
name|eol
init|=
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|eolStyle
argument_list|,
name|options
argument_list|)
decl_stmt|;
name|File
name|tmpFile
init|=
name|createTempFile
argument_list|()
decl_stmt|;
name|Map
name|keywordsMap
init|=
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|dir
operator|.
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|,
name|tmpFile
argument_list|,
name|charset
argument_list|,
name|eol
argument_list|,
name|keywordsMap
argument_list|,
name|special
argument_list|,
literal|false
argument_list|)
expr_stmt|;
return|return
name|tmpFile
return|;
block|}
specifier|private
name|File
name|createTempFile
parameter_list|()
throws|throws
name|SVNException
block|{
name|File
name|tmpFile
init|=
literal|null
decl_stmt|;
try|try
block|{
return|return
name|File
operator|.
name|createTempFile
argument_list|(
literal|"diff."
argument_list|,
literal|".tmp"
argument_list|,
name|getTempDirectory
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|File
name|getTempDirectory
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myTempDirectory
operator|==
literal|null
condition|)
block|{
name|myTempDirectory
operator|=
name|getDiffCallback
argument_list|()
operator|.
name|createTempDirectory
argument_list|()
expr_stmt|;
block|}
return|return
name|myTempDirectory
return|;
block|}
specifier|private
name|SVNAdminArea
name|retrieve
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|dir
init|=
name|myAdminInfo
operator|.
name|getAnchor
argument_list|()
operator|.
name|getFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|myWCAccess
operator|.
name|retrieve
argument_list|(
name|dir
argument_list|)
return|;
block|}
specifier|private
name|AbstractDiffCallback
name|getDiffCallback
parameter_list|()
block|{
return|return
name|myDiffCallback
return|;
block|}
specifier|private
specifier|static
class|class
name|SVNDirectoryInfo
block|{
specifier|private
name|boolean
name|myIsAdded
decl_stmt|;
specifier|private
name|String
name|myPath
decl_stmt|;
specifier|private
name|SVNProperties
name|myPropertyDiff
decl_stmt|;
specifier|private
name|SVNDirectoryInfo
name|myParent
decl_stmt|;
specifier|private
name|Set
name|myComparedEntries
init|=
operator|new
name|SVNHashSet
argument_list|()
decl_stmt|;
specifier|private
name|SVNDepth
name|myDepth
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|SVNFileInfo
block|{
specifier|private
name|boolean
name|myIsAdded
decl_stmt|;
specifier|private
name|String
name|myPath
decl_stmt|;
specifier|private
name|File
name|myFile
decl_stmt|;
specifier|private
name|File
name|myBaseFile
decl_stmt|;
specifier|private
name|SVNProperties
name|myPropertyDiff
decl_stmt|;
block|}
specifier|private
specifier|static
name|void
name|reversePropChanges
parameter_list|(
name|SVNProperties
name|base
parameter_list|,
name|SVNProperties
name|diff
parameter_list|)
block|{
name|Collection
name|namesList
init|=
operator|new
name|ArrayList
argument_list|(
name|diff
operator|.
name|nameSet
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|namesList
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|newValue
init|=
name|diff
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|oldValue
init|=
name|base
operator|.
name|getSVNPropertyValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|==
literal|null
operator|&&
name|newValue
operator|!=
literal|null
condition|)
block|{
name|base
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|diff
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|(
name|SVNPropertyValue
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|oldValue
operator|!=
literal|null
operator|&&
name|newValue
operator|==
literal|null
condition|)
block|{
name|base
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|(
name|SVNPropertyValue
operator|)
literal|null
argument_list|)
expr_stmt|;
name|diff
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|oldValue
operator|!=
literal|null
operator|&&
name|newValue
operator|!=
literal|null
condition|)
block|{
name|base
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|newValue
argument_list|)
expr_stmt|;
name|diff
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|SVNProperties
name|computePropsDiff
parameter_list|(
name|SVNProperties
name|props1
parameter_list|,
name|SVNProperties
name|props2
parameter_list|)
block|{
name|SVNProperties
name|propsDiff
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|names
init|=
name|props2
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|newPropName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|props1
operator|.
name|containsName
argument_list|(
name|newPropName
argument_list|)
condition|)
block|{
comment|// changed.
name|SVNPropertyValue
name|oldValue
init|=
name|props2
operator|.
name|getSVNPropertyValue
argument_list|(
name|newPropName
argument_list|)
decl_stmt|;
name|SVNPropertyValue
name|value
init|=
name|props1
operator|.
name|getSVNPropertyValue
argument_list|(
name|newPropName
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldValue
operator|!=
literal|null
operator|&&
operator|!
name|oldValue
operator|.
name|equals
argument_list|(
name|value
argument_list|)
condition|)
block|{
name|propsDiff
operator|.
name|put
argument_list|(
name|newPropName
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|oldValue
operator|==
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|propsDiff
operator|.
name|put
argument_list|(
name|newPropName
argument_list|,
name|oldValue
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// added.
name|propsDiff
operator|.
name|put
argument_list|(
name|newPropName
argument_list|,
name|props2
operator|.
name|getSVNPropertyValue
argument_list|(
name|newPropName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|names
init|=
name|props1
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|oldPropName
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|props2
operator|.
name|containsName
argument_list|(
name|oldPropName
argument_list|)
condition|)
block|{
comment|// deleted
name|propsDiff
operator|.
name|put
argument_list|(
name|oldPropName
argument_list|,
operator|(
name|String
operator|)
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|propsDiff
return|;
block|}
block|}
end_class

end_unit

