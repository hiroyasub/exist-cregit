begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|admin
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|DefaultSVNMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNAdminUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNDiffConflictChoiceStyle
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNErrorManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNFileUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNPropertiesManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
operator|.
name|SVNWCProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNMerger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|ISVNMergerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictChoice
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNMergeFileSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNMergeResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNStatusType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCancelException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNCommitInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNDepth
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperty
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNPropertyValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNDate
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNEncodingUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNPathUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|ISVNCommitParameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNDiffOptions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|wc
operator|.
name|SVNRevision
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @version 1.3  * @author  TMate Software Ltd.  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|SVNAdminArea
block|{
specifier|protected
specifier|static
specifier|final
name|String
name|ADM_KILLME
init|=
literal|"KILLME"
decl_stmt|;
specifier|private
specifier|static
specifier|volatile
name|boolean
name|ourIsCleanupSafe
decl_stmt|;
specifier|protected
name|Map
name|myBaseProperties
decl_stmt|;
specifier|protected
name|Map
name|myProperties
decl_stmt|;
specifier|protected
name|Map
name|myWCProperties
decl_stmt|;
specifier|protected
name|Map
name|myEntries
decl_stmt|;
specifier|protected
name|boolean
name|myWasLocked
decl_stmt|;
specifier|private
name|ISVNCommitParameters
name|myCommitParameters
decl_stmt|;
specifier|private
name|Map
name|myRevertProperties
decl_stmt|;
specifier|private
name|File
name|myDirectory
decl_stmt|;
specifier|private
name|SVNWCAccess
name|myWCAccess
decl_stmt|;
specifier|private
name|File
name|myAdminRoot
decl_stmt|;
specifier|private
name|int
name|myWCFormatVersion
decl_stmt|;
specifier|public
specifier|static
specifier|synchronized
name|void
name|setSafeCleanup
parameter_list|(
name|boolean
name|safe
parameter_list|)
block|{
name|ourIsCleanupSafe
operator|=
name|safe
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|boolean
name|isSafeCleanup
parameter_list|()
block|{
return|return
name|ourIsCleanupSafe
return|;
block|}
specifier|public
specifier|abstract
name|boolean
name|isLocked
parameter_list|()
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|isVersioned
parameter_list|()
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|isEntryPropertyApplicable
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|lock
parameter_list|(
name|boolean
name|stealLock
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|unlock
parameter_list|()
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNVersionedProperties
name|getBaseProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNVersionedProperties
name|getRevertProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNVersionedProperties
name|getWCProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNVersionedProperties
name|getProperties
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|void
name|saveVersionedProperties
parameter_list|(
name|SVNLog
name|log
parameter_list|,
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|void
name|installProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNProperties
name|baseProps
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|boolean
name|writeBaseProps
parameter_list|,
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|void
name|saveWCProperties
parameter_list|(
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|void
name|saveEntries
parameter_list|(
name|boolean
name|close
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|String
name|getThisDirName
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|hasPropModifications
parameter_list|(
name|String
name|entryName
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|hasProperties
parameter_list|(
name|String
name|entryName
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNAdminArea
name|createVersionedDirectory
parameter_list|(
name|File
name|dir
parameter_list|,
name|String
name|url
parameter_list|,
name|String
name|rootURL
parameter_list|,
name|String
name|uuid
parameter_list|,
name|long
name|revNumber
parameter_list|,
name|boolean
name|createMyself
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|void
name|postCommit
parameter_list|(
name|String
name|fileName
parameter_list|,
name|long
name|revisionNumber
parameter_list|,
name|boolean
name|implicit
parameter_list|,
name|boolean
name|rerun
parameter_list|,
name|SVNErrorCode
name|errorCode
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|void
name|handleKillMe
parameter_list|()
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|hasTreeConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNTreeConflictDescription
name|getTreeConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|void
name|addTreeConflict
parameter_list|(
name|SVNTreeConflictDescription
name|conflict
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|SVNTreeConflictDescription
name|deleteTreeConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|void
name|setFileExternalLocation
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|SVNRevision
name|pegRevision
parameter_list|,
name|SVNRevision
name|revision
parameter_list|,
name|SVNURL
name|reposRootURL
parameter_list|)
throws|throws
name|SVNException
function_decl|;
specifier|public
specifier|abstract
name|int
name|getFormatVersion
parameter_list|()
function_decl|;
specifier|public
name|void
name|updateURL
parameter_list|(
name|String
name|rootURL
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNWCAccess
name|wcAccess
init|=
name|getWCAccess
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|ents
init|=
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
name|recursive
condition|)
block|{
name|SVNAdminArea
name|childDir
init|=
name|wcAccess
operator|.
name|retrieve
argument_list|(
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDir
operator|!=
literal|null
condition|)
block|{
name|String
name|childURL
init|=
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|rootURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|childDir
operator|.
name|updateURL
argument_list|(
name|childURL
argument_list|,
name|recursive
argument_list|)
expr_stmt|;
block|}
continue|continue;
block|}
name|entry
operator|.
name|setURL
argument_list|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
name|rootURL
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|rootURL
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTextModifications
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|forceComparision
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|hasTextModifications
argument_list|(
name|name
argument_list|,
name|forceComparision
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|hasTextModifications
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|forceComparison
parameter_list|,
name|boolean
name|compareTextBase
parameter_list|,
name|boolean
name|compareChecksum
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|textFile
init|=
name|getFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNFileType
name|fileType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|textFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|fileType
operator|==
name|SVNFileType
operator|.
name|FILE
operator|||
name|fileType
operator|==
name|SVNFileType
operator|.
name|SYMLINK
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|forceComparison
condition|)
block|{
name|boolean
name|compare
init|=
literal|false
decl_stmt|;
try|try
block|{
name|entry
operator|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|compare
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|compare
operator|&&
name|entry
operator|==
literal|null
condition|)
block|{
name|compare
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|compare
operator|&&
name|isEntryPropertyApplicable
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getWorkingSize
argument_list|()
operator|!=
name|SVNProperty
operator|.
name|WORKING_SIZE_UNKNOWN
operator|&&
name|textFile
operator|.
name|length
argument_list|()
operator|!=
name|entry
operator|.
name|getWorkingSize
argument_list|()
condition|)
block|{
name|compare
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|compare
condition|)
block|{
name|String
name|textTime
init|=
name|entry
operator|.
name|getTextTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|textTime
operator|==
literal|null
condition|)
block|{
name|compare
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|long
name|textTimeAsLong
init|=
name|SVNFileUtil
operator|.
name|roundTimeStamp
argument_list|(
name|SVNDate
operator|.
name|parseDateAsMilliseconds
argument_list|(
name|textTime
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|tstamp
init|=
name|SVNFileUtil
operator|.
name|roundTimeStamp
argument_list|(
name|textFile
operator|.
name|lastModified
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|textTimeAsLong
operator|!=
name|tstamp
condition|)
block|{
name|compare
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|compare
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|File
name|baseFile
init|=
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseFile
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
name|boolean
name|differs
init|=
name|compareAndVerify
argument_list|(
name|textFile
argument_list|,
name|baseFile
argument_list|,
name|compareTextBase
argument_list|,
name|compareChecksum
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|differs
operator|&&
name|isLocked
argument_list|()
condition|)
block|{
name|Map
name|attributes
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|WORKING_SIZE
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|textFile
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|TEXT_TIME
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|textFile
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|modifyEntry
argument_list|(
name|name
argument_list|,
name|attributes
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|differs
return|;
block|}
specifier|public
name|boolean
name|hasVersionedFileTextChanges
parameter_list|(
name|File
name|file
parameter_list|,
name|File
name|baseFile
parameter_list|,
name|boolean
name|compareTextBase
parameter_list|)
throws|throws
name|SVNException
block|{
return|return
name|compareAndVerify
argument_list|(
name|file
argument_list|,
name|baseFile
argument_list|,
name|compareTextBase
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|public
name|String
name|getRelativePath
parameter_list|(
name|SVNAdminArea
name|anchor
parameter_list|)
block|{
name|String
name|absoluteAnchor
init|=
name|anchor
operator|.
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|ownAbsolutePath
init|=
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
name|String
name|relativePath
init|=
name|ownAbsolutePath
operator|.
name|substring
argument_list|(
name|absoluteAnchor
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|relativePath
operator|=
name|relativePath
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|relativePath
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|relativePath
operator|=
name|relativePath
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|relativePath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|relativePath
operator|=
name|relativePath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|relativePath
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|relativePath
return|;
block|}
specifier|public
name|boolean
name|tweakEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|newURL
parameter_list|,
name|String
name|reposRoot
parameter_list|,
name|long
name|newRevision
parameter_list|,
name|boolean
name|remove
parameter_list|)
throws|throws
name|SVNException
block|{
name|boolean
name|rewrite
init|=
literal|false
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"No such entry: ''{0}''"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|newURL
operator|!=
literal|null
operator|&&
operator|(
name|entry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|newURL
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getURL
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|rewrite
operator|=
literal|true
expr_stmt|;
name|entry
operator|.
name|setURL
argument_list|(
name|newURL
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reposRoot
operator|!=
literal|null
operator|&&
operator|(
name|entry
operator|.
name|getRepositoryRootURL
argument_list|()
operator|==
literal|null
operator|||
operator|!
name|reposRoot
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|)
operator|)
operator|&&
name|entry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
operator|&&
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|reposRoot
argument_list|,
name|entry
operator|.
name|getURL
argument_list|()
argument_list|)
condition|)
block|{
name|boolean
name|setReposRoot
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|entries
init|=
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|childEntry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|childEntry
operator|.
name|getRepositoryRoot
argument_list|()
operator|==
literal|null
operator|&&
name|childEntry
operator|.
name|getURL
argument_list|()
operator|!=
literal|null
operator|&&
operator|!
name|SVNPathUtil
operator|.
name|isAncestor
argument_list|(
name|reposRoot
argument_list|,
name|entry
operator|.
name|getURL
argument_list|()
argument_list|)
condition|)
block|{
name|setReposRoot
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|setReposRoot
condition|)
block|{
name|rewrite
operator|=
literal|true
expr_stmt|;
name|entry
operator|.
name|setRepositoryRoot
argument_list|(
name|reposRoot
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|newRevision
operator|>=
literal|0
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isCopied
argument_list|()
operator|&&
name|entry
operator|.
name|getRevision
argument_list|()
operator|!=
name|newRevision
condition|)
block|{
name|rewrite
operator|=
literal|true
expr_stmt|;
name|entry
operator|.
name|setRevision
argument_list|(
name|newRevision
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remove
operator|&&
operator|(
name|entry
operator|.
name|isDeleted
argument_list|()
operator|||
operator|(
name|entry
operator|.
name|isAbsent
argument_list|()
operator|&&
name|entry
operator|.
name|getRevision
argument_list|()
operator|!=
name|newRevision
operator|)
operator|)
condition|)
block|{
name|deleteEntry
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|rewrite
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|rewrite
return|;
block|}
specifier|public
name|boolean
name|isKillMe
parameter_list|()
block|{
return|return
name|getAdminFile
argument_list|(
name|ADM_KILLME
argument_list|)
operator|.
name|isFile
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|markResolved
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|text
parameter_list|,
name|boolean
name|props
parameter_list|,
name|SVNConflictChoice
name|conflictChoice
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|String
name|autoResolveSource
init|=
literal|null
decl_stmt|;
name|File
name|autoResolveSourceFile
init|=
literal|null
decl_stmt|;
name|boolean
name|removeSource
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|conflictChoice
operator|==
name|SVNConflictChoice
operator|.
name|BASE
condition|)
block|{
name|autoResolveSource
operator|=
name|entry
operator|.
name|getConflictOld
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|conflictChoice
operator|==
name|SVNConflictChoice
operator|.
name|MINE_FULL
condition|)
block|{
name|autoResolveSource
operator|=
name|entry
operator|.
name|getConflictWorking
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|conflictChoice
operator|==
name|SVNConflictChoice
operator|.
name|THEIRS_FULL
condition|)
block|{
name|autoResolveSource
operator|=
name|entry
operator|.
name|getConflictNew
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|conflictChoice
operator|==
name|SVNConflictChoice
operator|.
name|THEIRS_CONFLICT
operator|||
name|conflictChoice
operator|==
name|SVNConflictChoice
operator|.
name|MINE_CONFLICT
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getConflictOld
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getConflictNew
argument_list|()
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getConflictWorking
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|String
name|conflictOld
init|=
name|entry
operator|.
name|getConflictOld
argument_list|()
decl_stmt|;
name|String
name|conflictNew
init|=
name|entry
operator|.
name|getConflictNew
argument_list|()
decl_stmt|;
name|String
name|conflictWorking
init|=
name|entry
operator|.
name|getConflictWorking
argument_list|()
decl_stmt|;
name|ISVNMergerFactory
name|factory
init|=
name|myWCAccess
operator|.
name|getOptions
argument_list|()
operator|.
name|getMergerFactory
argument_list|()
decl_stmt|;
name|File
name|conflictOldFile
init|=
name|SVNPathUtil
operator|.
name|isAbsolute
argument_list|(
name|conflictOld
argument_list|)
condition|?
operator|new
name|Resource
argument_list|(
name|conflictOld
argument_list|)
else|:
name|getFile
argument_list|(
name|conflictOld
argument_list|)
decl_stmt|;
name|File
name|conflictNewFile
init|=
name|SVNPathUtil
operator|.
name|isAbsolute
argument_list|(
name|conflictNew
argument_list|)
condition|?
operator|new
name|Resource
argument_list|(
name|conflictNew
argument_list|)
else|:
name|getFile
argument_list|(
name|conflictNew
argument_list|)
decl_stmt|;
name|File
name|conflictWorkingFile
init|=
name|SVNPathUtil
operator|.
name|isAbsolute
argument_list|(
name|conflictWorking
argument_list|)
condition|?
operator|new
name|Resource
argument_list|(
name|conflictWorking
argument_list|)
else|:
name|getFile
argument_list|(
name|conflictWorking
argument_list|)
decl_stmt|;
name|byte
index|[]
name|conflictStart
init|=
operator|(
literal|"<<<<<<< "
operator|+
name|conflictWorking
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|conflictEnd
init|=
operator|(
literal|">>>>>>> "
operator|+
name|conflictNew
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|separator
init|=
operator|(
literal|"======="
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ISVNMerger
name|merger
init|=
name|factory
operator|.
name|createMerger
argument_list|(
name|conflictStart
argument_list|,
name|separator
argument_list|,
name|conflictEnd
argument_list|)
decl_stmt|;
name|SVNDiffConflictChoiceStyle
name|style
init|=
name|conflictChoice
operator|==
name|SVNConflictChoice
operator|.
name|THEIRS_CONFLICT
condition|?
name|SVNDiffConflictChoiceStyle
operator|.
name|CHOOSE_LATEST
else|:
name|SVNDiffConflictChoiceStyle
operator|.
name|CHOOSE_MODIFIED
decl_stmt|;
if|if
condition|(
name|merger
operator|instanceof
name|DefaultSVNMerger
condition|)
block|{
name|DefaultSVNMerger
name|defaultMerger
init|=
operator|(
name|DefaultSVNMerger
operator|)
name|merger
decl_stmt|;
name|defaultMerger
operator|.
name|setDiffConflictStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
name|autoResolveSourceFile
operator|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|SVNMergeFileSet
name|mergeFileSet
init|=
operator|new
name|SVNMergeFileSet
argument_list|(
name|this
argument_list|,
literal|null
argument_list|,
name|conflictOldFile
argument_list|,
name|conflictWorkingFile
argument_list|,
name|name
argument_list|,
name|conflictNewFile
argument_list|,
name|autoResolveSourceFile
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|localLabel
init|=
literal|".working"
decl_stmt|;
name|String
name|baseLabel
init|=
literal|".old"
decl_stmt|;
name|String
name|latestLabel
init|=
literal|".new"
decl_stmt|;
name|mergeFileSet
operator|.
name|setMergeLabels
argument_list|(
name|baseLabel
argument_list|,
name|localLabel
argument_list|,
name|latestLabel
argument_list|)
expr_stmt|;
name|merger
operator|.
name|mergeText
argument_list|(
name|mergeFileSet
argument_list|,
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|mergeFileSet
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|removeSource
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|conflictChoice
operator|!=
name|SVNConflictChoice
operator|.
name|MERGED
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|INCORRECT_PARAMS
argument_list|,
literal|"Invalid 'conflict_result' argument"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|autoResolveSource
operator|!=
literal|null
condition|)
block|{
name|autoResolveSourceFile
operator|=
name|getFile
argument_list|(
name|autoResolveSource
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|autoResolveSourceFile
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|copyFile
argument_list|(
name|autoResolveSourceFile
argument_list|,
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|removeSource
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|autoResolveSourceFile
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|text
operator|&&
operator|!
name|props
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|filesDeleted
init|=
literal|false
decl_stmt|;
name|boolean
name|updateEntry
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|text
operator|&&
name|entry
operator|.
name|getConflictOld
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictOld
argument_list|()
argument_list|)
decl_stmt|;
name|filesDeleted
operator||=
name|file
operator|.
name|isFile
argument_list|()
expr_stmt|;
name|updateEntry
operator|=
literal|true
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|&&
name|entry
operator|.
name|getConflictNew
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictNew
argument_list|()
argument_list|)
decl_stmt|;
name|filesDeleted
operator||=
name|file
operator|.
name|isFile
argument_list|()
expr_stmt|;
name|updateEntry
operator|=
literal|true
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|text
operator|&&
name|entry
operator|.
name|getConflictWorking
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictWorking
argument_list|()
argument_list|)
decl_stmt|;
name|filesDeleted
operator||=
name|file
operator|.
name|isFile
argument_list|()
expr_stmt|;
name|updateEntry
operator|=
literal|true
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|props
operator|&&
name|entry
operator|.
name|getPropRejectFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|File
name|file
init|=
name|getFile
argument_list|(
name|entry
operator|.
name|getPropRejectFile
argument_list|()
argument_list|)
decl_stmt|;
name|filesDeleted
operator||=
name|file
operator|.
name|isFile
argument_list|()
expr_stmt|;
name|updateEntry
operator|=
literal|true
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|updateEntry
condition|)
block|{
if|if
condition|(
name|text
condition|)
block|{
name|entry
operator|.
name|setConflictOld
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setConflictNew
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setConflictWorking
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|props
condition|)
block|{
name|entry
operator|.
name|setPropRejectFile
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|filesDeleted
return|;
block|}
specifier|public
name|void
name|restoreFile
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNVersionedProperties
name|props
init|=
name|getProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|File
name|src
init|=
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|File
name|dst
init|=
name|getFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNTranslator
operator|.
name|translate
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|src
argument_list|)
argument_list|,
name|SVNFileUtil
operator|.
name|getBasePath
argument_list|(
name|dst
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|boolean
name|executable
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EXECUTABLE
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|needsLock
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|NEEDS_LOCK
argument_list|)
operator|!=
literal|null
decl_stmt|;
if|if
condition|(
name|needsLock
condition|)
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|dst
argument_list|,
name|entry
operator|.
name|getLockToken
argument_list|()
operator|==
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|executable
condition|)
block|{
name|SVNFileUtil
operator|.
name|setExecutable
argument_list|(
name|dst
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|markResolved
argument_list|(
name|name
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|SVNConflictChoice
operator|.
name|MERGED
argument_list|)
expr_stmt|;
name|long
name|tstamp
decl_stmt|;
if|if
condition|(
name|myWCAccess
operator|.
name|getOptions
argument_list|()
operator|.
name|isUseCommitTimes
argument_list|()
operator|&&
operator|!
name|special
condition|)
block|{
name|entry
operator|.
name|setTextTime
argument_list|(
name|entry
operator|.
name|getCommittedDate
argument_list|()
argument_list|)
expr_stmt|;
name|tstamp
operator|=
name|SVNDate
operator|.
name|parseDate
argument_list|(
name|entry
operator|.
name|getCommittedDate
argument_list|()
argument_list|)
operator|.
name|getTime
argument_list|()
expr_stmt|;
name|dst
operator|.
name|setLastModified
argument_list|(
name|tstamp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tstamp
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|dst
operator|.
name|setLastModified
argument_list|(
name|tstamp
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setTextTime
argument_list|(
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|tstamp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SVNStatusType
name|mergeProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNProperties
name|serverBaseProps
parameter_list|,
name|SVNProperties
name|propDiff
parameter_list|,
name|String
name|localLabel
parameter_list|,
name|String
name|latestLabel
parameter_list|,
name|boolean
name|baseMerge
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|SVNLog
name|log
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNVersionedProperties
name|working
init|=
name|getProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|base
init|=
name|getBaseProperties
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|mergeProperties
argument_list|(
name|name
argument_list|,
name|serverBaseProps
argument_list|,
name|base
operator|.
name|asMap
argument_list|()
argument_list|,
name|working
operator|.
name|asMap
argument_list|()
argument_list|,
name|propDiff
argument_list|,
name|localLabel
argument_list|,
name|latestLabel
argument_list|,
name|baseMerge
argument_list|,
name|dryRun
argument_list|,
name|log
argument_list|)
return|;
block|}
specifier|public
name|SVNStatusType
name|mergeProperties
parameter_list|(
name|String
name|name
parameter_list|,
name|SVNProperties
name|serverBaseProps
parameter_list|,
name|SVNProperties
name|baseProps
parameter_list|,
name|SVNProperties
name|workingProps
parameter_list|,
name|SVNProperties
name|propDiff
parameter_list|,
name|String
name|localLabel
parameter_list|,
name|String
name|latestLabel
parameter_list|,
name|boolean
name|baseMerge
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|SVNLog
name|log
parameter_list|)
throws|throws
name|SVNException
block|{
name|localLabel
operator|=
name|localLabel
operator|==
literal|null
condition|?
literal|"(modified)"
else|:
name|localLabel
expr_stmt|;
name|latestLabel
operator|=
name|latestLabel
operator|==
literal|null
condition|?
literal|"(latest)"
else|:
name|latestLabel
expr_stmt|;
name|byte
index|[]
name|conflictStart
init|=
operator|(
literal|"<<<<<<< "
operator|+
name|localLabel
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|conflictEnd
init|=
operator|(
literal|">>>>>>> "
operator|+
name|latestLabel
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|separator
init|=
operator|(
literal|"======="
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ISVNMergerFactory
name|factory
init|=
name|myWCAccess
operator|.
name|getOptions
argument_list|()
operator|.
name|getMergerFactory
argument_list|()
decl_stmt|;
name|ISVNMerger
name|merger
init|=
name|factory
operator|.
name|createMerger
argument_list|(
name|conflictStart
argument_list|,
name|separator
argument_list|,
name|conflictEnd
argument_list|)
decl_stmt|;
name|propDiff
operator|=
name|propDiff
operator|==
literal|null
condition|?
operator|new
name|SVNProperties
argument_list|()
else|:
name|propDiff
expr_stmt|;
name|SVNMergeResult
name|result
init|=
name|merger
operator|.
name|mergeProperties
argument_list|(
name|name
argument_list|,
name|workingProps
argument_list|,
name|baseProps
argument_list|,
name|serverBaseProps
argument_list|,
name|propDiff
argument_list|,
name|this
argument_list|,
name|log
argument_list|,
name|baseMerge
argument_list|,
name|dryRun
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|getMergeStatus
argument_list|()
return|;
block|}
specifier|public
name|SVNStatusType
name|mergeText
parameter_list|(
name|String
name|localPath
parameter_list|,
name|File
name|base
parameter_list|,
name|File
name|latest
parameter_list|,
name|File
name|copyFromText
parameter_list|,
name|String
name|localLabel
parameter_list|,
name|String
name|baseLabel
parameter_list|,
name|String
name|latestLabel
parameter_list|,
name|SVNProperties
name|propChanges
parameter_list|,
name|boolean
name|dryRun
parameter_list|,
name|SVNDiffOptions
name|options
parameter_list|,
name|SVNLog
name|log
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|localPath
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|&&
name|copyFromText
operator|==
literal|null
condition|)
block|{
return|return
name|SVNStatusType
operator|.
name|MISSING
return|;
block|}
name|boolean
name|saveLog
init|=
name|log
operator|==
literal|null
decl_stmt|;
name|log
operator|=
name|log
operator|==
literal|null
condition|?
name|getLog
argument_list|()
else|:
name|log
expr_stmt|;
name|SVNVersionedProperties
name|props
init|=
name|getProperties
argument_list|(
name|localPath
argument_list|)
decl_stmt|;
name|String
name|mimeType
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|propChanges
operator|!=
literal|null
operator|&&
name|propChanges
operator|.
name|containsName
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
condition|)
block|{
name|mimeType
operator|=
name|propChanges
operator|.
name|getStringValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|copyFromText
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
name|props
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|MIME_TYPE
argument_list|)
expr_stmt|;
block|}
name|localLabel
operator|=
name|localLabel
operator|==
literal|null
condition|?
literal|".working"
else|:
name|localLabel
expr_stmt|;
name|baseLabel
operator|=
name|baseLabel
operator|==
literal|null
condition|?
literal|".old"
else|:
name|baseLabel
expr_stmt|;
name|latestLabel
operator|=
name|latestLabel
operator|==
literal|null
condition|?
literal|".new"
else|:
name|latestLabel
expr_stmt|;
name|byte
index|[]
name|conflictStart
init|=
operator|(
literal|"<<<<<<< "
operator|+
name|localLabel
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|conflictEnd
init|=
operator|(
literal|">>>>>>> "
operator|+
name|latestLabel
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|byte
index|[]
name|separator
init|=
operator|(
literal|"======="
operator|)
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ISVNMergerFactory
name|factory
init|=
name|myWCAccess
operator|.
name|getOptions
argument_list|()
operator|.
name|getMergerFactory
argument_list|()
decl_stmt|;
name|ISVNMerger
name|merger
init|=
name|factory
operator|.
name|createMerger
argument_list|(
name|conflictStart
argument_list|,
name|separator
argument_list|,
name|conflictEnd
argument_list|)
decl_stmt|;
name|String
name|workingText
init|=
name|localPath
decl_stmt|;
if|if
condition|(
name|copyFromText
operator|!=
literal|null
condition|)
block|{
name|String
name|copyFromTextPath
init|=
name|copyFromText
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|String
name|thisPath
init|=
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
operator|.
name|replace
argument_list|(
name|File
operator|.
name|separatorChar
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
name|workingText
operator|=
name|copyFromTextPath
operator|.
name|substring
argument_list|(
name|thisPath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|workingText
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|workingText
operator|=
name|workingText
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|File
name|tmpTarget
init|=
name|SVNTranslator
operator|.
name|detranslateWorkingCopy
argument_list|(
name|this
argument_list|,
name|workingText
argument_list|,
name|propChanges
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|base
operator|=
name|SVNTranslator
operator|.
name|maybeUpdateTargetEOLs
argument_list|(
name|this
argument_list|,
name|base
argument_list|,
name|propChanges
argument_list|)
expr_stmt|;
name|File
name|resultFile
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|SVNMergeFileSet
name|mergeFileSet
init|=
operator|new
name|SVNMergeFileSet
argument_list|(
name|this
argument_list|,
name|log
argument_list|,
name|base
argument_list|,
name|tmpTarget
argument_list|,
name|localPath
argument_list|,
name|latest
argument_list|,
name|resultFile
argument_list|,
name|copyFromText
argument_list|,
name|mimeType
argument_list|)
decl_stmt|;
name|mergeFileSet
operator|.
name|setMergeLabels
argument_list|(
name|baseLabel
argument_list|,
name|localLabel
argument_list|,
name|latestLabel
argument_list|)
expr_stmt|;
name|SVNMergeResult
name|mergeResult
decl_stmt|;
try|try
block|{
name|mergeResult
operator|=
name|merger
operator|.
name|mergeText
argument_list|(
name|mergeFileSet
argument_list|,
name|dryRun
argument_list|,
name|options
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|dryRun
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|resultFile
argument_list|)
expr_stmt|;
block|}
block|}
name|mergeFileSet
operator|.
name|dispose
argument_list|()
expr_stmt|;
if|if
condition|(
name|saveLog
condition|)
block|{
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
return|return
name|mergeResult
operator|.
name|getMergeStatus
argument_list|()
return|;
block|}
specifier|public
name|InputStream
name|getBaseFileForReading
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|tmp
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|path
init|=
name|tmp
condition|?
literal|"tmp/"
else|:
literal|""
decl_stmt|;
name|path
operator|+=
literal|"text-base/"
operator|+
name|name
operator|+
literal|".svn-base"
expr_stmt|;
name|File
name|baseFile
init|=
name|getAdminFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|baseFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
return|;
block|}
specifier|public
name|OutputStream
name|getBaseFileForWriting
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
specifier|final
name|String
name|fileName
init|=
name|name
decl_stmt|;
specifier|final
name|File
name|tmpFile
init|=
name|getBaseFile
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|OutputStream
name|os
init|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|tmpFile
argument_list|)
decl_stmt|;
return|return
operator|new
name|OutputStream
argument_list|()
block|{
specifier|private
name|String
name|myName
init|=
name|fileName
decl_stmt|;
specifier|private
name|File
name|myTmpFile
init|=
name|tmpFile
decl_stmt|;
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|os
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
name|File
name|baseFile
init|=
name|getBaseFile
argument_list|(
name|myName
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNFileUtil
operator|.
name|rename
argument_list|(
name|myTmpFile
argument_list|,
name|baseFile
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|baseFile
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|wrap
argument_list|(
literal|"Your .svn/tmp directory may be missing or corrupt; run 'svn cleanup' and try again"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getPropertyTime
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|String
name|path
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-props"
else|:
literal|"props/"
operator|+
name|name
operator|+
literal|".svn-work"
decl_stmt|;
name|File
name|file
init|=
name|getAdminFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
name|file
operator|.
name|lastModified
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|SVNLog
name|getLog
parameter_list|()
block|{
name|int
name|index
init|=
literal|0
decl_stmt|;
name|Resource
name|logFile
init|=
literal|null
decl_stmt|;
name|Resource
name|tmpFile
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|logFile
operator|=
name|getAdminFile
argument_list|(
literal|"log"
operator|+
operator|(
name|index
operator|==
literal|0
condition|?
literal|""
else|:
literal|"."
operator|+
name|index
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|logFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|index
operator|++
expr_stmt|;
continue|continue;
block|}
name|tmpFile
operator|=
name|getAdminFile
argument_list|(
literal|"tmp/log"
operator|+
operator|(
name|index
operator|==
literal|0
condition|?
literal|""
else|:
literal|"."
operator|+
name|index
operator|)
argument_list|)
expr_stmt|;
return|return
operator|new
name|SVNLogImpl
argument_list|(
name|logFile
argument_list|,
name|tmpFile
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
specifier|public
name|void
name|runLogs
parameter_list|()
throws|throws
name|SVNException
block|{
name|runLogs
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|runLogs
parameter_list|(
name|boolean
name|rerun
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNLogRunner
name|runner
init|=
operator|new
name|SVNLogRunner
argument_list|(
name|rerun
argument_list|)
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
name|SVNLog
name|log
init|=
literal|null
decl_stmt|;
name|runner
operator|.
name|logStarted
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|Resource
name|logFile
init|=
literal|null
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|getWCAccess
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|getWCAccess
argument_list|()
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
block|}
name|logFile
operator|=
name|getAdminFile
argument_list|(
literal|"log"
operator|+
operator|(
name|index
operator|==
literal|0
condition|?
literal|""
else|:
literal|"."
operator|+
name|index
operator|)
argument_list|)
expr_stmt|;
name|log
operator|=
operator|new
name|SVNLogImpl
argument_list|(
name|logFile
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|log
operator|.
name|exists
argument_list|()
condition|)
block|{
name|log
operator|.
name|run
argument_list|(
name|runner
argument_list|)
expr_stmt|;
name|markLogProcessed
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
name|index
operator|++
expr_stmt|;
continue|continue;
block|}
break|break;
block|}
block|}
catch|catch
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|runner
operator|.
name|logFailed
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|SVNException
condition|)
block|{
throw|throw
operator|(
name|SVNException
operator|)
name|e
throw|;
block|}
if|else if
condition|(
name|e
operator|instanceof
name|Error
condition|)
block|{
throw|throw
operator|(
name|Error
operator|)
name|e
throw|;
block|}
throw|throw
operator|new
name|SVNException
argument_list|(
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|runner
operator|.
name|logCompleted
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// delete all logs, there shoudn't be left unprocessed.
name|File
index|[]
name|logsFiles
init|=
name|getAdminDirectory
argument_list|()
operator|.
name|listFiles
argument_list|()
decl_stmt|;
if|if
condition|(
name|logsFiles
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|logsFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|logsFiles
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"log"
argument_list|)
operator|&&
name|logsFiles
index|[
name|i
index|]
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|logsFiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|removeFromRevisionControl
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|deleteWorkingFiles
parameter_list|,
name|boolean
name|reportInstantError
parameter_list|)
throws|throws
name|SVNException
block|{
name|getWCAccess
argument_list|()
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|boolean
name|isFile
init|=
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|leftSomething
init|=
literal|false
decl_stmt|;
name|SVNEntry
name|entry
init|=
name|getVersionedEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|isFile
condition|)
block|{
name|File
name|path
init|=
name|getFile
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|boolean
name|wcSpecial
init|=
name|getProperties
argument_list|(
name|name
argument_list|)
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
decl_stmt|;
name|boolean
name|localSpecial
init|=
operator|!
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
condition|?
literal|false
else|:
name|SVNFileType
operator|.
name|getType
argument_list|(
name|path
argument_list|)
operator|==
name|SVNFileType
operator|.
name|SYMLINK
decl_stmt|;
name|boolean
name|textModified
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|wcSpecial
operator|||
operator|!
name|localSpecial
condition|)
block|{
name|textModified
operator|=
name|hasTextModifications
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|reportInstantError
operator|&&
name|textModified
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
argument_list|,
literal|"File ''{0}'' has local modifications"
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|deleteEntry
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|getFile
argument_list|(
name|SVNAdminUtil
operator|.
name|getTextBasePath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|getFile
argument_list|(
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|getFile
argument_list|(
name|SVNAdminUtil
operator|.
name|getPropPath
argument_list|(
name|name
argument_list|,
name|entry
operator|.
name|getKind
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|deleteWorkingFiles
condition|)
block|{
if|if
condition|(
name|textModified
operator|||
operator|(
operator|!
name|wcSpecial
operator|&&
name|localSpecial
operator|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|myCommitParameters
operator|==
literal|null
operator|||
name|myCommitParameters
operator|.
name|onFileDeletion
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|SVNEntry
name|dirEntry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|dirEntry
operator|.
name|setIncomplete
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|SVNPropertiesManager
operator|.
name|deleteWCProperties
argument_list|(
name|this
argument_list|,
name|getThisDirName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|nextEntry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|String
name|entryName
init|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|nextEntry
operator|.
name|getName
argument_list|()
argument_list|)
condition|?
literal|null
else|:
name|nextEntry
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|nextEntry
operator|.
name|isFile
argument_list|()
condition|)
block|{
try|try
block|{
name|removeFromRevisionControl
argument_list|(
name|entryName
argument_list|,
name|deleteWorkingFiles
argument_list|,
name|reportInstantError
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
if|if
condition|(
name|reportInstantError
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|leftSomething
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
if|else if
condition|(
name|entryName
operator|!=
literal|null
operator|&&
name|nextEntry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|File
name|entryPath
init|=
name|getFile
argument_list|(
name|entryName
argument_list|)
decl_stmt|;
if|if
condition|(
name|getWCAccess
argument_list|()
operator|.
name|isMissing
argument_list|(
name|entryPath
argument_list|)
operator|||
name|nextEntry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
name|deleteEntry
argument_list|(
name|entryName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|SVNAdminArea
name|entryArea
init|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|entryPath
argument_list|)
decl_stmt|;
name|entryArea
operator|.
name|removeFromRevisionControl
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
name|deleteWorkingFiles
argument_list|,
name|reportInstantError
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|==
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
condition|)
block|{
if|if
condition|(
name|reportInstantError
condition|)
block|{
throw|throw
name|e
throw|;
block|}
name|leftSomething
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|getWCAccess
argument_list|()
operator|.
name|isWCRoot
argument_list|(
name|getRoot
argument_list|()
argument_list|)
condition|)
block|{
name|SVNEntry
name|dirEntryInParent
init|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|getRoot
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|getEntry
argument_list|(
name|getRoot
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirEntryInParent
operator|.
name|getDepth
argument_list|()
operator|!=
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|getRoot
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|deleteEntry
argument_list|(
name|getRoot
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|getRoot
argument_list|()
operator|.
name|getParentFile
argument_list|()
argument_list|)
operator|.
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|destroyAdminArea
argument_list|()
expr_stmt|;
if|if
condition|(
name|deleteWorkingFiles
operator|&&
operator|!
name|leftSomething
condition|)
block|{
if|if
condition|(
operator|(
name|myCommitParameters
operator|==
literal|null
operator|||
name|myCommitParameters
operator|.
name|onDirectoryDeletion
argument_list|(
name|getRoot
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
name|getRoot
argument_list|()
operator|.
name|delete
argument_list|()
condition|)
block|{
comment|// shouldn't throw exception when directory was intentionally left non-empty.
name|leftSomething
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|leftSomething
operator|&&
name|myCommitParameters
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_LEFT_LOCAL_MOD
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|extendLockToTree
parameter_list|()
throws|throws
name|SVNException
block|{
specifier|final
name|boolean
name|writeLock
init|=
name|isLocked
argument_list|()
decl_stmt|;
name|ISVNEntryHandler
name|entryHandler
init|=
operator|new
name|ISVNEntryHandler
argument_list|()
block|{
specifier|public
name|void
name|handleEntry
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|getThisDirName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
name|SVNAdminArea
name|area
init|=
name|getWCAccess
argument_list|()
operator|.
name|probeTry
argument_list|(
name|path
argument_list|,
name|isLocked
argument_list|()
argument_list|,
name|SVNWCAccess
operator|.
name|INFINITE_DEPTH
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeLock
operator|&&
name|area
operator|!=
literal|null
operator|&&
operator|!
name|area
operator|.
name|isLocked
argument_list|()
condition|)
block|{
name|area
operator|.
name|lock
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
if|if
condition|(
name|svne
operator|.
name|getErrorMessage
argument_list|()
operator|.
name|getErrorCode
argument_list|()
operator|!=
name|SVNErrorCode
operator|.
name|WC_LOCKED
condition|)
block|{
throw|throw
name|svne
throw|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|handleError
parameter_list|(
name|File
name|path
parameter_list|,
name|SVNErrorMessage
name|error
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
name|getWCAccess
argument_list|()
operator|.
name|walkEntries
argument_list|(
name|getRoot
argument_list|()
argument_list|,
name|entryHandler
argument_list|,
literal|false
argument_list|,
name|SVNDepth
operator|.
name|INFINITY
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|foldScheduling
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|attributes
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|attributes
operator|.
name|containsKey
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
operator|||
name|force
condition|)
block|{
return|return;
block|}
name|String
name|schedule
init|=
operator|(
name|String
operator|)
name|attributes
operator|.
name|get
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
decl_stmt|;
name|schedule
operator|=
literal|""
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|?
literal|null
else|:
name|schedule
expr_stmt|;
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
return|return;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_SCHEDULE_CONFLICT
argument_list|,
literal|"''{0}'' is not under version control"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNEntry
name|thisDirEntry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|&&
name|thisDirEntry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_SCHEDULE_CONFLICT
argument_list|,
literal|"Can''t add ''{0}'' to deleted directory; try undeleting its parent directory first"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_SCHEDULE_CONFLICT
argument_list|,
literal|"Can''t replace ''{0}'' in deleted directory; try undeleting its parent directory first"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|isAbsent
argument_list|()
operator|&&
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_SCHEDULE_CONFLICT
argument_list|,
literal|"''{0}'' is marked as absent, so it cannot be scheduled for addition"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getSchedule
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|deleteEntry
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|attributes
operator|.
name|remove
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getSchedule
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|remove
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getSchedule
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|,
name|SVNProperty
operator|.
name|SCHEDULE_DELETE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|||
name|SVNProperty
operator|.
name|SCHEDULE_REPLACE
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
condition|)
block|{
name|attributes
operator|.
name|remove
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|SVNProperty
operator|.
name|SCHEDULE_ADD
operator|.
name|equals
argument_list|(
name|schedule
argument_list|)
operator|&&
operator|!
name|entry
operator|.
name|isDeleted
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_SCHEDULE_CONFLICT
argument_list|,
literal|"Entry ''{0}'' is already under version control"
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|schedule
operator|==
literal|null
condition|)
block|{
name|attributes
operator|.
name|remove
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|SVNEntry
name|modifyEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|Map
name|attributes
parameter_list|,
name|boolean
name|save
parameter_list|,
name|boolean
name|force
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|name
operator|=
name|getThisDirName
argument_list|()
expr_stmt|;
block|}
name|boolean
name|deleted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|containsKey
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
condition|)
block|{
name|SVNEntry
name|entryBefore
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|foldScheduling
argument_list|(
name|name
argument_list|,
name|attributes
argument_list|,
name|force
argument_list|)
expr_stmt|;
name|SVNEntry
name|entryAfter
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entryBefore
operator|!=
literal|null
operator|&&
name|entryAfter
operator|==
literal|null
condition|)
block|{
name|deleted
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|deleted
condition|)
block|{
name|entry
operator|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
name|addEntry
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|Map
name|entryAttrs
init|=
name|entry
operator|.
name|asMap
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|atts
init|=
name|attributes
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|atts
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|attName
init|=
operator|(
name|String
operator|)
name|atts
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isEntryPropertyApplicable
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|atts
operator|.
name|remove
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|Object
name|value
init|=
name|attributes
operator|.
name|get
argument_list|(
name|attName
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|String
condition|)
block|{
name|String
name|strValue
init|=
operator|(
name|String
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
operator|||
name|SVNProperty
operator|.
name|PRESENT_PROPS
operator|.
name|equals
argument_list|(
name|attName
argument_list|)
condition|)
block|{
name|String
index|[]
name|propsArray
init|=
name|SVNAdminArea
operator|.
name|fromString
argument_list|(
name|strValue
argument_list|,
literal|" "
argument_list|)
decl_stmt|;
name|entryAttrs
operator|.
name|put
argument_list|(
name|attName
argument_list|,
name|propsArray
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|entryAttrs
operator|.
name|put
argument_list|(
name|attName
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entryAttrs
operator|.
name|remove
argument_list|(
name|attName
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|SVNEntry
name|rootEntry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootEntry
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|SVNRevision
operator|.
name|isValidRevisionNumber
argument_list|(
name|entry
operator|.
name|getRevision
argument_list|()
argument_list|)
condition|)
block|{
name|entry
operator|.
name|setRevision
argument_list|(
name|rootEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|setURL
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|rootEntry
operator|.
name|getURL
argument_list|()
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getRepositoryRoot
argument_list|()
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|setRepositoryRoot
argument_list|(
name|rootEntry
operator|.
name|getRepositoryRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getUUID
argument_list|()
operator|==
literal|null
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setUUID
argument_list|(
name|rootEntry
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isEntryPropertyApplicable
argument_list|(
name|SVNProperty
operator|.
name|CACHABLE_PROPS
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getCachableProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|setCachableProperties
argument_list|(
name|rootEntry
operator|.
name|getCachableProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|attributes
operator|.
name|containsKey
argument_list|(
name|SVNProperty
operator|.
name|SCHEDULE
argument_list|)
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|entry
operator|.
name|setCopied
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setCopyFromRevision
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|entry
operator|.
name|setCopyFromURL
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|setKeepLocal
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|save
condition|)
block|{
name|saveEntries
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
specifier|public
name|void
name|deleteEntry
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|entries
init|=
name|loadEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
condition|)
block|{
name|entries
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SVNEntry
name|getEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|hidden
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|entries
init|=
name|loadEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|!=
literal|null
operator|&&
name|entries
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hidden
operator|&&
name|entry
operator|.
name|isHidden
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|entry
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|SVNEntry
name|getVersionedEntry
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|hidden
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
name|hidden
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"''{0}'' is not under version control"
argument_list|,
name|getFile
argument_list|(
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
return|return
name|entry
return|;
block|}
specifier|public
name|SVNEntry
name|addEntry
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|entries
init|=
name|loadEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
name|myEntries
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
name|entries
operator|=
name|myEntries
expr_stmt|;
block|}
name|SVNEntry
name|entry
init|=
name|entries
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|?
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
name|name
argument_list|)
else|:
operator|new
name|SVNEntry
argument_list|(
operator|new
name|SVNHashMap
argument_list|()
argument_list|,
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
name|entries
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
return|;
block|}
specifier|public
name|Iterator
name|entries
parameter_list|(
name|boolean
name|hidden
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|entries
init|=
name|loadEntries
argument_list|()
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|EMPTY_LIST
operator|.
name|iterator
argument_list|()
return|;
block|}
name|List
name|copy
init|=
operator|new
name|ArrayList
argument_list|(
name|entries
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hidden
condition|)
block|{
for|for
control|(
name|Iterator
name|iterator
init|=
name|copy
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isHidden
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
return|return
name|copy
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|Map
name|getEntries
parameter_list|()
throws|throws
name|SVNException
block|{
return|return
name|loadEntries
argument_list|()
return|;
block|}
specifier|public
name|void
name|cleanup
parameter_list|()
throws|throws
name|SVNException
block|{
name|getWCAccess
argument_list|()
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|entries
argument_list|(
literal|false
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
operator|&&
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|File
name|childDir
init|=
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
try|try
block|{
name|SVNAdminArea
name|child
init|=
name|getWCAccess
argument_list|()
operator|.
name|open
argument_list|(
name|childDir
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|child
operator|.
name|cleanup
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|SVNCancelException
condition|)
block|{
throw|throw
name|e
throw|;
block|}
if|if
condition|(
name|isSafeCleanup
argument_list|()
condition|)
block|{
continue|continue;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
else|else
block|{
name|hasPropModifications
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|hasTextModifications
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|isKillMe
argument_list|()
condition|)
block|{
name|removeFromRevisionControl
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|runLogs
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|getAdminFile
argument_list|(
literal|"tmp"
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|hasTextConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
return|return
literal|false
return|;
block|}
name|boolean
name|conflicted
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|getConflictNew
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|conflicted
operator|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictNew
argument_list|()
argument_list|)
argument_list|)
operator|==
name|SVNFileType
operator|.
name|FILE
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conflicted
operator|&&
name|entry
operator|.
name|getConflictWorking
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|conflicted
operator|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictWorking
argument_list|()
argument_list|)
argument_list|)
operator|==
name|SVNFileType
operator|.
name|FILE
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|conflicted
operator|&&
name|entry
operator|.
name|getConflictOld
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|conflicted
operator|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|getFile
argument_list|(
name|entry
operator|.
name|getConflictOld
argument_list|()
argument_list|)
argument_list|)
operator|==
name|SVNFileType
operator|.
name|FILE
expr_stmt|;
block|}
return|return
name|conflicted
return|;
block|}
specifier|public
name|boolean
name|hasPropConflict
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getPropRejectFile
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|SVNFileType
operator|.
name|getType
argument_list|(
name|getFile
argument_list|(
name|entry
operator|.
name|getPropRejectFile
argument_list|()
argument_list|)
argument_list|)
operator|==
name|SVNFileType
operator|.
name|FILE
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|File
name|getRoot
parameter_list|()
block|{
return|return
name|myDirectory
return|;
block|}
specifier|public
name|File
name|getAdminTempDirectory
parameter_list|()
block|{
return|return
name|getAdminFile
argument_list|(
literal|"tmp"
argument_list|)
return|;
block|}
specifier|public
name|File
name|getAdminDirectory
parameter_list|()
block|{
return|return
name|myAdminRoot
return|;
block|}
specifier|public
name|Resource
name|getAdminFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|new
name|Resource
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
name|File
name|getFile
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
operator|new
name|Resource
argument_list|(
name|getRoot
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
name|SVNWCAccess
name|getWCAccess
parameter_list|()
block|{
return|return
name|myWCAccess
return|;
block|}
specifier|public
name|void
name|setWCAccess
parameter_list|(
name|SVNWCAccess
name|wcAccess
parameter_list|)
block|{
name|myWCAccess
operator|=
name|wcAccess
expr_stmt|;
block|}
specifier|public
name|void
name|closeVersionedProperties
parameter_list|()
block|{
name|myProperties
operator|=
literal|null
expr_stmt|;
name|myBaseProperties
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|closeWCProperties
parameter_list|()
block|{
name|myWCProperties
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|closeEntries
parameter_list|()
block|{
name|myEntries
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|File
name|getBaseFile
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|String
name|path
init|=
name|tmp
condition|?
literal|"tmp/"
else|:
literal|""
decl_stmt|;
name|path
operator|+=
literal|"text-base/"
operator|+
name|name
operator|+
literal|".svn-base"
expr_stmt|;
return|return
name|getAdminFile
argument_list|(
name|path
argument_list|)
return|;
block|}
specifier|public
name|int
name|getWorkingCopyFormatVersion
parameter_list|()
block|{
return|return
name|myWCFormatVersion
return|;
block|}
specifier|public
name|void
name|setWorkingCopyFormatVersion
parameter_list|(
name|int
name|wcFormatVersion
parameter_list|)
block|{
name|myWCFormatVersion
operator|=
name|wcFormatVersion
expr_stmt|;
block|}
specifier|protected
specifier|abstract
name|void
name|writeEntries
parameter_list|(
name|Writer
name|writer
parameter_list|)
throws|throws
name|IOException
throws|,
name|SVNException
function_decl|;
specifier|protected
specifier|abstract
name|Map
name|fetchEntries
parameter_list|()
throws|throws
name|SVNException
function_decl|;
specifier|protected
specifier|abstract
name|boolean
name|readExtraOptions
parameter_list|(
name|BufferedReader
name|reader
parameter_list|,
name|Map
name|entryAttrs
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
function_decl|;
specifier|protected
specifier|abstract
name|int
name|writeExtraOptions
parameter_list|(
name|Writer
name|writer
parameter_list|,
name|String
name|entryName
parameter_list|,
name|Map
name|entryAttrs
parameter_list|,
name|int
name|emptyFields
parameter_list|)
throws|throws
name|SVNException
throws|,
name|IOException
function_decl|;
specifier|protected
name|SVNAdminArea
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|myDirectory
operator|=
name|dir
expr_stmt|;
name|myAdminRoot
operator|=
operator|new
name|Resource
argument_list|(
name|dir
argument_list|,
name|SVNFileUtil
operator|.
name|getAdminDirectoryName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|File
name|getBasePropertiesFile
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|String
name|path
init|=
operator|!
name|tmp
condition|?
literal|""
else|:
literal|"tmp/"
decl_stmt|;
name|path
operator|+=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-prop-base"
else|:
literal|"prop-base/"
operator|+
name|name
operator|+
literal|".svn-base"
expr_stmt|;
name|File
name|propertiesFile
init|=
name|getAdminFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|propertiesFile
return|;
block|}
specifier|protected
name|File
name|getRevertPropertiesFile
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|String
name|path
init|=
operator|!
name|tmp
condition|?
literal|""
else|:
literal|"tmp/"
decl_stmt|;
name|path
operator|+=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-prop-revert"
else|:
literal|"prop-base/"
operator|+
name|name
operator|+
literal|".svn-revert"
expr_stmt|;
name|File
name|propertiesFile
init|=
name|getAdminFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|propertiesFile
return|;
block|}
specifier|public
name|File
name|getPropertiesFile
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|tmp
parameter_list|)
block|{
name|String
name|path
init|=
operator|!
name|tmp
condition|?
literal|""
else|:
literal|"tmp/"
decl_stmt|;
name|path
operator|+=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|?
literal|"dir-props"
else|:
literal|"props/"
operator|+
name|name
operator|+
literal|".svn-work"
expr_stmt|;
name|File
name|propertiesFile
init|=
name|getAdminFile
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
name|propertiesFile
return|;
block|}
specifier|protected
name|Map
name|loadEntries
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
name|myEntries
operator|!=
literal|null
condition|)
block|{
return|return
name|myEntries
return|;
block|}
name|myEntries
operator|=
name|fetchEntries
argument_list|()
expr_stmt|;
if|if
condition|(
name|myEntries
operator|!=
literal|null
condition|)
block|{
name|resolveDefaults
argument_list|(
name|myEntries
argument_list|)
expr_stmt|;
block|}
return|return
name|myEntries
return|;
block|}
specifier|protected
name|Map
name|getBasePropertiesStorage
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
if|if
condition|(
name|myBaseProperties
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|myBaseProperties
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|myBaseProperties
return|;
block|}
specifier|protected
name|Map
name|getRevertPropertiesStorage
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
if|if
condition|(
name|myRevertProperties
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|myRevertProperties
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|myRevertProperties
return|;
block|}
specifier|protected
name|Map
name|getPropertiesStorage
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
if|if
condition|(
name|myProperties
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|myProperties
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|myProperties
return|;
block|}
specifier|protected
name|Map
name|getWCPropertiesStorage
parameter_list|(
name|boolean
name|create
parameter_list|)
block|{
if|if
condition|(
name|myWCProperties
operator|==
literal|null
operator|&&
name|create
condition|)
block|{
name|myWCProperties
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
block|}
return|return
name|myWCProperties
return|;
block|}
specifier|public
specifier|static
name|String
name|asString
parameter_list|(
name|String
index|[]
name|array
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
name|String
name|str
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|array
operator|!=
literal|null
condition|)
block|{
name|str
operator|=
literal|""
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|str
operator|+=
name|array
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|i
operator|<
name|array
operator|.
name|length
operator|-
literal|1
condition|)
block|{
name|str
operator|+=
name|delimiter
expr_stmt|;
block|}
block|}
block|}
return|return
name|str
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|fromString
parameter_list|(
name|String
name|str
parameter_list|,
name|String
name|delimiter
parameter_list|)
block|{
if|if
condition|(
name|str
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
name|LinkedList
name|list
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
name|int
name|startInd
init|=
literal|0
decl_stmt|;
name|int
name|ind
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|ind
operator|=
name|str
operator|.
name|indexOf
argument_list|(
name|delimiter
argument_list|,
name|startInd
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|startInd
argument_list|,
name|ind
argument_list|)
argument_list|)
expr_stmt|;
name|startInd
operator|=
name|ind
expr_stmt|;
while|while
condition|(
name|startInd
operator|<
name|str
operator|.
name|length
argument_list|()
operator|&&
name|str
operator|.
name|charAt
argument_list|(
name|startInd
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|startInd
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|startInd
operator|<
name|str
operator|.
name|length
argument_list|()
condition|)
block|{
name|list
operator|.
name|add
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|startInd
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|String
index|[]
operator|)
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
specifier|public
name|void
name|commit
parameter_list|(
name|String
name|target
parameter_list|,
name|SVNCommitInfo
name|info
parameter_list|,
name|SVNProperties
name|wcPropChanges
parameter_list|,
name|boolean
name|removeLock
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|boolean
name|removeChangelist
parameter_list|,
name|Collection
name|explicitCommitPaths
parameter_list|,
name|ISVNCommitParameters
name|params
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNAdminArea
name|anchor
init|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|getWCAccess
argument_list|()
operator|.
name|getAnchor
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|getRelativePath
argument_list|(
name|anchor
argument_list|)
decl_stmt|;
name|path
operator|=
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|?
name|path
else|:
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|path
argument_list|,
name|target
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|explicitCommitPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// if this item is explicitly copied -> skip it.
name|SVNEntry
name|entry
init|=
name|getEntry
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|entry
operator|.
name|getCopyFromURL
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
block|}
name|SVNLog
name|log
init|=
name|getLog
argument_list|()
decl_stmt|;
name|String
name|checksum
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|target
argument_list|)
condition|)
block|{
name|log
operator|.
name|logRemoveRevertFile
argument_list|(
name|target
argument_list|,
name|this
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|logRemoveRevertFile
argument_list|(
name|target
argument_list|,
name|this
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|File
name|baseFile
init|=
name|getBaseFile
argument_list|(
name|target
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|SVNFileType
name|baseType
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|baseFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseType
operator|==
name|SVNFileType
operator|.
name|NONE
condition|)
block|{
name|baseFile
operator|=
name|getBaseFile
argument_list|(
name|target
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|baseType
operator|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|baseFile
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|baseType
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|checksum
operator|=
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|baseFile
argument_list|)
expr_stmt|;
block|}
name|recursive
operator|=
literal|false
expr_stmt|;
block|}
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_REVISION
argument_list|)
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|info
operator|.
name|getNewRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|COMMITTED_DATE
argument_list|)
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
name|info
operator|.
name|getDate
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|LAST_AUTHOR
argument_list|)
argument_list|,
name|info
operator|.
name|getAuthor
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|checksum
operator|!=
literal|null
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|CHECKSUM
argument_list|)
argument_list|,
name|checksum
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|removeLock
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE_LOCK
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|removeChangelist
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE_CHANGELIST
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|REVISION_ATTR
argument_list|,
name|info
operator|==
literal|null
condition|?
literal|null
else|:
name|Long
operator|.
name|toString
argument_list|(
name|info
operator|.
name|getNewRevision
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|explicitCommitPaths
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
literal|"implicit"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
block|}
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COMMIT
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|wcPropChanges
operator|!=
literal|null
operator|&&
operator|!
name|wcPropChanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|Iterator
name|propNames
init|=
name|wcPropChanges
operator|.
name|nameSet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|propNames
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|propName
init|=
operator|(
name|String
operator|)
name|propNames
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|propValue
init|=
name|wcPropChanges
operator|.
name|getSVNPropertyValue
argument_list|(
name|propName
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|PROPERTY_NAME_ATTR
argument_list|,
name|propName
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|PROPERTY_VALUE_ATTR
argument_list|,
name|propValue
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_WC_PROPERTY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
name|runLogs
argument_list|()
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
for|for
control|(
name|Iterator
name|ents
init|=
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|ents
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|ents
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isThisDir
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|getDepth
argument_list|()
operator|==
name|SVNDepth
operator|.
name|EXCLUDE
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|==
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|File
name|childPath
init|=
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNAdminArea
name|childDir
init|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|childPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|childDir
operator|!=
literal|null
condition|)
block|{
name|childDir
operator|.
name|commit
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
name|info
argument_list|,
literal|null
argument_list|,
name|removeLock
argument_list|,
literal|true
argument_list|,
name|removeChangelist
argument_list|,
name|explicitCommitPaths
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|entry
operator|.
name|isScheduledForDeletion
argument_list|()
condition|)
block|{
name|SVNEntry
name|parentEntry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentEntry
operator|.
name|isScheduledForReplacement
argument_list|()
condition|)
block|{
continue|continue;
block|}
block|}
name|commit
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|info
argument_list|,
literal|null
argument_list|,
name|removeLock
argument_list|,
literal|false
argument_list|,
name|removeChangelist
argument_list|,
name|explicitCommitPaths
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|walkThisDirectory
parameter_list|(
name|ISVNEntryHandler
name|handler
parameter_list|,
name|boolean
name|showHidden
parameter_list|,
name|SVNDepth
name|depth
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|thisDir
init|=
name|getRoot
argument_list|()
decl_stmt|;
name|SVNEntry
name|thisEntry
init|=
name|getEntry
argument_list|(
name|getThisDirName
argument_list|()
argument_list|,
name|showHidden
argument_list|)
decl_stmt|;
if|if
condition|(
name|thisEntry
operator|==
literal|null
condition|)
block|{
name|handler
operator|.
name|handleError
argument_list|(
name|thisDir
argument_list|,
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"Directory ''{0}'' has no THIS_DIR entry"
argument_list|,
name|thisDir
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|handler
operator|.
name|handleEntry
argument_list|(
name|thisDir
argument_list|,
name|thisEntry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|handler
operator|.
name|handleError
argument_list|(
name|thisDir
argument_list|,
name|svne
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|EMPTY
condition|)
block|{
return|return;
block|}
for|for
control|(
name|Iterator
name|entries
init|=
name|entries
argument_list|(
name|showHidden
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|getWCAccess
argument_list|()
operator|.
name|checkCancelled
argument_list|()
expr_stmt|;
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|File
name|childPath
init|=
name|getFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
operator|||
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|)
operator|>=
literal|0
condition|)
block|{
try|try
block|{
name|handler
operator|.
name|handleEntry
argument_list|(
name|childPath
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|handler
operator|.
name|handleError
argument_list|(
name|childPath
argument_list|,
name|svne
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|entry
operator|.
name|isHidden
argument_list|()
operator|&&
name|depth
operator|.
name|compareTo
argument_list|(
name|SVNDepth
operator|.
name|IMMEDIATES
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|SVNAdminArea
name|childArea
init|=
literal|null
decl_stmt|;
name|SVNDepth
name|depthBelowHere
init|=
name|depth
decl_stmt|;
if|if
condition|(
name|depth
operator|==
name|SVNDepth
operator|.
name|IMMEDIATES
condition|)
block|{
name|depthBelowHere
operator|=
name|SVNDepth
operator|.
name|EMPTY
expr_stmt|;
block|}
try|try
block|{
name|childArea
operator|=
name|getWCAccess
argument_list|()
operator|.
name|retrieve
argument_list|(
name|childPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|svne
parameter_list|)
block|{
name|handler
operator|.
name|handleError
argument_list|(
name|childPath
argument_list|,
name|svne
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|childArea
operator|!=
literal|null
condition|)
block|{
name|childArea
operator|.
name|walkThisDirectory
argument_list|(
name|handler
argument_list|,
name|showHidden
argument_list|,
name|depthBelowHere
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|void
name|setCommitParameters
parameter_list|(
name|ISVNCommitParameters
name|commitParameters
parameter_list|)
block|{
name|myCommitParameters
operator|=
name|commitParameters
expr_stmt|;
block|}
specifier|protected
name|void
name|setLocked
parameter_list|(
name|boolean
name|locked
parameter_list|)
block|{
name|myWasLocked
operator|=
name|locked
expr_stmt|;
block|}
specifier|private
name|void
name|destroyAdminArea
parameter_list|()
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|isLocked
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_NOT_LOCKED
argument_list|,
literal|"Write-lock stolen in ''{0}''"
argument_list|,
name|getRoot
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|,
name|getWCAccess
argument_list|()
argument_list|)
expr_stmt|;
name|getWCAccess
argument_list|()
operator|.
name|closeAdminArea
argument_list|(
name|getRoot
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|markLogProcessed
parameter_list|(
name|File
name|logFile
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNFileUtil
operator|.
name|setReadonly
argument_list|(
name|logFile
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|logFile
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|boolean
name|compareAndVerify
parameter_list|(
name|File
name|text
parameter_list|,
name|File
name|baseFile
parameter_list|,
name|boolean
name|compareTextBase
parameter_list|,
name|boolean
name|checksum
parameter_list|)
throws|throws
name|SVNException
block|{
name|String
name|charsetProp
init|=
name|getProperties
argument_list|(
name|text
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
name|String
name|charset
init|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|charsetProp
argument_list|,
name|text
operator|.
name|getPath
argument_list|()
argument_list|,
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|eolStyle
init|=
name|getProperties
argument_list|(
name|text
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|EOL_STYLE
argument_list|)
decl_stmt|;
name|String
name|keywords
init|=
name|getProperties
argument_list|(
name|text
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|KEYWORDS
argument_list|)
decl_stmt|;
name|boolean
name|special
init|=
name|getProperties
argument_list|(
name|text
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getStringPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|SPECIAL
argument_list|)
operator|!=
literal|null
operator|&&
name|SVNFileUtil
operator|.
name|symlinksSupported
argument_list|()
decl_stmt|;
if|if
condition|(
name|special
condition|)
block|{
name|compareTextBase
operator|=
literal|true
expr_stmt|;
block|}
name|boolean
name|needsTranslation
init|=
name|charset
operator|!=
literal|null
operator|||
name|eolStyle
operator|!=
literal|null
operator|||
name|keywords
operator|!=
literal|null
operator|||
name|special
decl_stmt|;
name|SVNChecksumInputStream
name|checksumStream
init|=
literal|null
decl_stmt|;
name|SVNEntry
name|entry
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|checksum
operator|||
name|needsTranslation
condition|)
block|{
name|InputStream
name|baseStream
init|=
literal|null
decl_stmt|;
name|InputStream
name|textStream
init|=
literal|null
decl_stmt|;
name|entry
operator|=
name|getVersionedEntry
argument_list|(
name|text
operator|.
name|getName
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|baseStream
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|baseFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
name|textStream
operator|=
name|special
condition|?
literal|null
else|:
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|text
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
if|if
condition|(
name|checksum
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getChecksum
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|checksumStream
operator|=
operator|new
name|SVNChecksumInputStream
argument_list|(
name|baseStream
argument_list|,
name|SVNChecksumInputStream
operator|.
name|MD5_ALGORITHM
argument_list|)
expr_stmt|;
name|baseStream
operator|=
name|checksumStream
expr_stmt|;
block|}
block|}
if|if
condition|(
name|compareTextBase
operator|&&
name|needsTranslation
condition|)
block|{
if|if
condition|(
operator|!
name|special
condition|)
block|{
name|Map
name|keywordsMap
init|=
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
literal|null
argument_list|,
name|entry
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|entry
operator|.
name|getCommittedDate
argument_list|()
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
operator|+
literal|""
argument_list|,
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|eols
init|=
name|SVNTranslator
operator|.
name|getBaseEOL
argument_list|(
name|eolStyle
argument_list|)
decl_stmt|;
name|textStream
operator|=
name|SVNTranslator
operator|.
name|getTranslatingInputStream
argument_list|(
name|textStream
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
literal|true
argument_list|,
name|keywordsMap
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|linkPath
init|=
name|SVNFileUtil
operator|.
name|getSymlinkName
argument_list|(
name|text
argument_list|)
decl_stmt|;
if|if
condition|(
name|linkPath
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
literal|"Cannot detranslate symbolic link ''{0}''; file does not exist or not a symbolic link"
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|DEFAULT
argument_list|)
expr_stmt|;
block|}
name|String
name|symlinkContents
init|=
literal|"link "
operator|+
name|linkPath
decl_stmt|;
name|textStream
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
name|symlinkContents
operator|.
name|getBytes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|needsTranslation
condition|)
block|{
name|Map
name|keywordsMap
init|=
name|SVNTranslator
operator|.
name|computeKeywords
argument_list|(
name|keywords
argument_list|,
name|entry
operator|.
name|getURL
argument_list|()
argument_list|,
name|entry
operator|.
name|getAuthor
argument_list|()
argument_list|,
name|entry
operator|.
name|getCommittedDate
argument_list|()
argument_list|,
name|entry
operator|.
name|getRevision
argument_list|()
operator|+
literal|""
argument_list|,
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|byte
index|[]
name|eols
init|=
name|SVNTranslator
operator|.
name|getEOL
argument_list|(
name|eolStyle
argument_list|,
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
argument_list|)
decl_stmt|;
name|baseStream
operator|=
name|SVNTranslator
operator|.
name|getTranslatingInputStream
argument_list|(
name|baseStream
argument_list|,
name|charset
argument_list|,
name|eols
argument_list|,
literal|false
argument_list|,
name|keywordsMap
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|byte
index|[]
name|buffer1
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
name|byte
index|[]
name|buffer2
init|=
operator|new
name|byte
index|[
literal|8192
index|]
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|r1
init|=
name|SVNFileUtil
operator|.
name|readIntoBuffer
argument_list|(
name|baseStream
argument_list|,
name|buffer1
argument_list|,
literal|0
argument_list|,
name|buffer1
operator|.
name|length
argument_list|)
decl_stmt|;
name|int
name|r2
init|=
name|SVNFileUtil
operator|.
name|readIntoBuffer
argument_list|(
name|textStream
argument_list|,
name|buffer2
argument_list|,
literal|0
argument_list|,
name|buffer2
operator|.
name|length
argument_list|)
decl_stmt|;
name|r1
operator|=
name|r1
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|r1
expr_stmt|;
name|r2
operator|=
name|r2
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|r2
expr_stmt|;
if|if
condition|(
name|r1
operator|!=
name|r2
condition|)
block|{
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|r1
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|r1
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|buffer1
index|[
name|i
index|]
operator|!=
name|buffer2
index|[
name|i
index|]
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|baseStream
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|textStream
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
return|return
operator|!
name|SVNFileUtil
operator|.
name|compareFiles
argument_list|(
name|text
argument_list|,
name|baseFile
argument_list|,
literal|null
argument_list|)
return|;
block|}
if|if
condition|(
name|entry
operator|!=
literal|null
operator|&&
name|checksumStream
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|getChecksum
argument_list|()
operator|.
name|equals
argument_list|(
name|checksumStream
operator|.
name|getDigest
argument_list|()
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT_TEXT_BASE
argument_list|,
literal|"Checksum mismatch indicates corrupt text base: ''{0}''\n"
operator|+
literal|"   expected: {1}\n"
operator|+
literal|"     actual: {2}\n"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|baseFile
block|,
name|entry
operator|.
name|getChecksum
argument_list|()
block|,
name|checksumStream
operator|.
name|getDigest
argument_list|()
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
specifier|static
name|void
name|resolveDefaults
parameter_list|(
name|Map
name|entries
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNEntry
name|defaultEntry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultEntry
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_NOT_FOUND
argument_list|,
literal|"Missing default entry"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultEntry
operator|.
name|getRevision
argument_list|()
operator|<
literal|0
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_REVISION
argument_list|,
literal|"Default entry has no revision number"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defaultEntry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|ENTRY_MISSING_URL
argument_list|,
literal|"Default entry is missing no URL"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|names
init|=
name|entries
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|names
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
name|entry
operator|==
name|defaultEntry
operator|||
name|entry
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
continue|continue;
block|}
if|else if
condition|(
name|entry
operator|.
name|isFile
argument_list|()
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|getRevision
argument_list|()
operator|<
literal|0
condition|)
block|{
name|entry
operator|.
name|setRevision
argument_list|(
name|defaultEntry
operator|.
name|getRevision
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getURL
argument_list|()
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|setURL
argument_list|(
name|SVNPathUtil
operator|.
name|append
argument_list|(
name|defaultEntry
operator|.
name|getURL
argument_list|()
argument_list|,
name|SVNEncodingUtil
operator|.
name|uriEncode
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getUUID
argument_list|()
operator|==
literal|null
operator|&&
operator|!
operator|(
name|entry
operator|.
name|isScheduledForAddition
argument_list|()
operator|||
name|entry
operator|.
name|isScheduledForReplacement
argument_list|()
operator|)
condition|)
block|{
name|entry
operator|.
name|setUUID
argument_list|(
name|defaultEntry
operator|.
name|getUUID
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|entry
operator|.
name|getCachableProperties
argument_list|()
operator|==
literal|null
condition|)
block|{
name|entry
operator|.
name|setCachableProperties
argument_list|(
name|defaultEntry
operator|.
name|getCachableProperties
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
specifier|abstract
name|SVNVersionedProperties
name|formatBaseProperties
parameter_list|(
name|SVNProperties
name|srcProperties
parameter_list|)
function_decl|;
specifier|protected
specifier|abstract
name|SVNVersionedProperties
name|formatProperties
parameter_list|(
name|SVNEntry
name|entry
parameter_list|,
name|SVNProperties
name|srcProperties
parameter_list|)
function_decl|;
specifier|protected
name|void
name|createFormatFile
parameter_list|(
name|File
name|formatFile
parameter_list|,
name|boolean
name|createMyself
parameter_list|)
throws|throws
name|SVNException
block|{
name|OutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|formatFile
operator|=
name|createMyself
condition|?
name|getAdminFile
argument_list|(
literal|"format"
argument_list|)
else|:
name|formatFile
expr_stmt|;
name|os
operator|=
name|SVNFileUtil
operator|.
name|openFileForWriting
argument_list|(
name|formatFile
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|getFormatVersion
argument_list|()
argument_list|)
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|IO_ERROR
argument_list|,
name|e
operator|.
name|getLocalizedMessage
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|e
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|os
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|SVNAdminArea
name|formatWC
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|)
throws|throws
name|SVNException
block|{
name|File
name|logFile
init|=
name|adminArea
operator|.
name|getAdminFile
argument_list|(
literal|"log"
argument_list|)
decl_stmt|;
name|SVNFileType
name|type
init|=
name|SVNFileType
operator|.
name|getType
argument_list|(
name|logFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|SVNFileType
operator|.
name|FILE
condition|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logFine
argument_list|(
name|SVNLogType
operator|.
name|WC
argument_list|,
literal|"Changing working copy format failed: found a log file at '"
operator|+
name|logFile
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
name|adminArea
return|;
block|}
name|SVNLog
name|log
init|=
name|getLog
argument_list|()
decl_stmt|;
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|FORMAT_ATTR
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|getFormatVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|UPGRADE_FORMAT
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setWCAccess
argument_list|(
name|adminArea
operator|.
name|getWCAccess
argument_list|()
argument_list|)
expr_stmt|;
name|myEntries
operator|=
operator|new
name|SVNHashMap
argument_list|()
expr_stmt|;
name|Map
name|basePropsCache
init|=
name|getBasePropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Map
name|propsCache
init|=
name|getPropertiesStorage
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|entries
init|=
name|adminArea
operator|.
name|entries
argument_list|(
literal|true
argument_list|)
init|;
name|entries
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNEntry
name|entry
init|=
operator|(
name|SVNEntry
operator|)
name|entries
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNEntry
name|newEntry
init|=
operator|new
name|SVNEntry
argument_list|(
operator|new
name|SVNHashMap
argument_list|(
name|entry
operator|.
name|asMap
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|myEntries
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|FILE
operator|&&
operator|!
name|adminArea
operator|.
name|getThisDirName
argument_list|()
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|SVNVersionedProperties
name|srcBaseProps
init|=
name|adminArea
operator|.
name|getBaseProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|dstBaseProps
init|=
name|formatBaseProperties
argument_list|(
name|srcBaseProps
operator|.
name|asMap
argument_list|()
argument_list|)
decl_stmt|;
name|basePropsCache
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|dstBaseProps
argument_list|)
expr_stmt|;
name|dstBaseProps
operator|.
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|SVNVersionedProperties
name|srcProps
init|=
name|adminArea
operator|.
name|getProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|SVNVersionedProperties
name|dstProps
init|=
name|formatProperties
argument_list|(
name|entry
argument_list|,
name|srcProps
operator|.
name|asMap
argument_list|()
argument_list|)
decl_stmt|;
name|propsCache
operator|.
name|put
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|dstProps
argument_list|)
expr_stmt|;
name|dstProps
operator|.
name|setModified
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|handleCharsetProperty
argument_list|(
name|adminArea
argument_list|,
name|log
argument_list|,
name|newEntry
argument_list|,
name|dstBaseProps
argument_list|)
expr_stmt|;
name|handlePropTime
argument_list|(
name|log
argument_list|,
name|newEntry
argument_list|)
expr_stmt|;
name|SVNVersionedProperties
name|wcProps
init|=
name|adminArea
operator|.
name|getWCProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|wcProps
operator|!=
literal|null
condition|)
block|{
name|log
operator|.
name|logChangedWCProperties
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|wcProps
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|saveVersionedProperties
argument_list|(
name|log
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|log
operator|.
name|save
argument_list|()
expr_stmt|;
if|if
condition|(
name|getFormatVersion
argument_list|()
operator|!=
name|SVNXMLAdminAreaFactory
operator|.
name|WC_FORMAT
condition|)
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|getAdminFile
argument_list|(
literal|"README.txt"
argument_list|)
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|getAdminFile
argument_list|(
literal|"empty-file"
argument_list|)
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|getAdminFile
argument_list|(
literal|"wcprops"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|getAdminFile
argument_list|(
literal|"tmp/wcprops"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|getAdminFile
argument_list|(
literal|"dir-wcprops"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteAll
argument_list|(
name|getAdminFile
argument_list|(
literal|"all-wcprops"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getAdminFile
argument_list|(
literal|"wcprops"
argument_list|)
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|getAdminFile
argument_list|(
literal|"tmp/wcprops"
argument_list|)
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|SVNFileUtil
operator|.
name|createEmptyFile
argument_list|(
name|getAdminFile
argument_list|(
literal|"empty-file"
argument_list|)
argument_list|)
expr_stmt|;
name|SVNAdminUtil
operator|.
name|createReadmeFile
argument_list|(
name|getAdminDirectory
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|runLogs
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|void
name|handleCharsetProperty
parameter_list|(
name|SVNAdminArea
name|adminArea
parameter_list|,
name|SVNLog
name|log
parameter_list|,
name|SVNEntry
name|entry
parameter_list|,
name|SVNVersionedProperties
name|baseProps
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|SVNPropertyValue
name|charsetProp
init|=
name|baseProps
operator|.
name|getPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|)
decl_stmt|;
name|String
name|currentCharset
init|=
name|charsetProp
operator|==
literal|null
condition|?
literal|null
else|:
name|charsetProp
operator|.
name|getString
argument_list|()
decl_stmt|;
name|currentCharset
operator|=
name|SVNTranslator
operator|.
name|getCharset
argument_list|(
name|currentCharset
argument_list|,
name|getAdminFile
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|getWCAccess
argument_list|()
operator|.
name|getOptions
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|currentCharset
operator|!=
literal|null
operator|&&
operator|!
name|SVNProperty
operator|.
name|isUTF8
argument_list|(
name|currentCharset
argument_list|)
condition|)
block|{
name|File
name|detranslatedFile
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|this
argument_list|,
literal|"detranslated"
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|detranslatedPath
init|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|detranslatedFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|File
name|tmpCharsetPropFile
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|this
argument_list|,
literal|"props"
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|tmpCharsetPropPath
init|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|tmpCharsetPropFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|getFormatVersion
argument_list|()
operator|==
name|SVNAdminArea15Factory
operator|.
name|WC_FORMAT
condition|)
block|{
name|baseProps
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|SVNWCProperties
name|propFile
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpCharsetPropFile
argument_list|,
name|tmpCharsetPropPath
argument_list|)
decl_stmt|;
name|propFile
operator|.
name|setProperties
argument_list|(
name|baseProps
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|baseProps
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|,
name|charsetProp
argument_list|)
expr_stmt|;
name|File
name|tmpBaseFile
init|=
name|SVNAdminUtil
operator|.
name|createTmpFile
argument_list|(
name|this
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|String
name|tmpBasePath
init|=
name|SVNPathUtil
operator|.
name|getRelativePath
argument_list|(
name|getRoot
argument_list|()
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|tmpBaseFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|tmpBasePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpCharsetPropPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|detranslatedPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_DETRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpBasePath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|detranslatedPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|detranslatedPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|adminArea
operator|.
name|getFormatVersion
argument_list|()
operator|==
name|SVNAdminArea15Factory
operator|.
name|WC_FORMAT
condition|)
block|{
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|detranslatedPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_DETRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|baseProps
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|,
name|SVNPropertyValue
operator|.
name|create
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|SVNWCProperties
name|propFile
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|tmpCharsetPropFile
argument_list|,
name|tmpCharsetPropPath
argument_list|)
decl_stmt|;
name|propFile
operator|.
name|setProperties
argument_list|(
name|baseProps
operator|.
name|asMap
argument_list|()
argument_list|)
expr_stmt|;
name|baseProps
operator|.
name|setPropertyValue
argument_list|(
name|SVNProperty
operator|.
name|CHARSET
argument_list|,
name|charsetProp
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|tmpCharsetPropPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|SVNAdminUtil
operator|.
name|getPropBasePath
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|,
name|SVNNodeKind
operator|.
name|FILE
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MOVE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|detranslatedPath
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|DEST_ATTR
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|COPY_AND_TRANSLATE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|detranslatedPath
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|DELETE
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|command
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|handlePropTime
parameter_list|(
name|SVNLog
name|log
parameter_list|,
name|SVNEntry
name|entry
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|getFormatVersion
argument_list|()
operator|==
name|SVNXMLAdminAreaFactory
operator|.
name|WC_FORMAT
condition|)
block|{
return|return;
block|}
name|SVNProperties
name|command
init|=
operator|new
name|SVNProperties
argument_list|()
decl_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNLog
operator|.
name|NAME_ATTR
argument_list|,
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|command
operator|.
name|put
argument_list|(
name|SVNProperty
operator|.
name|shortPropertyName
argument_list|(
name|SVNProperty
operator|.
name|PROP_TIME
argument_list|)
argument_list|,
name|SVNDate
operator|.
name|formatDate
argument_list|(
operator|new
name|Date
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|log
operator|.
name|addCommand
argument_list|(
name|SVNLog
operator|.
name|MODIFY_ENTRY
argument_list|,
name|command
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|postUpgradeFormat
parameter_list|(
name|int
name|format
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|format
operator|==
name|getFormatVersion
argument_list|()
condition|)
block|{
name|createFormatFile
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return;
block|}
name|SVNErrorMessage
name|err
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|UNKNOWN
argument_list|,
literal|"Unexpected format number:\n"
operator|+
literal|"   expected: {0}\n"
operator|+
literal|"     actual: {1}"
argument_list|,
operator|new
name|Object
index|[]
block|{
operator|new
name|Integer
argument_list|(
name|getFormatVersion
argument_list|()
argument_list|)
block|,
operator|new
name|Integer
argument_list|(
name|format
argument_list|)
block|}
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|err
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

