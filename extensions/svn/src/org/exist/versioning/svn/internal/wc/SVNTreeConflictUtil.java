begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * ====================================================================  * Copyright (c) 2004-2010 TMate Software Ltd.  All rights reserved.  *  * This software is licensed as described in the file COPYING, which  * you should have received as part of this distribution.  The terms  * are also available at http://svnkit.com/license.html  * If newer versions of this license are posted there, you may use a  * newer version instead, at your option.  * ====================================================================  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNConflictReason
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNOperation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|wc
operator|.
name|SVNTreeConflictDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNErrorMessage
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNNodeKind
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNSkel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|io
operator|.
name|SVNRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @author  TMate Software Ltd.  * @version 1.3  */
end_comment

begin_class
specifier|public
class|class
name|SVNTreeConflictUtil
block|{
specifier|public
specifier|static
name|Map
name|readTreeConflicts
parameter_list|(
name|File
name|dirPath
parameter_list|,
name|String
name|conflictData
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|conflictData
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|SVNHashMap
argument_list|()
return|;
block|}
name|byte
index|[]
name|data
decl_stmt|;
try|try
block|{
name|data
operator|=
name|conflictData
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|data
operator|=
name|conflictData
operator|.
name|getBytes
argument_list|()
expr_stmt|;
block|}
return|return
name|readTreeConflicts
argument_list|(
name|dirPath
argument_list|,
name|data
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Map
name|readTreeConflicts
parameter_list|(
name|File
name|dirPath
parameter_list|,
name|byte
index|[]
name|conflictData
parameter_list|)
throws|throws
name|SVNException
block|{
name|Map
name|conflicts
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
if|if
condition|(
name|conflictData
operator|==
literal|null
condition|)
block|{
return|return
name|conflicts
return|;
block|}
name|SVNSkel
name|skel
init|=
name|SVNSkel
operator|.
name|parse
argument_list|(
name|conflictData
argument_list|)
decl_stmt|;
if|if
condition|(
name|skel
operator|==
literal|null
operator|||
name|skel
operator|.
name|isAtom
argument_list|()
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Error parsing tree conflict skel"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iterator
init|=
name|skel
operator|.
name|getList
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNSkel
name|conflictSkel
init|=
operator|(
name|SVNSkel
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNTreeConflictDescription
name|conflict
init|=
name|readSingleTreeConflict
argument_list|(
name|conflictSkel
argument_list|,
name|dirPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|conflict
operator|!=
literal|null
condition|)
block|{
name|conflicts
operator|.
name|put
argument_list|(
name|conflict
operator|.
name|getPath
argument_list|()
argument_list|,
name|conflict
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|conflicts
return|;
block|}
specifier|private
specifier|static
name|SVNTreeConflictDescription
name|readSingleTreeConflict
parameter_list|(
name|SVNSkel
name|skel
parameter_list|,
name|File
name|dirPath
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|isValidConflict
argument_list|(
name|skel
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Invalid conflict info in tree conflict description"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|skel
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getData
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Empty \'victim\' field in tree conflict description"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|victimBasename
init|=
name|skel
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SVNNodeKind
name|kind
init|=
name|getNodeKind
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|FILE
operator|&&
name|kind
operator|!=
name|SVNNodeKind
operator|.
name|DIR
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Invalid \'node_kind\' field in tree conflict description"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|SVNOperation
name|operation
init|=
name|getOperation
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|3
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|SVNConflictAction
name|action
init|=
name|getAction
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|4
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|SVNConflictReason
name|reason
init|=
name|getConflictReason
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|5
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|SVNConflictVersion
name|srcLeftVersion
init|=
name|readConflictVersion
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|6
argument_list|)
argument_list|)
decl_stmt|;
name|SVNConflictVersion
name|srcRightVersion
init|=
name|readConflictVersion
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|7
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNTreeConflictDescription
argument_list|(
operator|new
name|Resource
argument_list|(
name|dirPath
argument_list|,
name|victimBasename
argument_list|)
argument_list|,
name|kind
argument_list|,
name|action
argument_list|,
name|reason
argument_list|,
name|operation
argument_list|,
name|srcLeftVersion
argument_list|,
name|srcRightVersion
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|SVNConflictVersion
name|readConflictVersion
parameter_list|(
name|SVNSkel
name|skel
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
operator|!
name|isValidVersionInfo
argument_list|(
name|skel
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Invalid version info in tree conflict description"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|String
name|repoURLString
init|=
name|skel
operator|.
name|getChild
argument_list|(
literal|1
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|SVNURL
name|repoURL
init|=
name|repoURLString
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|SVNURL
operator|.
name|parseURIEncoded
argument_list|(
name|repoURLString
argument_list|)
decl_stmt|;
name|long
name|pegRevision
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|2
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|skel
operator|.
name|getChild
argument_list|(
literal|3
argument_list|)
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|path
operator|=
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|?
literal|null
else|:
name|path
expr_stmt|;
name|SVNNodeKind
name|kind
init|=
name|getNodeKind
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|4
argument_list|)
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|SVNConflictVersion
argument_list|(
name|repoURL
argument_list|,
name|path
argument_list|,
name|pegRevision
argument_list|,
name|kind
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isValidVersionInfo
parameter_list|(
name|SVNSkel
name|skel
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|skel
operator|.
name|getListSize
argument_list|()
operator|!=
literal|5
operator|||
operator|!
name|skel
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|contentEquals
argument_list|(
literal|"version"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|skel
operator|.
name|containsAtomsOnly
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|isValidConflict
parameter_list|(
name|SVNSkel
name|skel
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|skel
operator|.
name|getListSize
argument_list|()
operator|!=
literal|8
operator|||
operator|!
name|skel
operator|.
name|getChild
argument_list|(
literal|0
argument_list|)
operator|.
name|contentEquals
argument_list|(
literal|"conflict"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|6
condition|;
name|i
operator|++
control|)
block|{
name|SVNSkel
name|element
init|=
name|skel
operator|.
name|getChild
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|element
operator|.
name|isAtom
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
name|isValidVersionInfo
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|6
argument_list|)
argument_list|)
operator|&&
name|isValidVersionInfo
argument_list|(
name|skel
operator|.
name|getChild
argument_list|(
literal|7
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getTreeConflictData
parameter_list|(
name|Map
name|conflicts
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|conflicts
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|byte
index|[]
name|rawData
init|=
name|getTreeConflictRawData
argument_list|(
name|conflicts
argument_list|)
decl_stmt|;
name|String
name|conflictData
decl_stmt|;
try|try
block|{
name|conflictData
operator|=
operator|new
name|String
argument_list|(
name|rawData
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|conflictData
operator|=
operator|new
name|String
argument_list|(
name|rawData
argument_list|)
expr_stmt|;
block|}
return|return
name|conflictData
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|getTreeConflictRawData
parameter_list|(
name|Map
name|conflicts
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
name|conflicts
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNConflictVersion
name|nullVersion
init|=
operator|new
name|SVNConflictVersion
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|SVNRepository
operator|.
name|INVALID_REVISION
argument_list|,
name|SVNNodeKind
operator|.
name|UNKNOWN
argument_list|)
decl_stmt|;
name|SVNSkel
name|skel
init|=
name|SVNSkel
operator|.
name|createEmptyList
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|iterator
init|=
name|conflicts
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|SVNTreeConflictDescription
name|conflict
init|=
operator|(
name|SVNTreeConflictDescription
operator|)
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|SVNSkel
name|conflictSkel
init|=
name|SVNSkel
operator|.
name|createEmptyList
argument_list|()
decl_stmt|;
name|SVNConflictVersion
name|sourceRightVersion
init|=
name|conflict
operator|.
name|getSourceRightVersion
argument_list|()
decl_stmt|;
name|sourceRightVersion
operator|=
name|sourceRightVersion
operator|==
literal|null
condition|?
name|nullVersion
else|:
name|sourceRightVersion
expr_stmt|;
name|prependVersionInfo
argument_list|(
name|conflictSkel
argument_list|,
name|sourceRightVersion
argument_list|)
expr_stmt|;
name|SVNConflictVersion
name|sourceLeftVersion
init|=
name|conflict
operator|.
name|getSourceLeftVersion
argument_list|()
decl_stmt|;
name|sourceLeftVersion
operator|=
name|sourceLeftVersion
operator|==
literal|null
condition|?
name|nullVersion
else|:
name|sourceLeftVersion
expr_stmt|;
name|prependVersionInfo
argument_list|(
name|conflictSkel
argument_list|,
name|sourceLeftVersion
argument_list|)
expr_stmt|;
name|conflictSkel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
name|conflict
operator|.
name|getConflictReason
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conflictSkel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
name|conflict
operator|.
name|getConflictAction
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|conflictSkel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
name|conflict
operator|.
name|getOperation
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|conflict
operator|.
name|getNodeKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|DIR
operator|&&
name|conflict
operator|.
name|getNodeKind
argument_list|()
operator|!=
name|SVNNodeKind
operator|.
name|FILE
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Invalid \'node_kind\' field in tree conflict description"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|conflictSkel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
name|getNodeKindString
argument_list|(
name|conflict
operator|.
name|getNodeKind
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|conflict
operator|.
name|getPath
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Empty path basename in tree conflict description"
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|conflictSkel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|conflictSkel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
literal|"conflict"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidConflict
argument_list|(
name|conflictSkel
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Failed to create valid conflict description skel: ''{0}''"
argument_list|,
name|skel
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|skel
operator|.
name|addChild
argument_list|(
name|conflictSkel
argument_list|)
expr_stmt|;
block|}
return|return
name|skel
operator|.
name|unparse
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|String
name|getHumanReadableConflictDescription
parameter_list|(
name|SVNTreeConflictDescription
name|treeConflict
parameter_list|)
block|{
name|String
name|reasonStr
init|=
name|getReasonString
argument_list|(
name|treeConflict
argument_list|)
decl_stmt|;
name|String
name|actionStr
init|=
name|getActionString
argument_list|(
name|treeConflict
argument_list|)
decl_stmt|;
name|String
name|operationStr
init|=
name|treeConflict
operator|.
name|getOperation
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|description
init|=
literal|"local "
operator|+
name|reasonStr
operator|+
literal|", incoming "
operator|+
name|actionStr
operator|+
literal|" upon "
operator|+
name|operationStr
decl_stmt|;
return|return
name|description
return|;
block|}
specifier|public
specifier|static
name|String
name|getHumanReadableConflictVersion
parameter_list|(
name|SVNConflictVersion
name|version
parameter_list|)
block|{
name|String
name|url
init|=
name|version
operator|.
name|getRepositoryRoot
argument_list|()
operator|!=
literal|null
condition|?
name|version
operator|.
name|getRepositoryRoot
argument_list|()
operator|.
name|toString
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
operator|&&
name|version
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"/"
operator|+
name|version
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|url
operator|+
literal|"/..."
expr_stmt|;
block|}
if|else if
condition|(
name|version
operator|.
name|getPath
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|url
operator|=
name|version
operator|.
name|getPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|url
operator|=
literal|"..."
expr_stmt|;
block|}
return|return
literal|"("
operator|+
name|getNodeKindString
argument_list|(
name|version
operator|.
name|getKind
argument_list|()
argument_list|)
operator|+
literal|") "
operator|+
name|url
operator|+
literal|"@"
operator|+
name|version
operator|.
name|getPegRevision
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getReasonString
parameter_list|(
name|SVNTreeConflictDescription
name|treeConflict
parameter_list|)
block|{
name|SVNConflictReason
name|reason
init|=
name|treeConflict
operator|.
name|getConflictReason
argument_list|()
decl_stmt|;
if|if
condition|(
name|reason
operator|==
name|SVNConflictReason
operator|.
name|EDITED
condition|)
block|{
return|return
literal|"edit"
return|;
block|}
if|else if
condition|(
name|reason
operator|==
name|SVNConflictReason
operator|.
name|OBSTRUCTED
condition|)
block|{
return|return
literal|"obstruction"
return|;
block|}
if|else if
condition|(
name|reason
operator|==
name|SVNConflictReason
operator|.
name|DELETED
condition|)
block|{
return|return
literal|"delete"
return|;
block|}
if|else if
condition|(
name|reason
operator|==
name|SVNConflictReason
operator|.
name|ADDED
condition|)
block|{
return|return
literal|"add"
return|;
block|}
if|else if
condition|(
name|reason
operator|==
name|SVNConflictReason
operator|.
name|MISSING
condition|)
block|{
return|return
literal|"missing"
return|;
block|}
if|else if
condition|(
name|reason
operator|==
name|SVNConflictReason
operator|.
name|UNVERSIONED
condition|)
block|{
return|return
literal|"unversioned"
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|String
name|getActionString
parameter_list|(
name|SVNTreeConflictDescription
name|treeConflict
parameter_list|)
block|{
name|SVNConflictAction
name|action
init|=
name|treeConflict
operator|.
name|getConflictAction
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|==
name|SVNConflictAction
operator|.
name|ADD
condition|)
block|{
return|return
literal|"add"
return|;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNConflictAction
operator|.
name|EDIT
condition|)
block|{
return|return
literal|"edit"
return|;
block|}
if|else if
condition|(
name|action
operator|==
name|SVNConflictAction
operator|.
name|DELETE
condition|)
block|{
return|return
literal|"delete"
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|SVNSkel
name|prependVersionInfo
parameter_list|(
name|SVNSkel
name|parent
parameter_list|,
name|SVNConflictVersion
name|versionInfo
parameter_list|)
throws|throws
name|SVNException
block|{
name|parent
operator|=
name|parent
operator|==
literal|null
condition|?
name|SVNSkel
operator|.
name|createEmptyList
argument_list|()
else|:
name|parent
expr_stmt|;
name|SVNSkel
name|skel
init|=
name|SVNSkel
operator|.
name|createEmptyList
argument_list|()
decl_stmt|;
name|skel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
name|getNodeKindString
argument_list|(
name|versionInfo
operator|.
name|getKind
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|path
init|=
name|versionInfo
operator|.
name|getPath
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|versionInfo
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|skel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
name|skel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|versionInfo
operator|.
name|getPegRevision
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|repoURLString
init|=
name|versionInfo
operator|.
name|getRepositoryRoot
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|versionInfo
operator|.
name|getRepositoryRoot
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|skel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
name|repoURLString
argument_list|)
argument_list|)
expr_stmt|;
name|skel
operator|.
name|addChild
argument_list|(
name|SVNSkel
operator|.
name|createAtom
argument_list|(
literal|"version"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isValidVersionInfo
argument_list|(
name|skel
argument_list|)
condition|)
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Failed to create valid conflict version skel: ''{0}''"
argument_list|,
name|skel
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|addChild
argument_list|(
name|skel
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
specifier|private
specifier|static
name|SVNNodeKind
name|getNodeKind
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
name|SVNNodeKind
operator|.
name|UNKNOWN
return|;
block|}
name|SVNNodeKind
name|kind
init|=
name|SVNNodeKind
operator|.
name|parseKind
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|UNKNOWN
condition|)
block|{
name|mappingError
argument_list|(
literal|"node kind"
argument_list|)
expr_stmt|;
block|}
return|return
name|kind
return|;
block|}
specifier|private
specifier|static
name|String
name|getNodeKindString
parameter_list|(
name|SVNNodeKind
name|kind
parameter_list|)
block|{
if|if
condition|(
name|kind
operator|==
name|SVNNodeKind
operator|.
name|UNKNOWN
condition|)
block|{
return|return
literal|""
return|;
block|}
return|return
name|kind
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|SVNOperation
name|getOperation
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNOperation
name|operation
init|=
name|SVNOperation
operator|.
name|fromString
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|==
literal|null
condition|)
block|{
name|mappingError
argument_list|(
literal|"operation"
argument_list|)
expr_stmt|;
block|}
return|return
name|operation
return|;
block|}
specifier|private
specifier|static
name|SVNConflictAction
name|getAction
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNConflictAction
name|action
init|=
name|SVNConflictAction
operator|.
name|fromString
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|action
operator|==
literal|null
condition|)
block|{
name|mappingError
argument_list|(
literal|"conflict action"
argument_list|)
expr_stmt|;
block|}
return|return
name|action
return|;
block|}
specifier|private
specifier|static
name|SVNConflictReason
name|getConflictReason
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNConflictReason
name|reason
decl_stmt|;
if|if
condition|(
name|SVNConflictReason
operator|.
name|UNVERSIONED
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|reason
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|reason
operator|=
name|SVNConflictReason
operator|.
name|fromString
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reason
operator|==
literal|null
condition|)
block|{
name|mappingError
argument_list|(
literal|"conflict reason"
argument_list|)
expr_stmt|;
block|}
return|return
name|reason
return|;
block|}
specifier|private
specifier|static
name|void
name|mappingError
parameter_list|(
name|String
name|type
parameter_list|)
throws|throws
name|SVNException
block|{
name|SVNErrorMessage
name|error
init|=
name|SVNErrorMessage
operator|.
name|create
argument_list|(
name|SVNErrorCode
operator|.
name|WC_CORRUPT
argument_list|,
literal|"Unknown {0} value in tree conflict description"
argument_list|,
name|type
argument_list|)
decl_stmt|;
name|SVNErrorManager
operator|.
name|error
argument_list|(
name|error
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

