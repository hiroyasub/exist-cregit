begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
operator|.
name|svn
operator|.
name|internal
operator|.
name|wc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|KeyStoreException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchAlgorithmException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|NoSuchProviderException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|CertificateFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|cert
operator|.
name|X509Certificate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|logging
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|TrustManagerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|net
operator|.
name|ssl
operator|.
name|X509TrustManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|SVNURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|auth
operator|.
name|ISVNAuthenticationProvider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNBase64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|core
operator|.
name|internal
operator|.
name|util
operator|.
name|SVNSSLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNDebugLog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|tmatesoft
operator|.
name|svn
operator|.
name|util
operator|.
name|SVNLogType
import|;
end_import

begin_comment
comment|/**  * @author TMate Software Ltd.  * @version 1.3  */
end_comment

begin_class
specifier|public
class|class
name|DefaultSVNSSLTrustManager
implements|implements
name|X509TrustManager
block|{
specifier|private
name|SVNURL
name|myURL
decl_stmt|;
specifier|private
name|DefaultSVNAuthenticationManager
name|myAuthManager
decl_stmt|;
specifier|private
name|X509Certificate
index|[]
name|myTrustedCerts
decl_stmt|;
specifier|private
name|String
name|myRealm
decl_stmt|;
specifier|private
name|File
name|myAuthDirectory
decl_stmt|;
specifier|private
name|boolean
name|myIsUseKeyStore
decl_stmt|;
specifier|private
name|File
index|[]
name|myServerCertFiles
decl_stmt|;
specifier|private
name|X509TrustManager
index|[]
name|myDefaultTrustManagers
decl_stmt|;
specifier|public
name|DefaultSVNSSLTrustManager
parameter_list|(
name|File
name|authDir
parameter_list|,
name|SVNURL
name|url
parameter_list|,
name|File
index|[]
name|serverCertFiles
parameter_list|,
name|boolean
name|useKeyStore
parameter_list|,
name|DefaultSVNAuthenticationManager
name|authManager
parameter_list|)
block|{
name|myURL
operator|=
name|url
expr_stmt|;
name|myAuthDirectory
operator|=
name|authDir
expr_stmt|;
name|myRealm
operator|=
literal|"https://"
operator|+
name|url
operator|.
name|getHost
argument_list|()
operator|+
literal|":"
operator|+
name|url
operator|.
name|getPort
argument_list|()
expr_stmt|;
name|myAuthManager
operator|=
name|authManager
expr_stmt|;
name|myIsUseKeyStore
operator|=
name|useKeyStore
expr_stmt|;
name|myServerCertFiles
operator|=
name|serverCertFiles
expr_stmt|;
block|}
specifier|private
name|X509TrustManager
index|[]
name|getDefaultTrustManagers
parameter_list|()
block|{
if|if
condition|(
name|myDefaultTrustManagers
operator|==
literal|null
operator|&&
name|myIsUseKeyStore
condition|)
block|{
name|myDefaultTrustManagers
operator|=
name|initDefaultTrustManagers
argument_list|()
expr_stmt|;
block|}
return|return
name|myDefaultTrustManagers
return|;
block|}
specifier|private
name|X509TrustManager
index|[]
name|initDefaultTrustManagers
parameter_list|()
block|{
try|try
block|{
name|TrustManagerFactory
name|tmf
init|=
name|TrustManagerFactory
operator|.
name|getInstance
argument_list|(
literal|"SunX509"
argument_list|,
literal|"SunJSSE"
argument_list|)
decl_stmt|;
name|tmf
operator|.
name|init
argument_list|(
operator|(
name|KeyStore
operator|)
literal|null
argument_list|)
expr_stmt|;
name|TrustManager
index|[]
name|trustManagers
init|=
name|tmf
operator|.
name|getTrustManagers
argument_list|()
decl_stmt|;
if|if
condition|(
name|trustManagers
operator|==
literal|null
operator|||
name|trustManagers
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|List
name|x509TrustManagers
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trustManagers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|TrustManager
name|trustManager
init|=
name|trustManagers
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|trustManager
operator|instanceof
name|X509TrustManager
condition|)
block|{
name|x509TrustManagers
operator|.
name|add
argument_list|(
name|trustManager
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|(
name|X509TrustManager
index|[]
operator|)
name|x509TrustManagers
operator|.
name|toArray
argument_list|(
operator|new
name|X509TrustManager
index|[
name|x509TrustManagers
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchAlgorithmException
name|e
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINEST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NoSuchProviderException
name|e
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINEST
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|KeyStoreException
name|e
parameter_list|)
block|{
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|log
argument_list|(
name|SVNLogType
operator|.
name|DEFAULT
argument_list|,
name|e
argument_list|,
name|Level
operator|.
name|FINEST
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|init
parameter_list|()
block|{
if|if
condition|(
name|myTrustedCerts
operator|!=
literal|null
condition|)
block|{
return|return;
block|}
name|Collection
name|trustedCerts
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|// load trusted certs from files.
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myServerCertFiles
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|X509Certificate
name|cert
init|=
name|loadCertificate
argument_list|(
name|myServerCertFiles
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|cert
operator|!=
literal|null
condition|)
block|{
name|trustedCerts
operator|.
name|add
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
block|}
name|X509TrustManager
index|[]
name|trustManagers
init|=
name|getDefaultTrustManagers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|trustManagers
operator|!=
literal|null
operator|&&
name|i
operator|<
name|trustManagers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|X509TrustManager
name|trustManager
init|=
name|trustManagers
index|[
name|i
index|]
decl_stmt|;
name|X509Certificate
index|[]
name|acceptedCerts
init|=
name|trustManager
operator|.
name|getAcceptedIssuers
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|acceptedCerts
operator|!=
literal|null
operator|&&
name|c
operator|<
name|acceptedCerts
operator|.
name|length
condition|;
name|c
operator|++
control|)
block|{
name|X509Certificate
name|cert
init|=
name|acceptedCerts
index|[
name|c
index|]
decl_stmt|;
name|trustedCerts
operator|.
name|add
argument_list|(
name|cert
argument_list|)
expr_stmt|;
block|}
block|}
name|myTrustedCerts
operator|=
operator|(
name|X509Certificate
index|[]
operator|)
name|trustedCerts
operator|.
name|toArray
argument_list|(
operator|new
name|X509Certificate
index|[
name|trustedCerts
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|X509Certificate
index|[]
name|getAcceptedIssuers
parameter_list|()
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|myTrustedCerts
return|;
block|}
specifier|public
name|void
name|checkClientTrusted
parameter_list|(
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|CertificateException
block|{
block|}
specifier|public
name|void
name|checkServerTrusted
parameter_list|(
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|algorithm
parameter_list|)
throws|throws
name|CertificateException
block|{
if|if
condition|(
name|certs
operator|!=
literal|null
operator|&&
name|certs
operator|.
name|length
operator|>
literal|0
operator|&&
name|certs
index|[
literal|0
index|]
operator|!=
literal|null
condition|)
block|{
name|String
name|data
init|=
name|SVNBase64
operator|.
name|byteArrayToBase64
argument_list|(
name|certs
index|[
literal|0
index|]
operator|.
name|getEncoded
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|stored
init|=
operator|(
name|String
operator|)
name|myAuthManager
operator|.
name|getRuntimeAuthStorage
argument_list|()
operator|.
name|getData
argument_list|(
literal|"svn.ssl.server"
argument_list|,
name|myRealm
argument_list|)
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|equals
argument_list|(
name|stored
argument_list|)
condition|)
block|{
return|return;
block|}
name|stored
operator|=
name|getStoredServerCertificate
argument_list|(
name|myRealm
argument_list|)
expr_stmt|;
if|if
condition|(
name|data
operator|.
name|equals
argument_list|(
name|stored
argument_list|)
condition|)
block|{
return|return;
block|}
name|ISVNAuthenticationProvider
name|authProvider
init|=
name|myAuthManager
operator|.
name|getAuthenticationProvider
argument_list|()
decl_stmt|;
name|int
name|failures
init|=
name|SVNSSLUtil
operator|.
name|getServerCertificateFailures
argument_list|(
name|certs
index|[
literal|0
index|]
argument_list|,
name|myURL
operator|.
name|getHost
argument_list|()
argument_list|)
decl_stmt|;
comment|// compose bit mask.
comment|// 8 is default
comment|// check dates for 1 and 2
comment|// check host name for 4
if|if
condition|(
name|authProvider
operator|!=
literal|null
condition|)
block|{
name|boolean
name|store
init|=
name|myAuthManager
operator|.
name|isAuthStorageEnabled
argument_list|(
name|myURL
argument_list|)
decl_stmt|;
name|boolean
name|trustServer
init|=
name|checkServerTrustedByDefault
argument_list|(
name|certs
argument_list|,
name|algorithm
argument_list|)
decl_stmt|;
name|int
name|result
decl_stmt|;
if|if
condition|(
name|trustServer
condition|)
block|{
name|result
operator|=
name|ISVNAuthenticationProvider
operator|.
name|ACCEPTED
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|authProvider
operator|.
name|acceptServerAuthentication
argument_list|(
name|myURL
argument_list|,
name|myRealm
argument_list|,
name|certs
index|[
literal|0
index|]
argument_list|,
name|store
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
name|ISVNAuthenticationProvider
operator|.
name|ACCEPTED
operator|&&
name|store
condition|)
block|{
try|try
block|{
name|storeServerCertificate
argument_list|(
name|myRealm
argument_list|,
name|data
argument_list|,
name|failures
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
comment|// ignore that exception, as we only need to trust now and may save data later.
comment|//throw new SVNSSLUtil.CertificateNotTrustedException("svn: Server SSL certificate for '" + myRealm + "' cannot be saved");
name|SVNDebugLog
operator|.
name|getDefaultLog
argument_list|()
operator|.
name|logError
argument_list|(
name|SVNLogType
operator|.
name|NETWORK
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|result
operator|!=
name|ISVNAuthenticationProvider
operator|.
name|REJECTED
condition|)
block|{
name|myAuthManager
operator|.
name|getRuntimeAuthStorage
argument_list|()
operator|.
name|putData
argument_list|(
literal|"svn.ssl.server"
argument_list|,
name|myRealm
argument_list|,
name|data
argument_list|)
expr_stmt|;
return|return;
block|}
throw|throw
operator|new
name|SVNSSLUtil
operator|.
name|CertificateNotTrustedException
argument_list|(
literal|"svn: Server SSL certificate for '"
operator|+
name|myRealm
operator|+
literal|"' rejected"
argument_list|)
throw|;
block|}
comment|// like as tmp. accepted.
block|}
block|}
specifier|private
name|boolean
name|checkServerTrustedByDefault
parameter_list|(
name|X509Certificate
index|[]
name|certs
parameter_list|,
name|String
name|algorithm
parameter_list|)
block|{
name|X509TrustManager
index|[]
name|trustManagers
init|=
name|getDefaultTrustManagers
argument_list|()
decl_stmt|;
if|if
condition|(
name|trustManagers
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|trustManagers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|X509TrustManager
name|trustManager
init|=
name|trustManagers
index|[
name|i
index|]
decl_stmt|;
name|boolean
name|trusted
init|=
literal|true
decl_stmt|;
try|try
block|{
name|trustManager
operator|.
name|checkServerTrusted
argument_list|(
name|certs
argument_list|,
name|algorithm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|e
parameter_list|)
block|{
name|trusted
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|trusted
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|getStoredServerCertificate
parameter_list|(
name|String
name|realm
parameter_list|)
block|{
name|File
name|file
init|=
operator|new
name|Resource
argument_list|(
name|myAuthDirectory
argument_list|,
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|realm
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isFile
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SVNWCProperties
name|props
init|=
operator|new
name|SVNWCProperties
argument_list|(
name|file
argument_list|,
literal|""
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|storedRealm
init|=
name|props
operator|.
name|getPropertyValue
argument_list|(
literal|"svn:realmstring"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|realm
operator|.
name|equals
argument_list|(
name|storedRealm
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|props
operator|.
name|getPropertyValue
argument_list|(
literal|"ascii_cert"
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|storeServerCertificate
parameter_list|(
name|String
name|realm
parameter_list|,
name|String
name|data
parameter_list|,
name|int
name|failures
parameter_list|)
throws|throws
name|SVNException
block|{
name|myAuthDirectory
operator|.
name|mkdirs
argument_list|()
expr_stmt|;
name|File
name|file
init|=
operator|new
name|Resource
argument_list|(
name|myAuthDirectory
argument_list|,
name|SVNFileUtil
operator|.
name|computeChecksum
argument_list|(
name|realm
argument_list|)
argument_list|)
decl_stmt|;
name|SVNHashMap
name|map
init|=
operator|new
name|SVNHashMap
argument_list|()
decl_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"ascii_cert"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"svn:realmstring"
argument_list|,
name|realm
argument_list|)
expr_stmt|;
name|map
operator|.
name|put
argument_list|(
literal|"failures"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|failures
argument_list|)
argument_list|)
expr_stmt|;
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|File
name|tmpFile
init|=
name|SVNFileUtil
operator|.
name|createUniqueFile
argument_list|(
name|myAuthDirectory
argument_list|,
literal|"auth"
argument_list|,
literal|".tmp"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
name|SVNWCProperties
operator|.
name|setProperties
argument_list|(
name|SVNProperties
operator|.
name|wrap
argument_list|(
name|map
argument_list|)
argument_list|,
name|file
argument_list|,
name|tmpFile
argument_list|,
name|SVNWCProperties
operator|.
name|SVN_HASH_TERMINATOR
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|deleteFile
argument_list|(
name|tmpFile
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|X509Certificate
name|loadCertificate
parameter_list|(
name|File
name|pemFile
parameter_list|)
block|{
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
name|SVNFileUtil
operator|.
name|openFileForReading
argument_list|(
name|pemFile
argument_list|,
name|SVNLogType
operator|.
name|WC
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SVNException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|CertificateFactory
name|factory
init|=
name|CertificateFactory
operator|.
name|getInstance
argument_list|(
literal|"X509"
argument_list|)
decl_stmt|;
return|return
operator|(
name|X509Certificate
operator|)
name|factory
operator|.
name|generateCertificate
argument_list|(
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|CertificateException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|SVNFileUtil
operator|.
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

