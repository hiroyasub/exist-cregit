begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2012, Adam Retter All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met,     * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.     * Neither the name of Adam Retter Consulting nor the       names of its contributors may be used to endorse or promote products       derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Adam Retter BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES); LOSS OF USE, DATA, OR PROFITS); OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
operator|.
name|adapters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|BidiMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|collections
operator|.
name|bidimap
operator|.
name|DualHashBidiMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|TypeAdapter
block|{
comment|//eXist-db XQuery Type<-> EXQuery Type
specifier|private
specifier|final
specifier|static
name|BidiMap
name|mappings
init|=
operator|new
name|DualHashBidiMap
argument_list|()
decl_stmt|;
static|static
block|{
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|ATTRIBUTE
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|TEXT
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|TEXT
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|PROCESSING_INSTRUCTION
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|PROCESSING_INSTRUCTION
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|COMMENT
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|COMMENT
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|DOCUMENT
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ITEM
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|ANY_TYPE
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ANY_TYPE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|ANY_SIMPLE_TYPE
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ANY_SIMPLE_TYPE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|UNTYPED
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|UNTYPED
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|BOOLEAN
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|QNAME
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|QNAME
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|ANY_URI
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ANY_URI
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|BASE64_BINARY
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|BASE64_BINARY
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|HEX_BINARY
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|HEX_BINARY
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|NOTATION
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|NOTATION
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|DECIMAL
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|FLOAT
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|NON_POSITIVE_INTEGER
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|NON_POSITIVE_INTEGER
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|NEGATIVE_INTEGER
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|NEGATIVE_INTEGER
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|LONG
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|LONG
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|SHORT
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|BYTE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|NON_NEGATIVE_INTEGER
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|NON_NEGATIVE_INTEGER
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|UNSIGNED_LONG
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|UNSIGNED_LONG
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|UNSIGNED_SHORT
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|UNSIGNED_SHORT
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|UNSIGNED_BYTE
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|UNSIGNED_BYTE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|POSITIVE_INTEGER
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|POSITIVE_INTEGER
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|DATE_TIME
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|DATE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|TIME
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|TIME
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|DURATION
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|DURATION
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|YEAR_MONTH_DURATION
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|YEAR_MONTH_DURATION
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|GYEAR
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|G_YEAR
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|GMONTH
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|G_MONTH
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|GDAY
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|G_DAY
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|GYEARMONTH
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|G_YEAR_MONTH
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|GMONTHDAY
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|G_MONTH_DAY
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|TOKEN
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|TOKEN
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|NORMALIZED_STRING
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|NORMALIZED_STRING
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|LANGUAGE
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|LANGUAGE
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|NMTOKEN
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|NM_TOKEN
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|NAME
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|NAME
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|NCNAME
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|NC_NAME
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|ID
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ID
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|IDREF
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ID_REF
argument_list|)
expr_stmt|;
name|mappings
operator|.
name|put
argument_list|(
name|Type
operator|.
name|ENTITY
argument_list|,
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ENTITY
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
name|toExQueryType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
name|exQueryType
init|=
operator|(
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|)
name|mappings
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|exQueryType
operator|==
literal|null
condition|)
block|{
name|exQueryType
operator|=
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
operator|.
name|ANY_TYPE
expr_stmt|;
block|}
return|return
name|exQueryType
return|;
block|}
specifier|public
specifier|static
name|int
name|toExistType
parameter_list|(
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
name|type
parameter_list|)
block|{
name|Integer
name|existType
init|=
operator|(
name|Integer
operator|)
name|mappings
operator|.
name|getKey
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|existType
operator|==
literal|null
condition|)
block|{
name|existType
operator|=
name|Type
operator|.
name|ANY_TYPE
expr_stmt|;
block|}
return|return
name|existType
return|;
block|}
block|}
end_class

end_unit

