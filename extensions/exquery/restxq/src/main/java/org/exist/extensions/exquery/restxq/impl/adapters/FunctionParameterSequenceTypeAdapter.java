begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2012, Adam Retter All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:     * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.     * Neither the name of Adam Retter Consulting nor the       names of its contributors may be used to endorse or promote products       derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Adam Retter BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
operator|.
name|adapters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|FunctionArgument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  *  * @author<a href="mailto:adam.retter@googlemail.com">Adam Retter</a>  */
end_comment

begin_class
class|class
name|FunctionParameterSequenceTypeAdapter
implements|implements
name|FunctionArgument
block|{
specifier|private
name|String
name|name
decl_stmt|;
specifier|private
name|Type
name|primaryType
decl_stmt|;
specifier|private
name|Cardinality
name|cardinality
decl_stmt|;
specifier|protected
name|FunctionParameterSequenceTypeAdapter
parameter_list|()
block|{
block|}
specifier|public
name|FunctionParameterSequenceTypeAdapter
parameter_list|(
specifier|final
name|FunctionParameterSequenceType
name|functionParameterSequenceType
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|functionParameterSequenceType
operator|.
name|getAttributeName
argument_list|()
expr_stmt|;
name|this
operator|.
name|primaryType
operator|=
name|TypeAdapter
operator|.
name|toExQueryType
argument_list|(
name|functionParameterSequenceType
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|cardinality
operator|=
name|CardinalityAdapter
operator|.
name|getCardinality
argument_list|(
name|functionParameterSequenceType
operator|.
name|getCardinality
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|private
name|void
name|setName
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|primaryType
return|;
block|}
specifier|private
name|void
name|setPrimaryType
parameter_list|(
specifier|final
name|Type
name|primaryType
parameter_list|)
block|{
name|this
operator|.
name|primaryType
operator|=
name|primaryType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Cardinality
name|getCardinality
parameter_list|()
block|{
return|return
name|cardinality
return|;
block|}
specifier|private
name|void
name|setCardinality
parameter_list|(
specifier|final
name|Cardinality
name|cardinality
parameter_list|)
block|{
name|this
operator|.
name|cardinality
operator|=
name|cardinality
expr_stmt|;
block|}
block|}
end_class

end_unit

