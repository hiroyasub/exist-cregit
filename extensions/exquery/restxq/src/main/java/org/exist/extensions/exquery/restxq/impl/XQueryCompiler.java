begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2012, Adam Retter All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:     * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.     * Neither the name of Adam Retter Consulting nor the       names of its contributors may be used to endorse or promote products       derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Adam Retter BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
class|class
name|XQueryCompiler
block|{
specifier|public
specifier|final
specifier|static
name|String
name|XQUERY_MIME_TYPE
init|=
literal|"application/xquery"
decl_stmt|;
specifier|public
specifier|static
name|CompiledXQuery
name|compile
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|URI
name|xqueryLocation
parameter_list|)
throws|throws
name|RestXqServiceCompilationException
block|{
try|try
block|{
specifier|final
name|DocumentImpl
name|document
init|=
name|broker
operator|.
name|getResource
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|xqueryLocation
argument_list|)
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
return|return
name|compile
argument_list|(
name|broker
argument_list|,
name|document
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RestXqServiceCompilationException
argument_list|(
literal|"Invalid document location for XQuery: "
operator|+
name|xqueryLocation
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|RestXqServiceCompilationException
argument_list|(
literal|"Permission to access XQuery denied: "
operator|+
name|xqueryLocation
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|static
name|CompiledXQuery
name|compile
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|RestXqServiceCompilationException
block|{
try|try
block|{
if|if
condition|(
name|document
operator|instanceof
name|BinaryDocument
condition|)
block|{
specifier|final
name|DocumentMetadata
name|metadata
init|=
name|document
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
if|if
condition|(
name|metadata
operator|.
name|getMimeType
argument_list|()
operator|.
name|equals
argument_list|(
name|XQUERY_MIME_TYPE
argument_list|)
condition|)
block|{
comment|//compile the query
specifier|final
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|AccessContext
operator|.
name|REST
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|source
init|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|document
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//set the module load path for any module imports that are relative
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
operator|+
operator|(
operator|(
name|XmldbURI
operator|)
name|source
operator|.
name|getKey
argument_list|()
operator|)
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|source
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|RestXqServiceCompilationException
argument_list|(
literal|"Invalid mimetype '"
operator|+
name|metadata
operator|.
name|getMimeType
argument_list|()
operator|+
literal|"' for XQuery: "
operator|+
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|RestXqServiceCompilationException
argument_list|(
literal|"Invalid document location for XQuery: "
operator|+
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|xpe
parameter_list|)
block|{
throw|throw
operator|new
name|RestXqServiceCompilationException
argument_list|(
literal|"Unable to compile XQuery: "
operator|+
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|xpe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|xpe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RestXqServiceCompilationException
argument_list|(
literal|"Unable to access XQuery: "
operator|+
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|RestXqServiceCompilationException
argument_list|(
literal|"Permission to access XQuery denied: "
operator|+
name|document
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

