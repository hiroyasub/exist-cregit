begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2012, Adam Retter All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:     * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.     * Neither the name of Adam Retter Consulting nor the       names of its contributors may be used to endorse or promote products       derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Adam Retter BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
operator|.
name|adapters
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|LiteralValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery3
operator|.
name|Annotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery3
operator|.
name|FunctionSignature
import|;
end_import

begin_comment
comment|/**  *  * @author<a href="mailto:adam.retter@googlemail.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|AnnotationAdapter
implements|implements
name|Annotation
block|{
specifier|private
name|QName
name|name
decl_stmt|;
specifier|private
name|LiteralValueAdapter
name|literals
index|[]
decl_stmt|;
specifier|private
name|FunctionSignatureAdapter
name|functionSignature
decl_stmt|;
specifier|public
name|AnnotationAdapter
parameter_list|()
block|{
block|}
specifier|public
name|AnnotationAdapter
parameter_list|(
specifier|final
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Annotation
name|annotation
parameter_list|)
block|{
name|this
argument_list|(
name|annotation
argument_list|,
operator|new
name|FunctionSignatureAdapter
argument_list|(
name|annotation
operator|.
name|getFunctionSignature
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|AnnotationAdapter
parameter_list|(
specifier|final
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Annotation
name|annotation
parameter_list|,
specifier|final
name|FunctionSignatureAdapter
name|functionSignatureAdapter
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|annotation
operator|.
name|getName
argument_list|()
operator|.
name|toJavaQName
argument_list|()
expr_stmt|;
specifier|final
name|LiteralValue
name|literalValues
index|[]
init|=
name|annotation
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|this
operator|.
name|literals
operator|=
operator|new
name|LiteralValueAdapter
index|[
name|literalValues
operator|.
name|length
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|literalValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|literals
index|[
name|i
index|]
operator|=
operator|new
name|LiteralValueAdapter
argument_list|(
name|literalValues
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|functionSignature
operator|=
name|functionSignatureAdapter
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|private
name|void
name|setName
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Literal
index|[]
name|getLiterals
parameter_list|()
block|{
return|return
name|literals
return|;
block|}
annotation|@
name|Override
specifier|public
name|FunctionSignature
name|getFunctionSignature
parameter_list|()
block|{
return|return
name|functionSignature
return|;
block|}
block|}
end_class

end_unit

