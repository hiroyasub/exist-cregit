begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2012, Adam Retter All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:     * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.     * Neither the name of Adam Retter Consulting nor the       names of its contributors may be used to endorse or promote products       derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Adam Retter BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CloseShieldInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|external
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentBuilderReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|CachingFilterInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FilterInputStreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FilterInputStreamCacheFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64BinaryValueType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValueFromInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValueManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|http
operator|.
name|HttpRequest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|ResourceFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|ResourceFunctionExecuter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|RestXqErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|RestXqServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|RestXqServiceSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
operator|.
name|AbstractRestXqService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xdm
operator|.
name|type
operator|.
name|AbstractTypedValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xdm
operator|.
name|type
operator|.
name|SequenceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|RestXqServiceImpl
extends|extends
name|AbstractRestXqService
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|RestXqServiceImpl
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BrokerPool
name|brokerPool
decl_stmt|;
specifier|private
specifier|final
name|BinaryValueManager
name|binaryValueManager
decl_stmt|;
specifier|public
name|RestXqServiceImpl
parameter_list|(
specifier|final
name|ResourceFunction
name|resourceFunction
parameter_list|,
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|)
block|{
name|super
argument_list|(
name|resourceFunction
argument_list|)
expr_stmt|;
name|this
operator|.
name|brokerPool
operator|=
name|brokerPool
expr_stmt|;
name|this
operator|.
name|binaryValueManager
operator|=
operator|new
name|BinaryValueManager
argument_list|()
block|{
specifier|final
name|List
argument_list|<
name|BinaryValue
argument_list|>
name|binaryValues
init|=
operator|new
name|ArrayList
argument_list|<
name|BinaryValue
argument_list|>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|registerBinaryValueInstance
parameter_list|(
specifier|final
name|BinaryValue
name|binaryValue
parameter_list|)
block|{
name|binaryValues
operator|.
name|add
argument_list|(
name|binaryValue
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|cleanupBinaryValueInstances
parameter_list|()
block|{
for|for
control|(
specifier|final
name|BinaryValue
name|binaryValue
range|:
name|binaryValues
control|)
block|{
try|try
block|{
name|binaryValue
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to close binary value: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
name|binaryValues
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCacheClass
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|getBrokerPool
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Configuration
operator|.
name|BINARY_CACHE_CLASS_PROPERTY
argument_list|)
return|;
block|}
block|}
expr_stmt|;
block|}
specifier|private
name|BrokerPool
name|getBrokerPool
parameter_list|()
block|{
return|return
name|brokerPool
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|service
parameter_list|(
specifier|final
name|HttpRequest
name|request
parameter_list|,
specifier|final
name|HttpResponse
name|response
parameter_list|,
specifier|final
name|ResourceFunctionExecuter
name|resourceFunctionExecuter
parameter_list|,
specifier|final
name|RestXqServiceSerializer
name|restXqServiceSerializer
parameter_list|)
throws|throws
name|RestXqServiceException
block|{
name|super
operator|.
name|service
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|resourceFunctionExecuter
argument_list|,
name|restXqServiceSerializer
argument_list|)
expr_stmt|;
name|binaryValueManager
operator|.
name|cleanupBinaryValueInstances
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Sequence
name|extractRequestBody
parameter_list|(
specifier|final
name|HttpRequest
name|request
parameter_list|)
throws|throws
name|RestXqServiceException
block|{
comment|//TODO dont use close shield input stream and move parsing of form parameters from HttpServletRequestAdapter into RequestBodyParser
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
name|FilterInputStreamCache
name|cache
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//first, get the content of the request
name|is
operator|=
operator|new
name|CloseShieldInputStream
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
comment|//if the content length is unknown or 0, return
specifier|final
name|int
name|contentLength
init|=
name|request
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentLength
operator|==
operator|-
literal|1
operator|||
name|contentLength
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//if marking is not supported, we have to cache the input stream, so we can reread it, as we may use it twice (once for xml attempt and once for string attempt)
if|if
condition|(
operator|!
name|is
operator|.
name|markSupported
argument_list|()
condition|)
block|{
name|cache
operator|=
name|FilterInputStreamCacheFactory
operator|.
name|getCacheInstance
argument_list|(
operator|new
name|FilterInputStreamCacheFactory
operator|.
name|FilterInputStreamCacheConfiguration
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getCacheClass
parameter_list|()
block|{
specifier|final
name|Configuration
name|configuration
init|=
name|getBrokerPool
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
return|return
operator|(
name|String
operator|)
name|configuration
operator|.
name|getProperty
argument_list|(
name|Configuration
operator|.
name|BINARY_CACHE_CLASS_PROPERTY
argument_list|)
return|;
block|}
block|}
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cache
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|mark
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RestXqServiceException
argument_list|(
name|RestXqErrorCodes
operator|.
name|RQDY0014
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
name|Item
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//was there any POST content?
comment|/**              * There is a bug in HttpInput.available() in Jetty 7.2.2.v20101205              * This has been filed as Bug 333415 - https://bugs.eclipse.org/bugs/show_bug.cgi?id=333415              * It is expected to be fixed in the Jetty 7.3.0 release              */
comment|//TODO reinstate call to .available() when Jetty 7.3.0 is released, use of .getContentLength() is not reliable because of http mechanics
comment|//if(is != null&& is.available()> 0) {
specifier|final
name|int
name|contentLength
init|=
name|request
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
operator|&&
name|contentLength
operator|>
literal|0
condition|)
block|{
name|String
name|contentType
init|=
name|request
operator|.
name|getContentType
argument_list|()
decl_stmt|;
comment|// 1) determine if exists mime database considers this binary data
if|if
condition|(
name|contentType
operator|!=
literal|null
condition|)
block|{
comment|//strip off any charset encoding info
if|if
condition|(
name|contentType
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|contentType
operator|.
name|indexOf
argument_list|(
literal|";"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MimeType
name|mimeType
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentType
argument_list|(
name|contentType
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
operator|&&
operator|!
name|mimeType
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
comment|//binary data
try|try
block|{
name|result
operator|=
name|BinaryValueFromInputStream
operator|.
name|getInstance
argument_list|(
name|binaryValueManager
argument_list|,
operator|new
name|Base64BinaryValueType
argument_list|()
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|xpe
parameter_list|)
block|{
throw|throw
operator|new
name|RestXqServiceException
argument_list|(
name|RestXqErrorCodes
operator|.
name|RQDY0014
argument_list|,
name|xpe
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
comment|//2) not binary, try and parse as an XML documemnt
name|result
operator|=
name|parseAsXml
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|String
name|encoding
init|=
name|request
operator|.
name|getCharacterEncoding
argument_list|()
decl_stmt|;
comment|// 3) not a valid XML document, return a string representation of the document
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
try|try
block|{
comment|//reset the stream, as we need to reuse for string parsing
name|is
operator|.
name|reset
argument_list|()
expr_stmt|;
name|result
operator|=
name|parseAsString
argument_list|(
name|is
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|RestXqServiceException
argument_list|(
name|RestXqErrorCodes
operator|.
name|RQDY0014
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|cache
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|cache
operator|.
name|invalidate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|//dont close the stream if its a binary value, because we will need it later for serialization
if|if
condition|(
name|is
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|result
operator|instanceof
name|BinaryValue
operator|)
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|SequenceImpl
argument_list|<
name|Item
argument_list|>
argument_list|(
operator|new
name|ItemTypedValue
argument_list|(
name|result
argument_list|)
argument_list|)
return|;
block|}
specifier|private
class|class
name|ItemTypedValue
extends|extends
name|AbstractTypedValue
argument_list|<
name|Item
argument_list|>
block|{
specifier|public
name|ItemTypedValue
parameter_list|(
specifier|final
name|Item
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|NodeValue
name|parseAsXml
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
block|{
name|NodeValue
name|result
init|=
literal|null
decl_stmt|;
name|XMLReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//try and construct xml document from input stream, we use eXist's in-memory DOM implementation
comment|//we have to use CloseShieldInputStream otherwise the parser closes the stream and we cant later reread
specifier|final
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
operator|new
name|CloseShieldInputStream
argument_list|(
name|is
argument_list|)
argument_list|)
decl_stmt|;
name|reader
operator|=
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
operator|.
name|borrowXMLReader
argument_list|()
expr_stmt|;
specifier|final
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
specifier|final
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|Document
name|doc
init|=
name|receiver
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|result
operator|=
operator|(
name|NodeValue
operator|)
name|doc
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|saxe
parameter_list|)
block|{
comment|//do nothing, we will default to trying to return a string below
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|//do nothing, we will default to trying to return a string below
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
operator|.
name|returnXMLReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|StringValue
name|parseAsString
parameter_list|(
name|InputStream
name|is
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|ByteArrayOutputStream
name|bos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|read
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|bos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
return|return
operator|new
name|StringValue
argument_list|(
name|s
argument_list|)
return|;
block|}
block|}
end_class

end_unit

