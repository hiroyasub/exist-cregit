begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2012, Adam Retter All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:     * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.     * Neither the name of Adam Retter Consulting nor the       names of its contributors may be used to endorse or promote products       derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Adam Retter BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Queue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Caffeine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|RestXqServiceCompiledXQueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|RestXqService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|RestXqServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jctools
operator|.
name|queues
operator|.
name|atomic
operator|.
name|MpmcAtomicArrayQueue
import|;
end_import

begin_comment
comment|/**  * Compiled XQuery Cache for RESTXQ Resource Functions.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|RestXqServiceCompiledXQueryCacheImpl
implements|implements
name|RestXqServiceCompiledXQueryCache
block|{
specifier|private
specifier|static
specifier|final
name|RestXqServiceCompiledXQueryCacheImpl
name|INSTANCE
init|=
operator|new
name|RestXqServiceCompiledXQueryCacheImpl
argument_list|()
decl_stmt|;
comment|// TODO(AR) make configurable?
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_POOL_SIZE
init|=
literal|256
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_QUERY_STACK_SIZE
init|=
literal|64
decl_stmt|;
specifier|private
specifier|final
name|Cache
argument_list|<
name|URI
argument_list|,
name|Queue
argument_list|<
name|CompiledXQuery
argument_list|>
argument_list|>
name|cache
decl_stmt|;
specifier|private
name|RestXqServiceCompiledXQueryCacheImpl
parameter_list|()
block|{
name|this
operator|.
name|cache
operator|=
name|Caffeine
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|DEFAULT_MAX_POOL_SIZE
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|RestXqServiceCompiledXQueryCacheImpl
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompiledXQuery
name|getCompiledQuery
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|URI
name|xqueryLocation
parameter_list|)
throws|throws
name|RestXqServiceException
block|{
specifier|final
name|Queue
argument_list|<
name|CompiledXQuery
argument_list|>
name|queue
init|=
name|cache
operator|.
name|get
argument_list|(
name|xqueryLocation
argument_list|,
name|key
lambda|->
operator|new
name|MpmcAtomicArrayQueue
argument_list|<>
argument_list|(
name|DEFAULT_MAX_QUERY_STACK_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|CompiledXQuery
name|xquery
init|=
name|queue
operator|.
name|poll
argument_list|()
decl_stmt|;
if|if
condition|(
name|xquery
operator|==
literal|null
condition|)
block|{
name|xquery
operator|=
name|XQueryCompiler
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|xqueryLocation
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// prepare the context for re-use
try|try
block|{
name|xquery
operator|.
name|getContext
argument_list|()
operator|.
name|prepareForReuse
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RestXqServiceException
argument_list|(
literal|"Unable to prepare compiled XQuery for reuse"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|xquery
operator|.
name|getContext
argument_list|()
operator|.
name|prepareForExecution
argument_list|()
expr_stmt|;
return|return
name|xquery
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|returnCompiledQuery
parameter_list|(
specifier|final
name|URI
name|xqueryLocation
parameter_list|,
specifier|final
name|CompiledXQuery
name|xquery
parameter_list|)
block|{
comment|//reset the query and context
name|xquery
operator|.
name|getContext
argument_list|()
operator|.
name|runCleanupTasks
argument_list|()
expr_stmt|;
name|xquery
operator|.
name|reset
argument_list|()
expr_stmt|;
name|xquery
operator|.
name|getContext
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
comment|// place in the cache
specifier|final
name|Queue
argument_list|<
name|CompiledXQuery
argument_list|>
name|queue
init|=
name|cache
operator|.
name|get
argument_list|(
name|xqueryLocation
argument_list|,
name|key
lambda|->
operator|new
name|MpmcAtomicArrayQueue
argument_list|<>
argument_list|(
name|DEFAULT_MAX_QUERY_STACK_SIZE
argument_list|)
argument_list|)
decl_stmt|;
name|queue
operator|.
name|offer
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeService
parameter_list|(
specifier|final
name|RestXqService
name|service
parameter_list|)
block|{
specifier|final
name|URI
name|xqueryLocation
init|=
name|service
operator|.
name|getResourceFunction
argument_list|()
operator|.
name|getXQueryLocation
argument_list|()
decl_stmt|;
name|cache
operator|.
name|invalidate
argument_list|(
name|xqueryLocation
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeServices
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|RestXqService
argument_list|>
name|services
parameter_list|)
block|{
name|cache
operator|.
name|invalidateAll
argument_list|(
name|mapIterable
argument_list|(
name|services
argument_list|,
name|restXqService
lambda|->
name|restXqService
operator|.
name|getResourceFunction
argument_list|()
operator|.
name|getXQueryLocation
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Utility function that given an Iterable<T> and a function of T -> U, returns an Iterable<U>.      *      * @param<T> The input type.      * @param<U> The mapped result type.      *      * @param input The input iterable.      * @param mapper The mapping function.      *      * @return The mapped iterable.      */
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|,
name|U
parameter_list|>
name|Iterable
argument_list|<
name|U
argument_list|>
name|mapIterable
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|T
argument_list|>
name|input
parameter_list|,
specifier|final
name|Function
argument_list|<
name|T
argument_list|,
name|U
argument_list|>
name|mapper
parameter_list|)
block|{
return|return
operator|new
name|Iterable
argument_list|<
name|U
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|U
argument_list|>
name|iterator
parameter_list|()
block|{
specifier|final
name|Iterator
argument_list|<
name|T
argument_list|>
name|it
init|=
name|input
operator|.
name|iterator
argument_list|()
decl_stmt|;
return|return
operator|new
name|Iterator
argument_list|<
name|U
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|it
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|U
name|next
parameter_list|()
block|{
return|return
name|mapper
operator|.
name|apply
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|)
return|;
block|}
block|}
return|;
block|}
block|}
return|;
block|}
block|}
end_class

end_unit

