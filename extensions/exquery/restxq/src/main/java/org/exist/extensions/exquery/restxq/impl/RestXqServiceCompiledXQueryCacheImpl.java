begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2012, Adam Retter All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:     * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.     * Neither the name of Adam Retter Consulting nor the       names of its contributors may be used to endorse or promote products       derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Adam Retter BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|RestXqServiceCompiledXQueryCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|RestXqService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|RestXqServiceException
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|RestXqServiceCompiledXQueryCacheImpl
implements|implements
name|RestXqServiceCompiledXQueryCache
block|{
specifier|private
specifier|final
specifier|static
name|RestXqServiceCompiledXQueryCacheImpl
name|instance
init|=
operator|new
name|RestXqServiceCompiledXQueryCacheImpl
argument_list|()
decl_stmt|;
comment|//TODO could introduce a MAX stack size, i.e. you can only have N compiled main.xqy's in the cache
specifier|private
specifier|final
name|Map
argument_list|<
name|URI
argument_list|,
name|Stack
argument_list|<
name|CompiledXQuery
argument_list|>
argument_list|>
name|cache
init|=
operator|new
name|HashMap
argument_list|<
name|URI
argument_list|,
name|Stack
argument_list|<
name|CompiledXQuery
argument_list|>
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|cacheLock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|RestXqServiceCompiledXQueryCacheImpl
name|getInstance
parameter_list|()
block|{
return|return
name|instance
return|;
block|}
annotation|@
name|Override
specifier|public
name|CompiledXQuery
name|getCompiledQuery
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|URI
name|xqueryLocation
parameter_list|)
throws|throws
name|RestXqServiceException
block|{
name|CompiledXQuery
name|xquery
init|=
literal|null
decl_stmt|;
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|Stack
argument_list|<
name|CompiledXQuery
argument_list|>
name|queries
init|=
name|cache
operator|.
name|get
argument_list|(
name|xqueryLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|queries
operator|!=
literal|null
operator|&&
operator|!
name|queries
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xquery
operator|=
name|queries
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|xquery
operator|==
literal|null
condition|)
block|{
name|xquery
operator|=
name|XQueryCompiler
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|xqueryLocation
argument_list|)
expr_stmt|;
block|}
comment|//reset the state of the query
name|xquery
operator|.
name|reset
argument_list|()
expr_stmt|;
name|xquery
operator|.
name|getContext
argument_list|()
operator|.
name|getWatchDog
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
name|xquery
operator|.
name|getContext
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
name|xquery
operator|.
name|getContext
argument_list|()
operator|.
name|prepareForExecution
argument_list|()
expr_stmt|;
return|return
name|xquery
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|returnCompiledQuery
parameter_list|(
specifier|final
name|URI
name|xqueryLocation
parameter_list|,
specifier|final
name|CompiledXQuery
name|xquery
parameter_list|)
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|Stack
argument_list|<
name|CompiledXQuery
argument_list|>
name|queries
init|=
name|cache
operator|.
name|get
argument_list|(
name|xqueryLocation
argument_list|)
decl_stmt|;
if|if
condition|(
name|queries
operator|==
literal|null
condition|)
block|{
name|queries
operator|=
operator|new
name|Stack
argument_list|<
name|CompiledXQuery
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|queries
operator|.
name|push
argument_list|(
name|xquery
argument_list|)
expr_stmt|;
name|cache
operator|.
name|put
argument_list|(
name|xqueryLocation
argument_list|,
name|queries
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeService
parameter_list|(
specifier|final
name|RestXqService
name|service
parameter_list|)
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|cache
operator|.
name|remove
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeServices
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|RestXqService
argument_list|>
name|services
parameter_list|)
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|RestXqService
name|service
range|:
name|services
control|)
block|{
name|cache
operator|.
name|remove
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cacheLock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

