begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2014, Adam Retter All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:     * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.     * Neither the name of Adam Retter Consulting nor the       names of its contributors may be used to endorse or promote products       derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Adam Retter BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|XMLAssert
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|serialization
operator|.
name|annotation
operator|.
name|MediaTypeAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|serialization
operator|.
name|annotation
operator|.
name|MethodAnnotation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|serialization
operator|.
name|annotation
operator|.
name|SerializationAnnotationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|serialization
operator|.
name|annotation
operator|.
name|SerializationAnnotationName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Literal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exquery
operator|.
name|xquery
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|Override
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_comment
comment|/**  * Tests for RegistryFunctions  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|RegistryFunctionsTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|outputMediaType
parameter_list|()
throws|throws
name|URISyntaxException
throws|,
name|TransformerException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|SerializationAnnotationException
block|{
comment|//test setup
specifier|final
name|String
name|internetMediaType
init|=
literal|"application/octet-stream"
decl_stmt|;
specifier|final
name|MediaTypeAnnotation
name|mediaType
init|=
operator|new
name|MediaTypeAnnotation
argument_list|()
decl_stmt|;
name|mediaType
operator|.
name|setName
argument_list|(
name|SerializationAnnotationName
operator|.
name|mediatype
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|mediaType
operator|.
name|setLiterals
argument_list|(
operator|new
name|Literal
index|[]
block|{
operator|new
name|Literal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|STRING
return|;
block_content|}
block|@Override                 public String getValue(
block|)
block|{
return|return
name|internetMediaType
return|;
block|}
block|}
block|}
block|)
class|;
end_class

begin_expr_stmt
name|mediaType
operator|.
name|initialise
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|//execute serialize method
end_comment

begin_decl_stmt
specifier|final
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RegistryFunctions
operator|.
name|serializeSerializationAnnotation
argument_list|(
name|builder
argument_list|,
name|mediaType
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|//assert result
end_comment

begin_decl_stmt
specifier|final
name|String
name|xmlResult
init|=
name|documentToString
argument_list|(
name|builder
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|XMLAssert
operator|.
name|assertXMLEqual
argument_list|(
literal|"<media-type xmlns=\"http://www.w3.org/2010/xslt-xquery-serialization\">"
operator|+
name|internetMediaType
operator|+
literal|"</media-type>"
argument_list|,
name|xmlResult
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      @
name|Test
specifier|public
name|void
name|outputMethod
parameter_list|()
throws|throws
name|SerializationAnnotationException
throws|,
name|TransformerException
throws|,
name|IOException
throws|,
name|SAXException
block|{
comment|//test setup
specifier|final
name|String
name|methodStr
init|=
literal|"html5"
decl_stmt|;
specifier|final
name|MethodAnnotation
name|method
init|=
operator|new
name|MethodAnnotation
argument_list|()
decl_stmt|;
name|method
operator|.
name|setName
argument_list|(
name|SerializationAnnotationName
operator|.
name|method
operator|.
name|getQName
argument_list|()
argument_list|)
expr_stmt|;
name|method
operator|.
name|setLiterals
argument_list|(
operator|new
name|Literal
index|[]
block|{
operator|new
name|Literal
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Type
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|STRING
return|;
block_content|}
block|@Override                 public String getValue(
block|)
block|{
return|return
name|methodStr
return|;
block|}
block|}
block|}
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|method
operator|.
name|initialise
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|//execute serialize method
end_comment

begin_decl_stmt
specifier|final
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|()
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|RegistryFunctions
operator|.
name|serializeSerializationAnnotation
argument_list|(
name|builder
argument_list|,
name|method
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
end_expr_stmt

begin_comment
comment|//assert result
end_comment

begin_decl_stmt
specifier|final
name|String
name|xmlResult
init|=
name|documentToString
argument_list|(
name|builder
operator|.
name|getDocument
argument_list|()
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|XMLAssert
operator|.
name|assertXMLEqual
argument_list|(
literal|"<method xmlns=\"http://www.w3.org/2010/xslt-xquery-serialization\">"
operator|+
name|methodStr
operator|+
literal|"</method>"
argument_list|,
name|xmlResult
argument_list|)
expr_stmt|;
end_expr_stmt

begin_function
unit|}      private
name|String
name|documentToString
parameter_list|(
specifier|final
name|Document
name|doc
parameter_list|)
throws|throws
name|TransformerException
throws|,
name|IOException
block|{
specifier|final
name|Transformer
name|transformer
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|METHOD
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setOutputProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|Writer
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
specifier|final
name|Result
name|sr
init|=
operator|new
name|StreamResult
argument_list|(
name|sw
argument_list|)
decl_stmt|;
name|transformer
operator|.
name|transform
argument_list|(
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
argument_list|,
name|sr
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_function

unit|}
end_unit

