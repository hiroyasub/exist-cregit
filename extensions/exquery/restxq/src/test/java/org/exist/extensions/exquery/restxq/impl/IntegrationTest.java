begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|extensions
operator|.
name|exquery
operator|.
name|restxq
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|fluent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|fluent
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicHeader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_class
specifier|public
class|class
name|IntegrationTest
block|{
specifier|private
specifier|static
name|String
name|COLLECTION_CONFIG
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
operator|+
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">\n"
operator|+
literal|"<triggers>\n"
operator|+
literal|"<trigger class=\"org.exist.extensions.exquery.restxq.impl.RestXqTrigger\"/>\n"
operator|+
literal|"</triggers>\n"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|static
name|String
name|TEST_COLLECTION
init|=
literal|"/db/restxq/integration-test"
decl_stmt|;
specifier|private
specifier|static
name|ContentType
name|XQUERY_CONTENT_TYPE
init|=
name|ContentType
operator|.
name|create
argument_list|(
literal|"application/xquery"
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|XQUERY1
init|=
literal|"xquery version \"3.0\";\n"
operator|+
literal|"\n"
operator|+
literal|"module namespace mod1 = \"http://mod1\";\n"
operator|+
literal|"\n"
operator|+
literal|"declare namespace output = \"https://www.w3.org/2010/xslt-xquery-serialization\";\n"
operator|+
literal|"\n"
operator|+
literal|"declare\n"
operator|+
literal|"    %rest:GET\n"
operator|+
literal|"    %rest:path(\"/media-type-json1\")\n"
operator|+
literal|"    %output:media-type(\"application/json\")\n"
operator|+
literal|"    %output:method(\"json\")\n"
operator|+
literal|"function mod1:media-type-json1() {\n"
operator|+
literal|"<success/>\n"
operator|+
literal|"};"
decl_stmt|;
specifier|private
specifier|static
name|String
name|XQUERY1_FILENAME
init|=
literal|"restxq-tests1.xqm"
decl_stmt|;
specifier|private
specifier|static
name|Executor
name|executor
init|=
literal|null
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
name|ExistWebServer
name|existWebServer
init|=
operator|new
name|ExistWebServer
argument_list|(
literal|false
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|getServerUri
parameter_list|()
block|{
return|return
literal|"http://localhost:"
operator|+
name|existWebServer
operator|.
name|getPort
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|getRestUri
parameter_list|()
block|{
return|return
name|getServerUri
argument_list|()
operator|+
literal|"/rest"
return|;
block|}
specifier|private
specifier|static
name|String
name|getRestXqUri
parameter_list|()
block|{
return|return
name|getServerUri
argument_list|()
operator|+
literal|"/restxq"
return|;
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|storeResourceFunctions
parameter_list|()
throws|throws
name|IOException
block|{
name|executor
operator|=
name|Executor
operator|.
name|newInstance
argument_list|()
operator|.
name|auth
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
operator|.
name|authPreemptive
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|HttpResponse
name|response
init|=
literal|null
decl_stmt|;
name|response
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Put
argument_list|(
name|getRestUri
argument_list|()
operator|+
literal|"/db/system/config"
operator|+
name|TEST_COLLECTION
operator|+
literal|"/"
operator|+
name|CollectionConfiguration
operator|.
name|DEFAULT_COLLECTION_CONFIG_FILE
argument_list|)
operator|.
name|bodyString
argument_list|(
name|COLLECTION_CONFIG
argument_list|,
name|ContentType
operator|.
name|APPLICATION_XML
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_CREATED
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Put
argument_list|(
name|getRestUri
argument_list|()
operator|+
name|TEST_COLLECTION
operator|+
literal|"/"
operator|+
name|XQUERY1_FILENAME
argument_list|)
operator|.
name|bodyString
argument_list|(
name|XQUERY1
argument_list|,
name|XQUERY_CONTENT_TYPE
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_CREATED
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Get
argument_list|(
name|getRestUri
argument_list|()
operator|+
literal|"/db/?_query=rest:resource-functions()"
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|asString
argument_list|(
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Ignore
argument_list|(
literal|"TODO(AR) need to figure out how to access the RESTXQ API from {@link ExistWebServer}"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|mediaTypeJson1
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|HttpResponse
name|response
init|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Get
argument_list|(
name|getRestXqUri
argument_list|()
operator|+
literal|"/media-type-json1"
argument_list|)
operator|.
name|addHeader
argument_list|(
operator|new
name|BasicHeader
argument_list|(
literal|"Accept"
argument_list|,
literal|"application/json"
argument_list|)
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<success/>"
argument_list|,
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|String
name|asString
parameter_list|(
specifier|final
name|InputStream
name|inputStream
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|inputStream
argument_list|,
name|UTF_8
argument_list|)
init|)
block|{
specifier|final
name|char
name|cbuf
index|[]
init|=
operator|new
name|char
index|[
literal|4096
index|]
decl_stmt|;
name|int
name|read
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|cbuf
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|cbuf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

