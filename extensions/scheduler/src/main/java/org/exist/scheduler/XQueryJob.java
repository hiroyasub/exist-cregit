begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|SourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionException
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
class|class
name|XQueryJob
implements|implements
name|org
operator|.
name|quartz
operator|.
name|Job
block|{
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|execute
parameter_list|(
name|JobExecutionContext
name|jec
parameter_list|)
throws|throws
name|JobExecutionException
block|{
specifier|final
name|JobDataMap
name|jobDataMap
init|=
name|jec
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
specifier|final
name|Job
name|description
init|=
operator|(
name|Job
operator|)
name|jobDataMap
operator|.
name|get
argument_list|(
literal|"Job"
argument_list|)
decl_stmt|;
if|if
condition|(
name|description
operator|.
name|getDatabase
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|JobExecutionException
argument_list|(
literal|"Internal error, database missing, abort."
argument_list|)
throw|;
if|if
condition|(
name|description
operator|.
name|scriptURI
operator|==
literal|null
condition|)
throw|throw
operator|new
name|JobExecutionException
argument_list|(
literal|"Internal error, script URI missing, abort."
argument_list|)
throw|;
if|if
condition|(
name|description
operator|.
name|getSubject
argument_list|()
operator|==
literal|null
condition|)
throw|throw
operator|new
name|JobExecutionException
argument_list|(
literal|"Internal error, subject missing, abort."
argument_list|)
throw|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
name|Source
name|source
init|=
literal|null
decl_stmt|;
name|XQueryPool
name|pool
init|=
literal|null
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
literal|null
decl_stmt|;
name|XQueryContext
name|context
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|description
operator|.
name|getDatabase
argument_list|()
operator|.
name|get
argument_list|(
name|description
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|//get the xquery
if|if
condition|(
name|description
operator|.
name|scriptURI
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|>
literal|0
condition|)
block|{
name|source
operator|=
name|SourceFactory
operator|.
name|getSource
argument_list|(
name|broker
argument_list|,
literal|""
argument_list|,
name|description
operator|.
name|scriptURI
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|description
operator|.
name|scriptURI
argument_list|)
decl_stmt|;
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|source
operator|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
throw|throw
operator|new
name|JobExecutionException
argument_list|(
literal|"Script '"
operator|+
name|description
operator|.
name|scriptURI
operator|+
literal|" can be read, abort."
argument_list|)
throw|;
specifier|final
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|pool
operator|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
expr_stmt|;
name|compiled
operator|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
comment|//TODO: don't hardcode this?
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|append
argument_list|(
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|XmldbURI
index|[]
block|{
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|JobExecutionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
name|context
operator|.
name|cleanupBinaryValueInstances
argument_list|()
expr_stmt|;
if|if
condition|(
name|pool
operator|!=
literal|null
operator|&&
name|source
operator|!=
literal|null
operator|&&
name|compiled
operator|!=
literal|null
condition|)
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
name|description
operator|.
name|getDatabase
argument_list|()
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

