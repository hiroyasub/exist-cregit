begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id:$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|debuggee
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|PathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|DebuggeeJointImpl
implements|implements
name|DebuggeeJoint
implements|,
name|Commands
implements|,
name|Status
block|{
specifier|private
name|List
argument_list|<
name|Expression
argument_list|>
name|stack
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|int
name|stackDepth
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|command
init|=
name|STOP_ON_FIRST_LINE
decl_stmt|;
specifier|private
name|String
name|status
init|=
name|FIRST_RUN
decl_stmt|;
specifier|public
name|DebuggeeJointImpl
parameter_list|()
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.debuggee.DebuggeeJoint#expressionEnd(org.exist.xquery.Expression) 	 */
specifier|public
name|void
name|expressionEnd
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expressionEnd expr = "
operator|+
name|expr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.debuggee.DebuggeeJoint#expressionStart(org.exist.xquery.Expression) 	 */
specifier|public
name|void
name|expressionStart
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"expressionStart expr = "
operator|+
name|expr
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stack
operator|.
name|size
argument_list|()
operator|==
name|stackDepth
condition|)
name|stack
operator|.
name|set
argument_list|(
name|stackDepth
operator|-
literal|1
argument_list|,
name|expr
argument_list|)
expr_stmt|;
else|else
name|stack
operator|.
name|add
argument_list|(
name|expr
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|command
operator|==
name|STOP_ON_FIRST_LINE
operator|&&
name|status
operator|==
name|FIRST_RUN
condition|)
name|waitCommand
argument_list|()
expr_stmt|;
if|if
condition|(
name|command
operator|==
name|STEP_INTO
condition|)
block|{
name|status
operator|=
name|STARTING
expr_stmt|;
name|command
operator|=
name|WAIT
expr_stmt|;
break|break;
block|}
name|waitCommand
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|waitCommand
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DebuggeeJoint.waitCommand notifyAll thread = "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DebuggeeJoint.waitCommand wait thread = "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DebuggeeJoint.waitCommand wait passed thread = "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
comment|//UNDERSTAND: what to do?
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.debuggee.DebuggeeJoint#getContext() 	 */
specifier|public
name|XQueryContext
name|getContext
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|public
specifier|synchronized
name|String
name|stepInto
parameter_list|()
block|{
name|command
operator|=
name|STEP_INTO
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DebuggeeJoint.stepInto notifyAll thread = "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DebuggeeJoint.stepInto wait thread = "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"DebuggeeJoint.stepInto wait passed thread = "
operator|+
name|Thread
operator|.
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
return|return
literal|"error"
return|;
block|}
return|return
name|status
return|;
block|}
specifier|public
name|String
name|stepOut
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|stepOver
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|featureSet
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|false
return|;
block|}
specifier|public
name|List
argument_list|<
name|Expression
argument_list|>
name|stackGet
parameter_list|()
block|{
return|return
name|stack
return|;
block|}
block|}
end_class

end_unit

