begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id:$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|debuggee
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetSocketAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|RuntimeIoException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|future
operator|.
name|ConnectFuture
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolCodecFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|transport
operator|.
name|socket
operator|.
name|nio
operator|.
name|NioSocketConnector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|dgbp
operator|.
name|DGBPCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|dgbp
operator|.
name|DGBPProtocolHandler
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|DebuggeeConnectionTCP
extends|extends
name|Thread
implements|implements
name|DebuggeeConnection
implements|,
name|Runnable
block|{
specifier|private
name|String
name|host
init|=
literal|"127.0.0.1"
decl_stmt|;
specifier|private
name|int
name|port
init|=
literal|9000
decl_stmt|;
specifier|private
name|NioSocketConnector
name|connector
decl_stmt|;
specifier|private
name|IoSession
name|session
decl_stmt|;
specifier|private
name|int
name|status
init|=
literal|0
decl_stmt|;
specifier|private
name|Object
name|lock
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|public
name|DebuggeeConnectionTCP
parameter_list|()
block|{
comment|// Create TCP/IP connector.
name|connector
operator|=
operator|new
name|NioSocketConnector
argument_list|()
expr_stmt|;
comment|// Set connect timeout for 30 seconds.
comment|//XXX: find the best timeout ???
comment|//		connector.setConnectTimeoutMillis(3000*1000L);
name|connector
operator|.
name|getFilterChain
argument_list|()
operator|.
name|addLast
argument_list|(
literal|"protocol"
argument_list|,
operator|new
name|ProtocolCodecFilter
argument_list|(
operator|new
name|DGBPCodecFactory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start communication.
name|connector
operator|.
name|setHandler
argument_list|(
operator|new
name|DGBPProtocolHandler
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|connect
parameter_list|()
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
if|if
condition|(
name|status
operator|==
literal|2
condition|)
return|return
literal|true
return|;
try|try
block|{
name|ConnectFuture
name|future
init|=
name|connector
operator|.
name|connect
argument_list|(
operator|new
name|InetSocketAddress
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
decl_stmt|;
name|future
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|session
operator|=
name|future
operator|.
name|getSession
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeIoException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to connect."
argument_list|)
expr_stmt|;
name|status
operator|=
literal|0
expr_stmt|;
return|return
literal|false
return|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"connected"
argument_list|)
expr_stmt|;
name|status
operator|=
literal|1
expr_stmt|;
comment|//			start();
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
comment|// wait until the summation is done
name|session
operator|.
name|getCloseFuture
argument_list|()
operator|.
name|awaitUninterruptibly
argument_list|()
expr_stmt|;
name|connector
operator|.
name|dispose
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"disconnected"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
synchronized|synchronized
init|(
name|lock
init|)
block|{
name|status
operator|=
literal|0
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|isConnected
parameter_list|()
block|{
comment|//XXX: resolve concurrency problem here!!!
return|return
operator|(
name|status
operator|==
literal|2
operator|)
return|;
block|}
block|}
end_class

end_unit

