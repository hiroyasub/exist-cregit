begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|debugger
operator|.
name|dbgp
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|buffer
operator|.
name|IoBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|CumulativeProtocolDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolDecoderOutput
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|RequestDecoder
extends|extends
name|CumulativeProtocolDecoder
block|{
specifier|private
name|String
name|sLength
init|=
literal|""
decl_stmt|;
specifier|private
name|Integer
name|length
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|protected
name|boolean
name|doDecode
parameter_list|(
name|IoSession
name|session
parameter_list|,
name|IoBuffer
name|in
parameter_list|,
name|ProtocolDecoderOutput
name|out
parameter_list|)
throws|throws
name|Exception
block|{
name|byte
name|b
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
comment|//TODO: limit length to avoid "OutOfMemory"
if|if
condition|(
name|length
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|in
operator|.
name|remaining
argument_list|()
operator|>
literal|0
condition|)
block|{
name|b
operator|=
name|in
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|b
operator|==
operator|(
name|byte
operator|)
literal|0
condition|)
block|{
try|try
block|{
name|length
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|sLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|NumberFormatException
name|e
parameter_list|)
block|{
name|length
operator|=
literal|null
expr_stmt|;
name|sLength
operator|=
literal|""
expr_stmt|;
block|}
continue|continue;
block|}
name|sLength
operator|+=
operator|(
name|char
operator|)
name|b
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|in
operator|.
name|remaining
argument_list|()
operator|>=
name|length
condition|)
block|{
name|ResponseImpl
name|response
init|=
operator|new
name|ResponseImpl
argument_list|(
name|session
argument_list|,
name|in
operator|.
name|getSlice
argument_list|(
name|length
argument_list|)
operator|.
name|asInputStream
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|response
operator|.
name|isValid
argument_list|()
condition|)
name|response
operator|.
name|getDebugger
argument_list|()
operator|.
name|addResponse
argument_list|(
name|response
argument_list|)
expr_stmt|;
name|length
operator|=
literal|null
expr_stmt|;
name|sLength
operator|=
literal|""
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

