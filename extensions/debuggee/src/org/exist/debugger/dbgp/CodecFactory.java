begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id:$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|debugger
operator|.
name|dbgp
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolCodecFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolDecoder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|filter
operator|.
name|codec
operator|.
name|ProtocolEncoder
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|CodecFactory
implements|implements
name|ProtocolCodecFactory
block|{
specifier|private
name|Map
argument_list|<
name|IoSession
argument_list|,
name|ProtocolEncoder
argument_list|>
name|encoders
init|=
operator|new
name|HashMap
argument_list|<
name|IoSession
argument_list|,
name|ProtocolEncoder
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|IoSession
argument_list|,
name|ProtocolDecoder
argument_list|>
name|decoders
init|=
operator|new
name|HashMap
argument_list|<
name|IoSession
argument_list|,
name|ProtocolDecoder
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|CodecFactory
parameter_list|()
block|{
block|}
specifier|public
name|ProtocolDecoder
name|getDecoder
parameter_list|(
name|IoSession
name|ioSession
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|decoders
init|)
block|{
comment|//TODO: rewrite???
if|if
condition|(
name|decoders
operator|.
name|containsKey
argument_list|(
name|ioSession
argument_list|)
condition|)
return|return
name|decoders
operator|.
name|get
argument_list|(
name|ioSession
argument_list|)
return|;
name|ProtocolDecoder
name|decoder
init|=
operator|new
name|RequestDecoder
argument_list|()
decl_stmt|;
name|decoders
operator|.
name|put
argument_list|(
name|ioSession
argument_list|,
name|decoder
argument_list|)
expr_stmt|;
return|return
name|decoder
return|;
block|}
block|}
specifier|public
name|ProtocolEncoder
name|getEncoder
parameter_list|(
name|IoSession
name|ioSession
parameter_list|)
throws|throws
name|Exception
block|{
synchronized|synchronized
init|(
name|encoders
init|)
block|{
comment|//TODO: rewrite???
if|if
condition|(
name|encoders
operator|.
name|containsKey
argument_list|(
name|ioSession
argument_list|)
condition|)
return|return
name|encoders
operator|.
name|get
argument_list|(
name|ioSession
argument_list|)
return|;
name|ProtocolEncoder
name|encoder
init|=
operator|new
name|ResponseEncoder
argument_list|()
decl_stmt|;
name|encoders
operator|.
name|put
argument_list|(
name|ioSession
argument_list|,
name|encoder
argument_list|)
expr_stmt|;
return|return
name|encoder
return|;
block|}
block|}
block|}
end_class

end_unit

