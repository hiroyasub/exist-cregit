begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id:$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|debugger
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|mina
operator|.
name|core
operator|.
name|session
operator|.
name|IoSession
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|dbgp
operator|.
name|packets
operator|.
name|ResponseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|dbgp
operator|.
name|packets
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debugger
operator|.
name|Debugger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debugger
operator|.
name|DebuggingSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debugger
operator|.
name|model
operator|.
name|Breakpoint
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|DebuggerImpl
implements|implements
name|Debugger
block|{
specifier|private
name|IoSession
name|session
decl_stmt|;
comment|//uri, source
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|DebuggingSource
argument_list|>
name|sources
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|DebuggingSource
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|DebuggerImpl
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|setSession
parameter_list|(
name|IoSession
name|session
parameter_list|)
block|{
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.debugger.Debugger#source(java.lang.String) 	 */
specifier|public
name|DebuggingSource
name|source
parameter_list|(
name|String
name|fileURI
parameter_list|)
block|{
if|if
condition|(
name|sources
operator|.
name|containsKey
argument_list|(
name|fileURI
argument_list|)
condition|)
return|return
name|sources
operator|.
name|get
argument_list|(
name|fileURI
argument_list|)
return|;
name|Source
name|command
init|=
operator|new
name|Source
argument_list|(
name|session
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|command
operator|.
name|setFileURI
argument_list|(
name|fileURI
argument_list|)
expr_stmt|;
name|Response
name|response
init|=
name|command
operator|.
name|toDebuggee
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"1"
operator|.
name|equals
argument_list|(
name|response
operator|.
name|getAttribute
argument_list|(
literal|"success"
argument_list|)
argument_list|)
condition|)
block|{
name|DebuggingSource
name|source
init|=
operator|new
name|DebuggingSourceImpl
argument_list|(
name|this
argument_list|,
name|fileURI
argument_list|)
decl_stmt|;
name|source
operator|.
name|setData
argument_list|(
name|response
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|sources
operator|.
name|put
argument_list|(
name|fileURI
argument_list|,
name|source
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Breakpoint
name|addBreakpoint
parameter_list|(
name|Breakpoint
name|breakpoint
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|sessionClosed
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|ResponseImpl
argument_list|>
name|responses
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ResponseImpl
argument_list|>
argument_list|()
decl_stmt|;
specifier|protected
specifier|synchronized
name|void
name|addResponse
parameter_list|(
name|ResponseImpl
name|response
parameter_list|)
block|{
name|responses
operator|.
name|put
argument_list|(
name|response
operator|.
name|getTransactionID
argument_list|()
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|notifyAll
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|ResponseImpl
name|getResponse
parameter_list|(
name|String
name|transactionID
parameter_list|)
block|{
while|while
condition|(
operator|!
name|responses
operator|.
name|containsKey
argument_list|(
name|transactionID
argument_list|)
condition|)
block|{
try|try
block|{
name|wait
argument_list|(
literal|30
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|//30s
block|}
catch|catch
parameter_list|(
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|responses
operator|.
name|containsKey
argument_list|(
name|transactionID
argument_list|)
condition|)
block|{
name|ResponseImpl
name|response
init|=
name|responses
operator|.
name|get
argument_list|(
name|transactionID
argument_list|)
decl_stmt|;
name|responses
operator|.
name|remove
argument_list|(
name|transactionID
argument_list|)
expr_stmt|;
return|return
name|response
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

