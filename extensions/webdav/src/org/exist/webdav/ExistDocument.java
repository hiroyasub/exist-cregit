begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|LockToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|webdav
operator|.
name|WebDAV
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|webdav
operator|.
name|exceptions
operator|.
name|DocumentAlreadyLockedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|webdav
operator|.
name|exceptions
operator|.
name|DocumentNotLockedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Class for accessing the Collection class of the exist-db native API.  *  * @author Dannes Wessels (dizzzz_at_exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|ExistDocument
extends|extends
name|ExistResource
block|{
specifier|public
name|ExistDocument
parameter_list|(
name|XmldbURI
name|uri
parameter_list|,
name|BrokerPool
name|pool
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"New document object for "
operator|+
name|uri
argument_list|)
expr_stmt|;
name|brokerPool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|xmldbUri
operator|=
name|uri
expr_stmt|;
block|}
comment|/**      * Initialize Collection, authenticate() is required first      */
annotation|@
name|Override
specifier|public
name|void
name|initMetadata
parameter_list|()
block|{
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"User not initialized yet"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// check if initialization is required
if|if
condition|(
name|isInitialized
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Already initialized"
argument_list|)
expr_stmt|;
return|return;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// If it is not a collection, check if it is a document
name|document
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|xmldbUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
condition|)
block|{
name|isXmlDocument
operator|=
literal|true
expr_stmt|;
block|}
comment|// Get meta data
name|creationTime
operator|=
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getCreated
argument_list|()
expr_stmt|;
name|lastModified
operator|=
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
expr_stmt|;
name|mimeType
operator|=
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
expr_stmt|;
comment|// Retrieve perssions
name|permissions
operator|=
name|document
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
name|readAllowed
operator|=
name|permissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
name|writeAllowed
operator|=
name|permissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
name|updateAllowed
operator|=
name|permissions
operator|.
name|validate
argument_list|(
name|subject
argument_list|,
name|Permission
operator|.
name|UPDATE
argument_list|)
expr_stmt|;
name|ownerUser
operator|=
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getUsername
argument_list|()
expr_stmt|;
name|ownerGroup
operator|=
name|permissions
operator|.
name|getOwnerGroup
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
comment|// Get (estimated) file size
name|contentLength
operator|=
name|document
operator|.
name|getContentLength
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Cleanup resources
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|isInitialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|mimeType
decl_stmt|;
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
name|mimeType
return|;
block|}
specifier|private
name|long
name|contentLength
init|=
literal|0
decl_stmt|;
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
return|return
name|contentLength
return|;
block|}
specifier|private
name|boolean
name|isXmlDocument
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|isXmlDocument
parameter_list|()
block|{
return|return
name|isXmlDocument
return|;
block|}
comment|/**      *  Stream document to framework.      */
specifier|public
name|void
name|stream
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionDeniedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stream started"
argument_list|)
expr_stmt|;
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// If it is not a collection, check if it is a document
name|document
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|xmldbUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
condition|)
block|{
comment|// Stream XML document
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
try|try
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|WebDAV
operator|.
name|OUTPUT_PROPERTIES
argument_list|)
expr_stmt|;
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|document
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Error while serializing XML document: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// Stream NON-XML document
name|broker
operator|.
name|readBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|document
argument_list|,
name|os
argument_list|)
expr_stmt|;
name|os
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stream stopped, duration "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|" msec."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Remove document from database.      */
name|void
name|delete
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Deleting "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// Need to split path into collection and document name
name|XmldbURI
name|collName
init|=
name|xmldbUri
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|docName
init|=
name|xmldbUri
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
comment|// Open collection if possible, else abort
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collName
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Collection does not exist"
argument_list|)
expr_stmt|;
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Open document if possible, else abort
name|resource
operator|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docName
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No resource found for path: "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|collection
operator|.
name|removeBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|resource
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|.
name|removeXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|resource
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Commit change
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Document deleted sucessfully"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Resource is locked."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished delete"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Get lock token from database.      */
specifier|public
name|LockToken
name|getCurrentLock
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Get current lock "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
comment|//        Collection collection = null;
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// If it is not a collection, check if it is a document
name|document
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|xmldbUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No resource found for path: "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// TODO consider. A Webdav lock can be set without subject lock.
name|Account
name|lock
init|=
name|document
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Document "
operator|+
name|xmldbUri
operator|+
literal|" does not contain userlock"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Retrieve Locktoken from document metadata
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|LockToken
name|token
init|=
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLockToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Document meta data does not contain a LockToken"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully retrieved token"
argument_list|)
expr_stmt|;
return|return
name|token
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished probe lock"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Lock document.      */
specifier|public
name|LockToken
name|lock
parameter_list|(
name|LockToken
name|inputToken
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|DocumentAlreadyLockedException
throws|,
name|EXistException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"create lock "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// Try to get document (add catch?)
name|document
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|xmldbUri
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No resource found for path: "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// throw exception?
block|}
comment|// Get current userlock
name|Account
name|userLock
init|=
name|document
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
comment|// Check if Resource is already locked. @@ToDo
if|if
condition|(
name|userLock
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource was already locked locked."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|userLock
operator|!=
literal|null
operator|&&
operator|!
name|userLock
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|subject
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource is locked."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|userLock
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Check for request fo shared lock. @@TODO
if|if
condition|(
name|inputToken
operator|.
name|getScope
argument_list|()
operator|==
name|LockToken
operator|.
name|LOCK_SCOPE_SHARED
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Shared locks are not implemented."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Shared locks are not implemented."
argument_list|)
throw|;
block|}
comment|// Update locktoken
name|inputToken
operator|.
name|setOwner
argument_list|(
name|subject
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|inputToken
operator|.
name|createOpaqueLockToken
argument_list|()
expr_stmt|;
name|inputToken
operator|.
name|setTimeOut
argument_list|(
name|LockToken
operator|.
name|LOCK_TIMEOUT_INFINITE
argument_list|)
expr_stmt|;
comment|// Update document
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLockToken
argument_list|(
name|inputToken
argument_list|)
expr_stmt|;
name|document
operator|.
name|setUserLock
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// Make token persistant
name|TransactionManager
name|transact
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully retrieved token"
argument_list|)
expr_stmt|;
return|return
name|inputToken
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished create lock"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Unlock document in database.      */
name|void
name|unlock
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|DocumentNotLockedException
throws|,
name|EXistException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"unlock "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// Try to get document (add catch?)
name|document
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|xmldbUri
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No resource found for path: "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"No resource found for path: "
operator|+
name|xmldbUri
argument_list|)
throw|;
block|}
comment|// Get current userlock
name|Account
name|lock
init|=
name|document
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
comment|// Check if Resource is already locked.
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource "
operator|+
name|xmldbUri
operator|+
literal|" is not locked."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DocumentNotLockedException
argument_list|(
literal|""
operator|+
name|xmldbUri
argument_list|)
throw|;
block|}
comment|// Check if Resource is from subject
if|if
condition|(
operator|!
name|lock
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|subject
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource lock is from user "
operator|+
name|lock
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|lock
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|// Update document
name|document
operator|.
name|setUserLock
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLockToken
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// Make it persistant
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished create lock"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Copy document or collection in database.      */
name|void
name|resourceCopyMove
parameter_list|(
name|XmldbURI
name|destCollectionUri
parameter_list|,
name|String
name|newName
parameter_list|,
name|Mode
name|mode
parameter_list|)
throws|throws
name|EXistException
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|mode
operator|+
literal|" "
operator|+
name|xmldbUri
operator|+
literal|" to "
operator|+
name|destCollectionUri
operator|+
literal|" named "
operator|+
name|newName
argument_list|)
expr_stmt|;
name|XmldbURI
name|newNameUri
init|=
literal|null
decl_stmt|;
try|try
block|{
name|newNameUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|newName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Collection
name|srcCollection
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|srcDocument
init|=
literal|null
decl_stmt|;
name|Collection
name|destCollection
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|txnManager
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|txnManager
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// Need to split path into collection and document name
name|XmldbURI
name|srcCollectionUri
init|=
name|xmldbUri
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|srdDocumentUri
init|=
name|xmldbUri
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
comment|// Open collection if possible, else abort
name|srcCollection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|srcCollectionUri
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcCollection
operator|==
literal|null
condition|)
block|{
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return;
comment|// TODO throw
block|}
comment|// Open document if possible, else abort
name|srcDocument
operator|=
name|srcCollection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|srdDocumentUri
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcDocument
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No resource found for path: "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Open collection if possible, else abort
name|destCollection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|destCollectionUri
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|destCollection
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Destination collection "
operator|+
name|xmldbUri
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Perform actial move/copy
if|if
condition|(
name|mode
operator|==
name|Mode
operator|.
name|COPY
condition|)
block|{
name|broker
operator|.
name|copyResource
argument_list|(
name|txn
argument_list|,
name|srcDocument
argument_list|,
name|destCollection
argument_list|,
name|newNameUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|moveResource
argument_list|(
name|txn
argument_list|,
name|srcDocument
argument_list|,
name|destCollection
argument_list|,
name|newNameUri
argument_list|)
expr_stmt|;
block|}
comment|// Commit change
name|txnManager
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Document "
operator|+
name|mode
operator|+
literal|"d sucessfully"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Resource is locked."
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|txnManager
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|destCollection
operator|!=
literal|null
condition|)
block|{
name|destCollection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|srcCollection
operator|!=
literal|null
condition|)
block|{
name|srcCollection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished "
operator|+
name|mode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|LockToken
name|refreshLock
parameter_list|(
name|String
name|token
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|DocumentAlreadyLockedException
throws|,
name|EXistException
throws|,
name|DocumentNotLockedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"refresh lock "
operator|+
name|xmldbUri
operator|+
literal|"  lock="
operator|+
name|token
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|document
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|token
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"token is null"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"token is null"
argument_list|)
throw|;
block|}
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|subject
argument_list|)
expr_stmt|;
comment|// Try to get document (add catch?)
name|document
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|xmldbUri
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"No resource found for path: "
operator|+
name|xmldbUri
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// throw exception?
block|}
comment|// Get current userlock
name|Account
name|userLock
init|=
name|document
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
comment|// Check if Resource is already locked.
if|if
condition|(
name|userLock
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource was not locked."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DocumentNotLockedException
argument_list|(
literal|"Resource was not locked."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|userLock
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|subject
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resource is locked by "
operator|+
name|userLock
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|userLock
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
name|LockToken
name|lockToken
init|=
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLockToken
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|token
operator|.
name|equals
argument_list|(
name|lockToken
operator|.
name|getOpaqueLockToken
argument_list|()
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Token does not match"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Token "
operator|+
name|token
operator|+
literal|" does not match "
operator|+
name|lockToken
operator|.
name|getOpaqueLockToken
argument_list|()
argument_list|)
throw|;
block|}
name|lockToken
operator|.
name|setTimeOut
argument_list|(
name|LockToken
operator|.
name|LOCK_TIMEOUT_INFINITE
argument_list|)
expr_stmt|;
comment|// Make token persistant
name|TransactionManager
name|transact
init|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Successfully retrieved token"
argument_list|)
expr_stmt|;
return|return
name|lockToken
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
comment|// TODO: check if can be done earlier
if|if
condition|(
name|document
operator|!=
literal|null
condition|)
block|{
name|document
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished create lock"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

