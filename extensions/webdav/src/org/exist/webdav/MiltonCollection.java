begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|Auth
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|CollectionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|CopyableResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|DeletableResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|GetableResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|LockInfo
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|LockNullResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|LockResult
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|LockTimeout
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|LockToken
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|LockingCollectionResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|MakeCollectionableResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|MoveableResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|PropFindableResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|PutableResource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|Range
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|exceptions
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|exceptions
operator|.
name|ConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|exceptions
operator|.
name|LockedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|exceptions
operator|.
name|NotAuthorizedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|exceptions
operator|.
name|PreConditionFailedException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|UUID
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|webdav
operator|.
name|ExistResource
operator|.
name|Mode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|webdav
operator|.
name|exceptions
operator|.
name|CollectionDoesNotExistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|webdav
operator|.
name|exceptions
operator|.
name|CollectionExistsException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|XMLWriter
import|;
end_import

begin_comment
comment|/**  * Class for representing an eXist-db collection as a Milton WebDAV collection.  * See<a href="http://milton.ettrema.com">Milton</a>.  *  * @author Dannes Wessels (dizzzz_at_exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|MiltonCollection
extends|extends
name|MiltonResource
implements|implements
name|CollectionResource
implements|,
name|GetableResource
implements|,
name|PropFindableResource
implements|,
name|DeletableResource
implements|,
name|MakeCollectionableResource
implements|,
name|PutableResource
implements|,
name|LockingCollectionResource
comment|/*, DigestResource */
implements|,
name|MoveableResource
implements|,
name|CopyableResource
implements|,
name|LockNullResource
block|{
specifier|private
name|ExistCollection
name|existCollection
decl_stmt|;
comment|/**      *  Constructor of representation of a Collection in the Milton framework, without user information.      * To be called by the resource factory.      *      * @param host  FQ host name including port number.      * @param uri   Path on server indicating path of resource      * @param brokerPool Handle to Exist database.      */
specifier|public
name|MiltonCollection
parameter_list|(
name|String
name|host
parameter_list|,
name|XmldbURI
name|uri
parameter_list|,
name|BrokerPool
name|pool
parameter_list|)
block|{
name|this
argument_list|(
name|host
argument_list|,
name|uri
argument_list|,
name|pool
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Constructor of representation of a Document in the Milton framework, with user information.      * To be called by the resource factory.      *      * @param host  FQ host name including port number.      * @param uri   Path on server indicating path of resource.      * @param user  An Exist operation is performed with  User. Can be NULL.      * @param brokerPool Handle to Exist database.      */
specifier|public
name|MiltonCollection
parameter_list|(
name|String
name|host
parameter_list|,
name|XmldbURI
name|uri
parameter_list|,
name|BrokerPool
name|pool
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"COLLECTION:"
operator|+
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|resourceXmldbUri
operator|=
name|uri
expr_stmt|;
name|brokerPool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|host
operator|=
name|host
expr_stmt|;
name|existCollection
operator|=
operator|new
name|ExistCollection
argument_list|(
name|uri
argument_list|,
name|brokerPool
argument_list|)
expr_stmt|;
comment|// store simpler type
name|existResource
operator|=
name|existCollection
expr_stmt|;
comment|// If user is available, additional data can be retrieved.
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|existCollection
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|existCollection
operator|.
name|initMetadata
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* ===================      * Collection Resource      * =================== */
comment|//@Override
specifier|public
name|Resource
name|child
parameter_list|(
name|String
name|childName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"get child="
operator|+
name|childName
argument_list|)
expr_stmt|;
comment|// Safe guard value
if|if
condition|(
name|childName
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// Search all resources, return resource upon match
name|List
argument_list|<
name|?
extends|extends
name|Resource
argument_list|>
name|allResources
init|=
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|Resource
name|resource
range|:
name|allResources
control|)
block|{
if|if
condition|(
name|childName
operator|.
name|equals
argument_list|(
name|resource
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|resource
return|;
block|}
block|}
comment|// Not found
return|return
literal|null
return|;
block|}
specifier|private
name|List
argument_list|<
name|MiltonCollection
argument_list|>
name|getCollectionResources
parameter_list|()
block|{
name|List
argument_list|<
name|MiltonCollection
argument_list|>
name|allResources
init|=
operator|new
name|ArrayList
argument_list|<
name|MiltonCollection
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XmldbURI
name|path
range|:
name|existCollection
operator|.
name|getCollectionURIs
argument_list|()
control|)
block|{
name|allResources
operator|.
name|add
argument_list|(
operator|new
name|MiltonCollection
argument_list|(
name|this
operator|.
name|host
argument_list|,
name|path
argument_list|,
name|brokerPool
argument_list|,
name|user
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|allResources
return|;
block|}
specifier|private
name|List
argument_list|<
name|MiltonDocument
argument_list|>
name|getDocumentResources
parameter_list|()
block|{
name|List
argument_list|<
name|MiltonDocument
argument_list|>
name|allResources
init|=
operator|new
name|ArrayList
argument_list|<
name|MiltonDocument
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|XmldbURI
name|path
range|:
name|existCollection
operator|.
name|getDocumentURIs
argument_list|()
control|)
block|{
name|MiltonDocument
name|mdoc
init|=
operator|new
name|MiltonDocument
argument_list|(
name|this
operator|.
name|host
argument_list|,
name|path
argument_list|,
name|brokerPool
argument_list|,
name|user
argument_list|)
decl_stmt|;
comment|// Show (restimated) size for PROPFIND only
name|mdoc
operator|.
name|setReturnContentLenghtAsNull
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|allResources
operator|.
name|add
argument_list|(
name|mdoc
argument_list|)
expr_stmt|;
block|}
return|return
name|allResources
return|;
block|}
comment|//@Override
specifier|public
name|List
argument_list|<
name|?
extends|extends
name|Resource
argument_list|>
name|getChildren
parameter_list|()
block|{
name|List
argument_list|<
name|Resource
argument_list|>
name|allResources
init|=
operator|new
name|ArrayList
argument_list|<
name|Resource
argument_list|>
argument_list|()
decl_stmt|;
name|allResources
operator|.
name|addAll
argument_list|(
name|getCollectionResources
argument_list|()
argument_list|)
expr_stmt|;
name|allResources
operator|.
name|addAll
argument_list|(
name|getDocumentResources
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Nr of children="
operator|+
name|allResources
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|allResources
return|;
block|}
comment|/* ====================      * PropFindableResource      * ==================== */
comment|//@Override
specifier|public
name|Date
name|getCreateDate
parameter_list|()
block|{
name|Date
name|createDate
init|=
literal|null
decl_stmt|;
name|Long
name|time
init|=
name|existCollection
operator|.
name|getCreationTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|!=
literal|null
condition|)
block|{
name|createDate
operator|=
operator|new
name|Date
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create date="
operator|+
name|createDate
argument_list|)
expr_stmt|;
return|return
name|createDate
return|;
block|}
comment|/* ====================      * DeletableResource      * ==================== */
comment|//@Override
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|NotAuthorizedException
throws|,
name|ConflictException
throws|,
name|BadRequestException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Delete collection '"
operator|+
name|resourceXmldbUri
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|existCollection
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
comment|/* ==========================      * MakeCollectionableResource      * ========================== */
comment|//@Override
specifier|public
name|CollectionResource
name|createCollection
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|ConflictException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create collection '"
operator|+
name|name
operator|+
literal|"' in '"
operator|+
name|resourceXmldbUri
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|CollectionResource
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XmldbURI
name|collectionURI
init|=
name|existCollection
operator|.
name|createCollection
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|collection
operator|=
operator|new
name|MiltonCollection
argument_list|(
name|host
argument_list|,
name|collectionURI
argument_list|,
name|brokerPool
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|NotAuthorizedException
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CollectionExistsException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConflictException
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConflictException
argument_list|(
name|this
argument_list|)
throw|;
block|}
return|return
name|collection
return|;
block|}
comment|/* ===============      * PutableResource      * =============== */
comment|//@Override
specifier|public
name|Resource
name|createNew
parameter_list|(
name|String
name|newName
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|Long
name|length
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|IOException
throws|,
name|ConflictException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Create '"
operator|+
name|newName
operator|+
literal|"' in '"
operator|+
name|resourceXmldbUri
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|Resource
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// submit
name|XmldbURI
name|resourceURI
init|=
name|existCollection
operator|.
name|createFile
argument_list|(
name|newName
argument_list|,
name|is
argument_list|,
name|length
argument_list|,
name|contentType
argument_list|)
decl_stmt|;
name|resource
operator|=
operator|new
name|MiltonDocument
argument_list|(
name|host
argument_list|,
name|resourceURI
argument_list|,
name|brokerPool
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConflictException
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|CollectionDoesNotExistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConflictException
argument_list|(
name|this
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
return|return
name|resource
return|;
block|}
comment|/* =========================      * LockingCollectionResource      * ========================= */
comment|//@Override
specifier|public
name|LockToken
name|createAndLock
parameter_list|(
name|String
name|name
parameter_list|,
name|LockTimeout
name|timeout
parameter_list|,
name|LockInfo
name|lockInfo
parameter_list|)
throws|throws
name|NotAuthorizedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"'"
operator|+
name|resourceXmldbUri
operator|+
literal|"' name='"
operator|+
name|name
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|String
name|token
init|=
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
return|return
operator|new
name|LockToken
argument_list|(
name|token
argument_list|,
name|lockInfo
argument_list|,
name|timeout
argument_list|)
return|;
block|}
comment|/* ================      * LockableResource      * ================ */
comment|//@Override
specifier|public
name|LockResult
name|lock
parameter_list|(
name|LockTimeout
name|timeout
parameter_list|,
name|LockInfo
name|lockInfo
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|PreConditionFailedException
throws|,
name|LockedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"'"
operator|+
name|resourceXmldbUri
operator|+
literal|"' -- "
operator|+
name|lockInfo
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|refreshLock
argument_list|(
name|UUID
operator|.
name|randomUUID
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
comment|//@Override
specifier|public
name|LockResult
name|refreshLock
parameter_list|(
name|String
name|token
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|PreConditionFailedException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"'"
operator|+
name|resourceXmldbUri
operator|+
literal|"' token='"
operator|+
name|token
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|LockInfo
name|lockInfo
init|=
operator|new
name|LockInfo
argument_list|(
name|LockInfo
operator|.
name|LockScope
operator|.
name|NONE
argument_list|,
name|LockInfo
operator|.
name|LockType
operator|.
name|READ
argument_list|,
name|token
argument_list|,
name|LockInfo
operator|.
name|LockDepth
operator|.
name|ZERO
argument_list|)
decl_stmt|;
name|LockTimeout
name|lockTime
init|=
operator|new
name|LockTimeout
argument_list|(
name|Long
operator|.
name|MAX_VALUE
argument_list|)
decl_stmt|;
name|LockToken
name|lockToken
init|=
operator|new
name|LockToken
argument_list|(
name|token
argument_list|,
name|lockInfo
argument_list|,
name|lockTime
argument_list|)
decl_stmt|;
return|return
operator|new
name|LockResult
argument_list|(
name|LockResult
operator|.
name|FailureReason
operator|.
name|PRECONDITION_FAILED
argument_list|,
name|lockToken
argument_list|)
return|;
block|}
comment|//@Override
specifier|public
name|void
name|unlock
parameter_list|(
name|String
name|tokenId
parameter_list|)
throws|throws
name|NotAuthorizedException
throws|,
name|PreConditionFailedException
block|{
comment|// Just do nothing
name|LOG
operator|.
name|debug
argument_list|(
literal|"'"
operator|+
name|resourceXmldbUri
operator|+
literal|"' token='"
operator|+
name|tokenId
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
comment|//@Override
specifier|public
name|LockToken
name|getCurrentLock
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"'"
operator|+
name|resourceXmldbUri
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
comment|// null is allowed
block|}
comment|/* ===============      * MovableResource      * =============== */
comment|//@Override
specifier|public
name|void
name|moveTo
parameter_list|(
name|CollectionResource
name|rDest
parameter_list|,
name|String
name|newName
parameter_list|)
throws|throws
name|ConflictException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Move '"
operator|+
name|resourceXmldbUri
operator|+
literal|"' to '"
operator|+
name|newName
operator|+
literal|"' in '"
operator|+
name|rDest
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|XmldbURI
name|destCollection
init|=
operator|(
operator|(
name|MiltonCollection
operator|)
name|rDest
operator|)
operator|.
name|getXmldbUri
argument_list|()
decl_stmt|;
try|try
block|{
name|existCollection
operator|.
name|resourceCopyMove
argument_list|(
name|destCollection
argument_list|,
name|newName
argument_list|,
name|Mode
operator|.
name|MOVE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|ConflictException
argument_list|(
name|this
argument_list|)
throw|;
block|}
block|}
comment|/* ================      * CopyableResource      * ================ */
comment|//@Override
specifier|public
name|void
name|copyTo
parameter_list|(
name|CollectionResource
name|toCollection
parameter_list|,
name|String
name|newName
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Move '"
operator|+
name|resourceXmldbUri
operator|+
literal|"' to '"
operator|+
name|newName
operator|+
literal|"' in '"
operator|+
name|toCollection
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|XmldbURI
name|destCollection
init|=
operator|(
operator|(
name|MiltonCollection
operator|)
name|toCollection
operator|)
operator|.
name|getXmldbUri
argument_list|()
decl_stmt|;
try|try
block|{
name|existCollection
operator|.
name|resourceCopyMove
argument_list|(
name|destCollection
argument_list|,
name|newName
argument_list|,
name|Mode
operator|.
name|COPY
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|ex
parameter_list|)
block|{
comment|// copyTo does not throw COnflictException
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* ================      * GettableResource      * ================ */
comment|//@Override
specifier|public
name|void
name|sendContent
parameter_list|(
name|OutputStream
name|out
parameter_list|,
name|Range
name|range
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|String
name|contentType
parameter_list|)
throws|throws
name|IOException
throws|,
name|NotAuthorizedException
throws|,
name|BadRequestException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"sendContent"
argument_list|)
expr_stmt|;
try|try
block|{
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|out
argument_list|)
decl_stmt|;
name|XMLWriter
name|xw
init|=
operator|new
name|XMLWriter
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|xw
operator|.
name|setDefaultNamespace
argument_list|(
literal|"http://exist.sourceforge.net/NS/exist"
argument_list|)
expr_stmt|;
comment|// Begin document
name|xw
operator|.
name|startDocument
argument_list|()
expr_stmt|;
comment|// Root element
name|xw
operator|.
name|startElement
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|// Root collection
name|xw
operator|.
name|startElement
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"name"
argument_list|,
name|resourceXmldbUri
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"created"
argument_list|,
name|getXmlDateTime
argument_list|(
name|existCollection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"owner"
argument_list|,
name|existCollection
operator|.
name|getOwnerUser
argument_list|()
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"group"
argument_list|,
name|existCollection
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"permissions"
argument_list|,
literal|""
operator|+
name|existCollection
operator|.
name|getPermissions
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Iterate over all collections in collection
for|for
control|(
name|MiltonCollection
name|collection
range|:
name|getCollectionResources
argument_list|()
control|)
block|{
name|collection
operator|.
name|writeXML
argument_list|(
name|xw
argument_list|)
expr_stmt|;
block|}
comment|// Iterate over all documents in collection
for|for
control|(
name|MiltonDocument
name|document
range|:
name|getDocumentResources
argument_list|()
control|)
block|{
name|document
operator|.
name|writeXML
argument_list|(
name|xw
argument_list|)
expr_stmt|;
block|}
comment|// Finish top collection
name|xw
operator|.
name|endElement
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
comment|// Finish root element
name|xw
operator|.
name|endElement
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|// Finish document
name|xw
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|//@Override
specifier|public
name|Long
name|getMaxAgeSeconds
parameter_list|(
name|Auth
name|auth
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|//@Override
specifier|public
name|String
name|getContentType
parameter_list|(
name|String
name|accepts
parameter_list|)
block|{
return|return
literal|"application/xml"
return|;
block|}
comment|//@Override
specifier|public
name|Long
name|getContentLength
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/* ================      * StAX serializer      * ================ */
specifier|private
name|void
name|writeXML
parameter_list|(
name|XMLWriter
name|xw
parameter_list|)
throws|throws
name|TransformerException
block|{
name|xw
operator|.
name|startElement
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"name"
argument_list|,
name|resourceXmldbUri
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"created"
argument_list|,
name|getXmlDateTime
argument_list|(
name|existCollection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"owner"
argument_list|,
name|existCollection
operator|.
name|getOwnerUser
argument_list|()
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"group"
argument_list|,
name|existCollection
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|xw
operator|.
name|attribute
argument_list|(
literal|"permissions"
argument_list|,
name|existCollection
operator|.
name|getPermissions
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xw
operator|.
name|endElement
argument_list|(
literal|"collection"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

