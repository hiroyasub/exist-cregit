begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|webdav
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_comment
comment|/**  * Generic class representing an eXist Resource.  *   *  @author Dannes Wessels<dannes@exist-db.org>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|ExistResource
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ExistResource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|isInitialized
init|=
literal|false
decl_stmt|;
specifier|protected
name|BrokerPool
name|brokerPool
decl_stmt|;
specifier|protected
name|User
name|user
decl_stmt|;
specifier|protected
name|XmldbURI
name|xmldbUri
decl_stmt|;
specifier|protected
name|Permission
name|permissions
decl_stmt|;
specifier|protected
name|Long
name|creationTime
decl_stmt|;
specifier|protected
name|Long
name|lastModified
decl_stmt|;
specifier|protected
name|boolean
name|readAllowed
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|writeAllowed
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|updateAllowed
init|=
literal|false
decl_stmt|;
specifier|protected
name|ExistResource
name|existResource
decl_stmt|;
specifier|protected
name|String
name|ownerUser
decl_stmt|;
specifier|protected
name|String
name|ownerGroup
decl_stmt|;
specifier|protected
enum|enum
name|Mode
block|{
name|MOVE
block|,
name|COPY
block|}
specifier|abstract
name|void
name|initMetadata
parameter_list|()
function_decl|;
specifier|protected
name|boolean
name|isReadAllowed
parameter_list|()
block|{
return|return
name|readAllowed
return|;
block|}
specifier|protected
name|boolean
name|isWriteAllowed
parameter_list|()
block|{
return|return
name|writeAllowed
return|;
block|}
specifier|protected
name|boolean
name|isUpdateAllowed
parameter_list|()
block|{
return|return
name|updateAllowed
return|;
block|}
specifier|protected
name|User
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|protected
name|void
name|setUser
parameter_list|(
name|User
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
specifier|protected
name|Long
name|getCreationTime
parameter_list|()
block|{
return|return
name|creationTime
return|;
block|}
specifier|protected
name|Long
name|getLastModified
parameter_list|()
block|{
return|return
name|lastModified
return|;
block|}
specifier|protected
name|Permission
name|getPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
specifier|public
name|String
name|getOwnerGroup
parameter_list|()
block|{
return|return
name|ownerGroup
return|;
block|}
specifier|public
name|String
name|getOwnerUser
parameter_list|()
block|{
return|return
name|ownerUser
return|;
block|}
comment|/**      * Authenticate user with password. NULL is returned when      * the user could not be authenticated.      */
specifier|protected
name|User
name|authenticate
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|)
block|{
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|SecurityManager
name|securityManager
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|user
operator|=
name|securityManager
operator|.
name|getUser
argument_list|(
name|username
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Username "
operator|+
name|username
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|user
operator|.
name|validate
argument_list|(
name|password
argument_list|)
condition|)
block|{
return|return
name|user
return|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"User "
operator|+
name|username
operator|+
literal|" could not be authenticated. "
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

