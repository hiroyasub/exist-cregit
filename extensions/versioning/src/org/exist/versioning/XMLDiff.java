begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NewArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|EmbeddedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|bmsi
operator|.
name|util
operator|.
name|Diff
import|;
end_import

begin_class
specifier|public
class|class
name|XMLDiff
block|{
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE
init|=
literal|"http://exist-db.org/versioning"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"v"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|DIFF_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"version"
argument_list|,
name|NAMESPACE
argument_list|,
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|PROPERTIES_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"properties"
argument_list|,
name|NAMESPACE
argument_list|,
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
specifier|public
name|XMLDiff
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
specifier|public
name|String
name|diff
parameter_list|(
name|DocumentImpl
name|docA
parameter_list|,
name|DocumentImpl
name|docB
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|DiffException
block|{
try|try
block|{
name|ElementImpl
name|root
init|=
operator|(
name|ElementImpl
operator|)
name|docA
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|DiffNode
index|[]
name|nodesA
init|=
name|getNodes
argument_list|(
name|broker
argument_list|,
name|root
argument_list|)
decl_stmt|;
name|root
operator|=
operator|(
name|ElementImpl
operator|)
name|docB
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
name|DiffNode
index|[]
name|nodesB
init|=
name|getNodes
argument_list|(
name|broker
argument_list|,
name|root
argument_list|)
decl_stmt|;
comment|//            System.out.println("Source:");
comment|//            debugNodes(nodesA);
comment|//            System.out.println("Modified:");
comment|//            debugNodes(nodesB);
name|Diff
name|diff
init|=
operator|new
name|Diff
argument_list|(
name|nodesA
argument_list|,
name|nodesB
argument_list|)
decl_stmt|;
name|Diff
operator|.
name|change
name|script
init|=
name|diff
operator|.
name|diff_2
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|List
name|changes
init|=
name|getChanges
argument_list|(
name|script
argument_list|,
name|docA
argument_list|,
name|docB
argument_list|,
name|nodesA
argument_list|,
name|nodesB
argument_list|)
decl_stmt|;
return|return
name|diff2XML
argument_list|(
name|changes
argument_list|,
name|properties
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DiffException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DiffException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|debugNodes
parameter_list|(
name|DiffNode
index|[]
name|nodes
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|DiffNode
name|node
init|=
name|nodes
index|[
name|i
index|]
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
operator|+
literal|" "
operator|+
name|node
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|List
name|simplify
parameter_list|(
name|List
name|changes
parameter_list|)
block|{
name|List
name|simplified
init|=
operator|new
name|ArrayList
argument_list|(
name|changes
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|Map
name|map
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|changes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Difference
name|diff
init|=
operator|(
name|Difference
operator|)
name|changes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|type
operator|==
name|Difference
operator|.
name|INSERT
condition|)
block|{
name|NodeId
name|nodeId
init|=
name|diff
operator|.
name|refChild
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|map
operator|.
name|containsKey
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|Difference
operator|.
name|Insert
name|diff2
init|=
operator|(
name|Difference
operator|.
name|Insert
operator|)
name|map
operator|.
name|get
argument_list|(
name|nodeId
argument_list|)
decl_stmt|;
name|diff2
operator|.
name|addNodes
argument_list|(
operator|(
operator|(
name|Difference
operator|.
name|Insert
operator|)
name|diff
operator|)
operator|.
name|nodes
argument_list|)
expr_stmt|;
block|}
else|else
name|map
operator|.
name|put
argument_list|(
name|nodeId
argument_list|,
name|diff
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|simplified
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|map
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Difference
name|diff
init|=
operator|(
name|Difference
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|simplified
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
return|return
name|simplified
return|;
block|}
specifier|protected
name|String
name|diff2XML
parameter_list|(
name|List
name|changes
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|IOException
block|{
name|changes
operator|=
name|simplify
argument_list|(
name|changes
argument_list|)
expr_stmt|;
try|try
block|{
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|SAXSerializer
name|sax
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|sax
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
name|sax
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|sax
operator|.
name|startElement
argument_list|(
name|DIFF_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|sax
argument_list|,
name|properties
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|changes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Difference
name|diff
init|=
operator|(
name|Difference
operator|)
name|changes
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|diff
operator|.
name|serialize
argument_list|(
name|broker
argument_list|,
name|sax
argument_list|)
expr_stmt|;
block|}
name|sax
operator|.
name|endElement
argument_list|(
name|DIFF_ELEMENT
argument_list|)
expr_stmt|;
name|sax
operator|.
name|endDocument
argument_list|()
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"error while serializing diff: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|writeProperties
parameter_list|(
name|Receiver
name|receiver
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|SAXException
block|{
name|receiver
operator|.
name|startElement
argument_list|(
name|PROPERTIES_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|properties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|key
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
name|key
argument_list|,
name|NAMESPACE
argument_list|,
name|PREFIX
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|qn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|characters
argument_list|(
name|properties
operator|.
name|get
argument_list|(
name|key
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|endElement
argument_list|(
name|qn
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|endElement
argument_list|(
name|PROPERTIES_ELEMENT
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|List
name|getChanges
parameter_list|(
name|Diff
operator|.
name|change
name|script
parameter_list|,
name|DocumentImpl
name|docA
parameter_list|,
name|DocumentImpl
name|docB
parameter_list|,
name|DiffNode
index|[]
name|nodesA
parameter_list|,
name|DiffNode
index|[]
name|nodesB
parameter_list|)
throws|throws
name|XMLStreamException
block|{
name|List
name|changes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|NodeSet
name|deletedNodes
init|=
operator|new
name|NewArrayNodeSet
argument_list|(
literal|1
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|Diff
operator|.
name|change
name|next
init|=
name|script
decl_stmt|;
comment|//        System.out.println("Modifications:");
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|int
name|start0
init|=
name|next
operator|.
name|line0
decl_stmt|;
name|int
name|start
init|=
name|next
operator|.
name|line1
decl_stmt|;
name|int
name|last
init|=
name|start
operator|+
name|next
operator|.
name|inserted
decl_stmt|;
comment|// sanitize the diff: move the start and end offsets of the chunk to properly include
comment|// all required start and end tags.
comment|// step 1: at the end of the chunk, remove start tags with missing end tags
for|for
control|(
name|int
name|i
init|=
name|last
operator|-
literal|1
init|;
name|i
operator|>=
name|start
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|nodesB
index|[
name|i
index|]
operator|.
name|nodeType
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
comment|//                    System.out.println("Found element out of context at end of chunk: " + nodesB[i].value);
name|last
operator|--
expr_stmt|;
block|}
else|else
break|break;
block|}
comment|// step 2: search for end tags with missing start tags. adjust start to include the start tags.
comment|// this may need to be done for more than one tag.
name|Stack
name|elementStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
name|boolean
name|needRescan
decl_stmt|;
do|do
block|{
name|needRescan
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|last
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nodesB
index|[
name|i
index|]
operator|.
name|nodeType
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
name|elementStack
operator|.
name|push
argument_list|(
name|nodesB
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|nodesB
index|[
name|i
index|]
operator|.
name|nodeType
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
block|{
if|if
condition|(
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//                            System.out.println("Found out of context element: " + nodesB[i].value);
for|for
control|(
name|int
name|j
init|=
name|start
operator|-
literal|1
init|;
name|j
operator|>
operator|-
literal|1
condition|;
name|j
operator|--
control|)
block|{
if|if
condition|(
name|nodesB
index|[
name|j
index|]
operator|.
name|nodeId
operator|.
name|equals
argument_list|(
name|nodesB
index|[
name|i
index|]
operator|.
name|nodeId
argument_list|)
condition|)
block|{
name|start0
operator|=
name|start0
operator|-
operator|(
name|start
operator|-
name|j
operator|)
expr_stmt|;
name|start
operator|=
name|j
expr_stmt|;
name|last
operator|=
name|start
operator|+
name|next
operator|.
name|inserted
expr_stmt|;
name|needRescan
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|DiffNode
name|n
init|=
operator|(
name|DiffNode
operator|)
name|elementStack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|n
operator|.
name|nodeId
operator|.
name|equals
argument_list|(
name|nodesB
index|[
name|i
index|]
operator|.
name|nodeId
argument_list|)
condition|)
throw|throw
operator|new
name|XMLStreamException
argument_list|(
literal|"Diff error: element is out of context: "
operator|+
name|nodesB
index|[
name|i
index|]
operator|.
name|value
argument_list|)
throw|;
block|}
block|}
block|}
name|elementStack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
name|needRescan
condition|)
do|;
if|if
condition|(
name|next
operator|.
name|inserted
operator|>
literal|0
condition|)
block|{
comment|//               System.out.println("Insertion next.line1 = " + next.line1 + " next.inserted = " + next.inserted +
comment|//                "\nnext.line0 = " + next.line0 + " next.deleted = " + next.deleted);
name|Difference
operator|.
name|Insert
name|diff
decl_stmt|;
if|if
condition|(
name|nodesA
index|[
name|start0
index|]
operator|.
name|nodeType
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
name|diff
operator|=
operator|new
name|Difference
operator|.
name|Append
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|docA
argument_list|,
name|nodesA
index|[
name|start0
index|]
operator|.
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|diff
operator|=
operator|new
name|Difference
operator|.
name|Insert
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|docA
argument_list|,
name|nodesA
index|[
name|start0
index|]
operator|.
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
comment|// now scan the chunk and collect the nodes into a node set
name|NodeSet
name|insertedNodes
init|=
operator|new
name|NewArrayNodeSet
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|last
condition|;
name|i
operator|++
control|)
block|{
comment|//                   System.out.println(Integer.toString(i) + " " + nodesB[i]);
name|NodeId
name|nodeId
init|=
name|nodesB
index|[
name|i
index|]
operator|.
name|nodeId
decl_stmt|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|docB
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodesB
index|[
name|i
index|]
operator|.
name|nodeType
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
block|{
name|elementStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|insertedNodes
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|nodesB
index|[
name|i
index|]
operator|.
name|nodeType
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
name|elementStack
operator|.
name|push
argument_list|(
name|nodesB
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
name|insertedNodes
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
comment|// handle all elements which were not properly closed
while|while
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|DiffNode
name|n
init|=
operator|(
name|DiffNode
operator|)
name|elementStack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|insertedNodes
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|docB
argument_list|,
name|n
operator|.
name|nodeId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// scan the node set and keep the top nodes only. filter out all descendants.
name|NodeSet
name|filtered
init|=
operator|new
name|NewArrayNodeSet
argument_list|(
literal|1
argument_list|,
name|insertedNodes
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|SequenceIterator
name|i
init|=
name|insertedNodes
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|p
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|filtered
operator|.
name|parentWithChild
argument_list|(
name|p
operator|.
name|getDocument
argument_list|()
argument_list|,
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
condition|)
name|filtered
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// finally add the node set to the Difference
name|diff
operator|.
name|setNodes
argument_list|(
name|filtered
argument_list|)
expr_stmt|;
comment|// and the Difference to the changes
name|changes
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|next
operator|.
name|deleted
operator|>
literal|0
condition|)
block|{
name|last
operator|=
name|start0
operator|+
name|next
operator|.
name|deleted
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start0
init|;
name|i
operator|<
name|last
condition|;
name|i
operator|++
control|)
block|{
name|NodeId
name|nodeId
init|=
name|nodesA
index|[
name|i
index|]
operator|.
name|nodeId
decl_stmt|;
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|docA
argument_list|,
name|nodeId
argument_list|)
decl_stmt|;
name|deletedNodes
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
name|next
operator|=
name|next
operator|.
name|link
expr_stmt|;
block|}
name|processDeleted
argument_list|(
name|deletedNodes
argument_list|,
name|changes
argument_list|)
expr_stmt|;
return|return
name|changes
return|;
block|}
specifier|protected
name|void
name|processDeleted
parameter_list|(
name|NodeSet
name|nodes
parameter_list|,
name|List
name|changes
parameter_list|)
block|{
name|NodeSet
name|filtered
init|=
operator|new
name|NewArrayNodeSet
argument_list|(
literal|1
argument_list|,
name|nodes
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|SequenceIterator
name|i
init|=
name|nodes
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|p
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|filtered
operator|.
name|parentWithChild
argument_list|(
name|p
operator|.
name|getDocument
argument_list|()
argument_list|,
name|p
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
condition|)
block|{
name|filtered
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|Difference
operator|.
name|Delete
name|diff
init|=
operator|new
name|Difference
operator|.
name|Delete
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|changes
operator|.
name|add
argument_list|(
name|diff
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|protected
name|DiffNode
index|[]
name|getNodes
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ElementImpl
name|root
parameter_list|)
throws|throws
name|XMLStreamException
throws|,
name|IOException
block|{
name|EmbeddedXMLStreamReader
name|reader
init|=
name|broker
operator|.
name|getXMLStreamReader
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|List
name|nodes
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|DiffNode
name|node
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|int
name|status
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeId
name|nodeId
init|=
operator|(
name|NodeId
operator|)
name|reader
operator|.
name|getProperty
argument_list|(
name|EmbeddedXMLStreamReader
operator|.
name|PROPERTY_NODE_ID
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|XMLStreamReader
operator|.
name|START_ELEMENT
case|:
name|node
operator|=
operator|new
name|DiffNode
argument_list|(
name|nodeId
argument_list|,
name|status
argument_list|,
name|reader
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|reader
operator|.
name|getAttributeCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|String
name|value
init|=
name|reader
operator|.
name|getAttributeQName
argument_list|(
name|i
argument_list|)
operator|.
name|getStringValue
argument_list|()
operator|+
literal|'='
operator|+
name|reader
operator|.
name|getAttributeValue
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|node
operator|=
operator|new
name|DiffNode
argument_list|(
name|nodeId
argument_list|,
name|XMLStreamReader
operator|.
name|ATTRIBUTE
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamReader
operator|.
name|END_ELEMENT
case|:
name|node
operator|=
operator|new
name|DiffNode
argument_list|(
name|nodeId
argument_list|,
name|status
argument_list|,
literal|"/"
operator|+
name|reader
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|CHARACTERS
case|:
case|case
name|XMLStreamReader
operator|.
name|COMMENT
case|:
name|node
operator|=
operator|new
name|DiffNode
argument_list|(
name|nodeId
argument_list|,
name|status
argument_list|,
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|PROCESSING_INSTRUCTION
case|:
name|String
name|value
init|=
name|reader
operator|.
name|getPITarget
argument_list|()
operator|+
literal|" "
operator|+
name|reader
operator|.
name|getPIData
argument_list|()
decl_stmt|;
name|nodes
operator|.
name|add
argument_list|(
operator|new
name|DiffNode
argument_list|(
name|nodeId
argument_list|,
name|status
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|DiffNode
index|[]
name|array
init|=
operator|new
name|DiffNode
index|[
name|nodes
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|DiffNode
index|[]
operator|)
name|nodes
operator|.
name|toArray
argument_list|(
name|array
argument_list|)
return|;
block|}
specifier|private
specifier|static
class|class
name|DiffNode
block|{
name|int
name|diffType
decl_stmt|;
name|NodeId
name|nodeId
decl_stmt|;
name|int
name|nodeType
decl_stmt|;
name|String
name|value
decl_stmt|;
specifier|public
name|DiffNode
parameter_list|(
name|NodeId
name|nodeId
parameter_list|,
name|int
name|nodeType
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
name|this
operator|.
name|nodeType
operator|=
name|nodeType
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|DiffNode
name|other
init|=
operator|(
name|DiffNode
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|nodeType
operator|!=
name|other
operator|.
name|nodeType
condition|)
return|return
literal|false
return|;
return|return
name|value
operator|.
name|equals
argument_list|(
name|other
operator|.
name|value
argument_list|)
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
operator|(
name|value
operator|.
name|hashCode
argument_list|()
operator|<<
literal|1
operator|)
operator|+
name|nodeType
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|nodeType
operator|+
literal|" "
operator|+
name|nodeId
operator|.
name|toString
argument_list|()
operator|+
literal|" "
operator|+
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

