begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|DataOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|FilteringTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_class
specifier|public
class|class
name|VersioningTrigger
extends|extends
name|FilteringTrigger
block|{
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|VersioningTrigger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|VERSIONS_COLLECTION
init|=
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION_URI
operator|.
name|append
argument_list|(
literal|"versions"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|BASE_SUFFIX
init|=
literal|".base"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|TEMP_SUFFIX
init|=
literal|".tmp"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DELETED_SUFFIX
init|=
literal|".deleted"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|BINARY_SUFFIX
init|=
literal|".binary"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|XML_SUFFIX
init|=
literal|".xml"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PARAM_OVERWRITE
init|=
literal|"overwrite"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|ELEMENT_VERSION
init|=
operator|new
name|QName
argument_list|(
literal|"version"
argument_list|,
name|StandardDiff
operator|.
name|NAMESPACE
argument_list|,
name|StandardDiff
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|ELEMENT_REMOVED
init|=
operator|new
name|QName
argument_list|(
literal|"removed"
argument_list|,
name|StandardDiff
operator|.
name|NAMESPACE
argument_list|,
name|StandardDiff
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|PROPERTIES_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"properties"
argument_list|,
name|StandardDiff
operator|.
name|NAMESPACE
argument_list|,
name|StandardDiff
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|ELEMENT_REPLACED_BINARY
init|=
operator|new
name|QName
argument_list|(
literal|"replaced-binary"
argument_list|,
name|StandardDiff
operator|.
name|NAMESPACE
argument_list|,
name|StandardDiff
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|ATTRIBUTE_REF
init|=
operator|new
name|QName
argument_list|(
literal|"ref"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|ELEMENT_REPLACED_XML
init|=
operator|new
name|QName
argument_list|(
literal|"replaced-xml"
argument_list|,
name|StandardDiff
operator|.
name|NAMESPACE
argument_list|,
name|StandardDiff
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Object
name|latch
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
specifier|private
name|XmldbURI
name|documentPath
decl_stmt|;
specifier|private
name|DocumentImpl
name|lastRev
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|removeLast
init|=
literal|false
decl_stmt|;
specifier|private
name|Collection
name|vCollection
decl_stmt|;
specifier|private
name|DocumentImpl
name|vDoc
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|elementStack
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|documentKey
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|documentRev
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|checkForConflicts
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|parent
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
parameter_list|)
throws|throws
name|TriggerException
block|{
name|super
operator|.
name|configure
argument_list|(
name|broker
argument_list|,
name|parent
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
if|if
condition|(
name|parameters
operator|!=
literal|null
condition|)
block|{
name|String
name|allowOverwrite
init|=
operator|(
name|String
operator|)
name|parameters
operator|.
name|get
argument_list|(
name|PARAM_OVERWRITE
argument_list|)
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|allowOverwrite
operator|!=
literal|null
condition|)
name|checkForConflicts
operator|=
name|allowOverwrite
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
operator|||
name|allowOverwrite
operator|.
name|equals
argument_list|(
literal|"no"
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"checkForConflicts: "
operator|+
name|checkForConflicts
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|prepare
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|documentPath
parameter_list|,
name|DocumentImpl
name|existingDocument
parameter_list|)
throws|throws
name|TriggerException
block|{
block|}
specifier|public
name|void
name|finish
parameter_list|(
name|int
name|event
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|documentPath
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
block|{
if|if
condition|(
name|documentPath
operator|.
name|startsWith
argument_list|(
name|VERSIONS_COLLECTION
argument_list|)
condition|)
return|return;
name|Subject
name|activeSubject
init|=
name|broker
operator|.
name|getSubject
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|vDoc
operator|!=
literal|null
operator|&&
operator|!
name|removeLast
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|vDoc
operator|instanceof
name|BinaryDocument
operator|)
condition|)
block|{
try|try
block|{
name|vDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|vCollection
operator|.
name|addDocument
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|vDoc
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|vDoc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Versioning trigger could not store base document: "
operator|+
name|vDoc
operator|.
name|getFileURI
argument_list|()
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|vDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|event
operator|==
name|STORE_DOCUMENT_EVENT
condition|)
block|{
try|try
block|{
name|vCollection
operator|=
name|getVersionsCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|documentPath
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|existingURI
init|=
name|document
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|XmldbURI
name|deletedURI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|existingURI
operator|+
name|DELETED_SUFFIX
argument_list|)
decl_stmt|;
name|lastRev
operator|=
name|vCollection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|deletedURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRev
operator|==
literal|null
condition|)
block|{
name|lastRev
operator|=
name|vCollection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|existingURI
operator|+
name|BASE_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|removeLast
operator|=
literal|false
expr_stmt|;
block|}
else|else
name|removeLast
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Permission denied in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastRev
operator|!=
literal|null
operator|||
name|event
operator|==
name|REMOVE_DOCUMENT_EVENT
condition|)
block|{
try|try
block|{
name|long
name|revision
init|=
name|newRevision
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentPath
operator|.
name|isCollectionPathAbsolute
argument_list|()
condition|)
name|documentPath
operator|=
name|documentPath
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
name|XmldbURI
name|diffUri
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|documentPath
operator|.
name|toString
argument_list|()
operator|+
literal|'.'
operator|+
name|revision
argument_list|)
decl_stmt|;
name|vCollection
operator|.
name|setTriggersEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|SAXSerializer
name|sax
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|sax
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
name|sax
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|sax
operator|.
name|startElement
argument_list|(
name|ELEMENT_VERSION
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|sax
argument_list|,
name|getVersionProperties
argument_list|(
name|revision
argument_list|,
name|documentPath
argument_list|,
name|activeSubject
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|event
operator|==
name|REMOVE_DOCUMENT_EVENT
condition|)
block|{
name|sax
operator|.
name|startElement
argument_list|(
name|ELEMENT_REMOVED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sax
operator|.
name|endElement
argument_list|(
name|ELEMENT_REMOVED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Diff
if|if
condition|(
name|document
operator|instanceof
name|BinaryDocument
condition|)
block|{
comment|//create a copy of the last Binary revision
name|XmldbURI
name|binUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|diffUri
operator|.
name|toString
argument_list|()
operator|+
name|BINARY_SUFFIX
argument_list|)
decl_stmt|;
name|broker
operator|.
name|copyResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|,
name|vCollection
argument_list|,
name|binUri
argument_list|)
expr_stmt|;
comment|//Create metadata about the last Binary Version
name|sax
operator|.
name|startElement
argument_list|(
name|ELEMENT_REPLACED_BINARY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sax
operator|.
name|attribute
argument_list|(
name|ATTRIBUTE_REF
argument_list|,
name|binUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sax
operator|.
name|endElement
argument_list|(
name|ELEMENT_REPLACED_BINARY
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastRev
operator|instanceof
name|BinaryDocument
condition|)
block|{
comment|//create a copy of the last XML revision
name|XmldbURI
name|xmlUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|diffUri
operator|.
name|toString
argument_list|()
operator|+
name|XML_SUFFIX
argument_list|)
decl_stmt|;
name|broker
operator|.
name|copyResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|,
name|vCollection
argument_list|,
name|xmlUri
argument_list|)
expr_stmt|;
comment|//Create metadata about the last Binary Version
name|sax
operator|.
name|startElement
argument_list|(
name|ELEMENT_REPLACED_XML
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sax
operator|.
name|attribute
argument_list|(
name|ATTRIBUTE_REF
argument_list|,
name|xmlUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sax
operator|.
name|endElement
argument_list|(
name|ELEMENT_REPLACED_BINARY
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Diff the XML versions
name|Diff
name|diff
init|=
operator|new
name|StandardDiff
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|diff
operator|.
name|diff
argument_list|(
name|lastRev
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|diff
operator|.
name|diff2XML
argument_list|(
name|sax
argument_list|)
expr_stmt|;
block|}
name|sax
operator|.
name|endElement
argument_list|(
name|ELEMENT_VERSION
argument_list|)
expr_stmt|;
name|sax
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|String
name|editscript
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|removeLast
condition|)
block|{
if|if
condition|(
name|lastRev
operator|instanceof
name|BinaryDocument
condition|)
block|{
name|vCollection
operator|.
name|removeBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|lastRev
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vCollection
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|lastRev
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexInfo
name|info
init|=
name|vCollection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|diffUri
argument_list|,
name|editscript
argument_list|)
decl_stmt|;
name|vCollection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|editscript
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|vCollection
operator|.
name|setTriggersEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|activeSubject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|before
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|boolean
name|remove
parameter_list|)
throws|throws
name|TriggerException
block|{
name|this
operator|.
name|documentPath
operator|=
name|document
operator|.
name|getURI
argument_list|()
expr_stmt|;
if|if
condition|(
name|documentPath
operator|.
name|startsWith
argument_list|(
name|VERSIONS_COLLECTION
argument_list|)
condition|)
return|return;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|Subject
name|activeSubject
init|=
name|broker
operator|.
name|getSubject
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|collection
init|=
name|document
operator|.
name|getCollection
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|startsWith
argument_list|(
name|VERSIONS_COLLECTION
argument_list|)
condition|)
return|return;
name|vCollection
operator|=
name|getVersionsCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|documentPath
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|existingURI
init|=
name|document
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|XmldbURI
name|baseURI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|existingURI
operator|+
name|BASE_SUFFIX
argument_list|)
decl_stmt|;
name|DocumentImpl
name|baseRev
init|=
name|vCollection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|baseURI
argument_list|)
decl_stmt|;
name|String
name|vFileName
decl_stmt|;
if|if
condition|(
name|baseRev
operator|==
literal|null
condition|)
block|{
name|vFileName
operator|=
name|baseURI
operator|.
name|toString
argument_list|()
expr_stmt|;
name|removeLast
operator|=
literal|false
expr_stmt|;
comment|// copy existing document to base revision here!
name|broker
operator|.
name|copyResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|,
name|vCollection
argument_list|,
name|baseURI
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|remove
condition|)
block|{
name|vFileName
operator|=
name|existingURI
operator|+
name|DELETED_SUFFIX
expr_stmt|;
name|removeLast
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|vFileName
operator|=
name|existingURI
operator|+
name|TEMP_SUFFIX
expr_stmt|;
name|removeLast
operator|=
literal|true
expr_stmt|;
block|}
comment|// setReferenced(true) will tell the broker that the document
comment|// data is referenced from another document and should not be
comment|// deleted when the orignal document is removed.
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|setReferenced
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|document
operator|instanceof
name|BinaryDocument
condition|)
block|{
name|XmldbURI
name|binUri
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|vFileName
argument_list|)
decl_stmt|;
name|broker
operator|.
name|copyResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|,
name|vCollection
argument_list|,
name|binUri
argument_list|)
expr_stmt|;
name|vDoc
operator|=
name|vCollection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|binUri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vDoc
operator|=
operator|new
name|DocumentImpl
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|vCollection
argument_list|,
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|vFileName
argument_list|)
argument_list|)
expr_stmt|;
name|vDoc
operator|.
name|copyOf
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|vDoc
operator|.
name|copyChildren
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|remove
condition|)
block|{
name|lastRev
operator|=
name|vDoc
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TriggerException
argument_list|(
literal|"Permission denied in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|activeSubject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|after
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|boolean
name|remove
parameter_list|)
block|{
if|if
condition|(
name|documentPath
operator|.
name|startsWith
argument_list|(
name|VERSIONS_COLLECTION
argument_list|)
condition|)
return|return;
name|Subject
name|activeSubject
init|=
name|broker
operator|.
name|getSubject
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|remove
condition|)
block|{
try|try
block|{
name|vCollection
operator|=
name|getVersionsCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|documentPath
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|existingURI
init|=
name|document
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|XmldbURI
name|deletedURI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|existingURI
operator|+
name|DELETED_SUFFIX
argument_list|)
decl_stmt|;
name|lastRev
operator|=
name|vCollection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|deletedURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastRev
operator|==
literal|null
condition|)
block|{
name|lastRev
operator|=
name|vCollection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|existingURI
operator|+
name|BASE_SUFFIX
argument_list|)
argument_list|)
expr_stmt|;
name|removeLast
operator|=
literal|false
expr_stmt|;
block|}
else|else
name|removeLast
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Permission denied in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|lastRev
operator|!=
literal|null
operator|||
name|remove
condition|)
block|{
try|try
block|{
name|long
name|revision
init|=
name|newRevision
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|documentPath
operator|.
name|isCollectionPathAbsolute
argument_list|()
condition|)
block|{
name|documentPath
operator|=
name|documentPath
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
block|}
name|XmldbURI
name|diffUri
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|documentPath
operator|.
name|toString
argument_list|()
operator|+
literal|'.'
operator|+
name|revision
argument_list|)
decl_stmt|;
name|vCollection
operator|.
name|setTriggersEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|SAXSerializer
name|sax
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|Properties
name|outputProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|outputProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|sax
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|outputProperties
argument_list|)
expr_stmt|;
name|sax
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|sax
operator|.
name|startElement
argument_list|(
name|ELEMENT_VERSION
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|writeProperties
argument_list|(
name|sax
argument_list|,
name|getVersionProperties
argument_list|(
name|revision
argument_list|,
name|documentPath
argument_list|,
name|activeSubject
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|remove
condition|)
block|{
name|sax
operator|.
name|startElement
argument_list|(
name|ELEMENT_REMOVED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sax
operator|.
name|endElement
argument_list|(
name|ELEMENT_REMOVED
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Diff
if|if
condition|(
name|document
operator|instanceof
name|BinaryDocument
condition|)
block|{
comment|//create a copy of the last Binary revision
name|XmldbURI
name|binUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|diffUri
operator|.
name|toString
argument_list|()
operator|+
name|BINARY_SUFFIX
argument_list|)
decl_stmt|;
name|broker
operator|.
name|copyResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|,
name|vCollection
argument_list|,
name|binUri
argument_list|)
expr_stmt|;
comment|//Create metadata about the last Binary Version
name|sax
operator|.
name|startElement
argument_list|(
name|ELEMENT_REPLACED_BINARY
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sax
operator|.
name|attribute
argument_list|(
name|ATTRIBUTE_REF
argument_list|,
name|binUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sax
operator|.
name|endElement
argument_list|(
name|ELEMENT_REPLACED_BINARY
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|lastRev
operator|instanceof
name|BinaryDocument
condition|)
block|{
comment|//create a copy of the last XML revision
name|XmldbURI
name|xmlUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|diffUri
operator|.
name|toString
argument_list|()
operator|+
name|XML_SUFFIX
argument_list|)
decl_stmt|;
name|broker
operator|.
name|copyResource
argument_list|(
name|transaction
argument_list|,
name|document
argument_list|,
name|vCollection
argument_list|,
name|xmlUri
argument_list|)
expr_stmt|;
comment|//Create metadata about the last Binary Version
name|sax
operator|.
name|startElement
argument_list|(
name|ELEMENT_REPLACED_XML
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|sax
operator|.
name|attribute
argument_list|(
name|ATTRIBUTE_REF
argument_list|,
name|xmlUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|sax
operator|.
name|endElement
argument_list|(
name|ELEMENT_REPLACED_XML
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Diff the XML versions
name|Diff
name|diff
init|=
operator|new
name|StandardDiff
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|diff
operator|.
name|diff
argument_list|(
name|lastRev
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|diff
operator|.
name|diff2XML
argument_list|(
name|sax
argument_list|)
expr_stmt|;
block|}
name|sax
operator|.
name|endElement
argument_list|(
name|ELEMENT_VERSION
argument_list|)
expr_stmt|;
name|sax
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|String
name|editscript
init|=
name|writer
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|removeLast
condition|)
block|{
if|if
condition|(
name|lastRev
operator|instanceof
name|BinaryDocument
condition|)
block|{
name|vCollection
operator|.
name|removeBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|lastRev
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|vCollection
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|lastRev
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|IndexInfo
name|info
init|=
name|vCollection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|diffUri
argument_list|,
name|editscript
argument_list|)
decl_stmt|;
name|vCollection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|editscript
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|vCollection
operator|.
name|setTriggersEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|activeSubject
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Properties
name|getVersionProperties
parameter_list|(
name|long
name|revision
parameter_list|,
name|XmldbURI
name|documentPath
parameter_list|,
name|Account
name|commitAccount
parameter_list|)
throws|throws
name|XPathException
block|{
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"document"
argument_list|,
name|documentPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"revision"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|revision
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"date"
argument_list|,
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
literal|"user"
argument_list|,
name|commitAccount
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|documentKey
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
literal|"key"
argument_list|,
name|documentKey
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
specifier|public
specifier|static
name|void
name|writeProperties
parameter_list|(
name|Receiver
name|receiver
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|SAXException
block|{
name|receiver
operator|.
name|startElement
argument_list|(
name|PROPERTIES_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
name|Entry
argument_list|<
name|Object
argument_list|,
name|Object
argument_list|>
name|entry
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|StandardDiff
operator|.
name|NAMESPACE
argument_list|,
name|StandardDiff
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|qn
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|characters
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|endElement
argument_list|(
name|qn
argument_list|)
expr_stmt|;
block|}
name|receiver
operator|.
name|endElement
argument_list|(
name|PROPERTIES_ELEMENT
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Collection
name|getVersionsCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|collectionPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionDeniedException
throws|,
name|TriggerException
block|{
name|XmldbURI
name|path
init|=
name|VERSIONS_COLLECTION
operator|.
name|append
argument_list|(
name|collectionPath
argument_list|)
decl_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|path
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating versioning collection: "
operator|+
name|path
argument_list|)
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transaction
operator|.
name|registerLock
argument_list|(
name|collection
operator|.
name|getLock
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
return|return
name|collection
return|;
block|}
specifier|private
name|long
name|newRevision
parameter_list|(
name|BrokerPool
name|pool
parameter_list|)
block|{
name|String
name|dataDir
init|=
operator|(
name|String
operator|)
name|pool
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|latch
init|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|dataDir
argument_list|,
literal|"versions.dbx"
argument_list|)
decl_stmt|;
name|long
name|rev
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|DataInputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|is
operator|=
operator|new
name|DataInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|rev
operator|=
name|is
operator|.
name|readLong
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to read versions.dbx: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to read versions.dbx: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close InputStream for versions.dbx: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
operator|++
name|rev
expr_stmt|;
name|DataOutputStream
name|os
init|=
literal|null
decl_stmt|;
try|try
block|{
name|os
operator|=
operator|new
name|DataOutputStream
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|f
argument_list|)
argument_list|)
expr_stmt|;
name|os
operator|.
name|writeLong
argument_list|(
name|rev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|FileNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to write versions.dbx: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to write versions.dbx: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|os
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|os
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to close OutputStream for versions.dbx: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|rev
return|;
block|}
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qname
parameter_list|,
name|Attributes
name|attributes
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|checkForConflicts
operator|&&
name|isValidating
argument_list|()
operator|&&
name|elementStack
operator|==
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|StandardDiff
operator|.
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|attributes
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|String
name|attrName
init|=
name|attributes
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|VersioningFilter
operator|.
name|ATTR_KEY
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|attrName
argument_list|)
condition|)
name|documentKey
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|else if
condition|(
name|VersioningFilter
operator|.
name|ATTR_REVISION
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|attrName
argument_list|)
condition|)
name|documentRev
operator|=
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|documentKey
operator|!=
literal|null
operator|&&
name|documentRev
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"v:key = "
operator|+
name|documentKey
operator|+
literal|"; v:revision = "
operator|+
name|documentRev
argument_list|)
expr_stmt|;
try|try
block|{
name|long
name|rev
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|documentRev
argument_list|)
decl_stmt|;
if|if
condition|(
name|VersioningHelper
operator|.
name|newerRevisionExists
argument_list|(
name|broker
argument_list|,
name|documentPath
argument_list|,
name|rev
argument_list|,
name|documentKey
argument_list|)
condition|)
block|{
name|long
name|baseRev
init|=
name|VersioningHelper
operator|.
name|getBaseRevision
argument_list|(
name|broker
argument_list|,
name|documentPath
argument_list|,
name|rev
argument_list|,
name|documentKey
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"base revision: "
operator|+
name|baseRev
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TriggerException
argument_list|(
literal|"Possible version conflict detected for document: "
operator|+
name|documentPath
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Internal error in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Internal error in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Illegal revision number in VersioningTrigger: "
operator|+
name|documentRev
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Internal error in VersioningTrigger: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|elementStack
operator|==
literal|0
condition|)
block|{
comment|// Remove the versioning attributes which were inserted during serialization. We don't want
comment|// to store them in the db
name|AttributesImpl
name|nattrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attributes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|StandardDiff
operator|.
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|attributes
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|nattrs
operator|.
name|addAttribute
argument_list|(
name|attributes
operator|.
name|getURI
argument_list|(
name|i
argument_list|)
argument_list|,
name|attributes
operator|.
name|getLocalName
argument_list|(
name|i
argument_list|)
argument_list|,
name|attributes
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|,
name|attributes
operator|.
name|getType
argument_list|(
name|i
argument_list|)
argument_list|,
name|attributes
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|attributes
operator|=
name|nattrs
expr_stmt|;
block|}
name|elementStack
operator|++
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qname
parameter_list|)
throws|throws
name|SAXException
block|{
name|elementStack
operator|--
expr_stmt|;
name|super
operator|.
name|endElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|StandardDiff
operator|.
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
return|return;
name|super
operator|.
name|startPrefixMapping
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
name|this
operator|.
name|documentPath
operator|=
name|uri
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCreateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
name|after
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
name|before
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterUpdateDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
name|after
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterCopyDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
name|after
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|newUri
parameter_list|)
throws|throws
name|TriggerException
block|{
name|before
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterMoveDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|,
name|XmldbURI
name|oldUri
parameter_list|)
throws|throws
name|TriggerException
block|{
name|after
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//TODO: check
block|}
annotation|@
name|Override
specifier|public
name|void
name|beforeDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|TriggerException
block|{
name|before
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|document
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|afterDeleteDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|TriggerException
block|{
name|after
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//TODO: check
block|}
block|}
end_class

end_unit

