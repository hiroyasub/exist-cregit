begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NewArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|Difference
block|{
specifier|public
specifier|final
specifier|static
name|int
name|INSERT
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DELETE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|APPEND
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|UPDATE
init|=
literal|3
decl_stmt|;
specifier|protected
name|int
name|type
decl_stmt|;
specifier|protected
name|NodeProxy
name|refChild
decl_stmt|;
specifier|public
name|Difference
parameter_list|(
name|int
name|type
parameter_list|,
name|NodeProxy
name|reference
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|refChild
operator|=
name|reference
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|serialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
function_decl|;
specifier|public
specifier|static
class|class
name|Insert
extends|extends
name|Difference
block|{
specifier|protected
name|DocumentImpl
name|otherDoc
decl_stmt|;
specifier|protected
name|DiffNode
index|[]
name|nodes
decl_stmt|;
specifier|public
name|Insert
parameter_list|(
name|NodeProxy
name|reference
parameter_list|,
name|DocumentImpl
name|otherDoc
parameter_list|)
block|{
name|super
argument_list|(
name|INSERT
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|this
operator|.
name|otherDoc
operator|=
name|otherDoc
expr_stmt|;
block|}
specifier|public
name|Insert
parameter_list|(
name|int
name|type
parameter_list|,
name|NodeProxy
name|reference
parameter_list|,
name|DocumentImpl
name|otherDoc
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|this
operator|.
name|otherDoc
operator|=
name|otherDoc
expr_stmt|;
block|}
specifier|protected
name|void
name|setNodes
parameter_list|(
name|DiffNode
index|[]
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"ref"
argument_list|,
literal|"ref"
argument_list|,
literal|"CDATA"
argument_list|,
name|refChild
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"insert"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":insert"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|serializeChildren
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"insert"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":insert"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
block|}
specifier|protected
name|void
name|serializeChildren
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|AttributesImpl
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|nodes
index|[
name|i
index|]
operator|.
name|nodeType
condition|)
block|{
case|case
name|XMLStreamReader
operator|.
name|ATTRIBUTE
case|:
name|AttrImpl
name|attr
init|=
operator|(
name|AttrImpl
operator|)
name|broker
operator|.
name|objectWith
argument_list|(
name|otherDoc
argument_list|,
name|nodes
index|[
name|i
index|]
operator|.
name|nodeId
argument_list|)
decl_stmt|;
name|attribs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
name|attr
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|attr
operator|.
name|getName
argument_list|()
argument_list|,
name|AttrImpl
operator|.
name|getAttributeType
argument_list|(
name|attr
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"attribute"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":attribute"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"attribute"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":attribute"
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|START_ELEMENT
case|:
comment|// check if there's a complete element to write, not just a start or end tag
comment|// if yes, just copy the element, if no, write a start-tag node
name|boolean
name|isClosed
init|=
literal|false
decl_stmt|;
name|NodeId
name|nodeId
init|=
name|nodes
index|[
name|i
index|]
operator|.
name|nodeId
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<
name|nodes
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|nodes
index|[
name|j
index|]
operator|.
name|nodeType
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
operator|&&
name|nodes
index|[
name|j
index|]
operator|.
name|nodeId
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
name|isClosed
operator|=
literal|true
expr_stmt|;
name|NodeProxy
name|proxy
init|=
operator|new
name|NodeProxy
argument_list|(
name|otherDoc
argument_list|,
name|nodes
index|[
name|i
index|]
operator|.
name|nodeId
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|isClosed
condition|)
block|{
name|attribs
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodes
index|[
name|i
index|]
operator|.
name|qname
operator|.
name|needsNamespaceDecl
argument_list|()
condition|)
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"namespace"
argument_list|,
literal|"namespace"
argument_list|,
literal|"CDATA"
argument_list|,
name|nodes
index|[
name|i
index|]
operator|.
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|nodes
index|[
name|i
index|]
operator|.
name|qname
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"start"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":start"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"start"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":start"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|XMLStreamReader
operator|.
name|END_ELEMENT
case|:
name|attribs
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|nodes
index|[
name|i
index|]
operator|.
name|qname
operator|.
name|needsNamespaceDecl
argument_list|()
condition|)
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"namespace"
argument_list|,
literal|"namespace"
argument_list|,
literal|"CDATA"
argument_list|,
name|nodes
index|[
name|i
index|]
operator|.
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"name"
argument_list|,
literal|"name"
argument_list|,
literal|"CDATA"
argument_list|,
name|nodes
index|[
name|i
index|]
operator|.
name|qname
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"end"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":end"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"end"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":end"
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|COMMENT
case|:
name|attribs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"comment"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":comment"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|char
name|ch
index|[]
init|=
name|nodes
index|[
name|i
index|]
operator|.
name|value
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"comment"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":comment"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|NodeProxy
name|proxy
init|=
operator|new
name|NodeProxy
argument_list|(
name|otherDoc
argument_list|,
name|nodes
index|[
name|i
index|]
operator|.
name|nodeId
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|Append
extends|extends
name|Insert
block|{
specifier|public
name|Append
parameter_list|(
name|NodeProxy
name|reference
parameter_list|,
name|DocumentImpl
name|otherDoc
parameter_list|)
block|{
name|super
argument_list|(
name|APPEND
argument_list|,
name|reference
argument_list|,
name|otherDoc
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"ref"
argument_list|,
literal|"ref"
argument_list|,
literal|"CDATA"
argument_list|,
name|refChild
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"append"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":append"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|serializeChildren
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"append"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":append"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|Delete
extends|extends
name|Difference
block|{
specifier|protected
name|int
name|event
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|Delete
parameter_list|(
name|NodeProxy
name|reference
parameter_list|)
block|{
name|this
argument_list|(
operator|-
literal|1
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Delete
parameter_list|(
name|int
name|event
parameter_list|,
name|NodeProxy
name|reference
parameter_list|)
block|{
name|super
argument_list|(
name|DELETE
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|this
operator|.
name|event
operator|=
name|event
expr_stmt|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
operator|||
name|event
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
block|{
name|String
name|ev
init|=
name|event
operator|==
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|?
literal|"start"
else|:
literal|"end"
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"event"
argument_list|,
literal|"event"
argument_list|,
literal|"CDATA"
argument_list|,
name|ev
argument_list|)
expr_stmt|;
block|}
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"ref"
argument_list|,
literal|"ref"
argument_list|,
literal|"CDATA"
argument_list|,
name|refChild
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"delete"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":delete"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"delete"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":delete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|Update
extends|extends
name|Difference
block|{
specifier|private
name|NodeId
name|endId
decl_stmt|;
specifier|public
name|Update
parameter_list|(
name|NodeProxy
name|reference
parameter_list|,
name|NodeId
name|endId
parameter_list|)
block|{
name|super
argument_list|(
name|UPDATE
argument_list|,
name|reference
argument_list|)
expr_stmt|;
name|this
operator|.
name|endId
operator|=
name|endId
expr_stmt|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"ref"
argument_list|,
literal|"ref"
argument_list|,
literal|"CDATA"
argument_list|,
name|refChild
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"end"
argument_list|,
literal|"end"
argument_list|,
literal|"CDATA"
argument_list|,
name|endId
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"update"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":update"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"update"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":update"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
block|}
block|}
block|}
end_class

end_unit

