begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|versioning
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NewArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|Difference
block|{
specifier|public
specifier|final
specifier|static
name|int
name|INSERT
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DELETE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|APPEND
init|=
literal|2
decl_stmt|;
specifier|protected
name|int
name|type
decl_stmt|;
specifier|protected
name|NodeProxy
name|refChild
decl_stmt|;
specifier|public
name|Difference
parameter_list|(
name|int
name|type
parameter_list|,
name|NodeProxy
name|reference
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|refChild
operator|=
name|reference
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|serialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
function_decl|;
specifier|public
specifier|static
class|class
name|Insert
extends|extends
name|Difference
block|{
specifier|protected
name|NodeSet
name|nodes
init|=
operator|new
name|NewArrayNodeSet
argument_list|(
literal|1
argument_list|,
literal|8
argument_list|)
decl_stmt|;
specifier|public
name|Insert
parameter_list|(
name|NodeProxy
name|reference
parameter_list|)
block|{
name|super
argument_list|(
name|INSERT
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Insert
parameter_list|(
name|int
name|type
parameter_list|,
name|NodeProxy
name|reference
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addNode
parameter_list|(
name|NodeProxy
name|node
parameter_list|)
block|{
if|if
condition|(
name|nodes
operator|.
name|parentWithChild
argument_list|(
name|node
operator|.
name|getDocument
argument_list|()
argument_list|,
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
operator|==
literal|null
condition|)
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|addNodes
parameter_list|(
name|NodeSet
name|set
parameter_list|)
block|{
name|nodes
operator|.
name|addAll
argument_list|(
name|set
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setNodes
parameter_list|(
name|NodeSet
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|nodes
operator|=
name|nodes
expr_stmt|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"ref"
argument_list|,
literal|"ref"
argument_list|,
literal|"CDATA"
argument_list|,
name|refChild
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"insert"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":insert"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|nodes
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"insert"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":insert"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|Append
extends|extends
name|Insert
block|{
specifier|public
name|Append
parameter_list|(
name|NodeProxy
name|reference
parameter_list|)
block|{
name|super
argument_list|(
name|APPEND
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"ref"
argument_list|,
literal|"ref"
argument_list|,
literal|"CDATA"
argument_list|,
name|refChild
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"append"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":append"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|nodes
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
name|proxy
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"append"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":append"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|Delete
extends|extends
name|Difference
block|{
specifier|public
name|Delete
parameter_list|(
name|NodeProxy
name|reference
parameter_list|)
block|{
name|super
argument_list|(
name|DELETE
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|serialize
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|)
block|{
try|try
block|{
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"ref"
argument_list|,
literal|"ref"
argument_list|,
literal|"CDATA"
argument_list|,
name|refChild
operator|.
name|getNodeId
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"delete"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":delete"
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|XMLDiff
operator|.
name|NAMESPACE
argument_list|,
literal|"delete"
argument_list|,
name|XMLDiff
operator|.
name|PREFIX
operator|+
literal|":delete"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|//To change body of catch statement use File | Settings | File Templates.
block|}
block|}
block|}
block|}
end_class

end_unit

