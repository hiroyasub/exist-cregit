begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Extended and slightly adopted version of the original XMLDBSource found in Apache Cocoon.  * The original license is:  *  *  Copyright 1999-2004 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cocoon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|configuration
operator|.
name|Configurable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|configuration
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|logger
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|thread
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|components
operator|.
name|source
operator|.
name|helpers
operator|.
name|SourceCredential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|SourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|/**  * This class implements the xmldb:// pseudo-protocol and allows to get XML  * content from an XML:DB enabled XML database.  *<p>  * The configuration of this protocol is as follows:  *<pre>  *&lt;source-factory name="xmldb" src="org.exist.cocoon.XMLDBSourceFactory&gt;  *&lt;driver type="foo" class="org.foomaker.FooXMLDBDriver"  *             user="scott" password="tiger"  *             collection="//localhost:8080/foo/base-path/"/&gt;  *&lt;driver...  *&lt;source-factory&gt;  *</pre>  *<p>  * The<code>type</code> attribute indicates the database type that will be used for URLs (e.g.  *<code>xmldb:foo:/path/</code>). The<code>collection</code> attribute specifies a base collection  * for paths that do not start with "<code>//</code>".  *<p>  * The returned sources are traversable, modifiable and xml-izable.  *   *<p>  * This class is an import of Cocoon trunk  *<a   *  href="http://svn.apache.org/viewcvs.cgi/cocoon/blocks/xmldb/trunk/java/org/apache/cocoon/components/source/impl/XMLDBSourceFactory.java?rev=349157&view=markup"  *>XMLDBSourceFactory</a>, to ensure connexion with a modified XMLDBSource.  *</p>  *    * @author cziegeler  * @version $Id$  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|XMLDBSourceFactory
extends|extends
name|AbstractLogEnabled
implements|implements
name|SourceFactory
implements|,
name|Configurable
implements|,
name|ThreadSafe
block|{
comment|/** A Map containing the authentication credentials */
specifier|protected
name|HashMap
argument_list|<
name|String
argument_list|,
name|SourceCredential
argument_list|>
name|credentialMap
decl_stmt|;
comment|/** An optional base collection for each of the drivers */
specifier|protected
name|HashMap
name|baseMap
decl_stmt|;
comment|/**      * Configure the instance and initialize XML:DB connections (load and register the drivers).      */
specifier|public
name|void
name|configure
parameter_list|(
specifier|final
name|Configuration
name|conf
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|credentialMap
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|SourceCredential
argument_list|>
argument_list|()
expr_stmt|;
name|baseMap
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|Configuration
index|[]
name|drivers
init|=
name|conf
operator|.
name|getChildren
argument_list|(
literal|"driver"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|drivers
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|drivers
index|[
name|i
index|]
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
name|String
name|driver
init|=
name|drivers
index|[
name|i
index|]
operator|.
name|getAttribute
argument_list|(
literal|"class"
argument_list|)
decl_stmt|;
name|SourceCredential
name|credential
init|=
operator|new
name|SourceCredential
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|credential
operator|.
name|setPrincipal
argument_list|(
name|drivers
index|[
name|i
index|]
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|credential
operator|.
name|setPassword
argument_list|(
name|drivers
index|[
name|i
index|]
operator|.
name|getAttribute
argument_list|(
literal|"password"
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|credentialMap
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|credential
argument_list|)
expr_stmt|;
name|String
name|base
init|=
name|drivers
index|[
name|i
index|]
operator|.
name|getAttribute
argument_list|(
literal|"collection"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
operator|&&
name|base
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// Ensure the base collection ends with a '/'
if|if
condition|(
name|base
operator|.
name|charAt
argument_list|(
name|base
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'/'
condition|)
block|{
name|base
operator|=
name|base
operator|+
literal|'/'
expr_stmt|;
block|}
name|baseMap
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|base
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|getLogger
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Initializing XML:DB connection, using driver "
operator|+
name|driver
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|Database
name|db
init|=
operator|(
name|Database
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|Configuration
index|[]
name|params
init|=
name|drivers
index|[
name|i
index|]
operator|.
name|getChildren
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|params
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|db
operator|.
name|setProperty
argument_list|(
name|params
index|[
name|j
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|params
index|[
name|j
index|]
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to connect to the XMLDB database '"
operator|+
name|type
operator|+
literal|"'."
operator|+
literal|" Error "
operator|+
name|e
operator|.
name|errorCode
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|String
name|msg
init|=
literal|"Unable to load XMLDB database driver '"
operator|+
name|driver
operator|+
literal|"'."
operator|+
literal|" Make sure that the driver is available. Error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * Resolve the source      */
specifier|public
name|Source
name|getSource
parameter_list|(
name|String
name|location
parameter_list|,
name|Map
name|parameters
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|int
name|start
init|=
name|location
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
decl_stmt|;
name|int
name|end
init|=
name|location
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|,
name|start
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|==
literal|0
operator|||
name|end
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Mispelled XML:DB URL. "
operator|+
literal|"The syntax is \"xmldb:databasetype://host/collection/resource\""
argument_list|)
throw|;
block|}
name|String
name|type
init|=
name|location
operator|.
name|substring
argument_list|(
name|start
argument_list|,
name|end
argument_list|)
decl_stmt|;
name|SourceCredential
name|credential
init|=
operator|(
name|SourceCredential
operator|)
name|credentialMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|credential
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"xmldb type '"
operator|+
name|type
operator|+
literal|"' is unknown for URL "
operator|+
name|location
argument_list|)
throw|;
block|}
name|String
name|base
init|=
operator|(
name|String
operator|)
name|baseMap
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
operator|&&
name|base
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|String
name|path
init|=
name|location
operator|.
name|substring
argument_list|(
name|end
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"//"
argument_list|)
condition|)
block|{
comment|// URL is not absolute, add base, avoiding to double the '/'
if|if
condition|(
name|path
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'/'
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|end
operator|+
literal|1
argument_list|)
operator|+
name|base
operator|+
name|path
expr_stmt|;
block|}
block|}
return|return
operator|new
name|XMLDBSource
argument_list|(
name|this
operator|.
name|getLogger
argument_list|()
argument_list|,
name|credential
operator|.
name|getPrincipal
argument_list|()
argument_list|,
name|credential
operator|.
name|getPassword
argument_list|()
argument_list|,
name|location
argument_list|)
return|;
block|}
specifier|public
name|void
name|release
parameter_list|(
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|Source
name|source
parameter_list|)
block|{
comment|// nothing to do here
block|}
block|}
end_class

end_unit

