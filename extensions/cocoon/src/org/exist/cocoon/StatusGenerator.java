begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * StatusGenerator.java - May 17, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cocoon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|generation
operator|.
name|AbstractGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|report
operator|.
name|XMLStatistics
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_comment
comment|/**  * A Cocoon Generator which generates status information about running database instances,  * buffer usage and the like.  *   */
end_comment

begin_class
specifier|public
class|class
name|StatusGenerator
extends|extends
name|AbstractGenerator
block|{
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE
init|=
literal|"http://exist.sourceforge.net/generators/status"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"status"
decl_stmt|;
name|XMLStatistics
name|stats
decl_stmt|;
specifier|public
name|StatusGenerator
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|stats
operator|=
operator|new
name|XMLStatistics
argument_list|(
name|contentHandler
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @see org.apache.cocoon.generation.Generator#generate() 	 */
specifier|public
name|void
name|generate
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ProcessingException
block|{
name|stats
operator|.
name|setContentHandler
argument_list|(
name|contentHandler
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|startPrefixMapping
argument_list|(
name|PREFIX
argument_list|,
name|NAMESPACE
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"status"
argument_list|,
name|PREFIX
operator|+
literal|":status"
argument_list|,
operator|new
name|AttributesImpl
argument_list|()
argument_list|)
expr_stmt|;
name|genVMStatus
argument_list|()
expr_stmt|;
name|stats
operator|.
name|genInstanceStatus
argument_list|()
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"status"
argument_list|,
name|PREFIX
operator|+
literal|":status"
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|endPrefixMapping
argument_list|(
name|PREFIX
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|genVMStatus
parameter_list|()
throws|throws
name|SAXException
block|{
name|AttributesImpl
name|atts
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"system"
argument_list|,
name|PREFIX
operator|+
literal|":system"
argument_list|,
name|atts
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"memory"
argument_list|,
name|PREFIX
operator|+
literal|":memory"
argument_list|,
name|atts
argument_list|)
expr_stmt|;
name|addValue
argument_list|(
literal|"total"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|totalMemory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addValue
argument_list|(
literal|"free"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|freeMemory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addValue
argument_list|(
literal|"max"
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|maxMemory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"memory"
argument_list|,
name|PREFIX
operator|+
literal|":memory"
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"jvm"
argument_list|,
name|PREFIX
operator|+
literal|":jvm"
argument_list|,
name|atts
argument_list|)
expr_stmt|;
name|addValue
argument_list|(
literal|"version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.version"
argument_list|)
argument_list|)
expr_stmt|;
name|addValue
argument_list|(
literal|"vendor"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.vendor"
argument_list|)
argument_list|)
expr_stmt|;
name|Locale
name|locale
init|=
name|Locale
operator|.
name|getDefault
argument_list|()
decl_stmt|;
name|addValue
argument_list|(
literal|"locale"
argument_list|,
name|locale
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|InputStreamReader
name|is
init|=
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
decl_stmt|;
name|addValue
argument_list|(
literal|"charset"
argument_list|,
name|is
operator|.
name|getEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"jvm"
argument_list|,
name|PREFIX
operator|+
literal|":jvm"
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"os"
argument_list|,
name|PREFIX
operator|+
literal|":os"
argument_list|,
name|atts
argument_list|)
expr_stmt|;
name|addValue
argument_list|(
literal|"name"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|)
argument_list|)
expr_stmt|;
name|addValue
argument_list|(
literal|"architecture"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.arch"
argument_list|)
argument_list|)
expr_stmt|;
name|addValue
argument_list|(
literal|"version"
argument_list|,
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.version"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"os"
argument_list|,
name|PREFIX
operator|+
literal|":os"
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
literal|"system"
argument_list|,
name|PREFIX
operator|+
literal|":system"
argument_list|)
expr_stmt|;
block|}
comment|/* =================== 	private void genInstanceStatus() throws SAXException { 		AttributesImpl atts = new AttributesImpl(); 		atts.addAttribute("", "default", "default", "CDATA", BrokerPool.DEFAULT_INSTANCE); 		this.contentHandler.startElement(NAMESPACE, "database-instances",  			PREFIX + ":database-instances", atts); 		atts.clear(); 		 		BrokerPool instance; 		for(Iterator i = BrokerPool.getInstances(); i.hasNext(); ) { 			instance = (BrokerPool)i.next(); 			atts.addAttribute("", "name", "name", "CDATA", instance.getId()); 			this.contentHandler.startElement(NAMESPACE, "database-instance",  				PREFIX + ":database-instance", atts); 			atts.clear(); 			addValue("configuration", instance.getConfiguration().getPath()); 			addValue("data-directory", (String)instance.getConfiguration().getProperty(BrokerPool.PROPERTY_DATA_DIR)); 			this.contentHandler.startElement(NAMESPACE, "pool", PREFIX + ":pool", atts); 			addValue("max", String.valueOf(instance.getMax())); 			addValue("active", String.valueOf(instance.active())); 			addValue("available", String.valueOf(instance.available())); 			this.contentHandler.endElement(NAMESPACE, "pool", PREFIX + ":pool"); 			genBufferStatus(instance); 			this.contentHandler.endElement(NAMESPACE, "database-instance", 				PREFIX + ":database-instance"); 		} 		 		this.contentHandler.endElement(NAMESPACE, "database-instances", 			PREFIX + "database-instances"); 	} 	 	private void genBufferStatus(BrokerPool instance) throws SAXException { 		AttributesImpl atts = new AttributesImpl(); 		this.contentHandler.startElement(NAMESPACE, "buffers", PREFIX + ":buffers", atts); 		 		Configuration conf = instance.getConfiguration(); 		BFile db = (BFile) conf.getProperty("db-connection.elements"); 		genBufferDetails(db.getIndexBufferStats(), db.getDataBufferStats(), "elements.dbx"); 		db = (BFile) conf.getProperty("db-connection.collections"); 		genBufferDetails(db.getIndexBufferStats(), db.getDataBufferStats(), "collections.dbx"); 		db = (BFile) conf.getProperty("db-connection.words"); 		genBufferDetails(db.getIndexBufferStats(), db.getDataBufferStats(), "words.dbx"); 		DOMFile dom = (DOMFile) conf.getProperty("db-connection.dom"); 		genBufferDetails(dom.getIndexBufferStats(), dom.getDataBufferStats(), "dom.dbx"); 		 		this.contentHandler.endElement(NAMESPACE, "buffers", PREFIX + ":buffers"); 	} 	 	private void genBufferDetails(BufferStats index, BufferStats data, String name) throws SAXException { 		AttributesImpl atts = new AttributesImpl(); 		atts.addAttribute("", "name", "name", "CDATA", name); 		this.contentHandler.startElement(NAMESPACE, "file", PREFIX + ":file", atts); 		atts.clear(); 		atts.addAttribute("", "type", "type", "CDATA", "btree"); 		this.contentHandler.startElement(NAMESPACE, "buffer", PREFIX + ":buffer", atts); 		atts.clear(); 		addValue("size", String.valueOf(index.getSize())); 		addValue("used", String.valueOf(index.getUsed())); 		addValue("hits", String.valueOf(index.getPageHits())); 		addValue("fails", String.valueOf(index.getPageFails())); 		this.contentHandler.endElement(NAMESPACE, "buffer", PREFIX + ":buffer"); 		 		atts.addAttribute("", "type", "type", "CDATA", "data"); 		this.contentHandler.startElement(NAMESPACE, "buffer", PREFIX + ":buffer", atts); 		atts.clear(); 		addValue("size", String.valueOf(data.getSize())); 		addValue("used", String.valueOf(data.getUsed())); 		addValue("hits", String.valueOf(data.getPageHits())); 		addValue("fails", String.valueOf(data.getPageFails())); 		this.contentHandler.endElement(NAMESPACE, "buffer", PREFIX + ":buffer"); 				 		this.contentHandler.endElement(NAMESPACE, "file", PREFIX + ":file"); 	} 	 	private void addValue(String elem, String value) throws SAXException { 		AttributesImpl atts = new AttributesImpl(); 		this.contentHandler.startElement(NAMESPACE, elem, PREFIX + ':' + elem, atts); 		this.contentHandler.characters(value.toCharArray(), 0, value.length()); 		this.contentHandler.endElement(NAMESPACE, elem, PREFIX + ':' + elem); 	} */
comment|/** 	 * @param elem 	 * @param value 	 * @throws SAXException 	 */
specifier|private
name|void
name|addValue
parameter_list|(
name|String
name|elem
parameter_list|,
name|String
name|value
parameter_list|)
throws|throws
name|SAXException
block|{
name|stats
operator|.
name|addValue
argument_list|(
name|elem
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

