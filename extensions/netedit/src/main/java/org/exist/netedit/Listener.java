begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|netedit
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|FileTime
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|httpclient
operator|.
name|HttpException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_comment
comment|/**  * @author Evgeny Gazdovsky (gazdovsky@gmail.com)  */
end_comment

begin_class
specifier|public
class|class
name|Listener
extends|extends
name|TimerTask
block|{
specifier|private
name|long
name|lastModified
decl_stmt|;
comment|// time of last file change
specifier|private
name|Task
name|task
decl_stmt|;
comment|// listened task
specifier|private
name|Path
name|file
decl_stmt|;
comment|// listened file
specifier|private
name|NetEditApplet
name|netEdit
decl_stmt|;
comment|/** 	 * Create a listener for task 	 * @param task listened task 	 * @param netEdit NetEditApplet 	 */
specifier|public
name|Listener
parameter_list|(
name|Task
name|task
parameter_list|,
name|NetEditApplet
name|netEdit
parameter_list|)
block|{
name|this
operator|.
name|netEdit
operator|=
name|netEdit
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|task
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|FileUtils
operator|.
name|lastModifiedQuietly
argument_list|(
name|file
argument_list|)
operator|.
name|map
argument_list|(
name|FileTime
operator|::
name|toMillis
argument_list|)
operator|.
name|getOrElse
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Create a listener for task, used for task loaded from FS 	 * @param task listened task 	 * @param netEdit NetEditApplet 	 * @param lastModified time of last task modification, stored in XML description of task  	 */
specifier|public
name|Listener
parameter_list|(
name|Task
name|task
parameter_list|,
name|NetEditApplet
name|netEdit
parameter_list|,
name|long
name|lastModified
parameter_list|)
block|{
name|this
operator|.
name|netEdit
operator|=
name|netEdit
expr_stmt|;
name|this
operator|.
name|task
operator|=
name|task
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|task
operator|.
name|getFile
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|lastModified
expr_stmt|;
block|}
specifier|private
name|boolean
name|isModified
parameter_list|()
block|{
return|return
name|FileUtils
operator|.
name|lastModifiedQuietly
argument_list|(
name|file
argument_list|)
operator|.
name|map
argument_list|(
name|FileTime
operator|::
name|toMillis
argument_list|)
operator|.
name|getOrElse
argument_list|(
operator|-
literal|1l
argument_list|)
operator|>
name|this
operator|.
name|lastModified
return|;
block|}
comment|/** 	 * Listen task's file changes, upload file to server  	 * and store task description on local FS    	 */
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|isModified
argument_list|()
condition|)
block|{
name|this
operator|.
name|lastModified
operator|=
name|FileUtils
operator|.
name|lastModifiedQuietly
argument_list|(
name|file
argument_list|)
operator|.
name|map
argument_list|(
name|FileTime
operator|::
name|toMillis
argument_list|)
operator|.
name|getOrElse
argument_list|(
operator|-
literal|1l
argument_list|)
expr_stmt|;
try|try
block|{
name|netEdit
operator|.
name|upload
argument_list|(
name|file
argument_list|,
name|task
operator|.
name|getUploadTo
argument_list|()
argument_list|)
expr_stmt|;
name|task
operator|.
name|store
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HttpException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

