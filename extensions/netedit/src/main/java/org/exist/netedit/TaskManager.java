begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|netedit
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimerTask
import|;
end_import

begin_comment
comment|/**  * @author Evgeny Gazdovsky (gazdovsky@gmail.com)  */
end_comment

begin_class
specifier|public
class|class
name|TaskManager
extends|extends
name|TimerTask
block|{
specifier|private
name|List
argument_list|<
name|Task
argument_list|>
name|tasks
init|=
operator|new
name|ArrayList
argument_list|<
name|Task
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|haveNewTask
init|=
literal|false
decl_stmt|;
specifier|private
name|NetEditApplet
name|netEdit
decl_stmt|;
specifier|public
name|TaskManager
parameter_list|(
name|NetEditApplet
name|netEdit
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|netEdit
operator|=
name|netEdit
expr_stmt|;
block|}
comment|/** 	 * Add a task to execute 	 * @param task added task 	 */
specifier|public
name|void
name|addTask
parameter_list|(
name|Task
name|task
parameter_list|)
block|{
name|tasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|haveNewTask
operator|=
literal|true
expr_stmt|;
block|}
comment|/** 	 * Start a new task added into list 	 */
specifier|public
name|void
name|run
parameter_list|()
block|{
if|if
condition|(
name|haveNewTask
condition|)
block|{
name|haveNewTask
operator|=
literal|false
expr_stmt|;
name|tasks
operator|.
name|get
argument_list|(
name|tasks
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Load tasks from local file system 	 * and start listeners for them 	 */
specifier|public
name|void
name|load
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|metaFolder
init|=
name|netEdit
operator|.
name|getMeta
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|metaFolder
argument_list|)
condition|)
block|{
for|for
control|(
name|Path
name|meta
range|:
name|FileUtils
operator|.
name|list
argument_list|(
name|metaFolder
argument_list|)
control|)
block|{
try|try
init|(
specifier|final
name|InputStream
name|in
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|meta
argument_list|)
init|)
block|{
name|Properties
name|prop
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|prop
operator|.
name|loadFromXML
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|Path
name|tmp
init|=
name|Paths
operator|.
name|get
argument_list|(
name|prop
operator|.
name|getProperty
argument_list|(
literal|"file"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|String
name|downloadFrom
init|=
name|prop
operator|.
name|getProperty
argument_list|(
literal|"download-from"
argument_list|)
decl_stmt|;
name|String
name|uploadTo
init|=
name|prop
operator|.
name|getProperty
argument_list|(
literal|"upload-to"
argument_list|)
decl_stmt|;
name|long
name|modified
init|=
operator|new
name|Long
argument_list|(
name|prop
operator|.
name|getProperty
argument_list|(
literal|"modified"
argument_list|)
argument_list|)
operator|.
name|longValue
argument_list|()
decl_stmt|;
name|Task
name|task
init|=
operator|new
name|Task
argument_list|(
name|downloadFrom
argument_list|,
name|uploadTo
argument_list|,
name|tmp
argument_list|,
name|netEdit
argument_list|)
decl_stmt|;
name|tasks
operator|.
name|add
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|Listener
name|listener
init|=
operator|new
name|Listener
argument_list|(
name|task
argument_list|,
name|netEdit
argument_list|,
name|modified
argument_list|)
decl_stmt|;
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|()
decl_stmt|;
name|timer
operator|.
name|schedule
argument_list|(
name|listener
argument_list|,
name|NetEditApplet
operator|.
name|PERIOD
argument_list|,
name|NetEditApplet
operator|.
name|PERIOD
argument_list|)
expr_stmt|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|FileUtils
operator|.
name|deleteQuietly
argument_list|(
name|meta
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

