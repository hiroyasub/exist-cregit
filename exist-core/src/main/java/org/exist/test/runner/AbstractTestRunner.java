begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|runner
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|FileSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * Base class for XSuite test runners.  *  * @author Adam Retter  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractTestRunner
extends|extends
name|Runner
block|{
specifier|protected
specifier|final
name|Path
name|path
decl_stmt|;
specifier|protected
specifier|final
name|boolean
name|parallel
decl_stmt|;
specifier|protected
name|AbstractTestRunner
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|parallel
parameter_list|)
block|{
name|this
operator|.
name|path
operator|=
name|path
expr_stmt|;
name|this
operator|.
name|parallel
operator|=
name|parallel
expr_stmt|;
block|}
specifier|protected
specifier|static
name|Sequence
name|executeQuery
parameter_list|(
specifier|final
name|Source
name|query
parameter_list|,
specifier|final
name|List
argument_list|<
name|Function
argument_list|<
name|XQueryContext
argument_list|,
name|Tuple2
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|externalVariableBindings
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
block|{
specifier|final
name|BrokerPool
name|brokerPool
init|=
name|XSuite
operator|.
name|ExistServer
operator|.
name|getRunningServer
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XQueryPool
name|queryPool
init|=
name|brokerPool
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|CompiledXQuery
name|compiledQuery
init|=
name|queryPool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|query
argument_list|)
decl_stmt|;
try|try
block|{
name|XQueryContext
name|context
decl_stmt|;
if|if
condition|(
name|compiledQuery
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|compiledQuery
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|prepareForReuse
argument_list|()
expr_stmt|;
block|}
comment|// setup misc. context
name|context
operator|.
name|setBaseURI
argument_list|(
operator|new
name|AnyURIValue
argument_list|(
literal|"/db"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|instanceof
name|FileSource
condition|)
block|{
specifier|final
name|Path
name|queryPath
init|=
name|Paths
operator|.
name|get
argument_list|(
operator|(
operator|(
name|FileSource
operator|)
name|query
operator|)
operator|.
name|getFilePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|queryPath
argument_list|)
condition|)
block|{
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|queryPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|queryPath
operator|.
name|getParent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// declare variables for the query
for|for
control|(
specifier|final
name|Function
argument_list|<
name|XQueryContext
argument_list|,
name|Tuple2
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
name|externalVariableBinding
range|:
name|externalVariableBindings
control|)
block|{
specifier|final
name|Tuple2
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|nameValue
init|=
name|externalVariableBinding
operator|.
name|apply
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|nameValue
operator|.
name|_1
argument_list|,
name|nameValue
operator|.
name|_2
argument_list|)
expr_stmt|;
block|}
specifier|final
name|XQuery
name|xqueryService
init|=
name|brokerPool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
comment|// compile or update the context
if|if
condition|(
name|compiledQuery
operator|==
literal|null
condition|)
block|{
name|compiledQuery
operator|=
name|xqueryService
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|query
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compiledQuery
operator|.
name|getContext
argument_list|()
operator|.
name|updateContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|context
operator|.
name|getWatchDog
argument_list|()
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
name|xqueryService
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiledQuery
argument_list|,
literal|null
argument_list|)
return|;
block|}
finally|finally
block|{
name|queryPool
operator|.
name|returnCompiledXQuery
argument_list|(
name|query
argument_list|,
name|compiledQuery
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

