begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|runner
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLFilenameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XQueryFilenameFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Runner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|ParentRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|InitializationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|RunnerBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * Using<code>XSuite</code> as a runner allows you to manually  * build a suite containing tests from both:  *  * 1. XQSuite - as defined in $EXIST_HOME/src/org/exist/xquery/lib/xqsuite/xqsuite.xql  * 2. XML Test - as defined in $EXIST_HOME/src/org/exist/xquery/lib/test.xq  *  * To use it, annotate a class  * with<code>@RunWith(XSuite.class)</code> and<code>@XSuiteClasses({"extensions/my-extension/src/test/xquery", ...})</code>.  * When you run this class, it will run all the tests in all the suite classes.  *  * @author Adam Retter  */
end_comment

begin_class
specifier|public
class|class
name|XSuite
extends|extends
name|ParentRunner
argument_list|<
name|Runner
argument_list|>
block|{
comment|/**      * Returns an empty suite.      */
specifier|public
specifier|static
name|Runner
name|emptySuite
parameter_list|()
block|{
try|try
block|{
return|return
operator|new
name|XSuite
argument_list|(
operator|(
name|Class
argument_list|<
name|?
argument_list|>
operator|)
literal|null
argument_list|,
operator|new
name|String
index|[
literal|0
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|InitializationError
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"This shouldn't be possible"
argument_list|)
throw|;
block|}
block|}
comment|/**      * The<code>XSuiteFiles</code> annotation specifies the directory/file containing the tests to be run when a class      * annotated with<code>@RunWith(XSuite.class)</code> is run.      */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|TYPE
argument_list|)
annotation|@
name|Inherited
specifier|public
annotation_defn|@interface
name|XSuiteFiles
block|{
comment|/**          * @return the classes to be run          */
name|String
index|[]
name|value
parameter_list|()
function_decl|;
block|}
comment|/**      * The<code>XSuiteParallel</code> annotation specifies that the tests will be run in parallel when a class      * annotated with<code>@RunWith(XSuite.class)</code> is run.      */
annotation|@
name|Retention
argument_list|(
name|RetentionPolicy
operator|.
name|RUNTIME
argument_list|)
annotation|@
name|Target
argument_list|(
name|ElementType
operator|.
name|TYPE
argument_list|)
annotation|@
name|Inherited
specifier|public
annotation_defn|@interface
name|XSuiteParallel
block|{     }
specifier|private
specifier|static
name|String
index|[]
name|getAnnotatedDirectories
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
throws|throws
name|InitializationError
block|{
specifier|final
name|XSuite
operator|.
name|XSuiteFiles
name|annotation
init|=
name|klass
operator|.
name|getAnnotation
argument_list|(
name|XSuite
operator|.
name|XSuiteFiles
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotation
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|InitializationError
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"class '%s' must have a XSuiteFiles annotation"
argument_list|,
name|klass
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|annotation
operator|.
name|value
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|boolean
name|hasParallelAnnotation
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|)
block|{
if|if
condition|(
name|klass
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|XSuite
operator|.
name|XSuiteParallel
name|annotation
init|=
name|klass
operator|.
name|getAnnotation
argument_list|(
name|XSuite
operator|.
name|XSuiteParallel
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|annotation
operator|!=
literal|null
return|;
block|}
specifier|private
specifier|final
name|List
argument_list|<
name|Runner
argument_list|>
name|runners
decl_stmt|;
comment|/**      * Called reflectively on classes annotated with<code>@RunWith(XSuite.class)</code>      *      * @param klass the root class      * @param builder builds runners for classes in the suite      */
specifier|public
name|XSuite
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|,
specifier|final
name|RunnerBuilder
name|builder
parameter_list|)
throws|throws
name|InitializationError
block|{
name|this
argument_list|(
name|builder
argument_list|,
name|klass
argument_list|,
name|getAnnotatedDirectories
argument_list|(
name|klass
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Call this when there is no single root class (for example, multiple class names      * passed on the command line to {@link org.junit.runner.JUnitCore}      *      * @param builder builds runners for classes in the suite      * @param suites the directories/files in the suite      */
specifier|public
name|XSuite
parameter_list|(
specifier|final
name|RunnerBuilder
name|builder
parameter_list|,
specifier|final
name|String
index|[]
name|suites
parameter_list|)
throws|throws
name|InitializationError
block|{
name|this
argument_list|(
name|builder
argument_list|,
literal|null
argument_list|,
name|suites
argument_list|)
expr_stmt|;
block|}
comment|/**      * Call this when the default builder is good enough. Left in for compatibility with JUnit 4.4.      *      * @param klass the root of the suite      * @param suites the directories/files in the suite      */
specifier|protected
name|XSuite
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|,
specifier|final
name|String
index|[]
name|suites
parameter_list|)
throws|throws
name|InitializationError
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|klass
argument_list|,
name|suites
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by this class and subclasses once the classes making up the suite have been determined      *      * @param builder builds runners for classes in the suite      * @param klass the root of the suite      * @param suites the directories/files in the suite      */
specifier|protected
name|XSuite
parameter_list|(
specifier|final
name|RunnerBuilder
name|builder
parameter_list|,
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|,
specifier|final
name|String
index|[]
name|suites
parameter_list|)
throws|throws
name|InitializationError
block|{
name|this
argument_list|(
name|klass
argument_list|,
name|getRunners
argument_list|(
name|suites
argument_list|,
name|hasParallelAnnotation
argument_list|(
name|klass
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by this class and subclasses once the runners making up the suite have been determined      *      * @param klass root of the suite      * @param runners for each class in the suite, a {@link Runner}      */
specifier|protected
name|XSuite
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|klass
parameter_list|,
specifier|final
name|List
argument_list|<
name|Runner
argument_list|>
name|runners
parameter_list|)
throws|throws
name|InitializationError
block|{
name|super
argument_list|(
name|klass
argument_list|)
expr_stmt|;
name|this
operator|.
name|runners
operator|=
name|Collections
operator|.
name|unmodifiableList
argument_list|(
name|runners
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the runners for the suiteDirectories.      *      * @param suites/files the directories in the suite      * @param parallel should a runner execute tests in parallel      */
specifier|private
specifier|static
name|List
argument_list|<
name|Runner
argument_list|>
name|getRunners
parameter_list|(
specifier|final
name|String
index|[]
name|suites
parameter_list|,
specifier|final
name|boolean
name|parallel
parameter_list|)
throws|throws
name|InitializationError
block|{
if|if
condition|(
name|suites
operator|==
literal|null
condition|)
block|{
return|return
name|Collections
operator|.
name|emptyList
argument_list|()
return|;
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|Runner
argument_list|>
name|runners
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|suite
range|:
name|suites
control|)
block|{
comment|// if directory/file does not exist - throw an exception
specifier|final
name|Path
name|path
init|=
name|Paths
operator|.
name|get
argument_list|(
name|suite
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|InitializationError
argument_list|(
literal|"XSuite does not exist: "
operator|+
name|suite
operator|+
literal|". path="
operator|+
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|path
argument_list|)
condition|)
block|{
comment|// directory of files of test(s)
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|children
init|=
name|Files
operator|.
name|list
argument_list|(
name|path
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|Path
name|child
range|:
name|children
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|child
argument_list|)
condition|)
block|{
specifier|final
name|Runner
name|runner
init|=
name|getRunner
argument_list|(
name|child
argument_list|,
name|parallel
argument_list|)
decl_stmt|;
if|if
condition|(
name|runner
operator|!=
literal|null
condition|)
block|{
name|runners
operator|.
name|add
argument_list|(
name|runner
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
comment|// just a file of test(s)
name|runners
operator|.
name|add
argument_list|(
name|getRunner
argument_list|(
name|path
argument_list|,
name|parallel
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|runners
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InitializationError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
annotation|@
name|Nullable
name|Runner
name|getRunner
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|parallel
parameter_list|)
throws|throws
name|InitializationError
block|{
if|if
condition|(
name|XMLFilenameFilter
operator|.
name|asPredicate
argument_list|()
operator|.
name|test
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
operator|new
name|XMLTestRunner
argument_list|(
name|path
argument_list|,
name|parallel
argument_list|)
return|;
block|}
if|else if
condition|(
name|XQueryFilenameFilter
operator|.
name|asPredicate
argument_list|()
operator|.
name|test
argument_list|(
name|path
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|equals
argument_list|(
literal|"runTests.xql"
argument_list|)
condition|)
block|{
return|return
operator|new
name|XQueryTestRunner
argument_list|(
name|path
argument_list|,
name|parallel
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|List
argument_list|<
name|Runner
argument_list|>
name|getChildren
parameter_list|()
block|{
return|return
name|runners
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Description
name|describeChild
parameter_list|(
specifier|final
name|Runner
name|child
parameter_list|)
block|{
return|return
name|child
operator|.
name|getDescription
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|runChild
parameter_list|(
specifier|final
name|Runner
name|runner
parameter_list|,
specifier|final
name|RunNotifier
name|notifier
parameter_list|)
block|{
name|runner
operator|.
name|run
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|RunNotifier
name|notifier
parameter_list|)
block|{
try|try
block|{
name|super
operator|.
name|run
argument_list|(
name|notifier
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|ExistServer
operator|.
name|stopServer
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|ExistServer
block|{
specifier|private
specifier|static
specifier|final
name|ExistEmbeddedServer
name|EXIST_EMBEDDED_SERVER
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|boolean
name|running
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|ExistEmbeddedServer
name|getRunningServer
parameter_list|()
throws|throws
name|EXistException
throws|,
name|IOException
throws|,
name|DatabaseConfigurationException
block|{
if|if
condition|(
operator|!
name|running
condition|)
block|{
name|EXIST_EMBEDDED_SERVER
operator|.
name|startDb
argument_list|()
expr_stmt|;
name|running
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|EXIST_EMBEDDED_SERVER
return|;
block|}
specifier|public
specifier|static
name|void
name|stopServer
parameter_list|()
block|{
if|if
condition|(
name|running
condition|)
block|{
name|EXIST_EMBEDDED_SERVER
operator|.
name|stopDb
argument_list|()
expr_stmt|;
name|running
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

