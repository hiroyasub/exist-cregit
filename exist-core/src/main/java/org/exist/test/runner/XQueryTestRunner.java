begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|runner
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|ClassLoaderSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|Description
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|notification
operator|.
name|RunNotifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|model
operator|.
name|InitializationError
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collections
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A JUnit test runner which can run the XQuery tests (XQSuite)  * of eXist-db using $EXIST_HOME/src/org/exist/xquery/lib/xqsuite/xqsuite.xql.  *  * @author Adam Retter  */
end_comment

begin_class
specifier|public
class|class
name|XQueryTestRunner
extends|extends
name|AbstractTestRunner
block|{
specifier|private
specifier|final
name|XQueryTestInfo
name|info
decl_stmt|;
comment|/**      * @param path The path to the XQuery file containing the XQSuite tests      * @param parallel whether the tests should be run in parallel.      *      * @throws InitializationError if the test runner could not be constructed.      */
specifier|public
name|XQueryTestRunner
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|,
specifier|final
name|boolean
name|parallel
parameter_list|)
throws|throws
name|InitializationError
block|{
name|super
argument_list|(
name|path
argument_list|,
name|parallel
argument_list|)
expr_stmt|;
name|this
operator|.
name|info
operator|=
name|extractTestInfo
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|XQueryTestInfo
name|extractTestInfo
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|InitializationError
block|{
try|try
block|{
specifier|final
name|Source
name|query
init|=
operator|new
name|StringSource
argument_list|(
literal|"inspect:inspect-module(xs:anyURI(\""
operator|+
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\"))"
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|inspectionResults
init|=
name|executeQuery
argument_list|(
name|query
argument_list|,
name|Collections
operator|.
name|emptyList
argument_list|()
argument_list|)
decl_stmt|;
comment|// extract the details
name|String
name|prefix
init|=
literal|null
decl_stmt|;
name|String
name|namespace
init|=
literal|null
decl_stmt|;
specifier|final
name|List
argument_list|<
name|XQueryTestInfo
operator|.
name|TestFunctionDef
argument_list|>
name|testFunctions
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|inspectionResults
operator|!=
literal|null
operator|&&
name|inspectionResults
operator|.
name|hasOne
argument_list|()
condition|)
block|{
specifier|final
name|Element
name|moduleElement
init|=
operator|(
name|Element
operator|)
name|inspectionResults
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|prefix
operator|=
name|moduleElement
operator|.
name|getAttribute
argument_list|(
literal|"prefix"
argument_list|)
expr_stmt|;
name|namespace
operator|=
name|moduleElement
operator|.
name|getAttribute
argument_list|(
literal|"uri"
argument_list|)
expr_stmt|;
specifier|final
name|NodeList
name|children
init|=
name|moduleElement
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|child
init|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|child
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|child
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"function"
argument_list|)
condition|)
block|{
name|boolean
name|isTestFunction
init|=
literal|false
decl_stmt|;
specifier|final
name|NamedNodeMap
name|functionAttributes
init|=
name|child
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|functionAttributes
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
decl_stmt|;
name|String
name|testFunctionAnnotatedName
init|=
literal|null
decl_stmt|;
specifier|final
name|NodeList
name|functionChildren
init|=
name|child
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|functionChildren
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Node
name|functionChild
init|=
name|functionChildren
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|functionChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|functionChild
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// filter functions by annotations... we only want the test:assert* annotated ones!
if|if
condition|(
name|functionChild
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"annotation"
argument_list|)
condition|)
block|{
specifier|final
name|NamedNodeMap
name|annotationAttributes
init|=
name|functionChild
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
specifier|final
name|Node
name|annotationAttributeName
init|=
name|annotationAttributes
operator|.
name|getNamedItem
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotationAttributeName
operator|.
name|getNodeValue
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"test:assert"
argument_list|)
condition|)
block|{
name|isTestFunction
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|annotationAttributeName
operator|.
name|getNodeValue
argument_list|()
operator|.
name|equals
argument_list|(
literal|"test:name"
argument_list|)
condition|)
block|{
specifier|final
name|NodeList
name|annotationChildren
init|=
name|functionChild
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|annotationChildren
operator|.
name|getLength
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
specifier|final
name|Node
name|annotationChild
init|=
name|annotationChildren
operator|.
name|item
argument_list|(
name|k
argument_list|)
decl_stmt|;
if|if
condition|(
name|annotationChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|annotationChild
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|annotationChild
operator|.
name|getNodeName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|testFunctionAnnotatedName
operator|=
name|annotationChild
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|isTestFunction
condition|)
block|{
comment|// strip module prefix from function name
name|String
name|testFunctionLocalName
init|=
name|testFunctionAnnotatedName
operator|!=
literal|null
condition|?
name|testFunctionAnnotatedName
else|:
name|name
decl_stmt|;
if|if
condition|(
name|testFunctionLocalName
operator|.
name|startsWith
argument_list|(
name|prefix
operator|+
literal|':'
argument_list|)
condition|)
block|{
name|testFunctionLocalName
operator|=
name|testFunctionLocalName
operator|.
name|substring
argument_list|(
name|testFunctionLocalName
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|testFunctions
operator|.
name|add
argument_list|(
operator|new
name|XQueryTestInfo
operator|.
name|TestFunctionDef
argument_list|(
name|testFunctionLocalName
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
operator|new
name|XQueryTestInfo
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|,
name|testFunctions
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|DatabaseConfigurationException
decl||
name|IOException
decl||
name|EXistException
decl||
name|PermissionDeniedException
decl||
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|InitializationError
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|String
name|getSuiteName
parameter_list|()
block|{
return|return
name|info
operator|.
name|getNamespace
argument_list|()
return|;
comment|//        final String filename = path.getFileName().toString();
comment|//        return filename.substring(0, filename.indexOf('.') - 1);
block|}
annotation|@
name|Override
specifier|public
name|Description
name|getDescription
parameter_list|()
block|{
specifier|final
name|Description
name|description
init|=
name|Description
operator|.
name|createSuiteDescription
argument_list|(
name|getSuiteName
argument_list|()
argument_list|,
operator|(
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
index|[]
operator|)
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|XQueryTestInfo
operator|.
name|TestFunctionDef
name|testFunctionDef
range|:
name|info
operator|.
name|getTestFunctions
argument_list|()
control|)
block|{
name|description
operator|.
name|addChild
argument_list|(
name|Description
operator|.
name|createTestDescription
argument_list|(
name|getSuiteName
argument_list|()
argument_list|,
name|testFunctionDef
operator|.
name|getLocalName
argument_list|()
argument_list|,
operator|(
name|java
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Annotation
operator|)
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|description
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|(
specifier|final
name|RunNotifier
name|notifier
parameter_list|)
block|{
try|try
block|{
specifier|final
name|String
name|pkgName
init|=
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'.'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|query
init|=
operator|new
name|ClassLoaderSource
argument_list|(
name|pkgName
operator|+
literal|"/xquery-test-runner.xq"
argument_list|)
decl_stmt|;
specifier|final
name|URI
name|testModuleUri
init|=
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toUri
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
argument_list|<
name|XQueryContext
argument_list|,
name|Tuple2
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|>
argument_list|>
name|externalVariableDeclarations
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|context
lambda|->
operator|new
name|Tuple2
argument_list|<>
argument_list|(
literal|"test-module-uri"
argument_list|,
operator|new
name|AnyURIValue
argument_list|(
name|testModuleUri
argument_list|)
argument_list|)
argument_list|,
comment|// set callback functions for notifying junit!
name|context
lambda|->
operator|new
name|Tuple2
argument_list|<>
argument_list|(
literal|"test-ignored-function"
argument_list|,
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|ExtTestIgnoredFunction
argument_list|(
name|context
argument_list|,
name|getSuiteName
argument_list|()
argument_list|,
name|notifier
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|context
lambda|->
operator|new
name|Tuple2
argument_list|<>
argument_list|(
literal|"test-started-function"
argument_list|,
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|ExtTestStartedFunction
argument_list|(
name|context
argument_list|,
name|getSuiteName
argument_list|()
argument_list|,
name|notifier
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|context
lambda|->
operator|new
name|Tuple2
argument_list|<>
argument_list|(
literal|"test-failure-function"
argument_list|,
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|ExtTestFailureFunction
argument_list|(
name|context
argument_list|,
name|getSuiteName
argument_list|()
argument_list|,
name|notifier
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|context
lambda|->
operator|new
name|Tuple2
argument_list|<>
argument_list|(
literal|"test-assumption-failed-function"
argument_list|,
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|ExtTestAssumptionFailedFunction
argument_list|(
name|context
argument_list|,
name|getSuiteName
argument_list|()
argument_list|,
name|notifier
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|context
lambda|->
operator|new
name|Tuple2
argument_list|<>
argument_list|(
literal|"test-error-function"
argument_list|,
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|ExtTestErrorFunction
argument_list|(
name|context
argument_list|,
name|getSuiteName
argument_list|()
argument_list|,
name|notifier
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|context
lambda|->
operator|new
name|Tuple2
argument_list|<>
argument_list|(
literal|"test-finished-function"
argument_list|,
operator|new
name|FunctionReference
argument_list|(
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
operator|new
name|ExtTestFinishedFunction
argument_list|(
name|context
argument_list|,
name|getSuiteName
argument_list|()
argument_list|,
name|notifier
argument_list|)
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|executeQuery
argument_list|(
name|query
argument_list|,
name|externalVariableDeclarations
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|DatabaseConfigurationException
decl||
name|IOException
decl||
name|EXistException
decl||
name|PermissionDeniedException
decl||
name|XPathException
name|e
parameter_list|)
block|{
comment|//TODO(AR) what to do here?
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|XQueryTestInfo
block|{
specifier|private
specifier|final
name|String
name|prefix
decl_stmt|;
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|TestFunctionDef
argument_list|>
name|testFunctions
decl_stmt|;
specifier|private
name|XQueryTestInfo
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|List
argument_list|<
name|TestFunctionDef
argument_list|>
name|testFunctions
parameter_list|)
block|{
name|this
operator|.
name|prefix
operator|=
name|prefix
expr_stmt|;
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|testFunctions
operator|=
name|testFunctions
expr_stmt|;
block|}
specifier|public
name|String
name|getPrefix
parameter_list|()
block|{
return|return
name|prefix
return|;
block|}
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
specifier|public
name|List
argument_list|<
name|TestFunctionDef
argument_list|>
name|getTestFunctions
parameter_list|()
block|{
return|return
name|testFunctions
return|;
block|}
specifier|private
specifier|static
class|class
name|TestFunctionDef
block|{
specifier|private
specifier|final
name|String
name|localName
decl_stmt|;
specifier|private
name|TestFunctionDef
parameter_list|(
specifier|final
name|String
name|localName
parameter_list|)
block|{
name|this
operator|.
name|localName
operator|=
name|localName
expr_stmt|;
block|}
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|localName
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

