begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2011 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_comment
comment|/**  *  * @author<a href="mailto:adam@exist-db.org">Adam Retter</a>  */
end_comment

begin_interface
specifier|public
interface|interface
name|ACLPermission
block|{
enum|enum
name|ACE_ACCESS_TYPE
block|{
name|DENIED
argument_list|(
literal|01
argument_list|)
block|,
name|ALLOWED
argument_list|(
literal|02
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|val
decl_stmt|;
name|ACE_ACCESS_TYPE
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|int
name|getVal
parameter_list|()
block|{
return|return
name|val
return|;
block|}
specifier|public
specifier|static
name|ACE_ACCESS_TYPE
name|fromVal
parameter_list|(
name|int
name|val
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
range|:
name|ACE_ACCESS_TYPE
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|access_type
operator|.
name|getVal
argument_list|()
operator|==
name|val
condition|)
block|{
return|return
name|access_type
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown ACE Access Type"
argument_list|)
throw|;
block|}
block|}
enum|enum
name|ACE_TARGET
block|{
name|USER
argument_list|(
literal|01
argument_list|)
block|,
name|GROUP
argument_list|(
literal|02
argument_list|)
block|;
specifier|private
specifier|final
name|int
name|val
decl_stmt|;
name|ACE_TARGET
parameter_list|(
name|int
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
specifier|public
name|int
name|getVal
parameter_list|()
block|{
return|return
name|val
return|;
block|}
specifier|public
specifier|static
name|ACE_TARGET
name|fromVal
parameter_list|(
name|int
name|val
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ACE_TARGET
name|target
range|:
name|ACE_TARGET
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|target
operator|.
name|getVal
argument_list|()
operator|==
name|val
condition|)
block|{
return|return
name|target
return|;
block|}
block|}
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Unknown ACE Target"
argument_list|)
throw|;
block|}
block|}
name|short
name|getVersion
parameter_list|()
function_decl|;
name|void
name|addACE
parameter_list|(
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
name|ACE_TARGET
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
name|void
name|addACE
parameter_list|(
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
name|ACE_TARGET
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
name|void
name|insertACE
parameter_list|(
name|int
name|index
parameter_list|,
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
name|ACE_TARGET
name|target
parameter_list|,
name|String
name|name
parameter_list|,
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
name|void
name|modifyACE
parameter_list|(
name|int
name|index
parameter_list|,
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
name|void
name|modifyACE
parameter_list|(
name|int
name|index
parameter_list|,
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
name|void
name|removeACE
parameter_list|(
name|int
name|index
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
name|int
name|getACECount
parameter_list|()
function_decl|;
name|ACE_ACCESS_TYPE
name|getACEAccessType
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
name|ACE_TARGET
name|getACETarget
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      * Convenience method for getting the name of the user or group      * of which this ace is applied to      */
name|String
name|getACEWho
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
name|int
name|getACEMode
parameter_list|(
name|int
name|index
parameter_list|)
function_decl|;
comment|/**      * Clears all ACE's      */
name|void
name|clear
parameter_list|()
throws|throws
name|PermissionDeniedException
function_decl|;
name|boolean
name|isCurrentSubjectCanWriteACL
parameter_list|()
function_decl|;
comment|/**      * Determines if this ACL is equal to another ACL.      *      * @param other Another ACL to compare against.      *      * @return true if this ACL is equal to the other ACL.      */
name|boolean
name|aclEquals
parameter_list|(
specifier|final
name|ACLPermission
name|other
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

