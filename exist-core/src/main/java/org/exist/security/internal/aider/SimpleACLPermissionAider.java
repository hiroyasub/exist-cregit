begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2011 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id: UnixStylePermission.java 14502 2011-05-23 10:12:51Z deliriumsky $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SimpleACLPermission
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@exist-db.org">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|SimpleACLPermissionAider
extends|extends
name|UnixStylePermissionAider
implements|implements
name|ACLPermission
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|ACEAider
argument_list|>
name|aces
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|SimpleACLPermissionAider
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SimpleACLPermissionAider
parameter_list|(
specifier|final
name|int
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleACLPermissionAider
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|group
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|user
argument_list|,
name|group
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getVersion
parameter_list|()
block|{
return|return
name|SimpleACLPermission
operator|.
name|VERSION
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addACE
parameter_list|(
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|String
name|who
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
comment|//TODO validate()
name|aces
operator|.
name|add
argument_list|(
operator|new
name|ACEAider
argument_list|(
name|access_type
argument_list|,
name|target
argument_list|,
name|who
argument_list|,
name|mode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addACE
parameter_list|(
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|addACE
argument_list|(
name|access_type
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|aceSimpleSymbolicModeToInt
argument_list|(
name|modeStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insertACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|aces
operator|.
name|add
argument_list|(
name|index
argument_list|,
operator|new
name|ACEAider
argument_list|(
name|access_type
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|aceSimpleSymbolicModeToInt
argument_list|(
name|modeStr
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|modifyACE
argument_list|(
name|index
argument_list|,
name|access_type
argument_list|,
name|aceSimpleSymbolicModeToInt
argument_list|(
name|modeStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|ACEAider
name|ace
init|=
name|aces
operator|.
name|get
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|ace
operator|.
name|setAccessType
argument_list|(
name|access_type
argument_list|)
expr_stmt|;
name|ace
operator|.
name|setMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|aces
operator|.
name|remove
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getACECount
parameter_list|()
block|{
return|return
name|aces
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ACE_ACCESS_TYPE
name|getACEAccessType
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|aces
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getAccessType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ACE_TARGET
name|getACETarget
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|aces
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getTarget
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getACEWho
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|aces
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getWho
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getACEMode
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|aces
operator|.
name|get
argument_list|(
name|index
argument_list|)
operator|.
name|getMode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
throws|throws
name|PermissionDeniedException
block|{
comment|//TODO validate()
name|aces
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCurrentSubjectCanWriteACL
parameter_list|()
block|{
comment|//TODO validate()
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|aclEquals
parameter_list|(
specifier|final
name|ACLPermission
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|getACECount
argument_list|()
operator|!=
name|other
operator|.
name|getACECount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getACECount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getACEAccessType
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getACEAccessType
argument_list|(
name|i
argument_list|)
operator|||
name|getACETarget
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getACETarget
argument_list|(
name|i
argument_list|)
operator|||
operator|(
operator|!
name|getACEWho
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getACEWho
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
operator|||
name|getACEMode
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getACEMode
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Converts the mode string for an ACE to an int.      *      * @param modeStr the mode string for the ACE is simple symbolic format, must be between 1 and 3 characters.      *      * @return the octal mode encoded as an int.      *      * @throws PermissionDeniedException if the mode string is invalid      */
specifier|public
specifier|static
name|int
name|aceSimpleSymbolicModeToInt
parameter_list|(
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|modeStr
operator|==
literal|null
operator|||
name|modeStr
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|modeStr
operator|.
name|length
argument_list|()
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Invalid mode string '"
operator|+
name|modeStr
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|int
name|mode
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|char
name|c
range|:
name|modeStr
operator|.
name|toCharArray
argument_list|()
control|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
name|READ_CHAR
case|:
name|mode
operator||=
name|READ
expr_stmt|;
break|break;
case|case
name|WRITE_CHAR
case|:
name|mode
operator||=
name|WRITE
expr_stmt|;
break|break;
case|case
name|EXECUTE_CHAR
case|:
name|mode
operator||=
name|EXECUTE
expr_stmt|;
break|break;
case|case
name|UNSET_CHAR
case|:
break|break;
default|default:
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Unknown char '"
operator|+
name|c
operator|+
literal|"' in mode string '"
operator|+
name|modeStr
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
return|return
name|mode
return|;
block|}
block|}
end_class

end_unit

