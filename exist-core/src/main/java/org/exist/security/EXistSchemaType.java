begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010-2011 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_comment
comment|/**  *  * @author<a href="mailto:adam.retter@googlemail.com">Adam Retter</a>  */
end_comment

begin_enum
specifier|public
enum|enum
name|EXistSchemaType
implements|implements
name|SchemaType
block|{
name|DESCRIPTION
argument_list|(
literal|"http://exist-db.org/security/description"
argument_list|,
literal|"Description"
argument_list|)
block|;
specifier|private
specifier|final
name|String
name|namespace
decl_stmt|;
specifier|private
specifier|final
name|String
name|alias
decl_stmt|;
name|EXistSchemaType
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|alias
parameter_list|)
block|{
name|this
operator|.
name|namespace
operator|=
name|namespace
expr_stmt|;
name|this
operator|.
name|alias
operator|=
name|alias
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespace
parameter_list|()
block|{
return|return
name|namespace
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAlias
parameter_list|()
block|{
return|return
name|alias
return|;
block|}
specifier|public
specifier|static
name|EXistSchemaType
name|valueOfNamespace
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|)
block|{
for|for
control|(
specifier|final
name|EXistSchemaType
name|existSchemaType
range|:
name|EXistSchemaType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|existSchemaType
operator|.
name|getNamespace
argument_list|()
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
block|{
return|return
name|existSchemaType
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|static
name|EXistSchemaType
name|valueOfAlias
parameter_list|(
specifier|final
name|String
name|alias
parameter_list|)
block|{
for|for
control|(
specifier|final
name|EXistSchemaType
name|existSchemaType
range|:
name|EXistSchemaType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|existSchemaType
operator|.
name|getAlias
argument_list|()
operator|.
name|equals
argument_list|(
name|alias
argument_list|)
condition|)
block|{
return|return
name|existSchemaType
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
block|}
end_enum

end_unit

