begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|ManagedLocks
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentBuilderReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|IEmbeddedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|RangeIndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|StorageAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedDocumentLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_comment
comment|/**  * Placeholder class for DOM nodes.  *  * NodeProxy is an internal proxy class, acting as a placeholder for all types of persistent XML nodes  * during query processing. NodeProxy just stores the node's unique id and the document it belongs to.  * Query processing deals with these proxys most of the time. Using a NodeProxy is much cheaper  * than loading the actual node from the database. The real DOM node is only loaded,  * if further information is required for the evaluation of an XPath expression. To obtain  * the real node for a proxy, simply call {@link #getNode()}.  *  * All sets of type NodeSet operate on NodeProxys. A node set is a special type of  * sequence, so NodeProxy does also implement {@link org.exist.xquery.value.Item} and  * can thus be an item in a sequence. Since, according to XPath 2, a single node is also  * a sequence, NodeProxy does itself extend NodeSet. It thus represents a node set containing  * just one, single node.  *  * @author<a href="mailto:wolfgang@exist-db.org">Wolfgang Meier</a>  */
end_comment

begin_class
specifier|public
class|class
name|NodeProxy
implements|implements
name|NodeSet
implements|,
name|NodeValue
implements|,
name|NodeHandle
implements|,
name|DocumentSet
implements|,
name|Comparable
argument_list|<
name|Object
argument_list|>
block|{
specifier|public
specifier|static
specifier|final
name|short
name|UNKNOWN_NODE_TYPE
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|UNKNOWN_NODE_LEVEL
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * The owner document of this node.      */
specifier|private
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
specifier|private
name|NodeId
name|nodeId
decl_stmt|;
comment|/**      * The internal storage address of this node in the      * dom.dbx file, if known.      *      * @link #UNKNOWN_NODE_ADDRESS      */
specifier|private
name|long
name|internalAddress
init|=
name|StoredNode
operator|.
name|UNKNOWN_NODE_IMPL_ADDRESS
decl_stmt|;
comment|/**      * The type of this node (as defined by DOM), if known.      *      * @link #UNKNOWN_NODE_TYPE      */
specifier|private
name|short
name|nodeType
init|=
name|UNKNOWN_NODE_TYPE
decl_stmt|;
comment|/**      * The first {@link Match} object associated with this node.      * Match objects are used to track hits throughout query processing.      *      * Matches are stored as a linked list.      */
specifier|private
name|Match
name|match
init|=
literal|null
decl_stmt|;
specifier|private
name|ContextItem
name|context
init|=
literal|null
decl_stmt|;
specifier|private
name|QName
name|qname
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a new<code>NodeProxy</code> instance.      *      * @param doc    a<code>DocumentImpl</code> value      * @param nodeId a<code>NodeId</code> value      */
specifier|public
name|NodeProxy
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|NodeId
name|nodeId
parameter_list|)
block|{
name|this
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|,
name|UNKNOWN_NODE_TYPE
argument_list|,
name|StoredNode
operator|.
name|UNKNOWN_NODE_IMPL_ADDRESS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>NodeProxy</code> instance.      *      * @param doc     a<code>DocumentImpl</code> value      * @param nodeId  a<code>NodeId</code> value      * @param address a<code>long</code> value      */
specifier|public
name|NodeProxy
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|NodeId
name|nodeId
parameter_list|,
specifier|final
name|long
name|address
parameter_list|)
block|{
name|this
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|,
name|UNKNOWN_NODE_TYPE
argument_list|,
name|address
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>NodeProxy</code> instance.      *      * @param doc      a<code>DocumentImpl</code> value      * @param nodeId   a<code>NodeId</code> value      * @param nodeType a<code>short</code> value      */
specifier|public
name|NodeProxy
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|NodeId
name|nodeId
parameter_list|,
specifier|final
name|short
name|nodeType
parameter_list|)
block|{
name|this
argument_list|(
name|doc
argument_list|,
name|nodeId
argument_list|,
name|nodeType
argument_list|,
name|StoredNode
operator|.
name|UNKNOWN_NODE_IMPL_ADDRESS
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>NodeProxy</code> instance.      *      * @param doc      a<code>DocumentImpl</code> value      * @param nodeId   a<code>NodeId</code> value      * @param nodeType a<code>short</code> value      * @param address  a<code>long</code> value      */
specifier|public
name|NodeProxy
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|NodeId
name|nodeId
parameter_list|,
specifier|final
name|short
name|nodeType
parameter_list|,
specifier|final
name|long
name|address
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|doc
expr_stmt|;
name|this
operator|.
name|nodeType
operator|=
name|nodeType
expr_stmt|;
name|this
operator|.
name|internalAddress
operator|=
name|address
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|nodeId
expr_stmt|;
block|}
specifier|public
name|void
name|update
parameter_list|(
specifier|final
name|ElementImpl
name|element
parameter_list|)
block|{
name|this
operator|.
name|doc
operator|=
name|element
operator|.
name|getOwnerDocument
argument_list|()
expr_stmt|;
name|this
operator|.
name|nodeType
operator|=
name|UNKNOWN_NODE_TYPE
expr_stmt|;
name|this
operator|.
name|internalAddress
operator|=
name|StoredNode
operator|.
name|UNKNOWN_NODE_IMPL_ADDRESS
expr_stmt|;
name|this
operator|.
name|nodeId
operator|=
name|element
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|match
operator|=
literal|null
expr_stmt|;
name|context
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Creates a new<code>NodeProxy</code> instance.      *      * @param n a<code>NodeHandle</code> value      */
specifier|public
name|NodeProxy
parameter_list|(
specifier|final
name|NodeHandle
name|n
parameter_list|)
block|{
name|this
argument_list|(
name|n
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|n
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|n
operator|.
name|getNodeType
argument_list|()
argument_list|,
name|n
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|NodeProxy
condition|)
block|{
name|this
operator|.
name|match
operator|=
operator|(
operator|(
name|NodeProxy
operator|)
name|n
operator|)
operator|.
name|match
expr_stmt|;
name|this
operator|.
name|context
operator|=
operator|(
operator|(
name|NodeProxy
operator|)
name|n
operator|)
operator|.
name|context
expr_stmt|;
block|}
block|}
comment|/**      * create a proxy to a document node      *      * @param doc a<code>DocumentImpl</code> value      */
specifier|public
name|NodeProxy
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|this
argument_list|(
name|doc
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|,
name|Node
operator|.
name|DOCUMENT_NODE
argument_list|,
name|StoredNode
operator|.
name|UNKNOWN_NODE_IMPL_ADDRESS
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setNodeId
parameter_list|(
specifier|final
name|NodeId
name|id
parameter_list|)
block|{
name|this
operator|.
name|nodeId
operator|=
name|id
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
name|nodeId
return|;
block|}
annotation|@
name|Override
specifier|public
name|QName
name|getQName
parameter_list|()
block|{
if|if
condition|(
name|qname
operator|==
literal|null
condition|)
block|{
name|getNode
argument_list|()
expr_stmt|;
block|}
return|return
name|qname
return|;
block|}
specifier|public
name|void
name|setQName
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getImplementationType
parameter_list|()
block|{
return|return
name|NodeValue
operator|.
name|PERSISTENT_NODE
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|copy
parameter_list|()
block|{
comment|// return this, because there's no other node in the set
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|tail
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
comment|/**      * The method<code>compareTo</code>      *      * @param other an<code>Object</code> value      * @return an<code>int</code> value      */
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|NodeProxy
operator|)
condition|)
block|{
comment|//We are always superior...
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
else|else
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|NodeProxy
operator|)
name|other
argument_list|)
return|;
block|}
block|}
comment|/**      * Ordering first according to document ID; then if equal      * according to node gid.      *      * @param other a<code>NodeProxy</code> value      * @return an<code>int</code> value      */
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|NodeProxy
name|other
parameter_list|)
block|{
specifier|final
name|int
name|diff
init|=
name|doc
operator|.
name|getDocId
argument_list|()
operator|-
name|other
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
decl_stmt|;
if|if
condition|(
name|diff
operator|!=
name|Constants
operator|.
name|EQUAL
condition|)
block|{
return|return
name|diff
return|;
block|}
else|else
block|{
return|return
name|nodeId
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|nodeId
argument_list|)
return|;
block|}
block|}
comment|/**      * The method<code>equals</code>      *      * @param other an<code>Object</code> value      * @return a<code>boolean</code> value      */
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|other
operator|instanceof
name|NodeProxy
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|NodeProxy
name|otherNode
init|=
operator|(
name|NodeProxy
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|otherNode
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|otherNode
operator|.
name|nodeId
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|NodeValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot compare persistent node with in-memory node"
argument_list|)
throw|;
block|}
specifier|final
name|NodeProxy
name|otherNode
init|=
operator|(
name|NodeProxy
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|otherNode
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|otherNode
operator|.
name|nodeId
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|before
parameter_list|(
specifier|final
name|NodeValue
name|other
parameter_list|,
specifier|final
name|boolean
name|isPreceding
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot compare persistent node with in-memory node"
argument_list|)
throw|;
block|}
specifier|final
name|NodeProxy
name|otherNode
init|=
operator|(
name|NodeProxy
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|otherNode
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|//Totally arbitrary
return|return
name|doc
operator|.
name|getDocId
argument_list|()
operator|<
name|otherNode
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
return|;
block|}
return|return
name|nodeId
operator|.
name|before
argument_list|(
name|otherNode
operator|.
name|nodeId
argument_list|,
name|isPreceding
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|after
parameter_list|(
specifier|final
name|NodeValue
name|other
parameter_list|,
specifier|final
name|boolean
name|isFollowing
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot compare persistent node with in-memory node"
argument_list|)
throw|;
block|}
specifier|final
name|NodeProxy
name|otherNode
init|=
operator|(
name|NodeProxy
operator|)
name|other
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|otherNode
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
comment|//Totally arbitrary
return|return
name|doc
operator|.
name|getDocId
argument_list|()
operator|>
name|otherNode
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
return|;
block|}
return|return
name|nodeId
operator|.
name|after
argument_list|(
name|otherNode
operator|.
name|nodeId
argument_list|,
name|isFollowing
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getOwnerDocument
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
comment|/**      * The method<code>isDocument</code>      *      * @return a<code>boolean</code> value      */
specifier|public
name|boolean
name|isDocument
parameter_list|()
block|{
return|return
name|nodeType
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
return|;
block|}
comment|/**      * Gets the node from the broker, i.e. fom the underlying file system      * Call this method<em>only</em> when necessary      * @see org.exist.xquery.value.NodeValue#getNode()      */
annotation|@
name|Override
specifier|public
name|Node
name|getNode
parameter_list|()
block|{
if|if
condition|(
name|isDocument
argument_list|()
condition|)
block|{
return|return
name|doc
return|;
block|}
else|else
block|{
specifier|final
name|NodeImpl
name|realNode
init|=
operator|(
name|NodeImpl
operator|)
name|doc
operator|.
name|getNode
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|realNode
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|nodeType
operator|=
name|realNode
operator|.
name|getNodeType
argument_list|()
expr_stmt|;
name|this
operator|.
name|qname
operator|=
name|realNode
operator|.
name|getQName
argument_list|()
expr_stmt|;
block|}
return|return
name|realNode
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|short
name|getNodeType
parameter_list|()
block|{
return|return
name|nodeType
return|;
block|}
comment|/**      * Sets the nodeType.      *      * @param nodeType The nodeType to set      */
specifier|public
name|void
name|setNodeType
parameter_list|(
specifier|final
name|short
name|nodeType
parameter_list|)
block|{
name|this
operator|.
name|nodeType
operator|=
name|nodeType
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getInternalAddress
parameter_list|()
block|{
return|return
name|internalAddress
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setInternalAddress
parameter_list|(
specifier|final
name|long
name|internalAddress
parameter_list|)
block|{
name|this
operator|.
name|internalAddress
operator|=
name|internalAddress
expr_stmt|;
block|}
specifier|public
name|void
name|setIndexType
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|internalAddress
operator|=
name|StorageAddress
operator|.
name|setIndexType
argument_list|(
name|internalAddress
argument_list|,
operator|(
name|short
operator|)
name|type
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIndexType
parameter_list|()
block|{
if|if
condition|(
name|internalAddress
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|Type
operator|.
name|ITEM
return|;
block|}
return|return
name|RangeIndexSpec
operator|.
name|indexTypeToXPath
argument_list|(
name|StorageAddress
operator|.
name|indexTypeFromPointer
argument_list|(
name|internalAddress
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setTrackMatches
parameter_list|(
name|boolean
name|track
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getTrackMatches
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|Match
name|getMatches
parameter_list|()
block|{
return|return
name|match
return|;
block|}
specifier|public
name|void
name|setMatches
parameter_list|(
specifier|final
name|Match
name|match
parameter_list|)
block|{
name|this
operator|.
name|match
operator|=
name|match
expr_stmt|;
block|}
specifier|public
name|void
name|addMatch
parameter_list|(
specifier|final
name|Match
name|m
parameter_list|)
block|{
if|if
condition|(
name|match
operator|==
literal|null
condition|)
block|{
name|match
operator|=
name|m
expr_stmt|;
name|match
operator|.
name|nextMatch
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|Match
name|next
init|=
name|match
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|matchEquals
argument_list|(
name|m
argument_list|)
condition|)
block|{
name|next
operator|.
name|mergeOffsets
argument_list|(
name|m
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|next
operator|.
name|nextMatch
operator|==
literal|null
condition|)
block|{
name|next
operator|.
name|nextMatch
operator|=
name|m
expr_stmt|;
break|break;
block|}
name|next
operator|=
name|next
operator|.
name|nextMatch
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addMatches
parameter_list|(
specifier|final
name|NodeProxy
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|==
name|this
condition|)
block|{
return|return;
block|}
name|Match
name|m
init|=
name|p
operator|.
name|getMatches
argument_list|()
decl_stmt|;
if|if
condition|(
name|Match
operator|.
name|matchListEquals
argument_list|(
name|m
argument_list|,
name|this
operator|.
name|match
argument_list|)
condition|)
block|{
return|return;
block|}
while|while
condition|(
name|m
operator|!=
literal|null
condition|)
block|{
name|addMatch
argument_list|(
name|m
operator|.
name|newCopy
argument_list|()
argument_list|)
expr_stmt|;
name|m
operator|=
name|m
operator|.
name|nextMatch
expr_stmt|;
block|}
block|}
comment|/**      * Add a node to the list of context nodes for this node.      *      * NodeProxy internally stores the context nodes of the XPath context, for which      * this node has been selected during a previous processing step.      *      * Since eXist tries to process many expressions in one, single processing step,      * the context information is required to resolve predicate expressions. For      * example, for an expression like //SCENE[SPEECH/SPEAKER='HAMLET'],      * we have to remember the SCENE nodes for which the equality expression      * in the predicate was true.  Thus, when evaluating the step SCENE[SPEECH], the      * SCENE nodes become context items of the SPEECH nodes and this context      * information is preserved through all following steps.      *      * To process the predicate expression, {@link org.exist.xquery.Predicate} will take the      * context nodes returned by the filter expression and compare them to its context      * node set.      */
annotation|@
name|Override
specifier|public
name|void
name|addContextNode
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|,
specifier|final
name|NodeValue
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
return|return;
block|}
specifier|final
name|NodeProxy
name|contextNode
init|=
operator|(
name|NodeProxy
operator|)
name|node
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|context
operator|=
operator|new
name|ContextItem
argument_list|(
name|contextId
argument_list|,
name|contextNode
argument_list|)
expr_stmt|;
return|return;
block|}
name|ContextItem
name|next
init|=
name|context
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|contextId
operator|==
name|next
operator|.
name|getContextId
argument_list|()
operator|&&
name|next
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeId
argument_list|()
operator|.
name|equals
argument_list|(
name|contextNode
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
comment|// Ignore duplicate context nodes
break|break;
block|}
if|if
condition|(
name|next
operator|.
name|getNextDirect
argument_list|()
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|==
name|context
condition|)
block|{
comment|// context items should not be shared between proxies,
comment|// but for performance reason, if there's only a single
comment|// context item, it will be shared. we thus have to create
comment|// a copy before appending a new item.
name|next
operator|=
operator|new
name|ContextItem
argument_list|(
name|next
operator|.
name|getContextId
argument_list|()
argument_list|,
name|next
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|=
name|next
expr_stmt|;
block|}
name|next
operator|.
name|setNextContextItem
argument_list|(
operator|new
name|ContextItem
argument_list|(
name|contextId
argument_list|,
name|contextNode
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|next
operator|=
name|next
operator|.
name|getNextDirect
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Add all context nodes from the other NodeProxy to the      * context of this NodeProxy.      *      * @param other NodePoxy to take context from      */
specifier|public
name|void
name|addContext
parameter_list|(
specifier|final
name|NodeProxy
name|other
parameter_list|)
block|{
name|ContextItem
name|next
init|=
name|other
operator|.
name|context
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|addContextNode
argument_list|(
name|next
operator|.
name|getContextId
argument_list|()
argument_list|,
name|next
operator|.
name|getNode
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|getNextDirect
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|copyContext
parameter_list|(
specifier|final
name|NodeProxy
name|node
parameter_list|)
block|{
name|deepCopyContext
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy the context items from the given node into this node.      * Context items are used to keep track of context nodes inside predicates.      *      * @param node a<code>NodeProxy</code> value      */
specifier|public
name|void
name|deepCopyContext
parameter_list|(
specifier|final
name|NodeProxy
name|node
parameter_list|)
block|{
name|context
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|context
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|node
operator|.
name|context
operator|.
name|getNextDirect
argument_list|()
operator|==
literal|null
condition|)
block|{
comment|// if there's a single context item, we just
comment|// copy a reference to it. addContextNode will take
comment|// care of this and create a copy before appending
comment|// a new item
name|context
operator|=
name|node
operator|.
name|context
expr_stmt|;
block|}
else|else
block|{
name|ContextItem
name|next
init|=
name|node
operator|.
name|context
decl_stmt|;
name|ContextItem
name|newContext
init|=
operator|new
name|ContextItem
argument_list|(
name|next
operator|.
name|getContextId
argument_list|()
argument_list|,
name|next
operator|.
name|getNode
argument_list|()
argument_list|)
decl_stmt|;
name|context
operator|=
name|newContext
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|getNextDirect
argument_list|()
expr_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|newContext
operator|.
name|setNextContextItem
argument_list|(
operator|new
name|ContextItem
argument_list|(
name|next
operator|.
name|getContextId
argument_list|()
argument_list|,
name|next
operator|.
name|getNode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|newContext
operator|=
name|newContext
operator|.
name|getNextDirect
argument_list|()
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|getNextDirect
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|deepCopyContext
parameter_list|(
specifier|final
name|NodeProxy
name|node
parameter_list|,
specifier|final
name|int
name|addContextId
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
block|{
name|deepCopyContext
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
name|addContextNode
argument_list|(
name|addContextId
argument_list|,
name|node
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>clearContext</code>      *      * @param contextId an<code>int</code> value      */
annotation|@
name|Override
specifier|public
name|void
name|clearContext
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|contextId
operator|==
name|Expression
operator|.
name|IGNORE_CONTEXT
condition|)
block|{
name|context
operator|=
literal|null
expr_stmt|;
return|return;
block|}
name|ContextItem
name|newContext
init|=
literal|null
decl_stmt|;
name|ContextItem
name|last
init|=
literal|null
decl_stmt|;
name|ContextItem
name|next
init|=
name|context
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|getContextId
argument_list|()
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|newContext
operator|==
literal|null
condition|)
block|{
name|newContext
operator|=
name|next
expr_stmt|;
block|}
else|else
block|{
name|last
operator|.
name|setNextContextItem
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
name|last
operator|=
name|next
expr_stmt|;
name|last
operator|.
name|setNextContextItem
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
name|next
operator|=
name|next
operator|.
name|getNextDirect
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|context
operator|=
name|newContext
expr_stmt|;
block|}
specifier|public
name|ContextItem
name|getContext
parameter_list|()
block|{
return|return
name|context
return|;
block|}
specifier|public
name|String
name|debugContext
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"Context for "
argument_list|)
operator|.
name|append
argument_list|(
name|nodeId
argument_list|)
operator|.
name|append
argument_list|(
literal|" [ "
argument_list|)
operator|.
name|append
argument_list|(
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"] : "
argument_list|)
expr_stmt|;
name|ContextItem
name|next
init|=
name|context
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|next
operator|.
name|getNode
argument_list|()
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|next
operator|.
name|getContextId
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|getNextDirect
argument_list|()
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|//	methods of interface Item
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|nodeType2XQuery
argument_list|(
name|nodeType
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|int
name|nodeType2XQuery
parameter_list|(
specifier|final
name|short
name|nodeType
parameter_list|)
block|{
switch|switch
condition|(
name|nodeType
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
comment|//TODO : return Type.DOCUMENT for some in-memory nodes :
comment|//http://sourceforge.net/tracker/index.php?func=detail&aid=1730690&group_id=17691&atid=117691
comment|//Ideally compute this when proxy is constructed
return|return
name|Type
operator|.
name|ELEMENT
return|;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
return|return
name|Type
operator|.
name|ATTRIBUTE
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
return|return
name|Type
operator|.
name|TEXT
return|;
case|case
name|Node
operator|.
name|PROCESSING_INSTRUCTION_NODE
case|:
return|return
name|Type
operator|.
name|PROCESSING_INSTRUCTION
return|;
case|case
name|Node
operator|.
name|COMMENT_NODE
case|:
return|return
name|Type
operator|.
name|COMMENT
return|;
case|case
name|Node
operator|.
name|DOCUMENT_NODE
case|:
return|return
name|Type
operator|.
name|DOCUMENT
return|;
comment|//(yet) unknown type : return generic
default|default:
return|return
name|Type
operator|.
name|NODE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPersistentSet
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeMoved
parameter_list|(
specifier|final
name|NodeId
name|oldNodeId
parameter_list|,
specifier|final
name|NodeHandle
name|newNode
parameter_list|)
block|{
if|if
condition|(
name|nodeId
operator|.
name|equals
argument_list|(
name|oldNodeId
argument_list|)
condition|)
block|{
comment|// update myself
name|nodeId
operator|=
name|newNode
operator|.
name|getNodeId
argument_list|()
expr_stmt|;
name|internalAddress
operator|=
name|newNode
operator|.
name|getInternalAddress
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|toSequence
parameter_list|()
block|{
return|return
name|this
return|;
block|}
specifier|public
name|String
name|getNodeValue
parameter_list|()
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|doc
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getBroker
argument_list|()
init|)
block|{
if|if
condition|(
name|isDocument
argument_list|()
condition|)
block|{
specifier|final
name|Element
name|e
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|instanceof
name|NodeProxy
condition|)
block|{
return|return
name|broker
operator|.
name|getNodeValue
argument_list|(
operator|(
operator|(
name|StoredNode
operator|)
name|e
operator|)
operator|.
name|extract
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
if|else if
condition|(
name|e
operator|!=
literal|null
condition|)
block|{
return|return
name|broker
operator|.
name|getNodeValue
argument_list|(
operator|(
name|ElementImpl
operator|)
name|e
argument_list|,
literal|false
argument_list|)
return|;
block|}
else|else
comment|// probably a binary resource
block|{
return|return
literal|""
return|;
block|}
block|}
else|else
block|{
return|return
name|broker
operator|.
name|getNodeValue
argument_list|(
name|this
operator|.
name|asStoredNode
argument_list|()
argument_list|,
literal|false
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
comment|//TODO : raise an exception here ! -pb
block|}
return|return
literal|""
return|;
block|}
specifier|public
name|String
name|getNodeValueSeparated
parameter_list|()
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|doc
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getBroker
argument_list|()
init|)
block|{
return|return
name|broker
operator|.
name|getNodeValue
argument_list|(
name|asStoredNode
argument_list|()
argument_list|,
literal|true
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
comment|//TODO : raise an exception here !
block|}
return|return
literal|""
return|;
block|}
comment|//TODO this should be improved. Consider an interface that contains just the
comment|// getters from INodeHandle and persistent.NodeHandle
specifier|public
name|StoredNode
name|asStoredNode
parameter_list|()
block|{
return|return
operator|new
name|StoredNode
argument_list|(
name|this
operator|.
name|getNodeType
argument_list|()
argument_list|,
name|this
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|this
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|this
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
block|{         }
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
return|return
name|getNodeValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|convertTo
parameter_list|(
specifier|final
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|UntypedAtomicValue
operator|.
name|convertTo
argument_list|(
name|getNodeValue
argument_list|()
argument_list|,
name|requiredType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|atomize
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
operator|new
name|UntypedAtomicValue
argument_list|(
name|getNodeValue
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|toSAX
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|ContentHandler
name|handler
parameter_list|,
specifier|final
name|Properties
name|properties
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|handler
operator|instanceof
name|LexicalHandler
condition|)
block|{
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|handler
argument_list|,
operator|(
name|LexicalHandler
operator|)
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|handler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|toSAX
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyTo
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentBuilderReceiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
name|NodeImpl
name|node
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|nodeType
operator|<
literal|0
condition|)
block|{
name|node
operator|=
operator|(
name|NodeImpl
operator|)
name|getNode
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nodeType
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
specifier|final
name|AttrImpl
name|attr
init|=
operator|(
name|node
operator|==
literal|null
condition|?
operator|(
name|AttrImpl
operator|)
name|getNode
argument_list|()
else|:
operator|(
name|AttrImpl
operator|)
name|node
operator|)
decl_stmt|;
name|receiver
operator|.
name|attribute
argument_list|(
name|attr
operator|.
name|getQName
argument_list|()
argument_list|,
name|attr
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|receiver
operator|.
name|addReferenceNode
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|conversionPreference
parameter_list|(
specifier|final
name|Class
name|javaClass
parameter_list|)
block|{
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|NodeProxy
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|else if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|Node
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|String
operator|.
name|class
operator|||
name|javaClass
operator|==
name|CharSequence
operator|.
name|class
condition|)
block|{
return|return
literal|2
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Character
operator|.
name|class
operator|||
name|javaClass
operator|==
name|char
operator|.
name|class
condition|)
block|{
return|return
literal|2
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Double
operator|.
name|class
operator|||
name|javaClass
operator|==
name|double
operator|.
name|class
condition|)
block|{
return|return
literal|10
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Float
operator|.
name|class
operator|||
name|javaClass
operator|==
name|float
operator|.
name|class
condition|)
block|{
return|return
literal|11
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Long
operator|.
name|class
operator|||
name|javaClass
operator|==
name|long
operator|.
name|class
condition|)
block|{
return|return
literal|12
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Integer
operator|.
name|class
operator|||
name|javaClass
operator|==
name|int
operator|.
name|class
condition|)
block|{
return|return
literal|13
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Short
operator|.
name|class
operator|||
name|javaClass
operator|==
name|short
operator|.
name|class
condition|)
block|{
return|return
literal|14
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Byte
operator|.
name|class
operator|||
name|javaClass
operator|==
name|byte
operator|.
name|class
condition|)
block|{
return|return
literal|15
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Boolean
operator|.
name|class
operator|||
name|javaClass
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
return|return
literal|16
return|;
block|}
if|else if
condition|(
name|javaClass
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
literal|20
return|;
block|}
else|else
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|toJavaObject
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|NodeProxy
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
if|else if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|Node
operator|.
name|class
argument_list|)
operator|||
name|target
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|getNode
argument_list|()
return|;
block|}
else|else
block|{
specifier|final
name|StringValue
name|v
init|=
operator|new
name|StringValue
argument_list|(
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|v
operator|.
name|toJavaObject
argument_list|(
name|target
argument_list|)
return|;
block|}
block|}
comment|/*      * Methods of interface Sequence:      */
annotation|@
name|Override
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
name|Cardinality
operator|.
name|EXACTLY_ONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCached
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setIsCached
parameter_list|(
specifier|final
name|boolean
name|cached
parameter_list|)
block|{
comment|//TODO : return something useful ? -pb
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|toNodeSet
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|MemoryNodeSet
name|toMemNodeSet
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|effectiveBooleanValue
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDuplicates
parameter_list|()
block|{
comment|// single node: no duplicates
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSelfAsContext
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|)
block|{
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
comment|/* -----------------------------------------------*      * Methods of class NodeSet      * -----------------------------------------------*/
annotation|@
name|Override
specifier|public
name|NodeSetIterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|SingleNodeIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
block|{
return|return
operator|new
name|SingleNodeIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
block|{
return|return
operator|new
name|SingleNodeIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|proxy
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|nodeId
operator|.
name|equals
argument_list|(
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAll
parameter_list|(
specifier|final
name|NodeSet
name|other
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOne
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasMany
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Item
name|item
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|,
specifier|final
name|int
name|sizeHint
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAll
parameter_list|(
specifier|final
name|Sequence
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
comment|//TODO : how to delegate to the real node implementation's getLength() ?
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getItemCountLong
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|item
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>
literal|0
condition|?
literal|null
else|:
name|getNode
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Item
name|itemAt
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>
literal|0
condition|?
literal|null
else|:
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>
literal|0
condition|?
literal|null
else|:
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|NodeProxy
name|p
parameter_list|)
block|{
return|return
name|contains
argument_list|(
name|p
argument_list|)
condition|?
name|this
else|:
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|get
parameter_list|(
specifier|final
name|DocumentImpl
name|document
parameter_list|,
specifier|final
name|NodeId
name|nodeId
parameter_list|)
block|{
if|if
condition|(
operator|!
name|this
operator|.
name|nodeId
operator|.
name|equals
argument_list|(
name|nodeId
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|this
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
operator|!=
name|document
operator|.
name|getDocId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|,
specifier|final
name|boolean
name|directParent
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|int
name|level
parameter_list|)
block|{
return|return
name|parentWithChild
argument_list|(
name|proxy
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|proxy
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|directParent
argument_list|,
name|includeSelf
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeProxy
name|parentWithChild
parameter_list|(
specifier|final
name|DocumentImpl
name|otherDoc
parameter_list|,
specifier|final
name|NodeId
name|otherId
parameter_list|,
specifier|final
name|boolean
name|directParent
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|)
block|{
if|if
condition|(
name|otherDoc
operator|.
name|getDocId
argument_list|()
operator|!=
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|else if
condition|(
name|includeSelf
operator|&&
name|otherId
operator|.
name|compareTo
argument_list|(
name|nodeId
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
else|else
block|{
name|NodeId
name|parentId
init|=
name|otherId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentId
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|parentId
operator|.
name|compareTo
argument_list|(
name|nodeId
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|this
return|;
block|}
if|else if
condition|(
name|directParent
condition|)
block|{
return|return
literal|null
return|;
block|}
name|parentId
operator|=
name|parentId
operator|.
name|getParentId
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|getContextNodes
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|)
block|{
specifier|final
name|NewArrayNodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|ContextItem
name|contextNode
init|=
name|getContext
argument_list|()
decl_stmt|;
while|while
condition|(
name|contextNode
operator|!=
literal|null
condition|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
name|contextNode
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|p
operator|.
name|addMatches
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|contains
argument_list|(
name|p
argument_list|)
condition|)
block|{
comment|//TODO : why isn't "this" involved here ? -pb
if|if
condition|(
name|contextId
operator|!=
name|Expression
operator|.
name|NO_CONTEXT_ID
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|contextNode
operator|=
name|contextNode
operator|.
name|getNextDirect
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getState
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChanged
parameter_list|(
specifier|final
name|int
name|previousState
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getSizeHint
parameter_list|(
specifier|final
name|DocumentImpl
name|document
parameter_list|)
block|{
if|if
condition|(
name|document
operator|.
name|getDocId
argument_list|()
operator|==
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
return|return
literal|1
return|;
block|}
else|else
block|{
return|return
name|Constants
operator|.
name|NO_SIZE_HINT
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DocumentSet
name|getDocumentSet
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|getCollectionIterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|Collection
argument_list|>
argument_list|()
block|{
name|boolean
name|hasNext
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Collection
name|next
parameter_list|()
block|{
name|hasNext
operator|=
literal|false
expr_stmt|;
return|return
name|NodeProxy
operator|.
name|this
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"Remove is not implemented for NodeProxt#getCollectionIterator"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|intersection
parameter_list|(
specifier|final
name|NodeSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
else|else
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|deepIntersection
parameter_list|(
specifier|final
name|NodeSet
name|other
parameter_list|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
name|other
operator|.
name|parentWithChild
argument_list|(
name|this
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|UNKNOWN_NODE_LEVEL
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|null
condition|)
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
if|else if
condition|(
operator|!
name|nodeId
operator|.
name|equals
argument_list|(
name|p
operator|.
name|nodeId
argument_list|)
condition|)
block|{
name|p
operator|.
name|addMatches
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
name|p
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|union
parameter_list|(
specifier|final
name|NodeSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|this
return|;
block|}
specifier|final
name|NewArrayNodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|except
parameter_list|(
specifier|final
name|NodeSet
name|other
parameter_list|)
block|{
return|return
name|other
operator|.
name|contains
argument_list|(
name|this
argument_list|)
condition|?
name|NodeSet
operator|.
name|EMPTY_SET
else|:
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|filterDocuments
parameter_list|(
specifier|final
name|NodeSet
name|otherSet
parameter_list|)
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|otherSet
operator|.
name|getDocumentSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|docs
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|this
return|;
block|}
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProcessInReverseOrder
parameter_list|(
specifier|final
name|boolean
name|inReverseOrder
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getProcessInReverseOrder
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|getParents
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|)
block|{
specifier|final
name|NodeId
name|pid
init|=
name|nodeId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|pid
operator|==
literal|null
operator|||
name|pid
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
specifier|final
name|NodeProxy
name|parent
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|pid
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextId
operator|!=
name|Expression
operator|.
name|NO_CONTEXT_ID
condition|)
block|{
name|parent
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|copyContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|addMatches
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|parent
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|getAncestors
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|)
block|{
specifier|final
name|NodeSet
name|ancestors
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|includeSelf
condition|)
block|{
name|ancestors
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|parentID
init|=
name|nodeId
operator|.
name|getParentId
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentID
operator|!=
literal|null
condition|)
block|{
specifier|final
name|NodeProxy
name|parent
init|=
operator|new
name|NodeProxy
argument_list|(
name|getOwnerDocument
argument_list|()
argument_list|,
name|parentID
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextId
operator|!=
name|Expression
operator|.
name|NO_CONTEXT_ID
condition|)
block|{
name|parent
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parent
operator|.
name|copyContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|parent
operator|.
name|addMatches
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ancestors
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|parentID
operator|=
name|parentID
operator|.
name|getParentId
argument_list|()
expr_stmt|;
block|}
return|return
name|ancestors
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectParentChild
parameter_list|(
specifier|final
name|NodeSet
name|al
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
block|{
return|return
name|selectParentChild
argument_list|(
name|al
argument_list|,
name|mode
argument_list|,
name|Expression
operator|.
name|NO_CONTEXT_ID
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectParentChild
parameter_list|(
specifier|final
name|NodeSet
name|al
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
return|return
name|NodeSetHelper
operator|.
name|selectParentChild
argument_list|(
name|this
argument_list|,
name|al
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchParentChild
parameter_list|(
specifier|final
name|NodeSet
name|al
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
return|return
name|NodeSetHelper
operator|.
name|matchParentChild
argument_list|(
name|this
argument_list|,
name|al
argument_list|,
name|mode
argument_list|,
name|contextId
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.dom.persistent.NodeSet#selectAncestors(org.exist.dom.persistent.NodeSet, boolean, int)      */
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectAncestors
parameter_list|(
specifier|final
name|NodeSet
name|al
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
return|return
name|NodeSetHelper
operator|.
name|selectAncestors
argument_list|(
name|this
argument_list|,
name|al
argument_list|,
name|includeSelf
argument_list|,
name|contextId
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|matchAncestors
parameter_list|(
specifier|final
name|NodeSet
name|al
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
return|return
name|NodeSetHelper
operator|.
name|matchAncestors
argument_list|(
name|this
argument_list|,
name|al
argument_list|,
name|includeSelf
argument_list|,
name|contextId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectPrecedingSiblings
parameter_list|(
specifier|final
name|NodeSet
name|siblings
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
return|return
name|NodeSetHelper
operator|.
name|selectPrecedingSiblings
argument_list|(
name|this
argument_list|,
name|siblings
argument_list|,
name|contextId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectFollowingSiblings
parameter_list|(
specifier|final
name|NodeSet
name|siblings
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
return|return
name|NodeSetHelper
operator|.
name|selectFollowingSiblings
argument_list|(
name|this
argument_list|,
name|siblings
argument_list|,
name|contextId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectAncestorDescendant
parameter_list|(
specifier|final
name|NodeSet
name|al
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|,
specifier|final
name|boolean
name|copyMatches
parameter_list|)
block|{
return|return
name|NodeSetHelper
operator|.
name|selectAncestorDescendant
argument_list|(
name|this
argument_list|,
name|al
argument_list|,
name|mode
argument_list|,
name|includeSelf
argument_list|,
name|contextId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchAncestorDescendant
parameter_list|(
specifier|final
name|NodeSet
name|al
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|,
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|,
specifier|final
name|boolean
name|copyMatches
parameter_list|)
block|{
return|return
name|NodeSetHelper
operator|.
name|matchAncestorDescendant
argument_list|(
name|this
argument_list|,
name|al
argument_list|,
name|mode
argument_list|,
name|includeSelf
argument_list|,
name|contextId
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectPreceding
parameter_list|(
specifier|final
name|NodeSet
name|preceding
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|NodeSetHelper
operator|.
name|selectPreceding
argument_list|(
name|this
argument_list|,
name|preceding
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectPreceding
parameter_list|(
specifier|final
name|NodeSet
name|preceding
parameter_list|,
specifier|final
name|int
name|position
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
throws|,
name|UnsupportedOperationException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectFollowing
parameter_list|(
specifier|final
name|NodeSet
name|following
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|NodeSetHelper
operator|.
name|selectFollowing
argument_list|(
name|this
argument_list|,
name|following
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|selectFollowing
parameter_list|(
specifier|final
name|NodeSet
name|following
parameter_list|,
specifier|final
name|int
name|position
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|directSelectAttribute
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|nodeType
operator|!=
name|UNKNOWN_NODE_TYPE
operator|&&
name|nodeType
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
try|try
block|{
name|NewArrayNodeSet
name|result
init|=
literal|null
decl_stmt|;
specifier|final
name|IEmbeddedXMLStreamReader
name|reader
init|=
name|broker
operator|.
name|getXMLStreamReader
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
specifier|final
name|int
name|attrs
init|=
name|reader
operator|.
name|getAttributeCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
condition|;
name|i
operator|++
control|)
block|{
name|status
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|XMLStreamReader
operator|.
name|ATTRIBUTE
condition|)
block|{
break|break;
block|}
specifier|final
name|AttrImpl
name|attr
init|=
operator|(
name|AttrImpl
operator|)
name|reader
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|attr
argument_list|)
condition|)
block|{
specifier|final
name|NodeProxy
name|child
init|=
operator|new
name|NodeProxy
argument_list|(
name|attr
argument_list|)
decl_stmt|;
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|child
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|child
operator|.
name|copyContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
return|return
name|child
return|;
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
operator|new
name|NewArrayNodeSet
argument_list|()
expr_stmt|;
block|}
name|result
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
operator|==
literal|null
condition|?
name|NodeSet
operator|.
name|EMPTY_SET
else|:
name|result
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|NodeSet
name|directSelectChild
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|nodeType
operator|!=
name|UNKNOWN_NODE_TYPE
operator|&&
name|nodeType
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
specifier|final
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
specifier|final
name|NewArrayNodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|IStoredNode
argument_list|<
name|?
argument_list|>
name|child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|=
operator|(
name|IStoredNode
argument_list|<
name|?
argument_list|>
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|child
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|child
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|copyContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|addMatches
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|nodeId
operator|==
name|NodeId
operator|.
name|DOCUMENT_NODE
condition|)
block|{
return|return
literal|"Document node for "
operator|+
name|doc
operator|.
name|getDocId
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|doc
operator|.
name|getNode
argument_list|(
name|nodeId
argument_list|)
operator|.
name|getNodeName
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
class|class
name|SingleNodeIterator
implements|implements
name|NodeSetIterator
implements|,
name|SequenceIterator
block|{
specifier|private
name|boolean
name|hasNext
init|=
literal|true
decl_stmt|;
specifier|private
name|NodeProxy
name|node
decl_stmt|;
specifier|public
name|SingleNodeIterator
parameter_list|(
specifier|final
name|NodeProxy
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|hasNext
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|NodeProxy
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
else|else
block|{
name|hasNext
operator|=
literal|false
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|long
name|skippable
parameter_list|()
block|{
if|if
condition|(
name|hasNext
condition|)
block|{
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
specifier|final
name|long
name|n
parameter_list|)
block|{
specifier|final
name|long
name|skip
init|=
name|Math
operator|.
name|min
argument_list|(
name|n
argument_list|,
name|hasNext
condition|?
literal|1
else|:
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|skip
operator|==
literal|1
condition|)
block|{
name|hasNext
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|skip
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|NodeProxy
name|peekNode
parameter_list|()
block|{
return|return
name|node
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove is not implemented for SingleNodeIterator"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Item
name|nextItem
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
name|hasNext
operator|=
literal|false
expr_stmt|;
return|return
name|node
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|setPosition
parameter_list|(
specifier|final
name|NodeProxy
name|proxy
parameter_list|)
block|{
name|node
operator|=
name|proxy
expr_stmt|;
name|hasNext
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|/**      * *********************************************      * Methods of MutableDocumentSet      * **********************************************      */
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|getDocumentIterator
parameter_list|()
block|{
return|return
operator|new
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
argument_list|()
block|{
specifier|private
name|boolean
name|hasMore
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|hasMore
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|DocumentImpl
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasMore
condition|)
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|()
throw|;
block|}
else|else
block|{
name|hasMore
operator|=
literal|false
expr_stmt|;
return|return
name|doc
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"remove is not implemented for NodeProxy#getDocumentIterator"
argument_list|)
throw|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getDocumentCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
specifier|public
name|DocumentImpl
name|getDoc
parameter_list|()
block|{
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getDoc
parameter_list|(
specifier|final
name|int
name|docId
parameter_list|)
block|{
if|if
condition|(
name|docId
operator|==
name|this
operator|.
name|doc
operator|.
name|getDocId
argument_list|()
condition|)
block|{
return|return
name|this
operator|.
name|doc
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|XmldbURI
index|[]
name|getNames
parameter_list|()
block|{
return|return
operator|new
name|XmldbURI
index|[]
block|{
name|this
operator|.
name|doc
operator|.
name|getURI
argument_list|()
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentSet
name|intersection
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|DefaultDocumentSet
name|r
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|r
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
else|else
block|{
return|return
name|DefaultDocumentSet
operator|.
name|EMPTY_DOCUMENT_SET
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|getDocumentCount
argument_list|()
operator|>
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|other
operator|.
name|getDocumentCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|other
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|int
name|docId
parameter_list|)
block|{
return|return
name|doc
operator|.
name|getDocId
argument_list|()
operator|==
name|docId
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|docsToNodeSet
parameter_list|()
block|{
return|return
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ManagedLocks
argument_list|<
name|ManagedDocumentLock
argument_list|>
name|lock
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|boolean
name|exclusive
parameter_list|)
throws|throws
name|LockException
block|{
specifier|final
name|LockManager
name|lockManager
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
decl_stmt|;
specifier|final
name|ManagedDocumentLock
name|docLock
decl_stmt|;
if|if
condition|(
name|exclusive
condition|)
block|{
name|docLock
operator|=
name|lockManager
operator|.
name|acquireDocumentWriteLock
argument_list|(
name|doc
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|docLock
operator|=
name|lockManager
operator|.
name|acquireDocumentReadLock
argument_list|(
name|doc
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|ManagedLocks
argument_list|<>
argument_list|(
name|docLock
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equalDocs
parameter_list|(
specifier|final
name|DocumentSet
name|other
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|other
condition|)
block|{
comment|// we are comparing the same objects
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|other
operator|.
name|getDocumentCount
argument_list|()
operator|!=
literal|1
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|other
operator|.
name|contains
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|directMatchAttribute
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|nodeType
operator|!=
name|UNKNOWN_NODE_TYPE
operator|&&
name|nodeType
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
literal|false
return|;
block|}
try|try
block|{
specifier|final
name|IEmbeddedXMLStreamReader
name|reader
init|=
name|broker
operator|.
name|getXMLStreamReader
argument_list|(
name|this
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|int
name|status
init|=
name|reader
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
name|XMLStreamReader
operator|.
name|START_ELEMENT
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|int
name|attrs
init|=
name|reader
operator|.
name|getAttributeCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attrs
condition|;
name|i
operator|++
control|)
block|{
name|status
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|XMLStreamReader
operator|.
name|ATTRIBUTE
condition|)
block|{
break|break;
block|}
specifier|final
name|AttrImpl
name|attr
init|=
operator|(
name|AttrImpl
operator|)
name|reader
operator|.
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|attr
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|directMatchChild
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|,
specifier|final
name|int
name|contextId
parameter_list|)
block|{
if|if
condition|(
name|nodeType
operator|!=
name|UNKNOWN_NODE_TYPE
operator|&&
name|nodeType
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|getNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
if|if
condition|(
name|children
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|IStoredNode
argument_list|<
name|?
argument_list|>
name|child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|=
operator|(
name|IStoredNode
argument_list|<
name|?
argument_list|>
operator|)
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

