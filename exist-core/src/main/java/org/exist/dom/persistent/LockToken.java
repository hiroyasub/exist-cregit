begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|UUIDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Class representing a locktoken. Introduced for webDAV locking.  *  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|LockToken
block|{
comment|// Lock type
specifier|private
specifier|final
name|LockType
name|type
decl_stmt|;
comment|// Lock depth
specifier|private
specifier|final
name|LockDepth
name|depth
decl_stmt|;
comment|// Lock scope
specifier|private
specifier|final
name|LockScope
name|scope
decl_stmt|;
comment|// Timeout
specifier|public
specifier|static
specifier|final
name|long
name|LOCK_TIMEOUT_INFINITE
init|=
operator|-
literal|1L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|NO_LOCK_TIMEOUT
init|=
operator|-
literal|2L
decl_stmt|;
comment|// Write Locks and Null Resources
comment|// see http://www.webdav.org/specs/rfc2518.html#rfc.section.7.4
specifier|private
specifier|final
name|ResourceType
name|resourceType
decl_stmt|;
comment|//= ResourceType.NOT_SPECIFIED;
comment|// Other
annotation|@
name|Nullable
specifier|private
name|String
name|owner
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|timeout
init|=
operator|-
literal|1L
decl_stmt|;
annotation|@
name|Nullable
specifier|private
name|String
name|token
decl_stmt|;
specifier|public
name|LockToken
parameter_list|(
specifier|final
name|LockType
name|type
parameter_list|,
specifier|final
name|LockDepth
name|depth
parameter_list|,
specifier|final
name|LockScope
name|scope
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|owner
parameter_list|,
specifier|final
name|long
name|timeout
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|token
parameter_list|,
specifier|final
name|ResourceType
name|resourceType
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|depth
operator|=
name|depth
expr_stmt|;
name|this
operator|.
name|scope
operator|=
name|scope
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
name|this
operator|.
name|token
operator|=
name|token
expr_stmt|;
name|this
operator|.
name|resourceType
operator|=
name|resourceType
expr_stmt|;
block|}
comment|// Getters and setters
comment|/**      * Get type of lock.      */
specifier|public
name|LockType
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|LockDepth
name|getDepth
parameter_list|()
block|{
return|return
name|depth
return|;
block|}
specifier|public
name|LockScope
name|getScope
parameter_list|()
block|{
return|return
name|scope
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
specifier|public
name|void
name|setOwner
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|String
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
specifier|public
name|long
name|getTimeOut
parameter_list|()
block|{
return|return
name|timeout
return|;
block|}
specifier|public
name|void
name|setTimeOut
parameter_list|(
specifier|final
name|long
name|timeout
parameter_list|)
block|{
name|this
operator|.
name|timeout
operator|=
name|timeout
expr_stmt|;
block|}
annotation|@
name|Nullable
specifier|public
name|String
name|getOpaqueLockToken
parameter_list|()
block|{
return|return
name|token
return|;
block|}
specifier|public
name|ResourceType
name|getResourceType
parameter_list|()
block|{
return|return
name|resourceType
return|;
block|}
specifier|public
name|boolean
name|isNullResource
parameter_list|()
block|{
return|return
name|resourceType
operator|==
name|ResourceType
operator|.
name|NULL_RESOURCE
return|;
block|}
comment|// Create new UUID for token
specifier|public
name|void
name|createOpaqueLockToken
parameter_list|()
block|{
name|token
operator|=
name|LockToken
operator|.
name|generateUUID
argument_list|()
expr_stmt|;
block|}
comment|// Helper function.
specifier|public
specifier|static
name|String
name|generateUUID
parameter_list|()
block|{
return|return
name|UUIDGenerator
operator|.
name|getUUID
argument_list|()
return|;
block|}
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|VariableByteOutputStream
name|ostream
parameter_list|)
throws|throws
name|IOException
block|{
comment|// TODO(AR) these 3 bytes could be encoded into 1
name|ostream
operator|.
name|writeByte
argument_list|(
name|type
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeByte
argument_list|(
name|depth
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeByte
argument_list|(
name|scope
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeUTF
argument_list|(
name|owner
operator|!=
literal|null
condition|?
name|owner
else|:
literal|""
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeLong
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeUTF
argument_list|(
name|token
operator|!=
literal|null
condition|?
name|token
else|:
literal|""
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeByte
argument_list|(
name|resourceType
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|LockToken
name|read
parameter_list|(
specifier|final
name|VariableByteInput
name|istream
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|LockType
name|type
init|=
name|LockType
operator|.
name|valueOf
argument_list|(
name|istream
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LockDepth
name|depth
init|=
name|LockDepth
operator|.
name|valueOf
argument_list|(
name|istream
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|LockScope
name|scope
init|=
name|LockScope
operator|.
name|valueOf
argument_list|(
name|istream
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
name|String
name|owner
init|=
name|istream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
if|if
condition|(
name|owner
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|owner
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|long
name|timeout
init|=
name|istream
operator|.
name|readLong
argument_list|()
decl_stmt|;
name|String
name|token
init|=
name|istream
operator|.
name|readUTF
argument_list|()
decl_stmt|;
if|if
condition|(
name|token
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|token
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|ResourceType
name|resourceType
init|=
name|ResourceType
operator|.
name|valueOf
argument_list|(
name|istream
operator|.
name|readByte
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|LockToken
argument_list|(
name|type
argument_list|,
name|depth
argument_list|,
name|scope
argument_list|,
name|owner
argument_list|,
name|timeout
argument_list|,
name|token
argument_list|,
name|resourceType
argument_list|)
return|;
block|}
specifier|public
enum|enum
name|LockType
block|{
name|NONE
argument_list|(
operator|(
name|byte
operator|)
literal|0x0
argument_list|)
block|,
name|WRITE
argument_list|(
operator|(
name|byte
operator|)
literal|0x1
argument_list|)
block|,
name|NOT_SET
argument_list|(
operator|(
name|byte
operator|)
literal|0x4
argument_list|)
block|;
specifier|private
specifier|final
name|byte
name|value
decl_stmt|;
name|LockType
parameter_list|(
specifier|final
name|byte
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|byte
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|LockType
name|valueOf
parameter_list|(
specifier|final
name|byte
name|value
parameter_list|)
block|{
for|for
control|(
specifier|final
name|LockType
name|lockType
range|:
name|LockType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|lockType
operator|.
name|getValue
argument_list|()
operator|==
name|value
condition|)
block|{
return|return
name|lockType
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No LockType for value: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
specifier|public
enum|enum
name|LockDepth
block|{
name|ZERO
argument_list|(
operator|(
name|byte
operator|)
literal|0x8
argument_list|)
block|,
name|ONE
argument_list|(
operator|(
name|byte
operator|)
literal|0x9
argument_list|)
block|,
name|INFINITY
argument_list|(
operator|(
name|byte
operator|)
literal|0x10
argument_list|)
block|,
name|NOT_SET
argument_list|(
operator|(
name|byte
operator|)
literal|0x11
argument_list|)
block|;
specifier|private
specifier|final
name|byte
name|value
decl_stmt|;
name|LockDepth
parameter_list|(
specifier|final
name|byte
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|byte
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|LockDepth
name|valueOf
parameter_list|(
specifier|final
name|byte
name|value
parameter_list|)
block|{
for|for
control|(
specifier|final
name|LockDepth
name|lockDepth
range|:
name|LockDepth
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|lockDepth
operator|.
name|getValue
argument_list|()
operator|==
name|value
condition|)
block|{
return|return
name|lockDepth
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No LockDepth for value: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
specifier|public
enum|enum
name|LockScope
block|{
name|NONE
argument_list|(
operator|(
name|byte
operator|)
literal|0x16
argument_list|)
block|,
name|EXCLUSIVE
argument_list|(
operator|(
name|byte
operator|)
literal|0x17
argument_list|)
block|,
name|SHARED
argument_list|(
operator|(
name|byte
operator|)
literal|0x18
argument_list|)
block|,
name|NOT_SET
argument_list|(
operator|(
name|byte
operator|)
literal|0x19
argument_list|)
block|;
specifier|private
specifier|final
name|byte
name|value
decl_stmt|;
name|LockScope
parameter_list|(
specifier|final
name|byte
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|byte
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|LockScope
name|valueOf
parameter_list|(
specifier|final
name|byte
name|value
parameter_list|)
block|{
for|for
control|(
specifier|final
name|LockScope
name|lockScope
range|:
name|LockScope
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|lockScope
operator|.
name|getValue
argument_list|()
operator|==
name|value
condition|)
block|{
return|return
name|lockScope
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No LockScope for value: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
specifier|public
enum|enum
name|ResourceType
block|{
name|NOT_SPECIFIED
argument_list|(
operator|(
name|byte
operator|)
literal|0x0
argument_list|)
block|,
name|NULL_RESOURCE
argument_list|(
operator|(
name|byte
operator|)
literal|0x1
argument_list|)
block|;
specifier|private
specifier|final
name|byte
name|value
decl_stmt|;
name|ResourceType
parameter_list|(
specifier|final
name|byte
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|byte
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|static
name|ResourceType
name|valueOf
parameter_list|(
specifier|final
name|byte
name|value
parameter_list|)
block|{
for|for
control|(
specifier|final
name|ResourceType
name|resourceType
range|:
name|ResourceType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|resourceType
operator|.
name|getValue
argument_list|()
operator|==
name|value
condition|)
block|{
return|return
name|resourceType
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"No ResourceType for value: "
operator|+
name|value
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

