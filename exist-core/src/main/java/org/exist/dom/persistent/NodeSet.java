begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2014 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * @author wolf  */
end_comment

begin_interface
specifier|public
interface|interface
name|NodeSet
extends|extends
name|Sequence
extends|,
name|NodeList
extends|,
name|Iterable
argument_list|<
name|NodeProxy
argument_list|>
block|{
specifier|static
specifier|final
name|int
name|ANCESTOR
init|=
literal|0
decl_stmt|;
specifier|static
specifier|final
name|int
name|DESCENDANT
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|int
name|PRECEDING
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|int
name|FOLLOWING
init|=
literal|3
decl_stmt|;
comment|/**      * Constant representing an empty node set.      */
specifier|static
specifier|final
name|NodeSet
name|EMPTY_SET
init|=
operator|new
name|EmptyNodeSet
argument_list|()
decl_stmt|;
comment|/**      * Get a copy of this node set which can be modified.      *      * @return the copy      */
name|NodeSet
name|copy
parameter_list|()
function_decl|;
comment|/**      * Return an iterator on the nodes in this list. The iterator returns nodes      * according to the internal ordering of nodes (i.e. level first), not in document-      * order.      */
name|NodeSetIterator
name|iterator
parameter_list|()
function_decl|;
comment|/**      * Check if this node set contains a node matching the document and      * node-id of the given NodeProxy object.      *      * @param proxy to check against this node set      * @return true if the node set contains a node matching the document and node-id of the given NodeProxy object.      */
name|boolean
name|contains
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
function_decl|;
comment|/**      * Returns a DocumentSet containing all documents referenced      * in this node set.      * @return DocumentSet containing all documents referenced in this node set      */
name|DocumentSet
name|getDocumentSet
parameter_list|()
function_decl|;
comment|/**      * @return Return an iterator on all collections referenced by documents      * contained in this node set.      */
name|Iterator
argument_list|<
name|Collection
argument_list|>
name|getCollectionIterator
parameter_list|()
function_decl|;
comment|/**      * Add a new proxy object to the node set. Please note: node set      * implementations may allow duplicates.      *      * @param proxy proxy object to be added      */
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|)
function_decl|;
comment|/**      * Add a proxy object to the node set. The sizeHint parameter      * gives a hint about the number of items to be expected for the      * current document.      *      * @param proxy proxy object to be added      * @param sizeHint hint about the number of items      */
name|void
name|add
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|,
name|int
name|sizeHint
parameter_list|)
function_decl|;
comment|/**      * Add all nodes from the given node set.      *      * @param other node set to be added to this      */
name|void
name|addAll
parameter_list|(
name|NodeSet
name|other
parameter_list|)
function_decl|;
comment|/**      * Get the node at position pos within this node set.      *      * @param pos position of the node to be returned      * @return the node at position pos within this node set.      */
name|NodeProxy
name|get
parameter_list|(
name|int
name|pos
parameter_list|)
function_decl|;
comment|/**      * Get a node from this node set matching the document and node id of      * the given NodeProxy.      *      * @param p give NodeProxy      * @return node from this node set matching the document and node id of the given NodeProxy.      */
name|NodeProxy
name|get
parameter_list|(
name|NodeProxy
name|p
parameter_list|)
function_decl|;
name|NodeProxy
name|get
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|)
function_decl|;
comment|/**      * Check if any child nodes are found within this node set for a given      * set of potential parent nodes.      *      * If mode is {@link #DESCENDANT}, the returned node set will contain      * all child nodes found in this node set for each parent node. If mode is      * {@link #ANCESTOR}, the returned set will contain those parent nodes,      * for which children have been found.      *      * @param al   a node set containing potential parent nodes      * @param mode selection mode      * @return NodeSet of found nodes      */
name|NodeSet
name|selectParentChild
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|)
function_decl|;
comment|/**      * Check if any child nodes are found within this node set for a given      * set of potential parent nodes.      *      * If mode is {@link #DESCENDANT}, the returned node set will contain      * all child nodes found in this node set for each parent node. If mode is      * {@link #ANCESTOR}, the returned set will contain those parent nodes,      * for which children have been found.      *      * @param al        a node set containing potential parent nodes      * @param mode      selection mode      * @param contextId used to track context nodes when evaluating predicate      *                  expressions. If contextId != {@link org.exist.xquery.Expression#NO_CONTEXT_ID}, the current context      *                  will be added to each result of the of the selection.      * @return NodeSet of found childs      */
name|NodeSet
name|selectParentChild
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
function_decl|;
name|boolean
name|matchParentChild
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|int
name|contextId
parameter_list|)
function_decl|;
comment|/**      * Check if any descendant nodes are found within this node set for a given      * set of potential ancestor nodes.      *      * If mode is {@link #DESCENDANT}, the returned node set will contain      * all descendant nodes found in this node set for each ancestor. If mode is      * {@link #ANCESTOR}, the returned set will contain those ancestor nodes,      * for which descendants have been found.      *      * @param al          a node set containing potential parent nodes      * @param mode        selection mode      * @param includeSelf if true, check if the ancestor node itself is contained in      *                    the set of descendant nodes (descendant-or-self axis)      * @param contextId   used to track context nodes when evaluating predicate      *                    expressions. If contextId != {@link org.exist.xquery.Expression#NO_CONTEXT_ID}, the current context      *                    will be added to each result of the of the selection.      * @param copyMatches create copy of matches      * @return NodeSet of matching nodes      */
name|NodeSet
name|selectAncestorDescendant
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|,
name|boolean
name|copyMatches
parameter_list|)
function_decl|;
name|boolean
name|matchAncestorDescendant
parameter_list|(
name|NodeSet
name|al
parameter_list|,
name|int
name|mode
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|,
name|boolean
name|copyMatches
parameter_list|)
function_decl|;
comment|/**      * For a given set of potential ancestor nodes, return all ancestors      * having descendants in this node set.      *      * @param descendants node set containing potential ancestors      * @param includeSelf if true, check if the ancestor node itself is contained      *                    in this node set (ancestor-or-self axis)      * @param contextId   used to track context nodes when evaluating predicate      *                    expressions. If contextId != {@link org.exist.xquery.Expression#NO_CONTEXT_ID}, the current context      *                    will be added to each result of the of the selection.      * @return NodeSet of matching nodes      */
name|NodeSet
name|selectAncestors
parameter_list|(
name|NodeSet
name|descendants
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|contextId
parameter_list|)
function_decl|;
comment|/**      * Select all nodes from the passed node set, which      * are preceding siblings of the nodes in      * this set.      *      * @param siblings  a node set containing potential siblings      * @param contextId used to track context nodes when evaluating predicate      *                  expressions. If contextId != {@link org.exist.xquery.Expression#NO_CONTEXT_ID}, the current context      *                  will be added to each result of the of the selection.      * @return NodeSet of matching nodes      */
name|NodeSet
name|selectPrecedingSiblings
parameter_list|(
name|NodeSet
name|siblings
parameter_list|,
name|int
name|contextId
parameter_list|)
function_decl|;
comment|/**      * Select all nodes from the passed node set, which      * are following siblings of the nodes in      * this set.      *      * @param siblings  a node set containing potential siblings      * @param contextId used to track context nodes when evaluating predicate      *                  expressions. If contextId != {@link org.exist.xquery.Expression#NO_CONTEXT_ID}, the current context      *                  will be added to each result of the of the selection.      * @return NodeSet of matching nodes      */
name|NodeSet
name|selectFollowingSiblings
parameter_list|(
name|NodeSet
name|siblings
parameter_list|,
name|int
name|contextId
parameter_list|)
function_decl|;
name|NodeSet
name|selectPreceding
parameter_list|(
name|NodeSet
name|preceding
parameter_list|,
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
function_decl|;
name|NodeSet
name|selectPreceding
parameter_list|(
name|NodeSet
name|preceding
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
throws|,
name|UnsupportedOperationException
function_decl|;
name|NodeSet
name|selectFollowing
parameter_list|(
name|NodeSet
name|following
parameter_list|,
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
function_decl|;
name|NodeSet
name|selectFollowing
parameter_list|(
name|NodeSet
name|following
parameter_list|,
name|int
name|position
parameter_list|,
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/**      * Check if the node identified by its node id has an ancestor contained in this node set      * and return the ancestor found.      *      * If directParent is true, only immediate ancestors (parents) are considered.      * Otherwise the method will call itself recursively for all the node's      * parents.      *      * If includeSelf is true, the method returns also true if      * the node itself is contained in the node set.      * @param directParent if true, only immediate ancestors (parents) are considered      * @param includeSelf if true, the method returns also true if the node itself is contained in the node set.      * @param doc the doc      * @param nodeId node identifier      * @return the ancestor found      *      */
name|NodeProxy
name|parentWithChild
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|NodeId
name|nodeId
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
function_decl|;
comment|/**      * Check if the given node has an ancestor contained in this node set      * and return the ancestor found.      *      * If directParent is true, only immediate ancestors (parents) are considered.      * Otherwise the method will call itself recursively for all the node's      * parents.      *      * If includeSelf is true, the method returns also true if      * the node itself is contained in the node set.      * @param proxy given node      * @param directParent if true, only immediate ancestors (parents) are considered.      * @param includeSelf is true, the method returns also true if the node itself is contained in the node set      * @param level node level      * @return the ancestor found in this node set      */
name|NodeProxy
name|parentWithChild
parameter_list|(
name|NodeProxy
name|proxy
parameter_list|,
name|boolean
name|directParent
parameter_list|,
name|boolean
name|includeSelf
parameter_list|,
name|int
name|level
parameter_list|)
function_decl|;
comment|/**      * Return a new node set containing the parent nodes of all nodes in the      * current set.      * @param contextId the context id      * @return a new node set containing the parent nodes of all nodes in the current set.      */
name|NodeSet
name|getParents
parameter_list|(
name|int
name|contextId
parameter_list|)
function_decl|;
name|NodeSet
name|getAncestors
parameter_list|(
name|int
name|contextId
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
function_decl|;
comment|/**      * Optimized method to select attributes. Use this if the context has just one or      * two nodes. Attributes will be directly looked up in the persistent DOM store.      *      * @param broker the eXistdb DBBRoker      * @param test      a node test      * @param contextId used to track context nodes when evaluating predicate      *                  expressions. If contextId != {@link org.exist.xquery.Expression#NO_CONTEXT_ID}, the current context      *                  will be added to each result of the of the selection.      * @return selected attributes      */
name|NodeSet
name|directSelectAttribute
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
name|test
parameter_list|,
name|int
name|contextId
parameter_list|)
function_decl|;
name|boolean
name|directMatchAttribute
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
name|test
parameter_list|,
name|int
name|contextId
parameter_list|)
function_decl|;
comment|/**      * If all nodes in this set have an index, returns the common      * supertype used to build the index, e.g. xs:integer or xs:string.      * If the nodes have different index types or no node has been indexed,      * returns {@link Type#ITEM}.      *      * @see org.exist.xquery.GeneralComparison      * @see org.exist.xquery.ValueComparison      * @return  the common supertype used to build the index      */
name|int
name|getIndexType
parameter_list|()
function_decl|;
comment|/**      * Get a hint about how many nodes in this node set belong to the      * specified document. This is just used for allocating new node sets.      * The information does not need to be exact. -1 is returned if the      * size cannot be determined (the default).      *      * @param doc specified document      * @return hint about how many nodes in this node set belong to the document      */
name|int
name|getSizeHint
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
function_decl|;
comment|/**      * Return a new node set, which represents the intersection of the current      * node set with the given node set.      *      * @param other to intersect with current node set      * @return intersection of this and the given node set      */
name|NodeSet
name|intersection
parameter_list|(
name|NodeSet
name|other
parameter_list|)
function_decl|;
comment|/**      * Return a new node set, containing all nodes in this node set that      * are contained or have descendants in the other node set.      *      * @param other to deep intersect with current node set      * @return  deep intersection of this and the given node set      */
name|NodeSet
name|deepIntersection
parameter_list|(
name|NodeSet
name|other
parameter_list|)
function_decl|;
comment|/**      * Return a new node set which represents the union of the      * current node set and the given node set.      *      * @param other to unify with current node set      * @return  union of this and the given node set       */
name|NodeSet
name|union
parameter_list|(
name|NodeSet
name|other
parameter_list|)
function_decl|;
comment|/**      * Return a new node set containing all nodes from this node set      * except those nodes which are also contained in the argument node set.      *      * @param other nodes to be not added to the returned node set      * @return node set containing all nodes from this node set except those nodes which are also contained      *  in the argument node set.      */
name|NodeSet
name|except
parameter_list|(
name|NodeSet
name|other
parameter_list|)
function_decl|;
comment|/**      * Create a new node set from this set containing only nodes in documents      * that are also contained in the argument set.      *      * @param otherSet set of nodes to filter for      * @return node set from this set containing only nodes in documents that are also contained in the argument set.      */
name|NodeSet
name|filterDocuments
parameter_list|(
name|NodeSet
name|otherSet
parameter_list|)
function_decl|;
name|void
name|setProcessInReverseOrder
parameter_list|(
name|boolean
name|inReverseOrder
parameter_list|)
function_decl|;
name|boolean
name|getProcessInReverseOrder
parameter_list|()
function_decl|;
comment|/**      * Returns all context nodes associated with the nodes in      * this node set.      *      * @param contextId used to track context nodes when evaluating predicate      *                  expressions. If contextId != {@link org.exist.xquery.Expression#NO_CONTEXT_ID}, the current context      *                  will be added to each result of the of the selection.      * @return all context nodes associated with the nodes in this node set.      */
name|NodeSet
name|getContextNodes
parameter_list|(
name|int
name|contextId
parameter_list|)
function_decl|;
name|boolean
name|getTrackMatches
parameter_list|()
function_decl|;
name|void
name|setTrackMatches
parameter_list|(
name|boolean
name|track
parameter_list|)
function_decl|;
block|}
end_interface

end_unit

