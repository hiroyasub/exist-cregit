begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2014 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|LockedCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
operator|.
name|IllegalQNameException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentFragmentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NodePath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|StorageAddress
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|EnsureContainerLocked
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|EnsureLocked
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLString
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|CDATASection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Comment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|EntityReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|ProcessingInstruction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Text
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
operator|.
name|Validity
operator|.
name|ILLEGAL_FORMAT
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
import|;
end_import

begin_comment
comment|/**  * Represents a persistent document object in the database;  * it can be an XML_FILE , a BINARY_FILE, or Xquery source code.  *  * @author<a href="mailto:wolfgang@exist-db.org">Wolfgang Meier</a>  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
specifier|public
class|class
name|DocumentImpl
extends|extends
name|NodeImpl
argument_list|<
name|DocumentImpl
argument_list|>
implements|implements
name|Resource
implements|,
name|Document
block|{
specifier|public
specifier|static
specifier|final
name|int
name|UNKNOWN_DOCUMENT_ID
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|XML_FILE
init|=
literal|0
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|byte
name|BINARY_FILE
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|LENGTH_DOCUMENT_ID
init|=
literal|4
decl_stmt|;
comment|//sizeof int
specifier|public
specifier|static
specifier|final
name|int
name|LENGTH_DOCUMENT_TYPE
init|=
literal|1
decl_stmt|;
comment|//sizeof byte
comment|//public static final byte DOCUMENT_NODE_SIGNATURE = 0x0F;
specifier|private
specifier|final
name|BrokerPool
name|pool
decl_stmt|;
comment|/**      * number of child nodes      */
specifier|private
name|int
name|children
init|=
literal|0
decl_stmt|;
specifier|private
name|long
index|[]
name|childAddress
init|=
literal|null
decl_stmt|;
comment|/**      * the collection this document belongs to      */
specifier|private
specifier|transient
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
comment|/**      * the document's id      */
specifier|private
specifier|final
name|int
name|docId
decl_stmt|;
comment|/**      * Just the document's file name      */
specifier|private
name|XmldbURI
name|fileURI
init|=
literal|null
decl_stmt|;
specifier|private
name|Permission
name|permissions
init|=
literal|null
decl_stmt|;
specifier|private
name|DocumentMetadata
name|metadata
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a new<code>DocumentImpl</code> instance.      *      * Package private - for testing!      *      * @param pool a<code>BrokerPool</code> instance representing the db      */
name|DocumentImpl
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|)
block|{
name|this
argument_list|(
name|pool
argument_list|,
literal|null
argument_list|,
name|docId
argument_list|,
literal|null
argument_list|,
name|PermissionFactory
operator|.
name|getDefaultResourcePermission
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new persistent Document instance.      *      * @param pool The broker pool      * @param collection The Collection which holds this document      * @param docId the id of the document      * @param fileURI The name of the document      */
specifier|public
name|DocumentImpl
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|XmldbURI
name|fileURI
parameter_list|)
block|{
name|this
argument_list|(
name|pool
argument_list|,
name|collection
argument_list|,
name|docId
argument_list|,
name|fileURI
argument_list|,
name|PermissionFactory
operator|.
name|getDefaultResourcePermission
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new persistent Document instance to replace an existing document instance.      *      * @param docId the id of the document      * @param prevDoc The previous Document object that we are overwriting      */
specifier|public
name|DocumentImpl
parameter_list|(
specifier|final
name|int
name|docId
parameter_list|,
specifier|final
name|DocumentImpl
name|prevDoc
parameter_list|)
block|{
name|this
argument_list|(
name|prevDoc
operator|.
name|pool
argument_list|,
name|prevDoc
operator|.
name|collection
argument_list|,
name|docId
argument_list|,
name|prevDoc
operator|.
name|fileURI
argument_list|,
name|prevDoc
operator|.
name|permissions
operator|.
name|copy
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new persistent Document instance to replace an existing document instance.      *      * @param pool The broker pool      * @param collection The Collection which holds this document      * @param docId the id of the document      * @param fileURI The name of the document      * @param permissions the permissions of the document      * @param children the number of children that the document has      * @param childAddress the addresses of the child nodes      * @param metadata the document metadata      */
specifier|public
name|DocumentImpl
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|int
name|docId
parameter_list|,
specifier|final
name|XmldbURI
name|fileURI
parameter_list|,
specifier|final
name|Permission
name|permissions
parameter_list|,
specifier|final
name|int
name|children
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|long
index|[]
name|childAddress
parameter_list|,
specifier|final
name|DocumentMetadata
name|metadata
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
comment|// NOTE: We must not keep a reference to a LockedCollection in the Document object!
name|this
operator|.
name|collection
operator|=
name|LockedCollection
operator|.
name|unwrapLocked
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|this
operator|.
name|docId
operator|=
name|docId
expr_stmt|;
name|this
operator|.
name|fileURI
operator|=
name|fileURI
expr_stmt|;
name|this
operator|.
name|permissions
operator|=
name|permissions
expr_stmt|;
name|this
operator|.
name|children
operator|=
name|children
expr_stmt|;
name|this
operator|.
name|childAddress
operator|=
name|childAddress
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|metadata
expr_stmt|;
comment|//inherit the group to the resource if current collection is setGid
if|if
condition|(
name|collection
operator|!=
literal|null
operator|&&
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetGid
argument_list|()
condition|)
block|{
try|try
block|{
name|this
operator|.
name|permissions
operator|.
name|setGroupFrom
argument_list|(
name|collection
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|pde
argument_list|)
throw|;
comment|//TODO improve
block|}
block|}
block|}
comment|//TODO document really should not hold a reference to the brokerpool
specifier|public
name|BrokerPool
name|getBrokerPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
comment|/************************************************      *      * Document metadata      *      ************************************************/
comment|/**      * The method<code>getCollection</code>      *      * @return a<code>Collection</code> value      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|Collection
name|getCollection
parameter_list|()
block|{
return|return
name|collection
return|;
block|}
comment|/**      * Set the Collection for the document      *      * @param collection The Collection that the document belongs too      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|public
name|void
name|setCollection
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|)
block|{
name|this
operator|.
name|collection
operator|=
name|collection
expr_stmt|;
block|}
comment|/**      * The method<code>getDocId</code>      *      * @return an<code>int</code> value      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|int
name|getDocId
parameter_list|()
block|{
return|return
name|docId
return|;
block|}
comment|/**      * Returns the type of this resource, either  {@link #XML_FILE} or      * {@link #BINARY_FILE}.      */
specifier|public
name|byte
name|getResourceType
parameter_list|()
block|{
return|return
name|XML_FILE
return|;
block|}
comment|/**      * The method<code>getFileURI</code>      *      * @return a<code>XmldbURI</code> value      */
comment|//@EnsureContainerLocked(mode=READ_LOCK)  // TODO(AR) temporarily we need to allow some unlocked access
specifier|public
name|XmldbURI
name|getFileURI
parameter_list|()
block|{
return|return
name|fileURI
return|;
block|}
comment|/**      * The method<code>setFileURI</code>      *      * @param fileURI a<code>XmldbURI</code> value      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|public
name|void
name|setFileURI
parameter_list|(
specifier|final
name|XmldbURI
name|fileURI
parameter_list|)
block|{
name|this
operator|.
name|fileURI
operator|=
name|fileURI
expr_stmt|;
block|}
comment|//@EnsureContainerLocked(mode=READ_LOCK)  // TODO(AR) temporarily we need to allow some unlocked access
annotation|@
name|Override
specifier|public
name|XmldbURI
name|getURI
parameter_list|()
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
return|return
name|fileURI
return|;
block|}
else|else
block|{
return|return
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|fileURI
argument_list|)
return|;
block|}
block|}
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|boolean
name|isCollectionConfig
parameter_list|()
block|{
return|return
name|fileURI
operator|.
name|endsWith
argument_list|(
name|CollectionConfiguration
operator|.
name|COLLECTION_CONFIG_SUFFIX_URI
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|Permission
name|getPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
comment|/**      * The method<code>setMode</code>      *      * @param perm a<code>Permission</code> value      * @deprecated This function is considered a security problem      * and should be removed, move code to copyOf or Constructor      */
annotation|@
name|Deprecated
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|public
name|void
name|setPermissions
parameter_list|(
specifier|final
name|Permission
name|perm
parameter_list|)
block|{
name|permissions
operator|=
name|perm
expr_stmt|;
block|}
comment|/**      * The method<code>setMetadata</code>      *      * @param meta a<code>DocumentMetadata</code> value      * @deprecated This function is considered a security problem      * and should be removed, move code to copyOf or Constructor      */
annotation|@
name|Deprecated
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|public
name|void
name|setMetadata
parameter_list|(
specifier|final
name|DocumentMetadata
name|meta
parameter_list|)
block|{
name|this
operator|.
name|metadata
operator|=
name|meta
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|DocumentMetadata
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
comment|/************************************************      *      * Persistent node methods      *      ************************************************/
comment|/**      * Copy the relevant internal fields from the specified document object.      * This is called by {@link Collection} when replacing a document.      *      * @param other    a<code>DocumentImpl</code> value      * @param prev if there was an existing document which we are replacing,      *     we will copy the mode, ACL, and birth time from the existing document.      */
specifier|public
name|void
name|copyOf
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|other
parameter_list|,
annotation|@
name|EnsureLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
annotation|@
name|Nullable
specifier|final
name|DocumentImpl
name|prev
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|copyOf
argument_list|(
name|broker
argument_list|,
name|other
argument_list|,
name|prev
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|prev
operator|.
name|getPermissions
argument_list|()
argument_list|,
name|prev
operator|.
name|getMetadata
argument_list|()
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy the relevant internal fields from the specified document object.      * This is called by {@link Collection} when replacing a document.      *      * @param other a<code>DocumentImpl</code> value      * @param prev if there was an existing document which we are replacing,      *     we will copy the mode, ACL, and birth time from the existing document.      */
specifier|public
name|void
name|copyOf
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|other
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Collection
operator|.
name|CollectionEntry
name|prev
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|copyOf
argument_list|(
name|broker
argument_list|,
name|other
argument_list|,
name|prev
operator|==
literal|null
condition|?
literal|null
else|:
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|prev
operator|.
name|getPermissions
argument_list|()
argument_list|,
name|prev
operator|.
name|getCreated
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy the relevant internal fields from the specified document object.      * This is called by {@link Collection} when replacing a document.      *      * @param other    a<code>DocumentImpl</code> value      * @param prev A tuple, containing the permissions and birth time of any      *     previous document that we are replacing; We will copy the mode, ACL,      *     and birth time from the existing document.      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|private
name|void
name|copyOf
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
annotation|@
name|EnsureLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|final
name|DocumentImpl
name|other
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Tuple2
argument_list|<
name|Permission
argument_list|,
name|Long
argument_list|>
name|prev
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|childAddress
operator|=
literal|null
expr_stmt|;
name|children
operator|=
literal|0
expr_stmt|;
name|metadata
operator|=
name|getMetadata
argument_list|()
expr_stmt|;
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
operator|new
name|DocumentMetadata
argument_list|()
expr_stmt|;
block|}
comment|//copy metadata
name|metadata
operator|.
name|copyOf
argument_list|(
name|other
operator|.
name|getMetadata
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|prev
operator|!=
literal|null
condition|)
block|{
comment|// replaced file should have same owner user:group as prev file
if|if
condition|(
name|permissions
operator|.
name|getGroup
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|prev
operator|.
name|_1
operator|.
name|getGroup
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|permissions
operator|.
name|setGroup
argument_list|(
name|prev
operator|.
name|get_1
argument_list|()
operator|.
name|getGroup
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|permissions
operator|.
name|getOwner
argument_list|()
operator|.
name|getId
argument_list|()
operator|!=
name|prev
operator|.
name|_1
operator|.
name|getOwner
argument_list|()
operator|.
name|getId
argument_list|()
condition|)
block|{
name|permissions
operator|.
name|setOwner
argument_list|(
name|prev
operator|.
name|get_1
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//copy mode and acl from prev file
name|copyModeAcl
argument_list|(
name|broker
argument_list|,
name|prev
operator|.
name|_1
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
comment|// set birth time to same as prev file
name|metadata
operator|.
name|setCreated
argument_list|(
name|prev
operator|.
name|_2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// copy mode and acl from source file
name|copyModeAcl
argument_list|(
name|broker
argument_list|,
name|other
operator|.
name|getPermissions
argument_list|()
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
comment|// set birth time to the current timestamp
name|metadata
operator|.
name|setCreated
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
block|}
comment|// always set mtime
name|metadata
operator|.
name|setLastModified
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
comment|// reset pageCount: will be updated during storage
name|metadata
operator|.
name|setPageCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copyModeAcl
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Permission
name|srcPermissions
parameter_list|,
specifier|final
name|Permission
name|destPermissions
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|destPermissions
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|srcPermissions
operator|.
name|getMode
argument_list|()
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|srcPermissions
operator|instanceof
name|SimpleACLPermission
operator|&&
name|destPermissions
operator|instanceof
name|SimpleACLPermission
condition|)
block|{
specifier|final
name|SimpleACLPermission
name|srcAclPermissions
init|=
operator|(
name|SimpleACLPermission
operator|)
name|srcPermissions
decl_stmt|;
specifier|final
name|SimpleACLPermission
name|destAclPermissions
init|=
operator|(
name|SimpleACLPermission
operator|)
name|destPermissions
decl_stmt|;
if|if
condition|(
operator|!
name|destAclPermissions
operator|.
name|equalsAcl
argument_list|(
name|srcAclPermissions
argument_list|)
condition|)
block|{
name|PermissionFactory
operator|.
name|chacl
argument_list|(
name|destAclPermissions
argument_list|,
name|newAcl
lambda|->
operator|(
operator|(
name|SimpleACLPermission
operator|)
name|newAcl
operator|)
operator|.
name|copyAclOf
argument_list|(
name|srcAclPermissions
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * The method<code>copyChildren</code>      *      * @param other a<code>DocumentImpl</code> value      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|public
name|void
name|copyChildren
parameter_list|(
annotation|@
name|EnsureLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|final
name|DocumentImpl
name|other
parameter_list|)
block|{
name|childAddress
operator|=
name|other
operator|.
name|childAddress
expr_stmt|;
name|children
operator|=
name|other
operator|.
name|children
expr_stmt|;
block|}
comment|/**      * The method<code>setUserLock</code>      *      * @param user an<code>User</code> value      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|public
name|void
name|setUserLock
parameter_list|(
specifier|final
name|Account
name|user
parameter_list|)
block|{
name|getMetadata
argument_list|()
operator|.
name|setUserLock
argument_list|(
name|user
operator|==
literal|null
condition|?
literal|0
else|:
name|user
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>getUserLock</code>      *      * @return an<code>User</code> value      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|Account
name|getUserLock
parameter_list|()
block|{
specifier|final
name|int
name|lockOwnerId
init|=
name|getMetadata
argument_list|()
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOwnerId
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|SecurityManager
name|secman
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
return|return
name|secman
operator|.
name|getAccount
argument_list|(
name|lockOwnerId
argument_list|)
return|;
block|}
comment|/**      * Returns the estimated size of the data in this document.      *      * As an estimation, the number of pages occupied by the document      * is multiplied with the current page size.      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
specifier|final
name|long
name|length
init|=
name|getMetadata
argument_list|()
operator|.
name|getPageCount
argument_list|()
operator|*
name|pool
operator|.
name|getPageSize
argument_list|()
decl_stmt|;
return|return
operator|(
name|length
operator|<
literal|0
operator|)
condition|?
literal|0
else|:
name|length
return|;
block|}
comment|/**      * The method<code>triggerDefrag</code>      */
specifier|public
name|void
name|triggerDefrag
parameter_list|()
block|{
name|int
name|fragmentationLimit
init|=
operator|-
literal|1
decl_stmt|;
specifier|final
name|Object
name|property
init|=
name|pool
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|DBBroker
operator|.
name|PROPERTY_XUPDATE_FRAGMENTATION_FACTOR
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|fragmentationLimit
operator|=
operator|(
operator|(
name|Integer
operator|)
name|property
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fragmentationLimit
operator|!=
operator|-
literal|1
condition|)
block|{
name|getMetadata
argument_list|()
operator|.
name|setSplitCount
argument_list|(
name|fragmentationLimit
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The method<code>getNode</code>      *      * @param nodeId a<code>NodeId</code> value      * @return a<code>Node</code> value      */
specifier|public
name|Node
name|getNode
parameter_list|(
specifier|final
name|NodeId
name|nodeId
parameter_list|)
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
return|return
name|broker
operator|.
name|objectWith
argument_list|(
name|this
argument_list|,
name|nodeId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while retrieving node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>getNode</code>      *      * @param p a<code>NodeProxy</code> value      * @return a<code>Node</code> value      */
specifier|public
name|Node
name|getNode
parameter_list|(
specifier|final
name|NodeProxy
name|p
parameter_list|)
block|{
if|if
condition|(
name|p
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
condition|)
block|{
return|return
name|getDocumentElement
argument_list|()
return|;
block|}
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
return|return
name|broker
operator|.
name|objectWith
argument_list|(
name|p
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error occurred while retrieving node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>resizeChildList</code>      */
specifier|private
name|void
name|resizeChildList
parameter_list|()
block|{
specifier|final
name|long
index|[]
name|newChildList
init|=
operator|new
name|long
index|[
name|children
index|]
decl_stmt|;
if|if
condition|(
name|childAddress
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|childAddress
argument_list|,
literal|0
argument_list|,
name|newChildList
argument_list|,
literal|0
argument_list|,
name|childAddress
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
name|childAddress
operator|=
name|newChildList
expr_stmt|;
block|}
comment|/**      * The method<code>appendChild</code>      *      * @param child a<code>NodeHandle</code> value      * @throws DOMException if an error occurs      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|public
name|void
name|appendChild
parameter_list|(
specifier|final
name|NodeHandle
name|child
parameter_list|)
throws|throws
name|DOMException
block|{
operator|++
name|children
expr_stmt|;
name|resizeChildList
argument_list|()
expr_stmt|;
name|childAddress
index|[
name|children
operator|-
literal|1
index|]
operator|=
name|child
operator|.
name|getInternalAddress
argument_list|()
expr_stmt|;
block|}
comment|/**      * The method<code>write</code>      *      * @param ostream a<code>VariableByteOutputStream</code> value      * @throws IOException if an error occurs      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|VariableByteOutputStream
name|ostream
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|ostream
operator|.
name|writeInt
argument_list|(
name|docId
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeUTF
argument_list|(
name|fileURI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|getPermissions
argument_list|()
operator|.
name|write
argument_list|(
name|ostream
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeInt
argument_list|(
name|children
argument_list|)
expr_stmt|;
if|if
condition|(
name|children
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|ostream
operator|.
name|writeInt
argument_list|(
name|StorageAddress
operator|.
name|pageFromPointer
argument_list|(
name|childAddress
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|writeShort
argument_list|(
name|StorageAddress
operator|.
name|tidFromPointer
argument_list|(
name|childAddress
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|getMetadata
argument_list|()
operator|.
name|write
argument_list|(
name|pool
operator|.
name|getSymbols
argument_list|()
argument_list|,
name|ostream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"io error while writing document data"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : raise exception ?
block|}
block|}
comment|/**      * Deserialize the document object from bytes.      *      * @param pool the database      * @param istream the byte stream to read      *      * @return the document object.      *      * @throws IOException  if an error occurs      */
specifier|public
specifier|static
name|DocumentImpl
name|read
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|VariableByteInput
name|istream
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|docId
init|=
name|istream
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|XmldbURI
name|fileURI
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
name|istream
operator|.
name|readUTF
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|PermissionFactory
operator|.
name|getDefaultResourcePermission
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
decl_stmt|;
name|permissions
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
specifier|final
name|int
name|children
init|=
name|istream
operator|.
name|readInt
argument_list|()
decl_stmt|;
specifier|final
name|long
name|childAddress
index|[]
init|=
operator|new
name|long
index|[
name|children
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
name|childAddress
index|[
name|i
index|]
operator|=
name|StorageAddress
operator|.
name|createPointer
argument_list|(
name|istream
operator|.
name|readInt
argument_list|()
argument_list|,
name|istream
operator|.
name|readShort
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|DocumentMetadata
name|metadata
init|=
operator|new
name|DocumentMetadata
argument_list|()
decl_stmt|;
name|metadata
operator|.
name|read
argument_list|(
name|pool
operator|.
name|getSymbols
argument_list|()
argument_list|,
name|istream
argument_list|)
expr_stmt|;
return|return
operator|new
name|DocumentImpl
argument_list|(
name|pool
argument_list|,
literal|null
argument_list|,
name|docId
argument_list|,
name|fileURI
argument_list|,
name|permissions
argument_list|,
name|children
argument_list|,
name|childAddress
argument_list|,
name|metadata
argument_list|)
return|;
block|}
comment|/**      * The method<code>compareTo</code>      *      * @param other an<code>DocumentImpl</code> value      * @return an<code>int</code> value      */
annotation|@
name|Override
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|int
name|compareTo
parameter_list|(
annotation|@
name|EnsureLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|final
name|DocumentImpl
name|other
parameter_list|)
block|{
specifier|final
name|long
name|otherId
init|=
name|other
operator|.
name|docId
decl_stmt|;
if|if
condition|(
name|otherId
operator|==
name|docId
condition|)
block|{
return|return
name|Constants
operator|.
name|EQUAL
return|;
block|}
if|else if
condition|(
name|docId
operator|<
name|otherId
condition|)
block|{
return|return
name|Constants
operator|.
name|INFERIOR
return|;
block|}
else|else
block|{
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|IStoredNode
name|updateChild
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Node
name|oldChild
parameter_list|,
specifier|final
name|Node
name|newChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
operator|!
operator|(
name|oldChild
operator|instanceof
name|StoredNode
operator|)
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"Node does not belong to this document"
argument_list|)
throw|;
block|}
specifier|final
name|IStoredNode
argument_list|<
name|?
argument_list|>
name|oldNode
init|=
operator|(
name|IStoredNode
argument_list|<
name|?
argument_list|>
operator|)
name|oldChild
decl_stmt|;
specifier|final
name|IStoredNode
argument_list|<
name|?
argument_list|>
name|newNode
init|=
operator|(
name|IStoredNode
argument_list|<
name|?
argument_list|>
operator|)
name|newChild
decl_stmt|;
specifier|final
name|IStoredNode
argument_list|<
name|?
argument_list|>
name|previousNode
init|=
operator|(
name|IStoredNode
argument_list|<
name|?
argument_list|>
operator|)
name|oldNode
operator|.
name|getPreviousSibling
argument_list|()
decl_stmt|;
if|if
condition|(
name|previousNode
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NOT_FOUND_ERR
argument_list|,
literal|"No previous sibling for the old child"
argument_list|)
throw|;
block|}
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
if|if
condition|(
name|oldChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
comment|// replace the document-element
comment|//TODO : be more precise in the type test -pb
if|if
condition|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_MODIFICATION_ERR
argument_list|,
literal|"A node replacing the document root needs to be an element"
argument_list|)
throw|;
block|}
name|broker
operator|.
name|removeNode
argument_list|(
name|transaction
argument_list|,
name|oldNode
argument_list|,
name|oldNode
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|endRemove
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|setNodeId
argument_list|(
name|oldNode
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|insertNodeAfter
argument_list|(
literal|null
argument_list|,
name|previousNode
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
specifier|final
name|NodePath
name|path
init|=
name|newNode
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|broker
operator|.
name|indexNode
argument_list|(
name|transaction
argument_list|,
name|newNode
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|broker
operator|.
name|endElement
argument_list|(
name|newNode
argument_list|,
name|path
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|broker
operator|.
name|removeNode
argument_list|(
name|transaction
argument_list|,
name|oldNode
argument_list|,
name|oldNode
operator|.
name|getPath
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|broker
operator|.
name|endRemove
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|newNode
operator|.
name|setNodeId
argument_list|(
name|oldNode
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|insertNodeAfter
argument_list|(
name|transaction
argument_list|,
name|previousNode
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while updating child node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : thow exception ?
block|}
return|return
name|newNode
return|;
block|}
annotation|@
name|Override
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|Node
name|getFirstChild
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
return|return
name|broker
operator|.
name|objectWith
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|,
name|childAddress
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while inserting node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ?
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|protected
name|NodeProxy
name|getFirstChildProxy
parameter_list|()
block|{
return|return
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|NodeId
operator|.
name|ROOT_NODE
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|childAddress
index|[
literal|0
index|]
argument_list|)
return|;
block|}
comment|/**      * The method<code>getFirstChildAddress</code>      *      * @return a<code>long</code> value      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|long
name|getFirstChildAddress
parameter_list|()
block|{
if|if
condition|(
name|children
operator|==
literal|0
condition|)
block|{
return|return
name|StoredNode
operator|.
name|UNKNOWN_NODE_IMPL_ADDRESS
return|;
block|}
return|return
name|childAddress
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChildNodes
parameter_list|()
block|{
return|return
name|children
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|NodeList
name|getChildNodes
parameter_list|()
block|{
specifier|final
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
name|list
init|=
operator|new
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeListImpl
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|child
init|=
name|broker
operator|.
name|objectWith
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|,
name|childAddress
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while retrieving child nodes: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
comment|/**      * The method<code>getPreviousSibling</code>      *      * @param node a<code>NodeHanle</code> value      * @return a<code>Node</code> value      */
specifier|protected
name|Node
name|getPreviousSibling
parameter_list|(
specifier|final
name|NodeHandle
name|node
parameter_list|)
block|{
specifier|final
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|NodeHandle
name|next
init|=
operator|(
name|NodeHandle
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|StorageAddress
operator|.
name|equals
argument_list|(
name|node
operator|.
name|getInternalAddress
argument_list|()
argument_list|,
name|next
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|i
operator|==
literal|0
condition|?
literal|null
else|:
name|cl
operator|.
name|item
argument_list|(
name|i
operator|-
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>getFollowingSibling</code>      *      * @param node a<code>NodeHandle</code> value      * @return a<code>Node</code> value      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|protected
name|Node
name|getFollowingSibling
parameter_list|(
specifier|final
name|NodeHandle
name|node
parameter_list|)
block|{
specifier|final
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|NodeHandle
name|next
init|=
operator|(
name|NodeHandle
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|StorageAddress
operator|.
name|equals
argument_list|(
name|node
argument_list|,
name|next
argument_list|)
condition|)
block|{
return|return
name|i
operator|==
name|children
operator|-
literal|1
condition|?
literal|null
else|:
name|cl
operator|.
name|item
argument_list|(
name|i
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>findElementsByTagName</code>      *      * @param root  a<code>NodeHandle</code> value      * @param qname a<code>QName</code> value      * @return a<code>NodeList</code> value      */
specifier|protected
name|NodeList
name|findElementsByTagName
parameter_list|(
specifier|final
name|NodeHandle
name|root
parameter_list|,
specifier|final
name|QName
name|qname
parameter_list|)
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
specifier|final
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|NewArrayNodeSet
name|contextSet
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|contextSet
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|root
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|root
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|scanByType
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|Constants
operator|.
name|DESCENDANT_AXIS
argument_list|,
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|qname
argument_list|)
argument_list|,
literal|false
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|Expression
operator|.
name|NO_CONTEXT_ID
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while finding elements: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
comment|/************************************************      *      * NodeImpl methods      *      ************************************************/
comment|/**      * The method<code>getDoctype</code>      *      * @return a<code>DocumentType</code> value      */
annotation|@
name|Override
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|DocumentType
name|getDoctype
parameter_list|()
block|{
return|return
name|getMetadata
argument_list|()
operator|.
name|getDocType
argument_list|()
return|;
block|}
comment|/**      * The method<code>setDocumentType</code>      *      * @param docType a<code>DocumentType</code> value      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|public
name|void
name|setDocumentType
parameter_list|(
specifier|final
name|DocumentType
name|docType
parameter_list|)
block|{
name|getMetadata
argument_list|()
operator|.
name|setDocType
argument_list|(
name|docType
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getOwnerDocument
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>setOwnerDocument</code>      *      * @param doc a<code>Document</code> value      */
specifier|public
name|void
name|setOwnerDocument
parameter_list|(
specifier|final
name|Document
name|doc
parameter_list|)
block|{
if|if
condition|(
name|doc
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Can't set owner document"
argument_list|)
throw|;
block|}
block|}
comment|/**      * The method<code>getQName</code>      *      * @return a<code>QName</code> value      */
annotation|@
name|Override
specifier|public
name|QName
name|getQName
parameter_list|()
block|{
return|return
name|QName
operator|.
name|DOCUMENT_QNAME
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setQName
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
comment|//do nothing
block|}
comment|/**      * The method<code>getNodeType</code>      *      * @return a<code>short</code> value      */
annotation|@
name|Override
specifier|public
name|short
name|getNodeType
parameter_list|()
block|{
return|return
name|Node
operator|.
name|DOCUMENT_NODE
return|;
block|}
comment|/**      * The method<code>getPreviousSibling</code>      *      * @return a<code>Node</code> value      */
annotation|@
name|Override
specifier|public
name|Node
name|getPreviousSibling
parameter_list|()
block|{
comment|//Documents don't have siblings
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>getNextSibling</code>      *      * @return a<code>Node</code> value      */
annotation|@
name|Override
specifier|public
name|Node
name|getNextSibling
parameter_list|()
block|{
comment|//Documents don't have siblings
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>createAttribute</code>      *      * @param name a<code>String</code> value      * @return an<code>Attr</code> value      * @throws DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Attr
name|createAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|QName
name|qname
decl_stmt|;
try|try
block|{
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalQNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
literal|"name is invalid"
argument_list|)
throw|;
block|}
comment|// check the QName is valid for use
if|if
condition|(
name|qname
operator|.
name|isValid
argument_list|(
literal|false
argument_list|)
operator|!=
name|QName
operator|.
name|Validity
operator|.
name|VALID
operator|.
name|val
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
literal|"name is invalid"
argument_list|)
throw|;
block|}
specifier|final
name|AttrImpl
name|attr
init|=
operator|new
name|AttrImpl
argument_list|(
name|qname
argument_list|,
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|attr
return|;
block|}
comment|/**      * The method<code>createAttributeNS</code>      *      * @param namespaceURI  a<code>String</code> value      * @param qualifiedName a<code>String</code> value      * @return an<code>Attr</code> value      * @throws DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Attr
name|createAttributeNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|QName
name|qname
decl_stmt|;
try|try
block|{
name|qname
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|namespaceURI
argument_list|,
name|qualifiedName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalQNameException
name|e
parameter_list|)
block|{
specifier|final
name|short
name|errCode
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValidity
argument_list|()
operator|==
name|ILLEGAL_FORMAT
operator|.
name|val
operator|||
operator|(
name|e
operator|.
name|getValidity
argument_list|()
operator|&
name|QName
operator|.
name|Validity
operator|.
name|INVALID_NAMESPACE
operator|.
name|val
operator|)
operator|==
name|QName
operator|.
name|Validity
operator|.
name|INVALID_NAMESPACE
operator|.
name|val
condition|)
block|{
name|errCode
operator|=
name|DOMException
operator|.
name|NAMESPACE_ERR
expr_stmt|;
block|}
else|else
block|{
name|errCode
operator|=
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
expr_stmt|;
block|}
throw|throw
operator|new
name|DOMException
argument_list|(
name|errCode
argument_list|,
literal|"qualified name is invalid"
argument_list|)
throw|;
block|}
comment|// check the QName is valid for use
specifier|final
name|byte
name|validity
init|=
name|qname
operator|.
name|isValid
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|validity
operator|&
name|QName
operator|.
name|Validity
operator|.
name|INVALID_LOCAL_PART
operator|.
name|val
operator|)
operator|==
name|QName
operator|.
name|Validity
operator|.
name|INVALID_LOCAL_PART
operator|.
name|val
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
literal|"qualified name is invalid"
argument_list|)
throw|;
block|}
if|else if
condition|(
operator|(
name|validity
operator|&
name|QName
operator|.
name|Validity
operator|.
name|INVALID_NAMESPACE
operator|.
name|val
operator|)
operator|==
name|QName
operator|.
name|Validity
operator|.
name|INVALID_NAMESPACE
operator|.
name|val
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NAMESPACE_ERR
argument_list|,
literal|"qualified name is invalid"
argument_list|)
throw|;
block|}
specifier|final
name|AttrImpl
name|attr
init|=
operator|new
name|AttrImpl
argument_list|(
name|qname
argument_list|,
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|attr
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|attr
return|;
block|}
comment|/**      * The method<code>createElement</code>      *      * @param tagName a<code>String</code> value      * @return an<code>Element</code> value      * @throws DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Element
name|createElement
parameter_list|(
specifier|final
name|String
name|tagName
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|QName
name|qname
decl_stmt|;
try|try
block|{
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|tagName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalQNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
literal|"name is invalid"
argument_list|)
throw|;
block|}
comment|// check the QName is valid for use
if|if
condition|(
name|qname
operator|.
name|isValid
argument_list|(
literal|false
argument_list|)
operator|!=
name|QName
operator|.
name|Validity
operator|.
name|VALID
operator|.
name|val
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
literal|"name is invalid"
argument_list|)
throw|;
block|}
specifier|final
name|ElementImpl
name|element
init|=
operator|new
name|ElementImpl
argument_list|(
name|qname
argument_list|,
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|element
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|element
return|;
block|}
comment|/**      * The method<code>createElementNS</code>      *      * @param namespaceURI  a<code>String</code> value      * @param qualifiedName a<code>String</code> value      * @return an<code>Element</code> value      * @throws DOMException if an error occurs      */
annotation|@
name|Override
specifier|public
name|Element
name|createElementNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|QName
name|qname
decl_stmt|;
try|try
block|{
name|qname
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|namespaceURI
argument_list|,
name|qualifiedName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalQNameException
name|e
parameter_list|)
block|{
specifier|final
name|short
name|errCode
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|getValidity
argument_list|()
operator|==
name|ILLEGAL_FORMAT
operator|.
name|val
operator|||
operator|(
name|e
operator|.
name|getValidity
argument_list|()
operator|&
name|QName
operator|.
name|Validity
operator|.
name|INVALID_NAMESPACE
operator|.
name|val
operator|)
operator|==
name|QName
operator|.
name|Validity
operator|.
name|INVALID_NAMESPACE
operator|.
name|val
condition|)
block|{
name|errCode
operator|=
name|DOMException
operator|.
name|NAMESPACE_ERR
expr_stmt|;
block|}
else|else
block|{
name|errCode
operator|=
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
expr_stmt|;
block|}
throw|throw
operator|new
name|DOMException
argument_list|(
name|errCode
argument_list|,
literal|"qualified name is invalid"
argument_list|)
throw|;
block|}
comment|// check the QName is valid for use
specifier|final
name|byte
name|validity
init|=
name|qname
operator|.
name|isValid
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|validity
operator|&
name|QName
operator|.
name|Validity
operator|.
name|INVALID_LOCAL_PART
operator|.
name|val
operator|)
operator|==
name|QName
operator|.
name|Validity
operator|.
name|INVALID_LOCAL_PART
operator|.
name|val
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
literal|"qualified name is invalid"
argument_list|)
throw|;
block|}
if|else if
condition|(
operator|(
name|validity
operator|&
name|QName
operator|.
name|Validity
operator|.
name|INVALID_NAMESPACE
operator|.
name|val
operator|)
operator|==
name|QName
operator|.
name|Validity
operator|.
name|INVALID_NAMESPACE
operator|.
name|val
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|NAMESPACE_ERR
argument_list|,
literal|"qualified name is invalid"
argument_list|)
throw|;
block|}
specifier|final
name|ElementImpl
name|element
init|=
operator|new
name|ElementImpl
argument_list|(
name|qname
argument_list|,
name|getBrokerPool
argument_list|()
operator|.
name|getSymbols
argument_list|()
argument_list|)
decl_stmt|;
name|element
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|element
return|;
block|}
comment|/**      * The method<code>createTextNode</code>      *      * @param data a<code>String</code> value      * @return a<code>Text</code> value      */
annotation|@
name|Override
specifier|public
name|Text
name|createTextNode
parameter_list|(
specifier|final
name|String
name|data
parameter_list|)
block|{
specifier|final
name|TextImpl
name|text
init|=
operator|new
name|TextImpl
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|text
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|text
return|;
block|}
comment|/*      *  W3C Document-Methods      */
comment|/**      * The method<code>getDocumentElement</code>      *      * @return an<code>Element</code> value      */
annotation|@
name|Override
specifier|public
name|Element
name|getDocumentElement
parameter_list|()
block|{
specifier|final
name|NodeList
name|cl
init|=
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
return|return
operator|(
name|Element
operator|)
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagName
parameter_list|(
specifier|final
name|String
name|tagname
parameter_list|)
block|{
if|if
condition|(
name|tagname
operator|!=
literal|null
operator|&&
name|tagname
operator|.
name|equals
argument_list|(
name|QName
operator|.
name|WILDCARD
argument_list|)
condition|)
block|{
return|return
name|getElementsByTagName
argument_list|(
operator|new
name|QName
operator|.
name|WildcardLocalPartQName
argument_list|(
name|XMLConstants
operator|.
name|DEFAULT_NS_PREFIX
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
try|try
block|{
return|return
name|getElementsByTagName
argument_list|(
operator|new
name|QName
argument_list|(
name|tagname
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalQNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|INVALID_CHARACTER_ERR
argument_list|,
literal|"name is invalid"
argument_list|)
throw|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|NodeList
name|getElementsByTagNameNS
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|)
block|{
specifier|final
name|boolean
name|wildcardNS
init|=
name|namespaceURI
operator|!=
literal|null
operator|&&
name|namespaceURI
operator|.
name|equals
argument_list|(
name|QName
operator|.
name|WILDCARD
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|wildcardLocalPart
init|=
name|localName
operator|!=
literal|null
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|QName
operator|.
name|WILDCARD
argument_list|)
decl_stmt|;
if|if
condition|(
name|wildcardNS
operator|&&
name|wildcardLocalPart
condition|)
block|{
return|return
name|getElementsByTagName
argument_list|(
name|QName
operator|.
name|WildcardQName
operator|.
name|getInstance
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|wildcardNS
condition|)
block|{
return|return
name|getElementsByTagName
argument_list|(
operator|new
name|QName
operator|.
name|WildcardNamespaceURIQName
argument_list|(
name|localName
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|wildcardLocalPart
condition|)
block|{
return|return
name|getElementsByTagName
argument_list|(
operator|new
name|QName
operator|.
name|WildcardLocalPartQName
argument_list|(
name|namespaceURI
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getElementsByTagName
argument_list|(
operator|new
name|QName
argument_list|(
name|localName
argument_list|,
name|namespaceURI
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
name|NodeList
name|getElementsByTagName
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|getBroker
argument_list|()
init|)
block|{
specifier|final
name|MutableDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|NewArrayNodeSet
name|contextSet
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
specifier|final
name|ElementImpl
name|root
init|=
operator|(
operator|(
name|ElementImpl
operator|)
name|getDocumentElement
argument_list|()
operator|)
decl_stmt|;
name|contextSet
operator|.
name|add
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|this
argument_list|,
name|root
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|root
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|getStructuralIndex
argument_list|()
operator|.
name|scanByType
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|,
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|qname
argument_list|)
argument_list|,
literal|false
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|Expression
operator|.
name|NO_CONTEXT_ID
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while finding elements: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//TODO : throw exception ?
block|}
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getParentNode
parameter_list|()
block|{
comment|//Documents don't have parents
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>getChildCount</code>      *      * @return an<code>int</code> value      */
annotation|@
name|Override
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|int
name|getChildCount
parameter_list|()
block|{
return|return
name|children
return|;
block|}
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
specifier|public
name|void
name|setChildCount
parameter_list|(
specifier|final
name|int
name|count
parameter_list|)
block|{
name|this
operator|.
name|children
operator|=
name|count
expr_stmt|;
if|if
condition|(
name|children
operator|==
literal|0
condition|)
block|{
name|this
operator|.
name|childAddress
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
specifier|public
name|boolean
name|isSameNode
parameter_list|(
specifier|final
name|Node
name|other
parameter_list|)
block|{
comment|// This function is used by Saxon in some circumstances, and this partial implementation is required for proper Saxon operation.
if|if
condition|(
name|other
operator|instanceof
name|DocumentImpl
condition|)
block|{
return|return
name|this
operator|.
name|docId
operator|==
operator|(
operator|(
name|DocumentImpl
operator|)
name|other
operator|)
operator|.
name|getDocId
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|CDATASection
name|createCDATASection
parameter_list|(
specifier|final
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|CDATASectionImpl
name|cdataSection
init|=
operator|new
name|CDATASectionImpl
argument_list|(
operator|new
name|XMLString
argument_list|(
name|data
operator|.
name|toCharArray
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|cdataSection
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|cdataSection
return|;
block|}
annotation|@
name|Override
specifier|public
name|Comment
name|createComment
parameter_list|(
specifier|final
name|String
name|data
parameter_list|)
block|{
specifier|final
name|CommentImpl
name|comment
init|=
operator|new
name|CommentImpl
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|comment
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|comment
return|;
block|}
annotation|@
name|Override
specifier|public
name|ProcessingInstruction
name|createProcessingInstruction
parameter_list|(
specifier|final
name|String
name|target
parameter_list|,
specifier|final
name|String
name|data
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|ProcessingInstructionImpl
name|processingInstruction
init|=
operator|new
name|ProcessingInstructionImpl
argument_list|(
name|target
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|processingInstruction
operator|.
name|setOwnerDocument
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
name|processingInstruction
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentFragment
name|createDocumentFragment
parameter_list|()
throws|throws
name|DOMException
block|{
return|return
operator|new
name|DocumentFragmentImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityReference
name|createEntityReference
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Element
name|getElementById
parameter_list|(
specifier|final
name|String
name|elementId
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMImplementation
name|getImplementation
parameter_list|()
block|{
return|return
operator|new
name|DOMImplementationImpl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getStrictErrorChecking
parameter_list|()
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|adoptNode
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|importNode
parameter_list|(
specifier|final
name|Node
name|importedNode
parameter_list|,
specifier|final
name|boolean
name|deep
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setStrictErrorChecking
parameter_list|(
specifier|final
name|boolean
name|strict
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getInputEncoding
parameter_list|()
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getXmlEncoding
parameter_list|()
block|{
return|return
name|UTF_8
operator|.
name|name
argument_list|()
return|;
comment|//TODO(AR) this should be recorded from the XML document and not hard coded
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getXmlStandalone
parameter_list|()
block|{
return|return
literal|false
return|;
comment|//TODO(AR) this should be recorded from the XML document and not hard coded
block|}
annotation|@
name|Override
specifier|public
name|void
name|setXmlStandalone
parameter_list|(
specifier|final
name|boolean
name|xmlStandalone
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getXmlVersion
parameter_list|()
block|{
return|return
literal|"1.0"
return|;
comment|//TODO(AR) this should be recorded from the XML document and not hard coded
block|}
annotation|@
name|Override
specifier|public
name|void
name|setXmlVersion
parameter_list|(
specifier|final
name|String
name|xmlVersion
parameter_list|)
throws|throws
name|DOMException
block|{
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDocumentURI
parameter_list|()
block|{
return|return
name|getBaseURI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocumentURI
parameter_list|(
specifier|final
name|String
name|documentURI
parameter_list|)
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|DOMConfiguration
name|getDomConfig
parameter_list|()
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|normalizeDocument
parameter_list|()
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|renameNode
parameter_list|(
specifier|final
name|Node
name|n
parameter_list|,
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|qualifiedName
parameter_list|)
throws|throws
name|DOMException
block|{
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
return|return
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|getURI
argument_list|()
operator|+
literal|" -<"
operator|+
operator|(
name|getDocumentElement
argument_list|()
operator|!=
literal|null
condition|?
name|getDocumentElement
argument_list|()
operator|.
name|getNodeName
argument_list|()
else|:
literal|null
operator|)
operator|+
literal|">"
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeId
name|getNodeId
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Node
name|appendChild
parameter_list|(
specifier|final
name|Node
name|newChild
parameter_list|)
throws|throws
name|DOMException
block|{
if|if
condition|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|DOCUMENT_NODE
operator|&&
name|newChild
operator|.
name|getOwnerDocument
argument_list|()
operator|!=
name|this
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|WRONG_DOCUMENT_ERR
argument_list|,
literal|"Owning document IDs do not match"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newChild
operator|==
name|this
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"Cannot append a document to itself"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|DOCUMENT_NODE
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"A Document Node may not be appended to a Document Node"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|ELEMENT_NODE
operator|&&
name|getDocumentElement
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"A Document Node may only have a single document element"
argument_list|)
throw|;
block|}
if|if
condition|(
name|newChild
operator|.
name|getNodeType
argument_list|()
operator|==
name|DOCUMENT_TYPE_NODE
operator|&&
name|getDoctype
argument_list|()
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|DOMException
argument_list|(
name|DOMException
operator|.
name|HIERARCHY_REQUEST_ERR
argument_list|,
literal|"A Document Node may only have a single document type"
argument_list|)
throw|;
block|}
throw|throw
name|unsupported
argument_list|()
throw|;
block|}
block|}
end_class

end_unit

