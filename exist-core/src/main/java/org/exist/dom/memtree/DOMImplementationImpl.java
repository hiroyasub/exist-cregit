begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DOMImplementation
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|DOMImplementationImpl
implements|implements
name|DOMImplementation
block|{
annotation|@
name|Override
specifier|public
name|Document
name|createDocument
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|qualifiedName
parameter_list|,
specifier|final
name|DocumentType
name|doctype
parameter_list|)
throws|throws
name|DOMException
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
operator|new
name|DocumentImpl
argument_list|(
literal|null
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifiedName
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|createElementNS
argument_list|(
name|namespaceURI
argument_list|,
name|qualifiedName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|.
name|createElement
argument_list|(
name|qualifiedName
argument_list|)
expr_stmt|;
block|}
block|}
comment|//TODO(AR) will need to handle the doc type eventually
return|return
name|doc
return|;
block|}
annotation|@
name|Override
specifier|public
name|DocumentType
name|createDocumentType
parameter_list|(
specifier|final
name|String
name|qualifiedName
parameter_list|,
specifier|final
name|String
name|publicId
parameter_list|,
specifier|final
name|String
name|systemId
parameter_list|)
throws|throws
name|DOMException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getFeature
parameter_list|(
specifier|final
name|String
name|feature
parameter_list|,
specifier|final
name|String
name|version
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFeature
parameter_list|(
specifier|final
name|String
name|feature
parameter_list|,
specifier|final
name|String
name|version
parameter_list|)
block|{
return|return
operator|(
literal|"Core"
operator|.
name|equalsIgnoreCase
argument_list|(
name|feature
argument_list|)
operator|||
literal|"XML"
operator|.
name|equalsIgnoreCase
argument_list|(
name|feature
argument_list|)
operator|)
operator|&&
operator|(
name|version
operator|==
literal|null
operator|||
name|version
operator|.
name|isEmpty
argument_list|()
operator|||
literal|"1.0"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
operator|||
literal|"2.0"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
operator|||
literal|"3.0"
operator|.
name|equals
argument_list|(
name|version
argument_list|)
operator|)
return|;
block|}
block|}
end_class

end_unit

