begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-09 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLReaderPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|ValidationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|validation
operator|.
name|Shared
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_class
specifier|public
class|class
name|ParsingFunctions
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FRAGMENT_WRAPPER_NAME
init|=
literal|"__parse-xml-fragment__"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionReturnSequenceType
name|RESULT_TYPE_FOR_PARSE_XML
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|DOCUMENT
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the parsed document"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionReturnSequenceType
name|RESULT_TYPE_FOR_PARSE_XML_FRAGMENT
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|DOCUMENT
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the parsed document fragment"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|TO_BE_PARSED_PARAMETER
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"arg"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The string to be parsed"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ParsingFunctions
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"parse-xml"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"This function takes as input an XML document represented as a string,"
operator|+
literal|" and returns the document node at the root of an XDM tree representing the parsed document."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|TO_BE_PARSED_PARAMETER
block|}
argument_list|,
name|RESULT_TYPE_FOR_PARSE_XML
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"parse-xml-fragment"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"This function takes as input an XML external entity represented as a string,"
operator|+
literal|"and returns the document node at the root of an XDM tree representing the parsed document fragment."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|TO_BE_PARSED_PARAMETER
block|}
argument_list|,
name|RESULT_TYPE_FOR_PARSE_XML_FRAGMENT
argument_list|)
block|}
decl_stmt|;
specifier|public
name|ParsingFunctions
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|getItemCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|final
name|String
name|xmlContent
init|=
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|xmlContent
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
return|return
name|parse
argument_list|(
name|xmlContent
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|parse
parameter_list|(
specifier|final
name|String
name|xmlContent
parameter_list|,
specifier|final
name|Sequence
index|[]
name|args
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|SAXAdapter
name|adapter
init|=
operator|new
name|FragmentSAXAdapter
argument_list|(
name|context
argument_list|,
name|isCalledAs
argument_list|(
literal|"parse-xml-fragment"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ValidationReport
name|report
init|=
name|validate
argument_list|(
name|xmlContent
argument_list|,
name|adapter
argument_list|)
decl_stmt|;
if|if
condition|(
name|report
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|adapter
operator|.
name|getDocument
argument_list|()
return|;
block|}
else|else
block|{
try|try
block|{
name|context
operator|.
name|pushDocumentContext
argument_list|()
expr_stmt|;
specifier|final
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
specifier|final
name|NodeImpl
name|result
init|=
name|Shared
operator|.
name|writeReport
argument_list|(
name|report
argument_list|,
name|builder
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FODC0006
argument_list|,
name|ErrorCodes
operator|.
name|FODC0006
operator|.
name|getDescription
argument_list|()
operator|+
literal|": "
operator|+
name|report
operator|.
name|toString
argument_list|()
argument_list|,
name|result
argument_list|)
throw|;
block|}
finally|finally
block|{
name|context
operator|.
name|popDocumentContext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|ValidationReport
name|validate
parameter_list|(
specifier|final
name|String
name|xmlContent
parameter_list|,
specifier|final
name|SAXAdapter
name|saxAdapter
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|String
name|xml
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"parse-xml-fragment"
argument_list|)
condition|)
block|{
name|xml
operator|=
literal|"<"
operator|+
name|FRAGMENT_WRAPPER_NAME
operator|+
literal|">"
operator|+
name|xmlContent
operator|+
literal|"</"
operator|+
name|FRAGMENT_WRAPPER_NAME
operator|+
literal|">"
expr_stmt|;
block|}
else|else
block|{
name|xml
operator|=
name|xmlContent
expr_stmt|;
block|}
specifier|final
name|ValidationReport
name|report
init|=
operator|new
name|ValidationReport
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|StringReader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|xml
argument_list|)
init|)
block|{
specifier|final
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|XMLReaderPool
name|parserPool
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
decl_stmt|;
name|XMLReader
name|xr
init|=
literal|null
decl_stmt|;
try|try
block|{
name|xr
operator|=
name|parserPool
operator|.
name|borrowXMLReader
argument_list|()
expr_stmt|;
name|xr
operator|.
name|setErrorHandler
argument_list|(
name|report
argument_list|)
expr_stmt|;
name|xr
operator|.
name|setContentHandler
argument_list|(
name|saxAdapter
argument_list|)
expr_stmt|;
name|xr
operator|.
name|setProperty
argument_list|(
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
argument_list|,
name|saxAdapter
argument_list|)
expr_stmt|;
name|xr
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Error while parsing XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FODC0006
argument_list|,
name|ErrorCodes
operator|.
name|FODC0006
operator|.
name|getDescription
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
operator|new
name|StringValue
argument_list|(
name|xml
argument_list|)
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|xr
operator|!=
literal|null
condition|)
block|{
name|parserPool
operator|.
name|returnXMLReader
argument_list|(
name|xr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|report
return|;
block|}
specifier|private
specifier|static
class|class
name|FragmentSAXAdapter
extends|extends
name|SAXAdapter
block|{
specifier|private
specifier|final
name|boolean
name|hasFragmentWrapper
decl_stmt|;
specifier|private
name|boolean
name|strippedFramentWrapper
init|=
literal|false
decl_stmt|;
specifier|public
name|FragmentSAXAdapter
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|boolean
name|hasFragmentWrapper
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|hasFragmentWrapper
operator|=
name|hasFragmentWrapper
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qName
parameter_list|,
specifier|final
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|hasFragmentWrapper
operator|&&
operator|!
name|strippedFramentWrapper
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|FRAGMENT_WRAPPER_NAME
argument_list|)
condition|)
block|{
comment|// no-op
block|}
else|else
block|{
name|super
operator|.
name|startElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|atts
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|hasFragmentWrapper
operator|&&
operator|!
name|strippedFramentWrapper
operator|&&
name|localName
operator|.
name|equals
argument_list|(
name|FRAGMENT_WRAPPER_NAME
argument_list|)
condition|)
block|{
name|strippedFramentWrapper
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|endElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

