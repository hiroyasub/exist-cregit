begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|map
package|;
end_package

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|lacuna
operator|.
name|bifurcan
operator|.
name|IEntry
import|;
end_import

begin_import
import|import
name|io
operator|.
name|lacuna
operator|.
name|bifurcan
operator|.
name|IMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|lacuna
operator|.
name|bifurcan
operator|.
name|Maps
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|map
operator|.
name|MapType
operator|.
name|newLinearMap
import|;
end_import

begin_comment
comment|/**  * Implementation of the XDM map() type for a map that only  * contains a single key and value.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|SingleKeyMapType
extends|extends
name|AbstractMapType
block|{
specifier|private
name|AtomicValue
name|key
decl_stmt|;
specifier|private
name|Sequence
name|value
decl_stmt|;
specifier|private
annotation|@
name|Nullable
name|Collator
name|collator
decl_stmt|;
specifier|public
name|SingleKeyMapType
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
annotation|@
name|Nullable
name|Collator
name|collator
parameter_list|,
specifier|final
name|AtomicValue
name|key
parameter_list|,
specifier|final
name|Sequence
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|collator
operator|=
name|collator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getKeyType
parameter_list|()
block|{
return|return
name|key
operator|.
name|getType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|get
parameter_list|(
specifier|final
name|AtomicValue
name|key
parameter_list|)
block|{
if|if
condition|(
name|keysEqual
argument_list|(
name|collator
argument_list|,
name|this
operator|.
name|key
argument_list|,
name|key
argument_list|)
condition|)
block|{
return|return
name|this
operator|.
name|value
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractMapType
name|merge
parameter_list|(
specifier|final
name|Iterable
argument_list|<
name|AbstractMapType
argument_list|>
name|others
parameter_list|)
block|{
specifier|final
name|MapType
name|map
init|=
operator|new
name|MapType
argument_list|(
name|context
argument_list|,
name|collator
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
return|return
name|map
operator|.
name|merge
argument_list|(
name|others
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractMapType
name|put
parameter_list|(
specifier|final
name|AtomicValue
name|key
parameter_list|,
specifier|final
name|Sequence
name|value
parameter_list|)
block|{
specifier|final
name|IMap
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|map
init|=
name|newLinearMap
argument_list|(
name|collator
argument_list|)
decl_stmt|;
name|int
name|keyType
init|=
name|UNKNOWN_KEY_TYPE
decl_stmt|;
if|if
condition|(
name|this
operator|.
name|key
operator|!=
literal|null
condition|)
block|{
name|map
operator|.
name|put
argument_list|(
name|this
operator|.
name|key
argument_list|,
name|this
operator|.
name|value
argument_list|)
expr_stmt|;
name|keyType
operator|=
name|this
operator|.
name|key
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
name|map
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|keyType
operator|!=
name|key
operator|.
name|getType
argument_list|()
condition|)
block|{
name|keyType
operator|=
name|MIXED_KEY_TYPES
expr_stmt|;
block|}
return|return
operator|new
name|MapType
argument_list|(
name|context
argument_list|,
name|map
operator|.
name|forked
argument_list|()
argument_list|,
name|keyType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|AtomicValue
name|key
parameter_list|)
block|{
return|return
name|keysEqual
argument_list|(
name|collator
argument_list|,
name|this
operator|.
name|key
argument_list|,
name|key
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|keys
parameter_list|()
block|{
return|return
name|key
operator|==
literal|null
condition|?
name|Sequence
operator|.
name|EMPTY_SEQUENCE
else|:
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|key
operator|==
literal|null
condition|?
literal|0
else|:
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractMapType
name|remove
parameter_list|(
specifier|final
name|AtomicValue
index|[]
name|keysAtomicValues
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
specifier|final
name|AtomicValue
name|key
range|:
name|keysAtomicValues
control|)
block|{
if|if
condition|(
name|keysEqual
argument_list|(
name|collator
argument_list|,
name|key
argument_list|,
name|this
operator|.
name|key
argument_list|)
condition|)
block|{
comment|// single key map, and we matched on our key... return an empty map!
return|return
operator|new
name|MapType
argument_list|(
name|context
argument_list|)
return|;
block|}
block|}
comment|// nothing to remove, return a copy
return|return
operator|new
name|SingleKeyMapType
argument_list|(
name|context
argument_list|,
name|collator
argument_list|,
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|key
parameter_list|()
block|{
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|value
parameter_list|()
block|{
return|return
name|value
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|IEntry
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|SingleKeyMapIterator
argument_list|()
return|;
block|}
specifier|private
class|class
name|SingleKeyMapIterator
implements|implements
name|Iterator
argument_list|<
name|IEntry
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
argument_list|>
block|{
name|boolean
name|hasMore
init|=
literal|true
decl_stmt|;
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|hasMore
return|;
block|}
annotation|@
name|Override
specifier|public
name|IEntry
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|next
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasMore
condition|)
block|{
return|return
literal|null
return|;
block|}
name|hasMore
operator|=
literal|false
expr_stmt|;
return|return
operator|new
name|Maps
operator|.
name|Entry
argument_list|<>
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

