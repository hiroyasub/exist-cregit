begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|PatternFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|regex
operator|.
name|RegexUtil
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * XPath and XQuery 3.0 F+O fn:analyze-string()  *   * @author<a href="mailto:adam@exist-db.org">Adam Retter</a>  * @serial 201211101626  *   * Corrections were made by to the previous buggy version  * by taking inspiration from the BaseX 7.3 version.  */
end_comment

begin_class
specifier|public
class|class
name|FunAnalyzeString
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|final
specifier|static
name|QName
name|fnAnalyzeString
init|=
operator|new
name|QName
argument_list|(
literal|"analyze-string"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|QN_MATCH
init|=
operator|new
name|QName
argument_list|(
literal|"match"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|QN_GROUP
init|=
operator|new
name|QName
argument_list|(
literal|"group"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|QN_NR
init|=
operator|new
name|QName
argument_list|(
literal|"nr"
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|QN_NON_MATCH
init|=
operator|new
name|QName
argument_list|(
literal|"non-match"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
name|fnAnalyzeString
argument_list|,
literal|"Analyzes a string using a regular expression, returning an XML "
operator|+
literal|"structure that identifies which parts of the input string matched "
operator|+
literal|"or failed to match the regular expression, and in the case of "
operator|+
literal|"matched substrings, which substrings matched each "
operator|+
literal|"capturing group in the regular expression."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"input"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The input string"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"pattern"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The pattern"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The result of the analysis"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|fnAnalyzeString
argument_list|,
literal|"Analyzes a string using a regular expression, returning an XML "
operator|+
literal|"structure that identifies which parts of the input string matched "
operator|+
literal|"or failed to match the regular expression, and in the case of "
operator|+
literal|"matched substrings, which substrings matched each "
operator|+
literal|"capturing group in the regular expression."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"input"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The input string"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"pattern"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The pattern"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"flags"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"Flags"
argument_list|)
block|,             }
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The result of the analysis"
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|FunAnalyzeString
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|context
operator|.
name|pushDocumentContext
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"analyze-string-result"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|String
name|input
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|input
operator|=
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|input
argument_list|)
condition|)
block|{
specifier|final
name|String
name|pattern
init|=
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|String
name|flags
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|flags
operator|=
name|args
index|[
literal|2
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
name|analyzeString
argument_list|(
name|builder
argument_list|,
name|input
argument_list|,
name|pattern
argument_list|,
name|flags
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
return|return
operator|(
name|NodeValue
operator|)
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|popDocumentContext
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|analyzeString
parameter_list|(
specifier|final
name|MemTreeBuilder
name|builder
parameter_list|,
specifier|final
name|String
name|input
parameter_list|,
name|String
name|pattern
parameter_list|,
specifier|final
name|String
name|flags
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|iFlags
init|=
name|parseFlags
argument_list|(
name|this
argument_list|,
name|flags
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|hasLiteral
argument_list|(
name|iFlags
argument_list|)
condition|)
block|{
name|pattern
operator|=
name|translateRegexp
argument_list|(
name|this
argument_list|,
name|pattern
argument_list|,
name|hasIgnoreWhitespace
argument_list|(
name|iFlags
argument_list|)
argument_list|,
name|hasCaseInsensitive
argument_list|(
name|iFlags
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Pattern
name|ptn
init|=
name|PatternFactory
operator|.
name|getInstance
argument_list|()
operator|.
name|getPattern
argument_list|(
name|pattern
argument_list|,
name|iFlags
argument_list|)
decl_stmt|;
specifier|final
name|Matcher
name|matcher
init|=
name|ptn
operator|.
name|matcher
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|matcher
operator|.
name|find
argument_list|()
condition|)
block|{
if|if
condition|(
name|matcher
operator|.
name|start
argument_list|()
operator|!=
name|offset
condition|)
block|{
name|nonMatch
argument_list|(
name|builder
argument_list|,
name|input
operator|.
name|substring
argument_list|(
name|offset
argument_list|,
name|matcher
operator|.
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|match
argument_list|(
name|builder
argument_list|,
name|matcher
argument_list|,
name|input
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|offset
operator|=
name|matcher
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|offset
operator|!=
name|input
operator|.
name|length
argument_list|()
condition|)
block|{
name|nonMatch
argument_list|(
name|builder
argument_list|,
name|input
operator|.
name|substring
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|GroupPosition
block|{
specifier|public
name|int
name|groupNumber
decl_stmt|;
specifier|public
name|int
name|position
decl_stmt|;
specifier|public
name|GroupPosition
parameter_list|(
specifier|final
name|int
name|groupNumber
parameter_list|,
specifier|final
name|int
name|position
parameter_list|)
block|{
name|this
operator|.
name|groupNumber
operator|=
name|groupNumber
expr_stmt|;
name|this
operator|.
name|position
operator|=
name|position
expr_stmt|;
block|}
block|}
specifier|private
name|GroupPosition
name|match
parameter_list|(
specifier|final
name|MemTreeBuilder
name|builder
parameter_list|,
specifier|final
name|Matcher
name|matcher
parameter_list|,
specifier|final
name|String
name|input
parameter_list|,
specifier|final
name|int
name|group
parameter_list|)
block|{
if|if
condition|(
name|group
operator|==
literal|0
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
name|QN_MATCH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|QN_NR
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|QN_NR
operator|.
name|getLocalPart
argument_list|()
argument_list|,
literal|"int"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|group
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
name|QN_GROUP
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|groupStart
init|=
name|matcher
operator|.
name|start
argument_list|(
name|group
argument_list|)
decl_stmt|;
specifier|final
name|int
name|groupEnd
init|=
name|matcher
operator|.
name|end
argument_list|(
name|group
argument_list|)
decl_stmt|;
specifier|final
name|int
name|groupCount
init|=
name|matcher
operator|.
name|groupCount
argument_list|()
decl_stmt|;
name|GroupPosition
name|groupAndPosition
init|=
operator|new
name|GroupPosition
argument_list|(
name|group
operator|+
literal|1
argument_list|,
name|groupStart
argument_list|)
decl_stmt|;
while|while
condition|(
name|groupAndPosition
operator|.
name|groupNumber
operator|<=
name|groupCount
operator|&&
name|matcher
operator|.
name|end
argument_list|(
name|groupAndPosition
operator|.
name|groupNumber
argument_list|)
operator|<=
name|groupEnd
condition|)
block|{
specifier|final
name|int
name|start
init|=
name|matcher
operator|.
name|start
argument_list|(
name|groupAndPosition
operator|.
name|groupNumber
argument_list|)
decl_stmt|;
if|if
condition|(
name|start
operator|>=
literal|0
condition|)
block|{
comment|//group matched
if|if
condition|(
name|groupAndPosition
operator|.
name|position
operator|<
name|start
condition|)
block|{
name|builder
operator|.
name|characters
argument_list|(
name|input
operator|.
name|substring
argument_list|(
name|groupAndPosition
operator|.
name|position
argument_list|,
name|start
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|groupAndPosition
operator|=
name|match
argument_list|(
name|builder
argument_list|,
name|matcher
argument_list|,
name|input
argument_list|,
name|groupAndPosition
operator|.
name|groupNumber
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|groupAndPosition
operator|.
name|groupNumber
operator|++
expr_stmt|;
comment|//skip to next group
block|}
block|}
if|if
condition|(
name|groupAndPosition
operator|.
name|position
operator|<
name|groupEnd
condition|)
block|{
name|builder
operator|.
name|characters
argument_list|(
name|input
operator|.
name|substring
argument_list|(
name|groupAndPosition
operator|.
name|position
argument_list|,
name|groupEnd
argument_list|)
argument_list|)
expr_stmt|;
name|groupAndPosition
operator|.
name|position
operator|=
name|groupEnd
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
return|return
name|groupAndPosition
return|;
block|}
specifier|private
name|void
name|nonMatch
parameter_list|(
specifier|final
name|MemTreeBuilder
name|builder
parameter_list|,
specifier|final
name|String
name|nonMatch
parameter_list|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
name|QN_NON_MATCH
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|nonMatch
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

