begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|inspect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|DefaultExpressionVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FunctionCallVisitor
extends|extends
name|DefaultExpressionVisitor
block|{
specifier|private
name|Set
argument_list|<
name|FunctionSignature
argument_list|>
name|functionCalls
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|Set
argument_list|<
name|FunctionSignature
argument_list|>
name|getFunctionCalls
parameter_list|()
block|{
return|return
name|functionCalls
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitFunctionCall
parameter_list|(
name|FunctionCall
name|call
parameter_list|)
block|{
name|functionCalls
operator|.
name|add
argument_list|(
name|call
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
comment|// continue with the function arguments, but skip the body:
comment|// we're not interested in following function calls recursively
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|call
operator|.
name|getArgumentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|call
operator|.
name|getArgument
argument_list|(
name|i
argument_list|)
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

