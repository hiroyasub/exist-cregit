begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2020 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|inspect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|SourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
operator|.
name|FunOnFunctions
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
operator|.
name|LoadXQueryModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|inspect
operator|.
name|InspectionModule
operator|.
name|functionSignature
import|;
end_import

begin_class
specifier|public
class|class
name|ModuleFunctions
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|static
specifier|final
name|FunctionSignature
name|FNS_MODULE_FUNCTIONS_CURRENT
init|=
name|functionSignature
argument_list|(
literal|"module-functions"
argument_list|,
literal|"Returns a sequence of function items pointing to each public function in the current module."
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"Sequence of function items containing all public functions in the current module, "
operator|+
literal|"or the empty sequence if the module is not known in the current context."
argument_list|)
argument_list|,
name|params
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_MODULE_FUNCTIONS_OTHER
init|=
name|functionSignature
argument_list|(
literal|"module-functions"
argument_list|,
literal|"Returns a sequence of function items pointing to each public function in the specified module."
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"Sequence of function items containing all public functions in the module, "
operator|+
literal|"or the empty sequence if the module is not known in the current context."
argument_list|)
argument_list|,
name|param
argument_list|(
literal|"location"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
literal|"The location URI of the module to be loaded."
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_MODULE_FUNCTIONS_OTHER_URI
init|=
name|functionSignature
argument_list|(
literal|"module-functions-by-uri"
argument_list|,
literal|"Returns a sequence of function items pointing to each public function in the specified module."
argument_list|,
name|returnsOptMany
argument_list|(
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
literal|"Sequence of function items containing all public functions in the module, "
operator|+
literal|"or the empty sequence if the module is not known in the current context."
argument_list|)
argument_list|,
name|param
argument_list|(
literal|"uri"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
literal|"The URI of the module to be loaded."
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|ModuleFunctions
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ValueSequence
name|list
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
if|if
condition|(
name|getArgumentCount
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|XQueryContext
name|tempContext
init|=
operator|new
name|XQueryContext
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|context
operator|.
name|getProfiler
argument_list|()
argument_list|)
decl_stmt|;
name|tempContext
operator|.
name|setModuleLoadPath
argument_list|(
name|context
operator|.
name|getModuleLoadPath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|uri
init|=
operator|(
operator|(
name|AnyURIValue
operator|)
name|args
index|[
literal|0
index|]
operator|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"module-functions"
argument_list|)
condition|)
block|{
try|try
block|{
specifier|final
name|URI
name|locationUri
init|=
operator|new
name|URI
argument_list|(
name|AnyURIValue
operator|.
name|escape
argument_list|(
name|uri
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Source
name|source
init|=
name|SourceFactory
operator|.
name|getSource
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|tempContext
operator|.
name|getModuleLoadPath
argument_list|()
argument_list|,
name|locationUri
operator|.
name|toString
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|tempContext
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XQST0046
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XQST0059
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|// attempt to import the module
name|Module
name|module
init|=
literal|null
decl_stmt|;
try|try
block|{
name|module
operator|=
name|tempContext
operator|.
name|importModule
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|/*                     Error Codes from Context#importModule can be either:                         XPST0003 - XPath/XQuery syntax error                         XQST0033 - namespace issue: multiple bindings for the same namespace prefix                         XQST0046 - namespace issue: invalid URI                         XQST0059 - no module with that target namespace                         XQST0070 - namespace issue: URI is bound to XML's namespace                         XQST0088 - namespace issue: import namespace URI or module declaration namespace URI is zero-length                         ERROR - other exceptional/undefined circumstance                      According to the description of the functions for this module, of a module cannot be found at the namespace/URI                     then an empty sequence is returned, therefore we can ignore error code XQST0059!                  */
if|if
condition|(
name|e
operator|.
name|getErrorCode
argument_list|()
operator|.
name|equals
argument_list|(
name|ErrorCodes
operator|.
name|XQST0059
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Failed to import module: "
operator|+
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|module
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|<
literal|1
condition|)
block|{
name|e
operator|.
name|setLocation
argument_list|(
name|this
operator|.
name|getLine
argument_list|()
argument_list|,
name|this
operator|.
name|getColumn
argument_list|()
argument_list|,
name|this
operator|.
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
if|if
condition|(
operator|!
name|module
operator|.
name|isInternalModule
argument_list|()
condition|)
block|{
comment|// ensure variable declarations in the imported module are analyzed.
comment|// unlike when using a normal import statement, this is not done automatically
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|analyzeGlobalVars
argument_list|()
expr_stmt|;
block|}
name|LoadXQueryModule
operator|.
name|addFunctionRefsFromModule
argument_list|(
name|this
argument_list|,
name|tempContext
argument_list|,
name|list
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|addFunctionRefsFromContext
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
specifier|private
name|void
name|addFunctionRefsFromContext
parameter_list|(
specifier|final
name|ValueSequence
name|resultSeq
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|UserDefinedFunction
argument_list|>
name|i
init|=
name|context
operator|.
name|localFunctions
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|UserDefinedFunction
name|f
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|final
name|FunctionCall
name|call
init|=
name|FunOnFunctions
operator|.
name|lookupFunction
argument_list|(
name|this
argument_list|,
name|f
operator|.
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|f
operator|.
name|getSignature
argument_list|()
operator|.
name|getArgumentCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|call
operator|!=
literal|null
condition|)
block|{
name|resultSeq
operator|.
name|add
argument_list|(
operator|new
name|FunctionReference
argument_list|(
name|call
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

