begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2009 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ElementImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Profiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|EmptySequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|QNameValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
operator|.
name|Validity
operator|.
name|VALID
import|;
end_import

begin_class
specifier|public
class|class
name|FunResolveQName
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signature
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"resolve-QName"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Returns an xs:QName value (that is, an expanded-QName) by taking an xs:string that has the lexical "
operator|+
literal|"form of an xs:QName (a string in the form \"prefix:local-name\" or \"local-name\") and resolving it "
operator|+
literal|"using the in-scope namespaces for a given element.\n\nIf $qname does not have the correct lexical "
operator|+
literal|"form for xs:QName an error is raised [err:FOCA0002].\n\nIf $qname is the empty sequence, returns "
operator|+
literal|"the empty sequence.\n\nMore specifically, the function searches the namespace bindings of "
operator|+
literal|"$element for a binding whose name matches the prefix of $qname, or the zero-length string if "
operator|+
literal|"it has no prefix, and constructs an expanded-QName whose local name is taken from the supplied "
operator|+
literal|"$qname, and whose namespace URI is taken from the string value of the namespace binding.\n\n"
operator|+
literal|"If the $qname has a prefix and if there is no namespace binding for $element that matches this "
operator|+
literal|"prefix, then an error is raised [err:FONS0004].\n\nIf the $qname has no prefix, and there is "
operator|+
literal|"no namespace binding for $element corresponding to the default (unnamed) namespace, then the "
operator|+
literal|"resulting expanded-QName has no namespace part.\n\nThe prefix (or absence of a prefix) in the "
operator|+
literal|"supplied $qname argument is retained in the returned expanded-QName."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"qname"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The QName name"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"element"
argument_list|,
name|Type
operator|.
name|ELEMENT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The element"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|QNAME
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the QName of $element with lexical form $qname"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|FunResolveQName
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Sequence
name|qnameSeq
init|=
name|args
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|qnameSeq
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|EmptySequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
else|else
block|{
name|context
operator|.
name|pushInScopeNamespaces
argument_list|()
expr_stmt|;
specifier|final
name|String
name|qnameString
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|QName
operator|.
name|isQName
argument_list|(
name|qnameString
argument_list|)
operator|==
name|VALID
operator|.
name|val
condition|)
block|{
try|try
block|{
name|String
name|prefix
init|=
name|QName
operator|.
name|extractPrefix
argument_list|(
name|qnameString
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
name|String
name|uri
init|=
literal|null
decl_stmt|;
specifier|final
name|NodeValue
name|node
init|=
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|node
decl_stmt|;
specifier|final
name|NodeSet
name|ancestors
init|=
name|proxy
operator|.
name|getAncestors
argument_list|(
name|contextId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|NodeProxy
name|ancestor
range|:
name|ancestors
control|)
block|{
name|proxy
operator|=
name|ancestor
expr_stmt|;
specifier|final
name|ElementImpl
name|e
init|=
operator|(
name|ElementImpl
operator|)
name|proxy
operator|.
name|getNode
argument_list|()
decl_stmt|;
name|uri
operator|=
name|findNamespaceURI
argument_list|(
name|e
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
name|NodeImpl
name|next
init|=
operator|(
name|NodeImpl
operator|)
name|node
decl_stmt|;
do|do
block|{
name|uri
operator|=
name|findNamespaceURI
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|ElementImpl
operator|)
name|next
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
break|break;
block|}
else|else
block|{
name|next
operator|=
operator|(
name|NodeImpl
operator|)
name|next
operator|.
name|getParentNode
argument_list|()
expr_stmt|;
block|}
block|}
do|while
condition|(
name|next
operator|!=
literal|null
operator|&&
name|next
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
do|;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
operator|&&
name|prefix
operator|!=
literal|null
operator|&&
operator|!
name|prefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FONS0004
argument_list|,
literal|"No namespace found for prefix. No binding for prefix '"
operator|+
name|prefix
operator|+
literal|"' was found."
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
throw|;
block|}
specifier|final
name|String
name|localPart
init|=
name|QName
operator|.
name|extractLocalName
argument_list|(
name|qnameString
argument_list|)
decl_stmt|;
specifier|final
name|QName
name|qn
init|=
operator|new
name|QName
argument_list|(
name|localPart
argument_list|,
name|uri
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
specifier|final
name|QNameValue
name|result
init|=
operator|new
name|QNameValue
argument_list|(
name|context
argument_list|,
name|qn
argument_list|)
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|""
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|popInScopeNamespaces
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|QName
operator|.
name|IllegalQNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FOCA0002
argument_list|,
literal|"Invalid lexical value. '"
operator|+
name|qnameString
operator|+
literal|"' is not a QName."
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FOCA0002
argument_list|,
literal|"Invalid lexical value. '"
operator|+
name|qnameString
operator|+
literal|"' is not a QName."
argument_list|,
name|args
index|[
literal|0
index|]
argument_list|)
throw|;
block|}
block|}
block|}
comment|/**      * The method<code>findNamespaceURI</code>      *      * @param element an<code>ElementImpl</code> value      * @param prefix a<code>String</code> value      * @return a<code>String</code> value      */
specifier|public
name|String
name|findNamespaceURI
parameter_list|(
name|ElementImpl
name|element
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
specifier|final
name|String
name|namespaceURI
init|=
name|element
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
operator|&&
name|namespaceURI
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|prefix
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|namespaceURI
return|;
block|}
if|if
condition|(
name|element
operator|.
name|declaresNamespacePrefixes
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|element
operator|.
name|getPrefixes
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|elementPrefix
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|context
operator|.
name|declareInScopeNamespace
argument_list|(
name|elementPrefix
argument_list|,
name|element
operator|.
name|getNamespaceForPrefix
argument_list|(
name|elementPrefix
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
name|elementPrefix
argument_list|)
condition|)
block|{
return|return
name|element
operator|.
name|getNamespaceForPrefix
argument_list|(
name|prefix
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * The method<code>findNamespaceURI</code>      *      * @param element an<code>Element</code> value      * @param prefix a<code>String</code> value      * @return a<code>String</code> value      */
specifier|public
specifier|static
name|String
name|findNamespaceURI
parameter_list|(
name|Element
name|element
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
comment|//TODO how do you get to the declared namespaces on plain elements?
specifier|final
name|String
name|namespaceURI
init|=
name|element
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
operator|&&
name|namespaceURI
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|prefix
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|namespaceURI
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * The method<code>findNamespaceURI</code>      *      * @param element an<code>org.exist.dom.memtree.ElementImpl</code> value      * @param prefix a<code>String</code> value      * @return a<code>String</code> value      */
specifier|public
specifier|static
name|String
name|findNamespaceURI
parameter_list|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|ElementImpl
name|element
parameter_list|,
name|String
name|prefix
parameter_list|)
block|{
specifier|final
name|String
name|namespaceURI
init|=
name|element
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
operator|&&
name|namespaceURI
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|prefix
operator|.
name|equals
argument_list|(
name|element
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|namespaceURI
return|;
block|}
if|if
condition|(
name|element
operator|.
name|declaresNamespacePrefixes
argument_list|()
condition|)
block|{
return|return
operator|(
name|String
operator|)
name|element
operator|.
name|getNamespaceMap
argument_list|()
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

