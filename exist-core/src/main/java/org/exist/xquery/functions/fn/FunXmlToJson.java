begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
package|;
end_package

begin_import
import|import
name|com
operator|.
name|fasterxml
operator|.
name|jackson
operator|.
name|core
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|map
operator|.
name|MapType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:from-github-existdb@agh2342.de">Adrian Hamm</a>  */
end_comment

begin_class
specifier|public
class|class
name|FunXmlToJson
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|()
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
index|[]
name|signature
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"xml-to-json"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Converts an XML tree (in w3c 'XML Representation of JSON' format) into a string conforming to the JSON grammar. Basic string (un)escaping."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"node"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The input node"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The JSON representation of the input node"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"xml-to-json"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Converts an XML tree (in w3c 'XML Representation of JSON' format) into a string conforming to the JSON grammar. Basic string (un)escaping. Options are ignored."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"node"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The input node"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"options"
argument_list|,
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|ONE
argument_list|,
literal|"The options map"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The JSON representation of the input node"
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|FunXmlToJson
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Sequence
name|result
decl_stmt|;
specifier|final
name|Sequence
name|seq
init|=
operator|(
name|getArgumentCount
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|args
index|[
literal|0
index|]
else|:
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
comment|//TODO: implement handling of options
specifier|final
name|MapType
name|options
init|=
operator|(
name|getArgumentCount
argument_list|()
operator|>
literal|1
operator|)
condition|?
operator|(
name|MapType
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
else|:
operator|new
name|MapType
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|seq
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|ValueSequence
argument_list|()
expr_stmt|;
specifier|final
name|Item
name|item
init|=
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|DOCUMENT
operator|&&
name|item
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|ELEMENT
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOJS0006
argument_list|,
literal|"Invalid XML representation of JSON."
argument_list|)
throw|;
block|}
specifier|final
name|NodeValue
name|nodeValue
init|=
operator|(
name|NodeValue
operator|)
name|item
decl_stmt|;
specifier|final
name|StringWriter
name|stringWriter
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|nodeValueToJson
argument_list|(
name|nodeValue
argument_list|,
name|stringWriter
argument_list|)
expr_stmt|;
specifier|final
name|String
name|jsonString
init|=
name|stringWriter
operator|.
name|toString
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
operator|new
name|StringValue
argument_list|(
name|jsonString
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Generate a JSON representation of a NodeValue which conforms to      * https://www.w3.org/TR/xpath-functions-31/schema-for-json.xsd      * Traverse a NodeValue via XMLStreamReader and fill a Writer with its JSON representation      * by calling com.fasterxml.jackson write functions according to input type.      *<p>      * Implements basic part of the specification. String (un)escaping is fully delegated to jackson      * and NOT fully conforming to spec.      *      * @param nodeValue the NodeValue to be read      * @param writer    the Writer to be used      * @throws XPathException on error in XML JSON input according to specification      */
specifier|private
name|void
name|nodeValueToJson
parameter_list|(
specifier|final
name|NodeValue
name|nodeValue
parameter_list|,
specifier|final
name|Writer
name|writer
parameter_list|)
throws|throws
name|XPathException
block|{
name|StringBuilder
name|tempStringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|JsonFactory
name|jsonFactory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
comment|//use Stack<Object> to store String type keys and non-string type separators
specifier|final
name|Integer
name|stackSeperator
init|=
literal|0
decl_stmt|;
name|Stack
argument_list|<
name|Object
argument_list|>
name|mapkeyStack
init|=
operator|new
name|Stack
argument_list|<
name|Object
argument_list|>
argument_list|()
decl_stmt|;
name|boolean
name|elementKeyIsEscaped
init|=
literal|false
decl_stmt|;
name|boolean
name|elementValueIsEscaped
init|=
literal|false
decl_stmt|;
name|XMLStreamReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
init|(
specifier|final
name|JsonGenerator
name|jsonGenerator
init|=
name|jsonFactory
operator|.
name|createGenerator
argument_list|(
name|writer
argument_list|)
init|;
init|)
block|{
name|reader
operator|=
name|context
operator|.
name|getXMLStreamReader
argument_list|(
name|nodeValue
argument_list|)
expr_stmt|;
name|int
name|previous
init|=
name|XMLStreamReader
operator|.
name|START_DOCUMENT
decl_stmt|;
name|int
name|status
init|=
name|XMLStreamReader
operator|.
name|START_DOCUMENT
decl_stmt|;
while|while
condition|(
name|reader
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|previous
operator|=
name|status
expr_stmt|;
name|status
operator|=
name|reader
operator|.
name|next
argument_list|()
expr_stmt|;
switch|switch
condition|(
name|status
condition|)
block|{
case|case
name|XMLStreamReader
operator|.
name|START_ELEMENT
case|:
name|tempStringBuilder
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|String
name|elementAttributeEscapedValue
init|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
literal|null
argument_list|,
literal|"escaped"
argument_list|)
decl_stmt|;
name|elementValueIsEscaped
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|elementAttributeEscapedValue
argument_list|)
expr_stmt|;
name|String
name|elementAttributeEscapedKeyValue
init|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
literal|null
argument_list|,
literal|"escaped-key"
argument_list|)
decl_stmt|;
name|elementKeyIsEscaped
operator|=
literal|"true"
operator|.
name|equals
argument_list|(
name|elementAttributeEscapedKeyValue
argument_list|)
expr_stmt|;
name|String
name|elementKeyValue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|elementKeyIsEscaped
condition|)
block|{
name|elementKeyValue
operator|=
name|unescapeEscapedJsonString
argument_list|(
name|reader
operator|.
name|getAttributeValue
argument_list|(
literal|null
argument_list|,
literal|"key"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|elementKeyValue
operator|=
name|reader
operator|.
name|getAttributeValue
argument_list|(
literal|null
argument_list|,
literal|"key"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|elementKeyValue
operator|!=
literal|null
operator|&&
name|previous
operator|!=
name|XMLStreamReader
operator|.
name|START_DOCUMENT
condition|)
block|{
if|if
condition|(
name|mapkeyStack
operator|.
name|search
argument_list|(
name|elementKeyValue
argument_list|)
operator|==
operator|-
literal|1
operator|||
operator|(
name|mapkeyStack
operator|.
name|search
argument_list|(
name|elementKeyValue
argument_list|)
operator|>
name|mapkeyStack
operator|.
name|search
argument_list|(
name|stackSeperator
argument_list|)
operator|)
condition|)
block|{
comment|//key not found or found beyond separator, add key, continue
name|mapkeyStack
operator|.
name|push
argument_list|(
name|elementKeyValue
argument_list|)
expr_stmt|;
name|jsonGenerator
operator|.
name|writeFieldName
argument_list|(
name|elementKeyValue
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mapkeyStack
operator|.
name|search
argument_list|(
name|elementKeyValue
argument_list|)
operator|<
name|mapkeyStack
operator|.
name|search
argument_list|(
name|stackSeperator
argument_list|)
condition|)
block|{
comment|//key found, before separator, error double key use in same map
name|logger
operator|.
name|error
argument_list|(
literal|"fn:xml-to-json(): FOJS0006: Invalid XML representation of JSON. Found map with double key use. Offending key in double quotes: \""
operator|+
name|elementKeyValue
operator|+
literal|"\""
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOJS0006
argument_list|,
literal|"Invalid XML representation of JSON. Found map with double key use. Offending key in error logs."
argument_list|)
throw|;
block|}
block|}
switch|switch
condition|(
name|reader
operator|.
name|getLocalName
argument_list|()
condition|)
block|{
case|case
literal|"array"
case|:
name|jsonGenerator
operator|.
name|writeStartArray
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"map"
case|:
name|mapkeyStack
operator|.
name|push
argument_list|(
name|stackSeperator
argument_list|)
expr_stmt|;
name|jsonGenerator
operator|.
name|writeStartObject
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
break|break;
case|case
name|XMLStreamReader
operator|.
name|CHARACTERS
case|:
case|case
name|XMLStreamReader
operator|.
name|CDATA
case|:
name|tempStringBuilder
operator|.
name|append
argument_list|(
name|reader
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|XMLStreamReader
operator|.
name|END_ELEMENT
case|:
name|String
name|tempString
init|=
name|tempStringBuilder
operator|.
name|toString
argument_list|()
decl_stmt|;
name|boolean
name|tempBoolean
decl_stmt|;
switch|switch
condition|(
name|reader
operator|.
name|getLocalName
argument_list|()
condition|)
block|{
case|case
literal|"array"
case|:
name|jsonGenerator
operator|.
name|writeEndArray
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"boolean"
case|:
name|tempBoolean
operator|=
operator|!
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|tempString
argument_list|)
operator|||
literal|"0"
operator|.
name|equals
argument_list|(
name|tempString
argument_list|)
operator|||
literal|"false"
operator|.
name|equals
argument_list|(
name|tempString
argument_list|)
operator|)
expr_stmt|;
name|jsonGenerator
operator|.
name|writeBoolean
argument_list|(
name|tempBoolean
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"map"
case|:
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|mapkeyStack
operator|.
name|search
argument_list|(
name|stackSeperator
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|mapkeyStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
name|jsonGenerator
operator|.
name|writeEndObject
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"null"
case|:
if|if
condition|(
name|tempStringBuilder
operator|.
name|length
argument_list|()
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOJS0006
argument_list|,
literal|"Invalid XML representation of JSON. Found non-empty XML null element."
argument_list|)
throw|;
block|}
name|jsonGenerator
operator|.
name|writeNull
argument_list|()
expr_stmt|;
break|break;
case|case
literal|"number"
case|:
name|double
name|tempDouble
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|tempString
argument_list|)
decl_stmt|;
name|jsonGenerator
operator|.
name|writeNumber
argument_list|(
name|tempDouble
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"string"
case|:
if|if
condition|(
name|elementValueIsEscaped
operator|==
literal|true
condition|)
block|{
comment|//TODO: any unescaped occurrence of quotation mark, backspace, form-feed, newline, carriage return, tab, or solidus is replaced by \", \b, \f, \n, \r, \t, or \/ respectively;
comment|//TODO: any other codepoint in the range 1-31 or 127-159 is replaced by an escape in the form<backslash>uHHHH where HHHH is the upper-case hexadecimal representation of the codepoint value.
name|jsonGenerator
operator|.
name|writeString
argument_list|(
name|unescapeEscapedJsonString
argument_list|(
name|tempString
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//TODO: any other codepoint in the range 1-31 or 127-159 is replaced by an escape in the form<backslash>uHHHH where HHHH is the upper-case hexadecimal representation of the codepoint value.
name|jsonGenerator
operator|.
name|writeString
argument_list|(
name|tempString
argument_list|)
expr_stmt|;
block|}
break|break;
default|default:
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOJS0006
argument_list|,
literal|"Invalid XML representation of JSON. Found XML element which is not one of [map, array, null, boolean, number, string]."
argument_list|)
throw|;
block|}
default|default:
break|break;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JsonGenerationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOJS0006
argument_list|,
literal|"Invalid XML representation of JSON."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOER0000
argument_list|,
literal|"XMLStreamException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOER0000
argument_list|,
literal|"IOException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOER0000
argument_list|,
literal|"XMLStreamException"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/**      * Generate an unescaped JSON string by parsing an escaped JSON string.      *      * @param escapedJsonString the escaped JSON string      * @return the unescaped JSON string      * @throws IOException    in case of an unhandled error reading the JSON      * @throws XPathException in case of dynamic error      */
specifier|private
name|String
name|unescapeEscapedJsonString
parameter_list|(
specifier|final
name|String
name|escapedJsonString
parameter_list|)
throws|throws
name|IOException
throws|,
name|XPathException
block|{
name|JsonFactory
name|jsonFactory
init|=
operator|new
name|JsonFactory
argument_list|()
decl_stmt|;
name|StringBuilder
name|unescapedJsonStringBuilder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|unescapedJsonString
decl_stmt|;
try|try
block|{
name|JsonParser
name|jsonParser
init|=
name|jsonFactory
operator|.
name|createParser
argument_list|(
literal|"\""
operator|+
name|escapedJsonString
operator|+
literal|"\""
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|jsonParser
operator|.
name|isClosed
argument_list|()
condition|)
block|{
name|JsonToken
name|jsonToken
init|=
name|jsonParser
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|jsonParser
operator|.
name|hasTextCharacters
argument_list|()
condition|)
block|{
name|unescapedJsonStringBuilder
operator|.
name|append
argument_list|(
name|jsonParser
operator|.
name|getValueAsString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|JsonParseException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"fn:xml-to-json(): FOJS0007: Bad JSON escape sequence. XML claims string is escaped. String does not parse as valid JSON string. Offending string in double quotes : \""
operator|+
name|escapedJsonString
operator|+
literal|"\""
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOJS0007
argument_list|,
literal|"Bad JSON escape sequence. XML claims string is escaped. String does not parse as valid JSON string. Offending string in error logs."
argument_list|)
throw|;
block|}
name|unescapedJsonString
operator|=
name|unescapedJsonStringBuilder
operator|.
name|toString
argument_list|()
expr_stmt|;
return|return
name|unescapedJsonString
return|;
block|}
block|}
end_class

end_unit

