begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2009 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistCollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|xmldb
operator|.
name|XMLDBModule
operator|.
name|functionSignature
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|xmldb
operator|.
name|XMLDBModule
operator|.
name|functionSignatures
import|;
end_import

begin_comment
comment|/**  * @author Wolfgang Meier (wolfgang@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|XMLDBCopy
extends|extends
name|XMLDBAbstractCollectionManipulator
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|XMLDBCopy
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_COPY_NAME
init|=
literal|"copy"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_COPY_COLLECTION_NAME
init|=
literal|"copy-collection"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_COPY_RESOURCE_NAME
init|=
literal|"copy-resource"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_SOURCE_COLLECTION_URI
init|=
name|param
argument_list|(
literal|"source-collection-uri"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The source URI"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_TARGET_COLLECTION_URI
init|=
name|param
argument_list|(
literal|"target-collection-uri"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The target URI"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_PRESERVE
init|=
name|param
argument_list|(
literal|"preserve"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|"Cause the copy process to preserve the following attributes of each source in the copy: modification time, file mode, user ID, and group ID, as allowed by permissions. Access Control Lists (ACLs) will also be preserved"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_SOURCE_RESOURCE_NAME
init|=
name|param
argument_list|(
literal|"source-resource-name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The name of the resource to copy"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_TARGET_RESOURCE_NAME
init|=
name|optParam
argument_list|(
literal|"target-resource-name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The name of the resource for the target"
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
index|[]
name|FS_COPY_COLLECTION
init|=
name|functionSignatures
argument_list|(
name|FS_COPY_COLLECTION_NAME
argument_list|,
literal|"Copy the collection $source-collection-uri to the collection $target-collection-uri."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|"The path to the newly copied collection"
argument_list|)
argument_list|,
name|arities
argument_list|(
name|arity
argument_list|(
name|FS_PARAM_SOURCE_COLLECTION_URI
argument_list|,
name|FS_PARAM_TARGET_COLLECTION_URI
argument_list|)
argument_list|,
name|arity
argument_list|(
name|FS_PARAM_SOURCE_COLLECTION_URI
argument_list|,
name|FS_PARAM_TARGET_COLLECTION_URI
argument_list|,
name|FS_PARAM_PRESERVE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
index|[]
name|FS_COPY_RESOURCE
init|=
name|functionSignatures
argument_list|(
name|FS_COPY_RESOURCE_NAME
argument_list|,
literal|"Copy the resource $source-collection-uri/$source-resource-name to collection $target-collection-uri/$target-resource-name. If the $target-resource-name is omitted, the $source-resource-name will be used."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|"The path to the newly copied resource"
argument_list|)
argument_list|,
name|arities
argument_list|(
name|arity
argument_list|(
name|FS_PARAM_SOURCE_COLLECTION_URI
argument_list|,
name|FS_PARAM_SOURCE_RESOURCE_NAME
argument_list|,
name|FS_PARAM_TARGET_COLLECTION_URI
argument_list|,
name|FS_PARAM_TARGET_RESOURCE_NAME
argument_list|)
argument_list|,
name|arity
argument_list|(
name|FS_PARAM_SOURCE_COLLECTION_URI
argument_list|,
name|FS_PARAM_SOURCE_RESOURCE_NAME
argument_list|,
name|FS_PARAM_TARGET_COLLECTION_URI
argument_list|,
name|FS_PARAM_TARGET_RESOURCE_NAME
argument_list|,
name|FS_PARAM_PRESERVE
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|XMLDBCopy
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|evalWithCollection
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|XmldbURI
name|destination
init|=
operator|new
name|AnyURIValue
argument_list|(
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
operator|.
name|toXmldbURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
name|FS_COPY_RESOURCE_NAME
argument_list|)
operator|||
operator|(
name|isCalledAs
argument_list|(
name|FS_COPY_NAME
argument_list|)
operator|&&
name|getArgumentCount
argument_list|()
operator|==
literal|3
operator|)
condition|)
block|{
specifier|final
name|XmldbURI
name|doc
init|=
operator|new
name|AnyURIValue
argument_list|(
name|args
index|[
literal|2
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
operator|.
name|toXmldbURI
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Resource
name|resource
init|=
name|collection
operator|.
name|getResource
argument_list|(
name|doc
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Resource "
operator|+
name|doc
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Resource "
operator|+
name|doc
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
specifier|final
name|EXistCollectionManagementService
name|service
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|DBBroker
operator|.
name|PreserveType
name|preserve
decl_stmt|;
if|if
condition|(
name|getArgumentCount
argument_list|()
operator|==
literal|5
condition|)
block|{
specifier|final
name|boolean
name|preserveArg
init|=
name|args
index|[
literal|4
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|preserveArg
condition|)
block|{
name|preserve
operator|=
name|DBBroker
operator|.
name|PreserveType
operator|.
name|PRESERVE
expr_stmt|;
block|}
else|else
block|{
name|preserve
operator|=
name|DBBroker
operator|.
name|PreserveType
operator|.
name|DEFAULT
expr_stmt|;
block|}
block|}
else|else
block|{
name|preserve
operator|=
name|DBBroker
operator|.
name|PreserveType
operator|.
name|DEFAULT
expr_stmt|;
block|}
specifier|final
name|XmldbURI
name|newName
decl_stmt|;
if|if
condition|(
name|getArgumentCount
argument_list|()
operator|>=
literal|4
condition|)
block|{
if|if
condition|(
operator|!
name|args
index|[
literal|3
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newName
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|args
index|[
literal|3
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newName
operator|=
name|doc
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|newName
operator|=
literal|null
expr_stmt|;
block|}
name|service
operator|.
name|copyResource
argument_list|(
name|doc
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|,
name|preserve
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
name|FS_COPY_RESOURCE_NAME
argument_list|)
condition|)
block|{
return|return
operator|new
name|StringValue
argument_list|(
name|destination
operator|.
name|append
argument_list|(
name|newName
argument_list|)
operator|.
name|getRawCollectionPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"XMLDB exception caught: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"XMLDB exception caught: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
try|try
block|{
specifier|final
name|EXistCollectionManagementService
name|service
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|DBBroker
operator|.
name|PreserveType
name|preserve
decl_stmt|;
if|if
condition|(
name|getArgumentCount
argument_list|()
operator|==
literal|3
condition|)
block|{
specifier|final
name|boolean
name|preserveArg
init|=
name|args
index|[
literal|2
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
if|if
condition|(
name|preserveArg
condition|)
block|{
name|preserve
operator|=
name|DBBroker
operator|.
name|PreserveType
operator|.
name|PRESERVE
expr_stmt|;
block|}
else|else
block|{
name|preserve
operator|=
name|DBBroker
operator|.
name|PreserveType
operator|.
name|DEFAULT
expr_stmt|;
block|}
block|}
else|else
block|{
name|preserve
operator|=
name|DBBroker
operator|.
name|PreserveType
operator|.
name|DEFAULT
expr_stmt|;
block|}
name|service
operator|.
name|copy
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|,
name|destination
argument_list|,
literal|null
argument_list|,
name|preserve
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
name|FS_COPY_COLLECTION_NAME
argument_list|)
condition|)
block|{
return|return
operator|new
name|StringValue
argument_list|(
name|destination
operator|.
name|append
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|getRawCollectionPath
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Cannot copy collection: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Cannot copy collection: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"URI exception: "
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"URI exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

