begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|map
package|;
end_package

begin_import
import|import
name|io
operator|.
name|usethesource
operator|.
name|capsule
operator|.
name|core
operator|.
name|PersistentTrieMap
import|;
end_import

begin_import
import|import
name|io
operator|.
name|usethesource
operator|.
name|capsule
operator|.
name|util
operator|.
name|EqualityComparator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|io
operator|.
name|usethesource
operator|.
name|capsule
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Full implementation of the map type based on a persistent,  * immutable tree map.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Rettter</a>  */
end_comment

begin_class
specifier|public
class|class
name|MapType
extends|extends
name|AbstractMapType
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|MapType
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// underlying map: a persistent, immutable tree map
specifier|private
name|Map
operator|.
name|Immutable
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|map
decl_stmt|;
specifier|private
specifier|final
name|Comparator
argument_list|<
name|AtomicValue
argument_list|>
name|comparator
decl_stmt|;
specifier|private
name|int
name|type
init|=
name|Type
operator|.
name|ANY_TYPE
decl_stmt|;
specifier|public
name|MapType
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|)
throws|throws
name|XPathException
block|{
name|this
argument_list|(
name|context
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MapType
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|String
name|collation
parameter_list|)
throws|throws
name|XPathException
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
comment|// if there's no collation, we'll use a hash map for better performance
if|if
condition|(
name|collation
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|comparator
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|comparator
operator|=
name|getComparator
argument_list|(
name|collation
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|map
operator|=
name|PersistentTrieMap
operator|.
name|of
argument_list|()
expr_stmt|;
block|}
specifier|public
name|MapType
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|String
name|collation
parameter_list|,
specifier|final
name|AtomicValue
name|key
parameter_list|,
specifier|final
name|Sequence
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
if|if
condition|(
name|collation
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|comparator
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|comparator
operator|=
name|getComparator
argument_list|(
name|collation
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|map
operator|=
name|PersistentTrieMap
operator|.
name|of
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|key
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|MapType
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Comparator
argument_list|<
name|AtomicValue
argument_list|>
name|comparator
parameter_list|,
specifier|final
name|Map
operator|.
name|Immutable
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|other
parameter_list|,
specifier|final
name|int
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|comparator
operator|=
name|comparator
expr_stmt|;
name|this
operator|.
name|map
operator|=
name|other
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|AbstractMapType
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|setKeyType
argument_list|(
name|other
operator|.
name|getKey
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
block|{
name|map
operator|=
name|map
operator|.
name|__putEquivalent
argument_list|(
name|other
operator|.
name|getKey
argument_list|()
argument_list|,
name|other
operator|.
name|getValue
argument_list|()
argument_list|,
name|EqualityComparator
operator|.
name|fromComparator
argument_list|(
operator|(
name|Comparator
operator|)
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
name|map
operator|.
name|__put
argument_list|(
name|other
operator|.
name|getKey
argument_list|()
argument_list|,
name|other
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|other
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|setKeyType
argument_list|(
name|other
operator|.
name|getKeyType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Map
operator|.
name|Transient
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|transientMap
init|=
name|map
operator|.
name|asTransient
argument_list|()
decl_stmt|;
if|if
condition|(
name|other
operator|instanceof
name|MapType
condition|)
block|{
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
block|{
name|transientMap
operator|.
name|__putAllEquivalent
argument_list|(
operator|(
operator|(
name|MapType
operator|)
name|other
operator|)
operator|.
name|map
argument_list|,
name|EqualityComparator
operator|.
name|fromComparator
argument_list|(
operator|(
name|Comparator
operator|)
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transientMap
operator|.
name|__putAll
argument_list|(
operator|(
operator|(
name|MapType
operator|)
name|other
operator|)
operator|.
name|map
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|entry
range|:
name|other
control|)
block|{
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
block|{
name|transientMap
operator|.
name|__putEquivalent
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|,
name|EqualityComparator
operator|.
name|fromComparator
argument_list|(
operator|(
name|Comparator
operator|)
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|transientMap
operator|.
name|__put
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|map
operator|=
name|transientMap
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|AtomicValue
name|key
parameter_list|,
specifier|final
name|Sequence
name|value
parameter_list|)
block|{
name|setKeyType
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
block|{
name|map
operator|=
name|map
operator|.
name|__putEquivalent
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|EqualityComparator
operator|.
name|fromComparator
argument_list|(
operator|(
name|Comparator
operator|)
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|map
operator|=
name|map
operator|.
name|__put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|get
parameter_list|(
name|AtomicValue
name|key
parameter_list|)
block|{
name|key
operator|=
name|convert
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|final
name|Sequence
name|result
decl_stmt|;
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
block|{
name|result
operator|=
name|map
operator|.
name|getEquivalent
argument_list|(
name|key
argument_list|,
name|EqualityComparator
operator|.
name|fromComparator
argument_list|(
operator|(
name|Comparator
operator|)
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|map
operator|.
name|get
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|==
literal|null
condition|?
name|Sequence
operator|.
name|EMPTY_SEQUENCE
else|:
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|AbstractMapType
name|put
parameter_list|(
specifier|final
name|AtomicValue
name|key
parameter_list|,
specifier|final
name|Sequence
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Map
operator|.
name|Immutable
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|newMap
decl_stmt|;
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
block|{
name|newMap
operator|=
name|map
operator|.
name|__putEquivalent
argument_list|(
name|key
argument_list|,
name|value
argument_list|,
name|EqualityComparator
operator|.
name|fromComparator
argument_list|(
operator|(
name|Comparator
operator|)
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMap
operator|=
name|map
operator|.
name|__put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|MapType
argument_list|(
name|this
operator|.
name|context
argument_list|,
name|comparator
argument_list|,
name|newMap
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|contains
parameter_list|(
name|AtomicValue
name|key
parameter_list|)
block|{
name|key
operator|=
name|convert
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
block|{
return|return
name|map
operator|.
name|containsKeyEquivalent
argument_list|(
name|key
argument_list|,
name|EqualityComparator
operator|.
name|fromComparator
argument_list|(
operator|(
name|Comparator
operator|)
name|comparator
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|map
operator|.
name|containsKey
argument_list|(
name|key
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|keys
parameter_list|()
block|{
specifier|final
name|ValueSequence
name|seq
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|AtomicValue
name|key
range|:
name|map
operator|.
name|keySet
argument_list|()
control|)
block|{
name|seq
operator|.
name|add
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|seq
return|;
block|}
specifier|public
name|AbstractMapType
name|remove
parameter_list|(
specifier|final
name|AtomicValue
index|[]
name|keysAtomicValues
parameter_list|)
block|{
specifier|final
name|Map
operator|.
name|Transient
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|newMap
init|=
name|map
operator|.
name|asTransient
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|AtomicValue
name|key
range|:
name|keysAtomicValues
control|)
block|{
if|if
condition|(
name|comparator
operator|!=
literal|null
condition|)
block|{
name|newMap
operator|.
name|__removeEquivalent
argument_list|(
name|key
argument_list|,
name|EqualityComparator
operator|.
name|fromComparator
argument_list|(
operator|(
name|Comparator
operator|)
name|comparator
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMap
operator|.
name|__remove
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|MapType
argument_list|(
name|this
operator|.
name|context
argument_list|,
name|comparator
argument_list|,
name|newMap
operator|.
name|freeze
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|map
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
argument_list|>
name|iterator
parameter_list|()
block|{
return|return
name|map
operator|.
name|entryIterator
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|getKey
parameter_list|()
block|{
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
argument_list|>
name|iter
init|=
name|this
operator|.
name|map
operator|.
name|entryIterator
argument_list|()
decl_stmt|;
return|return
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getKey
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getValue
parameter_list|()
block|{
return|return
name|mapToSequence
argument_list|(
name|this
operator|.
name|map
argument_list|)
return|;
block|}
comment|/**      * Get a Sequence from an internal map representation      */
specifier|private
name|Sequence
name|mapToSequence
parameter_list|(
specifier|final
name|Map
operator|.
name|Immutable
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|map
parameter_list|)
block|{
if|if
condition|(
name|map
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
argument_list|>
name|iter
init|=
name|map
operator|.
name|entryIterator
argument_list|()
decl_stmt|;
return|return
name|iter
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
return|;
block|}
specifier|private
name|void
name|setKeyType
parameter_list|(
specifier|final
name|int
name|newType
parameter_list|)
block|{
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|type
operator|=
name|newType
expr_stmt|;
block|}
if|else if
condition|(
name|type
operator|!=
name|newType
condition|)
block|{
name|type
operator|=
name|Type
operator|.
name|ITEM
expr_stmt|;
try|try
block|{
specifier|final
name|Map
operator|.
name|Transient
argument_list|<
name|AtomicValue
argument_list|,
name|Sequence
argument_list|>
name|newTransientMap
init|=
name|PersistentTrieMap
operator|.
expr|<
name|AtomicValue
decl_stmt|,
name|Sequence
decl|>
name|of
argument_list|()
decl|.
name|asTransient
argument_list|()
decl_stmt|;
name|newTransientMap
operator|.
name|__putAllEquivalent
argument_list|(
name|map
argument_list|,
name|EqualityComparator
operator|.
name|fromComparator
argument_list|(
operator|(
name|Comparator
operator|)
name|getComparator
argument_list|(
literal|null
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//NOTE: getComparator(null) returns a default distinct values comparator
name|map
operator|=
name|newTransientMap
operator|.
name|freeze
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|AtomicValue
name|convert
parameter_list|(
specifier|final
name|AtomicValue
name|key
parameter_list|)
block|{
if|if
condition|(
name|type
operator|!=
name|Type
operator|.
name|ANY_TYPE
operator|&&
name|type
operator|!=
name|Type
operator|.
name|ITEM
condition|)
block|{
try|try
block|{
return|return
name|key
operator|.
name|convertTo
argument_list|(
name|type
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|key
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getKeyType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
block|}
end_class

end_unit

