begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001 The eXist-db Authors  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedDocumentLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|param
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|returnsOpt
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|util
operator|.
name|UtilModule
operator|.
name|functionSignature
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:wolfgang@exist-db.org">Wolfgang Meier</a>  */
end_comment

begin_class
specifier|public
class|class
name|DocumentNameOrId
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|PRAM_NODE_OR_PATH
init|=
name|param
argument_list|(
literal|"node-or-path"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
literal|"The node or a string path pointing to a resource in the database."
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FSN_DOCUMENT_NAME
init|=
literal|"document-name"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FS_DOCUMENT_NAME
init|=
name|functionSignature
argument_list|(
name|FSN_DOCUMENT_NAME
argument_list|,
literal|"Returns the name of a document (excluding the collection path). The argument can either be "
operator|+
literal|"a node or a string path pointing to a resource in the database. If the resource does not exist or the node "
operator|+
literal|"does not belong to a stored document, the empty sequence is returned."
argument_list|,
name|returnsOpt
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
literal|"the name of the document"
argument_list|)
argument_list|,
name|PRAM_NODE_OR_PATH
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FSN_DOCUMENT_ID
init|=
literal|"document-id"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FS_DOCUMENT_ID
init|=
name|functionSignature
argument_list|(
name|FSN_DOCUMENT_ID
argument_list|,
literal|"Returns the internal integer id of a document. The argument can either be "
operator|+
literal|"a node or a string path pointing to a resource in the database. If the resource does not exist or the node "
operator|+
literal|"does not belong to a stored document, the empty sequence is returned."
argument_list|,
name|returnsOpt
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
literal|"the ID of the document"
argument_list|)
argument_list|,
name|PRAM_NODE_OR_PATH
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FSN_ABSOLUTE_RESOURCE_ID
init|=
literal|"absolute-resource-id"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FS_ABSOLUTE_RESOURCE_ID
init|=
name|functionSignature
argument_list|(
name|FSN_ABSOLUTE_RESOURCE_ID
argument_list|,
literal|"Returns the absolute internal id of a resource as a 65 bit number. The first 32 bits are the collection id, the next 32 bits are the document id, the last bit is the document type. The argument can either be "
operator|+
literal|"a node or a string path pointing to a resource in the database. If the resource does not exist or the node "
operator|+
literal|"does not belong to a stored document, the empty sequence is returned."
argument_list|,
name|returnsOpt
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
literal|"the absolute ID of the resource"
argument_list|)
argument_list|,
name|PRAM_NODE_OR_PATH
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FSN_GET_RESOURCE_BY_ABSOLUTE_ID
init|=
literal|"get-resource-by-absolute-id"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FS_GET_RESOURCE_BY_ABSOLUTE_ID
init|=
name|functionSignature
argument_list|(
name|FSN_GET_RESOURCE_BY_ABSOLUTE_ID
argument_list|,
literal|"Returns the resource indicated by its absolute internal id. The first 32 bits are the collection id, the next 32 bits are the document id, the last bit is the document type. If the resource does not exist, the empty sequence is returned."
argument_list|,
name|returnsOpt
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
literal|"The resource from the database. A document() if its an XML resource, or an xs:base64binary otherwise"
argument_list|)
argument_list|,
name|param
argument_list|(
literal|"absolute-id"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
literal|"The absolute id of a resource in the database."
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|DocumentNameOrId
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|result
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|NodeValue
name|node
init|=
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
specifier|final
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|node
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc
init|=
name|proxy
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
try|try
init|(
specifier|final
name|ManagedDocumentLock
name|docLock
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|acquireDocumentReadLock
argument_list|(
name|doc
operator|.
name|getURI
argument_list|()
argument_list|)
init|)
block|{
return|return
name|documentNameOrId
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|resourceById
argument_list|(
name|args
argument_list|)
return|;
block|}
block|}
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
specifier|final
name|String
name|path
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDoc
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|lockedDoc
operator|!=
literal|null
condition|)
block|{
return|return
name|documentNameOrId
argument_list|(
name|lockedDoc
operator|.
name|getDocument
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|resourceById
argument_list|(
name|args
argument_list|)
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|le
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Unable to lock resource"
argument_list|,
name|le
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Unable to read binary resource"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid resource uri: "
operator|+
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
operator|+
literal|": permission denied to read resource"
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Sequence
name|documentNameOrId
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|XPathException
block|{
name|Objects
operator|.
name|nonNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
specifier|final
name|Sequence
name|result
decl_stmt|;
specifier|final
name|String
name|fnName
init|=
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|fnName
operator|.
name|equals
argument_list|(
name|FSN_DOCUMENT_NAME
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|StringValue
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fnName
operator|.
name|equals
argument_list|(
name|FSN_DOCUMENT_ID
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|IntegerValue
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fnName
operator|.
name|equals
argument_list|(
name|FSN_ABSOLUTE_RESOURCE_ID
argument_list|)
condition|)
block|{
name|BigInteger
name|absoluteId
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|shiftLeft
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|or
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|shiftLeft
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|or
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|&
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|IntegerValue
argument_list|(
name|absoluteId
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Sequence
name|resourceById
parameter_list|(
specifier|final
name|Sequence
name|args
index|[]
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
throws|,
name|LockException
block|{
specifier|final
name|String
name|fnName
init|=
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
if|if
condition|(
name|fnName
operator|.
name|equals
argument_list|(
name|FSN_GET_RESOURCE_BY_ABSOLUTE_ID
argument_list|)
condition|)
block|{
specifier|final
name|IntegerValue
name|absoluteIdParam
init|=
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BigInteger
name|absoluteId
init|=
name|absoluteIdParam
operator|.
name|toJavaObject
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|byte
name|resourceType
init|=
name|absoluteId
operator|.
name|testBit
argument_list|(
literal|0
argument_list|)
condition|?
name|DocumentImpl
operator|.
name|BINARY_FILE
else|:
name|DocumentImpl
operator|.
name|XML_FILE
decl_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|shiftRight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|documentId
init|=
name|absoluteId
operator|.
name|and
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|0xFFFFFFFF
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|shiftRight
argument_list|(
literal|32
argument_list|)
expr_stmt|;
specifier|final
name|int
name|collectionId
init|=
name|absoluteId
operator|.
name|and
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|0xFFFFFFFF
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getResourceById
argument_list|(
name|collectionId
argument_list|,
name|resourceType
argument_list|,
name|documentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
try|try
init|(
specifier|final
name|ManagedDocumentLock
name|docLock
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|acquireDocumentReadLock
argument_list|(
name|doc
operator|.
name|getURI
argument_list|()
argument_list|)
init|)
block|{
if|if
condition|(
name|doc
operator|instanceof
name|BinaryDocument
condition|)
block|{
specifier|final
name|BinaryDocument
name|bin
init|=
operator|(
name|BinaryDocument
operator|)
name|doc
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBinaryResource
argument_list|(
name|bin
argument_list|)
decl_stmt|;
specifier|final
name|Base64BinaryDocument
name|b64doc
init|=
name|Base64BinaryDocument
operator|.
name|getInstance
argument_list|(
name|context
argument_list|,
name|is
argument_list|)
decl_stmt|;
return|return
name|b64doc
return|;
block|}
else|else
block|{
return|return
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
else|else
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
block|}
block|}
end_class

end_unit

