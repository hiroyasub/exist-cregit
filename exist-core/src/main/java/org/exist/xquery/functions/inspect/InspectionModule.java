begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2020 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|inspect
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|AbstractInternalModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDef
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|functionDefs
import|;
end_import

begin_class
specifier|public
class|class
name|InspectionModule
extends|extends
name|AbstractInternalModule
block|{
specifier|public
specifier|final
specifier|static
name|String
name|NAMESPACE_URI
init|=
literal|"http://exist-db.org/xquery/inspection"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PREFIX
init|=
literal|"inspect"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|RELEASE
init|=
literal|"2.0"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionDef
index|[]
name|functions
init|=
name|functionDefs
argument_list|(
name|functionDefs
argument_list|(
name|InspectFunction
operator|.
name|class
argument_list|,
name|InspectFunction
operator|.
name|SIGNATURE
argument_list|)
argument_list|,
name|functionDefs
argument_list|(
name|InspectModule
operator|.
name|class
argument_list|,
name|InspectModule
operator|.
name|FNS_INSPECT_MODULE
argument_list|,
name|InspectModule
operator|.
name|FNS_INSPECT_MODULE_URI
argument_list|)
argument_list|,
name|functionDefs
argument_list|(
name|ModuleFunctions
operator|.
name|class
argument_list|,
name|ModuleFunctions
operator|.
name|FNS_MODULE_FUNCTIONS_CURRENT
argument_list|,
name|ModuleFunctions
operator|.
name|FNS_MODULE_FUNCTIONS_OTHER
argument_list|,
name|ModuleFunctions
operator|.
name|FNS_MODULE_FUNCTIONS_OTHER_URI
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|InspectionModule
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|parameters
parameter_list|)
block|{
name|super
argument_list|(
name|functions
argument_list|,
name|parameters
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getNamespaceURI
parameter_list|()
block|{
return|return
name|NAMESPACE_URI
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDefaultPrefix
parameter_list|()
block|{
return|return
name|PREFIX
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
literal|"Functions for inspecting XQuery modules and functions"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getReleaseVersion
parameter_list|()
block|{
return|return
name|RELEASE
return|;
block|}
specifier|static
name|FunctionSignature
name|functionSignature
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|FunctionReturnSequenceType
name|returnType
parameter_list|,
specifier|final
name|FunctionParameterSequenceType
modifier|...
name|paramTypes
parameter_list|)
block|{
return|return
name|FunctionDSL
operator|.
name|functionSignature
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|NAMESPACE_URI
argument_list|,
name|PREFIX
argument_list|)
argument_list|,
name|description
argument_list|,
name|returnType
argument_list|,
name|paramTypes
argument_list|)
return|;
block|}
specifier|static
name|FunctionSignature
index|[]
name|functionSignatures
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|FunctionReturnSequenceType
name|returnType
parameter_list|,
specifier|final
name|FunctionParameterSequenceType
index|[]
index|[]
name|variableParamTypes
parameter_list|)
block|{
return|return
name|FunctionDSL
operator|.
name|functionSignatures
argument_list|(
operator|new
name|QName
argument_list|(
name|name
argument_list|,
name|NAMESPACE_URI
argument_list|,
name|PREFIX
argument_list|)
argument_list|,
name|description
argument_list|,
name|returnType
argument_list|,
name|variableParamTypes
argument_list|)
return|;
block|}
block|}
end_class

end_unit

