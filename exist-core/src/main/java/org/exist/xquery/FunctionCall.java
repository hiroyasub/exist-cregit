begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|VirtualNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|Error
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Represents a call to a user-defined function   * {@link org.exist.xquery.UserDefinedFunction}.  *   * FunctionCall wraps around a user-defined function. It makes sure that all function parameters  * are checked against the signature of the function.   *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|FunctionCall
extends|extends
name|Function
block|{
specifier|protected
name|UserDefinedFunction
name|functionDef
decl_stmt|;
specifier|protected
name|Expression
name|expression
decl_stmt|;
comment|// the name of the function. Used for forward references.
specifier|protected
name|QName
name|name
init|=
literal|null
decl_stmt|;
specifier|protected
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|recursive
init|=
literal|false
decl_stmt|;
specifier|protected
name|VariableReference
name|varDeps
index|[]
decl_stmt|;
specifier|public
name|FunctionCall
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|QName
name|name
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|arguments
expr_stmt|;
block|}
specifier|public
name|FunctionCall
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|UserDefinedFunction
name|functionDef
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|setFunction
argument_list|(
name|functionDef
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionCall
parameter_list|(
name|FunctionCall
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
operator|.
name|getContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|recursive
operator|=
name|other
operator|.
name|recursive
expr_stmt|;
name|this
operator|.
name|functionDef
operator|=
name|other
operator|.
name|functionDef
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|other
operator|.
name|expression
expr_stmt|;
name|this
operator|.
name|mySignature
operator|=
name|other
operator|.
name|mySignature
expr_stmt|;
block|}
specifier|private
name|void
name|setFunction
parameter_list|(
name|UserDefinedFunction
name|functionDef
parameter_list|)
block|{
name|this
operator|.
name|functionDef
operator|=
operator|(
name|UserDefinedFunction
operator|)
name|functionDef
operator|.
name|clone
argument_list|()
expr_stmt|;
name|this
operator|.
name|mySignature
operator|=
name|this
operator|.
name|functionDef
operator|.
name|getSignature
argument_list|()
expr_stmt|;
name|this
operator|.
name|expression
operator|=
name|this
operator|.
name|functionDef
expr_stmt|;
name|this
operator|.
name|functionDef
operator|.
name|setCaller
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|SequenceType
name|returnType
init|=
name|this
operator|.
name|functionDef
operator|.
name|getSignature
argument_list|()
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
comment|// add return type checks
if|if
condition|(
name|returnType
operator|.
name|getCardinality
argument_list|()
operator|!=
name|Cardinality
operator|.
name|ZERO_OR_MORE
condition|)
block|{
name|expression
operator|=
operator|new
name|DynamicCardinalityCheck
argument_list|(
name|context
argument_list|,
name|returnType
operator|.
name|getCardinality
argument_list|()
argument_list|,
name|expression
argument_list|,
operator|new
name|Error
argument_list|(
name|Error
operator|.
name|FUNC_RETURN_CARDINALITY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|returnType
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|)
condition|)
block|{
name|expression
operator|=
operator|new
name|Atomize
argument_list|(
name|context
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|returnType
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
name|expression
operator|=
operator|new
name|UntypedValueCheck
argument_list|(
name|context
argument_list|,
name|returnType
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|expression
argument_list|,
operator|new
name|Error
argument_list|(
name|Error
operator|.
name|FUNC_RETURN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|returnType
operator|.
name|getPrimaryType
argument_list|()
operator|!=
name|Type
operator|.
name|ITEM
condition|)
block|{
name|expression
operator|=
operator|new
name|DynamicTypeCheck
argument_list|(
name|context
argument_list|,
name|returnType
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|UserDefinedFunction
name|getFunction
parameter_list|()
block|{
return|return
name|functionDef
return|;
block|}
comment|/** 	 * For calls to functions in external modules, check that the instance of the function we were 	 * bound to matches the current implementation of the module bound to our context.  If not, 	 * rebind to the correct instance, but don't bother resetting the signature since it's guaranteed 	 * (I hope!) to be the same. 	 * @throws XPathException  	 */
specifier|private
name|void
name|updateFunction
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
name|functionDef
operator|.
name|getContext
argument_list|()
operator|instanceof
name|ModuleContext
condition|)
block|{
specifier|final
name|ModuleContext
name|modContext
init|=
operator|(
name|ModuleContext
operator|)
name|functionDef
operator|.
name|getContext
argument_list|()
decl_stmt|;
comment|// util:eval will stuff non-module function declarations into a module context sometimes,
comment|// so watch out for those and ignore them.
if|if
condition|(
name|functionDef
operator|.
name|getName
argument_list|()
operator|!=
literal|null
operator|&&
name|functionDef
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|modContext
operator|.
name|getModuleNamespace
argument_list|()
argument_list|)
operator|&&
name|modContext
operator|.
name|getRootContext
argument_list|()
operator|!=
name|context
operator|.
name|getRootContext
argument_list|()
condition|)
block|{
specifier|final
name|ExternalModule
name|rootModule
init|=
operator|(
name|ExternalModule
operator|)
name|context
operator|.
name|getRootModule
argument_list|(
name|functionDef
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|rootModule
operator|!=
literal|null
condition|)
block|{
specifier|final
name|UserDefinedFunction
name|replacementFunctionDef
init|=
name|rootModule
operator|.
name|getFunction
argument_list|(
name|functionDef
operator|.
name|getName
argument_list|()
argument_list|,
name|getArgumentCount
argument_list|()
argument_list|,
name|modContext
argument_list|)
decl_stmt|;
if|if
condition|(
name|replacementFunctionDef
operator|!=
literal|null
condition|)
block|{
name|expression
operator|=
name|functionDef
operator|=
operator|(
name|UserDefinedFunction
operator|)
name|replacementFunctionDef
operator|.
name|clone
argument_list|()
expr_stmt|;
name|mySignature
operator|=
name|functionDef
operator|.
name|getSignature
argument_list|()
expr_stmt|;
name|functionDef
operator|.
name|setCaller
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.Function#analyze(org.exist.xquery.AnalyzeContextInfo) 	 */
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//updateFunction();
specifier|final
name|AnalyzeContextInfo
name|newContextInfo
init|=
operator|new
name|AnalyzeContextInfo
argument_list|(
name|contextInfo
argument_list|)
decl_stmt|;
name|newContextInfo
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|newContextInfo
operator|.
name|removeFlag
argument_list|(
name|IN_NODE_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|super
operator|.
name|analyze
argument_list|(
name|newContextInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|tailRecursiveCall
argument_list|(
name|functionDef
operator|.
name|getSignature
argument_list|()
argument_list|)
condition|)
block|{
name|setRecursive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|functionStart
argument_list|(
name|functionDef
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|expression
operator|.
name|analyze
argument_list|(
name|newContextInfo
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|functionEnd
argument_list|()
expr_stmt|;
block|}
name|varDeps
operator|=
operator|new
name|VariableReference
index|[
name|getArgumentCount
argument_list|()
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getArgumentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Expression
name|arg
init|=
name|getArgument
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|VariableReference
name|varRef
init|=
name|BasicExpressionVisitor
operator|.
name|findVariableRef
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
name|varRef
operator|!=
literal|null
condition|)
block|{
name|varDeps
index|[
name|i
index|]
operator|=
name|varRef
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Called by {@link XQueryContext} to resolve a call to a function that has not      * yet been declared. XQueryContext remembers all calls to undeclared functions      * and tries to resolve them after parsing has completed.      *       * @param functionDef the function definition to resolve      * @throws XPathException if an error occurs resolving the forward reference      */
specifier|public
name|void
name|resolveForwardReference
parameter_list|(
name|UserDefinedFunction
name|functionDef
parameter_list|)
throws|throws
name|XPathException
block|{
name|setFunction
argument_list|(
name|functionDef
argument_list|)
expr_stmt|;
name|setArguments
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
name|arguments
operator|=
literal|null
expr_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getArgumentCount
parameter_list|()
block|{
if|if
condition|(
name|arguments
operator|==
literal|null
condition|)
block|{
return|return
name|super
operator|.
name|getArgumentCount
argument_list|()
return|;
block|}
return|return
name|arguments
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|QName
name|getQName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
comment|/**       * Evaluates all arguments, then forwards them to the user-defined function.      *       * The return value of the user-defined function will be checked against the      * provided function signature.      *       * @see org.exist.xquery.Expression#eval(Sequence, Item)      */
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Sequence
index|[]
name|seq
init|=
operator|new
name|Sequence
index|[
name|getArgumentCount
argument_list|()
index|]
decl_stmt|;
specifier|final
name|DocumentSet
index|[]
name|contextDocs
init|=
operator|new
name|DocumentSet
index|[
name|getArgumentCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getArgumentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|seq
index|[
name|i
index|]
operator|=
name|getArgument
argument_list|(
name|i
argument_list|)
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
expr_stmt|;
if|if
condition|(
name|varDeps
operator|!=
literal|null
operator|&&
name|varDeps
index|[
name|i
index|]
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Variable
name|var
init|=
name|varDeps
index|[
name|i
index|]
operator|.
name|getVariable
argument_list|()
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|contextDocs
index|[
name|i
index|]
operator|=
name|var
operator|.
name|getContextDocs
argument_list|()
expr_stmt|;
block|}
block|}
comment|//System.out.println("found " + seq[i].getLength() + " for " + getArgument(i).pprint());
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|e
operator|.
name|setLocation
argument_list|(
name|line
argument_list|,
name|column
argument_list|,
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// append location of the function call to the exception message:
name|e
operator|.
name|addFunctionCall
argument_list|(
name|functionDef
argument_list|,
name|this
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|final
name|Sequence
name|result
init|=
name|evalFunction
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|,
name|seq
argument_list|,
name|contextDocs
argument_list|)
decl_stmt|;
try|try
block|{
comment|//Don't check deferred calls : it would result in a stack overflow
comment|//TODO : find a solution or... is it already here ?
comment|//Don't test on empty sequences since they can have several types
comment|//TODO : add a prior cardinality check on wether an empty result is allowed or not
comment|//TODO : should we introduce a deffered type check on VirtualNodeSet
comment|// and trigger it when the nodeSet is realized ?
if|if
condition|(
operator|!
operator|(
name|result
operator|instanceof
name|DeferredFunctionCall
operator|)
operator|&&
operator|!
operator|(
name|result
operator|instanceof
name|VirtualNodeSet
operator|)
operator|&&
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|getSignature
argument_list|()
operator|.
name|getReturnType
argument_list|()
operator|.
name|checkType
argument_list|(
name|result
operator|.
name|getItemType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Return type of function '"
operator|+
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'. "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|//Annotation Triggers are bad design, disabled as breaks RESTXQ - Adam.
comment|/*for (Annotation ann : functionDef.getSignature().getAnnotations()) {             AnnotationTrigger trigger = ann.getTrigger();             if (trigger instanceof AnnotationTriggerOnResult) {                 try {                     ((AnnotationTriggerOnResult) trigger).trigger(result);                 } catch (Throwable e) {                     throw new XPathException(this, "function '" + getSignature().getName() + "'. " + e.getMessage(), e);                 }             }         }*/
return|return
name|result
return|;
block|}
comment|/**      * Evaluate the function.      *      * @param contextSequence the context sequence      * @param contextItem the context item      * @param seq the sequence      * @throws XPathException if an error occurs whilst evaluation the function.      */
specifier|public
name|Sequence
name|evalFunction
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|,
name|Sequence
index|[]
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|evalFunction
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|,
name|seq
argument_list|,
literal|null
argument_list|)
return|;
block|}
specifier|public
name|Sequence
name|evalFunction
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|,
name|Sequence
index|[]
name|seq
parameter_list|,
name|DocumentSet
index|[]
name|contextDocs
parameter_list|)
throws|throws
name|XPathException
block|{
name|context
operator|.
name|proceed
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|isProfilingEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT ITEM"
argument_list|,
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|functionDef
operator|.
name|setArguments
argument_list|(
name|seq
argument_list|,
name|contextDocs
argument_list|)
expr_stmt|;
if|if
condition|(
name|isRecursive
argument_list|()
condition|)
block|{
comment|//LOG.warn("Tail recursive function: " + functionDef.getSignature().toString());
return|return
operator|new
name|DeferredFunctionCallImpl
argument_list|(
name|this
argument_list|,
name|contextSequence
argument_list|,
name|contextItem
argument_list|,
name|seq
argument_list|,
name|contextDocs
argument_list|)
return|;
block|}
else|else
block|{
comment|//XXX: should we have it? org.exist.xquery.UserDefinedFunction do a call -shabanovd
name|context
operator|.
name|stackEnter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceFunctions
argument_list|()
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|tailRecursiveCall
argument_list|(
name|getSignature
argument_list|()
argument_list|)
condition|)
block|{
name|start
operator|=
operator|-
literal|1
expr_stmt|;
block|}
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceFunctionStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|functionStart
argument_list|(
name|functionDef
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LocalVariable
name|mark
init|=
name|context
operator|.
name|markLocalVariables
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|context
operator|.
name|pushInScopeNamespaces
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Sequence
name|returnSeq
init|=
literal|null
decl_stmt|;
try|try
block|{
name|returnSeq
operator|=
name|expression
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
expr_stmt|;
while|while
condition|(
name|returnSeq
operator|instanceof
name|DeferredFunctionCall
operator|&&
name|functionDef
operator|.
name|getSignature
argument_list|()
operator|.
name|equals
argument_list|(
operator|(
operator|(
name|DeferredFunctionCall
operator|)
name|returnSeq
operator|)
operator|.
name|getSignature
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"Executing function: "
operator|+
name|functionDef
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|returnSeq
operator|=
operator|(
operator|(
name|DeferredFunctionCall
operator|)
name|returnSeq
operator|)
operator|.
name|execute
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceFunctions
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceFunctionEnd
argument_list|(
name|this
argument_list|,
name|start
operator|<
literal|0
condition|?
literal|0
else|:
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|isProfilingEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|""
argument_list|,
name|returnSeq
argument_list|)
expr_stmt|;
block|}
return|return
name|returnSeq
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|// append location of the function call to the exception message:
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|e
operator|.
name|setLocation
argument_list|(
name|expression
operator|.
name|getLine
argument_list|()
argument_list|,
name|expression
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|addFunctionCall
argument_list|(
name|functionDef
argument_list|,
name|this
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|context
operator|.
name|popInScopeNamespaces
argument_list|()
expr_stmt|;
name|context
operator|.
name|popLocalVariables
argument_list|(
name|mark
argument_list|,
name|returnSeq
argument_list|)
expr_stmt|;
name|context
operator|.
name|functionEnd
argument_list|()
expr_stmt|;
name|context
operator|.
name|stackLeave
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see org.exist.xquery.PathExpr#resetState(boolean)      */
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
if|if
condition|(
name|expression
operator|.
name|needsReset
argument_list|()
operator|||
name|postOptimization
condition|)
block|{
name|expression
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.exist.xquery.Expression#setContextDocSet(org.exist.dom.persistent.DocumentSet)      */
annotation|@
name|Override
specifier|public
name|void
name|setContextDocSet
parameter_list|(
name|DocumentSet
name|contextSet
parameter_list|)
block|{
name|super
operator|.
name|setContextDocSet
argument_list|(
name|contextSet
argument_list|)
expr_stmt|;
name|functionDef
operator|.
name|setContextDocSet
argument_list|(
name|contextSet
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|ExpressionVisitor
name|visitor
parameter_list|)
block|{
name|visitor
operator|.
name|visitFunctionCall
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|DeferredFunctionCallImpl
extends|extends
name|DeferredFunctionCall
block|{
specifier|private
specifier|final
name|FunctionCall
name|call
decl_stmt|;
specifier|private
name|UserDefinedFunction
name|functionDef
decl_stmt|;
specifier|private
name|Expression
name|expression
decl_stmt|;
specifier|private
name|Sequence
name|contextSequence
decl_stmt|;
specifier|private
name|Item
name|contextItem
decl_stmt|;
specifier|private
specifier|final
name|Sequence
index|[]
name|seq
decl_stmt|;
specifier|private
specifier|final
name|DocumentSet
index|[]
name|contextDocs
decl_stmt|;
specifier|private
name|DeferredFunctionCallImpl
parameter_list|(
name|FunctionCall
name|call
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|,
name|Sequence
index|[]
name|seq
parameter_list|,
name|DocumentSet
index|[]
name|contextDocs
parameter_list|)
block|{
name|super
argument_list|(
name|call
operator|.
name|mySignature
argument_list|)
expr_stmt|;
name|this
operator|.
name|contextSequence
operator|=
name|contextSequence
expr_stmt|;
name|this
operator|.
name|contextItem
operator|=
name|contextItem
expr_stmt|;
if|if
condition|(
name|seq
operator|!=
literal|null
condition|)
block|{
comment|// copy the sequence of arguments to make sure it is not overwritten by caller
name|this
operator|.
name|seq
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|seq
argument_list|,
name|seq
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|seq
operator|=
literal|null
expr_stmt|;
block|}
name|this
operator|.
name|contextDocs
operator|=
name|contextDocs
expr_stmt|;
name|this
operator|.
name|call
operator|=
name|call
expr_stmt|;
name|setup
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|setup
parameter_list|()
block|{
name|this
operator|.
name|functionDef
operator|=
operator|(
name|UserDefinedFunction
operator|)
name|call
operator|.
name|functionDef
operator|.
name|clone
argument_list|()
expr_stmt|;
comment|//this.mySignature = this.functionDef.getSignature();
name|this
operator|.
name|expression
operator|=
name|this
operator|.
name|functionDef
expr_stmt|;
name|this
operator|.
name|functionDef
operator|.
name|setCaller
argument_list|(
name|call
argument_list|)
expr_stmt|;
specifier|final
name|SequenceType
name|returnType
init|=
name|this
operator|.
name|functionDef
operator|.
name|getSignature
argument_list|()
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
specifier|final
name|XQueryContext
name|context
init|=
name|call
operator|.
name|context
decl_stmt|;
comment|// add return type checks
if|if
condition|(
name|returnType
operator|.
name|getCardinality
argument_list|()
operator|!=
name|Cardinality
operator|.
name|ZERO_OR_MORE
condition|)
block|{
name|expression
operator|=
operator|new
name|DynamicCardinalityCheck
argument_list|(
name|context
argument_list|,
name|returnType
operator|.
name|getCardinality
argument_list|()
argument_list|,
name|expression
argument_list|,
operator|new
name|Error
argument_list|(
name|Error
operator|.
name|FUNC_RETURN_CARDINALITY
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|returnType
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|)
condition|)
block|{
name|expression
operator|=
operator|new
name|Atomize
argument_list|(
name|context
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|returnType
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
name|expression
operator|=
operator|new
name|UntypedValueCheck
argument_list|(
name|context
argument_list|,
name|returnType
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|expression
argument_list|,
operator|new
name|Error
argument_list|(
name|Error
operator|.
name|FUNC_RETURN_TYPE
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|returnType
operator|.
name|getPrimaryType
argument_list|()
operator|!=
name|Type
operator|.
name|ITEM
condition|)
block|{
name|expression
operator|=
operator|new
name|DynamicTypeCheck
argument_list|(
name|context
argument_list|,
name|returnType
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|expression
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|protected
name|Sequence
name|execute
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|XQueryContext
name|context
init|=
name|call
operator|.
name|context
decl_stmt|;
name|context
operator|.
name|pushDocumentContext
argument_list|()
expr_stmt|;
comment|//context.stackEnter(expression);
name|context
operator|.
name|functionStart
argument_list|(
name|functionDef
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LocalVariable
name|mark
init|=
name|context
operator|.
name|markLocalVariables
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|Sequence
name|returnSeq
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|/*                   Ensure that the arguments are set for a deferred function                   as reset may alreay have been called before our deferred execution                  */
name|functionDef
operator|.
name|setArguments
argument_list|(
name|seq
argument_list|,
name|contextDocs
argument_list|)
expr_stmt|;
name|returnSeq
operator|=
name|expression
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|trace
argument_list|(
literal|"Returning from execute()"
argument_list|)
expr_stmt|;
return|return
name|returnSeq
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|// append location of the function call to the exception message:
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|==
literal|0
condition|)
block|{
name|e
operator|.
name|setLocation
argument_list|(
name|call
operator|.
name|line
argument_list|,
name|call
operator|.
name|column
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|addFunctionCall
argument_list|(
name|functionDef
argument_list|,
name|call
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|context
operator|.
name|popLocalVariables
argument_list|(
name|mark
argument_list|,
name|returnSeq
argument_list|)
expr_stmt|;
name|context
operator|.
name|functionEnd
argument_list|()
expr_stmt|;
comment|//context.stackLeave(expression);
name|context
operator|.
name|popDocumentContext
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|setRecursive
parameter_list|(
name|boolean
name|recursive
parameter_list|)
block|{
name|this
operator|.
name|recursive
operator|=
name|recursive
expr_stmt|;
block|}
specifier|public
name|boolean
name|isRecursive
parameter_list|()
block|{
return|return
name|recursive
return|;
block|}
block|}
end_class

end_unit

