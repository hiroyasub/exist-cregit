begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Basic implementation of the {@link ExpressionVisitor} interface.  * This implementation will traverse a PathExpr object if it wraps  * around a single other expression. All other methods are empty.  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|BasicExpressionVisitor
implements|implements
name|ExpressionVisitor
block|{
annotation|@
name|Override
specifier|public
name|void
name|visit
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|processWrappers
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitCastExpr
parameter_list|(
name|CastExpression
name|expression
parameter_list|)
block|{
comment|//Nothing to do
block|}
comment|/**      * Default implementation will traverse a PathExpr      * if it is just a wrapper around another single      * expression object.      */
annotation|@
name|Override
specifier|public
name|void
name|visitPathExpr
parameter_list|(
name|PathExpr
name|expression
parameter_list|)
block|{
if|if
condition|(
name|expression
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
specifier|final
name|Expression
name|next
init|=
name|expression
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|next
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitFunctionCall
parameter_list|(
name|FunctionCall
name|call
parameter_list|)
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitGeneralComparison
parameter_list|(
name|GeneralComparison
name|comparison
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitUnionExpr
parameter_list|(
name|Union
name|union
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitIntersectionExpr
parameter_list|(
name|Intersect
name|intersect
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitAndExpr
parameter_list|(
name|OpAnd
name|and
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitOrExpr
parameter_list|(
name|OpOr
name|or
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLocationStep
parameter_list|(
name|LocationStep
name|locationStep
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitFilteredExpr
parameter_list|(
name|FilteredExpression
name|filtered
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitPredicate
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitVariableReference
parameter_list|(
name|VariableReference
name|ref
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitVariableDeclaration
parameter_list|(
name|VariableDeclaration
name|decl
parameter_list|)
block|{
comment|// Nothing to do
block|}
specifier|protected
name|void
name|processWrappers
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|Atomize
operator|||
name|expr
operator|instanceof
name|DynamicCardinalityCheck
operator|||
name|expr
operator|instanceof
name|DynamicNameCheck
operator|||
name|expr
operator|instanceof
name|DynamicTypeCheck
operator|||
name|expr
operator|instanceof
name|UntypedValueCheck
condition|)
block|{
name|expr
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|LocationStep
name|findFirstStep
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|expr
operator|instanceof
name|LocationStep
condition|)
block|{
return|return
operator|(
name|LocationStep
operator|)
name|expr
return|;
block|}
specifier|final
name|FirstStepVisitor
name|visitor
init|=
operator|new
name|FirstStepVisitor
argument_list|()
decl_stmt|;
name|expr
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|firstStep
return|;
block|}
specifier|public
specifier|static
name|List
argument_list|<
name|LocationStep
argument_list|>
name|findLocationSteps
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|LocationStep
argument_list|>
name|steps
init|=
operator|new
name|ArrayList
argument_list|<
name|LocationStep
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|expr
operator|instanceof
name|LocationStep
condition|)
block|{
name|steps
operator|.
name|add
argument_list|(
operator|(
name|LocationStep
operator|)
name|expr
argument_list|)
expr_stmt|;
return|return
name|steps
return|;
block|}
name|expr
operator|.
name|accept
argument_list|(
operator|new
name|BasicExpressionVisitor
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|visitPathExpr
parameter_list|(
name|PathExpr
name|expression
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expression
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Expression
name|next
init|=
name|expression
operator|.
name|getExpression
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|next
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|steps
operator|.
name|size
argument_list|()
operator|-
literal|1
operator|!=
name|i
condition|)
block|{
name|steps
operator|.
name|add
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLocationStep
parameter_list|(
name|LocationStep
name|locationStep
parameter_list|)
block|{
name|steps
operator|.
name|add
argument_list|(
name|locationStep
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|steps
return|;
block|}
specifier|public
specifier|static
name|VariableReference
name|findVariableRef
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
specifier|final
name|VariableRefVisitor
name|visitor
init|=
operator|new
name|VariableRefVisitor
argument_list|()
decl_stmt|;
name|expr
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
return|return
name|visitor
operator|.
name|ref
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitForExpression
parameter_list|(
name|ForExpr
name|forExpr
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLetExpression
parameter_list|(
name|LetExpr
name|letExpr
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitOrderByClause
parameter_list|(
name|OrderByClause
name|orderBy
parameter_list|)
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitGroupByClause
parameter_list|(
name|GroupByClause
name|groupBy
parameter_list|)
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitWhereClause
parameter_list|(
name|WhereClause
name|where
parameter_list|)
block|{
comment|// Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitBuiltinFunction
parameter_list|(
name|Function
name|function
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitUserFunction
parameter_list|(
name|UserDefinedFunction
name|function
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitConditional
parameter_list|(
name|ConditionalExpression
name|conditional
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitTryCatch
parameter_list|(
name|TryCatchExpression
name|conditional
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitDocumentConstructor
parameter_list|(
name|DocumentConstructor
name|constructor
parameter_list|)
block|{
comment|// Nothing to do
block|}
specifier|public
name|void
name|visitElementConstructor
parameter_list|(
name|ElementConstructor
name|constructor
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitTextConstructor
parameter_list|(
name|DynamicTextConstructor
name|constructor
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitAttribConstructor
parameter_list|(
name|AttributeConstructor
name|constructor
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitAttribConstructor
parameter_list|(
name|DynamicAttributeConstructor
name|constructor
parameter_list|)
block|{
comment|//Nothing to do
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitSimpleMapOperator
parameter_list|(
name|OpSimpleMap
name|simpleMap
parameter_list|)
block|{
comment|// Nothing to do
block|}
specifier|public
specifier|static
class|class
name|FirstStepVisitor
extends|extends
name|BasicExpressionVisitor
block|{
specifier|private
name|LocationStep
name|firstStep
init|=
literal|null
decl_stmt|;
specifier|public
name|LocationStep
name|getFirstStep
parameter_list|()
block|{
return|return
name|firstStep
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitLocationStep
parameter_list|(
name|LocationStep
name|locationStep
parameter_list|)
block|{
name|firstStep
operator|=
name|locationStep
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|VariableRefVisitor
extends|extends
name|BasicExpressionVisitor
block|{
specifier|private
name|VariableReference
name|ref
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|visitVariableReference
parameter_list|(
name|VariableReference
name|ref
parameter_list|)
block|{
name|this
operator|.
name|ref
operator|=
name|ref
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitPathExpr
parameter_list|(
name|PathExpr
name|expression
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expression
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Expression
name|next
init|=
name|expression
operator|.
name|getExpression
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|next
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

