begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001 The eXist-db Authors  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_comment
comment|/**  * Used to uniquely identify a function by its function name and arity.  *  * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|FunctionId
implements|implements
name|Comparable
argument_list|<
name|FunctionId
argument_list|>
block|{
specifier|private
specifier|final
name|QName
name|qname
decl_stmt|;
specifier|private
specifier|final
name|int
name|argCount
decl_stmt|;
specifier|public
name|FunctionId
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|,
specifier|final
name|int
name|arguments
parameter_list|)
block|{
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
name|this
operator|.
name|argCount
operator|=
name|arguments
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|FunctionId
name|other
parameter_list|)
block|{
specifier|final
name|int
name|cmp
init|=
name|qname
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|argCount
operator|==
name|other
operator|.
name|argCount
operator|||
name|argCount
operator|==
operator|-
literal|1
operator|||
name|other
operator|.
name|argCount
operator|==
operator|-
literal|1
condition|)
block|{
return|return
name|Constants
operator|.
name|EQUAL
return|;
block|}
if|else if
condition|(
name|argCount
operator|<
name|other
operator|.
name|argCount
condition|)
block|{
return|return
name|Constants
operator|.
name|INFERIOR
return|;
block|}
else|else
block|{
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
block|}
else|else
block|{
return|return
name|cmp
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|qname
operator|.
name|getStringValue
argument_list|()
operator|+
literal|"#"
operator|+
name|argCount
return|;
block|}
block|}
end_class

end_unit

