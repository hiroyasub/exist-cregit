begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
operator|.
name|Comparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
operator|.
name|StringTruncationOperator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_class
specifier|public
class|class
name|FunctionFactory
block|{
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_JAVA_BINDING_ATTRIBUTE
init|=
literal|"enable-java-binding"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ENABLE_JAVA_BINDING
init|=
literal|"xquery.enable-java-binding"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DISABLE_DEPRECATED_FUNCTIONS_ATTRIBUTE
init|=
literal|"disable-deprecated-functions"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_DISABLE_DEPRECATED_FUNCTIONS
init|=
literal|"xquery.disable-deprecated-functions"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|DISABLE_DEPRECATED_FUNCTIONS_BY_DEFAULT
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
name|Expression
name|createFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|PathExpr
name|parent
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|)
throws|throws
name|XPathException
block|{
name|QName
name|qname
init|=
literal|null
decl_stmt|;
try|try
block|{
name|qname
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|ast
operator|.
name|getText
argument_list|()
argument_list|,
name|context
operator|.
name|getDefaultFunctionNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|QName
operator|.
name|IllegalQNameException
name|xpe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XPST0081
argument_list|,
literal|"Invalid qname "
operator|+
name|ast
operator|.
name|getText
argument_list|()
operator|+
literal|". "
operator|+
name|xpe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|createFunction
argument_list|(
name|context
argument_list|,
name|qname
argument_list|,
name|ast
argument_list|,
name|parent
argument_list|,
name|params
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Expression
name|createFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|QName
name|qname
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|PathExpr
name|parent
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|createFunction
argument_list|(
name|context
argument_list|,
name|qname
argument_list|,
name|ast
argument_list|,
name|parent
argument_list|,
name|params
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Create a function call.      *      * This method handles all calls to built-in or user-defined      * functions. It also deals with constructor functions and      * optimizes some function calls like starts-with, ends-with or      * contains.      *      * @param context the XQuery context      * @param qname the name of the function      * @param ast the AST node of the function      * @param parent the parent expression of the function      * @param params the parameters to the function      * @param optimizeStrFuncs true if string functions be optimized      *      * @return the function expression      *      * @throws XPathException if an error occurs creating the function      */
specifier|public
specifier|static
name|Expression
name|createFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|QName
name|qname
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|PathExpr
name|parent
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|,
name|boolean
name|optimizeStrFuncs
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|String
name|local
init|=
name|qname
operator|.
name|getLocalPart
argument_list|()
decl_stmt|;
specifier|final
name|String
name|uri
init|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|Expression
name|step
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|optimizeStrFuncs
operator|&&
operator|(
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|||
name|Namespaces
operator|.
name|XSL_NS
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
literal|"starts-with"
operator|.
name|equals
argument_list|(
name|local
argument_list|)
condition|)
block|{
name|step
operator|=
name|startsWith
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|parent
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ends-with"
operator|.
name|equals
argument_list|(
name|local
argument_list|)
condition|)
block|{
name|step
operator|=
name|endsWith
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|parent
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"contains"
operator|.
name|equals
argument_list|(
name|local
argument_list|)
condition|)
block|{
name|step
operator|=
name|contains
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|parent
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"equals"
operator|.
name|equals
argument_list|(
name|local
argument_list|)
condition|)
block|{
name|step
operator|=
name|equals
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|parent
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|//Check if the namespace belongs to one of the schema namespaces.
comment|//If yes, the function is a constructor function
block|}
if|else if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|SCHEMA_NS
argument_list|)
operator|||
name|uri
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|XPATH_DATATYPES_NS
argument_list|)
condition|)
block|{
name|step
operator|=
name|castExpression
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|params
argument_list|,
name|qname
argument_list|)
expr_stmt|;
comment|//Check if the namespace URI starts with "java:". If yes, treat
comment|//the function call as a call to an arbitrary Java function.
block|}
if|else if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"java:"
argument_list|)
condition|)
block|{
name|step
operator|=
name|javaFunctionBinding
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|params
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
comment|//None of the above matched: function is either a built-in function or
comment|//a user-defined function
if|if
condition|(
name|step
operator|==
literal|null
condition|)
block|{
name|step
operator|=
name|functionCall
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|params
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
return|return
name|step
return|;
block|}
comment|/**      * starts-with(node-set, string)      */
specifier|private
specifier|static
name|GeneralComparison
name|startsWith
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|PathExpr
name|parent
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function starts-with() requires two or three arguments"
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function starts-with() requires two or three arguments"
argument_list|)
throw|;
block|}
specifier|final
name|PathExpr
name|p0
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|p1
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|"Second argument of starts-with() is empty"
argument_list|)
throw|;
block|}
specifier|final
name|GeneralComparison
name|op
init|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|p0
argument_list|,
name|p1
argument_list|,
name|Comparison
operator|.
name|EQ
argument_list|,
name|StringTruncationOperator
operator|.
name|RIGHT
argument_list|)
decl_stmt|;
name|op
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
comment|//TODO : not sure for parent -pb
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|parent
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Rewritten start-with as a general comparison with a right truncations"
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|op
operator|.
name|setCollation
argument_list|(
operator|(
name|Expression
operator|)
name|params
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
comment|/**      * ends-with(node-set, string)      */
specifier|private
specifier|static
name|GeneralComparison
name|endsWith
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|PathExpr
name|parent
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function ends-with() requires two or three arguments"
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function ends-with() requires two or three arguments"
argument_list|)
throw|;
block|}
specifier|final
name|PathExpr
name|p0
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|p1
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|"Second argument of ends-with() is empty"
argument_list|)
throw|;
block|}
specifier|final
name|GeneralComparison
name|op
init|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|p0
argument_list|,
name|p1
argument_list|,
name|Comparison
operator|.
name|EQ
argument_list|,
name|StringTruncationOperator
operator|.
name|LEFT
argument_list|)
decl_stmt|;
comment|//TODO : not sure for parent -pb
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|parent
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Rewritten ends-with as a general comparison with a left truncations"
argument_list|)
expr_stmt|;
name|op
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|op
operator|.
name|setCollation
argument_list|(
operator|(
name|Expression
operator|)
name|params
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
comment|/**      * contains(node-set, string)      */
specifier|private
specifier|static
name|GeneralComparison
name|contains
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|PathExpr
name|parent
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function contains() requires two or three arguments"
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function contains() requires two or three arguments"
argument_list|)
throw|;
block|}
specifier|final
name|PathExpr
name|p0
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|p1
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|"Second argument of contains() is empty"
argument_list|)
throw|;
block|}
specifier|final
name|GeneralComparison
name|op
init|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|p0
argument_list|,
name|p1
argument_list|,
name|Comparison
operator|.
name|EQ
argument_list|,
name|StringTruncationOperator
operator|.
name|BOTH
argument_list|)
decl_stmt|;
comment|//TODO : not sure for parent -pb
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|parent
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Rewritten contains() as a general comparison with left and right truncations"
argument_list|)
expr_stmt|;
name|op
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|op
operator|.
name|setCollation
argument_list|(
operator|(
name|Expression
operator|)
name|params
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
comment|/**      * equals(node-set, string)      */
specifier|private
specifier|static
name|GeneralComparison
name|equals
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|PathExpr
name|parent
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function equals() requires two or three arguments"
argument_list|)
throw|;
block|}
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function equals() requires two or three arguments"
argument_list|)
throw|;
block|}
specifier|final
name|PathExpr
name|p0
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|PathExpr
name|p1
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|"Second argument of equals() is empty"
argument_list|)
throw|;
block|}
specifier|final
name|GeneralComparison
name|op
init|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|p0
argument_list|,
name|p1
argument_list|,
name|Comparison
operator|.
name|EQ
argument_list|,
name|StringTruncationOperator
operator|.
name|EQUALS
argument_list|)
decl_stmt|;
comment|//TODO : not sure for parent -pb
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|parent
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Rewritten contains() as a general comparison with no truncations"
argument_list|)
expr_stmt|;
name|op
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|op
operator|.
name|setCollation
argument_list|(
operator|(
name|Expression
operator|)
name|params
operator|.
name|get
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|op
operator|.
name|setCollation
argument_list|(
operator|new
name|StringValue
argument_list|(
literal|"?strength=identical"
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|op
return|;
block|}
specifier|private
specifier|static
name|CastExpression
name|castExpression
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|,
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|!=
literal|1
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Wrong number of arguments for constructor function"
argument_list|)
throw|;
block|}
specifier|final
name|Expression
name|arg
init|=
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|int
name|code
init|=
name|Type
operator|.
name|getType
argument_list|(
name|qname
argument_list|)
decl_stmt|;
specifier|final
name|CastExpression
name|castExpr
init|=
operator|new
name|CastExpression
argument_list|(
name|context
argument_list|,
name|arg
argument_list|,
name|code
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
decl_stmt|;
name|castExpr
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|castExpr
return|;
block|}
specifier|private
specifier|static
name|JavaCall
name|javaFunctionBinding
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|,
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//Only allow java binding if specified in config file<xquery enable-java-binding="yes">
specifier|final
name|String
name|javabinding
init|=
operator|(
name|String
operator|)
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PROPERTY_ENABLE_JAVA_BINDING
argument_list|)
decl_stmt|;
if|if
condition|(
name|javabinding
operator|==
literal|null
operator|||
operator|!
literal|"yes"
operator|.
name|equals
argument_list|(
name|javabinding
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|"Java binding is disabled in the current configuration (see conf.xml)."
operator|+
literal|" Call to "
operator|+
name|qname
operator|.
name|getStringValue
argument_list|()
operator|+
literal|" denied."
argument_list|)
throw|;
block|}
specifier|final
name|JavaCall
name|call
init|=
operator|new
name|JavaCall
argument_list|(
name|context
argument_list|,
name|qname
argument_list|)
decl_stmt|;
name|call
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|call
operator|.
name|setArguments
argument_list|(
name|params
argument_list|)
expr_stmt|;
return|return
name|call
return|;
block|}
specifier|private
specifier|static
name|Function
name|functionCall
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|,
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Function
name|fn
decl_stmt|;
specifier|final
name|String
name|uri
init|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
specifier|final
name|Module
name|module
init|=
name|context
operator|.
name|getModule
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
comment|//Function belongs to a module
if|if
condition|(
name|module
operator|.
name|isInternalModule
argument_list|()
condition|)
block|{
name|fn
operator|=
name|getInternalModuleFunction
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|params
argument_list|,
name|qname
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Function is from an imported XQuery module
name|fn
operator|=
name|getXQueryModuleFunction
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|params
argument_list|,
name|qname
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fn
operator|=
name|getUserDefinedFunction
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|params
argument_list|,
name|qname
argument_list|)
expr_stmt|;
block|}
return|return
name|fn
return|;
block|}
comment|/**      * Gets a Java function from an Java XQuery Extension Module      */
specifier|private
specifier|static
name|Function
name|getInternalModuleFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|,
name|QName
name|qname
parameter_list|,
name|Module
name|module
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//For internal modules: create a new function instance from the class
name|FunctionDef
name|def
init|=
operator|(
operator|(
name|InternalModule
operator|)
name|module
operator|)
operator|.
name|getFunctionDef
argument_list|(
name|qname
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
comment|//TODO: rethink: xsl namespace function should search xpath one too
if|if
condition|(
name|def
operator|==
literal|null
operator|&&
name|Namespaces
operator|.
name|XSL_NS
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
comment|//Search xpath namespace
name|Module
name|_module_
init|=
name|context
operator|.
name|getModule
argument_list|(
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
argument_list|)
decl_stmt|;
if|if
condition|(
name|_module_
operator|!=
literal|null
condition|)
block|{
name|module
operator|=
name|_module_
expr_stmt|;
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
argument_list|,
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|def
operator|=
operator|(
operator|(
name|InternalModule
operator|)
name|module
operator|)
operator|.
name|getFunctionDef
argument_list|(
name|qname
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|def
operator|==
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|FunctionSignature
argument_list|>
name|funcs
init|=
operator|(
operator|(
name|InternalModule
operator|)
name|module
operator|)
operator|.
name|getFunctionsByName
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|funcs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function "
operator|+
name|qname
operator|.
name|getStringValue
argument_list|()
operator|+
literal|"() "
operator|+
literal|" is not defined in module namespace: "
operator|+
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"Unexpectedly received "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|params
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" parameter(s) in call to function "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|qname
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"()'. "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"Defined function signatures are:\r\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|FunctionSignature
name|sig
range|:
name|funcs
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|sig
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
operator|(
name|Boolean
operator|)
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PROPERTY_DISABLE_DEPRECATED_FUNCTIONS
argument_list|)
operator|&&
name|def
operator|.
name|getSignature
argument_list|()
operator|.
name|isDeprecated
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|"Access to deprecated functions is not allowed. Call to '"
operator|+
name|qname
operator|.
name|getStringValue
argument_list|()
operator|+
literal|"()' denied. "
operator|+
name|def
operator|.
name|getSignature
argument_list|()
operator|.
name|getDeprecated
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|Function
name|fn
init|=
name|Function
operator|.
name|createFunction
argument_list|(
name|context
argument_list|,
name|ast
argument_list|,
name|def
argument_list|)
decl_stmt|;
name|fn
operator|.
name|setArguments
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|fn
operator|.
name|setASTNode
argument_list|(
name|ast
argument_list|)
expr_stmt|;
return|return
operator|new
name|InternalFunctionCall
argument_list|(
name|fn
argument_list|)
return|;
block|}
comment|/**      * Gets an user defined function from the XQuery      */
specifier|private
specifier|static
name|FunctionCall
name|getUserDefinedFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|,
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|FunctionCall
name|fc
decl_stmt|;
specifier|final
name|UserDefinedFunction
name|func
init|=
name|context
operator|.
name|resolveFunction
argument_list|(
name|qname
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|!=
literal|null
condition|)
block|{
name|fc
operator|=
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
name|func
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setArguments
argument_list|(
name|params
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Create a forward reference which will be resolved later
name|fc
operator|=
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
name|qname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|addForwardReference
argument_list|(
name|fc
argument_list|)
expr_stmt|;
block|}
return|return
name|fc
return|;
block|}
comment|/**      * Gets an XQuery function from an XQuery Module      */
specifier|private
specifier|static
name|FunctionCall
name|getXQueryModuleFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|XQueryAST
name|ast
parameter_list|,
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|,
name|QName
name|qname
parameter_list|,
name|Module
name|module
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|FunctionCall
name|fc
decl_stmt|;
specifier|final
name|UserDefinedFunction
name|func
init|=
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|getFunction
argument_list|(
name|qname
argument_list|,
name|params
operator|.
name|size
argument_list|()
argument_list|,
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|==
literal|null
condition|)
block|{
comment|// check if the module has been compiled already
if|if
condition|(
name|module
operator|.
name|isReady
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function "
operator|+
name|qname
operator|.
name|getStringValue
argument_list|()
operator|+
literal|"() is not defined in namespace '"
operator|+
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
comment|// If not, postpone the function resolution
comment|// Register a forward reference with the root module, so it gets resolved
comment|// when the main query has been compiled.
block|}
else|else
block|{
name|fc
operator|=
operator|new
name|FunctionCall
argument_list|(
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|getContext
argument_list|()
argument_list|,
name|qname
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|getContext
argument_list|()
operator|==
name|context
condition|)
block|{
name|context
operator|.
name|addForwardReference
argument_list|(
name|fc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|.
name|getRootContext
argument_list|()
operator|.
name|addForwardReference
argument_list|(
name|fc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|fc
operator|=
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
name|func
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setArguments
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|fc
operator|.
name|setLocation
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|,
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|fc
return|;
block|}
comment|/**      * Wrap a function call into a user defined function.      * This is used to handle dynamic function calls or partial      * function applications on built in functions.      *       * @param context current context      * @param call the function call to be wrapped      * @return a new function call referencing an inline function      * @throws XPathException in case of a static error      */
specifier|public
specifier|static
name|FunctionCall
name|wrap
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Function
name|call
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|argCount
init|=
name|call
operator|.
name|getArgumentCount
argument_list|()
decl_stmt|;
specifier|final
name|QName
index|[]
name|variables
init|=
operator|new
name|QName
index|[
name|argCount
index|]
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|innerArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|argCount
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|wrapperArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|argCount
argument_list|)
decl_stmt|;
specifier|final
name|FunctionSignature
name|signature
init|=
name|call
operator|.
name|getSignature
argument_list|()
decl_stmt|;
comment|// the parameters of the newly created inline function:
specifier|final
name|List
argument_list|<
name|SequenceType
argument_list|>
name|newParamTypes
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|SequenceType
index|[]
name|paramTypes
init|=
name|signature
operator|.
name|getArgumentTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argCount
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Expression
name|param
init|=
name|call
operator|.
name|getArgument
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|wrapperArgs
operator|.
name|add
argument_list|(
name|param
argument_list|)
expr_stmt|;
name|QName
name|varName
init|=
operator|new
name|QName
argument_list|(
literal|"vp"
operator|+
name|i
argument_list|,
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|)
decl_stmt|;
name|variables
index|[
name|i
index|]
operator|=
name|varName
expr_stmt|;
specifier|final
name|VariableReference
name|ref
init|=
operator|new
name|VariableReference
argument_list|(
name|context
argument_list|,
name|varName
argument_list|)
decl_stmt|;
name|innerArgs
operator|.
name|add
argument_list|(
name|ref
argument_list|)
expr_stmt|;
comment|// copy parameter sequence types
comment|// overloaded functions like concat may have an arbitrary number of arguments
if|if
condition|(
name|i
operator|<
name|paramTypes
operator|.
name|length
condition|)
block|{
name|newParamTypes
operator|.
name|add
argument_list|(
name|paramTypes
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
comment|// overloaded function: add last sequence type
block|{
name|newParamTypes
operator|.
name|add
argument_list|(
name|paramTypes
index|[
name|paramTypes
operator|.
name|length
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|SequenceType
index|[]
name|newParamArray
init|=
name|newParamTypes
operator|.
name|toArray
argument_list|(
operator|new
name|SequenceType
index|[
name|newParamTypes
operator|.
name|size
argument_list|()
index|]
argument_list|)
decl_stmt|;
specifier|final
name|FunctionSignature
name|newSignature
init|=
operator|new
name|FunctionSignature
argument_list|(
name|signature
argument_list|)
decl_stmt|;
name|newSignature
operator|.
name|setArgumentTypes
argument_list|(
name|newParamArray
argument_list|)
expr_stmt|;
specifier|final
name|UserDefinedFunction
name|func
init|=
operator|new
name|UserDefinedFunction
argument_list|(
name|context
argument_list|,
name|newSignature
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|QName
name|varName
range|:
name|variables
control|)
block|{
name|func
operator|.
name|addVariable
argument_list|(
name|varName
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|setArguments
argument_list|(
name|innerArgs
argument_list|)
expr_stmt|;
name|func
operator|.
name|setFunctionBody
argument_list|(
name|call
argument_list|)
expr_stmt|;
specifier|final
name|FunctionCall
name|wrappedCall
init|=
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
name|func
argument_list|)
decl_stmt|;
name|wrappedCall
operator|.
name|setArguments
argument_list|(
name|wrapperArgs
argument_list|)
expr_stmt|;
return|return
name|wrappedCall
return|;
block|}
block|}
end_class

end_unit

