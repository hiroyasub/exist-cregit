begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist-db Open Source Native XML Database  * Copyright (C) 2001 The eXist-db Authors  *  * info@exist-db.org  * http://www.exist-db.org  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public  * License as published by the Free Software Foundation; either  * version 2.1 of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
operator|.
name|InternalValue
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Defines<a href="https://www.w3.org/TR/xpath-31/#prod-xpath31-OccurrenceIndicator">XPath Occurrence Indicators</a>  * (*,?,+), and additionally defines {@link #EMPTY_SEQUENCE}, and {@link #EXACTLY_ONE} for convenience.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_enum
specifier|public
enum|enum
name|Cardinality
block|{
name|EMPTY_SEQUENCE
argument_list|(
name|ZERO
argument_list|)
block|,
comment|//TODO(AR) can we eliminate this?
name|EXACTLY_ONE
argument_list|(
name|ONE
argument_list|)
block|,
comment|//TODO(AR) eliminate this in favour of probably ONE_OR_MORE
name|_MANY
argument_list|(
name|MANY
argument_list|)
block|,
comment|/**      * indicator '?'      */
name|ZERO_OR_ONE
argument_list|(
operator|(
name|byte
operator|)
operator|(
name|ZERO
operator||
name|ONE
operator|)
argument_list|)
block|,
comment|/**      * indicator '+'      */
name|ONE_OR_MORE
argument_list|(
operator|(
name|byte
operator|)
operator|(
name|ONE
operator||
name|MANY
operator|)
argument_list|)
block|,
comment|/**      * indicator '*'      */
name|ZERO_OR_MORE
argument_list|(
operator|(
name|byte
operator|)
operator|(
name|ZERO
operator||
name|ONE
operator||
name|MANY
operator|)
argument_list|)
block|;
specifier|private
specifier|final
name|byte
name|val
decl_stmt|;
name|Cardinality
parameter_list|(
specifier|final
name|byte
name|val
parameter_list|)
block|{
name|this
operator|.
name|val
operator|=
name|val
expr_stmt|;
block|}
comment|/**      * The cardinality represents a sequence of at least one value.      *      * @return true if the cardinality represents a sequence of at least one value, or false otherwise.      */
specifier|public
name|boolean
name|atLeastOne
parameter_list|()
block|{
return|return
operator|(
name|val
operator|&
name|ZERO
operator|)
operator|==
literal|0
return|;
block|}
comment|/**      * The cardinality represents a sequence of at most one value.      *      * @return true if the cardinality represents a sequence of at most one value, or false otherwise.      */
specifier|public
name|boolean
name|atMostOne
parameter_list|()
block|{
return|return
operator|(
name|val
operator|&
name|MANY
operator|)
operator|==
literal|0
return|;
block|}
comment|/**      * Tests whether this Cardinality is a sub-cardinality or equal      * of {@code other}.      *      * @param other the other cardinality      *      * @return true if this is a sub-cardinality or equal cardinality of {@code other}.      */
specifier|public
name|boolean
name|isSubCardinalityOrEqualOf
parameter_list|(
specifier|final
name|Cardinality
name|other
parameter_list|)
block|{
return|return
operator|(
name|val
operator||
name|other
operator|.
name|val
operator|)
operator|==
name|other
operator|.
name|val
return|;
block|}
comment|/**      * Tests whether this Cardinality is a super-cardinality or equal      * of {@code other}.      *      * @param other the other cardinality      *      * @return true if this is a super-cardinality or equal cardinality of {@code other}.      */
specifier|public
name|boolean
name|isSuperCardinalityOrEqualOf
parameter_list|(
specifier|final
name|Cardinality
name|other
parameter_list|)
block|{
return|return
operator|(
name|val
operator|&
name|other
operator|.
name|val
operator|)
operator|==
name|other
operator|.
name|val
return|;
block|}
comment|/**      * Given two cardinalities, return a cardinality that is capable of      * representing both,      * i.e.: {@code a.isSubCardinalityOrEqualOf(max(a, b))&& b.isSubCardinalityOrEqualOf(max(a, b))&& b.max(a, b))      *      * @param a the first cardinality      * @param b the second cardinality      */
specifier|public
specifier|static
name|Cardinality
name|superCardinalityOf
parameter_list|(
specifier|final
name|Cardinality
name|a
parameter_list|,
specifier|final
name|Cardinality
name|b
parameter_list|)
block|{
specifier|final
name|byte
name|max
init|=
operator|(
name|byte
operator|)
operator|(
name|a
operator|.
name|val
operator||
name|b
operator|.
name|val
operator|)
decl_stmt|;
for|for
control|(
specifier|final
name|Cardinality
name|cardinality
range|:
name|Cardinality
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|cardinality
operator|.
name|val
operator|==
name|max
condition|)
block|{
return|return
name|cardinality
return|;
block|}
block|}
throw|throw
operator|new
name|IllegalStateException
argument_list|()
throw|;
block|}
comment|/**      * Get an XQuery notation representation of the cardinality.      *      * @return the XQuery notation      */
specifier|public
name|String
name|toXQueryCardinalityString
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|EMPTY_SEQUENCE
case|:
return|return
literal|"empty-sequence()"
return|;
case|case
name|EXACTLY_ONE
case|:
return|return
literal|""
return|;
case|case
name|ZERO_OR_ONE
case|:
return|return
literal|"?"
return|;
case|case
name|_MANY
case|:
case|case
name|ONE_OR_MORE
case|:
return|return
literal|"+"
return|;
case|case
name|ZERO_OR_MORE
case|:
return|return
literal|"*"
return|;
default|default:
comment|// impossible
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown cardinality: "
operator|+
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Get a human pronounceable description of the cardinality.      *      * @return a pronounceable description      */
specifier|public
name|String
name|getHumanDescription
parameter_list|()
block|{
switch|switch
condition|(
name|this
condition|)
block|{
case|case
name|EMPTY_SEQUENCE
case|:
return|return
literal|"empty"
return|;
case|case
name|EXACTLY_ONE
case|:
return|return
literal|"exactly one"
return|;
case|case
name|ZERO_OR_ONE
case|:
return|return
literal|"zero or one"
return|;
case|case
name|_MANY
case|:
case|case
name|ONE_OR_MORE
case|:
return|return
literal|"one or more"
return|;
case|case
name|ZERO_OR_MORE
case|:
return|return
literal|"zero or more"
return|;
default|default:
comment|// impossible
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unknown cardinality: "
operator|+
name|name
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|static
class|class
name|InternalValue
block|{
specifier|static
specifier|final
name|byte
name|ZERO
init|=
literal|1
decl_stmt|;
specifier|static
specifier|final
name|byte
name|ONE
init|=
literal|2
decl_stmt|;
specifier|static
specifier|final
name|byte
name|MANY
init|=
literal|4
decl_stmt|;
block|}
block|}
end_enum

end_unit

