begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2020 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NewArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Alternative to {@link ValueSequence}, this version  * is much faster, but it does not support sorting!  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|ArrayListValueSequence
extends|extends
name|AbstractSequence
implements|implements
name|MemoryNodeSet
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ArrayListValueSequence
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|Item
argument_list|>
name|values
decl_stmt|;
comment|// used to keep track of the type of added items.
comment|// will be Type.ANY_TYPE if the type is unknown
comment|// and Type.ITEM if there are items of mixed type.
specifier|private
name|int
name|itemType
init|=
name|Type
operator|.
name|ANY_TYPE
decl_stmt|;
specifier|private
name|int
name|state
init|=
literal|0
decl_stmt|;
specifier|public
name|ArrayListValueSequence
parameter_list|()
block|{
name|this
operator|.
name|isEmpty
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|hasOne
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|ArrayListValueSequence
parameter_list|(
specifier|final
name|int
name|initialSize
parameter_list|)
block|{
name|this
operator|.
name|isEmpty
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|hasOne
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|initialSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArrayListValueSequence
parameter_list|(
specifier|final
name|Sequence
name|otherSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|this
operator|.
name|isEmpty
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|hasOne
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|otherSequence
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|otherSequence
argument_list|)
expr_stmt|;
block|}
specifier|public
name|ArrayListValueSequence
parameter_list|(
specifier|final
name|Item
modifier|...
name|items
parameter_list|)
block|{
name|this
operator|.
name|isEmpty
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|hasOne
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|values
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|items
operator|.
name|length
argument_list|)
expr_stmt|;
name|addAll
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|items
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isEmpty
condition|)
block|{
name|setHasChanged
argument_list|()
expr_stmt|;
block|}
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|this
operator|.
name|itemType
operator|=
name|Type
operator|.
name|ANY_TYPE
expr_stmt|;
name|this
operator|.
name|isEmpty
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|hasOne
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
name|isEmpty
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasOne
parameter_list|()
block|{
return|return
name|hasOne
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|add
parameter_list|(
specifier|final
name|Item
name|item
parameter_list|)
block|{
if|if
condition|(
name|hasOne
condition|)
block|{
name|hasOne
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isEmpty
condition|)
block|{
name|isEmpty
operator|=
literal|false
expr_stmt|;
name|hasOne
operator|=
literal|true
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|itemType
operator|=
name|item
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|itemType
operator|!=
name|item
operator|.
name|getType
argument_list|()
condition|)
block|{
name|itemType
operator|=
name|Type
operator|.
name|getCommonSuperType
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
block|}
name|setHasChanged
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addAll
parameter_list|(
specifier|final
name|List
argument_list|<
name|Item
argument_list|>
name|items
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Integer
name|knownType
parameter_list|)
block|{
if|if
condition|(
operator|!
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|hasOne
condition|)
block|{
name|hasOne
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|isEmpty
condition|)
block|{
name|isEmpty
operator|=
literal|false
expr_stmt|;
name|hasOne
operator|=
literal|true
expr_stmt|;
block|}
name|values
operator|.
name|addAll
argument_list|(
name|items
argument_list|)
expr_stmt|;
if|if
condition|(
name|knownType
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|itemType
operator|=
name|knownType
expr_stmt|;
block|}
if|else if
condition|(
name|itemType
operator|!=
name|knownType
condition|)
block|{
name|itemType
operator|=
name|Type
operator|.
name|getCommonSuperType
argument_list|(
name|knownType
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
specifier|final
name|Item
name|item
range|:
name|items
control|)
block|{
if|if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|ITEM
condition|)
block|{
comment|// stop, already as loose as possible
break|break;
block|}
if|if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|itemType
operator|=
name|item
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|itemType
operator|!=
name|item
operator|.
name|getType
argument_list|()
condition|)
block|{
name|itemType
operator|=
name|Type
operator|.
name|getCommonSuperType
argument_list|(
name|item
operator|.
name|getType
argument_list|()
argument_list|,
name|itemType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|addAll
parameter_list|(
specifier|final
name|Sequence
name|otherSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|otherSequence
operator|==
literal|null
operator|||
name|otherSequence
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|otherSequence
operator|instanceof
name|ArrayListValueSequence
condition|)
block|{
specifier|final
name|ArrayListValueSequence
name|other
init|=
operator|(
name|ArrayListValueSequence
operator|)
name|otherSequence
decl_stmt|;
name|addAll
argument_list|(
name|other
operator|.
name|values
argument_list|,
name|other
operator|.
name|itemType
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|SequenceIterator
name|iterator
init|=
name|otherSequence
operator|.
name|iterate
argument_list|()
decl_stmt|;
if|if
condition|(
name|iterator
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Iterator == null: {}"
argument_list|,
name|otherSequence
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
for|for
control|(
init|;
name|iterator
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|add
argument_list|(
name|iterator
operator|.
name|nextItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|setHasChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|itemType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|?
name|Type
operator|.
name|ITEM
else|:
name|itemType
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
block|{
return|return
operator|new
name|ArrayListValueSequenceIterator
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
block|{
return|return
operator|new
name|ArrayListValueSequenceIterator
argument_list|(
name|values
operator|.
name|iterator
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getItemCountLong
parameter_list|()
block|{
return|return
name|values
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Item
name|itemAt
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
name|values
operator|.
name|get
argument_list|(
name|pos
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPersistentSet
parameter_list|()
block|{
if|if
condition|(
name|isEmpty
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|itemType
operator|!=
name|Type
operator|.
name|ANY_TYPE
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|itemType
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|NodeValue
operator|)
name|value
operator|)
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
name|value
operator|.
name|destroy
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeDuplicates
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Item
argument_list|>
name|newValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|values
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|newType
init|=
name|Type
operator|.
name|ANY_TYPE
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Item
name|value
init|=
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|boolean
name|foundDuplicate
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
comment|// look for a duplicate node
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|Item
name|otherValue
init|=
name|values
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|otherValue
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
if|if
condition|(
name|ItemComparator
operator|.
name|INSTANCE
operator|.
name|compare
argument_list|(
name|value
argument_list|,
name|otherValue
argument_list|)
operator|==
literal|0
condition|)
block|{
name|foundDuplicate
operator|=
literal|true
expr_stmt|;
break|break;
comment|// exit j loop
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|foundDuplicate
condition|)
block|{
name|newValues
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
if|if
condition|(
name|newType
operator|==
name|Type
operator|.
name|ANY_TYPE
condition|)
block|{
name|newType
operator|=
name|value
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|newType
operator|!=
name|value
operator|.
name|getType
argument_list|()
condition|)
block|{
name|newType
operator|=
name|Type
operator|.
name|getCommonSuperType
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|newType
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|values
operator|.
name|clear
argument_list|()
expr_stmt|;
name|addAll
argument_list|(
name|newValues
argument_list|,
name|newType
argument_list|)
expr_stmt|;
name|setHasChanged
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearContext
parameter_list|(
specifier|final
name|int
name|contextId
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
operator|(
operator|(
name|NodeValue
operator|)
name|value
operator|)
operator|.
name|clearContext
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|setHasChanged
parameter_list|()
block|{
name|state
operator|=
operator|(
name|state
operator|==
name|Integer
operator|.
name|MAX_VALUE
condition|?
name|state
operator|=
literal|1
else|:
name|state
operator|+
literal|1
operator|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getState
parameter_list|()
block|{
return|return
name|state
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasChanged
parameter_list|(
specifier|final
name|int
name|previousState
parameter_list|)
block|{
return|return
name|state
operator|!=
name|previousState
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCacheable
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeSet
name|toNodeSet
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
name|isEmpty
condition|)
block|{
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
comment|// for this method to work, all items have to be nodes
if|if
condition|(
name|itemType
operator|!=
name|Type
operator|.
name|ANY_TYPE
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|itemType
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
specifier|final
name|NodeSet
name|set
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<=
name|values
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|NodeValue
name|v
init|=
operator|(
name|NodeValue
operator|)
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
comment|// found an in-memory document
specifier|final
name|DocumentImpl
name|doc
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|DOCUMENT
condition|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|v
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
operator|(
operator|(
name|NodeImpl
operator|)
name|v
operator|)
operator|.
name|getOwnerDocument
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
continue|continue;
block|}
comment|// make this document persistent: doc.makePersistent()
comment|// returns a map of all root node ids mapped to the corresponding
comment|// persistent node. We scan the current sequence and replace all
comment|// in-memory nodes with their new persistent node objects.
specifier|final
name|DocumentImpl
name|expandedDoc
init|=
name|doc
operator|.
name|expandRefs
argument_list|(
literal|null
argument_list|)
decl_stmt|;
specifier|final
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
name|newDoc
init|=
name|expandedDoc
operator|.
name|makePersistent
argument_list|()
decl_stmt|;
if|if
condition|(
name|newDoc
operator|!=
literal|null
condition|)
block|{
name|NodeId
name|rootId
init|=
name|newDoc
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNodeFactory
argument_list|()
operator|.
name|createInstance
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
init|;
name|j
operator|<=
name|values
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|v
operator|=
operator|(
name|NodeValue
operator|)
name|values
operator|.
name|get
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|v
operator|.
name|getImplementationType
argument_list|()
operator|!=
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|v
decl_stmt|;
specifier|final
name|Document
name|nodeOwnerDoc
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|nodeOwnerDoc
operator|=
operator|(
name|Document
operator|)
name|node
expr_stmt|;
block|}
else|else
block|{
name|nodeOwnerDoc
operator|=
name|node
operator|.
name|getOwnerDocument
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nodeOwnerDoc
operator|==
name|doc
condition|)
block|{
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|node
operator|=
name|expandedDoc
operator|.
name|getAttribute
argument_list|(
name|node
operator|.
name|getNodeNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|node
operator|=
name|expandedDoc
operator|.
name|getNode
argument_list|(
name|node
operator|.
name|getNodeNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|NodeId
name|nodeId
init|=
name|node
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeId
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Internal error: nodeId == null"
argument_list|)
throw|;
block|}
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|nodeId
operator|=
name|rootId
expr_stmt|;
block|}
else|else
block|{
name|nodeId
operator|=
name|rootId
operator|.
name|append
argument_list|(
name|nodeId
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeProxy
name|p
init|=
operator|new
name|NodeProxy
argument_list|(
name|newDoc
argument_list|,
name|nodeId
argument_list|,
name|node
operator|.
name|getNodeType
argument_list|()
argument_list|)
decl_stmt|;
comment|// replace the node by the NodeProxy
name|values
operator|.
name|set
argument_list|(
name|j
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|setHasChanged
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|set
operator|.
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|values
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|set
operator|.
name|add
argument_list|(
operator|(
name|NodeProxy
operator|)
name|v
argument_list|)
expr_stmt|;
block|}
block|}
comment|//            if (holderVar != null) {
comment|//                holderVar.setValue(set);
comment|//            }
return|return
name|set
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: the sequence cannot be converted into"
operator|+
literal|" a node set. Item type is "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|itemType
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|MemoryNodeSet
name|toMemNodeSet
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
name|isEmpty
condition|)
block|{
return|return
name|MemoryNodeSet
operator|.
name|EMPTY
return|;
block|}
if|if
condition|(
name|itemType
operator|==
name|Type
operator|.
name|ANY_TYPE
operator|||
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|itemType
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: the sequence cannot be converted into"
operator|+
literal|" a node set. Item type is "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|itemType
argument_list|)
argument_list|)
throw|;
block|}
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeValue
name|v
init|=
operator|(
name|NodeValue
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: the sequence cannot be converted into"
operator|+
literal|" a MemoryNodeSet. It contains nodes from stored resources."
argument_list|)
throw|;
block|}
block|}
name|expand
argument_list|()
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Scan the sequence and check all in-memory documents.      * They may contains references to nodes stored in the database.      * Expand those references to get a pure in-memory DOM tree.      */
specifier|private
name|void
name|expand
parameter_list|()
block|{
specifier|final
name|Set
argument_list|<
name|DocumentImpl
argument_list|>
name|docs
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
specifier|final
name|DocumentImpl
name|ownerDoc
init|=
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|?
operator|(
name|DocumentImpl
operator|)
name|node
else|:
name|node
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|ownerDoc
operator|.
name|hasReferenceNodes
argument_list|()
condition|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|ownerDoc
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
specifier|final
name|DocumentImpl
name|doc
range|:
name|docs
control|)
block|{
name|doc
operator|.
name|expand
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ArrayListValueSequenceIterator
implements|implements
name|SequenceIterator
block|{
specifier|private
specifier|final
name|Iterator
argument_list|<
name|Item
argument_list|>
name|iterator
decl_stmt|;
specifier|public
name|ArrayListValueSequenceIterator
parameter_list|(
specifier|final
name|Iterator
argument_list|<
name|Item
argument_list|>
name|iterator
parameter_list|)
block|{
name|this
operator|.
name|iterator
operator|=
name|iterator
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|iterator
operator|.
name|hasNext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Item
name|nextItem
parameter_list|()
block|{
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|iterator
operator|.
name|next
argument_list|()
return|;
block|}
block|}
comment|//<editor-fold desc="Methods of MemoryNodeSet">
annotation|@
name|Override
specifier|public
name|Sequence
name|getAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
name|node
operator|.
name|selectAttributes
argument_list|(
name|test
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getDescendantAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
name|node
operator|.
name|selectDescendantAttributes
argument_list|(
name|test
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getChildren
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
name|node
operator|.
name|selectChildren
argument_list|(
name|test
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getChildrenForParent
parameter_list|(
specifier|final
name|NodeImpl
name|parent
parameter_list|)
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeId
argument_list|()
operator|.
name|isChildOf
argument_list|(
name|parent
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getDescendants
parameter_list|(
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
name|node
operator|.
name|selectDescendants
argument_list|(
name|includeSelf
argument_list|,
name|test
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getAncestors
parameter_list|(
specifier|final
name|boolean
name|includeSelf
parameter_list|,
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
name|node
operator|.
name|selectAncestors
argument_list|(
name|includeSelf
argument_list|,
name|test
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getParents
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
specifier|final
name|NodeImpl
name|parent
init|=
operator|(
name|NodeImpl
operator|)
name|node
operator|.
name|selectParentNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|parent
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getSelf
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
if|if
condition|(
operator|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
operator|&&
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
operator|)
operator|||
name|test
operator|.
name|matches
argument_list|(
name|node
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getPrecedingSiblings
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
comment|// if the context node is an attribute or namespace node, the preceding-sibling axis is empty
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|node
operator|.
name|selectPrecedingSiblings
argument_list|(
name|test
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getPreceding
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|int
name|position
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
name|node
operator|.
name|selectPreceding
argument_list|(
name|test
argument_list|,
name|nodes
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getFollowingSiblings
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
comment|// if the context node is an attribute or namespace node, the following-sibling axis is empty
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ATTRIBUTE_NODE
condition|)
block|{
name|node
operator|.
name|selectFollowingSiblings
argument_list|(
name|test
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|getFollowing
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|int
name|position
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
name|node
operator|.
name|selectFollowing
argument_list|(
name|test
argument_list|,
name|nodes
argument_list|,
name|position
argument_list|)
expr_stmt|;
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|selectDescendants
parameter_list|(
specifier|final
name|MemoryNodeSet
name|descendants
parameter_list|)
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|descendants
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|NodeImpl
name|descendant
init|=
name|descendants
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|descendant
operator|.
name|getNodeId
argument_list|()
operator|.
name|isDescendantOrSelfOf
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|selectChildren
parameter_list|(
specifier|final
name|MemoryNodeSet
name|children
parameter_list|)
block|{
specifier|final
name|ArrayListValueSequence
name|nodes
init|=
operator|new
name|ArrayListValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|NodeImpl
name|descendant
init|=
name|children
operator|.
name|get
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|descendant
operator|.
name|getNodeId
argument_list|()
operator|.
name|isChildOf
argument_list|(
name|node
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
name|nodes
operator|.
name|add
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|nodes
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchSelf
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
if|if
condition|(
operator|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
operator|&&
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ATTRIBUTE_NODE
operator|)
operator|||
name|test
operator|.
name|matches
argument_list|(
name|node
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchChildren
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|matchChildren
argument_list|(
name|test
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|matchAttributes
argument_list|(
name|test
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|matchDescendantAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
specifier|final
name|Item
name|value
range|:
name|values
control|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|matchDescendantAttributes
argument_list|(
name|test
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|values
operator|.
name|size
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NodeImpl
name|get
parameter_list|(
specifier|final
name|int
name|which
parameter_list|)
block|{
return|return
operator|(
name|NodeImpl
operator|)
name|values
operator|.
name|get
argument_list|(
name|which
argument_list|)
return|;
block|}
comment|//</editor-fold>
block|}
end_class

end_unit

