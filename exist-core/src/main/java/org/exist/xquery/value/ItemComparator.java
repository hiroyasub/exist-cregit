begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2014 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_comment
comment|/**  * Comparator for comparing instances of Item  * apart from the XQuery atomic types there are  * two Node types in eXist org.exist.dom.persistent.*  * and org.exist.dom.memtree.* this class is  * used so that both types can be compared to each other  * as Item even though they have quite different inheritance  * hierarchies.  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|ItemComparator
implements|implements
name|Comparator
argument_list|<
name|Item
argument_list|>
block|{
specifier|public
specifier|final
specifier|static
name|ItemComparator
name|INSTANCE
init|=
operator|new
name|ItemComparator
argument_list|()
decl_stmt|;
specifier|private
name|ItemComparator
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|int
name|compare
parameter_list|(
specifier|final
name|Item
name|n1
parameter_list|,
specifier|final
name|Item
name|n2
parameter_list|)
block|{
if|if
condition|(
name|n1
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
operator|&&
operator|(
operator|!
operator|(
name|n2
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
operator|)
operator|)
condition|)
block|{
return|return
name|Constants
operator|.
name|INFERIOR
return|;
block|}
if|else if
condition|(
name|n1
operator|instanceof
name|Comparable
condition|)
block|{
return|return
operator|(
operator|(
name|Comparable
operator|)
name|n1
operator|)
operator|.
name|compareTo
argument_list|(
name|n2
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Constants
operator|.
name|INFERIOR
return|;
block|}
block|}
block|}
end_class

end_unit

