begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_comment
comment|/**  * Definition: integer is derived from decimal by fixing the value of fractionDigits to be 0.  * This results in the standard mathematical concept of the integer numbers.  * The value space of integer is the infinite set {...,-2,-1,0,1,2,...}.  * The base type of integer is decimal.  * See http://www.w3.org/TR/xmlschema-2/#integer  */
end_comment

begin_class
specifier|public
class|class
name|IntegerValue
extends|extends
name|NumericValue
block|{
comment|//TODO this class should be split into numerous sub classes for each xs: type with proper
comment|//inheritance as defined by http://www.w3.org/TR/xmlschema-2/#built-in-datatypes
specifier|public
specifier|static
specifier|final
name|IntegerValue
name|ZERO
init|=
operator|new
name|IntegerValue
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|ZERO_BIGINTEGER
init|=
operator|new
name|BigInteger
argument_list|(
literal|"0"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|ONE_BIGINTEGER
init|=
operator|new
name|BigInteger
argument_list|(
literal|"1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|MINUS_ONE_BIGINTEGER
init|=
operator|new
name|BigInteger
argument_list|(
literal|"-1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|LARGEST_LONG
init|=
operator|new
name|BigInteger
argument_list|(
literal|"9223372036854775807"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|SMALLEST_LONG
init|=
operator|new
name|BigInteger
argument_list|(
literal|"-9223372036854775808"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|LARGEST_UNSIGNED_LONG
init|=
operator|new
name|BigInteger
argument_list|(
literal|"18446744073709551615"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|LARGEST_INT
init|=
operator|new
name|BigInteger
argument_list|(
literal|"2147483647"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|SMALLEST_INT
init|=
operator|new
name|BigInteger
argument_list|(
literal|"-2147483648"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|LARGEST_UNSIGNED_INT
init|=
operator|new
name|BigInteger
argument_list|(
literal|"4294967295"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|LARGEST_SHORT
init|=
operator|new
name|BigInteger
argument_list|(
literal|"32767"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|SMALLEST_SHORT
init|=
operator|new
name|BigInteger
argument_list|(
literal|"-32768"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|LARGEST_UNSIGNED_SHORT
init|=
operator|new
name|BigInteger
argument_list|(
literal|"65535"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|LARGEST_BYTE
init|=
operator|new
name|BigInteger
argument_list|(
literal|"127"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|SMALLEST_BYTE
init|=
operator|new
name|BigInteger
argument_list|(
literal|"-128"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|BigInteger
name|LARGEST_UNSIGNED_BYTE
init|=
operator|new
name|BigInteger
argument_list|(
literal|"255"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|BigInteger
name|value
decl_stmt|;
specifier|private
specifier|final
name|int
name|type
decl_stmt|;
specifier|public
name|IntegerValue
parameter_list|(
specifier|final
name|long
name|value
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|INTEGER
expr_stmt|;
block|}
specifier|public
name|IntegerValue
parameter_list|(
specifier|final
name|BigInteger
name|integer
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|integer
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|Type
operator|.
name|INTEGER
expr_stmt|;
block|}
specifier|public
name|IntegerValue
parameter_list|(
specifier|final
name|long
name|value
parameter_list|,
specifier|final
name|int
name|type
parameter_list|)
throws|throws
name|XPathException
block|{
name|this
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IntegerValue
parameter_list|(
specifier|final
name|BigInteger
name|value
parameter_list|,
specifier|final
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|requiredType
expr_stmt|;
if|if
condition|(
operator|!
name|checkType
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FORG0001
argument_list|,
literal|"can not convert '"
operator|+
name|value
operator|+
literal|"' to "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|IntegerValue
parameter_list|(
specifier|final
name|String
name|stringValue
parameter_list|)
throws|throws
name|XPathException
block|{
name|this
argument_list|(
name|stringValue
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IntegerValue
parameter_list|(
specifier|final
name|String
name|stringValue
parameter_list|,
specifier|final
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
name|this
operator|.
name|value
operator|=
operator|new
name|BigInteger
argument_list|(
name|StringValue
operator|.
name|trimWhitespace
argument_list|(
name|stringValue
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|requiredType
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|checkType
argument_list|()
operator|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FORG0001
argument_list|,
literal|"can not convert '"
operator|+
name|stringValue
operator|+
literal|"' to "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FORG0001
argument_list|,
literal|"can not convert '"
operator|+
name|stringValue
operator|+
literal|"' to "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|requiredType
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|checkType
parameter_list|()
throws|throws
name|XPathException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Type
operator|.
name|LONG
case|:
comment|// jmv: add test since now long is not the default implementation anymore:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|SMALLEST_LONG
argument_list|)
operator|>=
literal|0
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|LARGEST_LONG
argument_list|)
operator|<=
literal|0
return|;
case|case
name|Type
operator|.
name|UNSIGNED_LONG
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|ZERO_BIGINTEGER
argument_list|)
operator|>=
literal|0
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|LARGEST_UNSIGNED_LONG
argument_list|)
operator|<=
literal|0
return|;
case|case
name|Type
operator|.
name|INTEGER
case|:
case|case
name|Type
operator|.
name|DECIMAL
case|:
return|return
literal|true
return|;
case|case
name|Type
operator|.
name|POSITIVE_INTEGER
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|ZERO_BIGINTEGER
argument_list|)
operator|==
literal|1
return|;
comment|//>0
case|case
name|Type
operator|.
name|NON_NEGATIVE_INTEGER
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|MINUS_ONE_BIGINTEGER
argument_list|)
operator|==
literal|1
return|;
comment|//> -1
case|case
name|Type
operator|.
name|NEGATIVE_INTEGER
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|ZERO_BIGINTEGER
argument_list|)
operator|==
operator|-
literal|1
return|;
comment|//<0
case|case
name|Type
operator|.
name|NON_POSITIVE_INTEGER
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|ONE_BIGINTEGER
argument_list|)
operator|==
operator|-
literal|1
return|;
comment|//<1
case|case
name|Type
operator|.
name|INT
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|SMALLEST_INT
argument_list|)
operator|>=
literal|0
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|LARGEST_INT
argument_list|)
operator|<=
literal|0
return|;
case|case
name|Type
operator|.
name|UNSIGNED_INT
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|ZERO_BIGINTEGER
argument_list|)
operator|>=
literal|0
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|LARGEST_UNSIGNED_INT
argument_list|)
operator|<=
literal|0
return|;
case|case
name|Type
operator|.
name|SHORT
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|SMALLEST_SHORT
argument_list|)
operator|>=
literal|0
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|LARGEST_SHORT
argument_list|)
operator|<=
literal|0
return|;
case|case
name|Type
operator|.
name|UNSIGNED_SHORT
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|ZERO_BIGINTEGER
argument_list|)
operator|>=
literal|0
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|LARGEST_UNSIGNED_SHORT
argument_list|)
operator|<=
literal|0
return|;
case|case
name|Type
operator|.
name|BYTE
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|SMALLEST_BYTE
argument_list|)
operator|>=
literal|0
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|LARGEST_BYTE
argument_list|)
operator|<=
literal|0
return|;
case|case
name|Type
operator|.
name|UNSIGNED_BYTE
case|:
return|return
name|value
operator|.
name|compareTo
argument_list|(
name|ZERO_BIGINTEGER
argument_list|)
operator|>=
literal|0
operator|&&
name|value
operator|.
name|compareTo
argument_list|(
name|LARGEST_UNSIGNED_BYTE
argument_list|)
operator|<=
literal|0
return|;
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown type: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasFractionalPart
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Item
name|itemAt
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|==
literal|0
condition|?
name|this
else|:
literal|null
return|;
block|}
specifier|public
name|long
name|getValue
parameter_list|()
block|{
return|return
name|value
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
return|return
comment|// Long.toString(value);
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNaN
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInfinite
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isZero
parameter_list|()
block|{
return|return
name|value
operator|.
name|signum
argument_list|()
operator|==
literal|0
return|;
comment|//return value.compareTo(ZERO_BIGINTEGER) == Constants.EQUAL;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isNegative
parameter_list|()
block|{
return|return
name|value
operator|.
name|signum
argument_list|()
operator|<
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isPositive
parameter_list|()
block|{
return|return
name|value
operator|.
name|signum
argument_list|()
operator|>
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|convertTo
parameter_list|(
specifier|final
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|this
operator|.
name|type
operator|==
name|requiredType
condition|)
block|{
return|return
name|this
return|;
block|}
switch|switch
condition|(
name|requiredType
condition|)
block|{
case|case
name|Type
operator|.
name|ATOMIC
case|:
case|case
name|Type
operator|.
name|ITEM
case|:
return|return
name|this
return|;
case|case
name|Type
operator|.
name|DECIMAL
case|:
return|return
operator|new
name|DecimalValue
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
case|case
name|Type
operator|.
name|UNTYPED_ATOMIC
case|:
return|return
operator|new
name|UntypedAtomicValue
argument_list|(
name|getStringValue
argument_list|()
argument_list|)
return|;
case|case
name|Type
operator|.
name|NUMBER
case|:
case|case
name|Type
operator|.
name|LONG
case|:
case|case
name|Type
operator|.
name|INTEGER
case|:
case|case
name|Type
operator|.
name|NON_POSITIVE_INTEGER
case|:
case|case
name|Type
operator|.
name|NEGATIVE_INTEGER
case|:
case|case
name|Type
operator|.
name|INT
case|:
case|case
name|Type
operator|.
name|SHORT
case|:
case|case
name|Type
operator|.
name|BYTE
case|:
case|case
name|Type
operator|.
name|NON_NEGATIVE_INTEGER
case|:
case|case
name|Type
operator|.
name|UNSIGNED_LONG
case|:
case|case
name|Type
operator|.
name|UNSIGNED_INT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_SHORT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_BYTE
case|:
case|case
name|Type
operator|.
name|POSITIVE_INTEGER
case|:
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
argument_list|,
name|requiredType
argument_list|)
return|;
case|case
name|Type
operator|.
name|DOUBLE
case|:
return|return
operator|new
name|DoubleValue
argument_list|(
name|value
operator|.
name|doubleValue
argument_list|()
argument_list|)
return|;
case|case
name|Type
operator|.
name|FLOAT
case|:
return|return
operator|new
name|FloatValue
argument_list|(
name|value
operator|.
name|floatValue
argument_list|()
argument_list|)
return|;
case|case
name|Type
operator|.
name|STRING
case|:
return|return
operator|new
name|StringValue
argument_list|(
name|getStringValue
argument_list|()
argument_list|)
return|;
case|case
name|Type
operator|.
name|BOOLEAN
case|:
return|return
operator|(
name|value
operator|.
name|compareTo
argument_list|(
name|ZERO_BIGINTEGER
argument_list|)
operator|==
literal|0
operator|)
condition|?
name|BooleanValue
operator|.
name|FALSE
else|:
name|BooleanValue
operator|.
name|TRUE
return|;
default|default:
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FORG0001
argument_list|,
literal|"cannot convert '"
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|this
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|" ("
operator|+
name|value
operator|+
literal|")' into "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|requiredType
argument_list|)
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getInt
parameter_list|()
block|{
return|return
name|value
operator|.
name|intValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getLong
parameter_list|()
block|{
return|return
name|value
operator|.
name|longValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|double
name|getDouble
parameter_list|()
block|{
return|return
name|value
operator|.
name|doubleValue
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|NumericValue
name|ceiling
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|NumericValue
name|floor
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|NumericValue
name|round
parameter_list|()
block|{
return|return
name|this
return|;
block|}
annotation|@
name|Override
specifier|public
name|NumericValue
name|round
parameter_list|(
specifier|final
name|IntegerValue
name|precision
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|precision
operator|==
literal|null
condition|)
block|{
return|return
name|round
argument_list|()
return|;
block|}
if|if
condition|(
name|precision
operator|.
name|getInt
argument_list|()
operator|<=
literal|0
condition|)
block|{
return|return
operator|(
name|IntegerValue
operator|)
operator|(
operator|(
name|DecimalValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|)
operator|)
operator|.
name|round
argument_list|(
name|precision
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ComputableValue
name|minus
parameter_list|(
specifier|final
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
comment|// return new IntegerValue(value - ((IntegerValue) other).value, type);
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
operator|.
name|subtract
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|ComputableValue
operator|)
name|convertTo
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|minus
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ComputableValue
name|plus
parameter_list|(
specifier|final
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
comment|// return new IntegerValue(value + ((IntegerValue) other).value, type);
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
operator|.
name|add
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|ComputableValue
operator|)
name|convertTo
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|plus
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|ComputableValue
name|mult
parameter_list|(
specifier|final
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
operator|.
name|multiply
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DURATION
argument_list|)
condition|)
block|{
return|return
name|other
operator|.
name|mult
argument_list|(
name|this
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|ComputableValue
operator|)
name|convertTo
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|mult
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
comment|/**      * The div operator performs floating-point division according to IEEE 754.      *      * @see org.exist.xquery.value.NumericValue#idiv(org.exist.xquery.value.NumericValue)      */
annotation|@
name|Override
specifier|public
name|ComputableValue
name|div
parameter_list|(
specifier|final
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|instanceof
name|IntegerValue
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|IntegerValue
operator|)
name|other
operator|)
operator|.
name|isZero
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOAR0001
argument_list|,
literal|"division by zero"
argument_list|)
throw|;
block|}
comment|//http://www.w3.org/TR/xpath20/#mapping : numeric; but xs:decimal if both operands are xs:integer
specifier|final
name|BigDecimal
name|d
init|=
operator|new
name|BigDecimal
argument_list|(
name|value
argument_list|)
decl_stmt|;
specifier|final
name|BigDecimal
name|od
init|=
operator|new
name|BigDecimal
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
decl_stmt|;
specifier|final
name|int
name|scale
init|=
name|Math
operator|.
name|max
argument_list|(
literal|18
argument_list|,
name|Math
operator|.
name|max
argument_list|(
name|d
operator|.
name|scale
argument_list|()
argument_list|,
name|od
operator|.
name|scale
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|DecimalValue
argument_list|(
name|d
operator|.
name|divide
argument_list|(
name|od
argument_list|,
name|scale
argument_list|,
name|BigDecimal
operator|.
name|ROUND_HALF_DOWN
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|//TODO : review type promotion
return|return
operator|(
operator|(
name|ComputableValue
operator|)
name|convertTo
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|div
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|IntegerValue
name|idiv
parameter_list|(
specifier|final
name|NumericValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|isZero
argument_list|()
condition|)
comment|//If the divisor is (positive or negative) zero, then an error is raised [err:FOAR0001]
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOAR0001
argument_list|,
literal|"division by zero"
argument_list|)
throw|;
block|}
specifier|final
name|ComputableValue
name|result
init|=
name|div
argument_list|(
name|other
argument_list|)
decl_stmt|;
return|return
operator|new
name|IntegerValue
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|result
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|)
operator|)
operator|.
name|getLong
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NumericValue
name|mod
parameter_list|(
specifier|final
name|NumericValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|isZero
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FOAR0001
argument_list|,
literal|"division by zero"
argument_list|)
throw|;
block|}
comment|// long ov = ((IntegerValue) other).value.longValue();
specifier|final
name|BigInteger
name|ov
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|other
operator|)
operator|.
name|value
decl_stmt|;
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
operator|.
name|remainder
argument_list|(
name|ov
argument_list|)
argument_list|,
name|type
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
operator|(
name|NumericValue
operator|)
name|convertTo
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|mod
argument_list|(
name|other
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|NumericValue
name|negate
parameter_list|()
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
operator|.
name|negate
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|NumericValue
name|abs
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
operator|.
name|abs
argument_list|()
argument_list|,
name|type
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|max
parameter_list|(
specifier|final
name|Collator
name|collator
parameter_list|,
specifier|final
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
operator|.
name|max
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|convertTo
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|max
argument_list|(
name|collator
argument_list|,
name|other
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|AtomicValue
name|min
parameter_list|(
specifier|final
name|Collator
name|collator
parameter_list|,
specifier|final
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
operator|.
name|min
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|convertTo
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
operator|.
name|min
argument_list|(
name|collator
argument_list|,
name|other
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|conversionPreference
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|)
block|{
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|IntegerValue
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|Long
operator|.
name|class
operator|||
name|javaClass
operator|==
name|long
operator|.
name|class
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|Integer
operator|.
name|class
operator|||
name|javaClass
operator|==
name|int
operator|.
name|class
condition|)
block|{
return|return
literal|2
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|Short
operator|.
name|class
operator|||
name|javaClass
operator|==
name|short
operator|.
name|class
condition|)
block|{
return|return
literal|3
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|Byte
operator|.
name|class
operator|||
name|javaClass
operator|==
name|byte
operator|.
name|class
condition|)
block|{
return|return
literal|4
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|Double
operator|.
name|class
operator|||
name|javaClass
operator|==
name|double
operator|.
name|class
condition|)
block|{
return|return
literal|5
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|Float
operator|.
name|class
operator|||
name|javaClass
operator|==
name|float
operator|.
name|class
condition|)
block|{
return|return
literal|6
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
literal|7
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|Boolean
operator|.
name|class
operator|||
name|javaClass
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
return|return
literal|8
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
literal|20
return|;
block|}
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|toJavaObject
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|IntegerValue
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|Long
operator|.
name|class
operator|||
name|target
operator|==
name|long
operator|.
name|class
condition|)
block|{
comment|// ?? jmv: return new Long(value);
return|return
operator|(
name|T
operator|)
name|Long
operator|.
name|valueOf
argument_list|(
name|value
operator|.
name|longValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|Integer
operator|.
name|class
operator|||
name|target
operator|==
name|int
operator|.
name|class
condition|)
block|{
specifier|final
name|IntegerValue
name|v
init|=
operator|(
name|IntegerValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|Integer
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|value
operator|.
name|intValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|Short
operator|.
name|class
operator|||
name|target
operator|==
name|short
operator|.
name|class
condition|)
block|{
specifier|final
name|IntegerValue
name|v
init|=
operator|(
name|IntegerValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|Short
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|value
operator|.
name|shortValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|Byte
operator|.
name|class
operator|||
name|target
operator|==
name|byte
operator|.
name|class
condition|)
block|{
specifier|final
name|IntegerValue
name|v
init|=
operator|(
name|IntegerValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|Byte
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|value
operator|.
name|byteValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|Double
operator|.
name|class
operator|||
name|target
operator|==
name|double
operator|.
name|class
condition|)
block|{
specifier|final
name|DoubleValue
name|v
init|=
operator|(
name|DoubleValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|Double
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|Float
operator|.
name|class
operator|||
name|target
operator|==
name|float
operator|.
name|class
condition|)
block|{
specifier|final
name|FloatValue
name|v
init|=
operator|(
name|FloatValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
return|return
operator|(
name|T
operator|)
name|Float
operator|.
name|valueOf
argument_list|(
name|v
operator|.
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|Boolean
operator|.
name|class
operator|||
name|target
operator|==
name|boolean
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
operator|new
name|BooleanValue
argument_list|(
name|effectiveBooleanValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|String
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|value
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|BigInteger
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
operator|new
name|BigInteger
argument_list|(
name|value
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|Object
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|value
return|;
comment|// Long(value);
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to Java object of type "
operator|+
name|target
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|AtomicValue
name|other
init|=
operator|(
name|AtomicValue
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
condition|)
block|{
return|return
name|value
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|IntegerValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|getType
argument_list|()
operator|>
name|other
operator|.
name|getType
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|value
operator|.
name|hashCode
argument_list|()
return|;
block|}
block|}
end_class

end_unit

