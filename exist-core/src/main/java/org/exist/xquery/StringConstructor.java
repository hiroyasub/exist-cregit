begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * XQuery 3.1 string constructor.  */
end_comment

begin_class
specifier|public
class|class
name|StringConstructor
extends|extends
name|AbstractExpression
block|{
specifier|protected
name|List
argument_list|<
name|StringConstructorPart
argument_list|>
name|content
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|13
argument_list|)
decl_stmt|;
specifier|public
name|StringConstructor
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addContent
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
name|content
operator|.
name|add
argument_list|(
operator|new
name|StringConstructorContent
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addInterpolation
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|)
block|{
name|content
operator|.
name|add
argument_list|(
operator|new
name|StringConstructorInterpolation
argument_list|(
name|expression
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
specifier|final
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|getContext
argument_list|()
operator|.
name|getXQueryVersion
argument_list|()
operator|<
literal|31
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|EXXQDY0003
argument_list|,
literal|"string constructors are not available before "
operator|+
literal|"XQuery 3.1"
argument_list|)
throw|;
block|}
for|for
control|(
specifier|final
name|StringConstructorPart
name|p
range|:
name|content
control|)
block|{
name|p
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
specifier|final
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
block|{
name|contextSequence
operator|=
name|contextItem
operator|.
name|toSequence
argument_list|()
expr_stmt|;
block|}
specifier|final
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|StringConstructorPart
name|p
range|:
name|content
control|)
block|{
name|out
operator|.
name|append
argument_list|(
name|p
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|StringValue
argument_list|(
name|out
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|STRING
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cardinality
name|getCardinality
parameter_list|()
block|{
return|return
name|Cardinality
operator|.
name|EXACTLY_ONE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"``["
argument_list|)
expr_stmt|;
name|content
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|p
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|"``]"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|content
operator|.
name|forEach
argument_list|(
name|p
lambda|->
name|p
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
interface|interface
name|StringConstructorPart
block|{
name|void
name|analyze
parameter_list|(
specifier|final
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
function_decl|;
name|String
name|eval
parameter_list|(
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
function_decl|;
name|void
name|dump
parameter_list|(
specifier|final
name|ExpressionDumper
name|dumper
parameter_list|)
function_decl|;
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
function_decl|;
block|}
specifier|private
specifier|static
class|class
name|StringConstructorContent
implements|implements
name|StringConstructorPart
block|{
specifier|private
specifier|final
name|String
name|content
decl_stmt|;
name|StringConstructorContent
parameter_list|(
specifier|final
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
specifier|final
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// nothing to do
block|}
annotation|@
name|Override
specifier|public
name|String
name|eval
parameter_list|(
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|content
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
comment|// nothing to do
block|}
block|}
specifier|private
specifier|static
class|class
name|StringConstructorInterpolation
implements|implements
name|StringConstructorPart
block|{
specifier|private
specifier|final
name|Expression
name|expression
decl_stmt|;
name|StringConstructorInterpolation
parameter_list|(
specifier|final
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expression
operator|=
name|expression
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
specifier|final
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|expression
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|eval
parameter_list|(
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Sequence
name|result
init|=
name|expression
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|gotOne
init|=
literal|false
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|result
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Item
name|next
init|=
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|gotOne
condition|)
block|{
name|out
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|out
operator|.
name|append
argument_list|(
name|next
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|gotOne
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"`{"
argument_list|)
expr_stmt|;
name|expression
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|"}`"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|expression
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

