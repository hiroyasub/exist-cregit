begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_class
specifier|public
class|class
name|NamedFunctionReference
extends|extends
name|AbstractExpression
block|{
specifier|private
name|QName
name|qname
decl_stmt|;
specifier|private
name|int
name|arity
decl_stmt|;
specifier|private
name|FunctionCall
name|resolvedFunction
init|=
literal|null
decl_stmt|;
specifier|public
name|NamedFunctionReference
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|arity
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
name|this
operator|.
name|arity
operator|=
name|arity
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|resolvedFunction
operator|=
name|lookupFunction
argument_list|(
name|this
argument_list|,
name|context
argument_list|,
name|qname
argument_list|,
name|arity
argument_list|)
expr_stmt|;
name|contextInfo
operator|.
name|addFlag
argument_list|(
name|SINGLE_STEP_EXECUTION
argument_list|)
expr_stmt|;
name|resolvedFunction
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|FunctionCall
name|lookupFunction
parameter_list|(
name|Expression
name|self
parameter_list|,
name|XQueryContext
name|context
parameter_list|,
name|QName
name|funcName
parameter_list|,
name|int
name|arity
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|XQueryAST
name|ast
init|=
operator|new
name|XQueryAST
argument_list|()
decl_stmt|;
name|ast
operator|.
name|setLine
argument_list|(
name|self
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|ast
operator|.
name|setColumn
argument_list|(
name|self
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|args
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|arity
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arity
condition|;
name|i
operator|++
control|)
block|{
name|args
operator|.
name|add
argument_list|(
operator|new
name|Function
operator|.
name|Placeholder
argument_list|(
name|context
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Expression
name|fun
init|=
name|FunctionFactory
operator|.
name|createFunction
argument_list|(
name|context
argument_list|,
name|funcName
argument_list|,
name|ast
argument_list|,
literal|null
argument_list|,
name|args
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|fun
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|self
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function not found: "
operator|+
name|funcName
argument_list|)
throw|;
block|}
if|if
condition|(
name|fun
operator|instanceof
name|FunctionCall
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|FunctionCall
operator|)
name|fun
operator|)
operator|.
name|getFunction
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|self
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function not found: "
operator|+
name|funcName
argument_list|)
throw|;
block|}
comment|// clear line and column as it will be misleading. should be set later to point
comment|// to the location from where the function is called.
name|fun
operator|.
name|setLocation
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
operator|(
name|FunctionCall
operator|)
name|fun
return|;
block|}
if|else if
condition|(
name|fun
operator|instanceof
name|Function
condition|)
block|{
specifier|final
name|InternalFunctionCall
name|funcCall
decl_stmt|;
if|if
condition|(
name|fun
operator|instanceof
name|InternalFunctionCall
condition|)
block|{
name|funcCall
operator|=
operator|(
name|InternalFunctionCall
operator|)
name|fun
expr_stmt|;
block|}
else|else
block|{
name|funcCall
operator|=
operator|new
name|InternalFunctionCall
argument_list|(
operator|(
name|Function
operator|)
name|fun
argument_list|)
expr_stmt|;
block|}
name|funcCall
operator|.
name|setLocation
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|FunctionFactory
operator|.
name|wrap
argument_list|(
name|context
argument_list|,
name|funcCall
argument_list|)
return|;
block|}
if|else if
condition|(
name|fun
operator|instanceof
name|CastExpression
condition|)
block|{
specifier|final
name|InternalFunctionCall
name|funcCall
init|=
operator|new
name|InternalFunctionCall
argument_list|(
operator|(
operator|(
name|CastExpression
operator|)
name|fun
operator|)
operator|.
name|toFunction
argument_list|()
argument_list|)
decl_stmt|;
name|funcCall
operator|.
name|setLocation
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|FunctionFactory
operator|.
name|wrap
argument_list|(
name|context
argument_list|,
name|funcCall
argument_list|)
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|self
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Named function reference should point to a function; found: "
operator|+
name|fun
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|arity
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
operator|new
name|FunctionReference
argument_list|(
name|resolvedFunction
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|FUNCTION_REFERENCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolvedFunction
operator|!=
literal|null
condition|)
block|{
name|resolvedFunction
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

