begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2018 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Predicate
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|TriFunctionE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|QuadFunctionE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|Immutable
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|Debuggee
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|DebuggeeJoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|interpreter
operator|.
name|Context
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|InMemoryXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|repo
operator|.
name|ExistRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|ExtendedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|UpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockedDocumentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Collations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|NamePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|pragmas
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|update
operator|.
name|Modification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|SerializerUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
import|;
end_import

begin_import
import|import static
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
operator|.
name|XML_NS_PREFIX
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|Namespaces
operator|.
name|XML_NS
import|;
end_import

begin_comment
comment|/**  * The current XQuery execution context. Contains the static as well as the dynamic  * XQuery context components.  *  * @author<a href="mailto:wolfgang@exist-db.org">Wolfgang Meier</a>  */
end_comment

begin_class
specifier|public
class|class
name|XQueryContext
implements|implements
name|BinaryValueManager
implements|,
name|Context
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_QUERY_REWRITING_ATTRIBUTE
init|=
literal|"enable-query-rewriting"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XQUERY_BACKWARD_COMPATIBLE_ATTRIBUTE
init|=
literal|"backwardCompatible"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL_ATTRIBUTE
init|=
literal|"raise-error-on-failed-retrieval"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENFORCE_INDEX_USE_ATTRIBUTE
init|=
literal|"enforce-index-use"
decl_stmt|;
comment|//TODO : move elsewhere ?
specifier|public
specifier|static
specifier|final
name|String
name|BUILT_IN_MODULE_URI_ATTRIBUTE
init|=
literal|"uri"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BUILT_IN_MODULE_CLASS_ATTRIBUTE
init|=
literal|"class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BUILT_IN_MODULE_SOURCE_ATTRIBUTE
init|=
literal|"src"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
init|=
literal|"xquery.backwardCompatible"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ENABLE_QUERY_REWRITING
init|=
literal|"xquery.enable-query-rewriting"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL
init|=
literal|"xquery.raise-error-on-failed-retrieval"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|boolean
name|XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL_DEFAULT
init|=
literal|false
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ENFORCE_INDEX_USE
init|=
literal|"xquery.enforce-index-use"
decl_stmt|;
comment|//TODO : move elsewhere ?
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_BUILT_IN_MODULES
init|=
literal|"xquery.modules"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_STATIC_MODULE_MAP
init|=
literal|"xquery.modules.static"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_MODULE_PARAMETERS
init|=
literal|"xquery.modules.parameters"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JAVA_URI_START
init|=
literal|"java:"
decl_stmt|;
comment|//private static final String XMLDB_URI_START = "xmldb:exist://";
specifier|private
specifier|static
specifier|final
name|String
name|TEMP_STORE_ERROR
init|=
literal|"Error occurred while storing temporary data"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XQUERY_CONTEXTVAR_XQUERY_UPDATE_ERROR
init|=
literal|"_eXist_xquery_update_error"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_SESSIONVAR_XMLDB_USER
init|=
literal|"_eXist_xmldb_user"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_REQ_ATTR_USER
init|=
literal|"xquery.user"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_REQ_ATTR_PASS
init|=
literal|"xquery.password"
decl_stmt|;
comment|// Static namespace/prefix mappings
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|staticNamespaces
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Static prefix/namespace mappings
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|staticPrefixes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Local in-scope namespace/prefix mappings in the current context
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inScopeNamespaces
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Local prefix/namespace mappings in the current context
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inScopePrefixes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Inherited in-scope namespace/prefix mappings in the current context
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inheritedInScopeNamespaces
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Inherited prefix/namespace mappings in the current context
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|inheritedInScopePrefixes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|XmldbURI
argument_list|>
name|mappedModules
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|preserveNamespaces
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|inheritNamespaces
init|=
literal|true
decl_stmt|;
comment|// Local namespace stack
specifier|private
name|Deque
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|>
name|namespaceStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Known user defined functions in the local module
specifier|private
name|TreeMap
argument_list|<
name|FunctionId
argument_list|,
name|UserDefinedFunction
argument_list|>
name|declaredFunctions
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Globally declared variables
specifier|protected
name|Map
argument_list|<
name|QName
argument_list|,
name|Variable
argument_list|>
name|globalVariables
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|// The last element in the linked list of local in-scope variables
specifier|private
name|LocalVariable
name|lastVar
init|=
literal|null
decl_stmt|;
specifier|private
name|Deque
argument_list|<
name|LocalVariable
argument_list|>
name|contextStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|Deque
argument_list|<
name|FunctionSignature
argument_list|>
name|callStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
comment|// The current size of the variable stack
specifier|private
name|int
name|variableStackSize
init|=
literal|0
decl_stmt|;
comment|// Unresolved references to user defined functions
specifier|private
name|Deque
argument_list|<
name|FunctionCall
argument_list|>
name|forwardReferences
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
comment|// Inline functions using closures need to be cleared after execution
specifier|private
name|Deque
argument_list|<
name|UserDefinedFunction
argument_list|>
name|closures
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
comment|// List of options declared for this query at compile time - i.e. declare option
specifier|private
name|List
argument_list|<
name|Option
argument_list|>
name|staticOptions
init|=
literal|null
decl_stmt|;
comment|// List of options declared for this query at run time - i.e. util:declare-option()
specifier|private
name|List
argument_list|<
name|Option
argument_list|>
name|dynamicOptions
init|=
literal|null
decl_stmt|;
comment|//The Calendar for this context : may be changed by some options
specifier|private
name|XMLGregorianCalendar
name|calendar
init|=
literal|null
decl_stmt|;
specifier|private
name|TimeZone
name|implicitTimeZone
init|=
literal|null
decl_stmt|;
comment|/**      * the watchdog object assigned to this query.      */
specifier|protected
name|XQueryWatchDog
name|watchdog
decl_stmt|;
comment|/**      * Loaded modules.      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Module
argument_list|>
name|modules
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Loaded modules, including ones bubbled up from imported modules.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Module
argument_list|>
name|allModules
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Used to save current state when modules are imported dynamically      */
specifier|private
name|SavedState
name|savedState
init|=
operator|new
name|SavedState
argument_list|()
decl_stmt|;
comment|/**      * Whether some modules were rebound to new instances since the last time this context's query was analyzed. (This assumes that each context is      * attached to at most one query.)      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|boolean
name|modulesChanged
init|=
literal|true
decl_stmt|;
comment|/**      * The set of statically known documents specified as an array of paths to documents and collections.      */
specifier|private
name|XmldbURI
index|[]
name|staticDocumentPaths
init|=
literal|null
decl_stmt|;
comment|/**      * The actual set of statically known documents. This will be generated on demand from staticDocumentPaths.      */
specifier|private
name|DocumentSet
name|staticDocuments
init|=
literal|null
decl_stmt|;
comment|/**      * The available documents of the dynamic context.      *      * {@see https://www.w3.org/TR/xpath-31/#dt-available-docs}.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TriFunctionE
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|String
argument_list|,
name|Either
argument_list|<
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
argument_list|,
name|DocumentImpl
argument_list|>
argument_list|,
name|XPathException
argument_list|>
argument_list|>
name|dynamicDocuments
init|=
literal|null
decl_stmt|;
comment|/**      * The available test resources of the dynamic context.      *<p>      * {@see https://www.w3.org/TR/xpath-31/#dt-available-text-resources}.      */
specifier|private
name|Map
argument_list|<
name|Tuple2
argument_list|<
name|String
argument_list|,
name|Charset
argument_list|>
argument_list|,
name|QuadFunctionE
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|String
argument_list|,
name|Charset
argument_list|,
name|Reader
argument_list|,
name|XPathException
argument_list|>
argument_list|>
name|dynamicTextResources
init|=
literal|null
decl_stmt|;
comment|/**      * The available collections of the dynamic context.      *      * {@see https://www.w3.org/TR/xpath-31/#dt-available-collections}.      */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|TriFunctionE
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|String
argument_list|,
name|Sequence
argument_list|,
name|XPathException
argument_list|>
argument_list|>
name|dynamicCollections
init|=
literal|null
decl_stmt|;
comment|/**      * A set of documents which were modified during the query, usually through an XQuery update extension. The documents will be checked after the      * query completed to see if a defragmentation run is needed.      */
specifier|protected
name|MutableDocumentSet
name|modifiedDocuments
init|=
literal|null
decl_stmt|;
comment|/**      * A general-purpose map to set attributes in the current query context.      */
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|AnyURIValue
name|baseURI
init|=
name|AnyURIValue
operator|.
name|EMPTY_URI
decl_stmt|;
specifier|private
name|boolean
name|baseURISetInProlog
init|=
literal|false
decl_stmt|;
specifier|protected
name|String
name|moduleLoadPath
init|=
literal|"."
decl_stmt|;
specifier|private
name|String
name|defaultFunctionNamespace
init|=
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
decl_stmt|;
specifier|private
name|AnyURIValue
name|defaultElementNamespace
init|=
name|AnyURIValue
operator|.
name|EMPTY_URI
decl_stmt|;
specifier|private
name|AnyURIValue
name|defaultElementNamespaceSchema
init|=
name|AnyURIValue
operator|.
name|EMPTY_URI
decl_stmt|;
comment|/**      * The default collation URI.      */
specifier|private
name|String
name|defaultCollation
init|=
name|Collations
operator|.
name|UNICODE_CODEPOINT_COLLATION_URI
decl_stmt|;
comment|/**      * Default Collator. Will be null for the default unicode codepoint collation.      */
specifier|private
name|Collator
name|defaultCollator
init|=
literal|null
decl_stmt|;
comment|/**      * Set to true to enable XPath 1.0 backwards compatibility.      */
specifier|private
name|boolean
name|backwardsCompatible
init|=
literal|false
decl_stmt|;
comment|/**      * Should whitespace inside node constructors be stripped?      */
specifier|private
name|boolean
name|stripWhitespace
init|=
literal|true
decl_stmt|;
comment|/**      * Should empty order greatest or least?      */
specifier|private
name|boolean
name|orderEmptyGreatest
init|=
literal|true
decl_stmt|;
comment|/**      * XQuery 3.0 - declare context item :=      */
specifier|private
name|ContextItemDeclaration
name|contextItemDeclaration
init|=
literal|null
decl_stmt|;
comment|/**      * The context item set in the query prolog or externally      */
specifier|private
name|Sequence
name|contextItem
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
comment|/**      * The position of the currently processed item in the context sequence. This field has to be set on demand, for example, before calling the      * fn:position() function.      */
specifier|private
name|int
name|contextPosition
init|=
literal|0
decl_stmt|;
specifier|private
name|Sequence
name|contextSequence
init|=
literal|null
decl_stmt|;
comment|/**      * Shared name pool used by all in-memory documents constructed in this query context.      */
specifier|private
name|NamePool
name|sharedNamePool
init|=
literal|null
decl_stmt|;
comment|/**      * Stack for temporary document fragments.      */
specifier|private
name|Deque
argument_list|<
name|MemTreeBuilder
argument_list|>
name|fragmentStack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * The root of the expression tree.      */
specifier|private
name|Expression
name|rootExpression
decl_stmt|;
comment|/**      * An incremental counter to count the expressions in the current XQuery. Used during compilation to assign a unique ID to every expression.      */
specifier|private
name|int
name|expressionCounter
init|=
literal|0
decl_stmt|;
comment|//    /**
comment|//     * Should all documents loaded by the query be locked? If set to true, it is the responsibility of the calling client code to unlock documents
comment|//     * after the query has completed.
comment|//     */
comment|//  private boolean lockDocumentsOnLoad = false;
comment|//    /**
comment|//     * Documents locked during the query.
comment|//     */
comment|//  private LockedDocumentMap lockedDocuments = null;
specifier|private
name|LockedDocumentMap
name|protectedDocuments
init|=
literal|null
decl_stmt|;
comment|/**      * The profiler instance used by this context.      */
specifier|protected
name|Profiler
name|profiler
decl_stmt|;
comment|//For holding the environment variables
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|envs
decl_stmt|;
specifier|private
name|ContextUpdateListener
name|updateListener
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|enableOptimizer
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|raiseErrorOnFailedRetrieval
init|=
name|XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL_DEFAULT
decl_stmt|;
specifier|private
name|boolean
name|isShared
init|=
literal|false
decl_stmt|;
specifier|private
name|Source
name|source
init|=
literal|null
decl_stmt|;
specifier|private
name|DebuggeeJoint
name|debuggeeJoint
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|xqueryVersion
init|=
literal|31
decl_stmt|;
specifier|protected
name|Database
name|db
decl_stmt|;
specifier|private
name|boolean
name|analyzed
init|=
literal|false
decl_stmt|;
comment|/**      * The Subject of the User that requested the execution of the XQuery      * attached by this Context. This is not the same as the Effective User      * as we may be executed setUid or setGid. The Effective User can be retrieved      * through broker.getCurrentSubject()      */
specifier|private
name|Subject
name|realUser
decl_stmt|;
comment|/**      * Indicates whether a user from a http session      * was pushed onto the current broker from {@link XQueryContext#prepareForExecution()},      * if so then we must pop the user in {@link XQueryContext#reset(boolean)}      */
specifier|private
name|boolean
name|pushedUserFromHttpSession
init|=
literal|false
decl_stmt|;
comment|/**      * The HTTP context within which the XQuery      * is executing, or null if there is no      * HTTP context.      */
annotation|@
name|Nullable
specifier|private
name|HttpContext
name|httpContext
init|=
literal|null
decl_stmt|;
specifier|public
name|XQueryContext
parameter_list|()
block|{
name|profiler
operator|=
operator|new
name|Profiler
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryContext
parameter_list|(
specifier|final
name|Database
name|db
parameter_list|)
block|{
name|this
argument_list|(
name|db
argument_list|,
operator|new
name|Profiler
argument_list|(
name|db
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryContext
parameter_list|(
specifier|final
name|Database
name|db
parameter_list|,
name|Profiler
name|profiler
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|loadDefaults
argument_list|(
name|db
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|profiler
operator|=
name|profiler
expr_stmt|;
block|}
specifier|public
name|XQueryContext
parameter_list|(
specifier|final
name|XQueryContext
name|copyFrom
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|copyFrom
operator|.
name|db
expr_stmt|;
name|loadDefaultNS
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|prefix
range|:
name|copyFrom
operator|.
name|staticNamespaces
operator|.
name|keySet
argument_list|()
control|)
block|{
if|if
condition|(
name|XML_NS_PREFIX
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|||
name|XMLNS_ATTRIBUTE
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|declareNamespace
argument_list|(
name|prefix
argument_list|,
name|copyFrom
operator|.
name|staticNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
name|this
operator|.
name|profiler
operator|=
name|copyFrom
operator|.
name|profiler
expr_stmt|;
block|}
comment|/**      * Get the HTTP context of the XQuery.      *      * @return the HTTP context, or null if the query      * is not being executed within an HTTP context.      */
specifier|public
annotation|@
name|Nullable
name|HttpContext
name|getHttpContext
parameter_list|()
block|{
return|return
name|httpContext
return|;
block|}
comment|/**      * Set the HTTP context of the XQuery.      *      * @param httpContext the HTTP context within which the XQuery      *                    is being executed.      */
specifier|public
name|void
name|setHttpContext
parameter_list|(
specifier|final
name|HttpContext
name|httpContext
parameter_list|)
block|{
name|this
operator|.
name|httpContext
operator|=
name|httpContext
expr_stmt|;
block|}
specifier|public
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|getRepository
parameter_list|()
block|{
return|return
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getExpathRepo
argument_list|()
return|;
block|}
specifier|private
name|Module
name|resolveInEXPathRepository
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|String
name|prefix
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// the repo and its eXist handler
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|repo
init|=
name|getRepository
argument_list|()
decl_stmt|;
comment|// try an internal module
if|if
condition|(
name|repo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|Module
name|jMod
init|=
name|repo
operator|.
name|get
argument_list|()
operator|.
name|resolveJavaModule
argument_list|(
name|namespace
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|jMod
operator|!=
literal|null
condition|)
block|{
return|return
name|jMod
return|;
block|}
block|}
comment|// try an eXist-specific module
name|Path
name|resolved
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|resolved
operator|=
name|repo
operator|.
name|get
argument_list|()
operator|.
name|resolveXQueryModule
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
comment|// use the resolved file or return null
if|if
condition|(
name|resolved
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|// build a module object from the file
specifier|final
name|Source
name|src
init|=
operator|new
name|FileSource
argument_list|(
name|resolved
argument_list|,
literal|false
argument_list|)
decl_stmt|;
return|return
name|compileOrBorrowModule
argument_list|(
name|prefix
argument_list|,
name|namespace
argument_list|,
literal|""
argument_list|,
name|src
argument_list|)
return|;
block|}
comment|/**      * Prepares the XQuery Context for use.      *      * Should be called before compilation to prepare the query context,      * or before re-execution if the query was cached.      *      * @throws XPathException in case of static error      */
specifier|public
name|void
name|prepareForReuse
parameter_list|()
throws|throws
name|XPathException
block|{
comment|// prepare the variables of the internal modules (which were previously reset)
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|InternalModule
argument_list|>
name|internalModules
init|=
name|allModules
operator|.
name|values
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|module
lambda|->
name|module
operator|instanceof
name|InternalModule
argument_list|)
operator|.
name|map
argument_list|(
name|module
lambda|->
operator|(
name|InternalModule
operator|)
name|module
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|InternalModule
name|internalModule
range|:
name|internalModules
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
control|)
block|{
name|internalModule
operator|.
name|prepare
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|hasParent
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|XQueryContext
name|getRootContext
parameter_list|()
block|{
return|return
name|this
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|XQueryContext
name|copyContext
parameter_list|()
block|{
specifier|final
name|XQueryContext
name|ctx
init|=
operator|new
name|XQueryContext
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|copyFields
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|updateContext
parameter_list|(
specifier|final
name|XQueryContext
name|from
parameter_list|)
block|{
name|this
operator|.
name|watchdog
operator|=
name|from
operator|.
name|watchdog
expr_stmt|;
name|this
operator|.
name|lastVar
operator|=
name|from
operator|.
name|lastVar
expr_stmt|;
name|this
operator|.
name|variableStackSize
operator|=
name|from
operator|.
name|getCurrentStackSize
argument_list|()
expr_stmt|;
name|this
operator|.
name|contextStack
operator|=
name|from
operator|.
name|contextStack
expr_stmt|;
name|this
operator|.
name|inScopeNamespaces
operator|=
name|from
operator|.
name|inScopeNamespaces
expr_stmt|;
name|this
operator|.
name|inScopePrefixes
operator|=
name|from
operator|.
name|inScopePrefixes
expr_stmt|;
name|this
operator|.
name|inheritedInScopeNamespaces
operator|=
name|from
operator|.
name|inheritedInScopeNamespaces
expr_stmt|;
name|this
operator|.
name|inheritedInScopePrefixes
operator|=
name|from
operator|.
name|inheritedInScopePrefixes
expr_stmt|;
name|this
operator|.
name|variableStackSize
operator|=
name|from
operator|.
name|variableStackSize
expr_stmt|;
name|this
operator|.
name|attributes
operator|=
name|from
operator|.
name|attributes
expr_stmt|;
name|this
operator|.
name|updateListener
operator|=
name|from
operator|.
name|updateListener
expr_stmt|;
name|this
operator|.
name|modules
operator|=
name|from
operator|.
name|modules
expr_stmt|;
name|this
operator|.
name|allModules
operator|=
name|from
operator|.
name|allModules
expr_stmt|;
name|this
operator|.
name|mappedModules
operator|=
name|from
operator|.
name|mappedModules
expr_stmt|;
name|this
operator|.
name|dynamicOptions
operator|=
name|from
operator|.
name|dynamicOptions
expr_stmt|;
name|this
operator|.
name|staticOptions
operator|=
name|from
operator|.
name|staticOptions
expr_stmt|;
name|this
operator|.
name|db
operator|=
name|from
operator|.
name|db
expr_stmt|;
name|this
operator|.
name|httpContext
operator|=
name|from
operator|.
name|httpContext
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|copyFields
parameter_list|(
specifier|final
name|XQueryContext
name|ctx
parameter_list|)
block|{
name|ctx
operator|.
name|calendar
operator|=
name|this
operator|.
name|calendar
expr_stmt|;
name|ctx
operator|.
name|implicitTimeZone
operator|=
name|this
operator|.
name|implicitTimeZone
expr_stmt|;
name|ctx
operator|.
name|baseURI
operator|=
name|this
operator|.
name|baseURI
expr_stmt|;
name|ctx
operator|.
name|baseURISetInProlog
operator|=
name|this
operator|.
name|baseURISetInProlog
expr_stmt|;
name|ctx
operator|.
name|staticDocumentPaths
operator|=
name|this
operator|.
name|staticDocumentPaths
expr_stmt|;
name|ctx
operator|.
name|staticDocuments
operator|=
name|this
operator|.
name|staticDocuments
expr_stmt|;
name|ctx
operator|.
name|dynamicDocuments
operator|=
name|this
operator|.
name|dynamicDocuments
expr_stmt|;
name|ctx
operator|.
name|dynamicTextResources
operator|=
name|this
operator|.
name|dynamicTextResources
expr_stmt|;
name|ctx
operator|.
name|dynamicCollections
operator|=
name|this
operator|.
name|dynamicCollections
expr_stmt|;
name|ctx
operator|.
name|moduleLoadPath
operator|=
name|this
operator|.
name|moduleLoadPath
expr_stmt|;
name|ctx
operator|.
name|defaultFunctionNamespace
operator|=
name|this
operator|.
name|defaultFunctionNamespace
expr_stmt|;
name|ctx
operator|.
name|defaultElementNamespace
operator|=
name|this
operator|.
name|defaultElementNamespace
expr_stmt|;
name|ctx
operator|.
name|defaultCollation
operator|=
name|this
operator|.
name|defaultCollation
expr_stmt|;
name|ctx
operator|.
name|defaultCollator
operator|=
name|this
operator|.
name|defaultCollator
expr_stmt|;
name|ctx
operator|.
name|backwardsCompatible
operator|=
name|this
operator|.
name|backwardsCompatible
expr_stmt|;
name|ctx
operator|.
name|enableOptimizer
operator|=
name|this
operator|.
name|enableOptimizer
expr_stmt|;
name|ctx
operator|.
name|stripWhitespace
operator|=
name|this
operator|.
name|stripWhitespace
expr_stmt|;
name|ctx
operator|.
name|preserveNamespaces
operator|=
name|this
operator|.
name|preserveNamespaces
expr_stmt|;
name|ctx
operator|.
name|inheritNamespaces
operator|=
name|this
operator|.
name|inheritNamespaces
expr_stmt|;
name|ctx
operator|.
name|orderEmptyGreatest
operator|=
name|this
operator|.
name|orderEmptyGreatest
expr_stmt|;
name|ctx
operator|.
name|declaredFunctions
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|this
operator|.
name|declaredFunctions
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|globalVariables
operator|=
operator|new
name|TreeMap
argument_list|<>
argument_list|(
name|this
operator|.
name|globalVariables
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|attributes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|attributes
argument_list|)
expr_stmt|;
comment|// make imported modules available in the new context
name|ctx
operator|.
name|modules
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Module
name|module
range|:
name|this
operator|.
name|modules
operator|.
name|values
argument_list|()
control|)
block|{
try|try
block|{
name|ctx
operator|.
name|modules
operator|.
name|put
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
specifier|final
name|String
name|prefix
init|=
name|this
operator|.
name|staticPrefixes
operator|.
name|get
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|declareNamespace
argument_list|(
name|prefix
argument_list|,
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|ctx
operator|.
name|allModules
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|Module
name|module
range|:
name|this
operator|.
name|allModules
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
comment|//UNDERSTAND: why is it possible? -shabanovd
name|ctx
operator|.
name|allModules
operator|.
name|put
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
block|}
name|ctx
operator|.
name|watchdog
operator|=
name|this
operator|.
name|watchdog
expr_stmt|;
name|ctx
operator|.
name|profiler
operator|=
name|getProfiler
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|lastVar
operator|=
name|this
operator|.
name|lastVar
expr_stmt|;
name|ctx
operator|.
name|variableStackSize
operator|=
name|getCurrentStackSize
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|contextStack
operator|=
name|this
operator|.
name|contextStack
expr_stmt|;
name|ctx
operator|.
name|mappedModules
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|mappedModules
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|staticNamespaces
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|staticNamespaces
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|staticPrefixes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|this
operator|.
name|staticPrefixes
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|dynamicOptions
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|dynamicOptions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|dynamicOptions
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|this
operator|.
name|staticOptions
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|staticOptions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|this
operator|.
name|staticOptions
argument_list|)
expr_stmt|;
block|}
name|ctx
operator|.
name|source
operator|=
name|this
operator|.
name|source
expr_stmt|;
name|ctx
operator|.
name|httpContext
operator|=
name|this
operator|.
name|httpContext
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|prepareForExecution
parameter_list|()
block|{
comment|//if there is an existing user in the current http session
comment|//then set the DBBroker user
specifier|final
name|Subject
name|user
init|=
name|getUserFromHttpSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|getBroker
argument_list|()
operator|.
name|pushSubject
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|//this will be popped in {@link XQueryContext#reset(boolean)}
name|this
operator|.
name|pushedUserFromHttpSession
operator|=
literal|true
expr_stmt|;
block|}
name|setRealUser
argument_list|(
name|getBroker
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|//this will be unset in {@link XQueryContext#reset(boolean)}
comment|//Reset current context position
name|setContextSequencePosition
argument_list|(
literal|0
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//Note that, for some reasons, an XQueryContext might be used without calling this method
block|}
end_function

begin_function
specifier|public
name|void
name|setContextItem
parameter_list|(
specifier|final
name|Sequence
name|contextItem
parameter_list|)
block|{
name|this
operator|.
name|contextItem
operator|=
name|contextItem
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|setContextItemDeclaration
parameter_list|(
specifier|final
name|ContextItemDeclaration
name|contextItemDeclaration
parameter_list|)
block|{
name|this
operator|.
name|contextItemDeclaration
operator|=
name|contextItemDeclaration
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|ContextItemDeclaration
name|getContextItemDeclartion
parameter_list|()
block|{
return|return
name|contextItemDeclaration
return|;
block|}
end_function

begin_function
specifier|public
name|Sequence
name|getContextItem
parameter_list|()
block|{
return|return
name|contextItem
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isProfilingEnabled
parameter_list|()
block|{
return|return
name|profiler
operator|.
name|isEnabled
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isProfilingEnabled
parameter_list|(
specifier|final
name|int
name|verbosity
parameter_list|)
block|{
return|return
name|profiler
operator|.
name|isEnabled
argument_list|()
operator|&&
name|profiler
operator|.
name|verbosity
argument_list|()
operator|>=
name|verbosity
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Profiler
name|getProfiler
parameter_list|()
block|{
return|return
name|profiler
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setRootExpression
parameter_list|(
specifier|final
name|Expression
name|expr
parameter_list|)
block|{
name|this
operator|.
name|rootExpression
operator|=
name|expr
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Expression
name|getRootExpression
parameter_list|()
block|{
return|return
name|rootExpression
return|;
block|}
end_function

begin_comment
comment|/**      * Returns the next unique expression id. Every expression in the XQuery is identified by a unique id. During compilation, expressions are      * assigned their id by calling this method.      *      * @return The next unique expression id.      */
end_comment

begin_function
name|int
name|nextExpressionId
parameter_list|()
block|{
return|return
name|expressionCounter
operator|++
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|int
name|getExpressionCount
parameter_list|()
block|{
return|return
name|expressionCounter
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|declareNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|XML_NS_PREFIX
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|||
name|XMLNS_ATTRIBUTE
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0070
argument_list|,
literal|"Namespace predefined prefix '"
operator|+
name|prefix
operator|+
literal|"' can not be bound"
argument_list|)
throw|;
block|}
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|XML_NS
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0070
argument_list|,
literal|"Namespace URI '"
operator|+
name|uri
operator|+
literal|"' must be bound to the 'xml' prefix"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|prevURI
init|=
name|staticNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
comment|//This prefix was not bound
if|if
condition|(
name|prevURI
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Nothing to bind
comment|//TODO : check the specs : unbinding an NS which is not already bound may be disallowed.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unbinding unbound prefix '"
operator|+
name|prefix
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Bind it
name|staticNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|staticPrefixes
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//This prefix was bound
comment|//Unbind it
if|if
condition|(
name|uri
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// if an empty namespace is specified,
comment|// remove any existing mapping for this namespace
comment|//TODO : improve, since XML_NS can't be unbound
name|staticPrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|staticNamespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//those prefixes can be rebound to different URIs
if|if
condition|(
operator|(
literal|"xs"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|&&
name|Namespaces
operator|.
name|SCHEMA_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
operator|||
operator|(
literal|"xsi"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|&&
name|Namespaces
operator|.
name|SCHEMA_INSTANCE_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
operator|||
operator|(
literal|"xdt"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|&&
name|Namespaces
operator|.
name|XPATH_DATATYPES_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
operator|||
operator|(
literal|"fn"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|&&
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
operator|||
operator|(
literal|"math"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|)
operator|&&
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_MATH_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|||
operator|(
literal|"local"
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|&&
name|Namespaces
operator|.
name|XQUERY_LOCAL_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
condition|)
block|{
name|staticPrefixes
operator|.
name|remove
argument_list|(
name|prevURI
argument_list|)
expr_stmt|;
name|staticNamespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|staticNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|staticPrefixes
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//Forbids rebinding the *same* prefix in a *different* namespace in this *same* context
if|if
condition|(
operator|!
name|uri
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0033
argument_list|,
literal|"Cannot bind prefix '"
operator|+
name|prefix
operator|+
literal|"' to '"
operator|+
name|uri
operator|+
literal|"' it is already bound to '"
operator|+
name|prevURI
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|declareNamespaces
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|namespaceMap
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|String
name|prefix
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|uri
operator|=
literal|""
expr_stmt|;
block|}
name|staticNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|staticPrefixes
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|removeNamespace
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
name|staticPrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|staticNamespaces
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|inScopePrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|inScopeNamespaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|inScopeNamespaces
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
name|inheritedInScopePrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|inheritedInScopeNamespaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|inheritedInScopeNamespaces
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|i
operator|.
name|next
argument_list|()
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|declareInScopeNamespace
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null argument passed to declareNamespace"
argument_list|)
throw|;
block|}
comment|//Activate the namespace by removing it from the inherited namespaces
if|if
condition|(
name|inheritedInScopePrefixes
operator|.
name|containsKey
argument_list|(
name|getURIForPrefix
argument_list|(
name|prefix
argument_list|)
argument_list|)
condition|)
block|{
name|inheritedInScopePrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
name|inheritedInScopeNamespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|inScopePrefixes
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|inScopeNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getInScopeNamespace
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
block|{
return|return
name|inScopeNamespaces
operator|==
literal|null
condition|?
literal|null
else|:
name|inScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getInScopePrefix
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
return|return
name|inScopePrefixes
operator|==
literal|null
condition|?
literal|null
else|:
name|inScopePrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getInScopePrefixes
parameter_list|()
block|{
return|return
name|inScopePrefixes
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getInheritedNamespace
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
block|{
return|return
name|inheritedInScopeNamespaces
operator|==
literal|null
condition|?
literal|null
else|:
name|inheritedInScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getInheritedPrefix
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
return|return
name|inheritedInScopePrefixes
operator|==
literal|null
condition|?
literal|null
else|:
name|inheritedInScopePrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getURIForPrefix
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|)
block|{
comment|// try in-scope namespace declarations
name|String
name|uri
init|=
operator|(
name|inScopeNamespaces
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|inScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
return|return
name|uri
return|;
block|}
if|if
condition|(
name|inheritNamespaces
condition|)
block|{
name|uri
operator|=
operator|(
name|inheritedInScopeNamespaces
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|inheritedInScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
return|return
name|uri
return|;
block|}
block|}
return|return
name|staticNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
comment|/* old code checked namespaces first             String ns = (String) namespaces.get(prefix);             if (ns == null)               // try in-scope namespace declarations               return inScopeNamespaces == null                   ? null                   : (String) inScopeNamespaces.get(prefix);             else               return ns;               */
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getPrefixForURI
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
name|String
name|prefix
init|=
operator|(
name|inScopePrefixes
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|inScopePrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
return|return
name|prefix
return|;
block|}
if|if
condition|(
name|inheritNamespaces
condition|)
block|{
name|prefix
operator|=
operator|(
name|inheritedInScopePrefixes
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|inheritedInScopePrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
block|{
return|return
name|prefix
return|;
block|}
block|}
return|return
name|staticPrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getDefaultFunctionNamespace
parameter_list|()
block|{
return|return
name|defaultFunctionNamespace
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setDefaultFunctionNamespace
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//Not sure for the 2nd clause : eXist-db forces the function NS as default.
if|if
condition|(
operator|(
name|defaultFunctionNamespace
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|defaultFunctionNamespace
operator|.
name|equals
argument_list|(
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
operator|&&
operator|!
name|defaultFunctionNamespace
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0066
argument_list|,
literal|"Default function namespace is already set to: '"
operator|+
name|defaultFunctionNamespace
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|defaultFunctionNamespace
operator|=
name|uri
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getDefaultElementNamespaceSchema
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|defaultElementNamespaceSchema
operator|.
name|getStringValue
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setDefaultElementNamespaceSchema
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// eXist forces the empty element NS as default.
if|if
condition|(
operator|!
name|defaultElementNamespaceSchema
operator|.
name|equals
argument_list|(
name|AnyURIValue
operator|.
name|EMPTY_URI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0066
argument_list|,
literal|"Default function namespace schema is already set to: '"
operator|+
name|defaultElementNamespaceSchema
operator|.
name|getStringValue
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|defaultElementNamespaceSchema
operator|=
operator|new
name|AnyURIValue
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getDefaultElementNamespace
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|defaultElementNamespace
operator|.
name|getStringValue
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setDefaultElementNamespace
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|schema
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// eXist forces the empty element NS as default.
if|if
condition|(
operator|!
name|defaultElementNamespace
operator|.
name|equals
argument_list|(
name|AnyURIValue
operator|.
name|EMPTY_URI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0066
argument_list|,
literal|"Default element namespace is already set to: '"
operator|+
name|defaultElementNamespace
operator|.
name|getStringValue
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|defaultElementNamespace
operator|=
operator|new
name|AnyURIValue
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|defaultElementNamespaceSchema
operator|=
operator|new
name|AnyURIValue
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setDefaultCollation
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|Collations
operator|.
name|UNICODE_CODEPOINT_COLLATION_URI
argument_list|)
operator|||
name|uri
operator|.
name|equals
argument_list|(
name|Collations
operator|.
name|CODEPOINT_SHORT
argument_list|)
condition|)
block|{
name|defaultCollation
operator|=
name|Collations
operator|.
name|UNICODE_CODEPOINT_COLLATION_URI
expr_stmt|;
name|defaultCollator
operator|=
literal|null
expr_stmt|;
block|}
specifier|final
name|URI
name|uriTest
decl_stmt|;
try|try
block|{
name|uriTest
operator|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0038
argument_list|,
literal|"Unknown collation : '"
operator|+
name|uri
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|Collations
operator|.
name|EXIST_COLLATION_URI
argument_list|)
operator|||
name|uri
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'?'
operator|||
name|uriTest
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|defaultCollator
operator|=
name|Collations
operator|.
name|getCollationFromURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|defaultCollation
operator|=
name|uri
expr_stmt|;
block|}
else|else
block|{
name|String
name|absUri
init|=
name|getBaseURI
argument_list|()
operator|.
name|getStringValue
argument_list|()
operator|+
name|uri
decl_stmt|;
name|defaultCollator
operator|=
name|Collations
operator|.
name|getCollationFromURI
argument_list|(
name|absUri
argument_list|)
expr_stmt|;
name|defaultCollation
operator|=
name|absUri
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getDefaultCollation
parameter_list|()
block|{
return|return
name|defaultCollation
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Collator
name|getCollator
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
return|return
name|defaultCollator
return|;
block|}
return|return
name|Collations
operator|.
name|getCollationFromURI
argument_list|(
name|uri
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Collator
name|getDefaultCollator
parameter_list|()
block|{
return|return
name|defaultCollator
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setStaticallyKnownDocuments
parameter_list|(
specifier|final
name|XmldbURI
index|[]
name|docs
parameter_list|)
block|{
name|staticDocumentPaths
operator|=
name|docs
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setStaticallyKnownDocuments
parameter_list|(
specifier|final
name|DocumentSet
name|set
parameter_list|)
block|{
name|staticDocuments
operator|=
name|set
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|addDynamicallyAvailableDocument
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|TriFunctionE
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|String
argument_list|,
name|Either
argument_list|<
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
argument_list|,
name|DocumentImpl
argument_list|>
argument_list|,
name|XPathException
argument_list|>
name|supplier
parameter_list|)
block|{
if|if
condition|(
name|dynamicDocuments
operator|==
literal|null
condition|)
block|{
name|dynamicDocuments
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|dynamicDocuments
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|supplier
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|addDynamicallyAvailableTextResource
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|Charset
name|encoding
parameter_list|,
specifier|final
name|QuadFunctionE
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|String
argument_list|,
name|Charset
argument_list|,
name|Reader
argument_list|,
name|XPathException
argument_list|>
name|supplier
parameter_list|)
block|{
if|if
condition|(
name|dynamicTextResources
operator|==
literal|null
condition|)
block|{
name|dynamicTextResources
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|dynamicTextResources
operator|.
name|put
argument_list|(
name|Tuple
argument_list|(
name|uri
argument_list|,
name|encoding
argument_list|)
argument_list|,
name|supplier
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|void
name|addDynamicallyAvailableCollection
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|TriFunctionE
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|String
argument_list|,
name|Sequence
argument_list|,
name|XPathException
argument_list|>
name|supplier
parameter_list|)
block|{
if|if
condition|(
name|dynamicCollections
operator|==
literal|null
condition|)
block|{
name|dynamicCollections
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|dynamicCollections
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|supplier
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setCalendar
parameter_list|(
specifier|final
name|XMLGregorianCalendar
name|newCalendar
parameter_list|)
block|{
name|this
operator|.
name|calendar
operator|=
operator|(
name|XMLGregorianCalendar
operator|)
name|newCalendar
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setTimeZone
parameter_list|(
specifier|final
name|TimeZone
name|newTimeZone
parameter_list|)
block|{
name|this
operator|.
name|implicitTimeZone
operator|=
name|newTimeZone
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|XMLGregorianCalendar
name|getCalendar
parameter_list|()
block|{
comment|//TODO : we might prefer to return null
if|if
condition|(
name|calendar
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|//Initialize to current dateTime
name|calendar
operator|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//That's how we ensure stability of that static context function
return|return
name|calendar
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|TimeZone
name|getImplicitTimeZone
parameter_list|()
block|{
if|if
condition|(
name|implicitTimeZone
operator|==
literal|null
condition|)
block|{
name|implicitTimeZone
operator|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
expr_stmt|;
if|if
condition|(
name|implicitTimeZone
operator|.
name|inDaylightTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
condition|)
block|{
name|implicitTimeZone
operator|.
name|setRawOffset
argument_list|(
name|implicitTimeZone
operator|.
name|getRawOffset
argument_list|()
operator|+
name|implicitTimeZone
operator|.
name|getDSTSavings
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//That's how we ensure stability of that static context function
return|return
name|this
operator|.
name|implicitTimeZone
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|DocumentSet
name|getStaticallyKnownDocuments
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
name|staticDocuments
operator|!=
literal|null
condition|)
block|{
comment|// the document set has already been built, return it
return|return
name|staticDocuments
return|;
block|}
if|if
condition|(
name|protectedDocuments
operator|!=
literal|null
condition|)
block|{
name|staticDocuments
operator|=
name|protectedDocuments
operator|.
name|toDocumentSet
argument_list|()
expr_stmt|;
return|return
name|staticDocuments
return|;
block|}
specifier|final
name|MutableDocumentSet
name|ndocs
init|=
operator|new
name|DefaultDocumentSet
argument_list|(
literal|40
argument_list|)
decl_stmt|;
if|if
condition|(
name|staticDocumentPaths
operator|==
literal|null
condition|)
block|{
comment|// no path defined: return all documents in the db
try|try
block|{
name|getBroker
argument_list|()
operator|.
name|getAllXMLResources
argument_list|(
name|ndocs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Permission denied to read resource all resources: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
for|for
control|(
specifier|final
name|XmldbURI
name|staticDocumentPath
range|:
name|staticDocumentPaths
control|)
block|{
try|try
block|{
specifier|final
name|Collection
name|collection
init|=
name|getBroker
argument_list|()
operator|.
name|getCollection
argument_list|(
name|staticDocumentPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|allDocs
argument_list|(
name|getBroker
argument_list|()
argument_list|,
name|ndocs
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|getBroker
argument_list|()
operator|.
name|getXMLResource
argument_list|(
name|staticDocumentPath
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|lockedDocument
operator|==
literal|null
condition|?
literal|null
else|:
name|lockedDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|getBroker
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|ndocs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|LockException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Permission denied to read resource "
operator|+
name|staticDocumentPath
operator|+
literal|". Skipping it."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|staticDocuments
operator|=
name|ndocs
expr_stmt|;
return|return
name|staticDocuments
return|;
block|}
end_function

begin_function
specifier|public
name|DocumentSet
name|getStaticDocs
parameter_list|()
block|{
return|return
name|staticDocuments
return|;
block|}
end_function

begin_comment
comment|/**      * Get's a document from the "Available documents" of the      * dynamic context.      *      * @param uri the URI by which the document was registered      * @return sequence of available documents matching the URI      * @throws XPathException in case of dynamic error      */
end_comment

begin_function
specifier|public
annotation|@
name|Nullable
name|Sequence
name|getDynamicallyAvailableDocument
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|dynamicDocuments
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|TriFunctionE
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|String
argument_list|,
name|Either
argument_list|<
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
argument_list|,
name|DocumentImpl
argument_list|>
argument_list|,
name|XPathException
argument_list|>
name|docSupplier
init|=
name|dynamicDocuments
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|docSupplier
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|docSupplier
operator|.
name|apply
argument_list|(
name|getBroker
argument_list|()
argument_list|,
name|getBroker
argument_list|()
operator|.
name|getCurrentTransaction
argument_list|()
argument_list|,
name|uri
argument_list|)
operator|.
name|fold
argument_list|(
name|md
lambda|->
name|md
argument_list|,
name|pd
lambda|->
operator|(
name|Sequence
operator|)
name|pd
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Get's a text resource from the "Available text resources" of the      * dynamic context.      *      * @param uri the URI by which the document was registered      * @param charset the charset to use for retrieving the resource      * @return a reader to read the resource content from      * @throws XPathException in case of a dynamic error      */
end_comment

begin_function
specifier|public
annotation|@
name|Nullable
name|Reader
name|getDynamicallyAvailableTextResource
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|Charset
name|charset
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|dynamicTextResources
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|QuadFunctionE
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|String
argument_list|,
name|Charset
argument_list|,
name|Reader
argument_list|,
name|XPathException
argument_list|>
name|textResourceSupplier
init|=
name|dynamicTextResources
operator|.
name|get
argument_list|(
name|Tuple
argument_list|(
name|uri
argument_list|,
name|charset
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|textResourceSupplier
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|textResourceSupplier
operator|.
name|apply
argument_list|(
name|getBroker
argument_list|()
argument_list|,
name|getBroker
argument_list|()
operator|.
name|getCurrentTransaction
argument_list|()
argument_list|,
name|uri
argument_list|,
name|charset
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Get's a collection from the "Available collections" of the      * dynamic context.      *      * @param uri the URI of the collection to retrieve      * @return a sequence of document nodes      * @throws XPathException in case of dynamic error      */
end_comment

begin_function
specifier|public
annotation|@
name|Nullable
name|Sequence
name|getDynamicallyAvailableCollection
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|dynamicCollections
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|TriFunctionE
argument_list|<
name|DBBroker
argument_list|,
name|Txn
argument_list|,
name|String
argument_list|,
name|Sequence
argument_list|,
name|XPathException
argument_list|>
name|collectionSupplier
init|=
name|dynamicCollections
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collectionSupplier
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|collectionSupplier
operator|.
name|apply
argument_list|(
name|getBroker
argument_list|()
argument_list|,
name|getBroker
argument_list|()
operator|.
name|getCurrentTransaction
argument_list|()
argument_list|,
name|uri
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|ExtendedXMLStreamReader
name|getXMLStreamReader
parameter_list|(
specifier|final
name|NodeValue
name|nv
parameter_list|)
throws|throws
name|XMLStreamException
throws|,
name|IOException
block|{
specifier|final
name|ExtendedXMLStreamReader
name|reader
decl_stmt|;
if|if
condition|(
name|nv
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|IN_MEMORY_NODE
condition|)
block|{
specifier|final
name|NodeImpl
name|node
init|=
operator|(
name|NodeImpl
operator|)
name|nv
decl_stmt|;
specifier|final
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
name|ownerDoc
init|=
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|?
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
operator|)
name|node
else|:
name|node
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|reader
operator|=
operator|new
name|InMemoryXMLStreamReader
argument_list|(
name|ownerDoc
argument_list|,
name|ownerDoc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|nv
decl_stmt|;
name|reader
operator|=
name|getBroker
argument_list|()
operator|.
name|newXMLStreamReader
argument_list|(
operator|new
name|NodeProxy
argument_list|(
name|proxy
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|,
name|proxy
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getFirstChildAddress
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|reader
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setProtectedDocs
parameter_list|(
specifier|final
name|LockedDocumentMap
name|map
parameter_list|)
block|{
name|this
operator|.
name|protectedDocuments
operator|=
name|map
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|LockedDocumentMap
name|getProtectedDocs
parameter_list|()
block|{
return|return
name|this
operator|.
name|protectedDocuments
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|inProtectedMode
parameter_list|()
block|{
return|return
name|protectedDocuments
operator|!=
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|lockDocumentsOnLoad
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
end_function

begin_comment
comment|//  /**
end_comment

begin_comment
comment|//   * If lock is true, all documents loaded during query execution
end_comment

begin_comment
comment|//   * will be locked. This way, we avoid that query results become
end_comment

begin_comment
comment|//   * invalid before the entire result has been processed by the client
end_comment

begin_comment
comment|//   * code. All attempts to modify nodes which are part of the result
end_comment

begin_comment
comment|//   * set will be blocked.
end_comment

begin_comment
comment|//   *
end_comment

begin_comment
comment|//   * However, it is the client's responsibility to proper unlock
end_comment

begin_comment
comment|//   * all documents once processing is completed.
end_comment

begin_comment
comment|//   *
end_comment

begin_comment
comment|//   * @param lock
end_comment

begin_comment
comment|//   */
end_comment

begin_comment
comment|//  public void setLockDocumentsOnLoad(boolean lock) {
end_comment

begin_comment
comment|//      lockDocumentsOnLoad = lock;
end_comment

begin_comment
comment|//      if(lock)
end_comment

begin_comment
comment|//          lockedDocuments = new LockedDocumentMap();
end_comment

begin_comment
comment|//  }
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addLockedDocument
parameter_list|(
specifier|final
name|DocumentImpl
name|doc
parameter_list|)
block|{
comment|//        if (lockedDocuments != null)
comment|//           lockedDocuments.add(doc);
block|}
end_function

begin_comment
comment|//    /**
end_comment

begin_comment
comment|//     * Release all locks on documents that have been locked
end_comment

begin_comment
comment|//     * during query execution.
end_comment

begin_comment
comment|//     *
end_comment

begin_comment
comment|//     *@see #setLockDocumentsOnLoad(boolean)
end_comment

begin_comment
comment|//     */
end_comment

begin_comment
comment|//  public void releaseLockedDocuments() {
end_comment

begin_comment
comment|//        if(lockedDocuments != null)
end_comment

begin_comment
comment|//          lockedDocuments.unlock();
end_comment

begin_comment
comment|//      lockDocumentsOnLoad = false;
end_comment

begin_comment
comment|//      lockedDocuments = null;
end_comment

begin_comment
comment|//  }
end_comment

begin_comment
comment|//    /**
end_comment

begin_comment
comment|//     * Release all locks on documents not being referenced by the sequence.
end_comment

begin_comment
comment|//     * This is called after query execution has completed. Only locks on those
end_comment

begin_comment
comment|//     * documents contained in the final result set will be preserved. All other
end_comment

begin_comment
comment|//     * locks are released as they are no longer needed.
end_comment

begin_comment
comment|//     *
end_comment

begin_comment
comment|//     * @param seq
end_comment

begin_comment
comment|//     * @throws XPathException
end_comment

begin_comment
comment|//     */
end_comment

begin_comment
comment|//  public LockedDocumentMap releaseUnusedDocuments(Sequence seq) throws XPathException {
end_comment

begin_comment
comment|//      if(lockedDocuments == null)
end_comment

begin_comment
comment|//          return null;
end_comment

begin_comment
comment|//        // determine the set of documents referenced by nodes in the sequence
end_comment

begin_comment
comment|//        DocumentSet usedDocs = new DocumentSet();
end_comment

begin_comment
comment|//        for(SequenceIterator i = seq.iterate(); i.hasNext(); ) {
end_comment

begin_comment
comment|//            Item next = i.nextItem();
end_comment

begin_comment
comment|//            if(Type.subTypeOf(next.getType(), Type.NODE)) {
end_comment

begin_comment
comment|//                NodeValue node = (NodeValue) next;
end_comment

begin_comment
comment|//                if(node.getImplementationType() == NodeValue.PERSISTENT_NODE) {
end_comment

begin_comment
comment|//                    DocumentImpl doc = ((NodeProxy)node).getDocument();
end_comment

begin_comment
comment|//                    if(!usedDocs.contains(doc.getDocId()))
end_comment

begin_comment
comment|//                      usedDocs.add(doc, false);
end_comment

begin_comment
comment|//                }
end_comment

begin_comment
comment|//            }
end_comment

begin_comment
comment|//        }
end_comment

begin_comment
comment|//        LockedDocumentMap remaining = lockedDocuments.unlockSome(usedDocs);
end_comment

begin_comment
comment|//        lockDocumentsOnLoad = false;
end_comment

begin_comment
comment|//      lockedDocuments = null;
end_comment

begin_comment
comment|//        return remaining;
end_comment

begin_comment
comment|//    }
end_comment

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setShared
parameter_list|(
specifier|final
name|boolean
name|shared
parameter_list|)
block|{
name|isShared
operator|=
name|shared
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isShared
parameter_list|()
block|{
return|return
name|isShared
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addModifiedDoc
parameter_list|(
specifier|final
name|DocumentImpl
name|document
parameter_list|)
block|{
if|if
condition|(
name|modifiedDocuments
operator|==
literal|null
condition|)
block|{
name|modifiedDocuments
operator|=
operator|new
name|DefaultDocumentSet
argument_list|()
expr_stmt|;
block|}
name|modifiedDocuments
operator|.
name|add
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|reset
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|reset
parameter_list|(
specifier|final
name|boolean
name|keepGlobals
parameter_list|)
block|{
name|setRealUser
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|pushedUserFromHttpSession
condition|)
block|{
try|try
block|{
name|getBroker
argument_list|()
operator|.
name|popSubject
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|pushedUserFromHttpSession
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|modifiedDocuments
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|Modification
operator|.
name|checkFragmentation
argument_list|(
name|this
argument_list|,
name|modifiedDocuments
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
decl||
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while checking modified documents: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|modifiedDocuments
operator|=
literal|null
expr_stmt|;
block|}
name|calendar
operator|=
literal|null
expr_stmt|;
name|implicitTimeZone
operator|=
literal|null
expr_stmt|;
name|resetDocumentBuilder
argument_list|()
expr_stmt|;
name|contextSequence
operator|=
literal|null
expr_stmt|;
name|contextItem
operator|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
expr_stmt|;
if|if
condition|(
operator|!
name|keepGlobals
condition|)
block|{
comment|// do not reset the statically known documents
name|staticDocumentPaths
operator|=
literal|null
expr_stmt|;
name|staticDocuments
operator|=
literal|null
expr_stmt|;
name|dynamicDocuments
operator|=
literal|null
expr_stmt|;
name|dynamicTextResources
operator|=
literal|null
expr_stmt|;
name|dynamicCollections
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|isShared
condition|)
block|{
name|lastVar
operator|=
literal|null
expr_stmt|;
block|}
comment|// clear inline functions using closures
name|closures
operator|.
name|forEach
argument_list|(
name|func
lambda|->
name|func
operator|.
name|setClosureVariables
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
name|closures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fragmentStack
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
name|callStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|protectedDocuments
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|keepGlobals
condition|)
block|{
name|globalVariables
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|dynamicOptions
operator|!=
literal|null
condition|)
block|{
name|dynamicOptions
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//clear any dynamic options
block|}
if|if
condition|(
operator|!
name|isShared
condition|)
block|{
name|watchdog
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|Module
name|module
range|:
name|allModules
operator|.
name|values
argument_list|()
control|)
block|{
name|module
operator|.
name|reset
argument_list|(
name|this
argument_list|,
name|keepGlobals
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|keepGlobals
condition|)
block|{
name|mappedModules
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|savedState
operator|.
name|restore
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|clearUpdateListeners
argument_list|()
expr_stmt|;
name|profiler
operator|.
name|reset
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|keepGlobals
condition|)
block|{
name|httpContext
operator|=
literal|null
expr_stmt|;
block|}
name|analyzed
operator|=
literal|false
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|stripWhitespace
parameter_list|()
block|{
return|return
name|stripWhitespace
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setStripWhitespace
parameter_list|(
specifier|final
name|boolean
name|strip
parameter_list|)
block|{
name|this
operator|.
name|stripWhitespace
operator|=
name|strip
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|preserveNamespaces
parameter_list|()
block|{
return|return
name|preserveNamespaces
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setPreserveNamespaces
parameter_list|(
specifier|final
name|boolean
name|preserve
parameter_list|)
block|{
name|this
operator|.
name|preserveNamespaces
operator|=
name|preserve
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|inheritNamespaces
parameter_list|()
block|{
return|return
name|inheritNamespaces
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setInheritNamespaces
parameter_list|(
specifier|final
name|boolean
name|inherit
parameter_list|)
block|{
name|this
operator|.
name|inheritNamespaces
operator|=
name|inherit
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|orderEmptyGreatest
parameter_list|()
block|{
return|return
name|orderEmptyGreatest
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setOrderEmptyGreatest
parameter_list|(
specifier|final
name|boolean
name|order
parameter_list|)
block|{
name|this
operator|.
name|orderEmptyGreatest
operator|=
name|order
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Module
argument_list|>
name|getModules
parameter_list|()
block|{
return|return
name|modules
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Module
argument_list|>
name|getRootModules
parameter_list|()
block|{
return|return
name|getAllModules
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|Module
argument_list|>
name|getAllModules
parameter_list|()
block|{
return|return
name|allModules
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Module
name|getModule
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
name|modules
operator|.
name|get
argument_list|(
name|namespaceURI
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Module
name|getRootModule
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
name|allModules
operator|.
name|get
argument_list|(
name|namespaceURI
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setModule
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|Module
name|module
parameter_list|)
block|{
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
name|modules
operator|.
name|remove
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
comment|// unbind the module
block|}
else|else
block|{
name|modules
operator|.
name|put
argument_list|(
name|namespaceURI
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
name|setRootModule
argument_list|(
name|namespaceURI
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|setRootModule
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|Module
name|module
parameter_list|)
block|{
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
name|allModules
operator|.
name|remove
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
comment|// unbind the module
return|return;
block|}
if|if
condition|(
name|allModules
operator|.
name|get
argument_list|(
name|namespaceURI
argument_list|)
operator|!=
name|module
condition|)
block|{
name|setModulesChanged
argument_list|()
expr_stmt|;
block|}
name|allModules
operator|.
name|put
argument_list|(
name|namespaceURI
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|setModulesChanged
parameter_list|()
block|{
name|this
operator|.
name|modulesChanged
operator|=
literal|true
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|checkModulesValid
parameter_list|()
block|{
for|for
control|(
specifier|final
name|Module
name|module
range|:
name|allModules
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|module
operator|.
name|isInternalModule
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|moduleIsValid
argument_list|(
name|getBroker
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Module with URI "
operator|+
name|module
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|" has changed and needs to be reloaded"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|analyzeAndOptimizeIfModulesChanged
parameter_list|(
specifier|final
name|Expression
name|expr
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|analyzed
condition|)
block|{
return|return;
block|}
name|analyzed
operator|=
literal|true
expr_stmt|;
for|for
control|(
specifier|final
name|Module
name|module
range|:
name|expr
operator|.
name|getContext
argument_list|()
operator|.
name|modules
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|module
operator|.
name|isInternalModule
argument_list|()
condition|)
block|{
specifier|final
name|Expression
name|root
init|=
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|getRootExpression
argument_list|()
decl_stmt|;
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|getContext
argument_list|()
operator|.
name|analyzeAndOptimizeIfModulesChanged
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
block|}
name|expr
operator|.
name|analyze
argument_list|(
operator|new
name|AnalyzeContextInfo
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|optimizationsEnabled
argument_list|()
condition|)
block|{
specifier|final
name|Optimizer
name|optimizer
init|=
operator|new
name|Optimizer
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|expr
operator|.
name|accept
argument_list|(
name|optimizer
argument_list|)
expr_stmt|;
if|if
condition|(
name|optimizer
operator|.
name|hasOptimized
argument_list|()
condition|)
block|{
name|reset
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expr
operator|.
name|resetState
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expr
operator|.
name|analyze
argument_list|(
operator|new
name|AnalyzeContextInfo
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|modulesChanged
operator|=
literal|false
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Module
name|loadBuiltInModule
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|moduleClass
parameter_list|)
block|{
name|Module
name|module
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
condition|)
block|{
name|module
operator|=
name|getModule
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"module "
operator|+
name|namespaceURI
operator|+
literal|" is already present"
argument_list|)
expr_stmt|;
block|}
return|return
name|module
return|;
block|}
return|return
name|initBuiltInModule
argument_list|(
name|namespaceURI
argument_list|,
name|moduleClass
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|Module
name|initBuiltInModule
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|moduleClass
parameter_list|)
block|{
name|Module
name|module
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// lookup the class
specifier|final
name|ClassLoader
name|existClassLoader
init|=
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|mClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|moduleClass
argument_list|,
literal|false
argument_list|,
name|existClassLoader
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Module
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mClass
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"failed to load module. "
operator|+
name|moduleClass
operator|+
literal|" is not an instance of org.exist.xquery.Module."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|//instantiateModule( namespaceURI, (Class<Module>)mClass );
comment|// INOTE: expathrepo
name|module
operator|=
name|instantiateModule
argument_list|(
name|namespaceURI
argument_list|,
operator|(
name|Class
argument_list|<
name|Module
argument_list|>
operator|)
name|mClass
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PROPERTY_MODULE_PARAMETERS
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"module "
operator|+
name|module
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|" loaded successfully."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"module class "
operator|+
name|moduleClass
operator|+
literal|" not found. Skipping..."
argument_list|)
expr_stmt|;
block|}
return|return
name|module
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|private
name|Module
name|instantiateModule
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|Class
argument_list|<
name|Module
argument_list|>
name|mClazz
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|>
name|moduleParameters
parameter_list|)
block|{
name|Module
name|module
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
comment|// attempt for a constructor that takes 1 argument
specifier|final
name|Constructor
argument_list|<
name|Module
argument_list|>
name|cstr1
init|=
name|mClazz
operator|.
name|getConstructor
argument_list|(
name|Map
operator|.
name|class
argument_list|)
decl_stmt|;
name|module
operator|=
name|cstr1
operator|.
name|newInstance
argument_list|(
name|moduleParameters
operator|.
name|get
argument_list|(
name|namespaceURI
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
comment|// attempt for a constructor that takes 0 arguments
name|module
operator|=
name|mClazz
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
operator|&&
operator|!
name|module
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"the module declares a different namespace URI. Expected: "
operator|+
name|namespaceURI
operator|+
literal|" found: "
operator|+
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|getPrefixForURI
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|module
operator|.
name|getDefaultPrefix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|declareNamespace
argument_list|(
name|module
operator|.
name|getDefaultPrefix
argument_list|()
argument_list|,
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|modules
operator|.
name|put
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
name|allModules
operator|.
name|put
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
if|if
condition|(
name|module
operator|instanceof
name|InternalModule
condition|)
block|{
operator|(
operator|(
name|InternalModule
operator|)
name|module
operator|)
operator|.
name|prepare
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
comment|// NOTE: must set interrupted flag
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while instantiating module class "
operator|+
name|mClazz
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|module
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|declareFunction
parameter_list|(
specifier|final
name|UserDefinedFunction
name|function
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// TODO: redeclaring functions should be forbidden. however, throwing an
comment|// exception will currently break util:eval.
specifier|final
name|QName
name|name
init|=
name|function
operator|.
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|XML_NS
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|function
argument_list|,
name|ErrorCodes
operator|.
name|XQST0045
argument_list|,
literal|"Function '"
operator|+
name|name
operator|+
literal|"' is in the forbidden namespace '"
operator|+
name|XML_NS
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Namespaces
operator|.
name|SCHEMA_NS
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|function
argument_list|,
name|ErrorCodes
operator|.
name|XQST0045
argument_list|,
literal|"Function '"
operator|+
name|name
operator|+
literal|"' is in the forbidden namespace '"
operator|+
name|Namespaces
operator|.
name|SCHEMA_NS
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Namespaces
operator|.
name|SCHEMA_INSTANCE_NS
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|function
argument_list|,
name|ErrorCodes
operator|.
name|XQST0045
argument_list|,
literal|"Function '"
operator|+
name|name
operator|+
literal|"' is in the forbidden namespace '"
operator|+
name|Namespaces
operator|.
name|SCHEMA_INSTANCE_NS
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
operator|.
name|equals
argument_list|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|function
argument_list|,
name|ErrorCodes
operator|.
name|XQST0045
argument_list|,
literal|"Function '"
operator|+
name|name
operator|+
literal|"' is in the forbidden namespace '"
operator|+
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|name
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|function
argument_list|,
name|ErrorCodes
operator|.
name|XQST0060
argument_list|,
literal|"Every declared function name must have a non-null namespace URI, but function '"
operator|+
name|name
operator|+
literal|"' does not meet this requirement."
argument_list|)
throw|;
block|}
name|declaredFunctions
operator|.
name|put
argument_list|(
name|function
operator|.
name|getSignature
argument_list|()
operator|.
name|getFunctionId
argument_list|()
argument_list|,
name|function
argument_list|)
expr_stmt|;
comment|//      if (declaredFunctions.get(function.getSignature().getFunctionId()) == null)
comment|//              declaredFunctions.put(function.getSignature().getFunctionId(), function);
comment|//      else
comment|//          throw new XPathException("XQST0034: function " + function.getName() + " is already defined with the same arity");
block|}
end_function

begin_function
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|UserDefinedFunction
name|resolveFunction
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
specifier|final
name|int
name|argCount
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|FunctionId
name|id
init|=
operator|new
name|FunctionId
argument_list|(
name|name
argument_list|,
name|argCount
argument_list|)
decl_stmt|;
return|return
name|declaredFunctions
operator|.
name|get
argument_list|(
name|id
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|FunctionSignature
argument_list|>
name|getSignaturesForFunction
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|)
block|{
specifier|final
name|ArrayList
argument_list|<
name|FunctionSignature
argument_list|>
name|signatures
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|UserDefinedFunction
name|func
range|:
name|declaredFunctions
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|func
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|signatures
operator|.
name|add
argument_list|(
name|func
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|signatures
operator|.
name|iterator
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|UserDefinedFunction
argument_list|>
name|localFunctions
parameter_list|()
block|{
return|return
name|declaredFunctions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|LocalVariable
name|declareVariableBinding
parameter_list|(
specifier|final
name|LocalVariable
name|var
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|lastVar
operator|==
literal|null
condition|)
block|{
name|lastVar
operator|=
name|var
expr_stmt|;
block|}
else|else
block|{
name|lastVar
operator|.
name|addAfter
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|lastVar
operator|=
name|var
expr_stmt|;
block|}
name|var
operator|.
name|setStackPosition
argument_list|(
name|getCurrentStackSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Variable
name|declareGlobalVariable
parameter_list|(
specifier|final
name|Variable
name|var
parameter_list|)
block|{
name|globalVariables
operator|.
name|put
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
argument_list|,
name|var
argument_list|)
expr_stmt|;
name|var
operator|.
name|setStackPosition
argument_list|(
name|getCurrentStackSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|undeclareGlobalVariable
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|)
block|{
name|globalVariables
operator|.
name|remove
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Variable
name|declareVariable
parameter_list|(
specifier|final
name|String
name|qname
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
return|return
name|declareVariable
argument_list|(
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|qname
argument_list|,
literal|null
argument_list|)
argument_list|,
name|value
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|QName
operator|.
name|IllegalQNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XPST0081
argument_list|,
literal|"No namespace defined for prefix: "
operator|+
name|qname
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Variable
name|declareVariable
parameter_list|(
specifier|final
name|QName
name|qn
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
name|Variable
name|var
decl_stmt|;
specifier|final
name|Module
name|module
init|=
name|getModule
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|module
operator|.
name|declareVariable
argument_list|(
name|qn
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
specifier|final
name|Sequence
name|val
init|=
name|XPathUtil
operator|.
name|javaObjectToXPath
argument_list|(
name|value
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|var
operator|=
name|globalVariables
operator|.
name|get
argument_list|(
name|qn
argument_list|)
expr_stmt|;
if|if
condition|(
name|var
operator|==
literal|null
condition|)
block|{
name|var
operator|=
operator|new
name|VariableImpl
argument_list|(
name|qn
argument_list|)
expr_stmt|;
name|globalVariables
operator|.
name|put
argument_list|(
name|qn
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|actualCardinality
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|actualCardinality
operator|=
name|Cardinality
operator|.
name|EMPTY
expr_stmt|;
block|}
if|else if
condition|(
name|val
operator|.
name|hasMany
argument_list|()
condition|)
block|{
name|actualCardinality
operator|=
name|Cardinality
operator|.
name|MANY
expr_stmt|;
block|}
else|else
block|{
name|actualCardinality
operator|=
name|Cardinality
operator|.
name|ONE
expr_stmt|;
block|}
comment|//Type.EMPTY is *not* a subtype of other types ; checking cardinality first
if|if
condition|(
operator|!
name|Cardinality
operator|.
name|checkCardinality
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getCardinality
argument_list|()
argument_list|,
name|actualCardinality
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPTY0004: Invalid cardinality for variable $"
operator|+
name|var
operator|.
name|getQName
argument_list|()
operator|+
literal|". Expected "
operator|+
name|Cardinality
operator|.
name|getDescription
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getCardinality
argument_list|()
argument_list|)
operator|+
literal|", got "
operator|+
name|Cardinality
operator|.
name|getDescription
argument_list|(
name|actualCardinality
argument_list|)
argument_list|)
throw|;
block|}
comment|//TODO : ignore nodes right now ; they are returned as xs:untypedAtomicType
if|if
condition|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|val
operator|.
name|getItemType
argument_list|()
argument_list|,
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPTY0004: Invalid type for variable $"
operator|+
name|var
operator|.
name|getQName
argument_list|()
operator|+
literal|". Expected "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
operator|+
literal|", got "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|val
operator|.
name|getItemType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|//Here is an attempt to process the nodes correctly
block|}
else|else
block|{
comment|//Same as above : we probably may factorize
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|val
operator|.
name|getItemType
argument_list|()
argument_list|,
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPTY0004: Invalid type for variable $"
operator|+
name|var
operator|.
name|getQName
argument_list|()
operator|+
literal|". Expected "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
operator|+
literal|", got "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|val
operator|.
name|getItemType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
block|}
comment|//TODO : should we allow global variable *re*declaration ?
name|var
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Variable
name|resolveVariable
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
specifier|final
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|resolveVariable
argument_list|(
name|qn
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|QName
operator|.
name|IllegalQNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XPST0081
argument_list|,
literal|"No namespace defined for prefix "
operator|+
name|name
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Variable
name|resolveVariable
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// check if the variable is declared local
name|Variable
name|var
init|=
name|resolveLocalVariable
argument_list|(
name|qname
argument_list|)
decl_stmt|;
comment|// check if the variable is declared in a module
if|if
condition|(
name|var
operator|==
literal|null
condition|)
block|{
specifier|final
name|Module
name|module
init|=
name|getModule
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|module
operator|.
name|resolveVariable
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if the variable is declared global
if|if
condition|(
name|var
operator|==
literal|null
condition|)
block|{
name|var
operator|=
name|globalVariables
operator|.
name|get
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
comment|//if (var == null)
comment|//  throw new XPathException("variable $" + qname + " is not bound");
return|return
name|var
return|;
block|}
end_function

begin_function
name|Variable
name|resolveGlobalVariable
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
return|return
name|globalVariables
operator|.
name|get
argument_list|(
name|qname
argument_list|)
return|;
block|}
end_function

begin_function
specifier|protected
name|Variable
name|resolveLocalVariable
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|LocalVariable
name|end
init|=
name|contextStack
operator|.
name|peek
argument_list|()
decl_stmt|;
for|for
control|(
name|LocalVariable
name|var
init|=
name|lastVar
init|;
name|var
operator|!=
literal|null
condition|;
name|var
operator|=
name|var
operator|.
name|before
control|)
block|{
if|if
condition|(
name|var
operator|==
name|end
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|qname
operator|.
name|equals
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|var
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isVarDeclared
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
specifier|final
name|Module
name|module
init|=
name|getModule
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|module
operator|.
name|isVarDeclared
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
name|globalVariables
operator|.
name|get
argument_list|(
name|qname
argument_list|)
operator|!=
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|Variable
argument_list|>
name|getVariables
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Variable
argument_list|>
name|variables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|globalVariables
argument_list|)
decl_stmt|;
name|LocalVariable
name|end
init|=
name|contextStack
operator|.
name|peek
argument_list|()
decl_stmt|;
for|for
control|(
name|LocalVariable
name|var
init|=
name|lastVar
init|;
name|var
operator|!=
literal|null
condition|;
name|var
operator|=
name|var
operator|.
name|before
control|)
block|{
if|if
condition|(
name|var
operator|==
name|end
condition|)
block|{
break|break;
block|}
name|variables
operator|.
name|put
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
return|return
name|variables
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|Variable
argument_list|>
name|getLocalVariables
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|QName
argument_list|,
name|Variable
argument_list|>
name|variables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LocalVariable
name|end
init|=
name|contextStack
operator|.
name|peek
argument_list|()
decl_stmt|;
for|for
control|(
name|LocalVariable
name|var
init|=
name|lastVar
init|;
name|var
operator|!=
literal|null
condition|;
name|var
operator|=
name|var
operator|.
name|before
control|)
block|{
if|if
condition|(
name|var
operator|==
name|end
condition|)
block|{
break|break;
block|}
name|variables
operator|.
name|put
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
return|return
name|variables
return|;
block|}
end_function

begin_comment
comment|/**      * Return a copy of all currently visible local variables.      * Used by {@link InlineFunction} to implement closures.      *      * @return currently visible local variables as a stack      */
end_comment

begin_function
specifier|public
name|List
argument_list|<
name|ClosureVariable
argument_list|>
name|getLocalStack
parameter_list|()
block|{
name|List
argument_list|<
name|ClosureVariable
argument_list|>
name|closure
init|=
literal|null
decl_stmt|;
specifier|final
name|LocalVariable
name|end
init|=
name|contextStack
operator|.
name|peek
argument_list|()
decl_stmt|;
for|for
control|(
name|LocalVariable
name|var
init|=
name|lastVar
init|;
name|var
operator|!=
literal|null
condition|;
name|var
operator|=
name|var
operator|.
name|before
control|)
block|{
if|if
condition|(
name|var
operator|==
name|end
condition|)
block|{
break|break;
block|}
if|if
condition|(
name|closure
operator|==
literal|null
condition|)
block|{
name|closure
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|6
argument_list|)
expr_stmt|;
block|}
name|closure
operator|.
name|add
argument_list|(
operator|new
name|ClosureVariable
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|closure
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|Variable
argument_list|>
name|getGlobalVariables
parameter_list|()
block|{
return|return
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|globalVariables
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Restore a saved stack of local variables. Used to implement closures.      *      * @param stack the stack of local variables      * @throws XPathException if the stack cannot be restored      */
end_comment

begin_function
specifier|public
name|void
name|restoreStack
parameter_list|(
specifier|final
name|List
argument_list|<
name|ClosureVariable
argument_list|>
name|stack
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
name|int
name|i
init|=
name|stack
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
block|{
name|declareVariableBinding
argument_list|(
operator|new
name|ClosureVariable
argument_list|(
name|stack
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setBackwardsCompatibility
parameter_list|(
name|boolean
name|backwardsCompatible
parameter_list|)
block|{
name|this
operator|.
name|backwardsCompatible
operator|=
name|backwardsCompatible
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isBackwardsCompatible
parameter_list|()
block|{
return|return
name|this
operator|.
name|backwardsCompatible
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isRaiseErrorOnFailedRetrieval
parameter_list|()
block|{
return|return
name|raiseErrorOnFailedRetrieval
return|;
block|}
end_function

begin_function
specifier|public
name|Database
name|getDatabase
parameter_list|()
block|{
return|return
name|db
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|DBBroker
name|getBroker
parameter_list|()
block|{
return|return
name|db
operator|.
name|getActiveBroker
argument_list|()
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Subject
name|getSubject
parameter_list|()
block|{
return|return
name|getBroker
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * If there is a HTTP Session, and a User has been stored in the session then this will return the user object from the session.      *      * @return The user or null if there is no session or no user      */
end_comment

begin_function
name|Subject
name|getUserFromHttpSession
parameter_list|()
block|{
specifier|final
name|Optional
argument_list|<
name|RequestWrapper
argument_list|>
name|maybeRequest
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|getHttpContext
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|HttpContext
operator|::
name|getRequest
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeRequest
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|RequestWrapper
name|request
init|=
name|maybeRequest
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Object
name|user
init|=
name|request
operator|.
name|getAttribute
argument_list|(
name|HTTP_REQ_ATTR_USER
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|passAttr
init|=
name|request
operator|.
name|getAttribute
argument_list|(
name|HTTP_REQ_ATTR_PASS
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|password
init|=
name|passAttr
operator|==
literal|null
condition|?
literal|null
else|:
name|passAttr
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|user
operator|.
name|toString
argument_list|()
argument_list|,
name|password
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthenticationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"User can not be authenticated: "
operator|+
name|user
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|Optional
argument_list|<
name|SessionWrapper
argument_list|>
name|maybeSession
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|getHttpContext
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|HttpContext
operator|::
name|getSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeSession
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
operator|(
name|Subject
operator|)
name|maybeSession
operator|.
name|get
argument_list|()
operator|.
name|getAttribute
argument_list|(
name|HTTP_SESSIONVAR_XMLDB_USER
argument_list|)
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_comment
comment|/**      * The builder used for creating in-memory document fragments.      */
end_comment

begin_decl_stmt
specifier|private
name|MemTreeBuilder
name|documentBuilder
init|=
literal|null
decl_stmt|;
end_decl_stmt

begin_function
annotation|@
name|Override
specifier|public
name|MemTreeBuilder
name|getDocumentBuilder
parameter_list|()
block|{
if|if
condition|(
name|documentBuilder
operator|==
literal|null
condition|)
block|{
name|documentBuilder
operator|=
operator|new
name|MemTreeBuilder
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|documentBuilder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
return|return
name|documentBuilder
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|MemTreeBuilder
name|getDocumentBuilder
parameter_list|(
specifier|final
name|boolean
name|explicitCreation
parameter_list|)
block|{
if|if
condition|(
name|documentBuilder
operator|==
literal|null
condition|)
block|{
name|documentBuilder
operator|=
operator|new
name|MemTreeBuilder
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|documentBuilder
operator|.
name|startDocument
argument_list|(
name|explicitCreation
argument_list|)
expr_stmt|;
block|}
return|return
name|documentBuilder
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|resetDocumentBuilder
parameter_list|()
block|{
name|this
operator|.
name|documentBuilder
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|setDocumentBuilder
parameter_list|(
specifier|final
name|MemTreeBuilder
name|documentBuilder
parameter_list|)
block|{
name|this
operator|.
name|documentBuilder
operator|=
name|documentBuilder
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|NamePool
name|getSharedNamePool
parameter_list|()
block|{
if|if
condition|(
name|sharedNamePool
operator|==
literal|null
condition|)
block|{
name|sharedNamePool
operator|=
operator|new
name|NamePool
argument_list|()
expr_stmt|;
block|}
return|return
name|sharedNamePool
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|XQueryContext
name|getContext
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|prologEnter
parameter_list|(
specifier|final
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|debuggeeJoint
operator|!=
literal|null
condition|)
block|{
name|debuggeeJoint
operator|.
name|prologEnter
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|expressionStart
parameter_list|(
specifier|final
name|Expression
name|expr
parameter_list|)
throws|throws
name|TerminatedException
block|{
if|if
condition|(
name|debuggeeJoint
operator|!=
literal|null
condition|)
block|{
name|debuggeeJoint
operator|.
name|expressionStart
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|expressionEnd
parameter_list|(
specifier|final
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|debuggeeJoint
operator|!=
literal|null
condition|)
block|{
name|debuggeeJoint
operator|.
name|expressionEnd
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|stackEnter
parameter_list|(
specifier|final
name|Expression
name|expr
parameter_list|)
throws|throws
name|TerminatedException
block|{
if|if
condition|(
name|debuggeeJoint
operator|!=
literal|null
condition|)
block|{
name|debuggeeJoint
operator|.
name|stackEnter
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|stackLeave
parameter_list|(
specifier|final
name|Expression
name|expr
parameter_list|)
block|{
if|if
condition|(
name|debuggeeJoint
operator|!=
literal|null
condition|)
block|{
name|debuggeeJoint
operator|.
name|stackLeave
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|proceed
parameter_list|()
throws|throws
name|TerminatedException
block|{
name|getWatchDog
argument_list|()
operator|.
name|proceed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|proceed
parameter_list|(
specifier|final
name|Expression
name|expr
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|getWatchDog
argument_list|()
operator|.
name|proceed
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|proceed
parameter_list|(
specifier|final
name|Expression
name|expr
parameter_list|,
specifier|final
name|MemTreeBuilder
name|builder
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|getWatchDog
argument_list|()
operator|.
name|proceed
argument_list|(
name|expr
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setWatchDog
parameter_list|(
specifier|final
name|XQueryWatchDog
name|watchdog
parameter_list|)
block|{
name|this
operator|.
name|watchdog
operator|=
name|watchdog
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|XQueryWatchDog
name|getWatchDog
parameter_list|()
block|{
return|return
name|watchdog
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|pushDocumentContext
parameter_list|()
block|{
name|fragmentStack
operator|.
name|push
argument_list|(
name|getDocumentBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|resetDocumentBuilder
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|popDocumentContext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|fragmentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|setDocumentBuilder
argument_list|(
name|fragmentStack
operator|.
name|pop
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setBaseURI
parameter_list|(
specifier|final
name|AnyURIValue
name|uri
parameter_list|)
block|{
name|setBaseURI
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setBaseURI
parameter_list|(
specifier|final
name|AnyURIValue
name|uri
parameter_list|,
specifier|final
name|boolean
name|setInProlog
parameter_list|)
block|{
if|if
condition|(
name|baseURISetInProlog
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|baseURI
operator|=
name|AnyURIValue
operator|.
name|EMPTY_URI
expr_stmt|;
block|}
name|baseURI
operator|=
name|uri
expr_stmt|;
name|baseURISetInProlog
operator|=
name|setInProlog
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setModuleLoadPath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|moduleLoadPath
operator|=
name|path
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getModuleLoadPath
parameter_list|()
block|{
return|return
name|moduleLoadPath
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isBaseURIDeclared
parameter_list|()
block|{
return|return
name|baseURI
operator|!=
literal|null
operator|&&
operator|!
name|baseURI
operator|.
name|equals
argument_list|(
name|AnyURIValue
operator|.
name|EMPTY_URI
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|AnyURIValue
name|getBaseURI
parameter_list|()
throws|throws
name|XPathException
block|{
comment|// the base URI in the static context is established according to the
comment|// principles outlined in [RFC3986] Section 5.1âthat is, it defaults
comment|// first to the base URI of the encapsulating entity, then to the URI
comment|// used to retrieve the entity, and finally to an implementation-defined
comment|// default. If the URILiteral in the base URI declaration is a relative
comment|// URI, then it is made absolute by resolving it with respect to this
comment|// same hierarchy.
comment|// It is not intrinsically an error if this process fails to establish
comment|// an absolute base URI; however, the base URI in the static context
comment|// is then undefined, and any attempt to use its value may result in
comment|// an error [err:XPST0001].
comment|//        if ((baseURI == null) || baseURI.equals(AnyURIValue.EMPTY_URI)) {
comment|//            //throw new XPathException(ErrorCodes.XPST0001, "Base URI of the static context  has not been assigned a value.");
comment|//            // We catch and resolve this to the XmlDbURI.ROOT_COLLECTION_URI
comment|//            // at least in DocumentImpl so maybe we should do it here./ljo
comment|//        }
return|return
name|baseURI
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setContextSequencePosition
parameter_list|(
specifier|final
name|int
name|pos
parameter_list|,
specifier|final
name|Sequence
name|sequence
parameter_list|)
block|{
name|contextPosition
operator|=
name|pos
expr_stmt|;
name|contextSequence
operator|=
name|sequence
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|int
name|getContextPosition
parameter_list|()
block|{
return|return
name|contextPosition
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Sequence
name|getContextSequence
parameter_list|()
block|{
return|return
name|contextSequence
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|pushInScopeNamespaces
parameter_list|()
block|{
name|pushInScopeNamespaces
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|pushInScopeNamespaces
parameter_list|(
specifier|final
name|boolean
name|inherit
parameter_list|)
block|{
comment|//TODO : push into an inheritedInScopeNamespaces HashMap... and return an empty HashMap
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|inScopeNamespaces
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|inScopePrefixes
argument_list|)
decl_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|inheritedInScopeNamespaces
argument_list|)
expr_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|inheritedInScopePrefixes
argument_list|)
expr_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|inScopeNamespaces
argument_list|)
expr_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|inScopePrefixes
argument_list|)
expr_stmt|;
comment|//Current namespaces now become inherited just like the previous inherited ones
if|if
condition|(
name|inherit
condition|)
block|{
name|inheritedInScopeNamespaces
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|inheritedInScopeNamespaces
argument_list|)
expr_stmt|;
name|inheritedInScopeNamespaces
operator|.
name|putAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|inheritedInScopePrefixes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|inheritedInScopePrefixes
argument_list|)
expr_stmt|;
name|inheritedInScopePrefixes
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inheritedInScopeNamespaces
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|inheritedInScopePrefixes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
comment|//TODO : consider dynamic instanciation
name|inScopeNamespaces
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|inScopePrefixes
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|popInScopeNamespaces
parameter_list|()
block|{
name|inScopePrefixes
operator|=
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|inScopeNamespaces
operator|=
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|inheritedInScopePrefixes
operator|=
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|inheritedInScopeNamespaces
operator|=
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|pushNamespaceContext
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|m
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|staticNamespaces
argument_list|)
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|p
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|staticPrefixes
argument_list|)
decl_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|staticNamespaces
argument_list|)
expr_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|staticPrefixes
argument_list|)
expr_stmt|;
name|staticNamespaces
operator|=
name|m
expr_stmt|;
name|staticPrefixes
operator|=
name|p
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|popNamespaceContext
parameter_list|()
block|{
name|staticPrefixes
operator|=
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|staticNamespaces
operator|=
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|LocalVariable
name|markLocalVariables
parameter_list|(
specifier|final
name|boolean
name|newContext
parameter_list|)
block|{
if|if
condition|(
name|newContext
condition|)
block|{
if|if
condition|(
name|lastVar
operator|==
literal|null
condition|)
block|{
name|lastVar
operator|=
operator|new
name|LocalVariable
argument_list|(
name|QName
operator|.
name|EMPTY_QNAME
argument_list|)
expr_stmt|;
block|}
name|contextStack
operator|.
name|push
argument_list|(
name|lastVar
argument_list|)
expr_stmt|;
block|}
name|variableStackSize
operator|++
expr_stmt|;
return|return
name|lastVar
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|popLocalVariables
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|LocalVariable
name|var
parameter_list|)
block|{
name|popLocalVariables
argument_list|(
name|var
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Restore the local variable stack to the position marked by variable var.      *      * @param var       only clear variables after this variable, or null      * @param resultSeq the result sequence      */
end_comment

begin_function
specifier|public
name|void
name|popLocalVariables
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|LocalVariable
name|var
parameter_list|,
specifier|final
name|Sequence
name|resultSeq
parameter_list|)
block|{
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
comment|// clear all variables registered after var. they should be out of scope.
name|LocalVariable
name|outOfScope
init|=
name|var
operator|.
name|after
decl_stmt|;
while|while
condition|(
name|outOfScope
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|outOfScope
operator|!=
name|var
operator|&&
operator|!
name|outOfScope
operator|.
name|isClosureVar
argument_list|()
condition|)
block|{
name|outOfScope
operator|.
name|destroy
argument_list|(
name|this
argument_list|,
name|resultSeq
argument_list|)
expr_stmt|;
block|}
name|outOfScope
operator|=
name|outOfScope
operator|.
name|after
expr_stmt|;
block|}
comment|// reset the stack
name|var
operator|.
name|after
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|contextStack
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|var
operator|==
name|contextStack
operator|.
name|peek
argument_list|()
operator|)
condition|)
block|{
name|contextStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
name|lastVar
operator|=
name|var
expr_stmt|;
name|variableStackSize
operator|--
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Register a inline function using closure variables so it can be cleared      * after query execution.      *      * @param func an inline function definition using closure variables      */
end_comment

begin_function
name|void
name|pushClosure
parameter_list|(
specifier|final
name|UserDefinedFunction
name|func
parameter_list|)
block|{
name|closures
operator|.
name|add
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|int
name|getCurrentStackSize
parameter_list|()
block|{
return|return
name|variableStackSize
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|functionStart
parameter_list|(
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|callStack
operator|.
name|push
argument_list|(
name|signature
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|functionEnd
parameter_list|()
block|{
if|if
condition|(
name|callStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Function call stack is empty, but XQueryContext.functionEnd() was called. This "
operator|+
literal|"could indicate a concurrency issue (shared XQueryContext?)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|callStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|tailRecursiveCall
parameter_list|(
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
return|return
name|callStack
operator|.
name|contains
argument_list|(
name|signature
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|mapModule
parameter_list|(
specifier|final
name|String
name|namespace
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
block|{
name|mappedModules
operator|.
name|put
argument_list|(
name|namespace
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Module
name|importModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|XML_NS_PREFIX
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
operator|||
name|XMLNS_ATTRIBUTE
operator|.
name|equals
argument_list|(
name|prefix
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0070
argument_list|,
literal|"The prefix declared for a module import must not be 'xml' or 'xmlns'."
argument_list|)
throw|;
block|}
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
operator|&&
name|namespaceURI
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0088
argument_list|,
literal|"The first URILiteral in a module import must be of nonzero length."
argument_list|)
throw|;
block|}
name|Module
name|module
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
condition|)
block|{
name|module
operator|=
name|getRootModule
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Module "
operator|+
name|namespaceURI
operator|+
literal|" already present."
argument_list|)
expr_stmt|;
block|}
comment|// Set locally to remember the dependency in case it was inherited.
name|setModule
argument_list|(
name|namespaceURI
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if location is not specified, try to resolve in expath repo
if|if
condition|(
name|location
operator|==
literal|null
operator|&&
name|namespaceURI
operator|!=
literal|null
condition|)
block|{
name|module
operator|=
name|resolveInEXPathRepository
argument_list|(
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|location
operator|==
literal|null
operator|&&
name|namespaceURI
operator|!=
literal|null
condition|)
block|{
comment|// check if there's a static mapping in the configuration
name|location
operator|=
name|getModuleLocation
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|location
operator|==
literal|null
condition|)
block|{
name|location
operator|=
name|namespaceURI
expr_stmt|;
block|}
block|}
comment|//Is the module's namespace mapped to a URL ?
if|if
condition|(
name|mappedModules
operator|.
name|containsKey
argument_list|(
name|location
argument_list|)
condition|)
block|{
name|location
operator|=
name|mappedModules
operator|.
name|get
argument_list|(
name|location
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
comment|// is it a Java module?
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|JAVA_URI_START
argument_list|)
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
name|JAVA_URI_START
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|module
operator|=
name|loadBuiltInModule
argument_list|(
name|namespaceURI
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Source
name|moduleSource
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
operator|||
operator|(
operator|(
name|location
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|==
operator|-
literal|1
operator|)
operator|&&
name|moduleLoadPath
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
operator|)
condition|)
block|{
comment|// Is the module source stored in the database?
try|try
block|{
name|XmldbURI
name|locationUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|moduleLoadPath
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
condition|)
block|{
specifier|final
name|XmldbURI
name|moduleLoadPathUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|moduleLoadPath
argument_list|)
decl_stmt|;
name|locationUri
operator|=
name|moduleLoadPathUri
operator|.
name|resolveCollectionPath
argument_list|(
name|locationUri
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|LockedDocument
name|lockedSourceDoc
init|=
name|getBroker
argument_list|()
operator|.
name|getXMLResource
argument_list|(
name|locationUri
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
specifier|final
name|DocumentImpl
name|sourceDoc
init|=
name|lockedSourceDoc
operator|==
literal|null
condition|?
literal|null
else|:
name|lockedSourceDoc
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|sourceDoc
operator|==
literal|null
condition|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"Module location hint URI '"
operator|+
name|location
operator|+
literal|"' does not refer to anything."
argument_list|,
name|location
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|sourceDoc
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|)
operator|||
operator|!
literal|"application/xquery"
operator|.
name|equals
argument_list|(
name|sourceDoc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"Module location hint URI '"
operator|+
name|location
operator|+
literal|"' does not refer to an XQuery."
argument_list|,
name|location
argument_list|)
throw|;
block|}
name|moduleSource
operator|=
operator|new
name|DBSource
argument_list|(
name|getBroker
argument_list|()
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|sourceDoc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// we don't know if the module will get returned, oh well
name|module
operator|=
name|compileOrBorrowModule
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|,
name|location
argument_list|,
name|moduleSource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"Permission denied to read module source from location hint URI '"
operator|+
name|location
operator|+
literal|"."
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"Invalid module location hint URI '"
operator|+
name|location
operator|+
literal|"'."
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No. Load from file or URL
try|try
block|{
comment|//TODO: use URIs to ensure proper resolution of relative locations
name|moduleSource
operator|=
name|SourceFactory
operator|.
name|getSource
argument_list|(
name|getBroker
argument_list|()
argument_list|,
name|moduleLoadPath
argument_list|,
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|moduleSource
operator|==
literal|null
condition|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"Source for module '"
operator|+
name|namespaceURI
operator|+
literal|"' not found module location hint URI '"
operator|+
name|location
operator|+
literal|"'."
argument_list|,
name|location
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"Invalid module location hint URI '"
operator|+
name|location
operator|+
literal|"'."
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"Source for module '"
operator|+
name|namespaceURI
operator|+
literal|"' could not be read, module location hint URI '"
operator|+
name|location
operator|+
literal|"'."
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"Permission denied to read module source from location hint URI '"
operator|+
name|location
operator|+
literal|"."
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// we don't know if the module will get returned, oh well
name|module
operator|=
name|compileOrBorrowModule
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|,
name|location
argument_list|,
name|moduleSource
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// NOTE: expathrepo related, closes the EXPath else (if module != null)
block|}
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|namespaceURI
operator|==
literal|null
condition|)
block|{
name|namespaceURI
operator|=
name|module
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
block|{
name|prefix
operator|=
name|module
operator|.
name|getDefaultPrefix
argument_list|()
expr_stmt|;
block|}
name|declareNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
return|return
name|module
return|;
block|}
end_function

begin_function
specifier|protected
name|XPathException
name|moduleLoadException
parameter_list|(
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|String
name|moduleLocation
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0059
argument_list|,
name|message
argument_list|,
operator|new
name|ValueSequence
argument_list|(
operator|new
name|StringValue
argument_list|(
name|moduleLocation
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function

begin_function
specifier|protected
name|XPathException
name|moduleLoadException
parameter_list|(
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|String
name|moduleLocation
parameter_list|,
specifier|final
name|Exception
name|e
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XQST0059
argument_list|,
name|message
argument_list|,
operator|new
name|ValueSequence
argument_list|(
operator|new
name|StringValue
argument_list|(
name|moduleLocation
argument_list|)
argument_list|)
argument_list|,
name|e
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|String
name|getModuleLocation
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|moduleMap
init|=
operator|(
name|Map
operator|)
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PROPERTY_STATIC_MODULE_MAP
argument_list|)
decl_stmt|;
return|return
name|moduleMap
operator|.
name|get
argument_list|(
name|namespaceURI
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
annotation|@
name|Override
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMappedModuleURIs
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|moduleMap
init|=
operator|(
name|Map
operator|)
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PROPERTY_STATIC_MODULE_MAP
argument_list|)
decl_stmt|;
return|return
name|moduleMap
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|ExternalModule
name|compileOrBorrowModule
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|Source
name|source
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|ExternalModule
name|module
init|=
name|compileModule
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|,
name|location
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
name|setModule
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
name|declareModuleVars
argument_list|(
name|module
argument_list|)
expr_stmt|;
block|}
return|return
name|module
return|;
block|}
end_function

begin_comment
comment|/**      * Compile an XQuery Module      *      * @param prefix       the namespace prefix of the module.      * @param namespaceURI the namespace URI of the module.      * @param location     the location of the module      * @param source       the source of the module.      * @return The compiled module, or null if the source is not a module      * @throws XPathException if the module could not be loaded or compiled      */
end_comment

begin_function
specifier|private
annotation|@
name|Nullable
name|ExternalModule
name|compileModule
parameter_list|(
specifier|final
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|location
parameter_list|,
specifier|final
name|Source
name|source
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading module from "
operator|+
name|location
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|Reader
name|reader
init|=
name|source
operator|.
name|getReader
argument_list|()
init|)
block|{
if|if
condition|(
name|reader
operator|==
literal|null
condition|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"failed to load module: '"
operator|+
name|namespaceURI
operator|+
literal|"' from: "
operator|+
literal|"'"
operator|+
name|source
operator|+
literal|"', location: '"
operator|+
name|location
operator|+
literal|"'. Source not found. "
argument_list|,
name|location
argument_list|)
throw|;
block|}
if|if
condition|(
name|namespaceURI
operator|==
literal|null
condition|)
block|{
specifier|final
name|QName
name|qname
init|=
name|source
operator|.
name|isModule
argument_list|()
decl_stmt|;
if|if
condition|(
name|qname
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|namespaceURI
operator|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
expr_stmt|;
block|}
specifier|final
name|ExternalModuleImpl
name|modExternal
init|=
operator|new
name|ExternalModuleImpl
argument_list|(
name|namespaceURI
argument_list|,
name|prefix
argument_list|)
decl_stmt|;
name|setModule
argument_list|(
name|namespaceURI
argument_list|,
name|modExternal
argument_list|)
expr_stmt|;
specifier|final
name|XQueryContext
name|modContext
init|=
operator|new
name|ModuleContext
argument_list|(
name|this
argument_list|,
name|prefix
argument_list|,
name|namespaceURI
argument_list|,
name|location
argument_list|)
decl_stmt|;
name|modExternal
operator|.
name|setContext
argument_list|(
name|modContext
argument_list|)
expr_stmt|;
specifier|final
name|XQueryLexer
name|lexer
init|=
operator|new
name|XQueryLexer
argument_list|(
name|modContext
argument_list|,
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|XQueryParser
name|parser
init|=
operator|new
name|XQueryParser
argument_list|(
name|lexer
argument_list|)
decl_stmt|;
specifier|final
name|XQueryTreeParser
name|astParser
init|=
operator|new
name|XQueryTreeParser
argument_list|(
name|modContext
argument_list|,
name|modExternal
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|xpath
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|foundErrors
argument_list|()
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|parser
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|parser
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|AST
name|ast
init|=
name|parser
operator|.
name|getAST
argument_list|()
decl_stmt|;
specifier|final
name|PathExpr
name|path
init|=
operator|new
name|PathExpr
argument_list|(
name|modContext
argument_list|)
decl_stmt|;
name|astParser
operator|.
name|xpath
argument_list|(
name|ast
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|astParser
operator|.
name|foundErrors
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|astParser
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|astParser
operator|.
name|getLastException
argument_list|()
argument_list|)
throw|;
block|}
name|modExternal
operator|.
name|setRootExpression
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
operator|&&
operator|!
name|modExternal
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"namespace URI declared by module ("
operator|+
name|modExternal
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|") does not match namespace URI in import statement, which was: "
operator|+
name|namespaceURI
argument_list|)
throw|;
block|}
comment|// Set source information on module context
comment|//            String sourceClassName = source.getClass().getName();
comment|//            modContext.setSourceKey(source.getKey().toString());
comment|// Extract the source type from the classname by removing the package prefix and the "Source" suffix
comment|//            modContext.setSourceType( sourceClassName.substring( 17, sourceClassName.length() - 6 ) );
name|modExternal
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|modContext
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|modExternal
operator|.
name|setIsReady
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|modExternal
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|RecognitionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
operator|.
name|getLine
argument_list|()
argument_list|,
name|e
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TokenStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|prependMessage
argument_list|(
literal|"Error while loading module "
operator|+
name|location
operator|+
literal|": "
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|moduleLoadException
argument_list|(
literal|"IO exception while loading module '"
operator|+
name|namespaceURI
operator|+
literal|"'"
operator|+
literal|" from '"
operator|+
name|source
operator|+
literal|"'"
argument_list|,
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|declareModuleVars
parameter_list|(
specifier|final
name|Module
name|module
parameter_list|)
block|{
specifier|final
name|String
name|moduleNS
init|=
name|module
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|Variable
argument_list|>
name|i
init|=
name|globalVariables
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Variable
name|var
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|moduleNS
operator|.
name|equals
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|module
operator|.
name|declareVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addForwardReference
parameter_list|(
specifier|final
name|FunctionCall
name|call
parameter_list|)
block|{
name|forwardReferences
operator|.
name|add
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|resolveForwardReferences
parameter_list|()
throws|throws
name|XPathException
block|{
while|while
condition|(
operator|!
name|forwardReferences
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|FunctionCall
name|call
init|=
name|forwardReferences
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|UserDefinedFunction
name|func
init|=
name|call
operator|.
name|getContext
argument_list|()
operator|.
name|resolveFunction
argument_list|(
name|call
operator|.
name|getQName
argument_list|()
argument_list|,
name|call
operator|.
name|getArgumentCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|call
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Call to undeclared function: "
operator|+
name|call
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|call
operator|.
name|resolveForwardReference
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Get environment variables. The variables shall not change      * during execution of query.      *      * @return Map of environment variables      */
end_comment

begin_function
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getEnvironmentVariables
parameter_list|()
block|{
if|if
condition|(
name|envs
operator|==
literal|null
condition|)
block|{
name|envs
operator|=
name|System
operator|.
name|getenv
argument_list|()
expr_stmt|;
block|}
return|return
name|envs
return|;
block|}
end_function

begin_comment
comment|/**      * Gets the Effective user      * i.e. the user that the query is executing as      *      * @return The Effective User      */
end_comment

begin_function
specifier|public
name|Subject
name|getEffectiveUser
parameter_list|()
block|{
return|return
name|getBroker
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
return|;
block|}
end_function

begin_comment
comment|/**      * Gets the Real User      * i.e. the user that initiated execution of the query      * Note this is not necessarily the same as the user that the      * query is executing as      *      * @return The Real User      * @see org.exist.xquery.XQueryContext#getEffectiveUser()      */
end_comment

begin_function
specifier|public
name|Subject
name|getRealUser
parameter_list|()
block|{
return|return
name|realUser
return|;
block|}
end_function

begin_function
specifier|private
name|void
name|setRealUser
parameter_list|(
specifier|final
name|Subject
name|realUser
parameter_list|)
block|{
name|this
operator|.
name|realUser
operator|=
name|realUser
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Save state      */
end_comment

begin_class
specifier|private
class|class
name|SavedState
block|{
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Module
argument_list|>
name|modulesSaved
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Module
argument_list|>
name|allModulesSaved
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|staticNamespacesSaved
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|staticPrefixesSaved
init|=
literal|null
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|void
name|save
parameter_list|()
block|{
if|if
condition|(
name|modulesSaved
operator|==
literal|null
condition|)
block|{
name|modulesSaved
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|modules
argument_list|)
expr_stmt|;
name|allModulesSaved
operator|=
operator|new
name|HashMap
argument_list|(
name|allModules
argument_list|)
expr_stmt|;
name|staticNamespacesSaved
operator|=
operator|new
name|HashMap
argument_list|(
name|staticNamespaces
argument_list|)
expr_stmt|;
name|staticPrefixesSaved
operator|=
operator|new
name|HashMap
argument_list|(
name|staticPrefixes
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|restore
parameter_list|()
block|{
if|if
condition|(
name|modulesSaved
operator|!=
literal|null
condition|)
block|{
name|modules
operator|=
name|modulesSaved
expr_stmt|;
name|modulesSaved
operator|=
literal|null
expr_stmt|;
name|allModules
operator|=
name|allModulesSaved
expr_stmt|;
name|allModulesSaved
operator|=
literal|null
expr_stmt|;
name|staticNamespaces
operator|=
name|staticNamespacesSaved
expr_stmt|;
name|staticNamespacesSaved
operator|=
literal|null
expr_stmt|;
name|staticPrefixes
operator|=
name|staticPrefixesSaved
expr_stmt|;
name|staticPrefixesSaved
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

begin_comment
comment|/**      * Before a dynamic import, make sure relevant parts of the current context a saved      * to the stack. This is important for util:import-module. The context will be restored      * during {@link #reset()}.      */
end_comment

begin_function
specifier|public
name|void
name|saveState
parameter_list|()
block|{
name|savedState
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|optimizationsEnabled
parameter_list|()
block|{
return|return
name|enableOptimizer
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addOption
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|staticOptions
operator|==
literal|null
condition|)
block|{
name|staticOptions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|addOption
argument_list|(
name|staticOptions
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|addDynamicOption
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|dynamicOptions
operator|==
literal|null
condition|)
block|{
name|dynamicOptions
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|addOption
argument_list|(
name|dynamicOptions
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|addOption
parameter_list|(
specifier|final
name|List
argument_list|<
name|Option
argument_list|>
name|options
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|QName
name|qn
decl_stmt|;
try|try
block|{
name|qn
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|defaultFunctionNamespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|QName
operator|.
name|IllegalQNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XPST0081
argument_list|,
literal|"No namespace defined for prefix "
operator|+
name|name
argument_list|)
throw|;
block|}
specifier|final
name|Option
name|option
init|=
operator|new
name|Option
argument_list|(
name|qn
argument_list|,
name|value
argument_list|)
decl_stmt|;
comment|//if the option exists, remove it so we can add the new option
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|options
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|options
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|//add option
name|options
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
comment|// check predefined options
if|if
condition|(
name|Option
operator|.
name|PROFILE_QNAME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// configure profiling
name|profiler
operator|.
name|configure
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Option
operator|.
name|TIMEOUT_QNAME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
name|watchdog
operator|.
name|setTimeoutFromOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Option
operator|.
name|OUTPUT_SIZE_QNAME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
name|watchdog
operator|.
name|setMaxNodesFromOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Option
operator|.
name|OPTIMIZE_QNAME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
specifier|final
name|String
index|[]
name|params
init|=
name|option
operator|.
name|tokenizeContents
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|length
operator|>
literal|0
condition|)
block|{
specifier|final
name|String
index|[]
name|param
init|=
name|Option
operator|.
name|parseKeyValuePair
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|param
operator|!=
literal|null
operator|&&
literal|"enable"
operator|.
name|equals
argument_list|(
name|param
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|enableOptimizer
operator|=
literal|"yes"
operator|.
name|equals
argument_list|(
name|param
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//TODO : not sure how these 2 options might/have to be related
if|else if
condition|(
name|Option
operator|.
name|OPTIMIZE_IMPLICIT_TIMEZONE
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|//TODO : error check
specifier|final
name|Duration
name|duration
init|=
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|newDuration
argument_list|(
name|option
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|implicitTimeZone
operator|=
operator|new
name|SimpleTimeZone
argument_list|(
operator|(
name|int
operator|)
name|duration
operator|.
name|getTimeInMillis
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
literal|"XQuery context"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Option
operator|.
name|CURRENT_DATETIME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|//TODO : error check
specifier|final
name|DateTimeValue
name|dtv
init|=
operator|new
name|DateTimeValue
argument_list|(
name|option
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|calendar
operator|=
operator|(
name|XMLGregorianCalendar
operator|)
name|dtv
operator|.
name|calendar
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Option
name|getOption
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
if|if
condition|(
name|dynamicOptions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Option
name|option
range|:
name|dynamicOptions
control|)
block|{
if|if
condition|(
name|qname
operator|.
name|compareTo
argument_list|(
name|option
operator|.
name|getQName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|option
return|;
block|}
block|}
block|}
if|if
condition|(
name|staticOptions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Option
name|option
range|:
name|staticOptions
control|)
block|{
if|if
condition|(
name|qname
operator|.
name|compareTo
argument_list|(
name|option
operator|.
name|getQName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
block|{
return|return
name|option
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Pragma
name|getPragma
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|QName
name|qname
decl_stmt|;
try|try
block|{
name|qname
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|QName
operator|.
name|IllegalQNameException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|XPST0081
argument_list|,
literal|"No namespace defined for prefix "
operator|+
name|name
argument_list|)
throw|;
block|}
if|if
condition|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPST0081: pragma's ('"
operator|+
name|name
operator|+
literal|"') namespace URI is empty"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|contents
operator|=
name|StringValue
operator|.
name|trimWhitespace
argument_list|(
name|contents
argument_list|)
expr_stmt|;
if|if
condition|(
name|TimerPragma
operator|.
name|TIMER_PRAGMA
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|TimerPragma
argument_list|(
name|qname
argument_list|,
name|contents
argument_list|)
return|;
block|}
if|if
condition|(
name|Optimize
operator|.
name|OPTIMIZE_PRAGMA
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|Optimize
argument_list|(
name|this
argument_list|,
name|qname
argument_list|,
name|contents
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|ForceIndexUse
operator|.
name|EXCEPTION_IF_INDEX_NOT_USED_PRAGMA
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|ForceIndexUse
argument_list|(
name|qname
argument_list|,
name|contents
argument_list|)
return|;
block|}
if|if
condition|(
name|ProfilePragma
operator|.
name|PROFILING_PRAGMA
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProfilePragma
argument_list|(
name|qname
argument_list|,
name|contents
argument_list|)
return|;
block|}
if|if
condition|(
name|NoIndexPragma
operator|.
name|NO_INDEX_PRAGMA
operator|.
name|equals
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|NoIndexPragma
argument_list|(
name|qname
argument_list|,
name|contents
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|storeTemporaryDoc
parameter_list|(
specifier|final
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
specifier|final
name|DocumentImpl
name|targetDoc
init|=
name|getBroker
argument_list|()
operator|.
name|storeTempResource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetDoc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Internal error: failed to store temporary doc fragment"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|warn
argument_list|(
literal|"Stored: "
operator|+
name|targetDoc
operator|.
name|getDocId
argument_list|()
operator|+
literal|": "
operator|+
name|targetDoc
operator|.
name|getURI
argument_list|()
argument_list|,
operator|new
name|Throwable
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|targetDoc
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
decl||
name|LockException
decl||
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|TEMP_STORE_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setAttribute
parameter_list|(
specifier|final
name|String
name|attribute
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Object
name|getAttribute
parameter_list|(
specifier|final
name|String
name|attribute
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
return|;
block|}
end_function

begin_comment
comment|/**      * Load the default prefix/namespace mappings table and set up internal functions.      *      * @param config the configuration      */
end_comment

begin_function
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
name|void
name|loadDefaults
parameter_list|(
specifier|final
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|watchdog
operator|=
operator|new
name|XQueryWatchDog
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|/*         SymbolTable syms = broker.getSymbols();         String[] pfx = syms.defaultPrefixList();         namespaces = new HashMap(pfx.length);         prefixes = new HashMap(pfx.length);         String sym;         for (int i = 0; i< pfx.length; i++) {             sym = syms.getDefaultNamespace(pfx[i]);             namespaces.put(pfx[i], sym);             prefixes.put(sym, pfx[i]);         }         */
name|loadDefaultNS
argument_list|()
expr_stmt|;
comment|// Switch: enable optimizer
name|Object
name|param
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_ENABLE_QUERY_REWRITING
argument_list|)
decl_stmt|;
name|enableOptimizer
operator|=
operator|(
name|param
operator|!=
literal|null
operator|)
operator|&&
literal|"yes"
operator|.
name|equals
argument_list|(
name|param
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Switch: Backward compatibility
name|param
operator|=
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
argument_list|)
expr_stmt|;
name|backwardsCompatible
operator|=
operator|(
name|param
operator|==
literal|null
operator|)
operator|||
literal|"yes"
operator|.
name|equals
argument_list|(
name|param
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Switch: raiseErrorOnFailedRetrieval
specifier|final
name|Boolean
name|option
init|=
operator|(
operator|(
name|Boolean
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_XQUERY_RAISE_ERROR_ON_FAILED_RETRIEVAL
argument_list|)
operator|)
decl_stmt|;
name|raiseErrorOnFailedRetrieval
operator|=
operator|(
name|option
operator|!=
literal|null
operator|)
operator|&&
name|option
expr_stmt|;
comment|// Get map of built-in modules
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|Module
argument_list|>
argument_list|>
name|builtInModules
init|=
operator|(
name|Map
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_BUILT_IN_MODULES
argument_list|)
decl_stmt|;
if|if
condition|(
name|builtInModules
operator|!=
literal|null
condition|)
block|{
comment|// Iterate on all map entries
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Class
argument_list|<
name|Module
argument_list|>
argument_list|>
name|entry
range|:
name|builtInModules
operator|.
name|entrySet
argument_list|()
control|)
block|{
comment|// Get URI and class
specifier|final
name|String
name|namespaceURI
init|=
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
specifier|final
name|Class
argument_list|<
name|Module
argument_list|>
name|moduleClass
init|=
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|// first check if the module has already been loaded in the parent context
specifier|final
name|Module
name|module
init|=
name|getModule
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
comment|// Module does not exist yet, instantiate
name|instantiateModule
argument_list|(
name|namespaceURI
argument_list|,
name|moduleClass
argument_list|,
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
argument_list|>
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_MODULE_PARAMETERS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|getPrefixForURI
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
operator|!
name|module
operator|.
name|getDefaultPrefix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// make sure the namespaces of default modules are known,
comment|// even if they were imported in a parent context
try|try
block|{
name|declareNamespace
argument_list|(
name|module
operator|.
name|getDefaultPrefix
argument_list|()
argument_list|,
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Internal error while loading default modules: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Load default namespaces, e.g. xml, xsi, xdt, fn, local, exist and dbgp.      */
end_comment

begin_function
specifier|private
name|void
name|loadDefaultNS
parameter_list|()
block|{
try|try
block|{
comment|// default namespaces
name|staticNamespaces
operator|.
name|put
argument_list|(
name|XML_NS_PREFIX
argument_list|,
name|XML_NS
argument_list|)
expr_stmt|;
name|staticPrefixes
operator|.
name|put
argument_list|(
name|XML_NS
argument_list|,
name|XML_NS_PREFIX
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"xs"
argument_list|,
name|Namespaces
operator|.
name|SCHEMA_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"xsi"
argument_list|,
name|Namespaces
operator|.
name|SCHEMA_INSTANCE_NS
argument_list|)
expr_stmt|;
comment|//required for backward compatibility
name|declareNamespace
argument_list|(
literal|"xdt"
argument_list|,
name|Namespaces
operator|.
name|XPATH_DATATYPES_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"fn"
argument_list|,
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"local"
argument_list|,
name|Namespaces
operator|.
name|XQUERY_LOCAL_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
name|Namespaces
operator|.
name|W3C_XQUERY_XPATH_ERROR_PREFIX
argument_list|,
name|Namespaces
operator|.
name|W3C_XQUERY_XPATH_ERROR_NS
argument_list|)
expr_stmt|;
comment|//*not* as standard NS
name|declareNamespace
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS_PREFIX
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
name|Namespaces
operator|.
name|EXIST_JAVA_BINDING_NS_PREFIX
argument_list|,
name|Namespaces
operator|.
name|EXIST_JAVA_BINDING_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
name|Namespaces
operator|.
name|EXIST_XQUERY_XPATH_ERROR_PREFIX
argument_list|,
name|Namespaces
operator|.
name|EXIST_XQUERY_XPATH_ERROR_NS
argument_list|)
expr_stmt|;
comment|//TODO : include "err" namespace ?
name|declareNamespace
argument_list|(
literal|"dbgp"
argument_list|,
name|Debuggee
operator|.
name|NAMESPACE_URI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
comment|//ignored because it should never happen
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|registerUpdateListener
parameter_list|(
specifier|final
name|UpdateListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|updateListener
operator|==
literal|null
condition|)
block|{
name|updateListener
operator|=
operator|new
name|ContextUpdateListener
argument_list|()
expr_stmt|;
specifier|final
name|DBBroker
name|broker
init|=
name|getBroker
argument_list|()
decl_stmt|;
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNotificationService
argument_list|()
operator|.
name|subscribe
argument_list|(
name|updateListener
argument_list|)
expr_stmt|;
block|}
name|updateListener
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|protected
name|void
name|clearUpdateListeners
parameter_list|()
block|{
if|if
condition|(
name|updateListener
operator|!=
literal|null
condition|)
block|{
specifier|final
name|DBBroker
name|broker
init|=
name|getBroker
argument_list|()
decl_stmt|;
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNotificationService
argument_list|()
operator|.
name|unsubscribe
argument_list|(
name|updateListener
argument_list|)
expr_stmt|;
block|}
name|updateListener
operator|=
literal|null
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|checkOptions
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
throws|throws
name|XPathException
block|{
name|checkLegacyOptions
argument_list|(
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|dynamicOptions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Option
name|option
range|:
name|dynamicOptions
control|)
block|{
if|if
condition|(
name|Namespaces
operator|.
name|XSLT_XQUERY_SERIALIZATION_NS
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|SerializerUtils
operator|.
name|setProperty
argument_list|(
name|option
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|option
operator|.
name|getContents
argument_list|()
argument_list|,
name|properties
argument_list|,
name|inScopeNamespaces
operator|::
name|get
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|staticOptions
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Option
name|option
range|:
name|staticOptions
control|)
block|{
if|if
condition|(
name|Namespaces
operator|.
name|XSLT_XQUERY_SERIALIZATION_NS
operator|.
name|equals
argument_list|(
name|option
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
operator|!
name|properties
operator|.
name|containsKey
argument_list|(
name|option
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|SerializerUtils
operator|.
name|setProperty
argument_list|(
name|option
operator|.
name|getQName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
argument_list|,
name|option
operator|.
name|getContents
argument_list|()
argument_list|,
name|properties
argument_list|,
name|inScopeNamespaces
operator|::
name|get
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_comment
comment|/**      * Legacy method to check serialization properties set via option exist:serialize.      *      * @param properties the serialization properties      * @throws XPathException if there is an unknown serialization property      */
end_comment

begin_function
specifier|private
name|void
name|checkLegacyOptions
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Option
name|pragma
init|=
name|getOption
argument_list|(
name|Option
operator|.
name|SERIALIZE_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|pragma
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|String
index|[]
name|contents
init|=
name|pragma
operator|.
name|tokenizeContents
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|content
range|:
name|contents
control|)
block|{
specifier|final
name|String
index|[]
name|pair
init|=
name|Option
operator|.
name|parseKeyValuePair
argument_list|(
name|content
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown parameter found in "
operator|+
name|pragma
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
operator|+
literal|": '"
operator|+
name|content
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting serialization property from pragma: "
operator|+
name|pair
index|[
literal|0
index|]
operator|+
literal|" = "
operator|+
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|setProperty
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setDebuggeeJoint
parameter_list|(
specifier|final
name|DebuggeeJoint
name|joint
parameter_list|)
block|{
comment|//XXX: if (debuggeeJoint != null) ???
name|debuggeeJoint
operator|=
name|joint
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|DebuggeeJoint
name|getDebuggeeJoint
parameter_list|()
block|{
return|return
name|debuggeeJoint
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|isDebugMode
parameter_list|()
block|{
return|return
name|debuggeeJoint
operator|!=
literal|null
operator|&&
name|isVarDeclared
argument_list|(
name|Debuggee
operator|.
name|SESSION
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|boolean
name|requireDebugMode
parameter_list|()
block|{
return|return
name|isVarDeclared
argument_list|(
name|Debuggee
operator|.
name|SESSION
argument_list|)
return|;
block|}
end_function

begin_decl_stmt
specifier|private
name|Deque
argument_list|<
name|BinaryValue
argument_list|>
name|binaryValueInstances
decl_stmt|;
end_decl_stmt

begin_function
name|void
name|enterEnclosedExpr
parameter_list|()
block|{
if|if
condition|(
name|binaryValueInstances
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Iterator
argument_list|<
name|BinaryValue
argument_list|>
name|it
init|=
name|binaryValueInstances
operator|.
name|descendingIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
operator|.
name|incrementSharedReferences
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
name|void
name|exitEnclosedExpr
parameter_list|()
block|{
if|if
condition|(
name|binaryValueInstances
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Iterator
argument_list|<
name|BinaryValue
argument_list|>
name|it
init|=
name|binaryValueInstances
operator|.
name|iterator
argument_list|()
decl_stmt|;
name|List
argument_list|<
name|BinaryValue
argument_list|>
name|destroyable
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|BinaryValue
name|bv
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|bv
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// really just decrements a reference
if|if
condition|(
name|bv
operator|.
name|isClosed
argument_list|()
condition|)
block|{
if|if
condition|(
name|destroyable
operator|==
literal|null
condition|)
block|{
name|destroyable
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|destroyable
operator|.
name|add
argument_list|(
name|bv
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to close binary reference on exiting enclosed expression: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|// eagerly cleanup those BinaryValues that are not used outside the EnclosedExpr (to release memory)
if|if
condition|(
name|destroyable
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|BinaryValue
name|bvd
range|:
name|destroyable
control|)
block|{
name|binaryValueInstances
operator|.
name|remove
argument_list|(
name|bvd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|registerBinaryValueInstance
parameter_list|(
specifier|final
name|BinaryValue
name|binaryValue
parameter_list|)
block|{
if|if
condition|(
name|binaryValueInstances
operator|==
literal|null
condition|)
block|{
name|binaryValueInstances
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|cleanupTasks
operator|.
name|isEmpty
argument_list|()
operator|||
name|cleanupTasks
operator|.
name|stream
argument_list|()
operator|.
name|noneMatch
argument_list|(
name|ct
lambda|->
name|ct
operator|instanceof
name|BinaryValueCleanupTask
argument_list|)
condition|)
block|{
name|cleanupTasks
operator|.
name|add
argument_list|(
operator|new
name|BinaryValueCleanupTask
argument_list|()
argument_list|)
block|;         }
name|binaryValueInstances
operator|.
name|push
argument_list|(
name|binaryValue
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Cleanup Task which is responsible for relasing the streams      * of any {@link BinaryValue} which have been used during      * query execution      */
end_comment

begin_class
specifier|public
specifier|static
class|class
name|BinaryValueCleanupTask
implements|implements
name|CleanupTask
block|{
annotation|@
name|Override
specifier|public
name|void
name|cleanup
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
parameter_list|)
block|{
if|if
condition|(
name|context
operator|.
name|binaryValueInstances
operator|!=
literal|null
condition|)
block|{
name|List
argument_list|<
name|BinaryValue
argument_list|>
name|removable
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|BinaryValue
name|bv
range|:
name|context
operator|.
name|binaryValueInstances
control|)
block|{
try|try
block|{
if|if
condition|(
name|predicate
operator|.
name|test
argument_list|(
name|bv
argument_list|)
condition|)
block|{
name|bv
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|removable
operator|==
literal|null
condition|)
block|{
name|removable
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|removable
operator|.
name|add
argument_list|(
name|bv
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to close binary value: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|removable
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|BinaryValue
name|bv
range|:
name|removable
control|)
block|{
name|context
operator|.
name|binaryValueInstances
operator|.
name|remove
argument_list|(
name|bv
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

begin_function
annotation|@
name|Override
specifier|public
name|String
name|getCacheClass
parameter_list|()
block|{
return|return
operator|(
name|String
operator|)
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|Configuration
operator|.
name|BINARY_CACHE_CLASS_PROPERTY
argument_list|)
return|;
block|}
end_function

begin_function
specifier|public
name|void
name|destroyBinaryValue
parameter_list|(
specifier|final
name|BinaryValue
name|value
parameter_list|)
block|{
if|if
condition|(
name|binaryValueInstances
operator|!=
literal|null
condition|)
block|{
name|binaryValueInstances
operator|.
name|remove
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|public
name|void
name|setXQueryVersion
parameter_list|(
name|int
name|version
parameter_list|)
block|{
name|xqueryVersion
operator|=
name|version
expr_stmt|;
block|}
end_function

begin_function
specifier|public
name|int
name|getXQueryVersion
parameter_list|()
block|{
return|return
name|xqueryVersion
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|Source
name|getSource
parameter_list|()
block|{
return|return
name|source
return|;
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|setSource
parameter_list|(
specifier|final
name|Source
name|source
parameter_list|)
block|{
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * NOTE: the {@link #unsubscribe()} method can be called      * from {@link org.exist.storage.NotificationService#unsubscribe(UpdateListener)}      * by another thread, so this class needs to be thread-safe.      */
end_comment

begin_class
annotation|@
name|ThreadSafe
specifier|private
specifier|static
class|class
name|ContextUpdateListener
implements|implements
name|UpdateListener
block|{
comment|/*          * We use Concurrent safe data structures here, so that we don't have          * to block any calling threads.          *          * The AtomicReference enables us to quickly clear the listeners          * in #unsubscribe() and maintain happens-before integrity whilst          * unsubcribing them. The CopyOnWriteArrayList allows          * us to add listeners whilst iterating over a snapshot          * of existing iterators in other methods.          */
specifier|private
specifier|final
name|AtomicReference
argument_list|<
name|List
argument_list|<
name|UpdateListener
argument_list|>
argument_list|>
name|listeners
init|=
operator|new
name|AtomicReference
argument_list|<>
argument_list|(
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|void
name|addListener
parameter_list|(
specifier|final
name|UpdateListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|get
argument_list|()
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|documentUpdated
parameter_list|(
specifier|final
name|DocumentImpl
name|document
parameter_list|,
specifier|final
name|int
name|event
parameter_list|)
block|{
name|listeners
operator|.
name|get
argument_list|()
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
name|listener
operator|.
name|documentUpdated
argument_list|(
name|document
argument_list|,
name|event
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsubscribe
parameter_list|()
block|{
name|List
argument_list|<
name|UpdateListener
argument_list|>
name|prev
init|=
name|listeners
operator|.
name|get
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|listeners
operator|.
name|compareAndSet
argument_list|(
name|prev
argument_list|,
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
argument_list|)
condition|)
block|{
name|prev
operator|=
name|listeners
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|prev
operator|.
name|forEach
argument_list|(
name|UpdateListener
operator|::
name|unsubscribe
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeMoved
parameter_list|(
specifier|final
name|NodeId
name|oldNodeId
parameter_list|,
specifier|final
name|NodeHandle
name|newNode
parameter_list|)
block|{
name|listeners
operator|.
name|get
argument_list|()
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
name|listener
operator|.
name|nodeMoved
argument_list|(
name|oldNodeId
argument_list|,
name|newNode
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|debug
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"XQueryContext: %s document update listeners"
argument_list|,
name|listeners
operator|.
name|get
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|listeners
operator|.
name|get
argument_list|()
operator|.
name|forEach
argument_list|(
name|UpdateListener
operator|::
name|debug
argument_list|)
expr_stmt|;
block|}
block|}
end_class

begin_decl_stmt
specifier|private
specifier|final
name|List
argument_list|<
name|CleanupTask
argument_list|>
name|cleanupTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_function
specifier|public
name|void
name|registerCleanupTask
parameter_list|(
specifier|final
name|CleanupTask
name|cleanupTask
parameter_list|)
block|{
name|cleanupTasks
operator|.
name|add
argument_list|(
name|cleanupTask
argument_list|)
expr_stmt|;
block|}
end_function

begin_interface
specifier|public
interface|interface
name|CleanupTask
block|{
name|void
name|cleanup
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
parameter_list|)
function_decl|;
block|}
end_interface

begin_function
annotation|@
name|Override
specifier|public
name|void
name|runCleanupTasks
parameter_list|(
specifier|final
name|Predicate
argument_list|<
name|Object
argument_list|>
name|predicate
parameter_list|)
block|{
for|for
control|(
specifier|final
name|CleanupTask
name|cleanupTask
range|:
name|cleanupTasks
control|)
block|{
try|try
block|{
name|cleanupTask
operator|.
name|cleanup
argument_list|(
name|this
argument_list|,
name|predicate
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|t
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Cleaning up XQueryContext: Ignoring: "
operator|+
name|t
operator|.
name|getMessage
argument_list|()
argument_list|,
name|t
argument_list|)
expr_stmt|;
block|}
block|}
comment|// now it is safe to clear the cleanup tasks list as we know they have run
comment|// do not move this anywhere else
name|cleanupTasks
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function

begin_class
annotation|@
name|Immutable
specifier|public
specifier|static
class|class
name|HttpContext
block|{
specifier|private
specifier|final
name|RequestWrapper
name|request
decl_stmt|;
specifier|private
specifier|final
name|ResponseWrapper
name|response
decl_stmt|;
specifier|private
specifier|final
name|SessionWrapper
name|session
decl_stmt|;
specifier|public
name|HttpContext
parameter_list|(
specifier|final
name|RequestWrapper
name|request
parameter_list|,
specifier|final
name|ResponseWrapper
name|response
parameter_list|,
specifier|final
name|SessionWrapper
name|session
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|session
expr_stmt|;
block|}
specifier|public
name|HttpContext
parameter_list|(
specifier|final
name|RequestWrapper
name|request
parameter_list|,
specifier|final
name|ResponseWrapper
name|response
parameter_list|)
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
name|this
operator|.
name|session
operator|=
name|request
operator|.
name|getSession
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|RequestWrapper
name|getRequest
parameter_list|()
block|{
return|return
name|request
return|;
block|}
specifier|public
name|ResponseWrapper
name|getResponse
parameter_list|()
block|{
return|return
name|response
return|;
block|}
specifier|public
name|SessionWrapper
name|getSession
parameter_list|()
block|{
return|return
name|session
return|;
block|}
comment|/**          * Returns a new HttpContext with the new session set.          *          * The request and response are referenced from this object.          *          * @param newSession the new session to set.          * @return the new HttpContext.          */
specifier|public
name|HttpContext
name|setSession
parameter_list|(
specifier|final
name|SessionWrapper
name|newSession
parameter_list|)
block|{
return|return
operator|new
name|HttpContext
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|newSession
argument_list|)
return|;
block|}
block|}
end_class

unit|}
end_unit

