begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_class
specifier|public
class|class
name|ContextItemDeclaration
extends|extends
name|AbstractExpression
implements|implements
name|RewritableExpression
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ContextItemDeclaration
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Optional
argument_list|<
name|SequenceType
argument_list|>
name|itemType
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|external
decl_stmt|;
specifier|private
name|Optional
argument_list|<
name|Expression
argument_list|>
name|value
decl_stmt|;
specifier|public
name|ContextItemDeclaration
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|SequenceType
name|itemType
parameter_list|,
specifier|final
name|boolean
name|external
parameter_list|,
specifier|final
name|Expression
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|itemType
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|itemType
argument_list|)
expr_stmt|;
name|this
operator|.
name|external
operator|=
name|external
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
specifier|final
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|contextInfo
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|value
operator|.
name|get
argument_list|()
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
name|contextSequence
parameter_list|,
specifier|final
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|external
condition|)
block|{
comment|//TODO(AR): how to set the context item externally? doesn't eXist-db do this by default anyway?
comment|// is there a default value
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|value
operator|.
name|get
argument_list|()
operator|.
name|eval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
else|else
block|{
return|return
name|value
operator|.
name|get
argument_list|()
operator|.
name|eval
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|itemType
operator|.
name|map
argument_list|(
name|SequenceType
operator|::
name|getPrimaryType
argument_list|)
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|value
operator|.
name|map
argument_list|(
name|Expression
operator|::
name|returnsType
argument_list|)
operator|.
name|orElse
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|nl
argument_list|()
operator|.
name|display
argument_list|(
literal|"declare context item"
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|itemType
operator|.
name|map
argument_list|(
name|it
lambda|->
name|dumper
operator|.
name|display
argument_list|(
literal|" as "
argument_list|)
operator|.
name|display
argument_list|(
name|it
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|external
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" external "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|" := "
argument_list|)
expr_stmt|;
name|value
operator|.
name|get
argument_list|()
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
block|}
name|dumper
operator|.
name|nl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|result
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|"declare context item"
argument_list|)
expr_stmt|;
name|itemType
operator|.
name|map
argument_list|(
name|it
lambda|->
name|result
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
operator|.
name|append
argument_list|(
name|it
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|external
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|" external "
argument_list|)
expr_stmt|;
block|}
name|value
operator|.
name|map
argument_list|(
name|v
lambda|->
name|result
operator|.
name|append
argument_list|(
literal|" := "
argument_list|)
operator|.
name|append
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|replace
parameter_list|(
specifier|final
name|Expression
name|oldExpr
parameter_list|,
specifier|final
name|Expression
name|newExpr
parameter_list|)
block|{
if|if
condition|(
name|value
operator|.
name|isPresent
argument_list|()
operator|&&
name|value
operator|.
name|get
argument_list|()
operator|==
name|oldExpr
condition|)
block|{
name|this
operator|.
name|value
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|newExpr
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
specifier|final
name|Expression
name|oldExpr
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getPrevious
parameter_list|(
specifier|final
name|Expression
name|current
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getFirst
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

