begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012 The eXist-db Project  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Describes the signature of a built-in or user-defined function, i.e.  * its name, the type and cardinality of its arguments and its return type.  *    * @author wolf  * @author lcahlander  * @version 1.3  */
end_comment

begin_class
specifier|public
class|class
name|FunctionSignature
block|{
comment|/**      * Default sequence type for function parameters.      */
specifier|public
specifier|final
specifier|static
name|SequenceType
name|DEFAULT_TYPE
init|=
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
decl_stmt|;
comment|/**      * Empty array to specify if a function doesn't take any arguments.      */
specifier|public
specifier|final
specifier|static
name|SequenceType
index|[]
name|NO_ARGS
init|=
operator|new
name|SequenceType
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DEPRECATION_REMOVAL_MESSAGE
init|=
literal|"\nThis function could be removed in the next major release version."
decl_stmt|;
specifier|public
specifier|static
name|SequenceType
index|[]
name|singleArgument
parameter_list|(
specifier|final
name|SequenceType
name|arg
parameter_list|)
block|{
return|return
operator|new
name|SequenceType
index|[]
block|{
name|arg
block|}
return|;
block|}
specifier|private
name|Annotation
index|[]
name|annotations
decl_stmt|;
specifier|private
specifier|final
name|QName
name|name
decl_stmt|;
specifier|private
name|SequenceType
index|[]
name|arguments
decl_stmt|;
specifier|private
name|SequenceType
name|returnType
decl_stmt|;
specifier|private
name|boolean
name|isOverloaded
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|description
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|deprecated
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|metadata
init|=
literal|null
decl_stmt|;
specifier|public
name|FunctionSignature
parameter_list|(
specifier|final
name|FunctionSignature
name|other
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|other
operator|.
name|name
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|other
operator|.
name|arguments
expr_stmt|;
name|this
operator|.
name|returnType
operator|=
name|other
operator|.
name|returnType
expr_stmt|;
name|this
operator|.
name|annotations
operator|=
name|other
operator|.
name|annotations
expr_stmt|;
name|this
operator|.
name|isOverloaded
operator|=
name|other
operator|.
name|isOverloaded
expr_stmt|;
name|this
operator|.
name|deprecated
operator|=
name|other
operator|.
name|deprecated
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|other
operator|.
name|description
expr_stmt|;
name|this
operator|.
name|metadata
operator|=
name|other
operator|.
name|metadata
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|DEFAULT_TYPE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
specifier|final
name|SequenceType
index|[]
name|arguments
parameter_list|,
specifier|final
name|SequenceType
name|returnType
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
specifier|final
name|SequenceType
index|[]
name|arguments
parameter_list|,
specifier|final
name|SequenceType
name|returnType
parameter_list|,
specifier|final
name|boolean
name|overloaded
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|,
name|overloaded
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|SequenceType
index|[]
name|arguments
parameter_list|,
specifier|final
name|SequenceType
name|returnType
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|SequenceType
index|[]
name|arguments
parameter_list|,
specifier|final
name|SequenceType
name|returnType
parameter_list|,
specifier|final
name|String
name|deprecated
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|setDeprecated
argument_list|(
name|deprecated
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|SequenceType
index|[]
name|arguments
parameter_list|,
specifier|final
name|SequenceType
name|returnType
parameter_list|,
specifier|final
name|FunctionSignature
name|deprecatedBy
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|,
literal|"Moved to the module: "
operator|+
name|deprecatedBy
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|", you should now use '"
operator|+
name|deprecatedBy
operator|.
name|getName
argument_list|()
operator|.
name|getPrefix
argument_list|()
operator|+
literal|":"
operator|+
name|deprecatedBy
operator|.
name|getName
argument_list|()
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"' instead!"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|SequenceType
index|[]
name|arguments
parameter_list|,
specifier|final
name|SequenceType
name|returnType
parameter_list|,
specifier|final
name|boolean
name|overloaded
parameter_list|,
specifier|final
name|String
name|deprecated
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|,
name|overloaded
argument_list|)
expr_stmt|;
name|setDeprecated
argument_list|(
name|deprecated
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new function signature.      *       * @param name the QName of the function.      * @param description documentation string describing the function      * @param arguments the sequence types of all expected arguments      * @param returnType the sequence type returned by the function      * @param overloaded set to true if the function may expect additional parameters      */
specifier|public
name|FunctionSignature
parameter_list|(
specifier|final
name|QName
name|name
parameter_list|,
specifier|final
name|String
name|description
parameter_list|,
specifier|final
name|SequenceType
index|[]
name|arguments
parameter_list|,
specifier|final
name|SequenceType
name|returnType
parameter_list|,
specifier|final
name|boolean
name|overloaded
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|arguments
expr_stmt|;
name|this
operator|.
name|returnType
operator|=
name|returnType
expr_stmt|;
name|this
operator|.
name|isOverloaded
operator|=
name|overloaded
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|Annotation
index|[]
name|getAnnotations
parameter_list|()
block|{
return|return
name|annotations
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|int
name|getArgumentCount
parameter_list|()
block|{
if|if
condition|(
name|isOverloaded
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
return|return
name|arguments
operator|!=
literal|null
condition|?
name|arguments
operator|.
name|length
else|:
literal|0
return|;
block|}
specifier|public
name|FunctionId
name|getFunctionId
parameter_list|()
block|{
return|return
operator|new
name|FunctionId
argument_list|(
name|name
argument_list|,
name|getArgumentCount
argument_list|()
argument_list|)
return|;
block|}
specifier|public
name|SequenceType
name|getReturnType
parameter_list|()
block|{
return|return
name|returnType
return|;
block|}
specifier|public
name|void
name|setReturnType
parameter_list|(
specifier|final
name|SequenceType
name|type
parameter_list|)
block|{
name|returnType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|SequenceType
index|[]
name|getArgumentTypes
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
specifier|public
name|void
name|setArgumentTypes
parameter_list|(
specifier|final
name|SequenceType
index|[]
name|types
parameter_list|)
block|{
name|this
operator|.
name|arguments
operator|=
name|types
expr_stmt|;
block|}
specifier|public
name|void
name|setAnnotations
parameter_list|(
specifier|final
name|Annotation
index|[]
name|annotations
parameter_list|)
block|{
name|this
operator|.
name|annotations
operator|=
name|annotations
expr_stmt|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|void
name|setDescription
parameter_list|(
specifier|final
name|String
name|description
parameter_list|)
block|{
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|void
name|addMetadata
parameter_list|(
specifier|final
name|String
name|key
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
name|metadata
operator|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|old
init|=
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
comment|// if the key exists, simply append the new value
name|value
operator|=
name|old
operator|+
literal|", "
operator|+
name|value
expr_stmt|;
block|}
name|metadata
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getMetadata
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
if|if
condition|(
name|metadata
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
return|return
name|metadata
operator|.
name|get
argument_list|(
name|key
argument_list|)
return|;
block|}
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|getMetadata
parameter_list|()
block|{
return|return
name|metadata
return|;
block|}
specifier|public
name|boolean
name|isOverloaded
parameter_list|()
block|{
return|return
name|isOverloaded
return|;
block|}
specifier|public
name|boolean
name|isDeprecated
parameter_list|()
block|{
return|return
name|deprecated
operator|!=
literal|null
return|;
block|}
specifier|public
name|String
name|getDeprecated
parameter_list|()
block|{
if|if
condition|(
name|deprecated
operator|!=
literal|null
operator|&&
name|deprecated
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
name|deprecated
operator|+
name|DEPRECATION_REMOVAL_MESSAGE
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
specifier|final
name|void
name|setDeprecated
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
name|deprecated
operator|=
name|message
expr_stmt|;
block|}
specifier|public
name|boolean
name|isPrivate
parameter_list|()
block|{
specifier|final
name|Annotation
index|[]
name|annotations
init|=
name|getAnnotations
argument_list|()
decl_stmt|;
if|if
condition|(
name|annotations
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Annotation
name|annot
range|:
name|annotations
control|)
block|{
specifier|final
name|QName
name|qn
init|=
name|annot
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
argument_list|)
operator|&&
literal|"private"
operator|.
name|equals
argument_list|(
name|qn
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|name
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
operator|!=
literal|null
condition|)
block|{
specifier|final
name|char
name|var
init|=
literal|'a'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
index|[
name|i
index|]
operator|instanceof
name|FunctionParameterSequenceType
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|FunctionParameterSequenceType
operator|)
name|arguments
index|[
name|i
index|]
operator|)
operator|.
name|getAttributeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
name|var
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|arguments
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOverloaded
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", ..."
argument_list|)
expr_stmt|;
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|returnType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|FunctionSignature
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|FunctionSignature
name|other
init|=
operator|(
name|FunctionSignature
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|other
operator|.
name|name
operator|!=
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|getArgumentCount
argument_list|()
operator|==
name|other
operator|.
name|getArgumentCount
argument_list|()
return|;
block|}
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
condition|)
block|{
return|return
name|getArgumentCount
argument_list|()
operator|==
name|other
operator|.
name|getArgumentCount
argument_list|()
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

