begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|Scheduler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|SystemTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ThreadUtils
operator|.
name|nameInstanceSchedulerThread
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ThreadUtils
operator|.
name|nameInstanceThread
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ThreadUtils
operator|.
name|newInstanceSubThreadGroup
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|quartz
operator|.
name|CronScheduleBuilder
operator|.
name|cronSchedule
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|quartz
operator|.
name|JobBuilder
operator|.
name|newJob
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|quartz
operator|.
name|SimpleScheduleBuilder
operator|.
name|simpleSchedule
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|quartz
operator|.
name|TriggerBuilder
operator|.
name|newTrigger
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|JobDescription
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|quartz
operator|.
name|impl
operator|.
name|StdSchedulerFactory
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|Job
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|impl
operator|.
name|StdSchedulerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|impl
operator|.
name|matchers
operator|.
name|GroupMatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * A Scheduler to trigger Startup, System and User defined jobs.  *  * @author  Adam Retter<adam@existsolutions.com>  * @author  Andrzej Taramina<andrzej@chaeron.com>  */
end_comment

begin_class
specifier|public
class|class
name|QuartzSchedulerImpl
implements|implements
name|Scheduler
implements|,
name|BrokerPoolService
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|QuartzSchedulerImpl
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// the real scheduler
specifier|private
name|org
operator|.
name|quartz
operator|.
name|Scheduler
name|scheduler
decl_stmt|;
specifier|private
specifier|final
name|BrokerPool
name|brokerPool
decl_stmt|;
specifier|private
name|Configuration
name|config
decl_stmt|;
specifier|public
name|QuartzSchedulerImpl
parameter_list|(
specifier|final
name|BrokerPool
name|brokerpool
parameter_list|)
block|{
name|this
operator|.
name|brokerPool
operator|=
name|brokerpool
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
name|this
operator|.
name|config
operator|=
name|configuration
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
comment|// NOTE: we create the scheduler in a separate thread with its own thread-group so that the thread group is used by Quartz
specifier|final
name|ThreadGroup
name|instanceQuartzThreadGroup
init|=
name|newInstanceSubThreadGroup
argument_list|(
name|brokerPool
argument_list|,
literal|"scheduler.quartz-simple-thread-pool"
argument_list|)
decl_stmt|;
specifier|final
name|QuartzSchedulerCreator
name|creator
init|=
operator|new
name|QuartzSchedulerCreator
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|schedulerCreatorThread
init|=
operator|new
name|Thread
argument_list|(
name|instanceQuartzThreadGroup
argument_list|,
name|creator
argument_list|,
name|nameInstanceThread
argument_list|(
name|brokerPool
argument_list|,
literal|"prepare-quartz-scheduler"
argument_list|)
argument_list|)
decl_stmt|;
name|schedulerCreatorThread
operator|.
name|start
argument_list|()
expr_stmt|;
try|try
block|{
name|schedulerCreatorThread
operator|.
name|join
argument_list|()
expr_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|creator
operator|.
name|getScheduler
argument_list|()
operator|.
name|valueOrThrow
argument_list|(
name|e
lambda|->
operator|new
name|BrokerPoolServiceException
argument_list|(
literal|"Unable to create Scheduler: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
comment|// restore interrupted state
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|BrokerPoolServiceException
argument_list|(
literal|"Unable to create Scheduler: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startMultiUser
parameter_list|(
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
name|run
argument_list|()
expr_stmt|;
comment|// start running all the defined jobs
block|}
specifier|private
specifier|final
specifier|static
name|Properties
name|defaultQuartzProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
name|PROP_SCHED_RMI_EXPORT
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
name|PROP_SCHED_RMI_PROXY
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
name|PROP_SCHED_WRAP_JOB_IN_USER_TX
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
name|PROP_THREAD_POOL_CLASS
argument_list|,
literal|"org.exist.scheduler.impl.ExistQuartzSimpleThreadPool"
argument_list|)
expr_stmt|;
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
literal|"org.quartz.threadPool.threadCount"
argument_list|,
literal|"4"
argument_list|)
expr_stmt|;
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
literal|"org.quartz.threadPool.threadPriority"
argument_list|,
literal|"5"
argument_list|)
expr_stmt|;
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
literal|"org.quartz.threadPool.threadsInheritGroupOfInitializingThread"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
literal|"org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
name|PROP_JOB_STORE_CLASS
argument_list|,
literal|"org.quartz.simpl.RAMJobStore"
argument_list|)
expr_stmt|;
name|defaultQuartzProperties
operator|.
name|setProperty
argument_list|(
literal|"org.quartz.jobStore.misfireThreshold"
argument_list|,
literal|"60000"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Properties
name|getQuartzProperties
parameter_list|()
block|{
comment|//try and load the properties for quartz
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"quartz.properties"
argument_list|)
init|)
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Successfully loaded quartz.properties"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not load quartz.properties, will use defaults."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not load quartz.properties, will defaults. "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|properties
operator|==
literal|null
operator|||
name|properties
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Using default properties for Quartz scheduler"
argument_list|)
expr_stmt|;
name|properties
operator|.
name|putAll
argument_list|(
name|defaultQuartzProperties
argument_list|)
expr_stmt|;
block|}
comment|// always set the scheduler name
name|properties
operator|.
name|setProperty
argument_list|(
name|PROP_SCHED_INSTANCE_NAME
argument_list|,
name|nameInstanceSchedulerThread
argument_list|(
name|brokerPool
argument_list|,
literal|"quartz-scheduler"
argument_list|)
argument_list|)
expr_stmt|;
comment|// always set the thread prefix for the thread pool
specifier|final
name|String
name|schedulerThreadNamePrefix
init|=
name|nameInstanceSchedulerThread
argument_list|(
name|brokerPool
argument_list|,
literal|"quartz-worker"
argument_list|)
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|PROP_THREAD_POOL_PREFIX
operator|+
literal|".threadNamePrefix"
argument_list|,
name|schedulerThreadNamePrefix
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
specifier|protected
name|org
operator|.
name|quartz
operator|.
name|Scheduler
name|getScheduler
parameter_list|()
block|{
return|return
name|scheduler
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
name|setupConfiguredJobs
argument_list|()
expr_stmt|;
name|getScheduler
argument_list|()
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to start the Scheduler: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Shutdown the running Scheduler.      *      *<p>Asynchronous method. use isShutdown() to determine if the Scheduler has Shutdown</p>      *      * @param  waitForJobsToComplete Should we wait for currently executing jobs      * to complete before shutting down?      */
annotation|@
name|Override
specifier|public
name|void
name|shutdown
parameter_list|(
specifier|final
name|boolean
name|waitForJobsToComplete
parameter_list|)
block|{
try|try
block|{
name|getScheduler
argument_list|()
operator|.
name|shutdown
argument_list|(
name|waitForJobsToComplete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to shutdown the Scheduler:"
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
try|try
block|{
return|return
name|getScheduler
argument_list|()
operator|.
name|isShutdown
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to determine the status of the Scheduler: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Create Periodic Job      *      * @param   period  The period, in milliseconds.      * @param   job     The job to trigger after each period      * @param   delay<= 0, start now, otherwise start in specified number of milliseconds      *      * @return  true if the job was successfully scheduled, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|createPeriodicJob
parameter_list|(
specifier|final
name|long
name|period
parameter_list|,
specifier|final
name|JobDescription
name|job
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|)
block|{
return|return
name|createPeriodicJob
argument_list|(
name|period
argument_list|,
name|job
argument_list|,
name|delay
argument_list|,
literal|null
argument_list|,
name|SimpleTrigger
operator|.
name|REPEAT_INDEFINITELY
argument_list|)
return|;
block|}
comment|/**      * Create Periodic Job      *      * @param   period  The period, in milliseconds.      * @param   job     The job to trigger after each period      * @param   delay<= 0, start now, otherwise start in specified number of milliseconds      * @param   params  Any parameters to pass to the job      *      * @return  true if the job was successfully scheduled, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|createPeriodicJob
parameter_list|(
specifier|final
name|long
name|period
parameter_list|,
specifier|final
name|JobDescription
name|job
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|,
specifier|final
name|Properties
name|params
parameter_list|)
block|{
return|return
name|createPeriodicJob
argument_list|(
name|period
argument_list|,
name|job
argument_list|,
name|delay
argument_list|,
name|params
argument_list|,
name|SimpleTrigger
operator|.
name|REPEAT_INDEFINITELY
argument_list|)
return|;
block|}
comment|/**      * Create Periodic Job      *      * @param   period       The period, in milliseconds.      * @param   job          The job to trigger after each period      * @param   delay<= 0, start now, otherwise start in specified number of milliseconds      * @param   params       Any parameters to pass to the job      * @param   repeatCount  Number of times to repeat this job.      *      * @return  true if the job was successfully scheduled, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|createPeriodicJob
parameter_list|(
specifier|final
name|long
name|period
parameter_list|,
specifier|final
name|JobDescription
name|job
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|,
specifier|final
name|Properties
name|params
parameter_list|,
specifier|final
name|int
name|repeatCount
parameter_list|)
block|{
return|return
name|createPeriodicJob
argument_list|(
name|period
argument_list|,
name|job
argument_list|,
name|delay
argument_list|,
name|params
argument_list|,
name|repeatCount
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Create Periodic Job      *      * @param   period       The period, in milliseconds.      * @param   job          The job to trigger after each period      * @param   delay<= 0, start now, otherwise start in specified number of milliseconds      * @param   params       Any parameters to pass to the job      * @param   repeatCount  Number of times to repeat this job.      * @param   unschedule   Unschedule job on XPathException?      *      * @return  true if the job was successfully scheduled, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|createPeriodicJob
parameter_list|(
specifier|final
name|long
name|period
parameter_list|,
specifier|final
name|JobDescription
name|job
parameter_list|,
specifier|final
name|long
name|delay
parameter_list|,
specifier|final
name|Properties
name|params
parameter_list|,
specifier|final
name|int
name|repeatCount
parameter_list|,
specifier|final
name|boolean
name|unschedule
parameter_list|)
block|{
comment|//Create the job details
specifier|final
name|JobDetail
name|jobDetail
init|=
name|newJob
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Job
argument_list|>
operator|)
name|job
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withIdentity
argument_list|(
name|job
operator|.
name|getName
argument_list|()
argument_list|,
name|job
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//Setup the job's data map
specifier|final
name|JobDataMap
name|jobDataMap
init|=
name|jobDetail
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
name|setupJobDataMap
argument_list|(
name|job
argument_list|,
name|jobDataMap
argument_list|,
name|params
argument_list|,
name|unschedule
argument_list|)
expr_stmt|;
comment|//setup a trigger for the job, millisecond based
specifier|final
name|TriggerBuilder
name|triggerBuilder
init|=
name|newTrigger
argument_list|()
operator|.
name|withIdentity
argument_list|(
name|job
operator|.
name|getName
argument_list|()
operator|+
literal|" Trigger"
argument_list|,
name|job
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|withSchedule
argument_list|(
name|simpleSchedule
argument_list|()
operator|.
name|withIntervalInMilliseconds
argument_list|(
name|period
argument_list|)
operator|.
name|withRepeatCount
argument_list|(
name|repeatCount
argument_list|)
argument_list|)
decl_stmt|;
comment|//when should the trigger start
specifier|final
name|Trigger
name|trigger
decl_stmt|;
if|if
condition|(
name|delay
operator|<=
literal|0
condition|)
block|{
comment|//start now
name|trigger
operator|=
name|triggerBuilder
operator|.
name|startNow
argument_list|()
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//start after period
specifier|final
name|Calendar
name|start
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|start
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
operator|(
name|int
operator|)
name|delay
argument_list|)
expr_stmt|;
specifier|final
name|Date
name|triggerStart
init|=
name|start
operator|.
name|getTime
argument_list|()
decl_stmt|;
name|trigger
operator|=
name|triggerBuilder
operator|.
name|startAt
argument_list|(
name|triggerStart
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|//schedule the job
try|try
block|{
name|getScheduler
argument_list|()
operator|.
name|scheduleJob
argument_list|(
name|jobDetail
argument_list|,
name|trigger
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
comment|//Failed to schedule Job
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to schedule periodic job '"
operator|+
name|job
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//Successfully scheduled Job
return|return
literal|true
return|;
block|}
comment|/**      * Create Cron Job      *      * @param   cronExpression  The Cron scheduling expression      * @param   job             The job to trigger after each period      *      * @return  true if the job was successfully scheduled, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|createCronJob
parameter_list|(
specifier|final
name|String
name|cronExpression
parameter_list|,
specifier|final
name|JobDescription
name|job
parameter_list|)
block|{
return|return
name|createCronJob
argument_list|(
name|cronExpression
argument_list|,
name|job
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/**      * Create Cron Job      *      * @param   cronExpression  The Cron scheduling expression      * @param   job             The job to trigger after each period      * @param   params          Any parameters to pass to the job      *      * @return  true if the job was successfully scheduled, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|createCronJob
parameter_list|(
specifier|final
name|String
name|cronExpression
parameter_list|,
specifier|final
name|JobDescription
name|job
parameter_list|,
specifier|final
name|Properties
name|params
parameter_list|)
block|{
return|return
name|createCronJob
argument_list|(
name|cronExpression
argument_list|,
name|job
argument_list|,
name|params
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Create Cron Job      *      * @param   cronExpression  The Cron scheduling expression      * @param   job             The job to trigger after each period      * @param   params          Any parameters to pass to the job      * @param   unschedule   Unschedule job on XPathException?.      *      * @return  true if the job was successfully scheduled, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|createCronJob
parameter_list|(
specifier|final
name|String
name|cronExpression
parameter_list|,
specifier|final
name|JobDescription
name|job
parameter_list|,
specifier|final
name|Properties
name|params
parameter_list|,
specifier|final
name|boolean
name|unschedule
parameter_list|)
block|{
comment|//Create the job details
specifier|final
name|JobDetail
name|jobDetail
init|=
name|newJob
argument_list|(
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Job
argument_list|>
operator|)
name|job
operator|.
name|getClass
argument_list|()
argument_list|)
operator|.
name|withIdentity
argument_list|(
name|job
operator|.
name|getName
argument_list|()
argument_list|,
name|job
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//Setup the job's data map
specifier|final
name|JobDataMap
name|jobDataMap
init|=
name|jobDetail
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
name|setupJobDataMap
argument_list|(
name|job
argument_list|,
name|jobDataMap
argument_list|,
name|params
argument_list|,
name|unschedule
argument_list|)
expr_stmt|;
try|try
block|{
comment|//setup a trigger for the job, Cron based
specifier|final
name|Trigger
name|trigger
init|=
name|newTrigger
argument_list|()
operator|.
name|withIdentity
argument_list|(
name|job
operator|.
name|getName
argument_list|()
operator|+
literal|" Trigger"
argument_list|,
name|job
operator|.
name|getGroup
argument_list|()
argument_list|)
operator|.
name|withSchedule
argument_list|(
name|cronSchedule
argument_list|(
name|cronExpression
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
comment|//schedule the job
name|getScheduler
argument_list|()
operator|.
name|scheduleJob
argument_list|(
name|jobDetail
argument_list|,
name|trigger
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
comment|//Failed to schedule Job
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to schedule cron job '"
operator|+
name|job
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|//Successfully scheduled Job
return|return
literal|true
return|;
block|}
comment|/**      * Removes a Job from the Scheduler.      *      * @param   jobName   The name of the Job      * @param   jobGroup  The group that the Job was Scheduled in      *      * @return  true if the job was deleted, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|deleteJob
parameter_list|(
specifier|final
name|String
name|jobName
parameter_list|,
specifier|final
name|String
name|jobGroup
parameter_list|)
block|{
name|boolean
name|deletedJob
init|=
literal|false
decl_stmt|;
try|try
block|{
name|deletedJob
operator|=
name|getScheduler
argument_list|()
operator|.
name|deleteJob
argument_list|(
operator|new
name|JobKey
argument_list|(
name|jobName
argument_list|,
name|jobGroup
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to delete job '"
operator|+
name|jobName
operator|+
literal|"': "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
return|return
name|deletedJob
return|;
block|}
comment|/**      * Pauses a Job with the Scheduler.      *      * @param   jobName   The name of the Job      * @param   jobGroup  The group that the Job was Scheduled in      *      * @return  true if the job was paused, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|pauseJob
parameter_list|(
specifier|final
name|String
name|jobName
parameter_list|,
specifier|final
name|String
name|jobGroup
parameter_list|)
block|{
try|try
block|{
name|getScheduler
argument_list|()
operator|.
name|pauseJob
argument_list|(
operator|new
name|JobKey
argument_list|(
name|jobName
argument_list|,
name|jobGroup
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to pause job '"
operator|+
name|jobName
operator|+
literal|"': "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Resume a Job with the Scheduler.      *      * @param   jobName   The name of the Job      * @param   jobGroup  The group that the Job was Scheduled in      *      * @return  true if the job was resumed, false otherwise      */
annotation|@
name|Override
specifier|public
name|boolean
name|resumeJob
parameter_list|(
specifier|final
name|String
name|jobName
parameter_list|,
specifier|final
name|String
name|jobGroup
parameter_list|)
block|{
try|try
block|{
name|getScheduler
argument_list|()
operator|.
name|resumeJob
argument_list|(
operator|new
name|JobKey
argument_list|(
name|jobName
argument_list|,
name|jobGroup
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to resume job '"
operator|+
name|jobName
operator|+
literal|"': "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Gets the names of the Job groups.      *      * @return  String array of the Job group names      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getJobGroupNames
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|jobNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
name|jobNames
operator|.
name|addAll
argument_list|(
name|getScheduler
argument_list|()
operator|.
name|getJobGroupNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get job group names: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
return|return
name|jobNames
return|;
block|}
comment|/**      * Gets information about currently Scheduled Jobs.      *      * @return  An array of ScheduledJobInfo      */
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|ScheduledJobInfo
argument_list|>
name|getScheduledJobs
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|ScheduledJobInfo
argument_list|>
name|scheduledJobs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
try|try
block|{
comment|//get the trigger groups
for|for
control|(
specifier|final
name|String
name|triggerGroupName
range|:
name|getScheduler
argument_list|()
operator|.
name|getTriggerGroupNames
argument_list|()
control|)
block|{
comment|//get the trigger names for the trigger group
for|for
control|(
specifier|final
name|TriggerKey
name|triggerKey
range|:
name|getScheduler
argument_list|()
operator|.
name|getTriggerKeys
argument_list|(
name|GroupMatcher
operator|.
name|triggerGroupEquals
argument_list|(
name|triggerGroupName
argument_list|)
argument_list|)
control|)
block|{
comment|//add information about the job to the result
name|scheduledJobs
operator|.
name|add
argument_list|(
operator|new
name|ScheduledJobInfo
argument_list|(
name|getScheduler
argument_list|()
argument_list|,
name|getScheduler
argument_list|()
operator|.
name|getTrigger
argument_list|(
name|triggerKey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get scheduled jobs: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
return|return
name|scheduledJobs
return|;
block|}
comment|/**      * Gets information about currently Executing Jobs.      *      * @return  An array of ScheduledJobInfo      */
annotation|@
name|Override
specifier|public
name|ScheduledJobInfo
index|[]
name|getExecutingJobs
parameter_list|()
block|{
name|ScheduledJobInfo
name|result
index|[]
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|ScheduledJobInfo
argument_list|>
name|jobs
init|=
name|getScheduler
argument_list|()
operator|.
name|getCurrentlyExecutingJobs
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|map
argument_list|(
name|jobExecutionCtx
lambda|->
operator|new
name|ScheduledJobInfo
argument_list|(
name|getScheduler
argument_list|()
argument_list|,
name|jobExecutionCtx
operator|.
name|getTrigger
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|=
operator|new
name|ScheduledJobInfo
index|[
name|jobs
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|jobs
operator|.
name|toArray
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|se
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get executing jobs: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Set's up all the jobs that are listed in conf.xml and loaded through org.exist.util.Configuration.      */
annotation|@
name|Override
specifier|public
name|void
name|setupConfiguredJobs
parameter_list|()
block|{
specifier|final
name|JobConfig
index|[]
name|jobList
init|=
operator|(
name|JobConfig
index|[]
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|JobConfig
operator|.
name|PROPERTY_SCHEDULER_JOBS
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobList
operator|==
literal|null
condition|)
block|{
return|return;
block|}
for|for
control|(
specifier|final
name|JobConfig
name|jobConfig
range|:
name|jobList
control|)
block|{
name|JobDescription
name|job
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jobConfig
operator|.
name|getResourceName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"/db/"
argument_list|)
operator|||
name|jobConfig
operator|.
name|getResourceName
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|jobConfig
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|JobType
operator|.
name|SYSTEM
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"System jobs may only be written in Java"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//create an XQuery job
specifier|final
name|Subject
name|guestUser
init|=
name|brokerPool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGuestSubject
argument_list|()
decl_stmt|;
name|job
operator|=
operator|new
name|UserXQueryJob
argument_list|(
name|jobConfig
operator|.
name|getJobName
argument_list|()
argument_list|,
name|jobConfig
operator|.
name|getResourceName
argument_list|()
argument_list|,
name|guestUser
argument_list|)
expr_stmt|;
try|try
block|{
comment|// check if a job with the same name is already registered
if|if
condition|(
name|getScheduler
argument_list|()
operator|.
name|getJobDetail
argument_list|(
operator|new
name|JobKey
argument_list|(
name|job
operator|.
name|getName
argument_list|()
argument_list|,
name|UserJob
operator|.
name|JOB_GROUP
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
block|{
comment|// yes, try to make the job's name unique
name|job
operator|.
name|setName
argument_list|(
name|job
operator|.
name|getName
argument_list|()
operator|+
name|job
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to set job name: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//create a Java job
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|jobClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|jobConfig
operator|.
name|getResourceName
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|jobObject
init|=
name|jobClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|jobConfig
operator|.
name|getType
argument_list|()
operator|.
name|equals
argument_list|(
name|JobType
operator|.
name|SYSTEM
argument_list|)
condition|)
block|{
if|if
condition|(
name|jobObject
operator|instanceof
name|SystemTask
condition|)
block|{
specifier|final
name|SystemTask
name|task
init|=
operator|(
name|SystemTask
operator|)
name|jobObject
decl_stmt|;
name|task
operator|.
name|configure
argument_list|(
name|config
argument_list|,
name|jobConfig
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
name|job
operator|=
operator|new
name|SystemTaskJobImpl
argument_list|(
name|jobConfig
operator|.
name|getJobName
argument_list|()
argument_list|,
name|task
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"System jobs must extend SystemTask"
argument_list|)
expr_stmt|;
comment|// throw exception? will be handled nicely
block|}
block|}
else|else
block|{
if|if
condition|(
name|jobObject
operator|instanceof
name|JobDescription
condition|)
block|{
name|job
operator|=
operator|(
name|JobDescription
operator|)
name|jobObject
expr_stmt|;
if|if
condition|(
name|jobConfig
operator|.
name|getJobName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|job
operator|.
name|setName
argument_list|(
name|jobConfig
operator|.
name|getJobName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Startup job "
operator|+
name|jobConfig
operator|.
name|getJobName
argument_list|()
operator|+
literal|"  must extend org.exist.scheduler.StartupJob"
argument_list|)
expr_stmt|;
comment|// throw exception? will be handled nicely
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
comment|// Throwable?
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to schedule '"
operator|+
name|jobConfig
operator|.
name|getType
argument_list|()
operator|+
literal|"' job "
operator|+
name|jobConfig
operator|.
name|getResourceName
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//if there is a job, schedule it
if|if
condition|(
name|job
operator|!=
literal|null
condition|)
block|{
comment|//timed job
comment|//trigger is Cron or period?
if|if
condition|(
name|jobConfig
operator|.
name|getSchedule
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
comment|//schedule job with Cron trigger
name|createCronJob
argument_list|(
name|jobConfig
operator|.
name|getSchedule
argument_list|()
argument_list|,
name|job
argument_list|,
name|jobConfig
operator|.
name|getParameters
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//schedule job with periodic trigger
name|createPeriodicJob
argument_list|(
name|Long
operator|.
name|parseLong
argument_list|(
name|jobConfig
operator|.
name|getSchedule
argument_list|()
argument_list|)
argument_list|,
name|job
argument_list|,
name|jobConfig
operator|.
name|getDelay
argument_list|()
argument_list|,
name|jobConfig
operator|.
name|getParameters
argument_list|()
argument_list|,
name|jobConfig
operator|.
name|getRepeat
argument_list|()
argument_list|,
name|jobConfig
operator|.
name|unscheduleOnException
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Sets up the Job's Data Map.      *      * @param  job         The Job      * @param  jobDataMap  The Job's Data Map      * @param  params      Any parameters for the job      */
specifier|private
name|void
name|setupJobDataMap
parameter_list|(
specifier|final
name|JobDescription
name|job
parameter_list|,
specifier|final
name|JobDataMap
name|jobDataMap
parameter_list|,
specifier|final
name|Properties
name|params
parameter_list|,
specifier|final
name|boolean
name|unschedule
parameter_list|)
block|{
comment|//if this is a system job, store the BrokerPool in the job's data map
name|jobDataMap
operator|.
name|put
argument_list|(
name|DATABASE
argument_list|,
name|brokerPool
argument_list|)
expr_stmt|;
comment|//if this is a system task job, store the SystemTask in the job's data map
if|if
condition|(
name|job
operator|instanceof
name|SystemTaskJobImpl
condition|)
block|{
name|jobDataMap
operator|.
name|put
argument_list|(
name|SYSTEM_TASK
argument_list|,
operator|(
operator|(
name|SystemTaskJobImpl
operator|)
name|job
operator|)
operator|.
name|getSystemTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//if this is a users XQuery job, store the XQuery resource and user in the job's data map
if|if
condition|(
name|job
operator|instanceof
name|UserXQueryJob
condition|)
block|{
name|jobDataMap
operator|.
name|put
argument_list|(
name|XQUERY_SOURCE
argument_list|,
operator|(
operator|(
name|UserXQueryJob
operator|)
name|job
operator|)
operator|.
name|getXQueryResource
argument_list|()
argument_list|)
expr_stmt|;
name|jobDataMap
operator|.
name|put
argument_list|(
name|ACCOUNT
argument_list|,
operator|(
operator|(
name|UserXQueryJob
operator|)
name|job
operator|)
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//copy any parameters into the job's data map
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|jobDataMap
operator|.
name|put
argument_list|(
name|PARAMS
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
comment|//Store the value of the unschedule setting
name|jobDataMap
operator|.
name|put
argument_list|(
name|UNSCHEDULE
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|unschedule
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new Scheduler      */
specifier|private
class|class
name|QuartzSchedulerCreator
implements|implements
name|Runnable
block|{
annotation|@
name|Nullable
specifier|private
specifier|volatile
name|Either
argument_list|<
name|SchedulerException
argument_list|,
name|org
operator|.
name|quartz
operator|.
name|Scheduler
argument_list|>
name|scheduler
init|=
literal|null
decl_stmt|;
annotation|@
name|Nullable
specifier|public
name|Either
argument_list|<
name|SchedulerException
argument_list|,
name|org
operator|.
name|quartz
operator|.
name|Scheduler
argument_list|>
name|getScheduler
parameter_list|()
block|{
return|return
name|scheduler
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|SchedulerFactory
name|schedulerFactory
init|=
operator|new
name|StdSchedulerFactory
argument_list|(
name|getQuartzProperties
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|scheduler
operator|=
name|Either
operator|.
name|Right
argument_list|(
name|schedulerFactory
operator|.
name|getScheduler
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SchedulerException
name|e
parameter_list|)
block|{
name|this
operator|.
name|scheduler
operator|=
name|Either
operator|.
name|Left
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

