begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|collections
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Observable
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
import|;
end_import

begin_comment
comment|/**  * Represents a Collection in the database. A collection maintains a list of  * child Collections and documents, and provides the methods to store/remove resources.  *  * Collections are shared between {@link org.exist.storage.DBBroker} instances. The caller  * is responsible to lock/unlock the collection. Call {@link DBBroker#openCollection(XmldbURI, LockMode)}  * to get a collection with a read or write lock and {@link #close()} to release the lock.  */
end_comment

begin_interface
specifier|public
interface|interface
name|Collection
extends|extends
name|Resource
extends|,
name|Comparable
argument_list|<
name|Collection
argument_list|>
extends|,
name|AutoCloseable
block|{
comment|/**      * The length in bytes of the Collection ID      */
name|int
name|LENGTH_COLLECTION_ID
init|=
literal|4
decl_stmt|;
comment|//sizeof int
comment|/**      * The ID of an unknown Collection      */
name|int
name|UNKNOWN_COLLECTION_ID
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Get the internal id.      *      * @return The id of the Collection      */
name|int
name|getId
parameter_list|()
function_decl|;
comment|/**      * Set the internal id      *      * @param id The id of the Collection      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
name|void
name|setId
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
comment|/**      * Get the URI path of the Collection      *      * @return The URI path of the Collection      */
name|XmldbURI
name|getURI
parameter_list|()
function_decl|;
comment|/**      * Set the URI path of the Collection      *      * @param path The URI path of the Collection      */
name|void
name|setPath
parameter_list|(
name|XmldbURI
name|path
parameter_list|)
function_decl|;
comment|/**      * Get the metadata of the Collection      *      * @return The Collection metadata      */
name|CollectionMetadata
name|getMetadata
parameter_list|()
function_decl|;
comment|/**      * Get the Collection permissions      *      * @return The permissions of this Collection      */
name|Permission
name|getPermissions
parameter_list|()
function_decl|;
comment|/**      * Get the Collection permissions (without locking)      *      * @return The permissions of this Collection      */
name|Permission
name|getPermissionsNoLock
parameter_list|()
function_decl|;
comment|/**      * Set the mode of the Collection.      *      * @param broker The database broker.      * @param mode The unix like mode of the Collection permissions      */
name|void
name|setPermissions
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|int
name|mode
parameter_list|)
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
function_decl|;
comment|/**      * Gets the creation timestamp of this Collection      *      * @return timestamp the creation timestamp in milliseconds      *      * @deprecated Use {@link #getMetadata()} {@link CollectionMetadata#getCreated()}      */
annotation|@
name|Deprecated
name|long
name|getCreationTime
parameter_list|()
function_decl|;
comment|/**      * Sets the creation timestamp of this Collection      *      * @param timestamp the creation timestamp in milliseconds      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
name|void
name|setCreationTime
parameter_list|(
name|long
name|timestamp
parameter_list|)
function_decl|;
comment|/**      * Get the Collection Configuration of this Collection      *      * @param broker The database broker      */
annotation|@
name|Nullable
name|CollectionConfiguration
name|getConfiguration
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
function_decl|;
comment|/**      * Get the index configuration for this collection      *      * @param broker The database broker      */
name|IndexSpec
name|getIndexConfiguration
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
function_decl|;
comment|/**      * Get the index configuration for a node path of this collection      *      * @param broker The database broker      * @param nodePath The node path to get the index configuration for      *      * @return The index configuration      */
name|GeneralRangeIndexSpec
name|getIndexByPathConfiguration
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodePath
name|nodePath
parameter_list|)
function_decl|;
comment|/**      * Get the index configuration for a node name of this collection      *      * @param broker The database broker      * @param nodeName The node name to get the index configuration for      *      * @return The index configuration      */
name|QNameRangeIndexSpec
name|getIndexByQNameConfiguration
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|QName
name|nodeName
parameter_list|)
function_decl|;
comment|/**      * Returns true if this is a temporary collection. By default,      * the temporary collection is in /db/system/temp.      *      * @return true if the collection is temporary, false otherwise      */
name|boolean
name|isTempCollection
parameter_list|()
function_decl|;
comment|/**      * Returns the estimated amount of memory used by this collection      * and its documents. This information is required by the      * {@link org.exist.collections.CollectionCache} to be able      * to resize the caches.      *      * @return estimated amount of memory in bytes      */
name|int
name|getMemorySize
parameter_list|()
function_decl|;
comment|/**      * Returns the estimated amount of memory used by this collection      * and its documents. This information is required by the      * {@link org.exist.collections.CollectionCache} to be able      * to resize the caches.      *      * @return estimated amount of memory in bytes      */
name|int
name|getMemorySizeNoLock
parameter_list|()
function_decl|;
comment|/**      * Get the parent Collection.      *      * @return The parent Collection of this Collection      * or null if this is the root Collection (i.e. /db).      */
name|XmldbURI
name|getParentURI
parameter_list|()
function_decl|;
comment|/**      * Determines if this Collection has any documents, or child Collections      *      * @param broker The database broker      * @return true if the collection is empty, false otherwise      */
name|boolean
name|isEmpty
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Returns the number of documents in this Collection      *      * @param broker The database broker      * @return The number of documents in the Collection, or -1 if the collection could not be locked      */
name|int
name|getDocumentCount
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Returns the number of documents in this Collection      *      * @param broker The database broker      * @return The number of documents in the Collection      * @deprecated Use {@link #getDocumentCount(DBBroker)}      */
annotation|@
name|Deprecated
name|int
name|getDocumentCountNoLock
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Return the number of child Collections within this Collection.      *      * @param broker The database broker      * @return The childCollectionCount value      */
name|int
name|getChildCollectionCount
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Check if the Collection has a child document      *      * @param broker The database broker      * @param name   the name (without path) of the document      * @return true when the collection has the document, false otherwise      */
name|boolean
name|hasDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Check if the collection has a child Collection      *      * @param broker The database broker      * @param name   the name of the child Collection (without path)      * @return true if the child Collection exists, false otherwise      */
name|boolean
name|hasChildCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Check if the collection has a child Collection      *      * @param broker The database broker      * @param name   the name of the child Collection (without path)      * @return true if the child Collection exists, false otherwise      * @deprecated Use {@link #hasChildCollection(DBBroker, XmldbURI)} instead      */
annotation|@
name|Deprecated
name|boolean
name|hasChildCollectionNoLock
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Add a new child Collection to this Collection      *      * @param broker The database broker      * @param child  The child Collection to add to this Collection      */
name|void
name|addCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
annotation|@
name|EnsureLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
name|Collection
name|child
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Get the Document and child Collection      * entries of this Collection      *      * @param broker The database broker      * @return A list of entries in this Collection      */
name|List
argument_list|<
name|CollectionEntry
argument_list|>
name|getEntries
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|IOException
function_decl|;
comment|/**      * Get the entry for a child Collection      *      * @param broker The database broker      * @param name   The name of the child Collection      * @return The child Collection entry      */
name|CollectionEntry
name|getChildCollectionEntry
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|IOException
function_decl|;
comment|/**      * Get the entry for a resource      *      * @param broker The database broker      * @param name   The name of the resource      * @return The resource entry      */
name|CollectionEntry
name|getResourceEntry
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|IOException
function_decl|;
comment|/**      * Update the specified child Collection      *      * @param broker The database broker      * @param child  The child Collection to update      */
name|void
name|update
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
annotation|@
name|EnsureLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
name|Collection
name|child
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Add a document to the collection      *      * @param transaction The database transaction      * @param broker      The database broker      * @param doc         The document to add to the Collection      */
name|void
name|addDocument
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Removes the document from the internal list of resources, but      * doesn't delete the document object itself.      *      * @param broker The database broker      * @param doc    The document to unlink from the Collection      */
name|void
name|unlinkDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
annotation|@
name|EnsureLocked
argument_list|(
name|mode
operator|=
name|WRITE_LOCK
argument_list|)
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Return an iterator over all child Collections      *<p>      * The list of child Collections is copied first, so modifications      * via the iterator have no effect.      *      * @param broker The database broker      * @return An iterator over the child Collections      */
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|collectionIterator
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Return an iterator over all child Collections.      *<p>      * The list of child Collections is copied first, so modifications      * via the iterator have no effect.      *      * @param broker The database broker      * @return An iterator over the child Collections      * @deprecated The creation of the stable iterator may      * throw an {@link java.lang.IndexOutOfBoundsException},      * use {@link #collectionIterator(DBBroker)} instead      */
annotation|@
name|Deprecated
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|collectionIteratorNoLock
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Returns an iterator on the documents in this Collection      *      * @param broker The database broker      * @return A iterator of all the documents in the Collection.      */
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|iterator
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Returns an iterator on the documents in this Collection      *      * @param broker The database broker      * @return A iterator of all the documents in the Collection.      * @deprecated This is not an atomic operation and      * so there are no guarantees about which docs will be available to      * the iterator. Use {@link #iterator(DBBroker)} instead      */
annotation|@
name|Deprecated
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|iteratorNoLock
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|//TODO(AR) it is unlikely we need to pass the user as a parameter, fix this...
comment|/**      * Return the Collections below this Collection      *      * @param broker The database broker      * @param user   The user that is performing the operation      * @return The List of descendant Collections      */
name|List
argument_list|<
name|Collection
argument_list|>
name|getDescendants
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Subject
name|user
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Gets all of the documents from the Collection      *      * @param broker    The database broker      * @param docs      A mutable document set which receives the documents      * @param recursive true if we should get all descendants, false just retrieves the children      * @return The mutable document set provided in {@param docs}      */
name|MutableDocumentSet
name|allDocs
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|MutableDocumentSet
name|docs
parameter_list|,
name|boolean
name|recursive
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Gets all of the documents from the Collection      *      * @param broker    The database broker      * @param docs      A mutable document set which receives the documents      * @param recursive true if we should get all descendants, false just retrieves the children      * @param lockMap   A map that receives the locks we have taken on documents      * @return The mutable document set provided in {@param docs}      */
name|MutableDocumentSet
name|allDocs
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|MutableDocumentSet
name|docs
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|LockedDocumentMap
name|lockMap
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Gets all of the documents from the Collection      *      * @param broker    The database broker      * @param docs      A mutable document set which receives the documents      * @param recursive true if we should get all descendants, false just retrieves the children      * @param lockMap   A map that receives the locks we have taken on documents      * @param lockType  The type of lock to acquire on the documents      * @return The mutable document set provided in {@param docs}      */
name|DocumentSet
name|allDocs
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|MutableDocumentSet
name|docs
parameter_list|,
name|boolean
name|recursive
parameter_list|,
name|LockedDocumentMap
name|lockMap
parameter_list|,
name|LockMode
name|lockType
parameter_list|)
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
function_decl|;
comment|/**      * Gets all of the documents from the Collection      *      * @param broker The database broker      * @param docs   A mutable document set which receives the documents      * @return The mutable document set provided in {@param docs}      */
name|DocumentSet
name|getDocuments
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|MutableDocumentSet
name|docs
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
function_decl|;
comment|/**      * Gets all of the documents from the Collection (without locking)      *      * @param broker The database broker      * @param docs   A mutable document set which receives the documents      * @return The mutable document set provided in {@param docs}      * @deprecated This is not an atomic operation and      * so there are no guarantees about which docs will be added to      * the document set. Use {@link #getDocuments(DBBroker, MutableDocumentSet)}      * instead      */
annotation|@
name|Deprecated
name|DocumentSet
name|getDocumentsNoLock
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|MutableDocumentSet
name|docs
parameter_list|)
function_decl|;
comment|/**      * Gets all of the documents from the Collection      *      * @param broker   The database broker      * @param docs     A mutable document set which receives the documents      * @param lockMap  A map that receives the locks we have taken on documents      * @param lockType The type of lock to acquire on the documents      * @return The mutable document set provided in {@param docs}      */
name|DocumentSet
name|getDocuments
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|MutableDocumentSet
name|docs
parameter_list|,
name|LockedDocumentMap
name|lockMap
parameter_list|,
name|LockMode
name|lockType
parameter_list|)
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
function_decl|;
comment|/**      * Get a child resource as identified by name. This method doesn't put      * a lock on the document nor does it recognize locks held by other threads.      * There's no guarantee that the document still exists when accessing it.      *      * @param broker The database broker      * @param name   The name of the document (without collection path)      * @return the document or null if it doesn't exist      */
annotation|@
name|Nullable
annotation|@
name|EnsureUnlocked
name|DocumentImpl
name|getDocument
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Retrieve a child resource after putting a read lock on it.      * With this method, access to the received document object is safe.      *      * @param broker The database broker      * @param name   The name of the document (without collection path)      * @return The locked document or null if it doesn't exist      *      * @deprecated Use {@link #getDocumentWithLock(DBBroker, XmldbURI, LockMode)}      */
annotation|@
name|Deprecated
annotation|@
name|Nullable
name|LockedDocument
name|getDocumentWithLock
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
function_decl|;
comment|/**      * Retrieve a child resource after putting a lock on it.      * With this method, access to the received document object is safe.      *      * @param broker   The database broker      * @param name     The name of the document (without collection path)      * @param lockMode The mode of the lock to acquire      * @return The locked document or null if it doesn't exist      */
annotation|@
name|Nullable
name|LockedDocument
name|getDocumentWithLock
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|LockMode
name|lockMode
parameter_list|)
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
function_decl|;
comment|/**      * Get a child resource as identified by path. This method doesn't put      * a lock on the document nor does it recognize locks held by other threads.      * There's no guarantee that the document still exists when accessing it.      *      * @param broker  The database broker      * @param rawPath The path of the document      * @return the document or null if it doesn't exist      * @deprecated Use {@link #getDocument(DBBroker, XmldbURI)} instead      */
annotation|@
name|Deprecated
annotation|@
name|Nullable
name|DocumentImpl
name|getDocumentNoLock
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|rawPath
parameter_list|)
throws|throws
name|PermissionDeniedException
function_decl|;
comment|/**      * Remove the specified child Collection      *      * @param broker The database broker      * @param name   the name of the child Collection (without path)      */
name|void
name|removeCollection
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|LockException
throws|,
name|PermissionDeniedException
function_decl|;
comment|/**      * Removes a document from this Collection      *      * @param transaction The database transaction      * @param broker      The database broker      * @param doc         The document to remove      */
name|void
name|removeResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|TriggerException
function_decl|;
comment|/**      * Remove an XML document from this Collection      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      */
name|void
name|removeXMLResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|TriggerException
throws|,
name|LockException
throws|,
name|IOException
function_decl|;
comment|/**      * Remove a Binary document from this Collection      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      */
name|void
name|removeBinaryResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
function_decl|;
comment|/**      * Remove a Binary document from this Collection      *      * @param transaction The database transaction      * @param broker      The database broker      * @param doc         the document to remove      */
name|void
name|removeBinaryResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
function_decl|;
comment|/**      * Validates an XML document and prepares it for further storage.      * Launches prepare and postValidate triggers.      * Since the process is dependent from the collection configuration,      * the collection acquires a write lock during the process.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      * @param source      The source of the document to store      * @return An {@link IndexInfo} with a write lock on the document      */
name|IndexInfo
name|validateXMLResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|InputSource
name|source
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|TriggerException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
function_decl|;
comment|/**      * Validates an XML document and prepares it for further storage.      * Launches prepare and postValidate triggers.      * Since the process is dependent from the collection configuration,      * the collection acquires a write lock during the process.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      * @param source      The source of the document to store      * @param reader      The XML reader to use for reading the {@code source}      * @return An {@link IndexInfo} with a write lock on the document      */
name|IndexInfo
name|validateXMLResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|InputSource
name|source
parameter_list|,
name|XMLReader
name|reader
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|TriggerException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
function_decl|;
comment|/**      * Validates an XML document and prepares it for further storage.      * Launches prepare and postValidate triggers.      * Since the process is dependent from the collection configuration,      * the collection acquires a write lock during the process.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      * @param data        The data of the document to store      * @return An {@link IndexInfo} with a write lock on the document      */
name|IndexInfo
name|validateXMLResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|TriggerException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
function_decl|;
comment|/**      * Validates an XML document and prepares it for further storage.      * Launches prepare and postValidate triggers.      * Since the process is dependent from the collection configuration,      * the collection acquires a write lock during the process.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      * @param node        The document node of the document to store      * @return An {@link IndexInfo} with a write lock on the document      */
name|IndexInfo
name|validateXMLResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|TriggerException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|IOException
function_decl|;
comment|/**      * Stores an XML document into the Collection      *<p>      * {@link #validateXMLResource(Txn, DBBroker, XmldbURI, InputSource)} should have been called previously in order      * to acquire a write lock for the document. Launches the finish trigger.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param info        Tracks information between validate and store phases      * @param source      The source of the document to store      */
name|void
name|store
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|IndexInfo
name|info
parameter_list|,
name|InputSource
name|source
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|TriggerException
throws|,
name|SAXException
throws|,
name|LockException
function_decl|;
comment|/**      * Stores an XML document into the Collection      *<p>      * {@link #validateXMLResource(Txn, DBBroker, XmldbURI, InputSource, XMLReader)} should have been called previously      * in order to acquire a write lock for the document. Launches the finish trigger.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param info        Tracks information between validate and store phases      * @param source      The source of the document to store      * @param reader      The XML reader to use for reading the {@code source}      */
name|void
name|store
parameter_list|(
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|IndexInfo
name|info
parameter_list|,
specifier|final
name|InputSource
name|source
parameter_list|,
specifier|final
name|XMLReader
name|reader
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|TriggerException
throws|,
name|SAXException
throws|,
name|LockException
function_decl|;
comment|/**      * Stores an XML document into the Collection      *<p>      * {@link #validateXMLResource(Txn, DBBroker, XmldbURI, String)} should have been called previously in order to      * acquire a write lock for the document. Launches the finish trigger.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param info        Tracks information between validate and store phases      * @param data        The data of the document to store      */
name|void
name|store
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|IndexInfo
name|info
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|TriggerException
throws|,
name|SAXException
throws|,
name|LockException
function_decl|;
comment|/**      * Stores an XML document into the Collection      *<p>      * {@link #validateXMLResource(Txn, DBBroker, XmldbURI, Node)} should have been called previously in order to      * acquire a write lock for the document. Launches the finish trigger.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param info        Tracks information between validate and store phases      * @param node        The document node of the document to store      */
name|void
name|store
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|IndexInfo
name|info
parameter_list|,
name|Node
name|node
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|TriggerException
throws|,
name|SAXException
throws|,
name|LockException
function_decl|;
comment|/**      * Creates a Binary Document object      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      *      * @return The Binary Document object      */
name|BinaryDocument
name|validateBinaryResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|IOException
function_decl|;
comment|/**      * Store a binary document into the Collection (streaming)      *      * Locks the collection while the resource is being saved. Triggers will be called after the collection      * has been unlocked while keeping a lock on the resource to prevent modification.      *      * Callers should not lock the collection before calling this method as this may lead to deadlocks.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      * @param is          The content for the document      * @param mimeType    The Internet Media Type of the document      * @param size        The size in bytes of the document      * @param created     The created timestamp of the document      * @param modified    The modified timestamp of the document      *      * @return The stored Binary Document object      */
name|BinaryDocument
name|addBinaryResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|long
name|size
parameter_list|,
name|Date
name|created
parameter_list|,
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|IOException
function_decl|;
comment|/**      * Store a binary document into the Collection      *      * Locks the collection while the resource is being saved. Triggers will be called after the collection      * has been unlocked while keeping a lock on the resource to prevent modification.      *      * Callers should not lock the collection before calling this method as this may lead to deadlocks.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      * @param data        The content for the document      * @param mimeType    The Internet Media Type of the document      *      * @return The stored Binary Document object      *      * @deprecated Use {@link #addBinaryResource(Txn, DBBroker, XmldbURI, InputStream, String, long)}      */
annotation|@
name|Deprecated
name|BinaryDocument
name|addBinaryResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|String
name|mimeType
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|IOException
function_decl|;
comment|/**      * Store a binary document into the Collection      *      * Locks the collection while the resource is being saved. Triggers will be called after the collection      * has been unlocked while keeping a lock on the resource to prevent modification.      *      * Callers should not lock the collection before calling this method as this may lead to deadlocks.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      * @param data        The content for the document      * @param mimeType    The Internet Media Type of the document      * @param created     The created timestamp of the document      * @param modified    The modified timestamp of the document      *      * @return The stored Binary Document object      *      * @deprecated Use {@link #addBinaryResource(Txn, DBBroker, BinaryDocument, InputStream, String, long, Date, Date)}      */
annotation|@
name|Deprecated
name|BinaryDocument
name|addBinaryResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|Date
name|created
parameter_list|,
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|IOException
function_decl|;
comment|/**      * Store a binary document into the Collection (streaming)      *      * Locks the collection while the resource is being saved. Triggers will be called after the collection      * has been unlocked while keeping a lock on the resource to prevent modification.      *      * Callers should not lock the collection before calling this method as this may lead to deadlocks.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param name        the name (without path) of the document      * @param is          The content for the document      * @param mimeType    The Internet Media Type of the document      * @param size        The size in bytes of the document      *      * @return The stored Binary Document object      */
name|BinaryDocument
name|addBinaryResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|long
name|size
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|IOException
function_decl|;
comment|/**      * Store a binary document into the Collection (streaming)      *      * Locks the collection while the resource is being saved. Triggers will be called after the collection      * has been unlocked while keeping a lock on the resource to prevent modification.      *      * Callers should not lock the collection before calling this method as this may lead to deadlocks.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param blob        the binary resource to store the data into      * @param is          The content for the document      * @param mimeType    The Internet Media Type of the document      * @param size        The size in bytes of the document      * @param created     The created timestamp of the document      * @param modified    The modified timestamp of the document      *      * @return The stored Binary Document object      */
name|BinaryDocument
name|addBinaryResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|BinaryDocument
name|blob
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|long
name|size
parameter_list|,
name|Date
name|created
parameter_list|,
name|Date
name|modified
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|IOException
function_decl|;
comment|/**      * Store a binary document into the Collection (streaming)      *      * Locks the collection while the resource is being saved. Triggers will be called after the collection      * has been unlocked while keeping a lock on the resource to prevent modification.      *      * Callers should not lock the collection before calling this method as this may lead to deadlocks.      *      * @param transaction The database transaction      * @param broker      The database broker      * @param blob        the binary resource to store the data into      * @param is          The content for the document      * @param mimeType    The Internet Media Type of the document      * @param size        The size in bytes of the document      * @param created     The created timestamp of the document      * @param modified    The modified timestamp of the document      * @param preserve    In the case of a copy, cause the copy process to preserve the following attributes of each      *                    source in the copy: modification time, file mode, user ID, and group ID, as allowed by      *                    permissions. Access Control Lists (ACLs) will also be preserved.      *      * @return The stored Binary Document object      */
name|BinaryDocument
name|addBinaryResource
parameter_list|(
name|Txn
name|transaction
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|BinaryDocument
name|blob
parameter_list|,
name|InputStream
name|is
parameter_list|,
name|String
name|mimeType
parameter_list|,
name|long
name|size
parameter_list|,
name|Date
name|created
parameter_list|,
name|Date
name|modified
parameter_list|,
name|DBBroker
operator|.
name|PreserveType
name|preserve
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|IOException
function_decl|;
comment|/**      * Gets an Observable object for this Collection      *      * @return An observable of this Collection, or null if the Collection is not Observable      */
name|Observable
name|getObservable
parameter_list|()
function_decl|;
comment|/**      * Serializes the Collection to a variable byte representation      *      * @param outputStream The output stream to write the collection contents to      */
annotation|@
name|EnsureContainerLocked
argument_list|(
name|mode
operator|=
name|READ_LOCK
argument_list|)
name|void
name|serialize
parameter_list|(
specifier|final
name|VariableByteOutputStream
name|outputStream
parameter_list|)
throws|throws
name|IOException
throws|,
name|LockException
function_decl|;
annotation|@
name|Override
name|void
name|close
parameter_list|()
function_decl|;
comment|//TODO(AR) consider a better separation between Broker and Collection, possibly introduce a CollectionManager object
interface|interface
name|InternalAccess
block|{
name|void
name|addDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|EXistException
function_decl|;
name|int
name|getId
parameter_list|()
function_decl|;
block|}
comment|//TODO(AR) remove specific implementation details from below - i.e. the read functions etc;
specifier|abstract
class|class
name|CollectionEntry
block|{
specifier|private
specifier|final
name|XmldbURI
name|uri
decl_stmt|;
specifier|private
name|Permission
name|permissions
decl_stmt|;
specifier|private
name|long
name|created
init|=
operator|-
literal|1
decl_stmt|;
specifier|protected
name|CollectionEntry
parameter_list|(
specifier|final
name|XmldbURI
name|uri
parameter_list|,
specifier|final
name|Permission
name|permissions
parameter_list|)
block|{
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
name|this
operator|.
name|permissions
operator|=
name|permissions
expr_stmt|;
block|}
specifier|public
specifier|abstract
name|void
name|readMetadata
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|IOException
throws|,
name|LockException
function_decl|;
specifier|public
specifier|abstract
name|void
name|read
parameter_list|(
name|VariableByteInput
name|is
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|public
name|XmldbURI
name|getUri
parameter_list|()
block|{
return|return
name|uri
return|;
block|}
specifier|public
name|long
name|getCreated
parameter_list|()
block|{
return|return
name|created
return|;
block|}
specifier|protected
name|void
name|setCreated
parameter_list|(
specifier|final
name|long
name|created
parameter_list|)
block|{
name|this
operator|.
name|created
operator|=
name|created
expr_stmt|;
block|}
specifier|public
name|Permission
name|getPermissions
parameter_list|()
block|{
return|return
name|permissions
return|;
block|}
specifier|protected
name|void
name|setPermissions
parameter_list|(
specifier|final
name|Permission
name|permissions
parameter_list|)
block|{
name|this
operator|.
name|permissions
operator|=
name|permissions
expr_stmt|;
block|}
block|}
class|class
name|SubCollectionEntry
extends|extends
name|CollectionEntry
block|{
specifier|public
name|SubCollectionEntry
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|uri
argument_list|,
name|PermissionFactory
operator|.
name|getDefaultCollectionPermission
argument_list|(
name|sm
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readMetadata
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|IOException
throws|,
name|LockException
block|{
name|broker
operator|.
name|readCollectionEntry
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
specifier|final
name|VariableByteInput
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|is
operator|.
name|skip
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|collLen
init|=
name|is
operator|.
name|readInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collLen
condition|;
name|i
operator|++
control|)
block|{
name|is
operator|.
name|readUTF
argument_list|()
expr_stmt|;
block|}
name|getPermissions
argument_list|()
operator|.
name|read
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|setCreated
argument_list|(
name|is
operator|.
name|readLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|read
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|)
block|{
name|setPermissions
argument_list|(
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
expr_stmt|;
name|setCreated
argument_list|(
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|DocumentEntry
extends|extends
name|CollectionEntry
block|{
specifier|public
name|DocumentEntry
parameter_list|(
specifier|final
name|DocumentImpl
name|document
parameter_list|)
block|{
name|super
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|document
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|setCreated
argument_list|(
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getCreated
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|readMetadata
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
specifier|final
name|VariableByteInput
name|is
parameter_list|)
block|{
block|}
block|}
block|}
end_interface

end_unit

