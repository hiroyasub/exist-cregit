begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2018 Adam Retter  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SystemExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|DigestType
import|;
end_import

begin_import
import|import
name|se
operator|.
name|softhouse
operator|.
name|jargo
operator|.
name|Argument
import|;
end_import

begin_import
import|import
name|se
operator|.
name|softhouse
operator|.
name|jargo
operator|.
name|ArgumentException
import|;
end_import

begin_import
import|import
name|se
operator|.
name|softhouse
operator|.
name|jargo
operator|.
name|CommandLineParser
import|;
end_import

begin_import
import|import
name|se
operator|.
name|softhouse
operator|.
name|jargo
operator|.
name|ParsedArguments
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|channels
operator|.
name|SeekableByteChannel
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
operator|.
name|READ
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobStoreImpl
operator|.
name|BLOB_STORE_HEADER_LEN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobStoreImpl
operator|.
name|BLOB_STORE_MAGIC_NUMBER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|blob
operator|.
name|BlobStoreImpl
operator|.
name|REFERENCE_COUNT_LEN
import|;
end_import

begin_import
import|import static
name|se
operator|.
name|softhouse
operator|.
name|jargo
operator|.
name|Arguments
operator|.
name|enumArgument
import|;
end_import

begin_import
import|import static
name|se
operator|.
name|softhouse
operator|.
name|jargo
operator|.
name|Arguments
operator|.
name|fileArgument
import|;
end_import

begin_import
import|import static
name|se
operator|.
name|softhouse
operator|.
name|jargo
operator|.
name|Arguments
operator|.
name|helpArgument
import|;
end_import

begin_comment
comment|/**  * Simple tool for dumping the content  * of the Blob Store in CSV format for the  * purposes of debugging or visualisation.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|BlobStoreDumpTool
block|{
specifier|private
specifier|static
specifier|final
name|Argument
argument_list|<
name|?
argument_list|>
name|helpArg
init|=
name|helpArgument
argument_list|(
literal|"-h"
argument_list|,
literal|"--help"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Argument
argument_list|<
name|DigestType
argument_list|>
name|digestArg
init|=
name|enumArgument
argument_list|(
name|DigestType
operator|.
name|class
argument_list|,
literal|"-d"
argument_list|,
literal|"--digest"
argument_list|)
operator|.
name|description
argument_list|(
literal|"The digest type used by the Blob Store"
argument_list|)
operator|.
name|defaultValue
argument_list|(
name|DigestType
operator|.
name|BLAKE_256
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Argument
argument_list|<
name|Path
argument_list|>
name|persistentFileArg
init|=
name|fileArgument
argument_list|()
operator|.
name|description
argument_list|(
literal|"Path to the Blob Store persistent file e.g. blob.dbx"
argument_list|)
operator|.
name|required
argument_list|()
operator|.
name|transform
argument_list|(
name|java
operator|.
name|io
operator|.
name|File
operator|::
name|toPath
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|ParsedArguments
name|arguments
init|=
name|CommandLineParser
operator|.
name|withArguments
argument_list|(
name|digestArg
argument_list|,
name|persistentFileArg
argument_list|)
operator|.
name|andArguments
argument_list|(
name|helpArg
argument_list|)
operator|.
name|parse
argument_list|(
name|args
argument_list|)
decl_stmt|;
specifier|final
name|DigestType
name|digestType
init|=
name|arguments
operator|.
name|get
argument_list|(
name|digestArg
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|persistentFile
init|=
name|arguments
operator|.
name|get
argument_list|(
name|persistentFileArg
argument_list|)
decl_stmt|;
specifier|final
name|PrintStream
name|printStream
init|=
name|System
operator|.
name|out
decl_stmt|;
name|dump
argument_list|(
name|digestType
argument_list|,
name|persistentFile
argument_list|,
name|printStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessageAndUsage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|SystemExitCodes
operator|.
name|INVALID_ARGUMENT_EXIT_CODE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Dumps the content of the Blob Store persistent file.      *      * @param digestType the digest type used by the Blob Store      * @param persistentFile the Blob Store persistent file to dump      * @param printStream the stream to dump the Blob Store to      *      * @throws IOException if an I/O error occurs whilst reading the Blob Store's persistent file.      */
specifier|public
specifier|static
name|void
name|dump
parameter_list|(
specifier|final
name|DigestType
name|digestType
parameter_list|,
specifier|final
name|Path
name|persistentFile
parameter_list|,
specifier|final
name|PrintStream
name|printStream
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|int
name|digestBytesLen
init|=
name|digestType
operator|.
name|getDigestLengthBytes
argument_list|()
decl_stmt|;
specifier|final
name|ByteBuffer
name|buffer
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|digestBytesLen
operator|+
name|REFERENCE_COUNT_LEN
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|SeekableByteChannel
name|channel
init|=
name|Files
operator|.
name|newByteChannel
argument_list|(
name|persistentFile
argument_list|,
name|READ
argument_list|)
init|)
block|{
comment|// dump the file header details
name|dumpFileHeader
argument_list|(
name|printStream
argument_list|,
name|buffer
argument_list|,
name|persistentFile
argument_list|,
name|channel
argument_list|)
expr_stmt|;
name|printStream
operator|.
name|println
argument_list|(
literal|"Digest Type: "
operator|+
name|digestType
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|printStream
operator|.
name|println
argument_list|()
expr_stmt|;
comment|// write a CSV table header
name|printStream
operator|.
name|println
argument_list|(
literal|"blobId,referenceCount"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|byte
index|[]
name|id
init|=
operator|new
name|byte
index|[
name|digestBytesLen
index|]
decl_stmt|;
while|while
condition|(
name|channel
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|get
argument_list|(
name|id
argument_list|)
expr_stmt|;
specifier|final
name|BlobId
name|blobId
init|=
operator|new
name|BlobId
argument_list|(
name|id
argument_list|)
decl_stmt|;
specifier|final
name|int
name|count
init|=
name|buffer
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|printStream
operator|.
name|println
argument_list|(
name|blobId
operator|+
literal|","
operator|+
name|count
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Dump the File Header of the Blob Store      *      * @param printStream the stream to dump the Blob Store to      * @param buffer a buffer to use      * @param persistentFile the Blob Store persistent file to dump      * @param channel the open channel for reading the {@code persistentFile}.      *      * @throws IOException if an I/O error occurs whilst reading the Blob Store's persistent file.      */
specifier|private
specifier|static
name|void
name|dumpFileHeader
parameter_list|(
specifier|final
name|PrintStream
name|printStream
parameter_list|,
specifier|final
name|ByteBuffer
name|buffer
parameter_list|,
specifier|final
name|Path
name|persistentFile
parameter_list|,
specifier|final
name|SeekableByteChannel
name|channel
parameter_list|)
throws|throws
name|IOException
block|{
name|buffer
operator|.
name|clear
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|limit
argument_list|(
name|BLOB_STORE_HEADER_LEN
argument_list|)
expr_stmt|;
name|channel
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|flip
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|validMagic
init|=
name|buffer
operator|.
name|get
argument_list|()
operator|==
name|BLOB_STORE_MAGIC_NUMBER
index|[
literal|0
index|]
operator|&&
name|buffer
operator|.
name|get
argument_list|()
operator|==
name|BLOB_STORE_MAGIC_NUMBER
index|[
literal|1
index|]
operator|&&
name|buffer
operator|.
name|get
argument_list|()
operator|==
name|BLOB_STORE_MAGIC_NUMBER
index|[
literal|2
index|]
operator|&&
name|buffer
operator|.
name|get
argument_list|()
operator|==
name|BLOB_STORE_MAGIC_NUMBER
index|[
literal|3
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|validMagic
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"File was not recognised as a valid eXist-db Blob Store: "
operator|+
name|persistentFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// check the version of the blob store format
specifier|final
name|short
name|storedVersion
init|=
name|buffer
operator|.
name|getShort
argument_list|()
decl_stmt|;
name|printStream
operator|.
name|println
argument_list|(
literal|"*** Blob Store file format version: "
operator|+
name|storedVersion
argument_list|)
expr_stmt|;
comment|// TODO(AR) validate that we can read this format version
block|}
block|}
end_class

end_unit

