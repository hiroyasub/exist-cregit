begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright (C) 2018 Adam Retter  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|blob
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|LogException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|UpdateBlobRefCountLoggable
extends|extends
name|AbstractBlobLoggable
block|{
specifier|private
name|Integer
name|currentCount
decl_stmt|;
specifier|private
name|Integer
name|newCount
decl_stmt|;
specifier|public
name|UpdateBlobRefCountLoggable
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|BlobId
name|blobId
parameter_list|,
specifier|final
name|int
name|currentCount
parameter_list|,
specifier|final
name|int
name|newCount
parameter_list|)
block|{
name|super
argument_list|(
name|LOG_UPDATE_BLOB_REF_COUNT
argument_list|,
name|transactionId
argument_list|,
name|blobId
argument_list|)
expr_stmt|;
name|this
operator|.
name|currentCount
operator|=
name|currentCount
expr_stmt|;
name|this
operator|.
name|newCount
operator|=
name|newCount
expr_stmt|;
block|}
specifier|public
name|UpdateBlobRefCountLoggable
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|long
name|transactionId
parameter_list|)
block|{
name|super
argument_list|(
name|LOG_UPDATE_BLOB_REF_COUNT
argument_list|,
name|broker
argument_list|,
name|transactionId
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|ByteBuffer
name|out
parameter_list|)
block|{
name|super
operator|.
name|write
argument_list|(
name|out
argument_list|)
expr_stmt|;
name|out
operator|.
name|putInt
argument_list|(
name|currentCount
argument_list|)
expr_stmt|;
name|out
operator|.
name|putInt
argument_list|(
name|newCount
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
specifier|final
name|ByteBuffer
name|in
parameter_list|)
block|{
name|super
operator|.
name|read
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|currentCount
operator|=
name|in
operator|.
name|getInt
argument_list|()
expr_stmt|;
name|newCount
operator|=
name|in
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLogSize
parameter_list|()
block|{
return|return
name|super
operator|.
name|getLogSize
argument_list|()
operator|+
literal|4
operator|+
literal|4
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|redo
parameter_list|()
throws|throws
name|LogException
block|{
specifier|final
name|BlobStore
name|blobStore
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getBlobStore
argument_list|()
decl_stmt|;
name|blobStore
operator|.
name|redo
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|undo
parameter_list|()
throws|throws
name|LogException
block|{
specifier|final
name|BlobStore
name|blobStore
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getBlobStore
argument_list|()
decl_stmt|;
name|blobStore
operator|.
name|undo
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/**      * Get the current count      *      * @return the current count      */
annotation|@
name|Nullable
specifier|public
name|Integer
name|getCurrentCount
parameter_list|()
block|{
return|return
name|currentCount
return|;
block|}
comment|/**      * Get the new count      *      * @return the new count      */
annotation|@
name|Nullable
specifier|public
name|Integer
name|getNewCount
parameter_list|()
block|{
return|return
name|newCount
return|;
block|}
block|}
end_class

end_unit

