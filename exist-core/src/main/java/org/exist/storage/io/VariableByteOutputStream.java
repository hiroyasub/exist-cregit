begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2016 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ByteArray
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastByteBuffer
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * A byte array output stream using VBE (Variable Byte Encoding).  *  * Note that the VBE scheme used by this class  * does not offer any advantage for negative numbers, in fact  * it requires significantly more storage for those; see the javadoc  * on the appropriate encoding method for details.  *  * If support for negative numbers is desired then, the reader  * should look to zig-zag encoding as used in the varint's of  * Google's Protocol Buffers https://developers.google.com/protocol-buffers/docs/encoding#signed-integers  * or Hadoop's VarInt encoding, see org.apache.hadoop.io.file.tfile.Utils#writeVInt(java.io.DataOutput, int).  *  * VBE is never an alternative to having advance knowledge of number  * ranges and using fixed size byte arrays to represent them.  *  * Rather, for example, it is useful when you have an int that could be  * in any range between 0 and {@link Integer#MAX_VALUE}, but is likely  * less than 2,097,151, in that case you would save at least 1 byte for  * each int value that is written to the output stream that is  * less than 2,097,151.  *  * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|VariableByteOutputStream
extends|extends
name|OutputStream
block|{
specifier|private
specifier|static
specifier|final
name|int
name|MAX_BUFFER_SIZE
init|=
literal|65536
decl_stmt|;
specifier|private
name|FastByteBuffer
name|buf
decl_stmt|;
specifier|private
specifier|final
name|byte
index|[]
name|temp
init|=
operator|new
name|byte
index|[
literal|5
index|]
decl_stmt|;
specifier|public
name|VariableByteOutputStream
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
name|buf
operator|=
operator|new
name|FastByteBuffer
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VariableByteOutputStream
parameter_list|(
specifier|final
name|int
name|size
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|buf
operator|=
operator|new
name|FastByteBuffer
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
if|if
condition|(
name|buf
operator|.
name|size
argument_list|()
operator|>
name|MAX_BUFFER_SIZE
condition|)
block|{
name|buf
operator|=
operator|new
name|FastByteBuffer
argument_list|(
literal|9
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|buf
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|buf
operator|.
name|length
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
comment|//Nothing to do
block|}
specifier|public
name|int
name|position
parameter_list|()
block|{
return|return
name|buf
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|byte
index|[]
name|toByteArray
parameter_list|()
block|{
specifier|final
name|byte
index|[]
name|b
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|copyTo
argument_list|(
name|b
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|b
return|;
block|}
specifier|public
name|ByteArray
name|data
parameter_list|()
block|{
return|return
name|buf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|b
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|buf
operator|.
name|append
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|ByteArray
name|b
parameter_list|)
block|{
name|b
operator|.
name|copyTo
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeByte
parameter_list|(
specifier|final
name|byte
name|b
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a VBE short to the output stream      *      * The encoding scheme requires the following storage      * for numbers between (inclusive):      *      *  {@link Short#MIN_VALUE} and -1, 5 bytes      *  0 and 127, 1 byte      *  128 and 16383, 2 bytes      *  16384 and {@link Short#MAX_VALUE}, 3 bytes      *      *  @param s the short to write      */
specifier|public
name|void
name|writeShort
parameter_list|(
name|int
name|s
parameter_list|)
block|{
while|while
condition|(
operator|(
name|s
operator|&
operator|~
literal|0177
operator|)
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|s
operator|&
literal|0177
operator|)
operator||
literal|0200
operator|)
argument_list|)
expr_stmt|;
name|s
operator|>>>=
literal|7
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
name|s
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a VBE int to the output stream      *      * The encoding scheme requires the following storage      * for numbers between (inclusive):      *      *  {@link Integer#MIN_VALUE} and -1, 5 bytes      *  0 and 127, 1 byte      *  128 and 16383, 2 bytes      *  16384 and 2097151, 3 bytes      *  2097152 and 268435455, is 4 bytes      *  268435456 and {@link Integer#MAX_VALUE}, 5 bytes      *      *  @param i the integer to write      */
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|i
operator|&
operator|~
literal|0177
operator|)
operator|!=
literal|0
condition|)
block|{
name|temp
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|&
literal|0177
operator|)
operator||
literal|0200
operator|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|temp
index|[
name|count
operator|++
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|temp
argument_list|,
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeFixedInt
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
name|temp
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|temp
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|temp
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|temp
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|>>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|temp
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeFixedInt
parameter_list|(
specifier|final
name|int
name|position
parameter_list|,
specifier|final
name|int
name|i
parameter_list|)
block|{
name|buf
operator|.
name|set
argument_list|(
name|position
argument_list|,
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|set
argument_list|(
name|position
operator|+
literal|1
argument_list|,
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|set
argument_list|(
name|position
operator|+
literal|2
argument_list|,
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|set
argument_list|(
name|position
operator|+
literal|3
argument_list|,
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|>>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a VBE int to the output stream      *      * The encoding scheme requires the following storage      * for numbers between (inclusive):      *      *  {@link Integer#MIN_VALUE} and -1, 5 bytes      *  0 and 127, 1 byte      *  128 and 16383, 2 bytes      *  16384 and 2097151, 3 bytes      *  2097152 and 268435455, is 4 bytes      *  268435456 and {@link Integer#MAX_VALUE}, 5 bytes      *      *  @param position the position in the output buffer to write the integer      *  @param i the integer to write      */
specifier|public
name|void
name|writeInt
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|i
parameter_list|)
block|{
while|while
condition|(
operator|(
name|i
operator|&
operator|~
literal|0177
operator|)
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|set
argument_list|(
name|position
operator|++
argument_list|,
operator|(
name|byte
operator|)
operator|(
operator|(
name|i
operator|&
literal|0177
operator|)
operator||
literal|0200
operator|)
argument_list|)
expr_stmt|;
name|i
operator|>>>=
literal|7
expr_stmt|;
block|}
name|buf
operator|.
name|set
argument_list|(
name|position
argument_list|,
operator|(
name|byte
operator|)
name|i
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes a VBE long to the output stream      *      * The encoding scheme requires the following storage      * for numbers between (inclusive):      *      *  {@link Long#MIN_VALUE} and -1, 10 bytes      *  0 and 127, 1 byte      *  128 and 16383, 2 bytes      *  16384 and 2097151, 3 bytes      *  2097152 and 268435455, is 4 bytes      *  268435456 and 34359738367, 5 bytes      *  34359738368 and 4398046511103, 6 bytes      *  4398046511104 and 562949953421311, 7 bytes      *  562949953421312 and 72057594037927935, 8 bytes      *  72057594037927936 and 9223372036854775807, 9 bytes      *  9223372036854775808 and {@link Long#MAX_VALUE}, 10 bytes      *      * @param l the long to write      */
specifier|public
name|void
name|writeLong
parameter_list|(
name|long
name|l
parameter_list|)
block|{
while|while
condition|(
operator|(
name|l
operator|&
operator|~
literal|0177
operator|)
operator|!=
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|&
literal|0177
operator|)
operator||
literal|0200
operator|)
argument_list|)
expr_stmt|;
name|l
operator|>>>=
literal|7
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
name|l
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeFixedLong
parameter_list|(
specifier|final
name|long
name|l
parameter_list|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|56
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|48
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|40
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|32
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|l
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|writeUTF
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|byte
index|[]
name|data
init|=
name|s
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|writeInt
argument_list|(
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

