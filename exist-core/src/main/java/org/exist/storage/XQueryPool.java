begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|NumberFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayDeque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Deque
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|TimeUnit
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Cache
import|;
end_import

begin_import
import|import
name|com
operator|.
name|github
operator|.
name|benmanes
operator|.
name|caffeine
operator|.
name|cache
operator|.
name|Caffeine
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Holder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Global pool for compiled XQuery expressions.  *  * Expressions are stored and retrieved from the pool by comparing the  * {@link org.exist.source.Source} objects from which they were created.  *  * For each XQuery, a maximum of {@link #DEFAULT_MAX_QUERY_STACK_SIZE} compiled  * expressions are kept in the pool.  * An XQuery expression will be removed from the pool if it has not been  * used for a pre-defined timeout (default is {@link #DEFAULT_TIMEOUT}); these  * settings can be configured in conf.xml.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
annotation|@
name|ThreadSafe
specifier|public
class|class
name|XQueryPool
implements|implements
name|BrokerPoolService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|XQueryPool
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_ELEMENT_NAME
init|=
literal|"query-pool"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|MAX_STACK_SIZE_ATTRIBUTE
init|=
literal|"max-stack-size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|POOL_SIZE_ATTTRIBUTE
init|=
literal|"size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|TIMEOUT_ATTRIBUTE
init|=
literal|"timeout"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_MAX_STACK_SIZE
init|=
literal|"db-connection.query-pool.max-stack-size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_POOL_SIZE
init|=
literal|"db-connection.query-pool.size"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_TIMEOUT
init|=
literal|"db-connection.query-pool.timeout"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_POOL_SIZE
init|=
literal|128
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DEFAULT_MAX_QUERY_STACK_SIZE
init|=
literal|64
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|DEFAULT_TIMEOUT
init|=
literal|120_000L
decl_stmt|;
comment|// ms (i.e. 2 mins)
specifier|private
name|int
name|maxPoolSize
init|=
name|DEFAULT_MAX_POOL_SIZE
decl_stmt|;
specifier|private
name|int
name|maxQueryStackSize
init|=
name|DEFAULT_MAX_QUERY_STACK_SIZE
decl_stmt|;
specifier|private
name|long
name|timeout
init|=
name|DEFAULT_TIMEOUT
decl_stmt|;
comment|/**      * Source -> Deque of compiled Queries      */
specifier|private
name|Cache
argument_list|<
name|Source
argument_list|,
name|Deque
argument_list|<
name|CompiledXQuery
argument_list|>
argument_list|>
name|cache
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
block|{
specifier|final
name|Integer
name|maxStSz
init|=
operator|(
name|Integer
operator|)
name|configuration
operator|.
name|getProperty
argument_list|(
name|PROPERTY_MAX_STACK_SIZE
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|maxPoolSz
init|=
operator|(
name|Integer
operator|)
name|configuration
operator|.
name|getProperty
argument_list|(
name|PROPERTY_POOL_SIZE
argument_list|)
decl_stmt|;
specifier|final
name|Long
name|t
init|=
operator|(
name|Long
operator|)
name|configuration
operator|.
name|getProperty
argument_list|(
name|PROPERTY_TIMEOUT
argument_list|)
decl_stmt|;
specifier|final
name|NumberFormat
name|nf
init|=
name|NumberFormat
operator|.
name|getNumberInstance
argument_list|()
decl_stmt|;
if|if
condition|(
name|maxPoolSz
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|maxPoolSize
operator|=
name|maxPoolSz
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|maxPoolSize
operator|=
name|DEFAULT_MAX_POOL_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|maxStSz
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|maxQueryStackSize
operator|=
name|maxStSz
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|maxQueryStackSize
operator|=
name|DEFAULT_MAX_QUERY_STACK_SIZE
expr_stmt|;
block|}
if|if
condition|(
name|t
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|timeout
operator|=
name|t
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|timeout
operator|=
name|DEFAULT_TIMEOUT
expr_stmt|;
block|}
name|this
operator|.
name|cache
operator|=
name|Caffeine
operator|.
name|newBuilder
argument_list|()
operator|.
name|maximumSize
argument_list|(
name|maxPoolSize
argument_list|)
operator|.
name|expireAfterAccess
argument_list|(
name|timeout
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"QueryPool: "
operator|+
literal|"size = "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|maxPoolSize
argument_list|)
operator|+
literal|"; "
operator|+
literal|"maxQueryStackSize = "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|maxQueryStackSize
argument_list|)
operator|+
literal|"; "
operator|+
literal|"timeout = "
operator|+
name|nf
operator|.
name|format
argument_list|(
name|timeout
argument_list|)
operator|+
literal|"; "
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns a compiled XQuery to the XQuery pool.      *      * @param source The source of the compiled XQuery.      * @param compiledXQuery The compiled XQuery to add to the XQuery pool.      */
specifier|public
name|void
name|returnCompiledXQuery
parameter_list|(
specifier|final
name|Source
name|source
parameter_list|,
specifier|final
name|CompiledXQuery
name|compiledXQuery
parameter_list|)
block|{
if|if
condition|(
name|compiledXQuery
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|compute
argument_list|(
name|source
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
specifier|final
name|Deque
argument_list|<
name|CompiledXQuery
argument_list|>
name|deque
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|deque
operator|=
name|value
expr_stmt|;
block|}
else|else
block|{
name|deque
operator|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|(
name|maxQueryStackSize
argument_list|)
expr_stmt|;
block|}
name|deque
operator|.
name|offerFirst
argument_list|(
name|compiledXQuery
argument_list|)
expr_stmt|;
return|return
name|deque
return|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Borrows a compiled XQuery from the XQuery pool.      *      * @param broker A database broker.      * @param source The source identifying the XQuery to borrow.      *      * @return The compiled XQuery identified by the source, or null if      *     there is no valid compiled representation in the XQuery pool.      *      * @throws PermissionDeniedException if the caller does not have execute      *     permission for the compiled XQuery.      */
specifier|public
name|CompiledXQuery
name|borrowCompiledXQuery
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Source
name|source
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|broker
operator|==
literal|null
operator|||
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// this will be set to non-null if we can borrow a query... allows us to escape the lamba, see https://github.com/ben-manes/caffeine/issues/192#issuecomment-337365618
specifier|final
name|Holder
argument_list|<
name|CompiledXQuery
argument_list|>
name|borrowedCompiledQuery
init|=
operator|new
name|Holder
argument_list|<>
argument_list|()
decl_stmt|;
comment|// get (compute by checking validity) the stack of compiled XQuerys for the source
specifier|final
name|Deque
argument_list|<
name|CompiledXQuery
argument_list|>
name|deque
init|=
name|cache
operator|.
name|asMap
argument_list|()
operator|.
name|computeIfPresent
argument_list|(
name|source
argument_list|,
parameter_list|(
name|key
parameter_list|,
name|value
parameter_list|)
lambda|->
block|{
specifier|final
name|CompiledXQuery
name|firstCompiledXQuery
init|=
name|value
operator|.
name|pollFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|firstCompiledXQuery
operator|==
literal|null
condition|)
block|{
comment|// deque is empty, returning null will remove the entry from the cache
return|return
literal|null
return|;
block|}
if|if
condition|(
operator|!
name|isCompiledQueryValid
argument_list|(
name|broker
argument_list|,
name|source
argument_list|,
name|firstCompiledXQuery
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|source
operator|.
name|getKey
argument_list|()
operator|+
literal|" is invalid, removing from XQuery Pool..."
argument_list|)
expr_stmt|;
block|}
comment|// query is invalid, returning null will remove the entry from the cache
return|return
literal|null
return|;
block|}
comment|// escape the result from the lambda
name|borrowedCompiledQuery
operator|.
name|value
operator|=
name|firstCompiledXQuery
expr_stmt|;
comment|// query is ok, preserve the tail of the deque
return|return
name|value
return|;
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|deque
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|//check execution permission
name|source
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getCurrentSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
return|return
name|borrowedCompiledQuery
operator|.
name|value
return|;
block|}
comment|/**      * Determines if a compiled XQuery is still valid.      *      * @param broker the database broker      * @param source the source of the query      * @param compiledXQuery the compiled query      *      * @return true if the compiled query is still valid, false otherwise.      */
specifier|private
specifier|static
name|boolean
name|isCompiledQueryValid
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Source
name|source
parameter_list|,
specifier|final
name|CompiledXQuery
name|compiledXQuery
parameter_list|)
block|{
specifier|final
name|Source
name|cachedSource
init|=
name|compiledXQuery
operator|.
name|getSource
argument_list|()
decl_stmt|;
name|Source
operator|.
name|Validity
name|validity
init|=
name|cachedSource
operator|.
name|isValid
argument_list|(
name|broker
argument_list|)
decl_stmt|;
if|if
condition|(
name|validity
operator|==
name|Source
operator|.
name|Validity
operator|.
name|UNKNOWN
condition|)
block|{
name|validity
operator|=
name|cachedSource
operator|.
name|isValid
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|validity
operator|==
name|Source
operator|.
name|Validity
operator|.
name|INVALID
operator|||
name|validity
operator|==
name|Source
operator|.
name|Validity
operator|.
name|UNKNOWN
condition|)
block|{
return|return
literal|false
return|;
comment|// returning null will remove the entry from the cache
block|}
comment|// the compiled query is no longer valid if one of the imported
comment|// modules may have changed
if|if
condition|(
operator|!
name|compiledXQuery
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Removes all entries from the XQuery Pool.      */
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|cache
operator|.
name|invalidateAll
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

