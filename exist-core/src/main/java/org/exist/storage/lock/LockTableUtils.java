begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2017 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockTable
operator|.
name|LockCountTraces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockTable
operator|.
name|LockModeOwner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLOutputFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamWriter
import|;
end_import

begin_comment
comment|/**  * Utilities for working with the Lock Table  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|LockTableUtils
block|{
specifier|private
specifier|static
specifier|final
name|String
name|EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|String
name|stateToString
parameter_list|(
specifier|final
name|LockTable
name|lockTable
parameter_list|,
specifier|final
name|boolean
name|includeStack
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|attempting
init|=
name|lockTable
operator|.
name|getAttempting
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|acquired
init|=
name|lockTable
operator|.
name|getAcquired
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
literal|"Acquired Locks"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
literal|"------------------------------------"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|acquire
range|:
name|acquired
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|acquire
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
name|type
range|:
name|acquire
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
name|lockModeOwners
range|:
name|type
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|lockModeOwners
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|boolean
name|firstOwner
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
name|ownerHoldCount
range|:
name|lockModeOwners
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|firstOwner
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|firstOwner
operator|=
literal|false
expr_stmt|;
block|}
specifier|final
name|LockCountTraces
name|holdCount
init|=
name|ownerHoldCount
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|ownerHoldCount
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|" (count="
argument_list|)
operator|.
name|append
argument_list|(
name|holdCount
operator|.
name|count
argument_list|)
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|holdCount
operator|.
name|traces
operator|!=
literal|null
operator|&&
name|includeStack
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|holdCount
operator|.
name|traces
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StackTraceElement
index|[]
name|trace
init|=
name|holdCount
operator|.
name|traces
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t\t\tTrace "
argument_list|)
operator|.
name|append
argument_list|(
name|i
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|trace
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\t\t\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|trace
index|[
name|j
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"Attempting Locks"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
literal|"------------------------------------"
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|List
argument_list|<
name|LockTable
operator|.
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|attempt
range|:
name|attempting
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|attempt
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|List
argument_list|<
name|LockTable
operator|.
name|LockModeOwner
argument_list|>
argument_list|>
name|type
range|:
name|attempt
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|type
operator|.
name|getKey
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|LockTable
operator|.
name|LockModeOwner
name|lockModeOwner
range|:
name|type
operator|.
name|getValue
argument_list|()
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|lockModeOwner
operator|.
name|getLockMode
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
operator|.
name|append
argument_list|(
name|lockModeOwner
operator|.
name|getOwnerThread
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockModeOwner
operator|.
name|trace
operator|!=
literal|null
operator|&&
name|includeStack
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
operator|.
name|append
argument_list|(
literal|"\t\t\tTrace "
argument_list|)
operator|.
name|append
argument_list|(
literal|": "
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lockModeOwner
operator|.
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"\t\t\t\t"
argument_list|)
operator|.
name|append
argument_list|(
name|lockModeOwner
operator|.
name|trace
index|[
name|i
index|]
argument_list|)
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|stateToXml
parameter_list|(
specifier|final
name|LockTable
name|lockTable
parameter_list|,
specifier|final
name|boolean
name|includeStack
parameter_list|,
specifier|final
name|Writer
name|writer
parameter_list|)
throws|throws
name|XMLStreamException
block|{
specifier|final
name|GregorianCalendar
name|cal
init|=
operator|new
name|GregorianCalendar
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|attempting
init|=
name|lockTable
operator|.
name|getAttempting
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|acquired
init|=
name|lockTable
operator|.
name|getAcquired
argument_list|()
decl_stmt|;
specifier|final
name|XMLOutputFactory
name|outputFactory
init|=
name|XMLOutputFactory
operator|.
name|newFactory
argument_list|()
decl_stmt|;
specifier|final
name|XMLStreamWriter
name|xmlWriter
init|=
name|outputFactory
operator|.
name|createXMLStreamWriter
argument_list|(
name|writer
argument_list|)
decl_stmt|;
name|xmlWriter
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"lock-table"
argument_list|)
expr_stmt|;
specifier|final
name|XMLGregorianCalendar
name|xmlCal
init|=
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|cal
argument_list|)
decl_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"timestamp"
argument_list|,
name|xmlCal
operator|.
name|toXMLFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// acquired locks
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"acquired"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|acquire
range|:
name|acquired
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"lock"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|acquire
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
name|type
range|:
name|acquire
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|type
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
name|lockModeOwners
range|:
name|type
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"mode"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|lockModeOwners
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
name|ownerHoldCount
range|:
name|lockModeOwners
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"thread"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|ownerHoldCount
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|LockCountTraces
name|holdCount
init|=
name|ownerHoldCount
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"hold-count"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|holdCount
operator|.
name|count
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|holdCount
operator|.
name|traces
operator|!=
literal|null
operator|&&
name|includeStack
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|holdCount
operator|.
name|traces
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"stack-trace"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"index"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|StackTraceElement
index|[]
name|trace
init|=
name|holdCount
operator|.
name|traces
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|trace
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
specifier|final
name|StackTraceElement
name|call
init|=
name|trace
index|[
name|j
index|]
decl_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"index"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"class"
argument_list|,
name|call
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"method"
argument_list|,
name|call
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"file"
argument_list|,
name|call
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"line"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|call
operator|.
name|getLineNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeCharacters
argument_list|(
name|call
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
comment|// attempting locks
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"attempting"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|List
argument_list|<
name|LockTable
operator|.
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|attempt
range|:
name|attempting
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"lock"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|attempt
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|Lock
operator|.
name|LockType
argument_list|,
name|List
argument_list|<
name|LockTable
operator|.
name|LockModeOwner
argument_list|>
argument_list|>
name|type
range|:
name|attempt
operator|.
name|getValue
argument_list|()
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|type
operator|.
name|getKey
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|LockTable
operator|.
name|LockModeOwner
name|lockModeOwner
range|:
name|type
operator|.
name|getValue
argument_list|()
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"mode"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|lockModeOwner
operator|.
name|getLockMode
argument_list|()
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"thread"
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"id"
argument_list|,
name|lockModeOwner
operator|.
name|getOwnerThread
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockModeOwner
operator|.
name|trace
operator|!=
literal|null
operator|&&
name|includeStack
condition|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"stack-trace"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lockModeOwner
operator|.
name|trace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|xmlWriter
operator|.
name|writeStartElement
argument_list|(
literal|"call"
argument_list|)
expr_stmt|;
specifier|final
name|StackTraceElement
name|call
init|=
name|lockModeOwner
operator|.
name|trace
index|[
name|i
index|]
decl_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"index"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"class"
argument_list|,
name|call
operator|.
name|getClassName
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"method"
argument_list|,
name|call
operator|.
name|getMethodName
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"file"
argument_list|,
name|call
operator|.
name|getFileName
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeAttribute
argument_list|(
literal|"line"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|call
operator|.
name|getLineNumber
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeCharacters
argument_list|(
name|call
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
block|}
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|xmlWriter
operator|.
name|writeEndElement
argument_list|()
expr_stmt|;
name|xmlWriter
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

