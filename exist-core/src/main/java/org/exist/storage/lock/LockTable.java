begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2017 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|RingBuffer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockTable
operator|.
name|LockEventType
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The Lock Table holds the details of  * threads awaiting to acquire a Lock  * and threads that have acquired a lock.  *  * It is arranged by the id of the lock  * which is typically an indicator of the  * lock subject.  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|LockTable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PROP_DISABLE
init|=
literal|"exist.locktable.disable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_SANITY_CHECK
init|=
literal|"exist.locktable.sanity.check"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_TRACE_STACK_DEPTH
init|=
literal|"exist.locktable.trace.stack.depth"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LockTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THIS_CLASS_NAME
init|=
name|LockTable
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/**      * Set to false to disable all events      */
specifier|private
specifier|volatile
name|boolean
name|disableEvents
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PROP_DISABLE
argument_list|)
decl_stmt|;
comment|/**      * Set to true to enable sanity checking of lock leases      */
specifier|private
specifier|volatile
name|boolean
name|sanityCheck
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PROP_SANITY_CHECK
argument_list|)
decl_stmt|;
comment|/**      * Whether we should try and trace the stack for the lock event, -1 means all stack,      * 0 means no stack, n means n stack frames, 5 is a reasonable value      */
specifier|private
specifier|volatile
name|int
name|traceStackDepth
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|Integer
operator|.
name|getInteger
argument_list|(
name|PROP_TRACE_STACK_DEPTH
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Lock event listeners      */
specifier|private
specifier|final
name|List
argument_list|<
name|LockEventListener
argument_list|>
name|listeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
comment|// thread local object pools
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|RingBuffer
argument_list|<
name|char
index|[]
argument_list|>
argument_list|>
name|THREADLOCAL_CHAR_ARRAY_POOL
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
operator|new
name|RingBuffer
argument_list|<>
argument_list|(
literal|24
argument_list|,
parameter_list|()
lambda|->
operator|new
name|char
index|[
literal|42
index|]
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|RingBuffer
argument_list|<
name|EntryKey
argument_list|>
argument_list|>
name|THREADLOCAL_ENTRY_KEY_POOL
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
operator|new
name|RingBuffer
argument_list|<>
argument_list|(
literal|24
argument_list|,
name|EntryKey
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ThreadLocal
argument_list|<
name|RingBuffer
argument_list|<
name|Entry
argument_list|>
argument_list|>
name|THREADLOCAL_ENTRY_POOL
init|=
name|ThreadLocal
operator|.
name|withInitial
argument_list|(
parameter_list|()
lambda|->
operator|new
name|RingBuffer
argument_list|<>
argument_list|(
literal|12
argument_list|,
name|Entry
operator|::
operator|new
argument_list|)
argument_list|)
decl_stmt|;
comment|/**      * Table of threads attempting to acquire a lock      */
specifier|private
specifier|final
name|Map
argument_list|<
name|EntryKey
argument_list|,
name|Entry
argument_list|>
name|attempting
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Table of threads which have acquired lock(s)      */
specifier|private
specifier|final
name|Map
argument_list|<
name|EntryKey
argument_list|,
name|Entry
argument_list|>
name|acquired
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * Holds a count of READ and WRITE locks by {@link Entry#id}      * Only used for debugging,see {@link #sanityCheckLockLifecycles(LockEventType, long, String, LockType,      *     LockMode, String, int, long, StackTraceElement[])}.      */
annotation|@
name|GuardedBy
argument_list|(
literal|"this"
argument_list|)
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
argument_list|>
name|lockCounts
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|LockTable
parameter_list|()
block|{
comment|// add a log listener if trace level logging is enabled
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|registerListener
argument_list|(
operator|new
name|LockEventLogListener
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Shuts down the lock table processor.      *      * After calling this, no further lock      * events will be reported.      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
block|}
comment|/**      * Set the depth at which we should trace lock events through the stack      *      * @param traceStackDepth -1 traces the whole stack, 0 means no stack traces, n means n stack frames      */
specifier|public
name|void
name|setTraceStackDepth
parameter_list|(
specifier|final
name|int
name|traceStackDepth
parameter_list|)
block|{
name|this
operator|.
name|traceStackDepth
operator|=
name|traceStackDepth
expr_stmt|;
block|}
specifier|public
name|void
name|attempt
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Attempt
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attemptFailed
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|AttemptFailed
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|acquired
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Acquired
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|released
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Released
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|event
parameter_list|(
specifier|final
name|LockEventType
name|lockEventType
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|)
block|{
if|if
condition|(
name|disableEvents
condition|)
block|{
return|return;
block|}
specifier|final
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
specifier|final
name|String
name|threadName
init|=
name|currentThread
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|final
name|long
name|threadId
init|=
name|currentThread
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
name|ignoreEvent
argument_list|(
name|threadName
argument_list|,
name|id
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
decl_stmt|;
if|if
condition|(
name|traceStackDepth
operator|==
literal|0
condition|)
block|{
name|stackTrace
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|stackTrace
operator|=
name|getStackTrace
argument_list|(
name|currentThread
argument_list|)
expr_stmt|;
block|}
comment|/**          * Very useful for debugging Lock life cycles          */
if|if
condition|(
name|sanityCheck
condition|)
block|{
name|sanityCheckLockLifecycles
argument_list|(
name|lockEventType
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|lockMode
argument_list|,
name|threadName
argument_list|,
literal|1
argument_list|,
name|timestamp
argument_list|,
name|stackTrace
argument_list|)
expr_stmt|;
block|}
switch|switch
condition|(
name|lockEventType
condition|)
block|{
case|case
name|Attempt
case|:
name|Entry
name|entry
init|=
name|THREADLOCAL_ENTRY_POOL
operator|.
name|get
argument_list|()
operator|.
name|takeEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
name|entry
operator|=
operator|new
name|Entry
argument_list|()
expr_stmt|;
block|}
name|entry
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|entry
operator|.
name|lockType
operator|=
name|lockType
expr_stmt|;
name|entry
operator|.
name|lockMode
operator|=
name|lockMode
expr_stmt|;
name|entry
operator|.
name|owner
operator|=
name|threadName
expr_stmt|;
if|if
condition|(
name|stackTrace
operator|!=
literal|null
condition|)
block|{
name|entry
operator|.
name|stackTraces
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|entry
operator|.
name|stackTraces
operator|.
name|add
argument_list|(
name|stackTrace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|stackTraces
operator|=
literal|null
expr_stmt|;
block|}
comment|// write count last to ensure reader-thread visibility of above fields
name|entry
operator|.
name|count
operator|=
literal|1
expr_stmt|;
comment|// this key will be released in either `AttemptFailed`, `Acquired` (if merging), or `Released`
specifier|final
name|EntryKey
name|entryKey
init|=
name|key
argument_list|(
name|threadId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|lockMode
argument_list|)
decl_stmt|;
name|entry
operator|.
name|entryKey
operator|=
name|entryKey
expr_stmt|;
name|notifyListeners
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|entry
argument_list|)
expr_stmt|;
name|attempting
operator|.
name|put
argument_list|(
name|entryKey
argument_list|,
name|entry
argument_list|)
expr_stmt|;
break|break;
case|case
name|AttemptFailed
case|:
specifier|final
name|EntryKey
name|attemptFailedEntryKey
init|=
name|key
argument_list|(
name|threadId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|lockMode
argument_list|)
decl_stmt|;
specifier|final
name|Entry
name|attemptFailedEntry
init|=
name|attempting
operator|.
name|remove
argument_list|(
name|attemptFailedEntryKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptFailedEntry
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No entry found when trying to remove failed `attempt` for: id={}"
argument_list|,
name|id
argument_list|)
expr_stmt|;
comment|// release the key that we used for the lookup
name|releaseEntryKey
argument_list|(
name|attemptFailedEntryKey
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// release the key that we used for the lookup
name|releaseEntryKey
argument_list|(
name|attemptFailedEntryKey
argument_list|)
expr_stmt|;
name|notifyListeners
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|attemptFailedEntry
argument_list|)
expr_stmt|;
comment|// release the failed attempt entry
name|releaseEntry
argument_list|(
name|attemptFailedEntry
argument_list|)
expr_stmt|;
break|break;
case|case
name|Acquired
case|:
specifier|final
name|EntryKey
name|attemptEntryKey
init|=
name|key
argument_list|(
name|threadId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|lockMode
argument_list|)
decl_stmt|;
specifier|final
name|Entry
name|attemptEntry
init|=
name|attempting
operator|.
name|remove
argument_list|(
name|attemptEntryKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptEntry
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No entry found when trying to remove `attempt` to promote to `acquired` for: id={}, EntryKey.hashCode={}"
argument_list|,
name|id
argument_list|,
name|attemptEntryKey
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// release the key that we used for the lookup
name|releaseEntryKey
argument_list|(
name|attemptEntryKey
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// release the key that we used for the lookup
name|releaseEntryKey
argument_list|(
name|attemptEntryKey
argument_list|)
expr_stmt|;
comment|// we now either add or merge the `attemptEntry` with the `acquired` table
name|Entry
name|acquiredEntry
init|=
name|acquired
operator|.
name|get
argument_list|(
name|attemptEntry
operator|.
name|entryKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|acquiredEntry
operator|==
literal|null
condition|)
block|{
name|acquired
operator|.
name|put
argument_list|(
name|attemptEntry
operator|.
name|entryKey
argument_list|,
name|attemptEntry
argument_list|)
expr_stmt|;
name|acquiredEntry
operator|=
name|attemptEntry
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|attemptEntry
operator|.
name|stackTraces
operator|!=
literal|null
condition|)
block|{
name|acquiredEntry
operator|.
name|stackTraces
operator|.
name|addAll
argument_list|(
name|attemptEntry
operator|.
name|stackTraces
argument_list|)
expr_stmt|;
block|}
name|acquiredEntry
operator|.
name|count
operator|+=
name|attemptEntry
operator|.
name|count
expr_stmt|;
comment|// release the attempt entry (as we merged, rather than added)
name|releaseEntry
argument_list|(
name|attemptEntry
argument_list|)
expr_stmt|;
block|}
name|notifyListeners
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|acquiredEntry
argument_list|)
expr_stmt|;
break|break;
case|case
name|Released
case|:
specifier|final
name|EntryKey
name|acquiredEntryKey
init|=
name|key
argument_list|(
name|threadId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|lockMode
argument_list|)
decl_stmt|;
specifier|final
name|Entry
name|releasedEntry
init|=
name|acquired
operator|.
name|get
argument_list|(
name|acquiredEntryKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|releasedEntry
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No entry found when trying to `release` for: id={}, EntryKey.hashCode={}"
argument_list|,
name|id
argument_list|,
name|acquiredEntryKey
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// release the key that we used for the lookup
name|releaseEntryKey
argument_list|(
name|acquiredEntryKey
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// release the key that we used for the lookup
name|releaseEntryKey
argument_list|(
name|acquiredEntryKey
argument_list|)
expr_stmt|;
specifier|final
name|int
name|localCount
init|=
name|releasedEntry
operator|.
name|count
decl_stmt|;
comment|// decrement
if|if
condition|(
name|releasedEntry
operator|.
name|stackTraces
operator|!=
literal|null
condition|)
block|{
name|releasedEntry
operator|.
name|stackTraces
operator|.
name|remove
argument_list|(
name|releasedEntry
operator|.
name|stackTraces
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|releasedEntry
operator|.
name|count
operator|=
name|localCount
operator|-
literal|1
expr_stmt|;
name|notifyListeners
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|releasedEntry
argument_list|)
expr_stmt|;
if|if
condition|(
name|releasedEntry
operator|.
name|count
operator|==
literal|0
condition|)
block|{
comment|// remove the entry
if|if
condition|(
name|acquired
operator|.
name|remove
argument_list|(
name|releasedEntry
operator|.
name|entryKey
argument_list|)
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to remove entry for `release`: id={}, EntryKey.hashCode={}"
argument_list|,
name|id
argument_list|,
name|releasedEntry
operator|.
name|entryKey
operator|.
name|hashCode
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// release the entry
comment|//TODO(AR) why can't  we have this line?
name|releaseEntry
argument_list|(
name|releasedEntry
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
specifier|private
name|void
name|releaseEntryKey
parameter_list|(
specifier|final
name|EntryKey
name|entryKey
parameter_list|)
block|{
name|THREADLOCAL_CHAR_ARRAY_POOL
operator|.
name|get
argument_list|()
operator|.
name|returnEntry
argument_list|(
name|entryKey
operator|.
name|buf
argument_list|)
expr_stmt|;
name|entryKey
operator|.
name|setBuf
argument_list|(
literal|null
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|THREADLOCAL_ENTRY_KEY_POOL
operator|.
name|get
argument_list|()
operator|.
name|returnEntry
argument_list|(
name|entryKey
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|releaseEntry
parameter_list|(
specifier|final
name|Entry
name|entry
parameter_list|)
block|{
name|releaseEntryKey
argument_list|(
name|entry
operator|.
name|entryKey
argument_list|)
expr_stmt|;
name|entry
operator|.
name|entryKey
operator|=
literal|null
expr_stmt|;
name|THREADLOCAL_ENTRY_POOL
operator|.
name|get
argument_list|()
operator|.
name|returnEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
comment|/**      * Simple filtering to ignore events that are not of interest      *      * @param threadName The name of the thread that triggered the event      * @param id The id of the lock      *      * @return true if the event should be ignored      */
specifier|private
name|boolean
name|ignoreEvent
parameter_list|(
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
return|return
literal|false
return|;
comment|// useful for debugging specific log events
comment|//        return threadName.startsWith("DefaultQuartzScheduler_")
comment|//                || id.equals("dom.dbx")
comment|//                || id.equals("collections.dbx")
comment|//                || id.equals("collections.dbx")
comment|//                || id.equals("structure.dbx")
comment|//                || id.equals("values.dbx")
comment|//                || id.equals("CollectionCache");
block|}
annotation|@
name|Nullable
specifier|private
name|StackTraceElement
index|[]
name|getStackTrace
parameter_list|(
specifier|final
name|Thread
name|thread
parameter_list|)
block|{
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|thread
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
specifier|final
name|int
name|lastStackTraceElementIdx
init|=
name|stackTrace
operator|.
name|length
operator|-
literal|1
decl_stmt|;
specifier|final
name|int
name|from
init|=
name|findFirstExternalFrame
argument_list|(
name|stackTrace
argument_list|)
decl_stmt|;
specifier|final
name|int
name|to
decl_stmt|;
if|if
condition|(
name|traceStackDepth
operator|==
operator|-
literal|1
condition|)
block|{
name|to
operator|=
name|lastStackTraceElementIdx
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|calcTo
init|=
name|from
operator|+
name|traceStackDepth
decl_stmt|;
if|if
condition|(
name|calcTo
operator|>
name|lastStackTraceElementIdx
condition|)
block|{
name|to
operator|=
name|lastStackTraceElementIdx
expr_stmt|;
block|}
else|else
block|{
name|to
operator|=
name|calcTo
expr_stmt|;
block|}
block|}
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|stackTrace
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
specifier|private
name|int
name|findFirstExternalFrame
parameter_list|(
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
comment|// we start with i = 1 to avoid Thread#getStackTrace() frame
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|stackTrace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|THIS_CLASS_NAME
operator|.
name|equals
argument_list|(
name|stackTrace
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|registerListener
parameter_list|(
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|lockEventListener
argument_list|)
expr_stmt|;
name|lockEventListener
operator|.
name|registered
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|deregisterListener
parameter_list|(
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
name|listeners
operator|.
name|remove
argument_list|(
name|lockEventListener
argument_list|)
expr_stmt|;
name|lockEventListener
operator|.
name|unregistered
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get's a copy of the current lock attempt information      *      * @return lock attempt information      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|getAttempting
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|it
init|=
name|attempting
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entry
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// read count (volatile) first to ensure visibility
specifier|final
name|int
name|localCount
init|=
name|entry
operator|.
name|count
decl_stmt|;
name|result
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|id
argument_list|,
parameter_list|(
name|_k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|lockType
argument_list|,
parameter_list|(
name|_k1
parameter_list|,
name|v1
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v1
operator|==
literal|null
condition|)
block|{
name|v1
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v1
operator|.
name|add
argument_list|(
operator|new
name|LockModeOwner
argument_list|(
name|entry
operator|.
name|lockMode
argument_list|,
name|entry
operator|.
name|owner
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|v1
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Get's a copy of the current acquired lock information      *      * @return acquired lock information      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|getAcquired
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|it
init|=
name|acquired
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entry
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// read count (volatile) first to ensure visibility
specifier|final
name|int
name|localCount
init|=
name|entry
operator|.
name|count
decl_stmt|;
name|result
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|id
argument_list|,
parameter_list|(
name|_k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|LockType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|v
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|lockType
argument_list|,
parameter_list|(
name|_k1
parameter_list|,
name|v1
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v1
operator|==
literal|null
condition|)
block|{
name|v1
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|LockMode
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|v1
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|lockMode
argument_list|,
parameter_list|(
name|_k2
parameter_list|,
name|v2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v2
operator|==
literal|null
condition|)
block|{
name|v2
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v2
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|owner
argument_list|,
parameter_list|(
name|_k3
parameter_list|,
name|v3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v3
operator|==
literal|null
condition|)
block|{
name|v3
operator|=
operator|new
name|LockCountTraces
argument_list|(
name|localCount
argument_list|,
name|entry
operator|.
name|stackTraces
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v3
operator|.
name|count
operator|+=
name|localCount
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|stackTraces
operator|!=
literal|null
condition|)
block|{
name|v3
operator|.
name|traces
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|stackTraces
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|v3
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v1
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
class|class
name|LockModeOwner
block|{
specifier|final
name|LockMode
name|lockMode
decl_stmt|;
specifier|final
name|String
name|ownerThread
decl_stmt|;
specifier|public
name|LockModeOwner
parameter_list|(
specifier|final
name|LockMode
name|lockMode
parameter_list|,
specifier|final
name|String
name|ownerThread
parameter_list|)
block|{
name|this
operator|.
name|lockMode
operator|=
name|lockMode
expr_stmt|;
name|this
operator|.
name|ownerThread
operator|=
name|ownerThread
expr_stmt|;
block|}
specifier|public
name|LockMode
name|getLockMode
parameter_list|()
block|{
return|return
name|lockMode
return|;
block|}
specifier|public
name|String
name|getOwnerThread
parameter_list|()
block|{
return|return
name|ownerThread
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LockCountTraces
block|{
name|int
name|count
decl_stmt|;
annotation|@
name|Nullable
specifier|final
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|traces
decl_stmt|;
specifier|public
name|LockCountTraces
parameter_list|(
specifier|final
name|int
name|count
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|traces
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|traces
operator|=
name|traces
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|getTraces
parameter_list|()
block|{
return|return
name|traces
return|;
block|}
block|}
specifier|private
name|void
name|notifyListeners
parameter_list|(
specifier|final
name|LockEventType
name|lockEventType
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|Entry
name|entry
parameter_list|)
block|{
for|for
control|(
specifier|final
name|LockEventListener
name|listener
range|:
name|listeners
control|)
block|{
try|try
block|{
name|listener
operator|.
name|accept
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener '{}' error: "
argument_list|,
name|listener
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|//        private void notifyListenersOfAcquire(final LockAction lockAction, final int newReferenceCount) {
comment|//            final LockAction newLockAction = lockAction.withCount(newReferenceCount);
comment|//            for(final LockEventListener listener : listeners) {
comment|//                try {
comment|//                    listener.accept(newLockAction);
comment|//                } catch (final Exception e) {
comment|//                    LOG.error("Listener '{}' error: ", listener.getClass().getName(), e);
comment|//                }
comment|//            }
comment|//        }
specifier|private
specifier|static
annotation|@
name|Nullable
argument_list|<
name|T
argument_list|>
name|List
argument_list|<
name|T
argument_list|>
name|List
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|T
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|public
interface|interface
name|LockEventListener
block|{
specifier|default
name|void
name|registered
parameter_list|()
block|{
block|}
name|void
name|accept
parameter_list|(
specifier|final
name|LockEventType
name|lockEventType
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|Entry
name|entry
parameter_list|)
function_decl|;
specifier|default
name|void
name|unregistered
parameter_list|()
block|{
block|}
block|}
specifier|public
enum|enum
name|LockEventType
block|{
name|Attempt
block|,
name|AttemptFailed
block|,
name|Acquired
block|,
name|Released
block|}
comment|/** debugging tools below **/
comment|/**      * Checks that there are not more releases that there are acquires      */
specifier|private
name|void
name|sanityCheckLockLifecycles
parameter_list|(
specifier|final
name|LockEventType
name|lockEventType
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|,
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
synchronized|synchronized
init|(
name|lockCounts
init|)
block|{
name|long
name|read
init|=
literal|0
decl_stmt|;
name|long
name|write
init|=
literal|0
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Long
argument_list|,
name|Long
argument_list|>
name|lockCount
init|=
name|lockCounts
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|lockCount
operator|!=
literal|null
condition|)
block|{
name|read
operator|=
name|lockCount
operator|.
name|_1
expr_stmt|;
name|write
operator|=
name|lockCount
operator|.
name|_2
expr_stmt|;
block|}
if|if
condition|(
name|lockEventType
operator|==
name|Acquired
condition|)
block|{
if|if
condition|(
name|lockMode
operator|==
name|LockMode
operator|.
name|READ_LOCK
condition|)
block|{
name|read
operator|++
expr_stmt|;
block|}
if|else if
condition|(
name|lockMode
operator|==
name|LockMode
operator|.
name|WRITE_LOCK
condition|)
block|{
name|write
operator|++
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|lockEventType
operator|==
name|Released
condition|)
block|{
if|if
condition|(
name|lockMode
operator|==
name|LockMode
operator|.
name|READ_LOCK
condition|)
block|{
if|if
condition|(
name|read
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Negative READ_LOCKs"
argument_list|,
operator|new
name|IllegalStateException
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|read
operator|--
expr_stmt|;
block|}
if|else if
condition|(
name|lockMode
operator|==
name|LockMode
operator|.
name|WRITE_LOCK
condition|)
block|{
if|if
condition|(
name|write
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Negative WRITE_LOCKs"
argument_list|,
operator|new
name|IllegalStateException
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|write
operator|--
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|trace
argument_list|(
literal|"QUEUE: {} (read={} write={})"
argument_list|,
name|formatString
argument_list|(
name|lockEventType
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|lockMode
argument_list|,
name|threadName
argument_list|,
name|count
argument_list|,
name|timestamp
argument_list|,
name|stackTrace
argument_list|)
argument_list|,
name|read
argument_list|,
name|write
argument_list|)
expr_stmt|;
block|}
name|lockCounts
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|Tuple
argument_list|(
name|read
argument_list|,
name|write
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|String
name|formatString
parameter_list|(
specifier|final
name|LockEventType
name|lockEventType
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|,
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|lockEventType
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|lockType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupId
operator|>
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
operator|.
name|append
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|lockMode
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") of "
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|stackTrace
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|reason
init|=
name|getSimpleStackReason
argument_list|(
name|stackTrace
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" for #"
argument_list|)
operator|.
name|append
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|" by "
argument_list|)
operator|.
name|append
argument_list|(
name|threadName
argument_list|)
operator|.
name|append
argument_list|(
literal|" at "
argument_list|)
operator|.
name|append
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockEventType
operator|==
name|Acquired
operator|||
name|lockEventType
operator|==
name|Released
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|". count="
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|NATIVE_BROKER_CLASS_NAME
init|=
name|NativeBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_STORE_CLASS_NAME
init|=
name|NativeBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TXN_CLASS_NAME
init|=
name|Txn
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
specifier|public
specifier|static
name|String
name|getSimpleStackReason
parameter_list|(
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
for|for
control|(
specifier|final
name|StackTraceElement
name|stackTraceElement
range|:
name|stackTrace
control|)
block|{
specifier|final
name|String
name|className
init|=
name|stackTraceElement
operator|.
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|NATIVE_BROKER_CLASS_NAME
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
name|COLLECTION_STORE_CLASS_NAME
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
name|TXN_CLASS_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"LockCollection"
argument_list|)
operator|||
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"lockCollectionCache"
argument_list|)
operator|)
condition|)
block|{
return|return
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|+
literal|'('
operator|+
name|stackTraceElement
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|')'
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
specifier|static
name|EntryKey
name|key
parameter_list|(
specifier|final
name|long
name|threadId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|)
block|{
specifier|final
name|boolean
name|idIsUri
init|=
name|lockType
operator|==
name|LockType
operator|.
name|COLLECTION
operator|||
name|lockType
operator|==
name|LockType
operator|.
name|DOCUMENT
decl_stmt|;
specifier|final
name|int
name|requiredLen
init|=
literal|8
operator|+
literal|1
operator|+
operator|(
name|id
operator|.
name|length
argument_list|()
operator|-
operator|(
name|idIsUri
condition|?
operator|(
name|id
operator|.
name|equals
argument_list|(
literal|"/db"
argument_list|)
condition|?
literal|3
else|:
literal|4
operator|)
else|:
literal|0
operator|)
operator|)
decl_stmt|;
name|char
index|[]
name|buf
init|=
name|THREADLOCAL_CHAR_ARRAY_POOL
operator|.
name|get
argument_list|()
operator|.
name|takeEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|buf
operator|==
literal|null
operator|||
name|buf
operator|.
name|length
operator|<
name|requiredLen
condition|)
block|{
name|buf
operator|=
operator|new
name|char
index|[
name|requiredLen
index|]
expr_stmt|;
block|}
name|longToChar
argument_list|(
name|threadId
argument_list|,
name|buf
argument_list|)
expr_stmt|;
name|buf
index|[
literal|8
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
name|lockMode
operator|.
name|getVal
argument_list|()
operator|<<
literal|4
operator|)
operator||
name|lockType
operator|.
name|getVal
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|idIsUri
condition|)
block|{
name|appendUri
argument_list|(
name|buf
argument_list|,
literal|9
argument_list|,
name|requiredLen
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|id
operator|.
name|getChars
argument_list|(
literal|0
argument_list|,
name|id
operator|.
name|length
argument_list|()
argument_list|,
name|buf
argument_list|,
literal|9
argument_list|)
expr_stmt|;
block|}
name|EntryKey
name|key
init|=
name|THREADLOCAL_ENTRY_KEY_POOL
operator|.
name|get
argument_list|()
operator|.
name|takeEntry
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|null
condition|)
block|{
name|key
operator|=
operator|new
name|EntryKey
argument_list|()
expr_stmt|;
block|}
name|key
operator|.
name|setBuf
argument_list|(
name|buf
argument_list|,
name|requiredLen
argument_list|)
expr_stmt|;
return|return
name|key
return|;
block|}
specifier|private
specifier|static
name|void
name|longToChar
parameter_list|(
specifier|final
name|long
name|v
parameter_list|,
specifier|final
name|char
index|[]
name|data
parameter_list|)
block|{
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|4
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|32
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|5
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|40
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|6
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|48
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|7
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|56
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|appendUri
parameter_list|(
specifier|final
name|char
index|[]
name|buf
parameter_list|,
name|int
name|bufOffset
parameter_list|,
specifier|final
name|int
name|bufLen
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
block|{
name|int
name|partEnd
init|=
name|id
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|partEnd
init|;
name|bufOffset
operator|<
name|bufLen
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|char
name|c
init|=
name|id
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'/'
condition|)
block|{
name|id
operator|.
name|getChars
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|partEnd
operator|+
literal|1
argument_list|,
name|buf
argument_list|,
name|bufOffset
argument_list|)
expr_stmt|;
name|bufOffset
operator|+=
name|partEnd
operator|-
name|i
expr_stmt|;
name|partEnd
operator|=
name|i
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|bufOffset
operator|<
name|bufLen
condition|)
block|{
name|buf
index|[
name|bufOffset
operator|++
index|]
operator|=
literal|'/'
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
class|class
name|EntryKey
block|{
specifier|private
name|char
index|[]
name|buf
decl_stmt|;
specifier|private
name|int
name|bufLen
decl_stmt|;
specifier|private
name|int
name|hashCode
decl_stmt|;
specifier|public
name|void
name|setBuf
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|char
name|buf
index|[]
parameter_list|,
specifier|final
name|int
name|bufLen
parameter_list|)
block|{
name|this
operator|.
name|buf
operator|=
name|buf
expr_stmt|;
name|this
operator|.
name|bufLen
operator|=
name|bufLen
expr_stmt|;
comment|// calculate hashcode
name|hashCode
operator|=
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufLen
condition|;
name|i
operator|++
control|)
name|hashCode
operator|=
literal|31
operator|*
name|hashCode
operator|+
name|buf
index|[
name|i
index|]
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|hashCode
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|EntryKey
operator|.
name|class
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|final
name|EntryKey
name|other
init|=
operator|(
name|EntryKey
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|buf
operator|==
name|other
operator|.
name|buf
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|other
operator|.
name|bufLen
operator|!=
name|bufLen
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bufLen
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|buf
index|[
name|i
index|]
operator|!=
name|other
operator|.
name|buf
index|[
name|i
index|]
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Represents an entry in the {@link #attempting} or {@link #acquired} lock table.      *      * All class members are only written from a single      * thread.      *      * However, they may be read from the same writer thread or a different read-only thread.      * The member `count` is written last by the writer thread      * and read first by the read-only reader thread to ensure correct visibility      * of the member values.      */
specifier|public
specifier|static
class|class
name|Entry
block|{
name|String
name|id
decl_stmt|;
name|LockType
name|lockType
decl_stmt|;
name|LockMode
name|lockMode
decl_stmt|;
name|String
name|owner
decl_stmt|;
annotation|@
name|Nullable
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|stackTraces
decl_stmt|;
comment|/**          * Intentionally marked volatile.          * All variables visible before this point become available          * to the reading thread.          */
specifier|volatile
name|int
name|count
decl_stmt|;
comment|/**          * Used as a reference so that we can recycle the Map entry          * key for reuse when we are done with this value.          *          * NOTE: Only ever read and written from the same thread          */
name|EntryKey
name|entryKey
decl_stmt|;
specifier|private
name|Entry
parameter_list|()
block|{
block|}
specifier|private
name|Entry
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|lockType
operator|=
name|lockType
expr_stmt|;
name|this
operator|.
name|lockMode
operator|=
name|lockMode
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
if|if
condition|(
name|stackTrace
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|stackTraces
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|stackTraces
operator|.
name|add
argument_list|(
name|stackTrace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|stackTraces
operator|=
literal|null
expr_stmt|;
block|}
comment|// write last to ensure reader visibility of above fields!
name|this
operator|.
name|count
operator|=
literal|1
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|Entry
operator|.
name|class
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|o
decl_stmt|;
return|return
name|id
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|id
argument_list|)
operator|&&
name|lockType
operator|==
name|entry
operator|.
name|lockType
operator|&&
name|lockMode
operator|==
name|entry
operator|.
name|lockMode
operator|&&
name|owner
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|owner
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|id
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|lockType
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|lockMode
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|owner
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|LockType
name|getLockType
parameter_list|()
block|{
return|return
name|lockType
return|;
block|}
specifier|public
name|LockMode
name|getLockMode
parameter_list|()
block|{
return|return
name|lockMode
return|;
block|}
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|getStackTraces
parameter_list|()
block|{
return|return
name|stackTraces
return|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
block|}
end_class

end_unit

