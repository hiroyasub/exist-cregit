begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2017 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|objects
operator|.
name|ObjectLinkedOpenHashSet
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Level
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|concurrent
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|StampedLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockTable
operator|.
name|LockEventType
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * The Lock Table holds the details of  * threads awaiting to acquire a Lock  * and threads that have acquired a lock.  *  * It is arranged by the id of the lock  * which is typically an indicator of the  * lock subject.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|LockTable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PROP_DISABLE
init|=
literal|"exist.locktable.disable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROP_TRACE_STACK_DEPTH
init|=
literal|"exist.locktable.trace.stack.depth"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LockTable
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THIS_CLASS_NAME
init|=
name|LockTable
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|/**      * Set to false to disable all events      */
specifier|private
specifier|volatile
name|boolean
name|disableEvents
init|=
name|Boolean
operator|.
name|getBoolean
argument_list|(
name|PROP_DISABLE
argument_list|)
decl_stmt|;
comment|/**      * Whether we should try and trace the stack for the lock event, -1 means all stack,      * 0 means no stack, n means n stack frames, 5 is a reasonable value      */
specifier|private
specifier|volatile
name|int
name|traceStackDepth
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|Integer
operator|.
name|getInteger
argument_list|(
name|PROP_TRACE_STACK_DEPTH
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|/**      * Lock event listeners      */
specifier|private
specifier|final
name|StampedLock
name|listenersLock
init|=
operator|new
name|StampedLock
argument_list|()
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"listenersWriteLock"
argument_list|)
specifier|private
specifier|volatile
name|LockEventListener
index|[]
name|listeners
init|=
literal|null
decl_stmt|;
comment|/**      * Table of threads attempting to acquire a lock      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Thread
argument_list|,
name|Entry
argument_list|>
name|attempting
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
literal|60
argument_list|)
decl_stmt|;
comment|/**      * Table of threads which have acquired lock(s)      */
specifier|private
specifier|final
name|Map
argument_list|<
name|Thread
argument_list|,
name|Entries
argument_list|>
name|acquired
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|(
literal|60
argument_list|)
decl_stmt|;
name|LockTable
parameter_list|()
block|{
comment|// add a log listener if trace level logging is enabled
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
block|{
name|registerListener
argument_list|(
operator|new
name|LockEventLogListener
argument_list|(
name|LOG
argument_list|,
name|Level
operator|.
name|TRACE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Shuts down the lock table processor.      *      * After calling this, no further lock      * events will be reported.      */
specifier|public
name|void
name|shutdown
parameter_list|()
block|{
block|}
comment|/**      * Set the depth at which we should trace lock events through the stack      *      * @param traceStackDepth -1 traces the whole stack, 0 means no stack traces, n means n stack frames      */
specifier|public
name|void
name|setTraceStackDepth
parameter_list|(
specifier|final
name|int
name|traceStackDepth
parameter_list|)
block|{
name|this
operator|.
name|traceStackDepth
operator|=
name|traceStackDepth
expr_stmt|;
block|}
specifier|public
name|void
name|attempt
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Attempt
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|attemptFailed
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|AttemptFailed
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|acquired
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Acquired
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|released
parameter_list|(
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|mode
parameter_list|)
block|{
name|event
argument_list|(
name|Released
argument_list|,
name|groupId
argument_list|,
name|id
argument_list|,
name|lockType
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|event
parameter_list|(
specifier|final
name|LockEventType
name|lockEventType
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|)
block|{
if|if
condition|(
name|disableEvents
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|timestamp
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|Thread
name|currentThread
init|=
name|Thread
operator|.
name|currentThread
argument_list|()
decl_stmt|;
comment|//        if(ignoreEvent(threadName, id)) {
comment|//            return;
comment|//        }
comment|//        /**
comment|//         * Very useful for debugging Lock life cycles
comment|//         */
comment|//        if (sanityCheck) {
comment|//            sanityCheckLockLifecycles(lockEventType, groupId, id, lockType, lockMode, threadName, 1, timestamp, stackTrace);
comment|//        }
switch|switch
condition|(
name|lockEventType
condition|)
block|{
case|case
name|Attempt
case|:
name|Entry
name|entry
init|=
name|attempting
operator|.
name|get
argument_list|(
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
condition|)
block|{
comment|// happens once per thread!
name|entry
operator|=
operator|new
name|Entry
argument_list|()
expr_stmt|;
name|attempting
operator|.
name|put
argument_list|(
name|currentThread
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
name|entry
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|entry
operator|.
name|lockType
operator|=
name|lockType
expr_stmt|;
name|entry
operator|.
name|lockMode
operator|=
name|lockMode
expr_stmt|;
name|entry
operator|.
name|owner
operator|=
name|currentThread
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|traceStackDepth
operator|==
literal|0
condition|)
block|{
name|entry
operator|.
name|stackTraces
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|stackTraces
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|entry
operator|.
name|stackTraces
operator|.
name|add
argument_list|(
name|getStackTrace
argument_list|(
name|currentThread
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// write count last to ensure reader-thread visibility of above fields
name|entry
operator|.
name|count
operator|=
literal|1
expr_stmt|;
name|notifyListeners
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|entry
argument_list|)
expr_stmt|;
break|break;
case|case
name|AttemptFailed
case|:
specifier|final
name|Entry
name|attemptFailedEntry
init|=
name|attempting
operator|.
name|get
argument_list|(
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptFailedEntry
operator|==
literal|null
operator|||
name|attemptFailedEntry
operator|.
name|count
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No entry found when trying to remove failed `attempt` for: id={}, thread={}"
argument_list|,
name|id
argument_list|,
name|currentThread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// mark attempt as unused
name|attemptFailedEntry
operator|.
name|count
operator|=
literal|0
expr_stmt|;
name|notifyListeners
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|attemptFailedEntry
argument_list|)
expr_stmt|;
break|break;
case|case
name|Acquired
case|:
specifier|final
name|Entry
name|attemptEntry
init|=
name|attempting
operator|.
name|get
argument_list|(
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|attemptEntry
operator|==
literal|null
operator|||
name|attemptEntry
operator|.
name|count
operator|==
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No entry found when trying to remove `attempt` to promote to `acquired` for: id={}, thread={}"
argument_list|,
name|id
argument_list|,
name|currentThread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
comment|// we now either add or merge the `attemptEntry` with the `acquired` table
name|Entries
name|acquiredEntries
init|=
name|acquired
operator|.
name|get
argument_list|(
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|acquiredEntries
operator|==
literal|null
condition|)
block|{
specifier|final
name|Entry
name|acquiredEntry
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|acquiredEntry
operator|.
name|setFrom
argument_list|(
name|attemptEntry
argument_list|)
expr_stmt|;
name|acquiredEntries
operator|=
operator|new
name|Entries
argument_list|(
name|acquiredEntry
argument_list|)
expr_stmt|;
name|acquired
operator|.
name|put
argument_list|(
name|currentThread
argument_list|,
name|acquiredEntries
argument_list|)
expr_stmt|;
name|notifyListeners
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|acquiredEntry
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Entry
name|acquiredEntry
init|=
name|acquiredEntries
operator|.
name|merge
argument_list|(
name|attemptEntry
argument_list|)
decl_stmt|;
name|notifyListeners
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|acquiredEntry
argument_list|)
expr_stmt|;
block|}
comment|// mark attempt as unused
name|attemptEntry
operator|.
name|count
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|Released
case|:
specifier|final
name|Entries
name|entries
init|=
name|acquired
operator|.
name|get
argument_list|(
name|currentThread
argument_list|)
decl_stmt|;
if|if
condition|(
name|entries
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"No entries found when trying to `release` for: id={}, thread={}"
argument_list|,
name|id
argument_list|,
name|currentThread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
specifier|final
name|Entry
name|releasedEntry
init|=
name|entries
operator|.
name|unmerge
argument_list|(
name|id
argument_list|,
name|lockType
argument_list|,
name|lockMode
argument_list|)
decl_stmt|;
if|if
condition|(
name|releasedEntry
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to unmerge entry for `release`: id={}, threadName={}"
argument_list|,
name|id
argument_list|,
name|currentThread
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
name|notifyListeners
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|releasedEntry
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|/**      * There is one Entries object for each writing-thread,      * however it may be read from other threads which      * is why it needs to be thread-safe.      */
annotation|@
name|ThreadSafe
specifier|private
specifier|static
class|class
name|Entries
block|{
specifier|private
specifier|final
name|StampedLock
name|entriesLock
init|=
operator|new
name|StampedLock
argument_list|()
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"entriesLock"
argument_list|)
specifier|private
specifier|final
name|List
argument_list|<
name|Entry
argument_list|>
name|entries
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
literal|16
argument_list|)
decl_stmt|;
specifier|public
name|Entries
parameter_list|(
specifier|final
name|Entry
name|entry
parameter_list|)
block|{
name|entries
operator|.
name|add
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
specifier|private
annotation|@
name|Nullable
name|Entry
name|findEntry
parameter_list|(
specifier|final
name|Entry
name|entry
parameter_list|)
block|{
comment|// optimistic read
name|long
name|stamp
init|=
name|entriesLock
operator|.
name|tryOptimisticRead
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|Entry
name|local
init|=
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|local
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
condition|)
block|{
if|if
condition|(
name|entriesLock
operator|.
name|validate
argument_list|(
name|stamp
argument_list|)
condition|)
block|{
return|return
name|local
return|;
block|}
block|}
block|}
comment|// otherwise... pessimistic read
name|stamp
operator|=
name|entriesLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|Entry
name|local
init|=
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|local
operator|.
name|equals
argument_list|(
name|entry
argument_list|)
condition|)
block|{
return|return
name|entry
return|;
block|}
block|}
block|}
finally|finally
block|{
name|entriesLock
operator|.
name|unlockRead
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Entry
name|merge
parameter_list|(
specifier|final
name|Entry
name|attemptEntry
parameter_list|)
block|{
specifier|final
name|Entry
name|local
init|=
name|findEntry
argument_list|(
name|attemptEntry
argument_list|)
decl_stmt|;
comment|// if found, do the merge
if|if
condition|(
name|local
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|attemptEntry
operator|.
name|stackTraces
operator|!=
literal|null
condition|)
block|{
name|local
operator|.
name|stackTraces
operator|.
name|addAll
argument_list|(
name|attemptEntry
operator|.
name|stackTraces
argument_list|)
expr_stmt|;
block|}
name|local
operator|.
name|count
operator|+=
name|attemptEntry
operator|.
name|count
expr_stmt|;
return|return
name|local
return|;
block|}
comment|// else, add it
specifier|final
name|Entry
name|acquiredEntry
init|=
operator|new
name|Entry
argument_list|()
decl_stmt|;
name|acquiredEntry
operator|.
name|setFrom
argument_list|(
name|attemptEntry
argument_list|)
expr_stmt|;
specifier|final
name|long
name|stamp
init|=
name|entriesLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
name|entries
operator|.
name|add
argument_list|(
name|acquiredEntry
argument_list|)
expr_stmt|;
return|return
name|acquiredEntry
return|;
block|}
finally|finally
block|{
name|entriesLock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Nullable
specifier|public
name|Entry
name|unmerge
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|)
block|{
comment|// optimistic read
name|long
name|stamp
init|=
name|entriesLock
operator|.
name|tryOptimisticRead
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|Entry
name|local
init|=
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|local
operator|.
name|id
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
name|local
operator|.
name|lockType
operator|==
name|lockType
operator|&&
name|local
operator|.
name|lockMode
operator|==
name|lockMode
condition|)
block|{
comment|// if count is equal to 1 we can just remove from the list rather than decrementing
if|if
condition|(
name|local
operator|.
name|count
operator|==
literal|1
condition|)
block|{
name|long
name|writeStamp
init|=
name|entriesLock
operator|.
name|tryConvertToWriteLock
argument_list|(
name|stamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeStamp
operator|!=
literal|0l
condition|)
block|{
try|try
block|{
comment|//TODO(AR) we need to recycle the entry here!    ... nope do it in the caller!
name|local
operator|.
name|count
operator|--
expr_stmt|;
return|return
name|entries
operator|.
name|remove
argument_list|(
name|i
argument_list|)
return|;
block|}
finally|finally
block|{
name|entriesLock
operator|.
name|unlockWrite
argument_list|(
name|writeStamp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|entriesLock
operator|.
name|validate
argument_list|(
name|stamp
argument_list|)
condition|)
block|{
comment|// do the unmerge bit
if|if
condition|(
name|local
operator|.
name|stackTraces
operator|!=
literal|null
condition|)
block|{
name|local
operator|.
name|stackTraces
operator|.
name|remove
argument_list|(
name|local
operator|.
name|stackTraces
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|local
operator|.
name|count
operator|=
name|local
operator|.
name|count
operator|-
literal|1
expr_stmt|;
comment|//done
return|return
name|local
return|;
block|}
block|}
break|break;
block|}
block|}
comment|// otherwise... pessimistic read
name|int
name|foundIdx
init|=
operator|-
literal|1
decl_stmt|;
name|stamp
operator|=
name|entriesLock
operator|.
name|readLock
argument_list|()
expr_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
name|entries
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
block|{
specifier|final
name|Entry
name|local
init|=
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|local
operator|.
name|id
operator|.
name|equals
argument_list|(
name|id
argument_list|)
operator|&&
name|local
operator|.
name|lockType
operator|==
name|lockType
operator|&&
name|local
operator|.
name|lockMode
operator|==
name|lockMode
condition|)
block|{
comment|// if count is equal to 1 we can just remove from the list rather than decrementing
if|if
condition|(
name|local
operator|.
name|count
operator|==
literal|1
condition|)
block|{
name|long
name|writeStamp
init|=
name|entriesLock
operator|.
name|tryConvertToWriteLock
argument_list|(
name|stamp
argument_list|)
decl_stmt|;
if|if
condition|(
name|writeStamp
operator|!=
literal|0l
condition|)
block|{
name|stamp
operator|=
name|writeStamp
expr_stmt|;
comment|//TODO(AR) we need to recycle the entry here!    ... nope do it in the caller!
name|local
operator|.
name|count
operator|--
expr_stmt|;
return|return
name|entries
operator|.
name|remove
argument_list|(
name|i
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// do the unmerge bit
if|if
condition|(
name|local
operator|.
name|stackTraces
operator|!=
literal|null
condition|)
block|{
name|local
operator|.
name|stackTraces
operator|.
name|remove
argument_list|(
name|local
operator|.
name|stackTraces
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|local
operator|.
name|count
operator|=
name|local
operator|.
name|count
operator|-
literal|1
expr_stmt|;
comment|//done
return|return
name|local
return|;
block|}
name|foundIdx
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|entriesLock
operator|.
name|unlock
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|foundIdx
operator|>
operator|-
literal|1
condition|)
block|{
name|stamp
operator|=
name|entriesLock
operator|.
name|writeLock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|Entry
name|removed
init|=
name|entries
operator|.
name|remove
argument_list|(
name|foundIdx
argument_list|)
decl_stmt|;
name|removed
operator|.
name|count
operator|--
expr_stmt|;
return|return
name|removed
return|;
block|}
finally|finally
block|{
name|entriesLock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|forEach
parameter_list|(
specifier|final
name|Consumer
argument_list|<
name|Entry
argument_list|>
name|entryConsumer
parameter_list|)
block|{
specifier|final
name|long
name|stamp
init|=
name|entriesLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|entryConsumer
operator|.
name|accept
argument_list|(
name|entries
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|entriesLock
operator|.
name|unlockRead
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Nullable
specifier|private
name|StackTraceElement
index|[]
name|getStackTrace
parameter_list|(
specifier|final
name|Thread
name|thread
parameter_list|)
block|{
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
init|=
name|thread
operator|.
name|getStackTrace
argument_list|()
decl_stmt|;
specifier|final
name|int
name|lastStackTraceElementIdx
init|=
name|stackTrace
operator|.
name|length
operator|-
literal|1
decl_stmt|;
specifier|final
name|int
name|from
init|=
name|findFirstExternalFrame
argument_list|(
name|stackTrace
argument_list|)
decl_stmt|;
specifier|final
name|int
name|to
decl_stmt|;
if|if
condition|(
name|traceStackDepth
operator|==
operator|-
literal|1
condition|)
block|{
name|to
operator|=
name|lastStackTraceElementIdx
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|calcTo
init|=
name|from
operator|+
name|traceStackDepth
decl_stmt|;
if|if
condition|(
name|calcTo
operator|>
name|lastStackTraceElementIdx
condition|)
block|{
name|to
operator|=
name|lastStackTraceElementIdx
expr_stmt|;
block|}
else|else
block|{
name|to
operator|=
name|calcTo
expr_stmt|;
block|}
block|}
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|stackTrace
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
specifier|private
name|int
name|findFirstExternalFrame
parameter_list|(
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
comment|// we start with i = 1 to avoid Thread#getStackTrace() frame
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|stackTrace
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|THIS_CLASS_NAME
operator|.
name|equals
argument_list|(
name|stackTrace
index|[
name|i
index|]
operator|.
name|getClassName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
literal|0
return|;
block|}
specifier|public
name|void
name|registerListener
parameter_list|(
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
specifier|final
name|long
name|stamp
init|=
name|listenersLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
comment|// extend listeners by 1
if|if
condition|(
name|listeners
operator|==
literal|null
condition|)
block|{
name|listeners
operator|=
operator|new
name|LockEventListener
index|[
literal|1
index|]
expr_stmt|;
name|listeners
index|[
literal|0
index|]
operator|=
name|lockEventListener
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|LockEventListener
index|[]
name|newListeners
init|=
operator|new
name|LockEventListener
index|[
name|listeners
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|listeners
argument_list|,
literal|0
argument_list|,
name|newListeners
argument_list|,
literal|0
argument_list|,
name|listeners
operator|.
name|length
argument_list|)
expr_stmt|;
name|newListeners
index|[
name|listeners
operator|.
name|length
index|]
operator|=
name|lockEventListener
expr_stmt|;
name|listeners
operator|=
name|newListeners
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|listenersLock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
name|lockEventListener
operator|.
name|registered
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|deregisterListener
parameter_list|(
specifier|final
name|LockEventListener
name|lockEventListener
parameter_list|)
block|{
specifier|final
name|long
name|stamp
init|=
name|listenersLock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
comment|// reduce listeners by 1
for|for
control|(
name|int
name|i
init|=
name|listeners
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
block|{
comment|// intentionally compare by identity!
if|if
condition|(
name|listeners
index|[
name|i
index|]
operator|==
name|lockEventListener
condition|)
block|{
if|if
condition|(
name|i
operator|==
literal|0
operator|&&
name|listeners
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|listeners
operator|=
literal|null
expr_stmt|;
break|break;
block|}
specifier|final
name|LockEventListener
index|[]
name|newListeners
init|=
operator|new
name|LockEventListener
index|[
name|listeners
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|listeners
argument_list|,
literal|0
argument_list|,
name|newListeners
argument_list|,
literal|0
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|listeners
operator|.
name|length
operator|!=
name|i
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|listeners
argument_list|,
name|i
operator|+
literal|1
argument_list|,
name|newListeners
argument_list|,
name|i
argument_list|,
name|listeners
operator|.
name|length
operator|-
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|listeners
operator|=
name|newListeners
expr_stmt|;
break|break;
block|}
block|}
block|}
finally|finally
block|{
name|listenersLock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
name|lockEventListener
operator|.
name|unregistered
argument_list|()
expr_stmt|;
block|}
comment|/**      * Get's a copy of the current lock attempt information      *      * @return lock attempt information      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|getAttempting
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|List
argument_list|<
name|LockModeOwner
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Entry
argument_list|>
name|it
init|=
name|attempting
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entry
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// read count (volatile) first to ensure visibility
specifier|final
name|int
name|localCount
init|=
name|entry
operator|.
name|count
decl_stmt|;
if|if
condition|(
name|localCount
operator|==
literal|0
condition|)
block|{
comment|// attempt entry object is marked as unused
continue|continue;
block|}
name|result
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|id
argument_list|,
parameter_list|(
name|_k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|lockType
argument_list|,
parameter_list|(
name|_k1
parameter_list|,
name|v1
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v1
operator|==
literal|null
condition|)
block|{
name|v1
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v1
operator|.
name|add
argument_list|(
operator|new
name|LockModeOwner
argument_list|(
name|entry
operator|.
name|lockMode
argument_list|,
name|entry
operator|.
name|owner
argument_list|,
name|entry
operator|.
name|stackTraces
operator|!=
literal|null
condition|?
name|entry
operator|.
name|stackTraces
operator|.
name|get
argument_list|(
literal|0
argument_list|)
else|:
literal|null
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|v1
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Get's a copy of the current acquired lock information      *      * @return acquired lock information      */
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|getAcquired
parameter_list|()
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Map
argument_list|<
name|LockType
argument_list|,
name|Map
argument_list|<
name|LockMode
argument_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|LockCountTraces
argument_list|>
argument_list|>
argument_list|>
argument_list|>
name|result
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Iterator
argument_list|<
name|Entries
argument_list|>
name|it
init|=
name|acquired
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Entries
name|entries
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|entries
operator|.
name|forEach
argument_list|(
name|entry
lambda|->
block|{
comment|// read count (volatile) first to ensure visibility
specifier|final
name|int
name|localCount
init|=
name|entry
operator|.
name|count
decl_stmt|;
name|result
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|id
argument_list|,
parameter_list|(
name|_k
parameter_list|,
name|v
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v
operator|==
literal|null
condition|)
block|{
name|v
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|LockType
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|v
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|lockType
argument_list|,
parameter_list|(
name|_k1
parameter_list|,
name|v1
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v1
operator|==
literal|null
condition|)
block|{
name|v1
operator|=
operator|new
name|EnumMap
argument_list|<>
argument_list|(
name|LockMode
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
name|v1
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|lockMode
argument_list|,
parameter_list|(
name|_k2
parameter_list|,
name|v2
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v2
operator|==
literal|null
condition|)
block|{
name|v2
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|v2
operator|.
name|compute
argument_list|(
name|entry
operator|.
name|owner
argument_list|,
parameter_list|(
name|_k3
parameter_list|,
name|v3
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|v3
operator|==
literal|null
condition|)
block|{
name|v3
operator|=
operator|new
name|LockCountTraces
argument_list|(
name|localCount
argument_list|,
name|entry
operator|.
name|stackTraces
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|v3
operator|.
name|count
operator|+=
name|localCount
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|stackTraces
operator|!=
literal|null
condition|)
block|{
name|v3
operator|.
name|traces
operator|.
name|addAll
argument_list|(
name|entry
operator|.
name|stackTraces
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|v3
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v2
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v1
return|;
block|}
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|static
class|class
name|LockModeOwner
block|{
specifier|final
name|LockMode
name|lockMode
decl_stmt|;
specifier|final
name|String
name|ownerThread
decl_stmt|;
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|trace
decl_stmt|;
specifier|public
name|LockModeOwner
parameter_list|(
specifier|final
name|LockMode
name|lockMode
parameter_list|,
specifier|final
name|String
name|ownerThread
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|trace
parameter_list|)
block|{
name|this
operator|.
name|lockMode
operator|=
name|lockMode
expr_stmt|;
name|this
operator|.
name|ownerThread
operator|=
name|ownerThread
expr_stmt|;
name|this
operator|.
name|trace
operator|=
name|trace
expr_stmt|;
block|}
specifier|public
name|LockMode
name|getLockMode
parameter_list|()
block|{
return|return
name|lockMode
return|;
block|}
specifier|public
name|String
name|getOwnerThread
parameter_list|()
block|{
return|return
name|ownerThread
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|StackTraceElement
index|[]
name|getTrace
parameter_list|()
block|{
return|return
name|trace
return|;
block|}
block|}
specifier|public
specifier|static
class|class
name|LockCountTraces
block|{
name|int
name|count
decl_stmt|;
annotation|@
name|Nullable
specifier|final
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|traces
decl_stmt|;
specifier|public
name|LockCountTraces
parameter_list|(
specifier|final
name|int
name|count
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|traces
parameter_list|)
block|{
name|this
operator|.
name|count
operator|=
name|count
expr_stmt|;
name|this
operator|.
name|traces
operator|=
name|traces
expr_stmt|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|getTraces
parameter_list|()
block|{
return|return
name|traces
return|;
block|}
block|}
specifier|private
name|void
name|notifyListeners
parameter_list|(
specifier|final
name|LockEventType
name|lockEventType
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|Entry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|listeners
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|long
name|stamp
init|=
name|listenersLock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|listeners
index|[
name|i
index|]
operator|.
name|accept
argument_list|(
name|lockEventType
argument_list|,
name|timestamp
argument_list|,
name|groupId
argument_list|,
name|entry
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Listener '{}' error: "
argument_list|,
name|listeners
index|[
name|i
index|]
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|listenersLock
operator|.
name|unlockRead
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
annotation|@
name|Nullable
argument_list|<
name|T
argument_list|>
name|List
argument_list|<
name|T
argument_list|>
name|List
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|T
name|item
parameter_list|)
block|{
if|if
condition|(
name|item
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|list
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|public
interface|interface
name|LockEventListener
block|{
specifier|default
name|void
name|registered
parameter_list|()
block|{
block|}
name|void
name|accept
parameter_list|(
specifier|final
name|LockEventType
name|lockEventType
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|Entry
name|entry
parameter_list|)
function_decl|;
specifier|default
name|void
name|unregistered
parameter_list|()
block|{
block|}
block|}
specifier|public
enum|enum
name|LockEventType
block|{
name|Attempt
block|,
name|AttemptFailed
block|,
name|Acquired
block|,
name|Released
block|}
specifier|public
specifier|static
name|String
name|formatString
parameter_list|(
specifier|final
name|LockEventType
name|lockEventType
parameter_list|,
specifier|final
name|long
name|groupId
parameter_list|,
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|,
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|int
name|count
parameter_list|,
specifier|final
name|long
name|timestamp
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
operator|.
name|append
argument_list|(
name|lockEventType
operator|.
name|name
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|lockType
operator|.
name|name
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupId
operator|>
operator|-
literal|1
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"#"
argument_list|)
operator|.
name|append
argument_list|(
name|groupId
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
operator|.
name|append
argument_list|(
name|lockMode
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|") of "
argument_list|)
operator|.
name|append
argument_list|(
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|stackTrace
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|reason
init|=
name|getSimpleStackReason
argument_list|(
name|stackTrace
argument_list|)
decl_stmt|;
if|if
condition|(
name|reason
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" for #"
argument_list|)
operator|.
name|append
argument_list|(
name|reason
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|append
argument_list|(
literal|" by "
argument_list|)
operator|.
name|append
argument_list|(
name|threadName
argument_list|)
operator|.
name|append
argument_list|(
literal|" at "
argument_list|)
operator|.
name|append
argument_list|(
name|timestamp
argument_list|)
expr_stmt|;
if|if
condition|(
name|lockEventType
operator|==
name|Acquired
operator|||
name|lockEventType
operator|==
name|Released
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|". count="
argument_list|)
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|count
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
specifier|final
name|String
name|NATIVE_BROKER_CLASS_NAME
init|=
name|NativeBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COLLECTION_STORE_CLASS_NAME
init|=
name|NativeBroker
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TXN_CLASS_NAME
init|=
name|Txn
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
annotation|@
name|Nullable
specifier|public
specifier|static
name|String
name|getSimpleStackReason
parameter_list|(
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
for|for
control|(
specifier|final
name|StackTraceElement
name|stackTraceElement
range|:
name|stackTrace
control|)
block|{
specifier|final
name|String
name|className
init|=
name|stackTraceElement
operator|.
name|getClassName
argument_list|()
decl_stmt|;
if|if
condition|(
name|className
operator|.
name|equals
argument_list|(
name|NATIVE_BROKER_CLASS_NAME
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
name|COLLECTION_STORE_CLASS_NAME
argument_list|)
operator|||
name|className
operator|.
name|equals
argument_list|(
name|TXN_CLASS_NAME
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"LockCollection"
argument_list|)
operator|||
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"lockCollectionCache"
argument_list|)
operator|)
condition|)
block|{
return|return
name|stackTraceElement
operator|.
name|getMethodName
argument_list|()
operator|+
literal|'('
operator|+
name|stackTraceElement
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|')'
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Represents an entry in the {@link #attempting} or {@link #acquired} lock table.      *      * All class members are only written from a single      * thread.      *      * However, they may be read from the same writer thread or a different read-only thread.      * The member `count` is written last by the writer thread      * and read first by the read-only reader thread to ensure correct visibility      * of the member values.      */
specifier|public
specifier|static
class|class
name|Entry
block|{
name|String
name|id
decl_stmt|;
name|LockType
name|lockType
decl_stmt|;
name|LockMode
name|lockMode
decl_stmt|;
name|String
name|owner
decl_stmt|;
annotation|@
name|Nullable
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|stackTraces
decl_stmt|;
comment|/**          * Intentionally marked volatile.          * All variables visible before this point become available          * to the reading thread.          */
specifier|volatile
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|private
name|Entry
parameter_list|()
block|{
block|}
specifier|private
name|Entry
parameter_list|(
specifier|final
name|String
name|id
parameter_list|,
specifier|final
name|LockType
name|lockType
parameter_list|,
specifier|final
name|LockMode
name|lockMode
parameter_list|,
specifier|final
name|String
name|owner
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|StackTraceElement
index|[]
name|stackTrace
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|this
operator|.
name|lockType
operator|=
name|lockType
expr_stmt|;
name|this
operator|.
name|lockMode
operator|=
name|lockMode
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
if|if
condition|(
name|stackTrace
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|stackTraces
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|this
operator|.
name|stackTraces
operator|.
name|add
argument_list|(
name|stackTrace
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|stackTraces
operator|=
literal|null
expr_stmt|;
block|}
comment|// write last to ensure reader visibility of above fields!
name|this
operator|.
name|count
operator|=
literal|1
expr_stmt|;
block|}
specifier|public
name|void
name|setFrom
parameter_list|(
specifier|final
name|Entry
name|entry
parameter_list|)
block|{
name|this
operator|.
name|id
operator|=
name|entry
operator|.
name|id
expr_stmt|;
name|this
operator|.
name|lockType
operator|=
name|entry
operator|.
name|lockType
expr_stmt|;
name|this
operator|.
name|lockMode
operator|=
name|entry
operator|.
name|lockMode
expr_stmt|;
name|this
operator|.
name|owner
operator|=
name|entry
operator|.
name|owner
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|stackTraces
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|stackTraces
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|entry
operator|.
name|stackTraces
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|stackTraces
operator|=
literal|null
expr_stmt|;
block|}
comment|// write last to ensure reader visibility of above fields!
name|this
operator|.
name|count
operator|=
name|entry
operator|.
name|count
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
specifier|final
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|this
operator|==
name|o
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|o
operator|==
literal|null
operator|||
name|Entry
operator|.
name|class
operator|!=
name|o
operator|.
name|getClass
argument_list|()
condition|)
return|return
literal|false
return|;
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|o
decl_stmt|;
return|return
name|id
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|id
argument_list|)
operator|&&
name|lockType
operator|==
name|entry
operator|.
name|lockType
operator|&&
name|lockMode
operator|==
name|entry
operator|.
name|lockMode
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
name|int
name|result
init|=
name|id
operator|.
name|hashCode
argument_list|()
decl_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|lockType
operator|.
name|hashCode
argument_list|()
expr_stmt|;
name|result
operator|=
literal|31
operator|*
name|result
operator|+
name|lockMode
operator|.
name|hashCode
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|id
return|;
block|}
specifier|public
name|LockType
name|getLockType
parameter_list|()
block|{
return|return
name|lockType
return|;
block|}
specifier|public
name|LockMode
name|getLockMode
parameter_list|()
block|{
return|return
name|lockMode
return|;
block|}
specifier|public
name|String
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
annotation|@
name|Nullable
specifier|public
name|List
argument_list|<
name|StackTraceElement
index|[]
argument_list|>
name|getStackTraces
parameter_list|()
block|{
return|return
name|stackTraces
return|;
block|}
specifier|public
name|int
name|getCount
parameter_list|()
block|{
return|return
name|count
return|;
block|}
block|}
comment|/** debugging tools below **/
comment|//    public static final String PROP_SANITY_CHECK = "exist.locktable.sanity.check";
comment|//
comment|//    /**
comment|//     * Set to true to enable sanity checking of lock leases
comment|//     */
comment|//    private volatile boolean sanityCheck = Boolean.getBoolean(PROP_SANITY_CHECK);
comment|//
comment|//    /**
comment|//     * Holds a count of READ and WRITE locks by {@link Entry#id}
comment|//     * Only used for debugging,see {@link #sanityCheckLockLifecycles(LockEventType, long, String, LockType,
comment|//     *     LockMode, String, int, long, StackTraceElement[])}.
comment|//     */
comment|//    @GuardedBy("this") private final Map<String, Tuple2<Long, Long>> lockCounts = new HashMap<>();
comment|//
comment|//    /**
comment|//     * Checks that there are not more releases that there are acquires
comment|//     */
comment|//    private void sanityCheckLockLifecycles(final LockEventType lockEventType, final long groupId, final String id,
comment|//            final LockType lockType, final LockMode lockMode, final String threadName, final int count,
comment|//            final long timestamp, @Nullable final StackTraceElement[] stackTrace) {
comment|//        synchronized(lockCounts) {
comment|//            long read = 0;
comment|//            long write = 0;
comment|//
comment|//            final Tuple2<Long, Long> lockCount = lockCounts.get(id);
comment|//            if(lockCount != null) {
comment|//                read = lockCount._1;
comment|//                write = lockCount._2;
comment|//            }
comment|//
comment|//            if(lockEventType == Acquired) {
comment|//                if(lockMode == LockMode.READ_LOCK) {
comment|//                    read++;
comment|//                } else if(lockMode == LockMode.WRITE_LOCK) {
comment|//                    write++;
comment|//                }
comment|//            } else if(lockEventType == Released) {
comment|//                if(lockMode == LockMode.READ_LOCK) {
comment|//                    if(read == 0) {
comment|//                        LOG.error("Negative READ_LOCKs", new IllegalStateException());
comment|//                    }
comment|//                    read--;
comment|//                } else if(lockMode == LockMode.WRITE_LOCK) {
comment|//                    if(write == 0) {
comment|//                        LOG.error("Negative WRITE_LOCKs", new IllegalStateException());
comment|//                    }
comment|//                    write--;
comment|//                }
comment|//            }
comment|//
comment|//            if(LOG.isTraceEnabled()) {
comment|//                LOG.trace("QUEUE: {} (read={} write={})", formatString(lockEventType, groupId, id, lockType, lockMode,
comment|//                        threadName, count, timestamp, stackTrace), read, write);
comment|//            }
comment|//
comment|//            lockCounts.put(id, Tuple(read, write));
comment|//        }
comment|//    }
comment|//    /**
comment|//     * Simple filtering to ignore events that are not of interest
comment|//     *
comment|//     * @param threadName The name of the thread that triggered the event
comment|//     * @param id The id of the lock
comment|//     *
comment|//     * @return true if the event should be ignored
comment|//     */
comment|//    private boolean ignoreEvent(final String threadName, final String id) {
comment|//        // useful for debugging specific log events
comment|//        return threadName.startsWith("DefaultQuartzScheduler_")
comment|//                || id.equals("dom.dbx")
comment|//                || id.equals("collections.dbx")
comment|//                || id.equals("collections.dbx")
comment|//                || id.equals("structure.dbx")
comment|//                || id.equals("values.dbx")
comment|//                || id.equals("CollectionCache");
comment|//    }
block|}
end_class

end_unit

