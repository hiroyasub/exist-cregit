begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple3
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * A fluent lambda API for working  * with Documents and Collections.  *  * @author<a href="mailto:adam@evolvedbinary.com>Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|FluentBrokerAPI
block|{
comment|/**      * Convenience function for constructing an {@link XmldbURI}.      *      * @param uri a string expressing a URI      *      * @return an XmldbURI      */
specifier|public
specifier|static
name|XmldbURI
name|uri
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|)
block|{
return|return
name|XmldbURI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/**      * Creates a builder which can be used      * for describing a series of operations      * to be carried out with a broker      *      * @param brokerPool The broker pool to use brokers from      *      * @return a builder      */
specifier|public
specifier|static
name|FluentBrokerAPIBuilder
name|builder
parameter_list|(
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder
argument_list|(
name|brokerPool
argument_list|)
return|;
block|}
specifier|public
specifier|static
class|class
name|FluentBrokerAPIBuilder
block|{
specifier|private
specifier|final
name|BrokerPool
name|brokerPool
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder
parameter_list|(
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|)
block|{
name|this
operator|.
name|brokerPool
operator|=
name|brokerPool
expr_stmt|;
block|}
comment|/**          * A Collection on which to perform operations.          *          * @param collectionUri The URI of the Collection.          * @param collectionLockMode The mode under which the Collection should be locked.          *          * @return a builder          */
specifier|public
name|FluentBrokerAPIBuilder_Col1
name|withCollection
parameter_list|(
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|,
specifier|final
name|LockMode
name|collectionLockMode
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|)
return|;
block|}
comment|//        public FluentBrokerAPIBuilder_Col1 withCollections(final Tuple2<XmldbURI, LockMode>... collectionsAndLockModes) {
comment|//            return new FluentBrokerAPIBuilder_ColN(collectionsAndLockModes);
comment|//        }
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1
block|{
specifier|private
specifier|final
name|XmldbURI
name|collectionUri
decl_stmt|;
specifier|private
specifier|final
name|LockMode
name|collectionLockMode
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1
parameter_list|(
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|,
specifier|final
name|LockMode
name|collectionLockMode
parameter_list|)
block|{
name|this
operator|.
name|collectionUri
operator|=
name|collectionUri
expr_stmt|;
name|this
operator|.
name|collectionLockMode
operator|=
name|collectionLockMode
expr_stmt|;
block|}
comment|/**              * An operation to perform on a Collection.              *              * The operation will be executed after the Collection is retrieved and locked.              *              * @param<CR> The return type of the {@code collectionOp}              * @param collectionOp The function to execute against the Collection              *              * @return a builder.              */
specifier|public
parameter_list|<
name|CR
parameter_list|>
name|FluentBrokerAPIBuilder_Col1_Exec
argument_list|<
name|CR
argument_list|>
name|execute
parameter_list|(
specifier|final
name|Function
argument_list|<
name|Collection
argument_list|,
name|CR
argument_list|>
name|collectionOp
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_Exec
argument_list|<>
argument_list|(
name|collectionOp
argument_list|)
return|;
block|}
comment|/**              * A Document within the Collection on which to perform an operation.              *              * @param documentLookupFun A function which given a Collection, returns a tuple of Document Name and Lock Mode              *              * @return a builder.              */
specifier|public
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1
name|withDocument
parameter_list|(
specifier|final
name|Function
argument_list|<
name|Collection
argument_list|,
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|LockMode
argument_list|>
argument_list|>
name|documentLookupFun
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1
argument_list|(
name|documentLookupFun
argument_list|)
return|;
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_Exec
parameter_list|<
name|CR
parameter_list|>
block|{
specifier|private
name|Function
argument_list|<
name|Collection
argument_list|,
name|CR
argument_list|>
name|collectionOp
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1_Exec
parameter_list|(
specifier|final
name|Function
argument_list|<
name|Collection
argument_list|,
name|CR
argument_list|>
name|collectionOp
parameter_list|)
block|{
name|this
operator|.
name|collectionOp
operator|=
name|collectionOp
expr_stmt|;
block|}
comment|/**                  * A Document within the Collection on which to perform an operation.                  *                  * @param documentLookupFun A function which given a Collection, returns a tuple of Document Name and Lock Mode                  *                  * @return a builder.                  */
specifier|public
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1
name|withDocument
parameter_list|(
specifier|final
name|Function
argument_list|<
name|Collection
argument_list|,
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|LockMode
argument_list|>
argument_list|>
name|documentLookupFun
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1
argument_list|(
name|documentLookupFun
argument_list|)
return|;
block|}
comment|/**                  * Executes the Collection operation and returns the result.                  *                  * @return The result of the Collection operation.                  */
specifier|public
name|CR
name|doAll
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|EXistException
block|{
specifier|final
name|Tuple3
argument_list|<
name|Optional
argument_list|<
name|CR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|>
name|result
init|=
name|FluentBrokerAPIBuilder
operator|.
name|this
operator|.
name|doAll
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|collectionOp
argument_list|)
argument_list|,
literal|null
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|_1
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1
block|{
specifier|private
specifier|final
name|Function
argument_list|<
name|Collection
argument_list|,
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|LockMode
argument_list|>
argument_list|>
name|documentLookupFun
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1
parameter_list|(
specifier|final
name|Function
argument_list|<
name|Collection
argument_list|,
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|LockMode
argument_list|>
argument_list|>
name|documentLookupFun
parameter_list|)
block|{
name|this
operator|.
name|documentLookupFun
operator|=
name|documentLookupFun
expr_stmt|;
block|}
comment|/**                      * An operation to perform on a Collection and Document.                      *                      * The operation will be executed after both the Collection and Document are retrieved and locked.                      *                      * @param<CDR> The return type of the {@code collectionDocumentOp}                      * @param collectionDocumentOp The function to execute against the Collection and Document                      *                      * @return a builder.                      */
specifier|public
parameter_list|<
name|CDR
parameter_list|>
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec
argument_list|<
name|CDR
argument_list|>
name|execute
parameter_list|(
specifier|final
name|BiFunction
argument_list|<
name|Collection
argument_list|,
name|DocumentImpl
argument_list|,
name|CDR
argument_list|>
name|collectionDocumentOp
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec
argument_list|<>
argument_list|(
name|collectionDocumentOp
argument_list|)
return|;
block|}
comment|/**                      * Releases the Collection.                      *                      * @return a builder.                      */
specifier|public
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_NoExec
name|withoutCollection
parameter_list|()
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_NoExec
argument_list|()
return|;
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec
parameter_list|<
name|CDR
parameter_list|>
block|{
specifier|private
specifier|final
name|BiFunction
argument_list|<
name|Collection
argument_list|,
name|DocumentImpl
argument_list|,
name|CDR
argument_list|>
name|collectionDocumentOp
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec
parameter_list|(
specifier|final
name|BiFunction
argument_list|<
name|Collection
argument_list|,
name|DocumentImpl
argument_list|,
name|CDR
argument_list|>
name|collectionDocumentOp
parameter_list|)
block|{
name|this
operator|.
name|collectionDocumentOp
operator|=
name|collectionDocumentOp
expr_stmt|;
block|}
comment|/**                          * Releases the Collection.                          *                          * @return a builder.                          */
specifier|public
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec_Doc1
name|withoutCollection
parameter_list|()
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec_Doc1
argument_list|()
return|;
block|}
comment|/**                          * Executes the Collection operation, the Collection and Document operation, and returns the results.                          *                          * @return A tuple, where the first entry is the result of the Collection operation,                          *     and the second entry is the result of the Collection and Document operation.                          */
specifier|public
name|Tuple2
argument_list|<
name|CR
argument_list|,
name|CDR
argument_list|>
name|doAll
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|EXistException
block|{
specifier|final
name|Tuple3
argument_list|<
name|Optional
argument_list|<
name|CR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|CDR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|>
name|result
init|=
name|FluentBrokerAPIBuilder
operator|.
name|this
operator|.
name|doAll
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|collectionOp
argument_list|)
argument_list|,
name|documentLookupFun
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|collectionDocumentOp
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|result
operator|.
name|_1
operator|.
name|get
argument_list|()
argument_list|,
name|result
operator|.
name|_2
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec_Doc1
block|{
specifier|private
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec_Doc1
parameter_list|()
block|{
block|}
comment|/**                              * An operation to perform on a Document from the Collection.                              *                              * The operation will be executed after the Document is retrieved and locked, and after the Collection was released.                              *                              * @param<DR> The return type of the {@code documentOp}                              * @param documentOp The function to execute against the Document                              *                              * @return a builder.                              */
specifier|public
parameter_list|<
name|DR
parameter_list|>
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec_Doc1_Exec
argument_list|<
name|DR
argument_list|>
name|execute
parameter_list|(
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec_Doc1_Exec
argument_list|<>
argument_list|(
name|documentOp
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec_Doc1_Exec
parameter_list|<
name|DR
parameter_list|>
block|{
specifier|private
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_Exec_Doc1_Exec
parameter_list|(
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
parameter_list|)
block|{
name|this
operator|.
name|documentOp
operator|=
name|documentOp
expr_stmt|;
block|}
comment|/**                              * Executes the Collection operation, the Collection and Document operation, the Document Operation, and returns the results.                              *                              * @return A triple, where the first entry is the result of the Collection operation,                              *     the second entry is the result of the Collection and Document operation,                              *     and the third entry is the result of the Document operation.                              */
specifier|public
name|Tuple3
argument_list|<
name|CR
argument_list|,
name|CDR
argument_list|,
name|DR
argument_list|>
name|doAll
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|EXistException
block|{
specifier|final
name|Tuple3
argument_list|<
name|Optional
argument_list|<
name|CR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|CDR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|DR
argument_list|>
argument_list|>
name|result
init|=
name|FluentBrokerAPIBuilder
operator|.
name|this
operator|.
name|doAll
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|collectionOp
argument_list|)
argument_list|,
name|documentLookupFun
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|collectionDocumentOp
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|documentOp
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple3
argument_list|<>
argument_list|(
name|result
operator|.
name|_1
operator|.
name|get
argument_list|()
argument_list|,
name|result
operator|.
name|_2
operator|.
name|get
argument_list|()
argument_list|,
name|result
operator|.
name|_3
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_NoExec
block|{
specifier|private
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_NoExec
parameter_list|()
block|{
block|}
comment|/**                          * An operation to perform on a Document from the Collection.                          *                          * The operation will be executed after the Document is retrieved and locked, and after the Collection was released.                          *                          * @param<DR> The return type of the {@code documentOp}                          * @param documentOp The function to execute against the Document                          *                          * @return a builder.                          */
specifier|public
parameter_list|<
name|DR
parameter_list|>
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_NoExec_Exec
argument_list|<
name|DR
argument_list|>
name|execute
parameter_list|(
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_NoExec_Exec
argument_list|<>
argument_list|(
name|documentOp
argument_list|)
return|;
block|}
comment|/**                          * Executes the Collection operation and returns the result.                          *                          * @return The result of the Collection operation.                          */
specifier|public
name|CR
name|doAll
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|EXistException
block|{
specifier|final
name|Tuple3
argument_list|<
name|Optional
argument_list|<
name|CR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|>
name|result
init|=
name|FluentBrokerAPIBuilder
operator|.
name|this
operator|.
name|doAll
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|collectionOp
argument_list|)
argument_list|,
name|documentLookupFun
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|_1
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_NoExec_Exec
parameter_list|<
name|DR
parameter_list|>
block|{
specifier|private
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1_Exec_Doc1_NoExec_Exec
parameter_list|(
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
parameter_list|)
block|{
name|this
operator|.
name|documentOp
operator|=
name|documentOp
expr_stmt|;
block|}
comment|/**                              * Executes the Collection operation, the Document operation, and returns the results.                              *                              * @return A tuple, where the first entry is the result of the Collection operation,                              *     and the second entry is the result of the Document operation.                              */
specifier|public
name|Tuple2
argument_list|<
name|CR
argument_list|,
name|DR
argument_list|>
name|doAll
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|EXistException
block|{
specifier|final
name|Tuple3
argument_list|<
name|Optional
argument_list|<
name|CR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|DR
argument_list|>
argument_list|>
name|result
init|=
name|FluentBrokerAPIBuilder
operator|.
name|this
operator|.
name|doAll
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|collectionOp
argument_list|)
argument_list|,
name|documentLookupFun
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|documentOp
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|result
operator|.
name|_1
operator|.
name|get
argument_list|()
argument_list|,
name|result
operator|.
name|_3
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1
block|{
specifier|private
specifier|final
name|Function
argument_list|<
name|Collection
argument_list|,
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|LockMode
argument_list|>
argument_list|>
name|documentLookupFun
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1
parameter_list|(
specifier|final
name|Function
argument_list|<
name|Collection
argument_list|,
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|LockMode
argument_list|>
argument_list|>
name|documentLookupFun
parameter_list|)
block|{
name|this
operator|.
name|documentLookupFun
operator|=
name|documentLookupFun
expr_stmt|;
block|}
comment|/**                  * An operation to perform on a Collection and Document.                  *                  * The operation will be executed after both the Collection and Document are retrieved and locked.                  *                  * @param<CDR> The return type of the {@code collectionDocumentOp}                  * @param collectionDocumentOp The function to execute against the Collection and Document                  *                  * @return a builder.                  */
specifier|public
parameter_list|<
name|CDR
parameter_list|>
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec
argument_list|<
name|CDR
argument_list|>
name|execute
parameter_list|(
specifier|final
name|BiFunction
argument_list|<
name|Collection
argument_list|,
name|DocumentImpl
argument_list|,
name|CDR
argument_list|>
name|collectionDocumentOp
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec
argument_list|<>
argument_list|(
name|collectionDocumentOp
argument_list|)
return|;
block|}
comment|/**                  * Releases the Collection.                  *                  * @return a builder.                  */
specifier|public
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_NoExec
name|withoutCollection
parameter_list|()
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_NoExec
argument_list|()
return|;
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec
parameter_list|<
name|CDR
parameter_list|>
block|{
specifier|private
specifier|final
name|BiFunction
argument_list|<
name|Collection
argument_list|,
name|DocumentImpl
argument_list|,
name|CDR
argument_list|>
name|collectionDocumentOp
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec
parameter_list|(
specifier|final
name|BiFunction
argument_list|<
name|Collection
argument_list|,
name|DocumentImpl
argument_list|,
name|CDR
argument_list|>
name|collectionDocumentOp
parameter_list|)
block|{
name|this
operator|.
name|collectionDocumentOp
operator|=
name|collectionDocumentOp
expr_stmt|;
block|}
comment|/**                      * Releases the Collection.                      *                      * @return a builder.                      */
specifier|public
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec_NoExec
name|withoutCollection
parameter_list|()
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec_NoExec
argument_list|()
return|;
block|}
comment|/**                      * Executes the Collection and Document operation and returns the result.                      *                      * @return The result of the Collection and Document operation.                      */
specifier|public
name|CDR
name|doAll
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|EXistException
block|{
specifier|final
name|Tuple3
argument_list|<
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|CDR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|>
name|result
init|=
name|FluentBrokerAPIBuilder
operator|.
name|this
operator|.
name|doAll
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|documentLookupFun
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|collectionDocumentOp
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|_2
operator|.
name|get
argument_list|()
return|;
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec_NoExec
block|{
specifier|private
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec_NoExec
parameter_list|()
block|{
block|}
comment|/**                          * An operation to perform on a Document from the Collection.                          *                          * The operation will be executed after the Document is retrieved and locked, and after the Collection was released.                          *                          * @param<DR> The return type of the {@code documentOp}                          * @param documentOp The function to execute against the Document                          *                          * @return a builder.                          */
specifier|public
parameter_list|<
name|DR
parameter_list|>
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec_NoExec_Exec
argument_list|<
name|DR
argument_list|>
name|execute
parameter_list|(
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec_NoExec_Exec
argument_list|<>
argument_list|(
name|documentOp
argument_list|)
return|;
block|}
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec_NoExec_Exec
parameter_list|<
name|DR
parameter_list|>
block|{
specifier|private
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_Exec_NoExec_Exec
parameter_list|(
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
parameter_list|)
block|{
name|this
operator|.
name|documentOp
operator|=
name|documentOp
expr_stmt|;
block|}
comment|/**                          * Executes the Collection and Document operation, the Document operation, and returns the results.                          *                          * @return A tuple, where the first entry is the result of the Collection and Document operation,                          *     and the second entry is the result of the Document operation.                          */
specifier|public
name|Tuple2
argument_list|<
name|CDR
argument_list|,
name|DR
argument_list|>
name|doAll
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|EXistException
block|{
specifier|final
name|Tuple3
argument_list|<
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|CDR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|DR
argument_list|>
argument_list|>
name|result
init|=
name|FluentBrokerAPIBuilder
operator|.
name|this
operator|.
name|doAll
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|documentLookupFun
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|collectionDocumentOp
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|documentOp
argument_list|)
argument_list|)
decl_stmt|;
return|return
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|result
operator|.
name|_2
operator|.
name|get
argument_list|()
argument_list|,
name|result
operator|.
name|_3
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_NoExec
block|{
specifier|private
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_NoExec
parameter_list|()
block|{
block|}
comment|/**                      * An operation to perform on a Document from the Collection.                      *                      * The operation will be executed after the Document is retrieved and locked, and after the Collection was released.                      *                      * @param<DR> The return type of the {@code documentOp}                      * @param documentOp The function to execute against the Document                      *                      * @return a builder.                      */
specifier|public
parameter_list|<
name|DR
parameter_list|>
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_NoExec_Exec
argument_list|<
name|DR
argument_list|>
name|execute
parameter_list|(
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
parameter_list|)
block|{
return|return
operator|new
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_NoExec_Exec
argument_list|<>
argument_list|(
name|documentOp
argument_list|)
return|;
block|}
specifier|public
class|class
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_NoExec_Exec
parameter_list|<
name|DR
parameter_list|>
block|{
specifier|private
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
decl_stmt|;
specifier|private
name|FluentBrokerAPIBuilder_Col1_NoExec_Doc1_NoExec_Exec
parameter_list|(
specifier|final
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
name|documentOp
parameter_list|)
block|{
name|this
operator|.
name|documentOp
operator|=
name|documentOp
expr_stmt|;
block|}
comment|/**                          * Executes the Document operation and returns the result.                          *                          * @return The result of the Document operation.                          */
specifier|public
name|DR
name|doAll
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|EXistException
block|{
specifier|final
name|Tuple3
argument_list|<
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|DR
argument_list|>
argument_list|>
name|result
init|=
name|FluentBrokerAPIBuilder
operator|.
name|this
operator|.
name|doAll
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|documentLookupFun
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|documentOp
argument_list|)
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|_3
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
block|}
block|}
specifier|private
parameter_list|<
name|CR
parameter_list|,
name|CDR
parameter_list|,
name|DR
parameter_list|>
name|Tuple3
argument_list|<
name|Optional
argument_list|<
name|CR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|CDR
argument_list|>
argument_list|,
name|Optional
argument_list|<
name|DR
argument_list|>
argument_list|>
name|doAll
parameter_list|(
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|,
specifier|final
name|LockMode
name|collectionLockMode
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Function
argument_list|<
name|Collection
argument_list|,
name|CR
argument_list|>
argument_list|>
name|collectionFun
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Function
argument_list|<
name|Collection
argument_list|,
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|LockMode
argument_list|>
argument_list|>
name|documentLookupFun
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|BiFunction
argument_list|<
name|Collection
argument_list|,
name|DocumentImpl
argument_list|,
name|CDR
argument_list|>
argument_list|>
name|collectionDocumentFun
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Function
argument_list|<
name|DocumentImpl
argument_list|,
name|DR
argument_list|>
argument_list|>
name|documentFun
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
block|{
specifier|final
name|Optional
argument_list|<
name|CR
argument_list|>
name|collectionFunResult
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|CDR
argument_list|>
name|collectionDocumentFunResult
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|DR
argument_list|>
name|documentFunResult
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|brokerPool
operator|.
name|getBroker
argument_list|()
init|)
block|{
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionUri
argument_list|,
name|collectionLockMode
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"No such Collection: "
operator|+
name|collectionUri
argument_list|)
throw|;
block|}
specifier|final
name|Collection
name|c
init|=
name|collection
decl_stmt|;
comment|// needed final for closures
name|collectionFunResult
operator|=
name|collectionFun
operator|.
name|map
argument_list|(
name|cf
lambda|->
name|cf
operator|.
name|apply
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionDocumentFun
operator|.
name|isPresent
argument_list|()
operator|||
name|documentFun
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|LockMode
argument_list|>
name|docAccess
init|=
name|documentLookupFun
operator|.
name|apply
argument_list|(
name|collection
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|collection
operator|.
name|getDocumentWithLock
argument_list|(
name|broker
argument_list|,
name|docAccess
operator|.
name|_1
argument_list|,
name|docAccess
operator|.
name|_2
argument_list|)
init|)
block|{
specifier|final
name|DocumentImpl
name|document
init|=
name|lockedDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|collectionDocumentFunResult
operator|=
name|collectionDocumentFun
operator|.
name|map
argument_list|(
name|cdf
lambda|->
name|cdf
operator|.
name|apply
argument_list|(
name|c
argument_list|,
name|document
argument_list|)
argument_list|)
expr_stmt|;
comment|// release the Collection lock early
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
name|collection
operator|=
literal|null
expr_stmt|;
comment|// signal closed
name|documentFunResult
operator|=
name|documentFun
operator|.
name|map
argument_list|(
name|df
lambda|->
name|df
operator|.
name|apply
argument_list|(
name|document
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|collectionDocumentFunResult
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
name|documentFunResult
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// catch-all to close the collection in case of an exception and it hasn't been closed
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
name|collection
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|Tuple3
argument_list|<>
argument_list|(
name|collectionFunResult
argument_list|,
name|collectionDocumentFunResult
argument_list|,
name|documentFunResult
argument_list|)
return|;
block|}
comment|//        public class FluentBrokerAPIBuilder_ColN {
comment|//            private final Tuple2<XmldbURI, LockMode> collectionsAndLockModes[];
comment|//
comment|//            private FluentBrokerAPIBuilder_ColN(final Tuple2<XmldbURI, LockMode>... collectionsAndLockModes) {
comment|//                this.collectionsAndLockModes = collectionsAndLockModes;
comment|//            }
comment|//
comment|//            public Object[] execute(final Function<Collection, Object>... collectionOps) {
comment|//                if(collectionsAndLockModes.length != collectionOps.length) {
comment|//                    throw new IllegalStateException();
comment|//                }
comment|//            }
comment|//        }
block|}
block|}
end_class

end_unit

