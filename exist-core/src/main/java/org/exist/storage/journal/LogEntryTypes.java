begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  *  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|ints
operator|.
name|Int2ObjectMap
import|;
end_import

begin_import
import|import
name|it
operator|.
name|unimi
operator|.
name|dsi
operator|.
name|fastutil
operator|.
name|ints
operator|.
name|Int2ObjectOpenHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Checkpoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TxnAbort
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TxnCommit
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TxnStart
import|;
end_import

begin_comment
comment|/**  * Registry for log entry types. All classes that can be read from or written to the journal  * have to be registered here. The recovery manager uses this information to create  * the correct {@link org.exist.storage.journal.Loggable} object when reading the log.  *  * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|LogEntryTypes
block|{
specifier|public
specifier|final
specifier|static
name|byte
name|TXN_START
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|TXN_COMMIT
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|CHECKPOINT
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|byte
name|TXN_ABORT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Int2ObjectMap
argument_list|<
name|BiFunction
argument_list|<
name|DBBroker
argument_list|,
name|Long
argument_list|,
name|Loggable
argument_list|>
argument_list|>
name|entryTypes
init|=
operator|new
name|Int2ObjectOpenHashMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
comment|// register the common entry types
name|entryTypes
operator|.
name|put
argument_list|(
name|TXN_START
argument_list|,
name|TxnStart
operator|::
operator|new
argument_list|)
expr_stmt|;
name|entryTypes
operator|.
name|put
argument_list|(
name|TXN_COMMIT
argument_list|,
name|TxnCommit
operator|::
operator|new
argument_list|)
expr_stmt|;
name|entryTypes
operator|.
name|put
argument_list|(
name|CHECKPOINT
argument_list|,
name|Checkpoint
operator|::
operator|new
argument_list|)
expr_stmt|;
name|entryTypes
operator|.
name|put
argument_list|(
name|TXN_ABORT
argument_list|,
name|TxnAbort
operator|::
operator|new
argument_list|)
expr_stmt|;
block|}
comment|/**      * Add an entry type to the registry.      *      * @param type The type of the Loggable      * @param cstr Function for constructing a Loggable of the indicated type      */
specifier|public
specifier|final
specifier|static
name|void
name|addEntryType
parameter_list|(
specifier|final
name|byte
name|type
parameter_list|,
specifier|final
name|BiFunction
argument_list|<
name|DBBroker
argument_list|,
name|Long
argument_list|,
name|Loggable
argument_list|>
name|cstr
parameter_list|)
block|{
name|entryTypes
operator|.
name|put
argument_list|(
name|type
argument_list|,
name|cstr
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a new loggable for the given type.      *      * @param broker The broker that will perform the operation      * @param type The type of the loggable      * @param transactionId the id of the current transaction      *      * @return The loggable for the type, or null if no loggable for the type is known      * @throws LogException in case of errors creating a new loggable      */
specifier|public
specifier|final
specifier|static
name|Loggable
name|create
parameter_list|(
specifier|final
name|byte
name|type
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|long
name|transactionId
parameter_list|)
throws|throws
name|LogException
block|{
specifier|final
name|BiFunction
argument_list|<
name|DBBroker
argument_list|,
name|Long
argument_list|,
name|Loggable
argument_list|>
name|cstr
init|=
name|entryTypes
operator|.
name|get
argument_list|(
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|cstr
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|cstr
operator|.
name|apply
argument_list|(
name|broker
argument_list|,
name|transactionId
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

