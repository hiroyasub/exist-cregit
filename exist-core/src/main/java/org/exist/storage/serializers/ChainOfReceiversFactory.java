begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2016 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * List of {@link ChainOfReceivers}.  */
end_comment

begin_class
specifier|public
class|class
name|ChainOfReceiversFactory
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ChainOfReceiversFactory
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ChainOfReceivers
name|first
init|=
literal|null
decl_stmt|;
specifier|private
name|ChainOfReceivers
name|last
init|=
literal|null
decl_stmt|;
specifier|public
name|ChainOfReceiversFactory
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|classes
parameter_list|)
block|{
name|ChainOfReceivers
name|listener
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|className
range|:
name|classes
control|)
block|{
try|try
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|listenerClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|ChainOfReceivers
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|listenerClass
argument_list|)
condition|)
block|{
name|listener
operator|=
operator|(
name|ChainOfReceivers
operator|)
name|listenerClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|listener
expr_stmt|;
name|last
operator|=
name|listener
expr_stmt|;
block|}
else|else
block|{
name|last
operator|.
name|setNextInChain
argument_list|(
name|listener
argument_list|)
expr_stmt|;
name|last
operator|=
name|listener
expr_stmt|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to instantiate class "
operator|+
name|listenerClass
operator|.
name|getName
argument_list|()
operator|+
literal|": it is not a subclass of ChainOfReceivers"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"An exception was caught while trying to instantiate a chain of receivers: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|ChainOfReceivers
name|getFirst
parameter_list|()
block|{
return|return
name|first
return|;
block|}
specifier|public
name|ChainOfReceivers
name|getLast
parameter_list|()
block|{
return|return
name|last
return|;
block|}
block|}
end_class

end_unit

