begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2011 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_interface
specifier|public
interface|interface
name|FunctionCall
extends|extends
name|Function
block|{
comment|/** 	 * Called by {@link Context} to resolve a call to a function that has not 	 * yet been declared. XQueryContext remembers all calls to undeclared functions 	 * and tries to resolve them after parsing has completed. 	 *  	 * @param functionDef the function definition. 	 * 	 * @throws XPathException if an error occurs whilst resolving the forward references 	 */
specifier|public
name|void
name|resolveForwardReference
parameter_list|(
name|Function
name|functionDef
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|QName
name|getQName
parameter_list|()
function_decl|;
comment|/** 	 * Evaluate the function. 	 * 	 * @param contextSequence the context sequence. 	 * @param contextItem the context item 	 * @param seq the sequence 	 * 	 * @return the result sequence. 	 * 	 * @throws XPathException if an error occurs during evaluatiion 	 */
specifier|public
name|Sequence
name|evalFunction
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|,
name|Sequence
index|[]
name|seq
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|Sequence
name|evalFunction
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|,
name|Sequence
index|[]
name|seq
parameter_list|,
name|DocumentSet
index|[]
name|contextDocs
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|boolean
name|isRecursive
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

