begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|restore
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|BackupDescriptor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|restore
operator|.
name|listener
operator|.
name|RestoreListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentTypeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedCollectionLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedDocumentLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|EXistInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLReaderPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|URIUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|DefaultHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|// TODO(AR) consider merging with org.exist.backup.restore.SystemImportHandler
end_comment

begin_comment
comment|/**  * SAX Content Handler that can act upon  * and process Backup Descriptors to  * restore the contents of the backup  * into the database.  */
end_comment

begin_class
specifier|public
class|class
name|RestoreHandler
extends|extends
name|DefaultHandler
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|RestoreHandler
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|STRICT_URI_VERSION
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|BLOB_STORE_VERSION
init|=
literal|2
decl_stmt|;
specifier|private
specifier|final
name|DBBroker
name|broker
decl_stmt|;
annotation|@
name|Nullable
specifier|private
specifier|final
name|Txn
name|transaction
decl_stmt|;
specifier|private
specifier|final
name|BackupDescriptor
name|descriptor
decl_stmt|;
specifier|private
specifier|final
name|RestoreListener
name|listener
decl_stmt|;
comment|//handler state
specifier|private
name|int
name|version
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|deduplicateBlobs
init|=
literal|false
decl_stmt|;
specifier|private
name|XmldbURI
name|currentCollectionUri
init|=
literal|null
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|DeferredPermission
argument_list|>
name|deferredPermissions
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|pathsToIgnore
decl_stmt|;
comment|/**      * @param broker the database broker      * @param transaction the transaction to use for the entire restore,      *                    or null if restoring each collection/resource      *                    should occur in its own transaction      * @param descriptor the backup descriptor to start restoring from      * @param listener the listener to report restore events to      * @param pathsToIgnore database paths to ignore in the backup      */
specifier|public
name|RestoreHandler
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|BackupDescriptor
name|descriptor
parameter_list|,
specifier|final
name|RestoreListener
name|listener
parameter_list|,
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|pathsToIgnore
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|this
operator|.
name|transaction
operator|=
name|transaction
expr_stmt|;
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
name|this
operator|.
name|listener
operator|=
name|listener
expr_stmt|;
name|this
operator|.
name|pathsToIgnore
operator|=
name|pathsToIgnore
expr_stmt|;
block|}
comment|/**      * Either reuses the provided transaction      * in a safe manner or starts a new transaction.      */
specifier|private
name|Txn
name|beginTransaction
parameter_list|()
block|{
if|if
condition|(
name|transaction
operator|==
literal|null
condition|)
block|{
return|return
name|broker
operator|.
name|continueOrBeginTransaction
argument_list|()
return|;
block|}
return|return
operator|new
name|Txn
operator|.
name|ReusableTxn
argument_list|(
name|transaction
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|listener
operator|.
name|processingDescriptor
argument_list|(
name|descriptor
operator|.
name|getSymbolicPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qName
parameter_list|,
specifier|final
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
comment|//only process entries in the exist namespace
if|if
condition|(
name|namespaceURI
operator|!=
literal|null
operator|&&
operator|!
name|namespaceURI
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"resource"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
specifier|final
name|DeferredPermission
name|df
decl_stmt|;
if|if
condition|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|df
operator|=
name|restoreCollectionEntry
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|df
operator|=
name|restoreResourceEntry
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
name|deferredPermissions
operator|.
name|push
argument_list|(
name|df
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"subcollection"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|restoreSubCollectionEntry
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"deleted"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|restoreDeletedEntry
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
literal|"ace"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|addACEToDeferredPermissions
argument_list|(
name|atts
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|namespaceURI
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
operator|&&
operator|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|||
literal|"resource"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
operator|)
condition|)
block|{
name|setDeferredPermissions
argument_list|()
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
specifier|private
name|DeferredPermission
name|restoreCollectionEntry
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Collection requires a name attribute"
argument_list|)
throw|;
block|}
specifier|final
name|String
name|owner
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"owner"
argument_list|,
name|SecurityManager
operator|.
name|SYSTEM
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"group"
argument_list|,
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|mode
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"mode"
argument_list|,
literal|"644"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|created
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"created"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|strVersion
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
if|if
condition|(
name|strVersion
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|this
operator|.
name|version
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|strVersion
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Could not parse version number for Collection '"
operator|+
name|name
operator|+
literal|"', defaulting to version 0"
decl_stmt|;
name|listener
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|this
operator|.
name|version
operator|=
literal|0
expr_stmt|;
block|}
block|}
try|try
block|{
name|listener
operator|.
name|createdCollection
argument_list|(
name|name
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
name|collUri
decl_stmt|;
if|if
condition|(
name|version
operator|>=
name|STRICT_URI_VERSION
condition|)
block|{
name|collUri
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|collUri
operator|=
name|URIUtils
operator|.
name|encodeXmldbUriFor
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Could not parse document name into a URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
block|}
if|if
condition|(
name|version
operator|>=
name|BLOB_STORE_VERSION
condition|)
block|{
name|this
operator|.
name|deduplicateBlobs
operator|=
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"deduplicate-blobs"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|deduplicateBlobs
operator|=
literal|false
expr_stmt|;
block|}
specifier|final
name|LockManager
name|lockManager
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|beginTransaction
argument_list|()
init|;
specifier|final
name|ManagedCollectionLock
name|colLock
init|=
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|collUri
argument_list|)
init|)
block|{
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|collUri
argument_list|)
expr_stmt|;
name|collection
operator|.
name|setCreationTime
argument_list|(
name|getDateFromXSDateTimeStringForItem
argument_list|(
name|created
argument_list|,
name|name
argument_list|)
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
name|this
operator|.
name|currentCollectionUri
operator|=
name|collection
operator|.
name|getURI
argument_list|()
expr_stmt|;
block|}
specifier|final
name|DeferredPermission
name|deferredPermission
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION
argument_list|)
condition|)
block|{
comment|//prevents restore of a backup from changing System collection ownership
name|deferredPermission
operator|=
operator|new
name|CollectionDeferredPermission
argument_list|(
name|listener
argument_list|,
name|currentCollectionUri
argument_list|,
name|SecurityManager
operator|.
name|SYSTEM
argument_list|,
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|mode
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deferredPermission
operator|=
operator|new
name|CollectionDeferredPermission
argument_list|(
name|listener
argument_list|,
name|currentCollectionUri
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|mode
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|deferredPermission
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|LockException
decl||
name|TransactionException
decl||
name|PermissionDeniedException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"An unrecoverable error occurred while restoring collection '"
operator|+
name|name
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|". Aborting restore!"
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|listener
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SAXException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|DeferredPermission
name|restoreResourceEntry
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|skip
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"skip"
argument_list|)
decl_stmt|;
comment|// Don't process entries which should be skipped
if|if
condition|(
name|skip
operator|!=
literal|null
operator|&&
operator|!
literal|"no"
operator|.
name|equals
argument_list|(
name|skip
argument_list|)
condition|)
block|{
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
specifier|final
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Resource requires a name attribute"
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|xmlType
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
name|s
operator|.
name|equals
argument_list|(
literal|"XMLResource"
argument_list|)
argument_list|)
operator|.
name|isPresent
argument_list|()
decl_stmt|;
specifier|final
name|String
name|owner
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"owner"
argument_list|,
name|SecurityManager
operator|.
name|SYSTEM
argument_list|)
decl_stmt|;
specifier|final
name|String
name|group
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"group"
argument_list|,
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|)
decl_stmt|;
specifier|final
name|String
name|perms
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"mode"
argument_list|,
literal|"644"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|filename
init|=
name|getAttr
argument_list|(
name|atts
argument_list|,
literal|"filename"
argument_list|,
name|name
argument_list|)
decl_stmt|;
specifier|final
name|String
name|mimeType
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"mimetype"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|created
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"created"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|modified
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"modified"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|publicId
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"publicid"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|systemId
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"systemid"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|nameDocType
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"namedoctype"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|docName
decl_stmt|;
if|if
condition|(
name|version
operator|>=
name|STRICT_URI_VERSION
condition|)
block|{
name|docName
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|docName
operator|=
name|URIUtils
operator|.
name|encodeXmldbUriFor
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Could not parse document name into a URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
name|listener
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
block|}
specifier|final
name|EXistInputSource
name|is
decl_stmt|;
if|if
condition|(
name|deduplicateBlobs
operator|&&
operator|!
name|xmlType
condition|)
block|{
specifier|final
name|String
name|blobId
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"blob-id"
argument_list|)
decl_stmt|;
name|is
operator|=
name|descriptor
operator|.
name|getBlobInputSource
argument_list|(
name|blobId
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Failed to restore resource '"
operator|+
name|name
operator|+
literal|"'\nfrom BLOB '"
operator|+
name|blobId
operator|+
literal|"'.\nReason: Unable to obtain its EXistInputSource"
decl_stmt|;
name|listener
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
block|}
else|else
block|{
name|is
operator|=
name|descriptor
operator|.
name|getInputSource
argument_list|(
name|filename
argument_list|)
expr_stmt|;
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Failed to restore resource '"
operator|+
name|name
operator|+
literal|"'\nfrom file '"
operator|+
name|descriptor
operator|.
name|getSymbolicPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
operator|+
literal|"'.\nReason: Unable to obtain its EXistInputSource"
decl_stmt|;
name|listener
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
block|}
name|Date
name|dateCreated
init|=
literal|null
decl_stmt|;
name|Date
name|dateModified
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|created
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dateCreated
operator|=
operator|(
operator|new
name|DateTimeValue
argument_list|(
name|created
argument_list|)
operator|)
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|xpe
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Illegal creation date. Ignoring date..."
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|modified
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|dateModified
operator|=
operator|(
operator|new
name|DateTimeValue
argument_list|(
name|modified
argument_list|)
operator|)
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|xpe
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Illegal modification date. Ignoring date..."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|XmldbURI
name|docUri
init|=
name|currentCollectionUri
operator|.
name|append
argument_list|(
name|docName
argument_list|)
decl_stmt|;
try|try
block|{
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|beginTransaction
argument_list|()
init|)
block|{
name|boolean
name|validated
init|=
literal|false
decl_stmt|;
try|try
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|currentCollectionUri
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|;
specifier|final
name|ManagedDocumentLock
name|docLock
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|acquireDocumentWriteLock
argument_list|(
name|docUri
argument_list|)
init|)
block|{
if|if
condition|(
name|xmlType
condition|)
block|{
specifier|final
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docName
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|validated
operator|=
literal|true
expr_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
if|if
condition|(
name|dateCreated
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setCreated
argument_list|(
name|dateCreated
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dateModified
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLastModified
argument_list|(
name|dateModified
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publicId
operator|!=
literal|null
operator|||
name|systemId
operator|!=
literal|null
condition|)
block|{
specifier|final
name|DocumentType
name|docType
init|=
operator|new
name|DocumentTypeImpl
argument_list|(
name|nameDocType
argument_list|,
name|publicId
argument_list|,
name|systemId
argument_list|)
decl_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setDocType
argument_list|(
name|docType
argument_list|)
expr_stmt|;
block|}
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
specifier|final
name|InputStream
name|stream
init|=
name|is
operator|.
name|getByteStream
argument_list|()
init|)
block|{
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docName
argument_list|,
name|stream
argument_list|,
name|mimeType
argument_list|,
operator|-
literal|1
argument_list|,
name|dateCreated
argument_list|,
name|dateModified
argument_list|)
expr_stmt|;
block|}
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// NOTE: early release of Collection lock inline with Asymmetrical Locking scheme
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|/*                         This allows us to commit the transaction (so the restore doesn't stop)                         and still throw an exception to skip over resources that didn't                         validate. This preserves eXist-db's previous behaviour                         of "best effort attempt" when restoring a backup,                         rather than an ACID "all or nothing" approach.                      */
if|if
condition|(
operator|!
name|validated
condition|)
block|{
comment|// because `validated == false` we know that there have only been reads on the transaction/sub-transaction!
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|DeferredPermission
name|deferredPermission
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION
argument_list|)
condition|)
block|{
comment|//prevents restore of a backup from changing system collection resource ownership
name|deferredPermission
operator|=
operator|new
name|ResourceDeferredPermission
argument_list|(
name|listener
argument_list|,
name|docUri
argument_list|,
name|SecurityManager
operator|.
name|SYSTEM
argument_list|,
name|SecurityManager
operator|.
name|DBA_GROUP
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|perms
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deferredPermission
operator|=
operator|new
name|ResourceDeferredPermission
argument_list|(
name|listener
argument_list|,
name|docUri
argument_list|,
name|owner
argument_list|,
name|group
argument_list|,
name|Integer
operator|.
name|parseInt
argument_list|(
name|perms
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|listener
operator|.
name|restoredResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|deferredPermission
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
specifier|final
name|String
name|message
init|=
name|String
operator|.
name|format
argument_list|(
literal|"Failed to restore resource '%s'\nfrom file '%s'.\nReason: %s"
argument_list|,
name|name
argument_list|,
name|descriptor
operator|.
name|getSymbolicPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
decl_stmt|;
name|listener
operator|.
name|warn
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
operator|new
name|SkippedEntryDeferredPermission
argument_list|()
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|restoreSubCollectionEntry
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|name
decl_stmt|;
if|if
condition|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"filename"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|name
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"filename"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
block|}
comment|// exclude /db/system collection and sub-collections, as these have already been restored
if|if
condition|(
operator|(
name|XmldbURI
operator|.
name|DB
operator|.
name|equals
argument_list|(
name|currentCollectionUri
argument_list|)
operator|&&
literal|"system"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
operator|||
operator|(
name|XmldbURI
operator|.
name|SYSTEM
operator|.
name|equals
argument_list|(
name|currentCollectionUri
argument_list|)
operator|&&
literal|"security"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
condition|)
block|{
return|return;
block|}
comment|//parse the sub-collection descriptor and restore
specifier|final
name|BackupDescriptor
name|subDescriptor
init|=
name|descriptor
operator|.
name|getChildBackupDescriptor
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|subDescriptor
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|pathsToIgnore
operator|.
name|contains
argument_list|(
name|subDescriptor
operator|.
name|getSymbolicPath
argument_list|()
argument_list|)
condition|)
block|{
name|listener
operator|.
name|info
argument_list|(
literal|"Skipping app path "
operator|+
name|subDescriptor
operator|.
name|getSymbolicPath
argument_list|()
operator|+
literal|". Newer version "
operator|+
literal|"is already installed."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|XMLReaderPool
name|parserPool
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|parserPool
operator|.
name|borrowXMLReader
argument_list|()
expr_stmt|;
specifier|final
name|EXistInputSource
name|is
init|=
name|subDescriptor
operator|.
name|getInputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setEncoding
argument_list|(
name|UTF_8
operator|.
name|displayName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RestoreHandler
name|handler
init|=
operator|new
name|RestoreHandler
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|subDescriptor
argument_list|,
name|listener
argument_list|,
name|pathsToIgnore
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXParseException
name|se
parameter_list|)
block|{
name|listener
operator|.
name|error
argument_list|(
literal|"SAX exception while reading sub-collection "
operator|+
name|subDescriptor
operator|.
name|getSymbolicPath
argument_list|()
operator|+
literal|" for processing: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|listener
operator|.
name|error
argument_list|(
literal|"Could not read sub-collection for processing: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|parserPool
operator|.
name|returnXMLReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|listener
operator|.
name|error
argument_list|(
literal|"Collection "
operator|+
name|descriptor
operator|.
name|getSymbolicPath
argument_list|(
name|name
argument_list|,
literal|false
argument_list|)
operator|+
literal|" does not exist or is not readable."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|restoreDeletedEntry
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|type
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"collection"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
try|try
block|{
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|beginTransaction
argument_list|()
init|;
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|currentCollectionUri
operator|.
name|append
argument_list|(
name|name
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|triggersEnabled
init|=
name|broker
operator|.
name|isTriggersEnabled
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|setTriggersEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// restore triggers enabled setting
name|broker
operator|.
name|setTriggersEnabled
argument_list|(
name|triggersEnabled
argument_list|)
expr_stmt|;
block|}
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|IOException
decl||
name|TriggerException
decl||
name|TransactionException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Failed to remove deleted collection: "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
literal|"resource"
operator|.
name|equals
argument_list|(
name|type
argument_list|)
condition|)
block|{
specifier|final
name|XmldbURI
name|docName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|name
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|beginTransaction
argument_list|()
init|;
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|currentCollectionUri
operator|.
name|append
argument_list|(
name|name
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|;
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|collection
operator|.
name|getDocumentWithLock
argument_list|(
name|broker
argument_list|,
name|docName
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
comment|//Check that the document exists
if|if
condition|(
name|lockedDocument
operator|!=
literal|null
condition|)
block|{
specifier|final
name|boolean
name|triggersEnabled
init|=
name|broker
operator|.
name|isTriggersEnabled
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|setTriggersEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|xmlType
init|=
operator|!
operator|(
name|lockedDocument
operator|.
name|getDocument
argument_list|()
operator|instanceof
name|BinaryDocument
operator|)
decl_stmt|;
if|if
condition|(
name|xmlType
condition|)
block|{
name|collection
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|.
name|removeBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|docName
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
comment|// restore triggers enabled setting
name|broker
operator|.
name|setTriggersEnabled
argument_list|(
name|triggersEnabled
argument_list|)
expr_stmt|;
block|}
block|}
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
comment|// NOTE: early release of Collection lock inline with Asymmetrical Locking scheme
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|TransactionException
decl||
name|TriggerException
decl||
name|LockException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|listener
operator|.
name|warn
argument_list|(
literal|"Failed to remove deleted resource: "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addACEToDeferredPermissions
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"index"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|ACLPermission
operator|.
name|ACE_TARGET
name|target
init|=
name|ACLPermission
operator|.
name|ACE_TARGET
operator|.
name|valueOf
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"target"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|String
name|who
init|=
name|atts
operator|.
name|getValue
argument_list|(
literal|"who"
argument_list|)
decl_stmt|;
specifier|final
name|ACLPermission
operator|.
name|ACE_ACCESS_TYPE
name|access_type
init|=
name|ACLPermission
operator|.
name|ACE_ACCESS_TYPE
operator|.
name|valueOf
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"access_type"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|atts
operator|.
name|getValue
argument_list|(
literal|"mode"
argument_list|)
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|deferredPermissions
operator|.
name|peek
argument_list|()
operator|.
name|addACE
argument_list|(
name|index
argument_list|,
name|target
argument_list|,
name|who
argument_list|,
name|access_type
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setDeferredPermissions
parameter_list|()
block|{
specifier|final
name|DeferredPermission
name|deferredPermission
init|=
name|deferredPermissions
operator|.
name|pop
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|beginTransaction
argument_list|()
init|)
block|{
name|deferredPermission
operator|.
name|apply
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransactionException
name|e
parameter_list|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"ERROR: Failed to set permissions on: '"
operator|+
name|deferredPermission
operator|.
name|getTarget
argument_list|()
operator|+
literal|"'."
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|listener
operator|.
name|warn
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Date
name|getDateFromXSDateTimeStringForItem
parameter_list|(
specifier|final
name|String
name|strXSDateTime
parameter_list|,
specifier|final
name|String
name|itemName
parameter_list|)
block|{
name|Date
name|date_created
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|strXSDateTime
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|date_created
operator|=
operator|new
name|DateTimeValue
argument_list|(
name|strXSDateTime
argument_list|)
operator|.
name|getDate
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e2
parameter_list|)
block|{
block|}
block|}
if|if
condition|(
name|date_created
operator|==
literal|null
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Could not parse created date '"
operator|+
name|strXSDateTime
operator|+
literal|"' from backup for: '"
operator|+
name|itemName
operator|+
literal|"', using current time!"
decl_stmt|;
name|listener
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|date_created
operator|=
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
return|return
name|date_created
return|;
block|}
specifier|private
name|String
name|getAttr
parameter_list|(
specifier|final
name|Attributes
name|atts
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|fallback
parameter_list|)
block|{
specifier|final
name|String
name|value
init|=
name|atts
operator|.
name|getValue
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
literal|null
condition|)
block|{
return|return
name|fallback
return|;
block|}
return|return
name|value
return|;
block|}
block|}
end_class

end_unit

