begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2008-2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|repo
operator|.
name|RepoBackup
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|EXistInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_class
specifier|public
class|class
name|FileSystemBackupDescriptor
extends|extends
name|AbstractBackupDescriptor
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|()
decl_stmt|;
specifier|protected
name|Path
name|root
decl_stmt|;
specifier|protected
name|Path
name|descriptor
decl_stmt|;
specifier|public
name|FileSystemBackupDescriptor
parameter_list|(
specifier|final
name|Path
name|root
parameter_list|,
specifier|final
name|Path
name|descriptor
parameter_list|)
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
operator|!
name|FileUtils
operator|.
name|fileName
argument_list|(
name|descriptor
argument_list|)
operator|.
name|equals
argument_list|(
name|BackupDescriptor
operator|.
name|COLLECTION_DESCRIPTOR
argument_list|)
operator|||
name|Files
operator|.
name|isDirectory
argument_list|(
name|descriptor
argument_list|)
operator|||
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|descriptor
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|descriptor
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" is not a valid collection descriptor"
argument_list|)
throw|;
block|}
name|this
operator|.
name|descriptor
operator|=
name|descriptor
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
comment|// Count number of files
name|countFileEntries
argument_list|(
name|descriptor
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|BackupDescriptor
name|getChildBackupDescriptor
parameter_list|(
specifier|final
name|String
name|describedItem
parameter_list|)
block|{
specifier|final
name|Path
name|child
init|=
name|descriptor
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|describedItem
argument_list|)
operator|.
name|resolve
argument_list|(
name|BackupDescriptor
operator|.
name|COLLECTION_DESCRIPTOR
argument_list|)
decl_stmt|;
name|BackupDescriptor
name|bd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bd
operator|=
operator|new
name|FileSystemBackupDescriptor
argument_list|(
name|root
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// DoNothing(R)
block|}
return|return
name|bd
return|;
block|}
annotation|@
name|Override
specifier|public
name|BackupDescriptor
name|getBackupDescriptor
parameter_list|(
specifier|final
name|String
name|describedItem
parameter_list|)
block|{
specifier|final
name|String
name|topDir
init|=
name|descriptor
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|subDir
init|=
name|topDir
operator|+
name|describedItem
decl_stmt|;
specifier|final
name|String
name|desc
init|=
name|subDir
operator|+
literal|'/'
operator|+
name|BackupDescriptor
operator|.
name|COLLECTION_DESCRIPTOR
decl_stmt|;
name|BackupDescriptor
name|bd
init|=
literal|null
decl_stmt|;
try|try
block|{
name|bd
operator|=
operator|new
name|FileSystemBackupDescriptor
argument_list|(
name|root
argument_list|,
name|Paths
operator|.
name|get
argument_list|(
name|desc
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|FileNotFoundException
name|fnfe
parameter_list|)
block|{
comment|// DoNothing(R)
block|}
return|return
name|bd
return|;
block|}
annotation|@
name|Override
specifier|public
name|EXistInputSource
name|getInputSource
parameter_list|()
block|{
return|return
operator|new
name|FileInputSource
argument_list|(
name|descriptor
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|EXistInputSource
name|getInputSource
parameter_list|(
specifier|final
name|String
name|describedItem
parameter_list|)
block|{
specifier|final
name|Path
name|child
init|=
name|descriptor
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|describedItem
argument_list|)
decl_stmt|;
name|EXistInputSource
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|child
argument_list|)
operator|)
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|child
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|FileInputSource
argument_list|(
name|child
argument_list|)
expr_stmt|;
block|}
return|return
name|is
return|;
block|}
annotation|@
name|Override
specifier|public
name|EXistInputSource
name|getBlobInputSource
parameter_list|(
specifier|final
name|String
name|blobId
parameter_list|)
block|{
specifier|final
name|Path
name|blobFile
init|=
name|root
operator|.
name|resolve
argument_list|(
literal|"blob"
argument_list|)
operator|.
name|resolve
argument_list|(
name|blobId
argument_list|)
decl_stmt|;
name|EXistInputSource
name|is
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|blobFile
argument_list|)
operator|)
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|blobFile
argument_list|)
condition|)
block|{
name|is
operator|=
operator|new
name|FileInputSource
argument_list|(
name|blobFile
argument_list|)
expr_stmt|;
block|}
return|return
name|is
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSymbolicPath
parameter_list|()
block|{
return|return
name|descriptor
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSymbolicPath
parameter_list|(
specifier|final
name|String
name|describedItem
parameter_list|,
specifier|final
name|boolean
name|isChildDescriptor
parameter_list|)
block|{
name|Path
name|resbase
init|=
name|descriptor
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|describedItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|isChildDescriptor
condition|)
block|{
name|resbase
operator|=
name|resbase
operator|.
name|resolve
argument_list|(
name|BackupDescriptor
operator|.
name|COLLECTION_DESCRIPTOR
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|resbase
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Properties
name|getProperties
parameter_list|()
throws|throws
name|IOException
block|{
name|Path
name|dir
init|=
name|descriptor
operator|.
name|getParent
argument_list|()
decl_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|dir
operator|=
name|dir
operator|.
name|getParent
argument_list|()
expr_stmt|;
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|propFile
init|=
name|dir
operator|.
name|resolve
argument_list|(
name|BACKUP_PROPERTIES
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|propFile
argument_list|)
condition|)
block|{
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|propFile
argument_list|)
init|)
block|{
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
return|return
name|properties
return|;
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getParentDir
parameter_list|()
block|{
return|return
operator|(
name|descriptor
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
operator|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|descriptor
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
argument_list|)
operator|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Path
name|getRepoBackup
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|archive
init|=
name|descriptor
operator|.
name|getParent
argument_list|()
operator|.
name|getParent
argument_list|()
operator|.
name|resolve
argument_list|(
name|RepoBackup
operator|.
name|REPO_ARCHIVE
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|archive
argument_list|)
condition|)
block|{
return|return
name|archive
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|countFileEntries
parameter_list|(
specifier|final
name|Path
name|descriptor
parameter_list|)
block|{
comment|// Only count files from top level.
if|if
condition|(
operator|!
name|descriptor
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"/db/"
operator|+
name|COLLECTION_DESCRIPTOR
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
specifier|final
name|DescriptorResourceCounter
name|descriptorResourceCounter
init|=
operator|new
name|DescriptorResourceCounter
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|walk
init|=
name|Files
operator|.
name|walk
argument_list|(
name|descriptor
operator|.
name|getParent
argument_list|()
argument_list|)
init|;
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|ds
init|=
name|walk
operator|.
name|filter
argument_list|(
name|f
lambda|->
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|f
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|f
lambda|->
operator|!
name|COLLECTION_DESCRIPTOR
operator|.
name|equals
argument_list|(
name|f
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|Path
name|d
range|:
name|ds
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
control|)
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|d
argument_list|)
init|)
block|{
name|numberOfFiles
operator|+=
name|descriptorResourceCounter
operator|.
name|count
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

begin_catch
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|ParserConfigurationException
decl||
name|SAXException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to count number of files in {}."
argument_list|,
name|descriptor
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
end_catch

unit|}  }
end_unit

