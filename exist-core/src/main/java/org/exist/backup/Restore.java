begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2005-2011 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|backup
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|restore
operator|.
name|RestoreHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|restore
operator|.
name|listener
operator|.
name|RestoreListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|Password
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|EXistInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLReaderPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Restore.java.  *  * @author Adam Retter<adam@exist-db.org>  * @author  Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|Restore
block|{
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|ZIP_FILE_MAGIC_NUMBER
init|=
block|{
literal|0x50
block|,
literal|0x4B
block|,
literal|0x03
block|,
literal|0x04
block|}
decl_stmt|;
specifier|public
name|void
name|restore
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|String
name|newAdminPass
parameter_list|,
specifier|final
name|Path
name|f
parameter_list|,
specifier|final
name|RestoreListener
name|listener
parameter_list|)
throws|throws
name|EXistException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
block|{
comment|//set the admin password
if|if
condition|(
name|newAdminPass
operator|!=
literal|null
condition|)
block|{
name|setAdminCredentials
argument_list|(
name|broker
argument_list|,
name|newAdminPass
argument_list|)
expr_stmt|;
block|}
comment|//get the backup descriptors, can be more than one if it was an incremental backup
specifier|final
name|Deque
argument_list|<
name|BackupDescriptor
argument_list|>
name|descriptors
init|=
name|getBackupDescriptors
argument_list|(
name|f
argument_list|)
decl_stmt|;
comment|// count all files
name|long
name|totalNrOfFiles
init|=
literal|0
decl_stmt|;
name|Iterator
argument_list|<
name|BackupDescriptor
argument_list|>
name|bdIterator
init|=
name|descriptors
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|bdIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|totalNrOfFiles
operator|+=
name|bdIterator
operator|.
name|next
argument_list|()
operator|.
name|getNumberOfFiles
argument_list|()
expr_stmt|;
block|}
comment|// continue restore
specifier|final
name|XMLReaderPool
name|parserPool
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
decl_stmt|;
name|XMLReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|parserPool
operator|.
name|borrowXMLReader
argument_list|()
expr_stmt|;
name|listener
operator|.
name|started
argument_list|(
name|totalNrOfFiles
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|descriptors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|final
name|BackupDescriptor
name|descriptor
init|=
name|descriptors
operator|.
name|pop
argument_list|()
decl_stmt|;
specifier|final
name|EXistInputSource
name|is
init|=
name|descriptor
operator|.
name|getInputSource
argument_list|()
decl_stmt|;
name|is
operator|.
name|setEncoding
argument_list|(
name|UTF_8
operator|.
name|displayName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|RestoreHandler
name|handler
init|=
operator|new
name|RestoreHandler
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|descriptor
argument_list|,
name|listener
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|listener
operator|.
name|finished
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|parserPool
operator|.
name|returnXMLReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|Deque
argument_list|<
name|BackupDescriptor
argument_list|>
name|getBackupDescriptors
parameter_list|(
name|Path
name|contents
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Deque
argument_list|<
name|BackupDescriptor
argument_list|>
name|descriptors
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
do|do
block|{
specifier|final
name|BackupDescriptor
name|bd
init|=
name|getBackupDescriptor
argument_list|(
name|contents
argument_list|)
decl_stmt|;
name|descriptors
operator|.
name|push
argument_list|(
name|bd
argument_list|)
expr_stmt|;
comment|// check if the system collection is in the backup. This should be processed first
comment|//TODO : find a way to make a corespondance with DBRoker's named constants
specifier|final
name|BackupDescriptor
name|sysDescriptor
init|=
name|bd
operator|.
name|getChildBackupDescriptor
argument_list|(
literal|"system"
argument_list|)
decl_stmt|;
comment|// check if the system/security collection is in the backup, this must be the first system collection processed
if|if
condition|(
name|sysDescriptor
operator|!=
literal|null
condition|)
block|{
name|descriptors
operator|.
name|push
argument_list|(
name|sysDescriptor
argument_list|)
expr_stmt|;
specifier|final
name|BackupDescriptor
name|secDescriptor
init|=
name|sysDescriptor
operator|.
name|getChildBackupDescriptor
argument_list|(
literal|"security"
argument_list|)
decl_stmt|;
if|if
condition|(
name|secDescriptor
operator|!=
literal|null
condition|)
block|{
name|descriptors
operator|.
name|push
argument_list|(
name|secDescriptor
argument_list|)
expr_stmt|;
block|}
block|}
name|contents
operator|=
literal|null
expr_stmt|;
specifier|final
name|Properties
name|properties
init|=
name|bd
operator|.
name|getProperties
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|properties
operator|!=
literal|null
operator|)
operator|&&
literal|"yes"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"incremental"
argument_list|,
literal|"no"
argument_list|)
argument_list|)
condition|)
block|{
specifier|final
name|String
name|previous
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"previous"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|previous
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|contents
operator|=
name|bd
operator|.
name|getParentDir
argument_list|()
operator|.
name|resolve
argument_list|(
name|previous
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|contents
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Required part of incremental backup not found: "
operator|+
name|contents
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
do|while
condition|(
name|contents
operator|!=
literal|null
condition|)
do|;
return|return
name|descriptors
return|;
block|}
specifier|private
name|BackupDescriptor
name|getBackupDescriptor
parameter_list|(
specifier|final
name|Path
name|f
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|BackupDescriptor
name|bd
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|bd
operator|=
operator|new
name|FileSystemBackupDescriptor
argument_list|(
name|f
argument_list|,
name|f
operator|.
name|resolve
argument_list|(
literal|"db"
argument_list|)
operator|.
name|resolve
argument_list|(
name|BackupDescriptor
operator|.
name|COLLECTION_DESCRIPTOR
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|f
argument_list|)
operator|.
name|toLowerCase
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".zip"
argument_list|)
operator|||
name|hasZipMagicNumber
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|bd
operator|=
operator|new
name|ZipArchiveBackupDescriptor
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bd
operator|=
operator|new
name|FileSystemBackupDescriptor
argument_list|(
name|f
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
return|return
name|bd
return|;
block|}
comment|/**      * Determines if a file starts with the magic number      * which indicates that it is a Zip file.      *      * @param path the path to the file.      *      * @return true if the file is likely a Zip file.      */
specifier|private
name|boolean
name|hasZipMagicNumber
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|path
argument_list|)
init|)
block|{
specifier|final
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
if|if
condition|(
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|!=
literal|4
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|ZIP_FILE_MAGIC_NUMBER
argument_list|,
name|buf
argument_list|)
return|;
block|}
block|}
specifier|private
name|void
name|setAdminCredentials
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|adminPassword
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|SecurityManager
name|securityManager
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|dba
init|=
name|securityManager
operator|.
name|getAccount
argument_list|(
name|SecurityManager
operator|.
name|DBA_USER
argument_list|)
decl_stmt|;
if|if
condition|(
name|dba
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"'"
operator|+
name|SecurityManager
operator|.
name|DBA_USER
operator|+
literal|"' account can't be found."
argument_list|)
throw|;
block|}
name|dba
operator|.
name|setCredential
argument_list|(
operator|new
name|Password
argument_list|(
name|dba
argument_list|,
name|adminPassword
argument_list|)
argument_list|)
expr_stmt|;
name|securityManager
operator|.
name|updateAccount
argument_list|(
name|dba
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

