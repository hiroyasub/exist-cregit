begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedDocumentLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|sync
operator|.
name|Sync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|HtmlToXmlParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|FunctionE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|function
operator|.
name|LocalXmldbCollectionFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Service
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_comment
comment|/**  *  A local implementation of the Collection interface. This  * is used when the database is running in embedded mode.  *  * Extends Observable to allow status callbacks during indexing.  * Methods storeResource notifies registered observers about the  * progress of the indexer by passing an object of type ProgressIndicator  * to the observer.  *  * @author     wolf  */
end_comment

begin_class
specifier|public
class|class
name|LocalCollection
extends|extends
name|AbstractLocal
implements|implements
name|EXistCollection
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|LocalCollection
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Property to be passed to {@link #setProperty(String, String)}.      * When storing documents, pass HTML files through an HTML parser      * (NekoHTML) instead of the XML parser. The HTML parser will normalize      * the HTML into well-formed XML.      */
specifier|public
specifier|final
specifier|static
name|String
name|NORMALIZE_HTML
init|=
literal|"normalize-html"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Properties
name|defaultProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|NORMALIZE_HTML
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|XmldbURI
name|path
decl_stmt|;
specifier|private
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|(
name|defaultProperties
argument_list|)
decl_stmt|;
specifier|private
name|boolean
name|needsSync
init|=
literal|false
decl_stmt|;
comment|/**      * Create a collection with no parent (root collection).      *      * @param user the user      * @param brokerPool the broker pool      * @param collection the collection      * @throws XMLDBException if an error occurs opening the collection      */
specifier|public
name|LocalCollection
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|,
specifier|final
name|XmldbURI
name|collection
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|this
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
literal|null
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
comment|/**      * Create a collection identified by its name. Load the collection from the database.      *      * @param user the user      * @param brokerPool the broker pool      * @param parent the parent collection      * @param name the name of this collection      * @throws XMLDBException if an error occurs opening the collection      */
specifier|public
name|LocalCollection
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|,
specifier|final
name|LocalCollection
name|parent
parameter_list|,
specifier|final
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|super
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|path
operator|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|.
name|toCollectionPathURI
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|path
operator|=
name|name
operator|.
name|toCollectionPathURI
argument_list|()
expr_stmt|;
block|}
comment|/*         no-op, used to make sure the current user can open the collection!         will throw an XMLDBException if they cannot         we are careful to throw the exception outside of the transaction operation         so that it does not immediately close the current transaction and unwind the stack,         this is because not being able to open a collection is a valid operation e.g. xmldb:collection-available         */
specifier|final
name|Optional
argument_list|<
name|XMLDBException
argument_list|>
name|openException
init|=
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
name|this
operator|.
expr|<
name|Optional
argument_list|<
name|XMLDBException
argument_list|>
operator|>
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|ErrorCodes
operator|.
name|NO_SUCH_COLLECTION
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|openException
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
name|openException
operator|.
name|get
argument_list|()
throw|;
block|}
block|}
specifier|protected
name|boolean
name|checkOwner
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|account
operator|.
name|equals
argument_list|(
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|getOwner
argument_list|()
argument_list|)
return|;
block|}
specifier|protected
name|boolean
name|checkPermissions
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|int
name|perm
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|perm
argument_list|)
return|;
block|}
comment|/**      * Close the current collection. Calling this method will flush all      * open buffers to disk.      */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|needsSync
condition|)
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|broker
operator|.
name|sync
argument_list|(
name|Sync
operator|.
name|MAJOR
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Creates a unique name for a database resource      * Uniqueness is only guaranteed within the eXist instance      *       * The name is based on a hex encoded string of a random integer      * and will have the format xxxxxxxx.xml where x is in the range      * 0 to 9 and a to f       *       * @return the unique resource name       */
annotation|@
name|Override
specifier|public
name|String
name|createId
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|read
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|XmldbURI
name|id
decl_stmt|;
name|boolean
name|ok
decl_stmt|;
do|do
block|{
name|ok
operator|=
literal|true
expr_stmt|;
name|id
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|Integer
operator|.
name|toHexString
argument_list|(
name|random
operator|.
name|nextInt
argument_list|()
argument_list|)
operator|+
literal|".xml"
argument_list|)
expr_stmt|;
comment|// check if this ID does already exist
if|if
condition|(
name|collection
operator|.
name|hasDocument
argument_list|(
name|broker
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|collection
operator|.
name|hasChildCollection
argument_list|(
name|broker
argument_list|,
name|id
argument_list|)
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|!
name|ok
condition|)
do|;
return|return
name|id
operator|.
name|toString
argument_list|()
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|createResource
parameter_list|(
name|String
name|id
parameter_list|,
specifier|final
name|String
name|type
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|id
operator|==
literal|null
condition|)
block|{
name|id
operator|=
name|createId
argument_list|()
expr_stmt|;
block|}
specifier|final
name|XmldbURI
name|idURI
decl_stmt|;
try|try
block|{
name|idURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|Resource
name|r
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|XMLResource
operator|.
name|RESOURCE_TYPE
case|:
name|r
operator|=
operator|new
name|LocalXMLResource
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|,
name|idURI
argument_list|)
expr_stmt|;
break|break;
case|case
name|BinaryResource
operator|.
name|RESOURCE_TYPE
case|:
name|r
operator|=
operator|new
name|LocalBinaryResource
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|,
name|idURI
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"Unknown resource type: "
operator|+
name|type
argument_list|)
throw|;
block|}
operator|(
operator|(
name|AbstractEXistResource
operator|)
name|r
operator|)
operator|.
name|isNewResource
operator|=
literal|true
expr_stmt|;
return|return
name|r
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
name|getChildCollection
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|childURI
decl_stmt|;
try|try
block|{
name|childURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
specifier|final
name|XmldbURI
name|nameUri
init|=
name|this
operator|.
expr|<
name|XmldbURI
operator|>
name|read
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|XmldbURI
name|childName
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|hasChildCollection
argument_list|(
name|broker
argument_list|,
name|childURI
argument_list|)
condition|)
block|{
name|childName
operator|=
name|getPathURI
argument_list|()
operator|.
name|append
argument_list|(
name|childURI
argument_list|)
expr_stmt|;
block|}
return|return
name|childName
return|;
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|nameUri
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|LocalCollection
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|,
name|nameUri
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getChildCollectionCount
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|this
operator|.
expr|<
name|Integer
operator|>
name|read
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|checkPermissions
argument_list|(
name|collection
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
return|return
name|collection
operator|.
name|getChildCollectionCount
argument_list|(
name|broker
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
name|this
operator|::
name|getName
argument_list|)
return|;
block|}
comment|/**      * Similar to {@link org.exist.xmldb.LocalCollection#getName()}      * but useful for operations within the XML:DB Local API      * that are already working within a transaction      */
name|String
name|getName
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
name|getParentCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|getName
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|equals
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
specifier|final
name|XmldbURI
name|parentUri
init|=
name|this
operator|.
expr|<
name|XmldbURI
operator|>
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
name|collection
operator|.
name|getParentURI
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|collection
operator|=
operator|new
name|LocalCollection
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
literal|null
argument_list|,
name|parentUri
argument_list|)
expr_stmt|;
block|}
return|return
name|collection
return|;
block|}
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|path
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|XmldbURI
name|getPathURI
parameter_list|()
block|{
return|return
name|path
return|;
block|}
annotation|@
name|Override
specifier|public
name|Resource
name|getResource
parameter_list|(
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|idURI
decl_stmt|;
try|try
block|{
name|idURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|getResource
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|idURI
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Similar to {@link org.exist.xmldb.LocalCollection#getResource(String)}      * but useful for operations within the XML:DB Local API      * that are already working within a transaction      */
name|Resource
name|getResource
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|String
name|id
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|idURI
decl_stmt|;
try|try
block|{
name|idURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|getResource
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|idURI
argument_list|)
return|;
block|}
name|Resource
name|getResource
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|idURI
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|this
operator|.
expr|<
name|Resource
operator|>
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
block|{
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|collection
operator|.
name|getDocumentWithLock
argument_list|(
name|broker1
argument_list|,
name|idURI
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
comment|// NOTE: early release of Collection lock inline with Asymmetrical Locking scheme
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|final
name|DocumentImpl
name|document
init|=
name|lockedDocument
operator|==
literal|null
condition|?
literal|null
else|:
name|lockedDocument
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Resource "
operator|+
name|idURI
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
specifier|final
name|Resource
name|r
decl_stmt|;
switch|switch
condition|(
name|document
operator|.
name|getResourceType
argument_list|()
condition|)
block|{
case|case
name|DocumentImpl
operator|.
name|XML_FILE
case|:
name|r
operator|=
operator|new
name|LocalXMLResource
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|,
name|idURI
argument_list|)
expr_stmt|;
break|break;
case|case
name|DocumentImpl
operator|.
name|BINARY_FILE
case|:
name|r
operator|=
operator|new
name|LocalBinaryResource
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|,
name|idURI
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"Unknown resource type"
argument_list|)
throw|;
block|}
operator|(
operator|(
name|AbstractEXistResource
operator|)
name|r
operator|)
operator|.
name|setMimeType
argument_list|(
name|document
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|r
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getResourceCount
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|this
operator|.
expr|<
name|Integer
operator|>
name|read
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|checkPermissions
argument_list|(
name|collection
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
return|return
name|collection
operator|.
name|getDocumentCount
argument_list|(
name|broker
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|0
return|;
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Service
name|getService
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|version
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Service
name|service
decl_stmt|;
switch|switch
condition|(
name|name
condition|)
block|{
case|case
literal|"XPathQueryService"
case|:
case|case
literal|"XQueryService"
case|:
name|service
operator|=
operator|new
name|LocalXPathQueryService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"CollectionManagementService"
case|:
case|case
literal|"CollectionManager"
case|:
name|service
operator|=
operator|new
name|LocalCollectionManagementService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"UserManagementService"
case|:
name|service
operator|=
operator|new
name|LocalUserManagementService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"DatabaseInstanceManager"
case|:
name|service
operator|=
operator|new
name|LocalDatabaseInstanceManager
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"XUpdateQueryService"
case|:
name|service
operator|=
operator|new
name|LocalXUpdateQueryService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"IndexQueryService"
case|:
name|service
operator|=
operator|new
name|LocalIndexQueryService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
case|case
literal|"RestoreService"
case|:
name|service
operator|=
operator|new
name|LocalRestoreService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|NO_SUCH_SERVICE
argument_list|)
throw|;
block|}
return|return
name|service
return|;
block|}
annotation|@
name|Override
specifier|public
name|Service
index|[]
name|getServices
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Service
index|[]
name|services
init|=
block|{
operator|new
name|LocalXPathQueryService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|LocalCollectionManagementService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|LocalUserManagementService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|LocalDatabaseInstanceManager
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|)
block|,
operator|new
name|LocalXUpdateQueryService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
block|,
operator|new
name|LocalIndexQueryService
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|this
argument_list|)
block|}
decl_stmt|;
return|return
name|services
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isOpen
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|listChildCollections
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|this
operator|.
expr|<
name|String
index|[]
operator|>
name|read
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|String
index|[]
name|collections
init|=
operator|new
name|String
index|[
name|collection
operator|.
name|getChildCollectionCount
argument_list|(
name|broker
argument_list|)
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|collections
index|[
name|j
index|]
operator|=
name|i
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
return|return
name|collections
return|;
block|}
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getChildCollections
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|listChildCollections
argument_list|()
return|;
block|}
comment|/**      * Retrieve the list of resources in the collection.      *      * @return the list of resources.      *       * @throws XMLDBException if and invalid collection was specified, or if permission is denied      */
annotation|@
name|Override
specifier|public
name|String
index|[]
name|listResources
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|resources
init|=
name|this
operator|.
expr|<
name|List
argument_list|<
name|String
argument_list|>
operator|>
name|read
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|allresources
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|ManagedDocumentLock
name|documentLock
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|acquireDocumentReadLock
argument_list|(
name|doc
operator|.
name|getURI
argument_list|()
argument_list|)
init|)
block|{
comment|// Include only when (1) lockToken is present or (2)
comment|// lockToken indicates that it is not a null resource
specifier|final
name|LockToken
name|lock
init|=
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLockToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
operator|||
operator|(
operator|!
name|lock
operator|.
name|isNullResource
argument_list|()
operator|)
condition|)
block|{
name|allresources
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|allresources
return|;
block|}
argument_list|)
decl_stmt|;
comment|// Copy content of list into String array.
return|return
name|resources
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|resources
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getResources
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|listResources
argument_list|()
return|;
block|}
specifier|public
name|void
name|registerService
parameter_list|(
specifier|final
name|Service
name|serv
parameter_list|)
throws|throws
name|XMLDBException
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|NOT_IMPLEMENTED
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeResource
parameter_list|(
specifier|final
name|Resource
name|res
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|XmldbURI
name|resURI
decl_stmt|;
try|try
block|{
name|resURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|res
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|modify
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
comment|//Check that the document exists
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDocument
init|=
name|collection
operator|.
name|getDocumentWithLock
argument_list|(
name|broker
argument_list|,
name|resURI
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|lockedDocument
operator|==
literal|null
condition|)
block|{
comment|// NOTE: early release of Collection lock inline with Asymmetrical Locking scheme
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"Resource "
operator|+
name|resURI
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|XMLResource
operator|.
name|RESOURCE_TYPE
operator|.
name|equals
argument_list|(
name|res
operator|.
name|getResourceType
argument_list|()
argument_list|)
condition|)
block|{
name|collection
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|resURI
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|.
name|removeBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|resURI
argument_list|)
expr_stmt|;
block|}
comment|// NOTE: early release of Collection lock inline with Asymmetrical Locking scheme
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
name|this
operator|.
name|needsSync
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|)
return|;
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|,
specifier|final
name|String
name|defaultValue
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|properties
operator|.
name|getProperty
argument_list|(
name|property
argument_list|,
name|defaultValue
argument_list|)
return|;
block|}
specifier|public
name|void
name|setProperties
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
block|{
if|if
condition|(
name|properties
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|this
operator|.
name|properties
operator|=
name|properties
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
specifier|final
name|String
name|property
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|property
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeResource
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|storeResource
argument_list|(
name|resource
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|storeResource
parameter_list|(
specifier|final
name|Resource
name|resource
parameter_list|,
specifier|final
name|Date
name|a
parameter_list|,
specifier|final
name|Date
name|b
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storing document "
operator|+
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|LocalXMLResource
operator|)
name|resource
operator|)
operator|.
name|datecreated
operator|=
name|a
expr_stmt|;
operator|(
operator|(
name|LocalXMLResource
operator|)
name|resource
operator|)
operator|.
name|datemodified
operator|=
name|b
expr_stmt|;
name|storeXMLResource
argument_list|(
operator|(
name|LocalXMLResource
operator|)
name|resource
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|.
name|equals
argument_list|(
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"storing binary resource "
operator|+
name|resource
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|LocalBinaryResource
operator|)
name|resource
operator|)
operator|.
name|datecreated
operator|=
name|a
expr_stmt|;
operator|(
operator|(
name|LocalBinaryResource
operator|)
name|resource
operator|)
operator|.
name|datemodified
operator|=
name|b
expr_stmt|;
name|storeBinaryResource
argument_list|(
operator|(
name|LocalBinaryResource
operator|)
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_RESOURCE_TYPE
argument_list|,
literal|"unknown resource type: "
operator|+
name|resource
operator|.
name|getResourceType
argument_list|()
argument_list|)
throw|;
block|}
operator|(
operator|(
name|AbstractEXistResource
operator|)
name|resource
operator|)
operator|.
name|isNewResource
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|needsSync
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|void
name|storeBinaryResource
parameter_list|(
specifier|final
name|LocalBinaryResource
name|res
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|resURI
decl_stmt|;
try|try
block|{
name|resURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|res
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|modify
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
try|try
block|{
specifier|final
name|long
name|conLength
init|=
name|res
operator|.
name|getStreamLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|conLength
operator|!=
operator|-
literal|1
condition|)
block|{
try|try
init|(
name|InputStream
name|is
init|=
name|res
operator|.
name|getStreamContent
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
init|)
block|{
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|resURI
argument_list|,
name|is
argument_list|,
name|res
operator|.
name|getMimeType
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
argument_list|,
name|conLength
argument_list|,
name|res
operator|.
name|datecreated
argument_list|,
name|res
operator|.
name|datemodified
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|resURI
argument_list|,
operator|(
name|byte
index|[]
operator|)
name|res
operator|.
name|getContent
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
argument_list|,
name|res
operator|.
name|getMimeType
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
argument_list|,
name|res
operator|.
name|datecreated
argument_list|,
name|res
operator|.
name|datemodified
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storeXMLResource
parameter_list|(
specifier|final
name|LocalXMLResource
name|res
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|XmldbURI
name|resURI
decl_stmt|;
try|try
block|{
name|resURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|res
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_URI
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|modify
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
name|String
name|uri
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|file
operator|!=
literal|null
condition|)
block|{
name|uri
operator|=
name|res
operator|.
name|file
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
block|}
comment|//          for(final Observer observer : observers) {
comment|//              collection.addObserver(observer);
comment|//          }
try|try
init|(
specifier|final
name|ManagedDocumentLock
name|documentLock
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|acquireDocumentWriteLock
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|resURI
argument_list|)
argument_list|)
init|)
block|{
name|XMLReader
name|reader
init|=
literal|null
decl_stmt|;
comment|/* validate */
specifier|final
name|IndexInfo
name|info
decl_stmt|;
if|if
condition|(
name|res
operator|.
name|root
operator|!=
literal|null
condition|)
block|{
name|info
operator|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|resURI
argument_list|,
name|res
operator|.
name|root
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|InputSource
name|source
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|source
operator|=
operator|new
name|InputSource
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|res
operator|.
name|inputSource
operator|!=
literal|null
condition|)
block|{
name|source
operator|=
name|res
operator|.
name|inputSource
expr_stmt|;
block|}
else|else
block|{
name|source
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|res
operator|.
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|useHtmlReader
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|res
argument_list|)
condition|)
block|{
name|reader
operator|=
name|getHtmlReader
argument_list|()
expr_stmt|;
name|info
operator|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|resURI
argument_list|,
name|source
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|info
operator|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|resURI
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
comment|//Notice : the document should now have a LockMode.WRITE_LOCK update lock
comment|//TODO : check that no exception occurs in order to allow it to be released
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|res
operator|.
name|getMimeType
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|datecreated
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setCreated
argument_list|(
name|res
operator|.
name|datecreated
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|res
operator|.
name|datemodified
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLastModified
argument_list|(
name|res
operator|.
name|datemodified
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/* store */
if|if
condition|(
name|res
operator|.
name|root
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|res
operator|.
name|root
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|InputSource
name|source
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|source
operator|=
operator|new
name|InputSource
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|res
operator|.
name|inputSource
operator|!=
literal|null
condition|)
block|{
name|source
operator|=
name|res
operator|.
name|inputSource
expr_stmt|;
block|}
else|else
block|{
name|source
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|res
operator|.
name|content
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|source
argument_list|,
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
comment|// NOTE: early release of Collection lock inline with Asymmetrical Locking scheme
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
comment|//              collection.deleteObservers();
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
decl||
name|SAXException
name|e
parameter_list|)
block|{
comment|// NOTE: early release of Collection lock inline with Asymmetrical Locking scheme
name|collection
operator|.
name|close
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * Determines if a HTML reader should be used for the resource.      *      * @param broker the database broker      * @param transaction the current transaction      * @param res the html resource      *      * @return true if a HTML reader should be used.      *      * @throws XMLDBException if the HTML Reader cannot be configured.      */
specifier|private
name|boolean
name|useHtmlReader
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|LocalXMLResource
name|res
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|normalize
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|NORMALIZE_HTML
argument_list|,
literal|"no"
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|normalize
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"yes"
argument_list|)
operator|||
name|normalize
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
operator|)
operator|&&
operator|(
literal|"text/html"
operator|.
name|equals
argument_list|(
name|res
operator|.
name|getMimeType
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
argument_list|)
operator|||
name|res
operator|.
name|getId
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".htm"
argument_list|)
operator|||
name|res
operator|.
name|getId
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|".html"
argument_list|)
operator|)
operator|)
return|;
block|}
comment|/**      * Get's the HTML Reader      *      * @return the HTML reader configured in conf.xml      *      * @throws XMLDBException if the HTML reader cannot be retrieved.      */
specifier|private
name|XMLReader
name|getHtmlReader
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Optional
argument_list|<
name|Either
argument_list|<
name|Throwable
argument_list|,
name|XMLReader
argument_list|>
argument_list|>
name|maybeReaderInst
init|=
name|HtmlToXmlParser
operator|.
name|getHtmlToXmlParser
argument_list|(
name|brokerPool
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeReaderInst
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|Either
argument_list|<
name|Throwable
argument_list|,
name|XMLReader
argument_list|>
name|readerInst
init|=
name|maybeReaderInst
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|readerInst
operator|.
name|isLeft
argument_list|()
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Unable to parse HTML to XML please ensure the parser is configured in conf.xml and is present on the classpath"
decl_stmt|;
specifier|final
name|Throwable
name|t
init|=
name|readerInst
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|msg
argument_list|,
name|t
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|XMLReader
name|htmlReader
init|=
name|readerInst
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converting HTML to XML using: "
operator|+
name|htmlReader
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|htmlReader
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"There is no HTML to XML parser configured in conf.xml"
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Date
name|getCreationTime
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|this
operator|.
expr|<
name|Date
operator|>
name|read
argument_list|()
operator|.
name|apply
argument_list|(
parameter_list|(
name|collection
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
operator|new
name|Date
argument_list|(
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRemoteCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|XmldbURI
name|getURI
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|accessor
init|=
operator|new
name|StringBuilder
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
decl_stmt|;
comment|//TODO : get the name from client
name|accessor
operator|.
name|append
argument_list|(
literal|"exist"
argument_list|)
expr_stmt|;
name|accessor
operator|.
name|append
argument_list|(
literal|"://"
argument_list|)
expr_stmt|;
comment|//No host ;-)
name|accessor
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|//No port ;-)
comment|//No context ;-)
comment|//accessor.append(getContext());
try|try
block|{
comment|//TODO : cache it when constructed
return|return
name|XmldbURI
operator|.
name|create
argument_list|(
name|accessor
operator|.
name|toString
argument_list|()
argument_list|,
name|getPath
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
comment|//TODO : should never happen
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Higher-order-function for performing read-only operations against this collection      *      * NOTE this read will occur using the database user set on the collection      *      * @param<R> the return type.      *      * @return A function to receive a read-only operation to perform against the collection      *      * @throws XMLDBException if the collection could not be read      */
specifier|protected
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|read
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|readOp
lambda|->
name|this
operator|.
block_content|<R>read(path
block_content|)
block|.apply(readOp::apply
block|)
class|;
end_class

begin_comment
unit|}
comment|/**      * Higher-order-function for performing read-only operations against this collection      *      * NOTE this read will occur using the database user set on the collection      *      * @param<R> the return type.      * @param errorCode The error code to use in the XMLDBException if the collection does not exist, see {@link ErrorCodes}      * @return A function to receive a read-only operation to perform against the collection      *      * @throws XMLDBException if the collection could not be read      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|read
parameter_list|(
specifier|final
name|int
name|errorCode
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|readOp
lambda|->
name|this
operator|.
block_content|<R>read(path
operator|,
name|errorCode
block_content|)
block|.apply(readOp::apply
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order-function for performing read-only operations against this collection      *      * NOTE this read will occur using the database user set on the collection      *      * @param<R> the return type.      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @return A function to receive a read-only operation to perform against the collection      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|read
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|readOp
lambda|->
name|this
operator|.
block_content|<R>read(broker
operator|,
name|transaction
operator|,
name|path
block_content|)
block|.apply(readOp::apply
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order-function for performing read-only operations against this collection      *      * NOTE this read will occur using the database user set on the collection      *      * @param<R> the return type.      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      * @param errorCode The error code to use in the XMLDBException if the collection does not exist, see {@link ErrorCodes}      * @return A function to receive a read-only operation to perform against the collection      *      * @throws XMLDBException if the collection could not be read      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|read
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|int
name|errorCode
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|readOp
lambda|->
name|this
operator|.
block_content|<R>read(broker
operator|,
name|transaction
operator|,
name|path
operator|,
name|errorCode
block_content|)
block|.apply(readOp::apply
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order-function for performing read/write operations against this collection      *      * NOTE this read/write will occur using the database user set on the collection      *      * @param<R> the return type.      *      * @return A function to receive a read/write operation to perform against the collection      *      * @throws XMLDBException if the collection could not be modified      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|modify
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|modifyOp
lambda|->
name|this
operator|.
block_content|<R>modify(path
block_content|)
block|.apply(modifyOp::apply
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order-function for performing read/write operations against this collection      *      * NOTE this read/write will occur using the database user set on the collection      *      * @param<R> the return type.      * @param broker The database broker to use when accessing the collection      * @param transaction The transaction to use when accessing the collection      *      * @return A function to receive a read/write operation to perform against the collection      *      * @throws XMLDBException if the collection could not be modified      */
end_comment

begin_function
unit|private
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|modify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|modifyOp
lambda|->
name|this
operator|.
block_content|<R>modify(broker
operator|,
name|transaction
operator|,
name|path
block_content|)
block|.apply(modifyOp::apply
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_comment
unit|}
comment|/**      * Higher-order function for performing lockable operations on this collection      *      * @param<R> the return type.      * @param lockMode the lock mode      * @param broker The broker to use for the operation      * @param transaction The transaction to use for the operation      *      * @return A function to receive an operation to perform on the locked database collection      *      * @throws XMLDBException if the the operation raises an error      */
end_comment

begin_function
unit|protected
parameter_list|<
name|R
parameter_list|>
name|FunctionE
argument_list|<
name|LocalXmldbCollectionFunction
argument_list|<
name|R
argument_list|>
argument_list|,
name|R
argument_list|,
name|XMLDBException
argument_list|>
name|with
parameter_list|(
specifier|final
name|LockMode
name|lockMode
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|op
lambda|->
name|this
operator|.
block_content|<R>with(lockMode
operator|,
name|broker
operator|,
name|transaction
operator|,
name|path
block_content|)
block|.apply(op::apply
end_function

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

unit|} }
end_unit

