begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|ConsumerE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple3
import|;
end_import

begin_import
import|import
name|net
operator|.
name|sf
operator|.
name|cglib
operator|.
name|proxy
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|AttrImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|DOMSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|DOMStreamer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Local implementation of XMLResource.  */
end_comment

begin_class
specifier|public
class|class
name|LocalXMLResource
extends|extends
name|AbstractEXistResource
implements|implements
name|XMLResource
block|{
specifier|private
name|NodeProxy
name|proxy
init|=
literal|null
decl_stmt|;
specifier|private
name|Properties
name|outputProperties
decl_stmt|;
specifier|private
name|LexicalHandler
name|lexicalHandler
init|=
literal|null
decl_stmt|;
comment|// those are the different types of content this resource
comment|// may have to deal with
specifier|protected
name|String
name|content
init|=
literal|null
decl_stmt|;
specifier|protected
name|Path
name|file
init|=
literal|null
decl_stmt|;
specifier|protected
name|InputSource
name|inputSource
init|=
literal|null
decl_stmt|;
specifier|protected
name|Node
name|root
init|=
literal|null
decl_stmt|;
specifier|protected
name|AtomicValue
name|value
init|=
literal|null
decl_stmt|;
specifier|public
name|LocalXMLResource
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|,
specifier|final
name|LocalCollection
name|parent
parameter_list|,
specifier|final
name|XmldbURI
name|did
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|super
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|parent
argument_list|,
name|did
argument_list|,
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|outputProperties
operator|=
name|parent
operator|!=
literal|null
condition|?
name|parent
operator|.
name|getProperties
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
specifier|public
name|LocalXMLResource
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|,
specifier|final
name|LocalCollection
name|parent
parameter_list|,
specifier|final
name|NodeProxy
name|p
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|this
argument_list|(
name|user
argument_list|,
name|brokerPool
argument_list|,
name|parent
argument_list|,
name|p
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|proxy
operator|=
name|p
expr_stmt|;
name|this
operator|.
name|outputProperties
operator|=
name|parent
operator|!=
literal|null
condition|?
name|parent
operator|.
name|getProperties
argument_list|()
else|:
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDocumentId
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|docId
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getResourceType
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|XMLResource
operator|.
name|RESOURCE_TYPE
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getContent
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
return|return
name|content
return|;
block|}
comment|// Case 1: content is an external DOM node
if|else if
condition|(
name|root
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|root
operator|instanceof
name|NodeValue
operator|)
condition|)
block|{
try|try
init|(
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
specifier|final
name|DOMSerializer
name|serializer
init|=
operator|new
name|DOMSerializer
argument_list|(
name|writer
argument_list|,
name|getProperties
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|root
argument_list|)
expr_stmt|;
name|content
operator|=
name|writer
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|content
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Case 2: content is an atomic value
block|}
if|else if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
try|try
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|value
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
return|return
operator|(
operator|(
name|StringValue
operator|)
name|value
operator|)
operator|.
name|getStringValue
argument_list|(
literal|true
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|value
operator|.
name|getStringValue
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Case 3: content is a file
block|}
if|else if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|content
operator|=
name|XMLUtil
operator|.
name|readFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|content
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"error while reading resource contents"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Case 4: content is an input source
block|}
if|else if
condition|(
name|inputSource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|content
operator|=
name|XMLUtil
operator|.
name|readFile
argument_list|(
name|inputSource
argument_list|)
expr_stmt|;
return|return
name|content
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"error while reading resource contents"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Case 5: content is a document or internal node, we MUST serialize it
block|}
else|else
block|{
name|content
operator|=
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
try|try
block|{
name|serializer
operator|.
name|setProperties
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
return|return
name|serialize
argument_list|(
name|broker
argument_list|,
name|saxSerializer
lambda|->
name|saxSerializer
operator|.
name|toSAX
argument_list|(
operator|(
name|NodeValue
operator|)
name|root
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
return|return
name|serialize
argument_list|(
name|broker
argument_list|,
name|saxSerializer
lambda|->
name|saxSerializer
operator|.
name|toSAX
argument_list|(
name|proxy
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
expr|<
name|String
operator|>
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
block|{
try|try
block|{
return|return
name|serialize
argument_list|(
name|broker
argument_list|,
name|saxSerializer
lambda|->
name|saxSerializer
operator|.
name|toSAX
argument_list|(
name|document
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|content
return|;
block|}
block|}
specifier|private
name|String
name|serialize
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|ConsumerE
argument_list|<
name|Serializer
argument_list|,
name|SAXException
argument_list|>
name|toSaxFunction
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|SAXSerializer
name|saxSerializer
init|=
literal|null
decl_stmt|;
try|try
block|{
name|saxSerializer
operator|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
name|saxSerializer
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|saxSerializer
argument_list|,
name|saxSerializer
argument_list|)
expr_stmt|;
name|toSaxFunction
operator|.
name|accept
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|saxSerializer
operator|!=
literal|null
condition|)
block|{
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|saxSerializer
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Node
name|getContentAsDOM
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Node
name|result
decl_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|root
operator|instanceof
name|NodeImpl
condition|)
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
operator|(
operator|(
name|NodeImpl
operator|)
name|root
operator|)
operator|.
name|expand
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|root
expr_stmt|;
block|}
if|else if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"cannot return an atomic value as DOM node"
argument_list|)
throw|;
block|}
else|else
block|{
name|result
operator|=
name|read
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
return|return
name|document
operator|.
name|getNode
argument_list|(
name|proxy
argument_list|)
return|;
block|}
else|else
block|{
comment|//<frederic.glorieux@ajlsm.com> return a full to get root PI and comments
return|return
name|document
return|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|exportInternalNode
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**      * Provides a safe export of an internal persistent DOM      * node from eXist via the Local XML:DB API.      *      * This is done by providing a cglib Proxy object that only implements      * the appropriate W3C DOM interface. This helps prevent the      * XML:DB Local API from leaking implementation through      * its abstractions.      */
specifier|private
name|Node
name|exportInternalNode
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
argument_list|>
name|domClazz
init|=
name|getW3cNodeInterface
argument_list|(
name|node
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|domClazz
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Provided node does not implement org.w3c.dom"
argument_list|)
throw|;
block|}
specifier|final
name|Enhancer
name|enhancer
init|=
operator|new
name|Enhancer
argument_list|()
decl_stmt|;
name|enhancer
operator|.
name|setSuperclass
argument_list|(
name|domClazz
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Class
index|[]
name|interfaceClasses
decl_stmt|;
if|if
condition|(
name|node
operator|instanceof
name|StoredNode
condition|)
block|{
name|interfaceClasses
operator|=
operator|new
name|Class
index|[]
block|{
name|domClazz
operator|.
name|get
argument_list|()
block|,
name|StoredNodeIdentity
operator|.
name|class
block|}
expr_stmt|;
block|}
if|else if
condition|(
name|node
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
condition|)
block|{
name|interfaceClasses
operator|=
operator|new
name|Class
index|[]
block|{
name|domClazz
operator|.
name|get
argument_list|()
block|,
name|MemtreeNodeIdentity
operator|.
name|class
block|}
expr_stmt|;
block|}
else|else
block|{
name|interfaceClasses
operator|=
operator|new
name|Class
index|[]
block|{
name|domClazz
operator|.
name|get
argument_list|()
block|}
expr_stmt|;
block|}
name|enhancer
operator|.
name|setInterfaces
argument_list|(
name|interfaceClasses
argument_list|)
expr_stmt|;
name|enhancer
operator|.
name|setCallback
argument_list|(
operator|new
name|DOMMethodInterceptor
argument_list|(
name|node
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|(
name|Node
operator|)
name|enhancer
operator|.
name|create
argument_list|()
return|;
block|}
specifier|private
name|Optional
argument_list|<
name|Class
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
argument_list|>
name|getW3cNodeInterface
parameter_list|(
specifier|final
name|Class
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
name|nodeClazz
parameter_list|)
block|{
return|return
name|Stream
operator|.
name|of
argument_list|(
name|nodeClazz
operator|.
name|getInterfaces
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|iface
lambda|->
name|iface
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.w3c.dom"
argument_list|)
argument_list|)
operator|.
name|findFirst
argument_list|()
operator|.
name|map
argument_list|(
name|c
lambda|->
operator|(
name|Class
argument_list|<
name|?
extends|extends
name|Node
argument_list|>
operator|)
name|c
argument_list|)
return|;
block|}
specifier|private
class|class
name|DOMMethodInterceptor
implements|implements
name|MethodInterceptor
block|{
specifier|private
specifier|final
name|Node
name|node
decl_stmt|;
specifier|public
name|DOMMethodInterceptor
parameter_list|(
specifier|final
name|Node
name|node
parameter_list|)
block|{
name|this
operator|.
name|node
operator|=
name|node
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|intercept
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|,
specifier|final
name|Method
name|method
parameter_list|,
specifier|final
name|Object
index|[]
name|args
parameter_list|,
specifier|final
name|MethodProxy
name|proxy
parameter_list|)
throws|throws
name|Throwable
block|{
comment|/*                 NOTE(AR): we have to take special care of eXist-db's                 persistent and memtree DOM's node equality.                  For the persistent DOM, we reproduce in the proxy the behaviour taken                 by org.exist.dom.persistent.StoredNode#equals(Object),                 by overriding equals for StoredNode's and then implementing                 a method to retrieve the nodeIds from each side of the equality                 comparison. We have to do this as StoredNode attempts instanceof                 equality which will fail against the proxied objects.                  For the memtree DOM, we reproduce in the proxy the behaviour taken                 by org.exist.dom.memtree.NodeImpl#equals(Object),                 by overriding equals for memtree.NodeImpl's and then implementing                 a method to retrieve the nodeIds from each side of the equality                 comparison. We have to do this as NodeImpl attempts instanceof and                 reference equality which will fail against the proxied objects.              */
name|Object
name|domResult
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"equals"
argument_list|)
operator|&&
name|obj
operator|instanceof
name|StoredNodeIdentity
operator|&&
name|args
operator|.
name|length
operator|==
literal|1
operator|&&
name|args
index|[
literal|0
index|]
operator|instanceof
name|StoredNodeIdentity
condition|)
block|{
specifier|final
name|StoredNodeIdentity
name|ni1
init|=
operator|(
operator|(
name|StoredNodeIdentity
operator|)
name|obj
operator|)
decl_stmt|;
specifier|final
name|StoredNodeIdentity
name|ni2
init|=
operator|(
operator|(
name|StoredNodeIdentity
operator|)
name|args
index|[
literal|0
index|]
operator|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|niEquals
init|=
name|ni1
operator|.
name|getNodeId
argument_list|()
operator|.
name|flatMap
argument_list|(
name|n1id
lambda|->
name|ni2
operator|.
name|getNodeId
argument_list|()
operator|.
name|map
argument_list|(
name|n2id
lambda|->
name|n1id
operator|.
name|equals
argument_list|(
name|n2id
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|niEquals
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|domResult
operator|=
name|niEquals
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"equals"
argument_list|)
operator|&&
name|obj
operator|instanceof
name|MemtreeNodeIdentity
operator|&&
name|args
operator|.
name|length
operator|==
literal|1
operator|&&
name|args
index|[
literal|0
index|]
operator|instanceof
name|MemtreeNodeIdentity
condition|)
block|{
specifier|final
name|MemtreeNodeIdentity
name|ni1
init|=
operator|(
operator|(
name|MemtreeNodeIdentity
operator|)
name|obj
operator|)
decl_stmt|;
specifier|final
name|MemtreeNodeIdentity
name|ni2
init|=
operator|(
operator|(
name|MemtreeNodeIdentity
operator|)
name|args
index|[
literal|0
index|]
operator|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Boolean
argument_list|>
name|niEquals
init|=
name|ni1
operator|.
name|getNodeId
argument_list|()
operator|.
name|flatMap
argument_list|(
name|n1id
lambda|->
name|ni2
operator|.
name|getNodeId
argument_list|()
operator|.
name|map
argument_list|(
name|n2id
lambda|->
name|n1id
operator|.
name|_1
operator|==
name|n2id
operator|.
name|_1
operator|&&
name|n1id
operator|.
name|_2
operator|==
name|n2id
operator|.
name|_2
operator|&&
name|n1id
operator|.
name|_3
operator|==
name|n2id
operator|.
name|_3
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|niEquals
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|domResult
operator|=
name|niEquals
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|method
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"getNodeId"
argument_list|)
condition|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|StoredNodeIdentity
operator|&&
name|args
operator|.
name|length
operator|==
literal|0
operator|&&
name|node
operator|instanceof
name|StoredNode
condition|)
block|{
name|domResult
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|(
operator|(
name|StoredNode
operator|)
name|node
operator|)
operator|.
name|getNodeId
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|MemtreeNodeIdentity
operator|&&
name|args
operator|.
name|length
operator|==
literal|0
operator|&&
name|node
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
condition|)
block|{
specifier|final
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
name|memtreeNode
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
operator|)
name|node
decl_stmt|;
name|domResult
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|Tuple
argument_list|(
name|memtreeNode
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|memtreeNode
operator|.
name|getNodeNumber
argument_list|()
argument_list|,
name|memtreeNode
operator|.
name|getNodeType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|domResult
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|domResult
operator|==
literal|null
condition|)
block|{
name|domResult
operator|=
name|method
operator|.
name|invoke
argument_list|(
name|node
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|domResult
operator|!=
literal|null
operator|&&
name|Node
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|method
operator|.
name|getReturnType
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|exportInternalNode
argument_list|(
operator|(
name|Node
operator|)
name|domResult
argument_list|)
return|;
comment|//recursively wrap node result
block|}
if|else if
condition|(
name|domResult
operator|!=
literal|null
operator|&&
name|method
operator|.
name|getReturnType
argument_list|()
operator|.
name|equals
argument_list|(
name|NodeList
operator|.
name|class
argument_list|)
condition|)
block|{
specifier|final
name|NodeList
name|underlying
init|=
operator|(
name|NodeList
operator|)
name|domResult
decl_stmt|;
comment|//recursively wrap nodes in nodelist result
return|return
operator|new
name|NodeList
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Node
name|item
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|underlying
operator|.
name|item
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|n
lambda|->
name|exportInternalNode
argument_list|(
name|n
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|underlying
operator|.
name|getLength
argument_list|()
return|;
block|}
block|}
return|;
block|}
else|else
block|{
return|return
name|domResult
return|;
block|}
block|}
block|}
comment|/**      * Used by {@link DOMMethodInterceptor} to      * help with equality of persistent DOM nodes.      */
specifier|private
interface|interface
name|StoredNodeIdentity
block|{
name|Optional
argument_list|<
name|NodeId
argument_list|>
name|getNodeId
parameter_list|()
function_decl|;
block|}
comment|/**      * Used by {@link DOMMethodInterceptor} to      * help with equality of memtree DOM nodes.      */
specifier|private
interface|interface
name|MemtreeNodeIdentity
block|{
name|Optional
argument_list|<
name|Tuple3
argument_list|<
name|DocumentImpl
argument_list|,
name|Integer
argument_list|,
name|Short
argument_list|>
argument_list|>
name|getNodeId
parameter_list|()
function_decl|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|getContentAsSAX
parameter_list|(
specifier|final
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|XMLDBException
block|{
comment|// case 1: content is an external DOM node
if|if
condition|(
name|root
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|root
operator|instanceof
name|NodeValue
operator|)
condition|)
block|{
try|try
block|{
specifier|final
name|String
name|option
init|=
name|collection
operator|.
name|getProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
decl_stmt|;
specifier|final
name|DOMStreamer
name|streamer
init|=
operator|(
name|DOMStreamer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|DOMStreamer
operator|.
name|class
argument_list|)
decl_stmt|;
name|streamer
operator|.
name|setContentHandler
argument_list|(
name|handler
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|setLexicalHandler
argument_list|(
name|lexicalHandler
argument_list|)
expr_stmt|;
name|streamer
operator|.
name|serialize
argument_list|(
name|root
argument_list|,
name|option
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|streamer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|withDb
argument_list|(
parameter_list|(
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
try|try
block|{
comment|// case 2: content is an atomic value
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|value
operator|.
name|toSAX
argument_list|(
name|broker
argument_list|,
name|handler
argument_list|,
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
comment|// case 3: content is an internal node or a document
block|}
else|else
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|newSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|getProperties
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|handler
argument_list|,
name|lexicalHandler
argument_list|)
expr_stmt|;
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|.
name|toSAX
argument_list|(
operator|(
name|NodeValue
operator|)
name|root
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|.
name|toSAX
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
block|{
try|try
block|{
name|serializer
operator|.
name|toSAX
argument_list|(
name|document
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Sets the content for this resource. If value is of type File, it is      * directly passed to the parser when Collection.storeResource is called.      * Otherwise the method tries to convert the value to String.      *       * Passing a File object should be preferred if the document is large. The      * file's content will not be loaded into memory but directly passed to a      * SAX parser.      *       * @param obj the content value to set for the resource.      * @throws XMLDBException with expected error codes. See {@link ErrorCodes#VENDOR_ERROR}      *     for any vendor specific errors that occur.      */
annotation|@
name|Override
specifier|public
name|void
name|setContent
parameter_list|(
specifier|final
name|Object
name|obj
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|content
operator|=
literal|null
expr_stmt|;
name|file
operator|=
literal|null
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
name|inputSource
operator|=
literal|null
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|Path
condition|)
block|{
name|file
operator|=
operator|(
name|Path
operator|)
name|obj
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|java
operator|.
name|io
operator|.
name|File
condition|)
block|{
name|file
operator|=
operator|(
operator|(
name|java
operator|.
name|io
operator|.
name|File
operator|)
name|obj
operator|)
operator|.
name|toPath
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|AtomicValue
condition|)
block|{
name|value
operator|=
operator|(
name|AtomicValue
operator|)
name|obj
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|InputSource
condition|)
block|{
name|inputSource
operator|=
operator|(
name|InputSource
operator|)
name|obj
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|content
operator|=
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|obj
argument_list|,
name|UTF_8
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|content
operator|=
name|obj
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|setContentAsDOM
parameter_list|(
specifier|final
name|Node
name|root
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|root
operator|instanceof
name|AttrImpl
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|WRONG_CONTENT_TYPE
argument_list|,
literal|"SENR0001: can not serialize a standalone attribute"
argument_list|)
throw|;
block|}
name|content
operator|=
literal|null
expr_stmt|;
name|file
operator|=
literal|null
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
name|inputSource
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|root
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ContentHandler
name|setContentAsSAX
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|file
operator|=
literal|null
expr_stmt|;
name|value
operator|=
literal|null
expr_stmt|;
name|inputSource
operator|=
literal|null
expr_stmt|;
name|root
operator|=
literal|null
expr_stmt|;
return|return
operator|new
name|InternalXMLSerializer
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getSAXFeature
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setSAXFeature
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|boolean
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setLexicalHandler
parameter_list|(
specifier|final
name|LexicalHandler
name|lexicalHandler
parameter_list|)
block|{
name|this
operator|.
name|lexicalHandler
operator|=
name|lexicalHandler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperties
parameter_list|(
specifier|final
name|Properties
name|properties
parameter_list|)
block|{
name|this
operator|.
name|outputProperties
operator|=
name|properties
expr_stmt|;
block|}
annotation|@
name|Override
annotation|@
name|Nullable
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|outputProperties
return|;
block|}
specifier|public
name|NodeProxy
name|getNode
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
return|return
name|proxy
return|;
block|}
else|else
block|{
return|return
name|read
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Similar to {@link org.exist.xmldb.LocalXMLResource#getNode()}      * but useful for operations within the XML:DB Local API      * that are already working within a transaction.      *      * @param broker the database broker.      * @param transaction the database transaction.      *      * @return a proxy to the node.      *      * @throws XMLDBException if an error occurs whilst getting the node      */
specifier|public
name|NodeProxy
name|getNode
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
block|{
return|return
name|proxy
return|;
block|}
else|else
block|{
return|return
name|this
operator|.
expr|<
name|NodeProxy
operator|>
name|read
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
operator|.
name|apply
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker1
parameter_list|,
name|transaction1
parameter_list|)
lambda|->
operator|new
name|NodeProxy
argument_list|(
name|document
argument_list|,
name|NodeId
operator|.
name|DOCUMENT_NODE
argument_list|)
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|DocumentType
name|getDocType
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
name|read
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
name|document
operator|.
name|getDoctype
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocType
parameter_list|(
specifier|final
name|DocumentType
name|doctype
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|modify
argument_list|(
parameter_list|(
name|document
parameter_list|,
name|broker
parameter_list|,
name|transaction
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|document
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|INVALID_RESOURCE
argument_list|,
literal|"Resource "
operator|+
name|docId
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|document
operator|.
name|setDocumentType
argument_list|(
name|doctype
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|InternalXMLSerializer
extends|extends
name|SAXSerializer
block|{
specifier|public
name|InternalXMLSerializer
parameter_list|()
block|{
name|super
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|endDocument
parameter_list|()
throws|throws
name|SAXException
block|{
name|super
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|content
operator|=
name|getWriter
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

