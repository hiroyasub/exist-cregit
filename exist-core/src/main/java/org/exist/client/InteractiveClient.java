begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Dimension
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|ImageIcon
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UnsupportedLookAndFeelException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|SystemProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|XMLUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistCollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|ExtendedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|IndexQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|UserManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistXPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|reader
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|reader
operator|.
name|impl
operator|.
name|history
operator|.
name|DefaultHistory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|Terminal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|jline
operator|.
name|terminal
operator|.
name|TerminalBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XUpdateQueryService
import|;
end_import

begin_import
import|import
name|se
operator|.
name|softhouse
operator|.
name|jargo
operator|.
name|ArgumentException
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_comment
comment|/**  * Command-line client based on the XML:DB API.  *  * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|InteractiveClient
block|{
comment|// ANSI colors for ls display
comment|// private final static String ANSI_BLUE = "\033[0;34m";
specifier|private
specifier|final
specifier|static
name|String
name|ANSI_CYAN
init|=
literal|"\033[0;36m"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ANSI_WHITE
init|=
literal|"\033[0;37m"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|EOL
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
decl_stmt|;
comment|// properties
comment|// keys
specifier|public
specifier|static
specifier|final
name|String
name|USER
init|=
literal|"user"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PASSWORD
init|=
literal|"password"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|URI
init|=
literal|"uri"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PERMISSIONS
init|=
literal|"permissions"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INDENT
init|=
literal|"indent"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENCODING
init|=
literal|"encoding"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COLORS
init|=
literal|"colors"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EDITOR
init|=
literal|"editor"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXPAND_XINCLUDES
init|=
literal|"expand-xincludes"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION
init|=
literal|"configuration"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DRIVER
init|=
literal|"driver"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SSL_ENABLE
init|=
literal|"ssl-enable"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CREATE_DATABASE
init|=
literal|"create-database"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|LOCAL_MODE
init|=
literal|"local-mode-opt"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NO_EMBED_MODE
init|=
literal|"NO_EMBED_MODE"
decl_stmt|;
comment|// values
specifier|protected
specifier|static
specifier|final
name|String
name|EDIT_CMD
init|=
literal|"emacsclient -t $file"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Charset
name|ENCODING_DEFAULT
init|=
name|StandardCharsets
operator|.
name|UTF_8
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|URI_DEFAULT
init|=
literal|"xmldb:exist://localhost:8080/exist/xmlrpc"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|SSL_ENABLE_DEFAULT
init|=
literal|"FALSE"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|LOCAL_MODE_DEFAULT
init|=
literal|"FALSE"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|NO_EMBED_MODE_DEFAULT
init|=
literal|"FALSE"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|USER_DEFAULT
init|=
name|SecurityManager
operator|.
name|DBA_USER
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|driver
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
comment|// Set
specifier|private
specifier|final
specifier|static
name|Properties
name|defaultProps
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|DRIVER
argument_list|,
name|driver
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|URI
argument_list|,
name|URI_DEFAULT
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|USER
argument_list|,
name|USER_DEFAULT
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|EDITOR
argument_list|,
name|EDIT_CMD
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|INDENT
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|ENCODING
argument_list|,
name|ENCODING_DEFAULT
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|COLORS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|PERMISSIONS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|EXPAND_XINCLUDES
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|defaultProps
operator|.
name|setProperty
argument_list|(
name|SSL_ENABLE
argument_list|,
name|SSL_ENABLE_DEFAULT
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|static
specifier|final
name|int
name|colSizes
index|[]
init|=
operator|new
name|int
index|[]
block|{
literal|10
block|,
literal|10
block|,
literal|10
block|,
operator|-
literal|1
block|}
decl_stmt|;
specifier|protected
specifier|static
name|String
name|configuration
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|TreeSet
argument_list|<
name|String
argument_list|>
name|completitions
init|=
operator|new
name|TreeSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|LinkedList
argument_list|<
name|String
argument_list|>
name|queryHistory
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|Path
name|queryHistoryFile
decl_stmt|;
specifier|protected
name|Path
name|historyFile
decl_stmt|;
specifier|protected
name|LineReader
name|console
init|=
literal|null
decl_stmt|;
specifier|private
name|Database
name|database
init|=
literal|null
decl_stmt|;
specifier|protected
name|Collection
name|current
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|nextInSet
init|=
literal|1
decl_stmt|;
specifier|protected
name|Properties
name|properties
decl_stmt|;
specifier|protected
name|String
index|[]
name|resources
init|=
literal|null
decl_stmt|;
specifier|protected
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
specifier|protected
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMappings
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
comment|/**      * number of files of a recursive store      */
specifier|protected
name|int
name|filesCount
init|=
literal|0
decl_stmt|;
comment|/**      * total length of a recursive store      */
specifier|protected
name|long
name|totalLength
init|=
literal|0
decl_stmt|;
specifier|protected
name|ClientFrame
name|frame
decl_stmt|;
comment|//XXX:make pluggable
specifier|private
specifier|static
name|boolean
name|havePluggableCommands
init|=
literal|false
decl_stmt|;
static|static
block|{
try|try
block|{
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.plugin.command.Commands"
argument_list|)
expr_stmt|;
name|havePluggableCommands
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|havePluggableCommands
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|//*************************************
specifier|private
name|CommandlineOptions
name|options
decl_stmt|;
specifier|protected
name|XmldbURI
name|path
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
decl_stmt|;
specifier|private
name|Optional
argument_list|<
name|Writer
argument_list|>
name|lazyTraceWriter
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|NamedThreadGroupFactory
name|clientThreadGroupFactory
init|=
operator|new
name|NamedThreadGroupFactory
argument_list|(
literal|"java-admin-client"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ThreadGroup
name|clientThreadGroup
init|=
name|clientThreadGroupFactory
operator|.
name|newThreadGroup
argument_list|(
literal|null
argument_list|)
decl_stmt|;
comment|/**      * Display help on commands      */
specifier|protected
name|void
name|displayHelp
parameter_list|()
block|{
name|messageln
argument_list|(
literal|"--- general commands ---"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"ls                   list collection contents"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"cd [collection|..]   change current collection"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"put [file pattern]   upload file or directory to the database"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"putgz [file pattern] upload possibly gzip compressed file or directory to the database"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"putzip [file pattern] upload the contents of a ZIP archive to the database"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"edit [resource] open the resource for editing"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"mkcol collection     create new sub-collection in current collection"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"rm document          remove document from current collection"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"rmcol collection     remove collection"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"set [key=value]      set property. Calling set without "
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     argument shows current settings."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
name|EOL
operator|+
literal|"--- search commands ---"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"find xpath-expr      execute the given XPath expression."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"show [position]      display query result value at position."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
name|EOL
operator|+
literal|"--- user management (may require dba rights) ---"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"users                list existing users."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"adduser username     create a new user."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"passwd username      change password for user. "
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"chown user group [resource]"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     change resource ownership. chown without"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     resource changes ownership of the current"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     collection."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"chmod [resource] permissions"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     change resource permissions. Format:"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     [user|group|other]=[+|-][read|write|execute]."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     chmod without resource changes permissions for"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"                     the current collection."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"lock resource        put a write lock on the specified resource."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"unlock resource      remove a write lock from the specified resource."
argument_list|)
expr_stmt|;
if|if
condition|(
name|havePluggableCommands
condition|)
block|{
name|messageln
argument_list|(
literal|"svn                  subversion command-line client."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"threads              threads debug information."
argument_list|)
expr_stmt|;
block|}
name|messageln
argument_list|(
literal|"quit                 quit the program"
argument_list|)
expr_stmt|;
block|}
comment|/**      * The main program for the InteractiveClient class.      *      * @param args The command line arguments      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
try|try
block|{
specifier|final
name|InteractiveClient
name|client
init|=
operator|new
name|InteractiveClient
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|client
operator|.
name|run
argument_list|(
name|args
argument_list|)
condition|)
block|{
name|System
operator|.
name|exit
argument_list|(
name|SystemExitCodes
operator|.
name|CATCH_ALL_GENERAL_ERROR_EXIT_CODE
argument_list|)
expr_stmt|;
comment|// return non-zero exit status on failure
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|ArgumentException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|e
operator|.
name|getMessageAndUsage
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|SystemExitCodes
operator|.
name|INVALID_ARGUMENT_EXIT_CODE
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|SystemExitCodes
operator|.
name|CATCH_ALL_GENERAL_ERROR_EXIT_CODE
argument_list|)
expr_stmt|;
comment|// return non-zero exit status on exception
block|}
block|}
comment|/**      * Create a new thread for this client instance.      *      * @param threadName the name of the thread      * @param runnable the function to execute on the thread      *      * @return the thread      */
name|Thread
name|newClientThread
parameter_list|(
specifier|final
name|String
name|threadName
parameter_list|,
specifier|final
name|Runnable
name|runnable
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
name|clientThreadGroup
argument_list|,
name|runnable
argument_list|,
name|clientThreadGroup
operator|.
name|getName
argument_list|()
operator|+
literal|"."
operator|+
name|threadName
argument_list|)
return|;
block|}
comment|/**      * Register XML:DB driver and retrieve root collection.      *      * @throws Exception Description of the Exception      */
specifier|protected
name|void
name|connect
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Connecting to database..."
argument_list|)
expr_stmt|;
specifier|final
name|String
name|uri
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|InteractiveClient
operator|.
name|URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
block|{
name|frame
operator|.
name|setStatus
argument_list|(
literal|"connecting to "
operator|+
name|uri
argument_list|)
expr_stmt|;
block|}
comment|// Create database
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|DRIVER
argument_list|)
argument_list|)
decl_stmt|;
name|database
operator|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
expr_stmt|;
comment|// Configure database
name|database
operator|.
name|setProperty
argument_list|(
name|CREATE_DATABASE
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
name|SSL_ENABLE
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|SSL_ENABLE
argument_list|)
argument_list|)
expr_stmt|;
comment|// secure empty configuration
specifier|final
name|String
name|configProp
init|=
name|properties
operator|.
name|getProperty
argument_list|(
name|InteractiveClient
operator|.
name|CONFIGURATION
argument_list|)
decl_stmt|;
if|if
condition|(
name|configProp
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|configProp
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
block|{
name|database
operator|.
name|setProperty
argument_list|(
name|CONFIGURATION
argument_list|,
name|configProp
argument_list|)
expr_stmt|;
block|}
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
specifier|final
name|String
name|collectionUri
init|=
name|uri
operator|+
name|path
decl_stmt|;
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|collectionUri
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
block|{
name|frame
operator|.
name|setStatus
argument_list|(
literal|"connected to "
operator|+
name|uri
operator|+
literal|" as user "
operator|+
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|database
operator|.
name|getProperty
argument_list|(
name|CONFIGURATION
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Using config: "
operator|+
name|database
operator|.
name|getProperty
argument_list|(
name|CONFIGURATION
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Connected :-)"
argument_list|)
expr_stmt|;
block|}
comment|/**      * Returns the current collection.      *      * @return the current collection      */
specifier|protected
name|Collection
name|getCollection
parameter_list|()
block|{
return|return
name|current
return|;
block|}
specifier|public
name|Properties
name|getProperties
parameter_list|()
block|{
return|return
name|properties
return|;
block|}
specifier|public
name|void
name|reloadCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|URI
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setProperties
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|String
name|key
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
name|i
init|=
name|properties
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|key
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|current
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|getOwnerName
parameter_list|(
specifier|final
name|Permission
name|perm
parameter_list|)
block|{
if|if
condition|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|"?"
return|;
block|}
else|else
block|{
return|return
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
specifier|private
name|String
name|getGroupName
parameter_list|(
specifier|final
name|Permission
name|perm
parameter_list|)
block|{
if|if
condition|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|"?"
return|;
block|}
else|else
block|{
return|return
name|perm
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
return|;
block|}
block|}
comment|/**      * Get list of resources contained in collection.      *      * @throws XMLDBException Description of the Exception      */
specifier|protected
name|void
name|getResources
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|setProperties
argument_list|()
expr_stmt|;
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|childCollections
index|[]
init|=
name|current
operator|.
name|listChildCollections
argument_list|()
decl_stmt|;
specifier|final
name|String
name|childResources
index|[]
init|=
name|current
operator|.
name|listResources
argument_list|()
decl_stmt|;
name|resources
operator|=
operator|new
name|String
index|[
name|childCollections
operator|.
name|length
operator|+
name|childResources
operator|.
name|length
index|]
expr_stmt|;
comment|//Collection child;
name|Permission
name|perm
decl_stmt|;
specifier|final
name|List
argument_list|<
name|ResourceDescriptor
argument_list|>
name|tableData
init|=
operator|new
name|ArrayList
argument_list|<
name|ResourceDescriptor
argument_list|>
argument_list|(
name|resources
operator|.
name|length
argument_list|)
decl_stmt|;
comment|// A list of ResourceDescriptor for the GUI
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|childCollections
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//child = current.getChildCollection(childCollections[i]);
name|perm
operator|=
name|mgtService
operator|.
name|getSubCollectionPermissions
argument_list|(
name|current
argument_list|,
name|childCollections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
specifier|final
name|Date
name|created
init|=
name|mgtService
operator|.
name|getSubCollectionCreationTime
argument_list|(
name|current
argument_list|,
name|childCollections
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|PERMISSIONS
argument_list|)
argument_list|)
condition|)
block|{
name|resources
index|[
name|i
index|]
operator|=
literal|'c'
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|'\t'
operator|+
name|getOwnerName
argument_list|(
name|perm
argument_list|)
operator|+
literal|'\t'
operator|+
name|getGroupName
argument_list|(
name|perm
argument_list|)
operator|+
literal|'\t'
operator|+
name|created
operator|.
name|toString
argument_list|()
operator|+
literal|'\t'
operator|+
name|childCollections
index|[
name|i
index|]
expr_stmt|;
block|}
else|else
block|{
name|resources
index|[
name|i
index|]
operator|=
name|childCollections
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
try|try
block|{
name|tableData
operator|.
name|add
argument_list|(
operator|new
name|ResourceDescriptor
operator|.
name|Collection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|childCollections
index|[
name|i
index|]
argument_list|)
argument_list|,
name|getOwnerName
argument_list|(
name|perm
argument_list|)
argument_list|,
name|getGroupName
argument_list|(
name|perm
argument_list|)
argument_list|,
literal|"c"
operator|+
operator|(
operator|(
name|perm
operator|instanceof
name|ACLPermission
operator|&&
operator|(
operator|(
name|ACLPermission
operator|)
name|perm
operator|)
operator|.
name|getACECount
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|'+'
else|:
name|perm
operator|.
name|toString
argument_list|()
operator|)
argument_list|,
name|created
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse collection name into a valid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|completitions
operator|.
name|add
argument_list|(
name|childCollections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Resource
name|res
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|childResources
operator|.
name|length
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|res
operator|=
name|current
operator|.
name|getResource
argument_list|(
name|childResources
index|[
name|j
index|]
argument_list|)
expr_stmt|;
name|perm
operator|=
name|mgtService
operator|.
name|getPermissions
argument_list|(
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|perm
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"null"
argument_list|)
expr_stmt|;
comment|//TODO this is not useful!
block|}
specifier|final
name|Date
name|lastModificationTime
init|=
operator|(
operator|(
name|EXistResource
operator|)
name|res
operator|)
operator|.
name|getLastModificationTime
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|PERMISSIONS
argument_list|)
argument_list|)
condition|)
block|{
name|resources
index|[
name|i
index|]
operator|=
literal|'-'
operator|+
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|'\t'
operator|+
name|getOwnerName
argument_list|(
name|perm
argument_list|)
operator|+
literal|'\t'
operator|+
name|getGroupName
argument_list|(
name|perm
argument_list|)
operator|+
literal|'\t'
operator|+
name|lastModificationTime
operator|.
name|toString
argument_list|()
operator|+
literal|'\t'
operator|+
name|childResources
index|[
name|j
index|]
expr_stmt|;
block|}
else|else
block|{
name|resources
index|[
name|i
index|]
operator|=
name|childResources
index|[
name|j
index|]
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
try|try
block|{
name|tableData
operator|.
name|add
argument_list|(
operator|new
name|ResourceDescriptor
operator|.
name|Document
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|childResources
index|[
name|j
index|]
argument_list|)
argument_list|,
name|getOwnerName
argument_list|(
name|perm
argument_list|)
argument_list|,
name|getGroupName
argument_list|(
name|perm
argument_list|)
argument_list|,
literal|"-"
operator|+
operator|(
operator|(
name|perm
operator|instanceof
name|ACLPermission
operator|&&
operator|(
operator|(
name|ACLPermission
operator|)
name|perm
operator|)
operator|.
name|getACECount
argument_list|()
operator|>
literal|0
operator|)
condition|?
name|perm
operator|.
name|toString
argument_list|()
operator|+
literal|'+'
else|:
name|perm
operator|.
name|toString
argument_list|()
operator|)
argument_list|,
name|lastModificationTime
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse document name into a valid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|completitions
operator|.
name|add
argument_list|(
name|childResources
index|[
name|j
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|frame
operator|.
name|setResources
argument_list|(
name|tableData
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Display document on screen, by 24 lines.      *      * @param str string containing the document.      */
specifier|protected
name|void
name|more
parameter_list|(
specifier|final
name|String
name|str
parameter_list|)
block|{
specifier|final
name|LineNumberReader
name|reader
init|=
operator|new
name|LineNumberReader
argument_list|(
operator|new
name|StringReader
argument_list|(
name|str
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
comment|// int count = 0;
name|int
name|ch
decl_stmt|;
try|try
block|{
while|while
condition|(
name|System
operator|.
name|in
operator|.
name|available
argument_list|()
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|reader
operator|.
name|getLineNumber
argument_list|()
operator|%
literal|24
operator|==
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|"line: "
operator|+
name|reader
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|"; press [return] for more or [q] for quit."
argument_list|)
expr_stmt|;
name|ch
operator|=
name|System
operator|.
name|in
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'q'
operator|||
name|ch
operator|==
literal|'Q'
condition|)
block|{
return|return;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"IOException: "
operator|+
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * In interactive mode, process a line entered by the user.      *      * @param line the line entered      * @return true if command != quit      */
specifier|protected
name|boolean
name|process
parameter_list|(
specifier|final
name|String
name|line
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|frame
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|args
index|[]
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"find"
argument_list|)
condition|)
block|{
name|args
operator|=
operator|new
name|String
index|[
literal|2
index|]
expr_stmt|;
name|args
index|[
literal|0
index|]
operator|=
literal|"find"
expr_stmt|;
name|args
index|[
literal|1
index|]
operator|=
name|line
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|StreamTokenizer
name|tok
init|=
operator|new
name|StreamTokenizer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|line
argument_list|)
argument_list|)
decl_stmt|;
name|tok
operator|.
name|resetSyntax
argument_list|()
expr_stmt|;
name|tok
operator|.
name|wordChars
argument_list|(
literal|0x21
argument_list|,
literal|0x7FFF
argument_list|)
expr_stmt|;
name|tok
operator|.
name|quoteChar
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|tok
operator|.
name|whitespaceChars
argument_list|(
literal|0x20
argument_list|,
literal|0x20
argument_list|)
expr_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|argList
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|(
literal|3
argument_list|)
decl_stmt|;
comment|// int i = 0;
name|int
name|token
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|token
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
name|StreamTokenizer
operator|.
name|TT_EOF
condition|)
block|{
if|if
condition|(
name|token
operator|==
name|StreamTokenizer
operator|.
name|TT_WORD
operator|||
name|token
operator|==
literal|'"'
condition|)
block|{
name|argList
operator|.
name|add
argument_list|(
name|tok
operator|.
name|sval
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not parse command line."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|args
operator|=
operator|new
name|String
index|[
name|argList
operator|.
name|size
argument_list|()
index|]
expr_stmt|;
name|argList
operator|.
name|toArray
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
literal|true
return|;
block|}
try|try
block|{
name|XmldbURI
name|newPath
init|=
name|path
decl_stmt|;
specifier|final
name|XmldbURI
name|currUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|URI
argument_list|)
argument_list|)
operator|.
name|resolveCollectionPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"ls"
argument_list|)
condition|)
block|{
comment|// list collection contents
name|getResources
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|PERMISSIONS
argument_list|)
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|messageln
argument_list|(
name|resources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
operator|&&
name|j
operator|<
literal|5
condition|;
name|i
operator|++
operator|,
name|j
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|resources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|k
operator|=
name|j
expr_stmt|;
block|}
if|if
condition|(
name|k
operator|==
literal|4
operator|&&
name|i
operator|<
name|resources
operator|.
name|length
condition|)
block|{
name|i
operator|--
expr_stmt|;
block|}
name|messageln
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cd"
argument_list|)
condition|)
block|{
comment|// change current collection
name|completitions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Collection
name|temp
decl_stmt|;
name|XmldbURI
name|collectionPath
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
operator|||
name|args
index|[
literal|1
index|]
operator|==
literal|null
condition|)
block|{
name|collectionPath
operator|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
expr_stmt|;
block|}
else|else
block|{
name|collectionPath
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|collectionPath
operator|=
name|currUri
operator|.
name|resolveCollectionPath
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionPath
operator|.
name|numSegments
argument_list|()
operator|==
literal|0
condition|)
block|{
name|collectionPath
operator|=
name|currUri
operator|.
name|resolveCollectionPath
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"cannot go above "
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|temp
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|collectionPath
operator|.
name|toString
argument_list|()
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
name|current
operator|.
name|close
argument_list|()
expr_stmt|;
name|current
operator|=
name|temp
expr_stmt|;
name|newPath
operator|=
name|collectionPath
operator|.
name|toCollectionPathURI
argument_list|()
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|frame
operator|.
name|setPath
argument_list|(
name|collectionPath
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"no such collection."
argument_list|)
expr_stmt|;
block|}
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"cp"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|3
condition|)
block|{
name|messageln
argument_list|(
literal|"cp requires two arguments."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|XmldbURI
name|src
decl_stmt|;
specifier|final
name|XmldbURI
name|dest
decl_stmt|;
try|try
block|{
name|src
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|dest
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse collection name into a valid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|copy
argument_list|(
name|src
argument_list|,
name|dest
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"edit"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
specifier|final
name|XmldbURI
name|resource
decl_stmt|;
try|try
block|{
name|resource
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse resource name into a valid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|editResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"Please specify a resource."
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"wrong number of arguments."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|XmldbURI
name|resource
decl_stmt|;
try|try
block|{
name|resource
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse resource name into a valid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|Resource
name|res
init|=
name|retrieve
argument_list|(
name|resource
argument_list|)
decl_stmt|;
comment|// display document
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|data
decl_stmt|;
if|if
condition|(
literal|"XMLResource"
operator|.
name|equals
argument_list|(
name|res
operator|.
name|getResourceType
argument_list|()
argument_list|)
condition|)
block|{
name|data
operator|=
operator|(
name|String
operator|)
name|res
operator|.
name|getContent
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
operator|new
name|String
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|frame
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|frame
operator|.
name|display
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|content
init|=
name|data
decl_stmt|;
name|more
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"find"
argument_list|)
condition|)
block|{
comment|// search
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"no query argument found."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|messageln
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|result
operator|=
name|find
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"nothing found"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"found "
operator|+
name|result
operator|.
name|getSize
argument_list|()
operator|+
literal|" hits in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
name|nextInSet
operator|=
literal|1
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"run"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"please specify a query file."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
init|(
specifier|final
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|nextLine
decl_stmt|;
while|while
condition|(
operator|(
name|nextLine
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|nextLine
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
name|args
index|[
literal|1
index|]
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|result
operator|=
name|find
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"nothing found"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"found "
operator|+
name|result
operator|.
name|getSize
argument_list|()
operator|+
literal|" hits in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
name|nextInSet
operator|=
literal|1
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"An error occurred: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"show"
argument_list|)
condition|)
block|{
comment|// show search results
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"no result set."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
name|int
name|start
init|=
name|nextInSet
decl_stmt|;
name|int
name|count
init|=
literal|1
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|start
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|count
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
specifier|final
name|int
name|s
init|=
operator|(
name|int
operator|)
name|result
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|<
literal|1
operator|||
name|start
operator|>
name|s
condition|)
block|{
name|messageln
argument_list|(
literal|"start offset out of range"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
operator|--
name|start
expr_stmt|;
if|if
condition|(
name|start
operator|+
name|count
operator|>
name|s
condition|)
block|{
name|count
operator|=
name|s
operator|-
name|start
expr_stmt|;
block|}
name|nextInSet
operator|=
name|start
operator|+
name|count
operator|+
literal|1
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start
init|;
name|i
operator|<
name|start
operator|+
name|count
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Resource
name|r
init|=
name|result
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|frame
operator|.
name|display
argument_list|(
operator|(
name|String
operator|)
name|r
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|more
argument_list|(
operator|(
name|String
operator|)
name|r
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|messageln
argument_list|(
literal|"displayed items "
operator|+
operator|(
name|start
operator|+
literal|1
operator|)
operator|+
literal|" to "
operator|+
operator|(
name|start
operator|+
name|count
operator|)
operator|+
literal|" of "
operator|+
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|nfe
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"wrong argument"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"mkcol"
argument_list|)
condition|)
block|{
comment|// create collection
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|XmldbURI
name|collUri
decl_stmt|;
try|try
block|{
name|collUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse collection name into a valid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|EXistCollectionManagementService
name|mgtService
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|newCollection
init|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|collUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|newCollection
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"could not create collection."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"created collection."
argument_list|)
expr_stmt|;
block|}
comment|// re-read current collection
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|URI
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"put"
argument_list|)
condition|)
block|{
comment|// put a document or directory into the database
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|boolean
name|r
init|=
name|parse
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|getResources
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"putzip"
argument_list|)
condition|)
block|{
comment|// put the contents of a zip archive into the database
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|boolean
name|r
init|=
name|parseZip
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|getResources
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"putgz"
argument_list|)
condition|)
block|{
comment|// put the contents of a zip archive into the database
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|boolean
name|r
init|=
name|parseGZip
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|getResources
argument_list|()
expr_stmt|;
return|return
name|r
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"blob"
argument_list|)
condition|)
block|{
comment|// put a document or directory into the database
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|storeBinary
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"rm"
argument_list|)
condition|)
block|{
comment|// remove document
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"missing argument."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|remove
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
comment|// re-read current collection
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
literal|"uri"
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"rmcol"
argument_list|)
condition|)
block|{
comment|// remove collection
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"wrong argument count."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|XmldbURI
name|collUri
decl_stmt|;
try|try
block|{
name|collUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse collection name into a valid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|rmcol
argument_list|(
name|collUri
argument_list|)
expr_stmt|;
comment|// re-read current collection
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|URI
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"adduser"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Usage: adduser name"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|messageln
argument_list|(
literal|"command not supported in GUI mode. Please use the \"Edit users\" menu option."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|String
name|p1
decl_stmt|;
name|String
name|p2
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|p1
operator|=
name|console
operator|.
name|readLine
argument_list|(
literal|"password: "
argument_list|,
name|Character
operator|.
name|valueOf
argument_list|(
literal|'*'
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|=
name|console
operator|.
name|readLine
argument_list|(
literal|"re-enter password: "
argument_list|,
name|Character
operator|.
name|valueOf
argument_list|(
literal|'*'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
condition|)
block|{
break|break;
block|}
name|messageln
argument_list|(
literal|"Entered passwords differ. Try again..."
argument_list|)
expr_stmt|;
block|}
specifier|final
name|UserAider
name|user
init|=
operator|new
name|UserAider
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
name|p1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|groups
init|=
name|console
operator|.
name|readLine
argument_list|(
literal|"enter groups: "
argument_list|)
decl_stmt|;
specifier|final
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|groups
argument_list|,
literal|" ,"
argument_list|)
decl_stmt|;
while|while
condition|(
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|)
block|{
specifier|final
name|String
name|group
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|user
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|user
operator|.
name|getGroups
argument_list|()
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|messageln
argument_list|(
literal|"No groups specified, will be a member of the '"
operator|+
name|SecurityManager
operator|.
name|GUEST_GROUP
operator|+
literal|"' group!"
argument_list|)
expr_stmt|;
name|user
operator|.
name|addGroup
argument_list|(
name|SecurityManager
operator|.
name|GUEST_GROUP
argument_list|)
expr_stmt|;
block|}
name|mgtService
operator|.
name|addAccount
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"User '"
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|"' created."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"users"
argument_list|)
condition|)
block|{
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|users
index|[]
init|=
name|mgtService
operator|.
name|getAccounts
argument_list|()
decl_stmt|;
name|messageln
argument_list|(
literal|"User\t\tGroups"
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"-----------------------------------------"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|users
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
operator|+
literal|"\t\t"
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|groups
init|=
name|users
index|[
name|i
index|]
operator|.
name|getGroups
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|groups
operator|.
name|length
condition|;
name|j
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|groups
index|[
name|j
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|+
literal|1
operator|<
name|groups
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"passwd"
argument_list|)
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|messageln
argument_list|(
literal|"command not supported in GUI mode. Please use the \"Edit users\" menu option."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"Usage: passwd username"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
try|try
block|{
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|user
init|=
name|mgtService
operator|.
name|getAccount
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"no such user."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|String
name|p1
decl_stmt|;
name|String
name|p2
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|p1
operator|=
name|console
operator|.
name|readLine
argument_list|(
literal|"password: "
argument_list|,
name|Character
operator|.
name|valueOf
argument_list|(
literal|'*'
argument_list|)
argument_list|)
expr_stmt|;
name|p2
operator|=
name|console
operator|.
name|readLine
argument_list|(
literal|"re-enter password: "
argument_list|,
name|Character
operator|.
name|valueOf
argument_list|(
literal|'*'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|equals
argument_list|(
name|p2
argument_list|)
condition|)
block|{
break|break;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|EOL
operator|+
literal|"entered passwords differ. Try again..."
argument_list|)
expr_stmt|;
block|}
name|user
operator|.
name|setPassword
argument_list|(
name|p1
argument_list|)
expr_stmt|;
name|mgtService
operator|.
name|updateAccount
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|PASSWORD
argument_list|,
name|p1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"ERROR: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"chmod"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: chmod [resource] mode"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|Collection
name|temp
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"trying collection: "
operator|+
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|temp
operator|=
name|current
operator|.
name|getChildCollection
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|temp
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|EOL
operator|+
literal|"trying resource: "
operator|+
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
specifier|final
name|Resource
name|r
init|=
name|current
operator|.
name|getResource
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
literal|null
condition|)
block|{
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgtService
operator|.
name|chmod
argument_list|(
name|r
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Resource "
operator|+
name|args
index|[
literal|1
index|]
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|temp
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgtService
operator|.
name|chmod
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|mgtService
operator|.
name|chmod
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// re-read current collection
name|current
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|URI
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|PASSWORD
argument_list|)
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"chown"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|3
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: chown username group [resource]"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|Collection
name|temp
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|4
condition|)
block|{
name|temp
operator|=
name|current
operator|.
name|getChildCollection
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|temp
operator|=
name|current
expr_stmt|;
block|}
if|if
condition|(
name|temp
operator|!=
literal|null
condition|)
block|{
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|temp
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|u
init|=
name|mgtService
operator|.
name|getAccount
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"unknown user"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|mgtService
operator|.
name|chown
argument_list|(
name|u
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"owner changed."
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|Resource
name|res
init|=
name|current
operator|.
name|getResource
argument_list|(
name|args
index|[
literal|3
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|u
init|=
name|mgtService
operator|.
name|getAccount
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"unknown user"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|mgtService
operator|.
name|chown
argument_list|(
name|res
argument_list|,
name|u
argument_list|,
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Resource "
operator|+
name|args
index|[
literal|3
index|]
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"lock"
argument_list|)
operator|||
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"unlock"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"Usage: lock resource"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|Resource
name|res
init|=
name|current
operator|.
name|getResource
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
specifier|final
name|UserManagementService
name|mgtService
init|=
operator|(
name|UserManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Account
name|user
init|=
name|mgtService
operator|.
name|getAccount
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|,
literal|"guest"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"lock"
argument_list|)
condition|)
block|{
name|mgtService
operator|.
name|lockResource
argument_list|(
name|res
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mgtService
operator|.
name|unlockResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"elements"
argument_list|)
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Element occurrences in collection "
operator|+
name|current
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"--------------------------------------------"
operator|+
literal|"-----------"
argument_list|)
expr_stmt|;
specifier|final
name|IndexQueryService
name|service
init|=
operator|(
name|IndexQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Occurrences
index|[]
name|elements
init|=
name|service
operator|.
name|getIndexedElements
argument_list|(
literal|true
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|elements
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|formatString
argument_list|(
name|elements
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|elements
index|[
name|i
index|]
operator|.
name|getOccurrences
argument_list|()
argument_list|)
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"xupdate"
argument_list|)
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|messageln
argument_list|(
literal|"command not supported in GUI mode."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|StringBuilder
name|command
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
block|{
while|while
condition|(
literal|true
condition|)
block|{
specifier|final
name|String
name|lastLine
init|=
name|console
operator|.
name|readLine
argument_list|(
literal|"| "
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastLine
operator|==
literal|null
operator|||
name|lastLine
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
break|break;
block|}
name|command
operator|.
name|append
argument_list|(
name|lastLine
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|UserInterruptException
name|e
parameter_list|)
block|{
comment|//TODO report error?
block|}
specifier|final
name|String
name|xupdate
init|=
literal|"<xu:modifications version=\"1.0\" "
operator|+
literal|"xmlns:xu=\"http://www.xmldb.org/xupdate\">"
operator|+
name|command
operator|.
name|toString
argument_list|()
operator|+
literal|"</xu:modifications>"
decl_stmt|;
specifier|final
name|XUpdateQueryService
name|service
init|=
operator|(
name|XUpdateQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|mods
init|=
name|service
operator|.
name|update
argument_list|(
name|xupdate
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|mods
operator|+
literal|" modifications processed."
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"map"
argument_list|)
condition|)
block|{
specifier|final
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
literal|"= "
argument_list|)
decl_stmt|;
specifier|final
name|String
name|prefix
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|startsWith
argument_list|(
literal|"="
argument_list|)
condition|)
block|{
name|prefix
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|tok
operator|.
name|countTokens
argument_list|()
operator|<
literal|2
condition|)
block|{
name|messageln
argument_list|(
literal|"please specify a namespace/prefix mapping as: prefix=namespaceURI"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|prefix
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
specifier|final
name|String
name|uri
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|namespaceMappings
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"set"
argument_list|)
condition|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|properties
operator|.
name|list
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
specifier|final
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|,
literal|"= "
argument_list|)
decl_stmt|;
if|if
condition|(
name|tok
operator|.
name|countTokens
argument_list|()
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"please specify a key=value pair"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|final
name|String
name|key
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
specifier|final
name|String
name|val
init|=
name|tok
operator|.
name|nextToken
argument_list|()
decl_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|current
operator|.
name|setProperty
argument_list|(
name|key
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|getResources
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Exception: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"shutdown"
argument_list|)
condition|)
block|{
specifier|final
name|DatabaseInstanceManager
name|mgr
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"Service is not available"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|mgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"help"
argument_list|)
operator|||
literal|"?"
operator|.
name|equals
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
name|displayHelp
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"quit"
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
comment|//XXX:make it pluggable
block|}
if|else if
condition|(
name|havePluggableCommands
condition|)
block|{
specifier|final
name|EXistCollectionManagementService
name|mgtService
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
try|try
block|{
name|mgtService
operator|.
name|runCommand
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"org.exist.plugin.command.CommandNotFoundException"
argument_list|)
condition|)
block|{
name|messageln
argument_list|(
literal|"unknown command: '"
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
comment|//****************************************************************
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"unknown command: '"
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"'"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|path
operator|=
name|newPath
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|ClientFrame
operator|.
name|showErrorMessage
argument_list|(
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errorln
argument_list|(
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**      * @param name      */
specifier|private
name|void
name|editResource
parameter_list|(
specifier|final
name|XmldbURI
name|name
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Resource
name|doc
init|=
name|retrieve
argument_list|(
name|name
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
argument_list|)
decl_stmt|;
comment|//$NON-NLS-1$
specifier|final
name|DocumentView
name|view
init|=
operator|new
name|DocumentView
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
name|doc
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|view
operator|.
name|setSize
argument_list|(
operator|new
name|Dimension
argument_list|(
literal|640
argument_list|,
literal|400
argument_list|)
argument_list|)
expr_stmt|;
name|view
operator|.
name|viewDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|ex
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"XMLDB error: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Optional
argument_list|<
name|Writer
argument_list|>
name|getTraceWriter
parameter_list|()
block|{
comment|//should there be a trace writer?
if|if
condition|(
name|options
operator|.
name|traceQueriesFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|//lazy initialization
if|if
condition|(
operator|!
name|lazyTraceWriter
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|Writer
name|traceWriter
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|options
operator|.
name|traceQueriesFile
operator|.
name|get
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|traceWriter
operator|.
name|write
argument_list|(
literal|"<?xml version=\"1.0\"?>"
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|traceWriter
operator|.
name|write
argument_list|(
literal|"<query-log>"
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|this
operator|.
name|lazyTraceWriter
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|traceWriter
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"Cannot open file "
operator|+
name|options
operator|.
name|traceQueriesFile
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
return|return
name|lazyTraceWriter
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
specifier|private
name|ResourceSet
name|find
parameter_list|(
name|String
name|xpath
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|xpath
operator|.
name|substring
argument_list|(
name|xpath
operator|.
name|length
argument_list|()
operator|-
name|EOL
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|equals
argument_list|(
name|EOL
argument_list|)
condition|)
block|{
name|xpath
operator|=
name|xpath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|xpath
operator|.
name|length
argument_list|()
operator|-
name|EOL
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|xpathCopy
init|=
name|xpath
decl_stmt|;
name|getTraceWriter
argument_list|()
operator|.
name|ifPresent
argument_list|(
name|writer
lambda|->
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"<query>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|xpathCopy
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
literal|"</query>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|write
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
comment|//TODO report error?
block|}
block|}
argument_list|)
expr_stmt|;
name|String
name|sortBy
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|p
init|=
name|xpath
operator|.
name|indexOf
argument_list|(
literal|" sort by "
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
specifier|final
name|String
name|xp
init|=
name|xpath
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
decl_stmt|;
name|sortBy
operator|=
name|xpath
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|" sort by "
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|xpath
operator|=
name|xp
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XPath =   "
operator|+
name|xpath
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Sort-by = "
operator|+
name|sortBy
argument_list|)
expr_stmt|;
block|}
specifier|final
name|EXistXPathQueryService
name|service
init|=
operator|(
name|EXistXPathQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|INDENT
argument_list|)
argument_list|)
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|mapping
range|:
name|namespaceMappings
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|service
operator|.
name|setNamespace
argument_list|(
name|mapping
operator|.
name|getKey
argument_list|()
argument_list|,
name|mapping
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|sortBy
operator|==
literal|null
operator|)
condition|?
name|service
operator|.
name|query
argument_list|(
name|xpath
argument_list|)
else|:
name|service
operator|.
name|query
argument_list|(
name|xpath
argument_list|,
name|sortBy
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|Resource
name|retrieve
parameter_list|(
specifier|final
name|XmldbURI
name|resource
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|retrieve
argument_list|(
name|resource
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|INDENT
argument_list|)
argument_list|)
return|;
block|}
specifier|protected
specifier|final
name|Resource
name|retrieve
parameter_list|(
specifier|final
name|XmldbURI
name|resource
parameter_list|,
specifier|final
name|String
name|indent
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Resource
name|res
init|=
name|current
operator|.
name|getResource
argument_list|(
name|resource
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"document not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|res
return|;
block|}
specifier|private
name|void
name|remove
parameter_list|(
specifier|final
name|String
name|pattern
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|collection
init|=
name|current
decl_stmt|;
if|if
condition|(
name|pattern
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"path pattern should be relative to current collection"
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|Resource
name|resources
index|[]
decl_stmt|;
specifier|final
name|Resource
name|res
init|=
name|collection
operator|.
name|getResource
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|resources
operator|=
name|CollectionScanner
operator|.
name|scan
argument_list|(
name|collection
argument_list|,
literal|""
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resources
operator|=
operator|new
name|Resource
index|[
literal|1
index|]
expr_stmt|;
name|resources
index|[
literal|0
index|]
operator|=
name|res
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|message
argument_list|(
literal|"removing document "
operator|+
name|resources
index|[
name|i
index|]
operator|.
name|getId
argument_list|()
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|parent
init|=
name|resources
index|[
name|i
index|]
operator|.
name|getParentCollection
argument_list|()
decl_stmt|;
name|parent
operator|.
name|removeResource
argument_list|(
name|resources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|xupdate
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|resource
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|IOException
block|{
if|if
condition|(
operator|!
operator|(
name|Files
operator|.
name|exists
argument_list|(
name|file
argument_list|)
operator|&&
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
operator|)
condition|)
block|{
name|messageln
argument_list|(
literal|"cannot read file "
operator|+
name|file
operator|.
name|normalize
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|String
name|commands
init|=
name|XMLUtil
operator|.
name|readFile
argument_list|(
name|file
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|XUpdateQueryService
name|service
init|=
operator|(
name|XUpdateQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|long
name|modifications
decl_stmt|;
if|if
condition|(
name|resource
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|modifications
operator|=
name|service
operator|.
name|updateResource
argument_list|(
name|resource
operator|.
name|get
argument_list|()
argument_list|,
name|commands
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|modifications
operator|=
name|service
operator|.
name|update
argument_list|(
name|commands
argument_list|)
expr_stmt|;
block|}
name|messageln
argument_list|(
name|modifications
operator|+
literal|" modifications processed "
operator|+
literal|"successfully."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|rmcol
parameter_list|(
specifier|final
name|XmldbURI
name|collection
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|EXistCollectionManagementService
name|mgtService
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|message
argument_list|(
literal|"removing collection "
operator|+
name|collection
operator|+
literal|" ..."
argument_list|)
expr_stmt|;
name|mgtService
operator|.
name|removeCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|copy
parameter_list|(
specifier|final
name|XmldbURI
name|source
parameter_list|,
name|XmldbURI
name|destination
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
specifier|final
name|EXistCollectionManagementService
name|mgtService
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|destName
init|=
name|destination
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
specifier|final
name|Collection
name|destCol
init|=
name|resolveCollection
argument_list|(
name|destination
argument_list|)
decl_stmt|;
if|if
condition|(
name|destCol
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|destination
operator|.
name|numSegments
argument_list|()
operator|==
literal|1
condition|)
block|{
name|destination
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|current
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|destination
operator|=
name|destination
operator|.
name|removeLastSegment
argument_list|()
expr_stmt|;
block|}
block|}
specifier|final
name|Resource
name|srcDoc
init|=
name|resolveResource
argument_list|(
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|srcDoc
operator|!=
literal|null
condition|)
block|{
specifier|final
name|XmldbURI
name|resourcePath
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|srcDoc
operator|.
name|getParentCollection
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
name|srcDoc
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|messageln
argument_list|(
literal|"Copying resource '"
operator|+
name|resourcePath
operator|+
literal|"' to '"
operator|+
name|destination
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|mgtService
operator|.
name|copyResource
argument_list|(
name|resourcePath
argument_list|,
name|destination
argument_list|,
name|destName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|messageln
argument_list|(
literal|"Copying collection '"
operator|+
name|source
operator|+
literal|"' to '"
operator|+
name|destination
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|mgtService
operator|.
name|copy
argument_list|(
name|source
argument_list|,
name|destination
argument_list|,
name|destName
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse name into a valid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reindex
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|IndexQueryService
name|service
init|=
operator|(
name|IndexQueryService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|message
argument_list|(
literal|"reindexing collection "
operator|+
name|current
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|service
operator|.
name|reindexCollection
argument_list|()
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|storeBinary
parameter_list|(
specifier|final
name|String
name|fileName
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
condition|)
block|{
specifier|final
name|MimeType
name|mime
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|BinaryResource
name|resource
init|=
operator|(
name|BinaryResource
operator|)
name|current
operator|.
name|createResource
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|file
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|resource
operator|)
operator|.
name|setMimeType
argument_list|(
name|mime
operator|==
literal|null
condition|?
literal|"application/octet-stream"
else|:
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|boolean
name|findRecursive
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|XmldbURI
name|base
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|c
decl_stmt|;
name|Resource
name|document
decl_stmt|;
name|EXistCollectionManagementService
name|mgtService
decl_stmt|;
comment|//The XmldbURIs here aren't really used...
name|XmldbURI
name|next
decl_stmt|;
name|MimeType
name|mimeType
decl_stmt|;
try|try
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|FileUtils
operator|.
name|list
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|file
range|:
name|files
control|)
block|{
name|next
operator|=
name|base
operator|.
name|append
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|messageln
argument_list|(
literal|"entering directory "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|collection
operator|.
name|getChildCollection
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|mgtService
operator|=
operator|(
name|EXistCollectionManagementService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|c
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|Observable
operator|&&
name|options
operator|.
name|verbose
condition|)
block|{
specifier|final
name|ProgressObserver
name|observer
init|=
operator|new
name|ProgressObserver
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Observable
operator|)
name|c
operator|)
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
name|findRecursive
argument_list|(
name|c
argument_list|,
name|file
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|long
name|start1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mimeType
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"File "
operator|+
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
operator|+
literal|" has an unknown suffix. Cannot determine file type."
argument_list|)
expr_stmt|;
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
name|message
argument_list|(
literal|"storing document "
operator|+
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
operator|+
literal|" ("
operator|+
name|i
operator|+
literal|" of "
operator|+
name|files
operator|.
name|size
argument_list|()
operator|+
literal|") "
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|document
operator|=
name|collection
operator|.
name|createResource
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|,
name|mimeType
operator|.
name|getXMLDBType
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|file
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|document
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
operator|++
name|filesCount
expr_stmt|;
name|messageln
argument_list|(
literal|" "
operator|+
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|file
argument_list|)
operator|+
literal|" bytes in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start1
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"uri syntax exception parsing "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|i
operator|++
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Stores given Resource      *      * @param file file or directory      * @return TRUE if file or files in directory were all correctly stored.      * @throws XMLDBException An error was detected.      */
specifier|protected
specifier|synchronized
name|boolean
name|parse
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|Resource
name|document
decl_stmt|;
comment|// String xml;
if|if
condition|(
name|current
operator|instanceof
name|Observable
operator|&&
name|options
operator|.
name|verbose
condition|)
block|{
specifier|final
name|ProgressObserver
name|observer
init|=
operator|new
name|ProgressObserver
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Observable
operator|)
name|current
operator|)
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
condition|)
block|{
comment|// TODO, same logic as for the graphic client
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|reindexRecurse
condition|)
block|{
name|filesCount
operator|=
literal|0
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|result
init|=
name|findRecursive
argument_list|(
name|current
argument_list|,
name|file
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|messageln
argument_list|(
literal|"storing "
operator|+
name|filesCount
operator|+
literal|" files took "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|"sec."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|files
operator|=
name|FileUtils
operator|.
name|list
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|files
operator|=
name|DirectoryScanner
operator|.
name|scanDir
argument_list|(
name|file
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|start0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|bytes
init|=
literal|0
decl_stmt|;
name|MimeType
name|mimeType
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|mimeType
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
name|document
operator|=
name|current
operator|.
name|createResource
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
name|mimeType
operator|.
name|getXMLDBType
argument_list|()
argument_list|)
expr_stmt|;
name|message
argument_list|(
literal|"storing document "
operator|+
name|FileUtils
operator|.
name|fileName
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|" ("
operator|+
operator|(
name|i
operator|+
literal|1
operator|)
operator|+
literal|" of "
operator|+
name|files
operator|.
name|size
argument_list|()
operator|+
literal|") ..."
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|document
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"parsing "
operator|+
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|+
literal|" bytes took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|bytes
operator|+=
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|files
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|messageln
argument_list|(
literal|"parsed "
operator|+
name|bytes
operator|+
literal|" bytes in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start0
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|UNKNOWN_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|synchronized
name|boolean
name|findGZipRecursive
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|XmldbURI
name|base
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|IOException
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
init|=
name|FileUtils
operator|.
name|list
argument_list|(
name|dir
argument_list|)
decl_stmt|;
name|Collection
name|c
decl_stmt|;
name|Resource
name|document
decl_stmt|;
name|EXistCollectionManagementService
name|mgtService
decl_stmt|;
comment|//The XmldbURIs here aren't really used...
name|XmldbURI
name|next
decl_stmt|;
name|MimeType
name|mimeType
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|file
range|:
name|files
control|)
block|{
name|i
operator|++
expr_stmt|;
name|next
operator|=
name|base
operator|.
name|append
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|messageln
argument_list|(
literal|"entering directory "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|=
name|collection
operator|.
name|getChildCollection
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
name|mgtService
operator|=
operator|(
name|EXistCollectionManagementService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|c
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|c
operator|instanceof
name|Observable
operator|&&
name|options
operator|.
name|verbose
condition|)
block|{
specifier|final
name|ProgressObserver
name|observer
init|=
operator|new
name|ProgressObserver
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Observable
operator|)
name|c
operator|)
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
name|findGZipRecursive
argument_list|(
name|c
argument_list|,
name|file
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|long
name|start1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|compressedName
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|compressedName
decl_stmt|;
specifier|final
name|String
index|[]
name|cSuffix
init|=
block|{
literal|".gz"
block|,
literal|".Z"
block|}
decl_stmt|;
name|boolean
name|isCompressed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|isuf
init|=
literal|0
init|;
name|isuf
operator|<
name|cSuffix
operator|.
name|length
condition|;
name|isuf
operator|++
control|)
block|{
specifier|final
name|String
name|suf
init|=
name|cSuffix
index|[
name|isuf
index|]
decl_stmt|;
if|if
condition|(
name|localName
operator|.
name|endsWith
argument_list|(
name|suf
argument_list|)
condition|)
block|{
comment|// Removing compressed prefix to validate
name|localName
operator|=
name|compressedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|localName
operator|.
name|length
argument_list|()
operator|-
name|suf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|isCompressed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|mimeType
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|localName
argument_list|)
expr_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"File "
operator|+
name|compressedName
operator|+
literal|" has an unknown suffix. Cannot determine file type."
argument_list|)
expr_stmt|;
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
name|message
argument_list|(
literal|"storing document "
operator|+
name|compressedName
operator|+
literal|" ("
operator|+
name|i
operator|+
literal|" of "
operator|+
name|files
operator|.
name|size
argument_list|()
operator|+
literal|") "
operator|+
literal|"..."
argument_list|)
expr_stmt|;
name|document
operator|=
name|collection
operator|.
name|createResource
argument_list|(
name|compressedName
argument_list|,
name|mimeType
operator|.
name|getXMLDBType
argument_list|()
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|isCompressed
condition|?
operator|new
name|GZIPInputSource
argument_list|(
name|file
argument_list|)
else|:
name|file
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|document
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
operator|++
name|filesCount
expr_stmt|;
name|messageln
argument_list|(
literal|" "
operator|+
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
operator|+
operator|(
name|isCompressed
condition|?
literal|" compressed"
else|:
literal|""
operator|)
operator|+
literal|" bytes in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start1
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"uri syntax exception parsing "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * stores given Resource      *      * @param fileName simple file or directory      * @throws XMLDBException in case of database error storing the resource      * @throws IOException in case of a read error      * @return true if the operation succeeded      */
specifier|protected
specifier|synchronized
name|boolean
name|parseGZip
parameter_list|(
name|String
name|fileName
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|IOException
block|{
comment|//TODO : why is this test for ? Fileshould make it, shouldn't it ? -pb
name|fileName
operator|=
name|fileName
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|separatorChar
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
name|java
operator|.
name|io
operator|.
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
specifier|final
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|Resource
name|document
decl_stmt|;
comment|// String xml;
if|if
condition|(
name|current
operator|instanceof
name|Observable
operator|&&
name|options
operator|.
name|verbose
condition|)
block|{
specifier|final
name|ProgressObserver
name|observer
init|=
operator|new
name|ProgressObserver
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Observable
operator|)
name|current
operator|)
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
condition|)
block|{
comment|// TODO, same logic as for the graphic client
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|reindexRecurse
condition|)
block|{
name|filesCount
operator|=
literal|0
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|result
init|=
name|findGZipRecursive
argument_list|(
name|current
argument_list|,
name|file
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|messageln
argument_list|(
literal|"storing "
operator|+
name|filesCount
operator|+
literal|" compressed files took "
operator|+
operator|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|/
literal|1000
operator|)
operator|+
literal|"sec."
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
name|files
operator|=
name|FileUtils
operator|.
name|list
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|files
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
name|files
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|files
operator|=
name|DirectoryScanner
operator|.
name|scanDir
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|start0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|bytes
init|=
literal|0
decl_stmt|;
name|MimeType
name|mimeType
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|p
range|:
name|files
control|)
block|{
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|p
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|String
name|compressedName
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|p
argument_list|)
decl_stmt|;
name|String
name|localName
init|=
name|compressedName
decl_stmt|;
specifier|final
name|String
index|[]
name|cSuffix
init|=
block|{
literal|".gz"
block|,
literal|".Z"
block|}
decl_stmt|;
name|boolean
name|isCompressed
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|isuf
init|=
literal|0
init|;
name|isuf
operator|<
name|cSuffix
operator|.
name|length
condition|;
name|isuf
operator|++
control|)
block|{
specifier|final
name|String
name|suf
init|=
name|cSuffix
index|[
name|isuf
index|]
decl_stmt|;
if|if
condition|(
name|localName
operator|.
name|endsWith
argument_list|(
name|suf
argument_list|)
condition|)
block|{
comment|// Removing compressed prefix to validate
name|localName
operator|=
name|compressedName
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|localName
operator|.
name|length
argument_list|()
operator|-
name|suf
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|isCompressed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|mimeType
operator|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|localName
argument_list|)
expr_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
name|document
operator|=
name|current
operator|.
name|createResource
argument_list|(
name|compressedName
argument_list|,
name|mimeType
operator|.
name|getXMLDBType
argument_list|()
argument_list|)
expr_stmt|;
name|message
argument_list|(
literal|"storing document "
operator|+
name|compressedName
operator|+
literal|" ("
operator|+
name|i
operator|+
literal|" of "
operator|+
name|Files
operator|.
name|size
argument_list|(
name|p
argument_list|)
operator|+
literal|") ..."
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|isCompressed
condition|?
operator|new
name|GZIPInputSource
argument_list|(
name|p
argument_list|)
else|:
name|p
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|document
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|current
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"parsing "
operator|+
name|Files
operator|.
name|size
argument_list|(
name|p
argument_list|)
operator|+
operator|(
name|isCompressed
condition|?
literal|" compressed"
else|:
literal|""
operator|)
operator|+
literal|" bytes took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|bytes
operator|+=
name|Files
operator|.
name|size
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|messageln
argument_list|(
literal|"parsed "
operator|+
name|bytes
operator|+
literal|" compressed bytes in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start0
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * stores given Resource.      *      * @param zipPath Path to a zip file      *      * @throws XMLDBException in case of error writing to the database      * @return true if operation succeeded      */
specifier|protected
specifier|synchronized
name|boolean
name|parseZip
parameter_list|(
specifier|final
name|Path
name|zipPath
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
specifier|final
name|ZipFile
name|zfile
init|=
operator|new
name|ZipFile
argument_list|(
name|zipPath
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|current
operator|instanceof
name|Observable
operator|&&
name|options
operator|.
name|verbose
condition|)
block|{
specifier|final
name|ProgressObserver
name|observer
init|=
operator|new
name|ProgressObserver
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Observable
operator|)
name|current
operator|)
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
specifier|final
name|long
name|start0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|long
name|bytes
init|=
literal|0
decl_stmt|;
specifier|final
name|Enumeration
argument_list|<
name|?
extends|extends
name|ZipEntry
argument_list|>
name|e
init|=
name|zfile
operator|.
name|entries
argument_list|()
decl_stmt|;
name|int
name|number
init|=
literal|0
decl_stmt|;
name|Collection
name|base
init|=
name|current
decl_stmt|;
name|String
name|baseStr
init|=
literal|""
decl_stmt|;
while|while
condition|(
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|number
operator|++
expr_stmt|;
specifier|final
name|ZipEntry
name|ze
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|zeName
init|=
name|ze
operator|.
name|getName
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Paths
operator|.
name|get
argument_list|(
literal|"/db"
argument_list|)
operator|.
name|resolve
argument_list|(
name|zeName
argument_list|)
operator|.
name|normalize
argument_list|()
operator|.
name|startsWith
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"/db"
argument_list|)
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Detected archive exit attack! zipFile="
operator|+
name|zipPath
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|", entry="
operator|+
name|ze
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|String
index|[]
name|pathSteps
init|=
name|zeName
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|currStr
init|=
operator|new
name|StringBuilder
argument_list|(
name|pathSteps
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|pathSteps
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|currStr
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|pathSteps
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|baseStr
operator|.
name|equals
argument_list|(
name|currStr
argument_list|)
condition|)
block|{
name|base
operator|=
name|current
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pathSteps
operator|.
name|length
operator|-
literal|1
condition|;
name|i
operator|++
control|)
block|{
name|Collection
name|c
init|=
name|base
operator|.
name|getChildCollection
argument_list|(
name|pathSteps
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
specifier|final
name|EXistCollectionManagementService
name|mgtService
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|base
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|c
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|pathSteps
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|base
operator|=
name|c
expr_stmt|;
block|}
if|if
condition|(
name|base
operator|instanceof
name|Observable
operator|&&
name|options
operator|.
name|verbose
condition|)
block|{
specifier|final
name|ProgressObserver
name|observer
init|=
operator|new
name|ProgressObserver
argument_list|()
decl_stmt|;
operator|(
operator|(
name|Observable
operator|)
name|base
operator|)
operator|.
name|addObserver
argument_list|(
name|observer
argument_list|)
expr_stmt|;
block|}
name|baseStr
operator|=
name|currStr
operator|.
name|toString
argument_list|()
expr_stmt|;
name|messageln
argument_list|(
literal|"entering directory "
operator|+
name|baseStr
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ze
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
specifier|final
name|String
name|localName
init|=
name|pathSteps
index|[
name|pathSteps
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|MimeType
name|mimeType
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|localName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
specifier|final
name|Resource
name|document
init|=
name|base
operator|.
name|createResource
argument_list|(
name|localName
argument_list|,
name|mimeType
operator|.
name|getXMLDBType
argument_list|()
argument_list|)
decl_stmt|;
name|message
argument_list|(
literal|"storing Zip-entry document "
operator|+
name|localName
operator|+
literal|" ("
operator|+
operator|(
name|number
operator|)
operator|+
literal|" of "
operator|+
name|zfile
operator|.
name|size
argument_list|()
operator|+
literal|") ..."
argument_list|)
expr_stmt|;
name|document
operator|.
name|setContent
argument_list|(
operator|new
name|ZipEntryInputSource
argument_list|(
name|zfile
argument_list|,
name|ze
argument_list|)
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|document
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|base
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"done."
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"parsing "
operator|+
name|ze
operator|.
name|getSize
argument_list|()
operator|+
literal|" bytes took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|+
literal|"ms."
operator|+
name|EOL
argument_list|)
expr_stmt|;
name|bytes
operator|+=
name|ze
operator|.
name|getSize
argument_list|()
expr_stmt|;
block|}
block|}
name|messageln
argument_list|(
literal|"parsed "
operator|+
name|bytes
operator|+
literal|" bytes in "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start0
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"uri syntax exception parsing a ZIP entry from "
operator|+
name|zipPath
operator|.
name|toString
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse ZIP file "
operator|+
name|zipPath
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Method called by the store Dialog      *      * @param files  : selected      * @param upload : GUI object      * @throws XMLDBException in case of an error uploading the resources      * @return true if the operation succeeded      */
specifier|protected
specifier|synchronized
name|boolean
name|parse
parameter_list|(
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|files
parameter_list|,
specifier|final
name|UploadDialog
name|upload
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|uploadRootCollection
init|=
name|current
decl_stmt|;
if|if
condition|(
operator|!
name|upload
operator|.
name|isVisible
argument_list|()
condition|)
block|{
name|upload
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uploadRootCollection
operator|instanceof
name|Observable
condition|)
block|{
operator|(
operator|(
name|Observable
operator|)
name|uploadRootCollection
operator|)
operator|.
name|addObserver
argument_list|(
name|upload
operator|.
name|getObserver
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|upload
operator|.
name|setTotalSize
argument_list|(
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|files
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Path
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|upload
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
break|break;
block|}
comment|// should replace the lines above
name|store
argument_list|(
name|uploadRootCollection
argument_list|,
name|file
argument_list|,
name|upload
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|uploadRootCollection
operator|instanceof
name|Observable
condition|)
block|{
operator|(
operator|(
name|Observable
operator|)
name|uploadRootCollection
operator|)
operator|.
name|deleteObservers
argument_list|()
expr_stmt|;
block|}
name|upload
operator|.
name|uploadCompleted
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Pass to this method a java file object      * (may be a file or a directory), GUI object      * will create relative collections or resources      * recursively      */
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|UploadDialog
name|upload
parameter_list|)
block|{
comment|// cancel, stop crawl
if|if
condition|(
name|upload
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
return|return;
block|}
comment|// can't read there, inform client
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|upload
operator|.
name|showMessage
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|" impossible to read "
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|XmldbURI
name|filenameUri
decl_stmt|;
try|try
block|{
name|filenameUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e1
parameter_list|)
block|{
name|upload
operator|.
name|showMessage
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|" could not be encoded as a URI"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Directory, create collection, and crawl it
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|Collection
name|c
init|=
literal|null
decl_stmt|;
try|try
block|{
name|c
operator|=
name|collection
operator|.
name|getChildCollection
argument_list|(
name|filenameUri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
specifier|final
name|EXistCollectionManagementService
name|mgtService
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|c
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|filenameUri
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|upload
operator|.
name|showMessage
argument_list|(
literal|"Impossible to create a collection "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
comment|// change displayed collection if it's OK
name|upload
operator|.
name|setCurrentDir
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|c
operator|instanceof
name|Observable
condition|)
block|{
operator|(
operator|(
name|Observable
operator|)
name|c
operator|)
operator|.
name|addObserver
argument_list|(
name|upload
operator|.
name|getObserver
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// maybe a depth or recurs flag could be added here
specifier|final
name|Collection
name|childCollection
init|=
name|c
decl_stmt|;
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|children
init|=
name|Files
operator|.
name|list
argument_list|(
name|file
argument_list|)
init|)
block|{
name|children
operator|.
name|forEach
argument_list|(
name|child
lambda|->
name|store
argument_list|(
name|childCollection
argument_list|,
name|child
argument_list|,
name|upload
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|upload
operator|.
name|showMessage
argument_list|(
literal|"Impossible to upload "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
comment|// File, create and store resource
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|upload
operator|.
name|reset
argument_list|()
expr_stmt|;
name|upload
operator|.
name|setCurrent
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|long
name|fileSize
init|=
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|upload
operator|.
name|setCurrentSize
argument_list|(
name|fileSize
argument_list|)
expr_stmt|;
name|MimeType
name|mimeType
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
comment|// unknown mime type, here prefered is to do nothing
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|upload
operator|.
name|showMessage
argument_list|(
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|" - unknown suffix. No matching mime-type found in : "
operator|+
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getSrc
argument_list|()
argument_list|)
expr_stmt|;
comment|// if some one prefers to store it as binary by default, but dangerous
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|Resource
name|res
init|=
name|collection
operator|.
name|createResource
argument_list|(
name|filenameUri
operator|.
name|toString
argument_list|()
argument_list|,
name|mimeType
operator|.
name|getXMLDBType
argument_list|()
argument_list|)
decl_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|res
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
operator|++
name|filesCount
expr_stmt|;
name|this
operator|.
name|totalLength
operator|+=
name|fileSize
expr_stmt|;
name|upload
operator|.
name|setStoredSize
argument_list|(
name|this
operator|.
name|totalLength
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|upload
operator|.
name|showMessage
argument_list|(
literal|"Impossible to store a resource "
operator|+
name|file
operator|.
name|toAbsolutePath
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|mkcol
parameter_list|(
specifier|final
name|XmldbURI
name|collPath
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|messageln
argument_list|(
literal|"creating '"
operator|+
name|collPath
operator|+
literal|"'"
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
index|[]
name|segments
init|=
name|collPath
operator|.
name|getPathSegments
argument_list|()
decl_stmt|;
name|XmldbURI
name|p
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|segments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|p
operator|=
name|p
operator|.
name|append
argument_list|(
name|segments
index|[
name|i
index|]
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|c
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|URI
argument_list|)
operator|+
name|p
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|PASSWORD
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
block|{
specifier|final
name|EXistCollectionManagementService
name|mgtService
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|current
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|segments
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|current
operator|=
name|c
expr_stmt|;
block|}
block|}
name|path
operator|=
name|p
expr_stmt|;
block|}
specifier|protected
name|Collection
name|getCollection
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|URI
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|PASSWORD
argument_list|)
argument_list|)
return|;
block|}
comment|/*private char[] readPassword(InputStream in) throws IOException {                  char[] lineBuffer;         char[] buf;         // int i;                  buf = lineBuffer = new char[128];                  int room = buf.length;         int offset = 0;         int c;                  loop : while (true)             switch (c = in.read()) {                 case -1 :                 case '\n' :                     break loop;                 case '\r' :                     int c2 = in.read();                     if ((c2 != '\n')&& (c2 != -1)) {                         if (!(in instanceof PushbackInputStream))                             in = new PushbackInputStream(in);                                                  ((PushbackInputStream) in).unread(c2);                     } else                         break loop;                 default :                     if (--room< 0) {                         buf = new char[offset + 128];                         room = buf.length - offset - 1;                         System.arraycopy(lineBuffer, 0, buf, 0, offset);                         Arrays.fill(lineBuffer, ' ');                         lineBuffer = buf;                     }                     buf[offset++] = (char) c;                     break;             }                          if (offset == 0)                 return null;                          char[] ret = new char[offset];             System.arraycopy(buf, 0, ret, 0, offset);             Arrays.fill(buf, ' ');                          return ret;     }*/
specifier|private
name|Properties
name|loadClientProperties
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Properties
name|properties
init|=
name|ConfigurationHelper
operator|.
name|loadProperties
argument_list|(
literal|"client.properties"
argument_list|,
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
return|return
name|properties
return|;
block|}
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"WARN - Unable to find client.properties"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"WARN - Unable to load client.properties: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// return new empty properties
return|return
operator|new
name|Properties
argument_list|()
return|;
block|}
comment|/**      * Set any relevant properties from command line arguments      *      * @param options  CommandLineOptions      * @param props Client configuration      */
specifier|protected
name|void
name|setPropertiesFromCommandLine
parameter_list|(
specifier|final
name|CommandlineOptions
name|options
parameter_list|,
specifier|final
name|Properties
name|props
parameter_list|)
block|{
name|options
operator|.
name|options
operator|.
name|forEach
argument_list|(
name|properties
operator|::
name|setProperty
argument_list|)
expr_stmt|;
name|options
operator|.
name|username
operator|.
name|ifPresent
argument_list|(
name|username
lambda|->
name|props
operator|.
name|setProperty
argument_list|(
name|USER
argument_list|,
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|password
operator|.
name|ifPresent
argument_list|(
name|password
lambda|->
name|props
operator|.
name|setProperty
argument_list|(
name|PASSWORD
argument_list|,
name|password
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|needPassword
init|=
name|options
operator|.
name|username
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|password
operator|.
name|isPresent
argument_list|()
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|useSSL
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|SSL_ENABLE
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|options
operator|.
name|embedded
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|LOCAL_MODE
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
name|props
operator|.
name|setProperty
argument_list|(
name|URI
argument_list|,
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|options
operator|.
name|embeddedConfig
operator|.
name|ifPresent
argument_list|(
name|config
lambda|->
name|properties
operator|.
name|setProperty
argument_list|(
name|CONFIGURATION
argument_list|,
name|config
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|noEmbeddedMode
condition|)
block|{
name|props
operator|.
name|setProperty
argument_list|(
name|NO_EMBED_MODE
argument_list|,
literal|"TRUE"
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Process the command line options      *      * @return true if all are successful, otherwise false      * @throws java.lang.Exception      */
specifier|private
name|boolean
name|processCommandLineActions
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|boolean
name|foundCollection
init|=
name|options
operator|.
name|setCol
operator|.
name|isPresent
argument_list|()
decl_stmt|;
comment|// process command-line actions
if|if
condition|(
name|options
operator|.
name|reindex
condition|)
block|{
if|if
condition|(
operator|!
name|foundCollection
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify target collection with --collection"
argument_list|)
expr_stmt|;
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
try|try
block|{
name|reindex
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException while reindexing collection: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|rmCol
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|rmcol
argument_list|(
name|options
operator|.
name|rmCol
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException while removing collection: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|mkCol
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|mkcol
argument_list|(
name|options
operator|.
name|mkCol
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException during mkcol: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|if
condition|(
name|options
operator|.
name|getDoc
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|Resource
name|res
init|=
name|retrieve
argument_list|(
name|options
operator|.
name|getDoc
operator|.
name|get
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|!=
literal|null
condition|)
block|{
comment|// String data;
if|if
condition|(
literal|"XMLResource"
operator|.
name|equals
argument_list|(
name|res
operator|.
name|getResourceType
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|outputFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|writeOutputFile
argument_list|(
name|options
operator|.
name|outputFile
operator|.
name|get
argument_list|()
argument_list|,
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|res
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|options
operator|.
name|outputFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
operator|(
operator|(
name|ExtendedResource
operator|)
name|res
operator|)
operator|.
name|getContentIntoAFile
argument_list|(
name|options
operator|.
name|outputFile
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|res
operator|)
operator|.
name|freeResources
argument_list|()
expr_stmt|;
block|}
else|else
block|{
operator|(
operator|(
name|ExtendedResource
operator|)
name|res
operator|)
operator|.
name|getContentIntoAStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException while trying to retrieve document: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|options
operator|.
name|rmDoc
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|foundCollection
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify target collection with --collection"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|remove
argument_list|(
name|options
operator|.
name|rmDoc
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException during parse: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|else if
condition|(
operator|!
name|options
operator|.
name|parseDocs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|foundCollection
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Please specify target collection with --collection"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
specifier|final
name|Path
name|path
range|:
name|options
operator|.
name|parseDocs
control|)
block|{
try|try
block|{
name|parse
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException during parse: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
block|}
if|else if
condition|(
name|options
operator|.
name|xpath
operator|.
name|isPresent
argument_list|()
operator|||
operator|!
name|options
operator|.
name|queryFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|String
name|xpath
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|options
operator|.
name|queryFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
try|try
init|(
specifier|final
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|options
operator|.
name|queryFiles
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
name|xpath
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
comment|// if no argument has been found, read query from stdin
if|if
condition|(
name|options
operator|.
name|xpath
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|String
name|xpathStr
init|=
name|options
operator|.
name|xpath
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|xpathStr
operator|.
name|equals
argument_list|(
name|CommandlineOptions
operator|.
name|XPATH_STDIN
argument_list|)
condition|)
block|{
name|xpath
operator|=
name|xpathStr
expr_stmt|;
block|}
else|else
block|{
comment|// read from stdin
try|try
init|(
specifier|final
name|BufferedReader
name|stdin
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|System
operator|.
name|in
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|stdin
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
block|}
name|xpath
operator|=
name|buf
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"failed to read query from stdin"
argument_list|)
expr_stmt|;
name|xpath
operator|=
literal|null
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|if
condition|(
name|xpath
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|ResourceSet
name|result
init|=
name|find
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
specifier|final
name|int
name|maxResults
init|=
name|options
operator|.
name|howManyResults
operator|.
name|filter
argument_list|(
name|n
lambda|->
name|n
operator|>
literal|0
argument_list|)
operator|.
name|orElse
argument_list|(
operator|(
name|int
operator|)
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|.
name|outputFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
init|(
specifier|final
name|OutputStream
name|fos
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|options
operator|.
name|outputFile
operator|.
name|get
argument_list|()
argument_list|)
init|;
specifier|final
name|BufferedOutputStream
name|bos
init|=
operator|new
name|BufferedOutputStream
argument_list|(
name|fos
argument_list|)
init|;
specifier|final
name|PrintStream
name|ps
init|=
operator|new
name|PrintStream
argument_list|(
name|bos
argument_list|)
init|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxResults
operator|&&
name|i
operator|<
name|result
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Resource
name|res
init|=
name|result
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|instanceof
name|ExtendedResource
condition|)
block|{
operator|(
operator|(
name|ExtendedResource
operator|)
name|res
operator|)
operator|.
name|getContentIntoAStream
argument_list|(
name|ps
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ps
operator|.
name|print
argument_list|(
name|res
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|maxResults
operator|&&
name|i
operator|<
name|result
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Resource
name|res
init|=
name|result
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|instanceof
name|ExtendedResource
condition|)
block|{
operator|(
operator|(
name|ExtendedResource
operator|)
name|res
operator|)
operator|.
name|getContentIntoAStream
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException during query: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
if|else if
condition|(
name|options
operator|.
name|xupdateFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|xupdate
argument_list|(
name|options
operator|.
name|setDoc
argument_list|,
name|options
operator|.
name|xupdateFile
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException during xupdate: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"IOException during xupdate: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Ask user for login data using gui.      *      * @param props Client properties      * @return FALSE when pressed cancel, TRUE is sucessfull.      */
specifier|private
name|boolean
name|getGuiLoginData
parameter_list|(
specifier|final
name|Properties
name|props
parameter_list|)
block|{
specifier|final
name|Properties
name|loginData
init|=
name|ClientFrame
operator|.
name|getLoginData
argument_list|(
name|props
argument_list|)
decl_stmt|;
if|if
condition|(
name|loginData
operator|==
literal|null
operator|||
name|loginData
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// User pressed<cancel>
return|return
literal|false
return|;
block|}
name|props
operator|.
name|putAll
argument_list|(
name|loginData
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/**      * Reusable method for connecting to database. Exits process on failure.      */
specifier|private
name|void
name|connectToDatabase
parameter_list|()
block|{
try|try
block|{
name|connect
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|cnf
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
block|{
name|frame
operator|.
name|setStatus
argument_list|(
literal|"Connection to database failed; message: "
operator|+
name|cnf
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Connection to database failed; message: "
operator|+
name|cnf
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|cnf
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|SystemExitCodes
operator|.
name|CATCH_ALL_GENERAL_ERROR_EXIT_CODE
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Main processing method for the InteractiveClient object      *      * @param args command line arguments      * @return true on success, false on failure      * @throws Exception if an error occurs      */
specifier|public
name|boolean
name|run
parameter_list|(
specifier|final
name|String
name|args
index|[]
parameter_list|)
throws|throws
name|Exception
block|{
comment|// parse command-line options
name|this
operator|.
name|options
operator|=
name|CommandlineOptions
operator|.
name|parse
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|this
operator|.
name|path
operator|=
name|options
operator|.
name|setCol
operator|.
name|orElse
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
expr_stmt|;
comment|// initialize with default properties, before add client properties
name|properties
operator|=
operator|new
name|Properties
argument_list|(
name|defaultProps
argument_list|)
expr_stmt|;
comment|// get eXist home
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|home
init|=
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
decl_stmt|;
comment|// get default configuration filename from the driver class and set it in properties
name|Optional
argument_list|<
name|Path
argument_list|>
name|configFile
init|=
name|ConfigurationHelper
operator|.
name|getFromSystemProperty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|configFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|Class
argument_list|<
name|?
argument_list|>
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|DRIVER
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Field
name|CONF_XML
init|=
name|cl
operator|.
name|getDeclaredField
argument_list|(
literal|"CONF_XML"
argument_list|)
decl_stmt|;
if|if
condition|(
name|CONF_XML
operator|!=
literal|null
operator|&&
name|home
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|configFile
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|ConfigurationHelper
operator|.
name|lookup
argument_list|(
operator|(
name|String
operator|)
name|CONF_XML
operator|.
name|get
argument_list|(
literal|""
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|configFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|CONFIGURATION
argument_list|,
name|configFile
operator|.
name|get
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|properties
operator|.
name|putAll
argument_list|(
name|loadClientProperties
argument_list|()
argument_list|)
expr_stmt|;
name|setPropertiesFromCommandLine
argument_list|(
name|options
argument_list|,
name|properties
argument_list|)
expr_stmt|;
comment|// print copyright notice - after parsing command line options, or it can't be silenced!
if|if
condition|(
operator|!
name|options
operator|.
name|quiet
condition|)
block|{
name|printNotice
argument_list|()
expr_stmt|;
block|}
comment|// Fix "uri" property: Excalibur CLI can't parse dashes, so we need to URL encode them:
name|properties
operator|.
name|setProperty
argument_list|(
name|URI
argument_list|,
name|URLDecoder
operator|.
name|decode
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|URI
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
name|boolean
name|interactive
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|(
operator|!
name|options
operator|.
name|parseDocs
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|options
operator|.
name|rmDoc
operator|.
name|isPresent
argument_list|()
operator|||
name|options
operator|.
name|getDoc
operator|.
name|isPresent
argument_list|()
operator|||
name|options
operator|.
name|rmCol
operator|.
name|isPresent
argument_list|()
operator|||
name|options
operator|.
name|xpath
operator|.
name|isPresent
argument_list|()
operator|||
operator|(
operator|!
name|options
operator|.
name|queryFiles
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
name|options
operator|.
name|xupdateFile
operator|.
name|isPresent
argument_list|()
operator|||
name|options
operator|.
name|reindex
condition|)
block|{
name|interactive
operator|=
literal|false
expr_stmt|;
block|}
comment|// prompt for password if needed
if|if
condition|(
operator|!
name|hasLoginDetails
argument_list|(
name|options
argument_list|)
condition|)
block|{
if|if
condition|(
name|interactive
operator|&&
name|options
operator|.
name|startGUI
condition|)
block|{
specifier|final
name|boolean
name|haveLoginData
init|=
name|getGuiLoginData
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|haveLoginData
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
if|else if
condition|(
name|options
operator|.
name|username
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|options
operator|.
name|password
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|PASSWORD
argument_list|,
name|console
operator|.
name|readLine
argument_list|(
literal|"password: "
argument_list|,
name|Character
operator|.
name|valueOf
argument_list|(
literal|'*'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
block|}
name|historyFile
operator|=
name|home
operator|.
name|map
argument_list|(
name|h
lambda|->
name|h
operator|.
name|resolve
argument_list|(
literal|".exist_history"
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|".exist_history"
argument_list|)
argument_list|)
expr_stmt|;
name|queryHistoryFile
operator|=
name|home
operator|.
name|map
argument_list|(
name|h
lambda|->
name|h
operator|.
name|resolve
argument_list|(
literal|".exist_query_history"
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|".exist_query_history"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|queryHistoryFile
argument_list|)
condition|)
block|{
name|readQueryHistory
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|interactive
condition|)
block|{
comment|// in gui mode we use Readline for history management
comment|// initialize Readline library
specifier|final
name|Terminal
name|terminal
init|=
name|TerminalBuilder
operator|.
name|builder
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|History
name|history
init|=
operator|new
name|DefaultHistory
argument_list|()
decl_stmt|;
name|console
operator|=
name|LineReaderBuilder
operator|.
name|builder
argument_list|()
operator|.
name|terminal
argument_list|(
name|terminal
argument_list|)
operator|.
name|variable
argument_list|(
name|LineReader
operator|.
name|HISTORY_FILE
argument_list|,
name|historyFile
argument_list|)
operator|.
name|history
argument_list|(
name|history
argument_list|)
operator|.
name|completer
argument_list|(
operator|new
name|CollectionCompleter
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
expr_stmt|;
block|}
comment|// connect to the db
name|connectToDatabase
argument_list|()
expr_stmt|;
if|if
condition|(
name|current
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
block|{
name|frame
operator|.
name|setStatus
argument_list|(
literal|"Could not retrieve collection "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not retrieve collection "
operator|+
name|path
argument_list|)
expr_stmt|;
block|}
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|final
name|boolean
name|processingOK
init|=
name|processCommandLineActions
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|processingOK
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|interactive
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|UIManager
operator|.
name|getSystemLookAndFeelClassName
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnsupportedLookAndFeelException
name|ulafe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Warning: Unable to set native look and feel: "
operator|+
name|ulafe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|frame
operator|=
operator|new
name|ClientFrame
argument_list|(
name|this
argument_list|,
name|path
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setLocation
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setSize
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|frame
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// enter interactive mode
if|if
condition|(
operator|(
operator|!
name|options
operator|.
name|startGUI
operator|)
operator|||
operator|(
name|frame
operator|==
literal|null
operator|)
condition|)
block|{
comment|// No gui
try|try
block|{
name|getResources
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"XMLDBException while "
operator|+
literal|"retrieving collection contents: "
operator|+
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|getCause
argument_list|()
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
else|else
block|{
comment|// with gui ; re-login posibility
name|boolean
name|retry
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|retry
condition|)
block|{
name|String
name|errorMessage
init|=
literal|""
decl_stmt|;
try|try
block|{
name|getResources
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|errorMessage
operator|=
name|getExceptionMessage
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|ClientFrame
operator|.
name|showErrorMessage
argument_list|(
literal|"XMLDBException occurred while retrieving collection: "
operator|+
name|errorMessage
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
comment|// Determine error text. For special reasons we can retry
comment|// to connect.
if|if
condition|(
name|errorMessage
operator|.
name|matches
argument_list|(
literal|"^.*Invalid password for user.*$"
argument_list|)
operator|||
name|errorMessage
operator|.
name|matches
argument_list|(
literal|"^.*User .* unknown.*"
argument_list|)
operator|||
name|errorMessage
operator|.
name|matches
argument_list|(
literal|"^.*Connection refused: connect.*"
argument_list|)
condition|)
block|{
specifier|final
name|boolean
name|haveLoginData
init|=
name|getGuiLoginData
argument_list|(
name|properties
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|haveLoginData
condition|)
block|{
comment|// pressed cancel
return|return
literal|false
return|;
block|}
comment|// Need to shutdown ?? ask wolfgang
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// connect to the db
name|connectToDatabase
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|errorMessage
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// No pattern match, but we have an error. stop here
name|frame
operator|.
name|dispose
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// No error message, continue startup.
name|retry
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
block|}
name|messageln
argument_list|(
name|EOL
operator|+
literal|"type help or ? for help."
argument_list|)
expr_stmt|;
if|if
condition|(
name|options
operator|.
name|openQueryGUI
condition|)
block|{
specifier|final
name|QueryDialog
name|qd
init|=
operator|new
name|QueryDialog
argument_list|(
name|this
argument_list|,
name|current
argument_list|,
name|properties
argument_list|)
decl_stmt|;
name|qd
operator|.
name|setLocation
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|qd
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|options
operator|.
name|startGUI
condition|)
block|{
name|readlineInputLoop
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|frame
operator|.
name|displayPrompt
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|hasLoginDetails
parameter_list|(
specifier|final
name|CommandlineOptions
name|options
parameter_list|)
block|{
return|return
name|options
operator|.
name|username
operator|.
name|isPresent
argument_list|()
operator|&&
name|options
operator|.
name|password
operator|.
name|isPresent
argument_list|()
operator|&&
operator|(
name|options
operator|.
name|embedded
operator|||
name|options
operator|.
name|options
operator|.
name|containsKey
argument_list|(
literal|"uri"
argument_list|)
operator|)
return|;
block|}
specifier|public
specifier|static
name|String
name|getExceptionMessage
parameter_list|(
name|Throwable
name|e
parameter_list|)
block|{
name|Throwable
name|cause
decl_stmt|;
while|while
condition|(
operator|(
name|cause
operator|=
name|e
operator|.
name|getCause
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|e
operator|=
name|cause
expr_stmt|;
block|}
return|return
name|e
operator|.
name|getMessage
argument_list|()
return|;
block|}
comment|/**      * Read Query History file.      */
specifier|protected
name|void
name|readQueryHistory
parameter_list|()
block|{
try|try
block|{
specifier|final
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|final
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
name|builder
operator|.
name|parse
argument_list|(
name|queryHistoryFile
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|NodeList
name|nodes
init|=
name|doc
operator|.
name|getElementsByTagName
argument_list|(
literal|"query"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nodes
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Element
name|query
init|=
operator|(
name|Element
operator|)
name|nodes
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|final
name|StringBuilder
name|value
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Node
name|next
init|=
name|query
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|value
operator|.
name|append
argument_list|(
name|next
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
name|queryHistory
operator|.
name|addLast
argument_list|(
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
condition|)
block|{
name|ClientFrame
operator|.
name|showErrorMessage
argument_list|(
literal|"Error while reading query history: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|errorln
argument_list|(
literal|"Error while reading query history: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|addToHistory
parameter_list|(
specifier|final
name|String
name|query
parameter_list|)
block|{
name|queryHistory
operator|.
name|add
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|writeQueryHistory
parameter_list|()
block|{
try|try
block|{
name|console
operator|.
name|getHistory
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not write history File to "
operator|+
name|historyFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|BufferedWriter
name|writer
init|=
name|Files
operator|.
name|newBufferedWriter
argument_list|(
name|queryHistoryFile
argument_list|,
name|StandardCharsets
operator|.
name|UTF_8
argument_list|)
init|)
block|{
specifier|final
name|SAXSerializer
name|serializer
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|int
name|p
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|queryHistory
operator|.
name|size
argument_list|()
operator|>
literal|20
condition|)
block|{
name|p
operator|=
name|queryHistory
operator|.
name|size
argument_list|()
operator|-
literal|20
expr_stmt|;
block|}
specifier|final
name|AttributesImpl
name|attrs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|startElement
argument_list|(
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
literal|"history"
argument_list|,
literal|"history"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|ListIterator
argument_list|<
name|String
argument_list|>
name|i
init|=
name|queryHistory
operator|.
name|listIterator
argument_list|(
name|p
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|serializer
operator|.
name|startElement
argument_list|(
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
literal|"query"
argument_list|,
literal|"query"
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
specifier|final
name|String
name|next
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|characters
argument_list|(
name|next
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|next
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endElement
argument_list|(
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
literal|"query"
argument_list|,
literal|"query"
argument_list|)
expr_stmt|;
block|}
name|serializer
operator|.
name|endElement
argument_list|(
name|XMLConstants
operator|.
name|NULL_NS_URI
argument_list|,
literal|"history"
argument_list|,
literal|"history"
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|serializer
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"IO error while writing query history."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"SAX exception while writing query history."
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|readlineInputLoop
parameter_list|()
block|{
name|String
name|line
decl_stmt|;
name|boolean
name|cont
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|cont
condition|)
block|{
try|try
block|{
if|if
condition|(
literal|"true"
operator|.
name|equals
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|COLORS
argument_list|)
argument_list|)
condition|)
block|{
name|line
operator|=
name|console
operator|.
name|readLine
argument_list|(
name|ANSI_CYAN
operator|+
literal|"exist:"
operator|+
name|path
operator|+
literal|"> "
operator|+
name|ANSI_WHITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|line
operator|=
name|console
operator|.
name|readLine
argument_list|(
literal|"exist:"
operator|+
name|path
operator|+
literal|"> "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|line
operator|!=
literal|null
condition|)
block|{
name|cont
operator|=
name|process
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EndOfFileException
name|e
parameter_list|)
block|{
break|break;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|console
operator|.
name|getHistory
argument_list|()
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Could not write history File to "
operator|+
name|historyFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|messageln
argument_list|(
literal|"quit."
argument_list|)
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|shutdown
parameter_list|(
specifier|final
name|boolean
name|force
parameter_list|)
block|{
name|lazyTraceWriter
operator|.
name|ifPresent
argument_list|(
name|writer
lambda|->
block|{
try|try
block|{
name|writer
operator|.
name|write
argument_list|(
literal|"</query-log>"
argument_list|)
expr_stmt|;
name|writer
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e1
parameter_list|)
block|{
block|}
block|}
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|DatabaseInstanceManager
name|mgr
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|current
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"service is not available"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|mgr
operator|.
name|isLocalInstance
argument_list|()
operator|||
name|force
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"shutting down database..."
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"database shutdown failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
try|try
block|{
name|current
operator|.
name|close
argument_list|()
expr_stmt|;
name|current
operator|=
literal|null
expr_stmt|;
name|DatabaseManager
operator|.
name|deregisterDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|database
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"unable to close collection: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|printNotice
parameter_list|()
block|{
name|messageln
argument_list|(
name|getNotice
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getNotice
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|SystemProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getSystemProperty
argument_list|(
literal|"product-name"
argument_list|,
literal|"eXist-db"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" version "
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|SystemProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getSystemProperty
argument_list|(
literal|"product-version"
argument_list|,
literal|"unknown"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|SystemProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getSystemProperty
argument_list|(
literal|"git-commit"
argument_list|,
literal|""
argument_list|)
argument_list|)
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|" ("
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|SystemProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getSystemProperty
argument_list|(
literal|"git-commit"
argument_list|,
literal|"(unknown Git commit ID)"
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
literal|", Copyright (C) 2001-"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|Calendar
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|YEAR
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|" The eXist-db Project"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"eXist-db comes with ABSOLUTELY NO WARRANTY."
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"This is free software, and you are welcome to redistribute it"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
literal|"under certain conditions; for details read the license file."
argument_list|)
expr_stmt|;
name|builder
operator|.
name|append
argument_list|(
name|EOL
argument_list|)
expr_stmt|;
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|message
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|options
operator|.
name|quiet
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
block|{
name|frame
operator|.
name|display
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|print
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|messageln
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|options
operator|.
name|quiet
condition|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
block|{
name|frame
operator|.
name|display
argument_list|(
name|msg
operator|+
name|EOL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|errorln
parameter_list|(
specifier|final
name|String
name|msg
parameter_list|)
block|{
if|if
condition|(
name|options
operator|.
name|startGUI
operator|&&
name|frame
operator|!=
literal|null
condition|)
block|{
name|frame
operator|.
name|display
argument_list|(
name|msg
operator|+
name|EOL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
name|msg
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Collection
name|resolveCollection
parameter_list|(
specifier|final
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|URI
argument_list|)
operator|+
name|path
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|USER
argument_list|)
argument_list|,
name|properties
operator|.
name|getProperty
argument_list|(
name|PASSWORD
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Resource
name|resolveResource
parameter_list|(
specifier|final
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
specifier|final
name|XmldbURI
name|collectionPath
init|=
name|path
operator|.
name|numSegments
argument_list|()
operator|==
literal|1
condition|?
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|current
operator|.
name|getName
argument_list|()
argument_list|)
else|:
name|path
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
specifier|final
name|XmldbURI
name|resourceName
init|=
name|path
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
specifier|final
name|Collection
name|collection
init|=
name|resolveCollection
argument_list|(
name|collectionPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|messageln
argument_list|(
literal|"Collection "
operator|+
name|collectionPath
operator|+
literal|" not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|messageln
argument_list|(
literal|"Locating resource "
operator|+
name|resourceName
operator|+
literal|" in collection "
operator|+
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|collection
operator|.
name|getResource
argument_list|(
name|resourceName
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|errorln
argument_list|(
literal|"could not parse collection name into a valid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
class|class
name|CollectionCompleter
implements|implements
name|Completer
block|{
annotation|@
name|Override
specifier|public
name|void
name|complete
parameter_list|(
specifier|final
name|LineReader
name|lineReader
parameter_list|,
specifier|final
name|ParsedLine
name|parsedLine
parameter_list|,
specifier|final
name|List
argument_list|<
name|Candidate
argument_list|>
name|candidates
parameter_list|)
block|{
specifier|final
name|String
name|buffer
init|=
name|parsedLine
operator|.
name|line
argument_list|()
decl_stmt|;
name|int
name|p
init|=
name|buffer
operator|.
name|lastIndexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
specifier|final
name|String
name|toComplete
decl_stmt|;
if|if
condition|(
name|p
operator|>
operator|-
literal|1
operator|&&
operator|++
name|p
operator|<
name|buffer
operator|.
name|length
argument_list|()
condition|)
block|{
name|toComplete
operator|=
name|buffer
operator|.
name|substring
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|toComplete
operator|=
name|buffer
expr_stmt|;
block|}
comment|//            System.out.println("\nbuffer: '" + toComplete + "'; cursor: " + cursor);
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|set
init|=
name|completitions
operator|.
name|tailSet
argument_list|(
name|toComplete
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
operator|&&
name|set
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
specifier|final
name|String
name|next
range|:
name|completitions
operator|.
name|tailSet
argument_list|(
name|toComplete
argument_list|)
control|)
block|{
if|if
condition|(
name|next
operator|.
name|startsWith
argument_list|(
name|toComplete
argument_list|)
condition|)
block|{
name|candidates
operator|.
name|add
argument_list|(
operator|new
name|Candidate
argument_list|(
name|next
argument_list|,
name|next
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
specifier|static
class|class
name|ProgressObserver
implements|implements
name|Observer
block|{
specifier|final
name|ProgressBar
name|elementsProgress
init|=
operator|new
name|ProgressBar
argument_list|(
literal|"storing elements"
argument_list|)
decl_stmt|;
name|Observable
name|lastObservable
init|=
literal|null
decl_stmt|;
specifier|final
name|ProgressBar
name|parseProgress
init|=
operator|new
name|ProgressBar
argument_list|(
literal|"storing nodes   "
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
specifier|final
name|Observable
name|o
parameter_list|,
specifier|final
name|Object
name|obj
parameter_list|)
block|{
specifier|final
name|ProgressIndicator
name|ind
init|=
operator|(
name|ProgressIndicator
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|lastObservable
operator|==
literal|null
operator|||
name|o
operator|!=
name|lastObservable
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|o
operator|instanceof
name|ElementIndex
condition|)
block|{
name|elementsProgress
operator|.
name|set
argument_list|(
name|ind
operator|.
name|getValue
argument_list|()
argument_list|,
name|ind
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|parseProgress
operator|.
name|set
argument_list|(
name|ind
operator|.
name|getValue
argument_list|()
argument_list|,
name|ind
operator|.
name|getMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|lastObservable
operator|=
name|o
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeOutputFile
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|Object
name|data
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
specifier|final
name|OutputStream
name|os
init|=
name|Files
operator|.
name|newOutputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
if|if
condition|(
name|data
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
operator|(
name|byte
index|[]
operator|)
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
init|(
specifier|final
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|os
argument_list|,
name|Charset
operator|.
name|forName
argument_list|(
name|properties
operator|.
name|getProperty
argument_list|(
name|ENCODING
argument_list|)
argument_list|)
argument_list|)
init|)
block|{
name|writer
operator|.
name|write
argument_list|(
name|data
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
specifier|static
name|String
name|formatString
parameter_list|(
name|String
name|s1
parameter_list|,
specifier|final
name|String
name|s2
parameter_list|,
specifier|final
name|int
name|width
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|width
argument_list|)
decl_stmt|;
if|if
condition|(
name|s1
operator|.
name|length
argument_list|()
operator|>
name|width
condition|)
block|{
name|s1
operator|=
name|s1
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|width
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|s1
argument_list|)
expr_stmt|;
specifier|final
name|int
name|fill
init|=
name|width
operator|-
operator|(
name|s1
operator|.
name|length
argument_list|()
operator|+
name|s2
operator|.
name|length
argument_list|()
operator|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fill
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|s2
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
specifier|static
name|String
name|formatString
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|,
specifier|final
name|int
index|[]
name|sizes
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|sizes
index|[
name|i
index|]
operator|<
literal|0
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sizes
index|[
name|i
index|]
operator|&&
name|j
operator|<
name|args
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|args
index|[
name|i
index|]
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sizes
index|[
name|i
index|]
operator|-
name|args
index|[
name|i
index|]
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|Properties
name|getSystemProperties
parameter_list|()
block|{
specifier|final
name|Properties
name|sysProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|sysProperties
operator|.
name|load
argument_list|(
name|InteractiveClient
operator|.
name|class
operator|.
name|getClassLoader
argument_list|()
operator|.
name|getResourceAsStream
argument_list|(
literal|"org/exist/system.properties"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Unable to load system.properties from class loader"
argument_list|)
expr_stmt|;
block|}
return|return
name|sysProperties
return|;
block|}
specifier|public
specifier|static
name|ImageIcon
name|getExistIcon
parameter_list|(
specifier|final
name|Class
name|clazz
parameter_list|)
block|{
return|return
operator|new
name|javax
operator|.
name|swing
operator|.
name|ImageIcon
argument_list|(
name|clazz
operator|.
name|getResource
argument_list|(
literal|"/org/exist/client/icons/x.png"
argument_list|)
argument_list|)
return|;
block|}
block|}
end_class

end_unit

