begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2020 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|Component
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JCheckBox
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|JTable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|SwingConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|UIManager
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|Border
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|border
operator|.
name|EmptyBorder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|UIResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|TableCellRenderer
import|;
end_import

begin_comment
comment|/**  * Renders a T as a JCheckBox.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|CheckboxTableCellRenderer
parameter_list|<
name|T
parameter_list|>
extends|extends
name|JCheckBox
implements|implements
name|TableCellRenderer
implements|,
name|UIResource
block|{
specifier|private
specifier|static
specifier|final
name|Border
name|noFocusBorder
init|=
operator|new
name|EmptyBorder
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Function
argument_list|<
name|T
argument_list|,
name|Tuple2
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|valueStateFn
decl_stmt|;
specifier|public
name|CheckboxTableCellRenderer
parameter_list|(
specifier|final
name|Function
argument_list|<
name|T
argument_list|,
name|Tuple2
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
argument_list|>
name|valueStateFn
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|setHorizontalAlignment
argument_list|(
name|SwingConstants
operator|.
name|LEFT
argument_list|)
expr_stmt|;
name|setBorderPainted
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|setHorizontalTextPosition
argument_list|(
name|SwingConstants
operator|.
name|RIGHT
argument_list|)
expr_stmt|;
name|this
operator|.
name|valueStateFn
operator|=
name|valueStateFn
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Component
name|getTableCellRendererComponent
parameter_list|(
specifier|final
name|JTable
name|table
parameter_list|,
specifier|final
name|Object
name|value
parameter_list|,
specifier|final
name|boolean
name|isSelected
parameter_list|,
specifier|final
name|boolean
name|hasFocus
parameter_list|,
specifier|final
name|int
name|row
parameter_list|,
specifier|final
name|int
name|column
parameter_list|)
block|{
if|if
condition|(
name|isSelected
condition|)
block|{
name|setForeground
argument_list|(
name|table
operator|.
name|getSelectionForeground
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|setBackground
argument_list|(
name|table
operator|.
name|getSelectionBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setForeground
argument_list|(
name|table
operator|.
name|getForeground
argument_list|()
argument_list|)
expr_stmt|;
name|setBackground
argument_list|(
name|table
operator|.
name|getBackground
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//set selected
specifier|final
name|Tuple2
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|state
init|=
name|valueStateFn
operator|.
name|apply
argument_list|(
operator|(
name|T
operator|)
name|value
argument_list|)
decl_stmt|;
name|setSelected
argument_list|(
name|state
operator|.
name|_2
operator|!=
literal|null
operator|&&
name|state
operator|.
name|_2
argument_list|)
expr_stmt|;
comment|//set label
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|setText
argument_list|(
name|state
operator|.
name|_1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|hasFocus
condition|)
block|{
name|setBorder
argument_list|(
name|UIManager
operator|.
name|getBorder
argument_list|(
literal|"Table.focusCellHighlightBorder"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|setBorder
argument_list|(
name|noFocusBorder
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
block|}
end_class

end_unit

