begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2020 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|tristatecheckbox
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|plaf
operator|.
name|metal
operator|.
name|MetalIconFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionEvent
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|ActionListener
import|;
end_import

begin_comment
comment|/**  * See<a href="https://stackoverflow.com/questions/1263323/tristate-checkboxes-in-java">Tristate Checkboxes in Java</a>  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|TristateCheckBox
extends|extends
name|JCheckBox
implements|implements
name|Icon
implements|,
name|ActionListener
block|{
specifier|static
specifier|final
name|boolean
name|INDETERMINATE_AS_SELECTED
init|=
literal|true
decl_stmt|;
comment|//consider INDETERMINATE as selected ?
specifier|static
specifier|final
name|Icon
name|icon
init|=
name|MetalIconFactory
operator|.
name|getCheckBoxIcon
argument_list|()
decl_stmt|;
specifier|public
name|TristateCheckBox
parameter_list|()
block|{
name|this
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TristateCheckBox
parameter_list|(
specifier|final
name|String
name|text
parameter_list|)
block|{
name|this
argument_list|(
name|text
argument_list|,
name|TristateState
operator|.
name|DESELECTED
argument_list|)
expr_stmt|;
block|}
specifier|public
name|TristateCheckBox
parameter_list|(
specifier|final
name|String
name|text
parameter_list|,
specifier|final
name|TristateState
name|state
parameter_list|)
block|{
comment|/* tri-state checkbox has 3 selection states:          * 0 unselected          * 1 mid-state selection          * 2 fully selected          */
name|super
argument_list|(
name|text
argument_list|,
name|state
operator|==
name|TristateState
operator|.
name|SELECTED
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SELECTED
case|:
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
case|case
name|INDETERMINATE
case|:
case|case
name|DESELECTED
case|:
name|putClientProperty
argument_list|(
literal|"SelectionState"
argument_list|,
name|state
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|addActionListener
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setIcon
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSelected
parameter_list|()
block|{
if|if
condition|(
name|INDETERMINATE_AS_SELECTED
operator|&&
operator|(
name|getSelectionState
argument_list|()
operator|!=
name|TristateState
operator|.
name|DESELECTED
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
name|super
operator|.
name|isSelected
argument_list|()
return|;
block|}
block|}
specifier|public
name|TristateState
name|getSelectionState
parameter_list|()
block|{
return|return
operator|(
name|getClientProperty
argument_list|(
literal|"SelectionState"
argument_list|)
operator|!=
literal|null
condition|?
operator|(
name|TristateState
operator|)
name|getClientProperty
argument_list|(
literal|"SelectionState"
argument_list|)
else|:
name|super
operator|.
name|isSelected
argument_list|()
condition|?
name|TristateState
operator|.
name|SELECTED
else|:
name|TristateState
operator|.
name|DESELECTED
operator|)
return|;
block|}
specifier|public
name|void
name|setSelectionState
parameter_list|(
specifier|final
name|TristateState
name|state
parameter_list|)
block|{
switch|switch
condition|(
name|state
condition|)
block|{
case|case
name|SELECTED
case|:
name|setSelected
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|INDETERMINATE
case|:
case|case
name|DESELECTED
case|:
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|()
throw|;
block|}
name|putClientProperty
argument_list|(
literal|"SelectionState"
argument_list|,
name|state
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|paintIcon
parameter_list|(
specifier|final
name|Component
name|c
parameter_list|,
specifier|final
name|Graphics
name|g
parameter_list|,
specifier|final
name|int
name|x
parameter_list|,
specifier|final
name|int
name|y
parameter_list|)
block|{
name|icon
operator|.
name|paintIcon
argument_list|(
name|c
argument_list|,
name|g
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
if|if
condition|(
name|getSelectionState
argument_list|()
operator|!=
name|TristateState
operator|.
name|INDETERMINATE
condition|)
block|{
return|return;
block|}
specifier|final
name|int
name|w
init|=
name|getIconWidth
argument_list|()
decl_stmt|;
specifier|final
name|int
name|h
init|=
name|getIconHeight
argument_list|()
decl_stmt|;
name|g
operator|.
name|setColor
argument_list|(
name|c
operator|.
name|isEnabled
argument_list|()
condition|?
operator|new
name|Color
argument_list|(
literal|51
argument_list|,
literal|51
argument_list|,
literal|51
argument_list|)
else|:
operator|new
name|Color
argument_list|(
literal|122
argument_list|,
literal|138
argument_list|,
literal|153
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|fillRect
argument_list|(
name|x
operator|+
literal|4
argument_list|,
name|y
operator|+
literal|4
argument_list|,
name|w
operator|-
literal|8
argument_list|,
name|h
operator|-
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|c
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
return|return;
block|}
name|g
operator|.
name|setColor
argument_list|(
operator|new
name|Color
argument_list|(
literal|81
argument_list|,
literal|81
argument_list|,
literal|81
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|drawRect
argument_list|(
name|x
operator|+
literal|4
argument_list|,
name|y
operator|+
literal|4
argument_list|,
name|w
operator|-
literal|9
argument_list|,
name|h
operator|-
literal|9
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIconWidth
parameter_list|()
block|{
return|return
name|icon
operator|.
name|getIconWidth
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIconHeight
parameter_list|()
block|{
return|return
name|icon
operator|.
name|getIconHeight
argument_list|()
return|;
block|}
specifier|public
name|void
name|actionPerformed
parameter_list|(
specifier|final
name|ActionEvent
name|e
parameter_list|)
block|{
specifier|final
name|TristateCheckBox
name|tcb
init|=
operator|(
name|TristateCheckBox
operator|)
name|e
operator|.
name|getSource
argument_list|()
decl_stmt|;
if|if
condition|(
name|tcb
operator|.
name|getSelectionState
argument_list|()
operator|==
name|TristateState
operator|.
name|DESELECTED
condition|)
block|{
name|tcb
operator|.
name|setSelected
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|tcb
operator|.
name|putClientProperty
argument_list|(
literal|"SelectionState"
argument_list|,
name|tcb
operator|.
name|getSelectionState
argument_list|()
operator|==
name|TristateState
operator|.
name|SELECTED
condition|?
name|TristateState
operator|.
name|DESELECTED
else|:
name|tcb
operator|.
name|getSelectionState
argument_list|()
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
comment|//        // test
comment|//        System.out.println(">>>>IS SELECTED: "+tcb.isSelected());
comment|//        System.out.println(">>>>IN MID STATE: "+(tcb.getSelectionState() == TristateState.INDETERMINATE));
block|}
block|}
end_class

end_unit

