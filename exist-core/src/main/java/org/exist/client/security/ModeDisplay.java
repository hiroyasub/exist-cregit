begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2020 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UnixStylePermissionAider
import|;
end_import

begin_comment
comment|/**  * Used for Tri-State display of a permission mode  * when multiple items are selected.  *  * If a value is true, then all items are set.  * If a value is false, then all items are unset.  * If a value is null, then some items are set and some are unset, none will be changed.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|ModeDisplay
block|{
specifier|public
name|Boolean
name|ownerRead
decl_stmt|;
specifier|public
name|Boolean
name|ownerWrite
decl_stmt|;
specifier|public
name|Boolean
name|ownerExecute
decl_stmt|;
specifier|public
name|Boolean
name|setUid
decl_stmt|;
specifier|public
name|Boolean
name|groupRead
decl_stmt|;
specifier|public
name|Boolean
name|groupWrite
decl_stmt|;
specifier|public
name|Boolean
name|groupExecute
decl_stmt|;
specifier|public
name|Boolean
name|setGid
decl_stmt|;
specifier|public
name|Boolean
name|otherRead
decl_stmt|;
specifier|public
name|Boolean
name|otherWrite
decl_stmt|;
specifier|public
name|Boolean
name|otherExecute
decl_stmt|;
specifier|public
name|Boolean
name|sticky
decl_stmt|;
specifier|public
specifier|static
name|ModeDisplay
name|fromPermission
parameter_list|(
specifier|final
name|Permission
name|permission
parameter_list|)
block|{
specifier|final
name|ModeDisplay
name|modeDisplay
init|=
operator|new
name|ModeDisplay
argument_list|()
decl_stmt|;
specifier|final
name|int
name|ownerMode
init|=
name|permission
operator|.
name|getOwnerMode
argument_list|()
decl_stmt|;
name|modeDisplay
operator|.
name|ownerRead
operator|=
operator|(
name|ownerMode
operator|&
name|Permission
operator|.
name|READ
operator|)
operator|==
name|Permission
operator|.
name|READ
expr_stmt|;
name|modeDisplay
operator|.
name|ownerWrite
operator|=
operator|(
name|ownerMode
operator|&
name|Permission
operator|.
name|WRITE
operator|)
operator|==
name|Permission
operator|.
name|WRITE
expr_stmt|;
name|modeDisplay
operator|.
name|ownerExecute
operator|=
operator|(
name|ownerMode
operator|&
name|Permission
operator|.
name|EXECUTE
operator|)
operator|==
name|Permission
operator|.
name|EXECUTE
expr_stmt|;
specifier|final
name|int
name|groupMode
init|=
name|permission
operator|.
name|getGroupMode
argument_list|()
decl_stmt|;
name|modeDisplay
operator|.
name|groupRead
operator|=
operator|(
name|groupMode
operator|&
name|Permission
operator|.
name|READ
operator|)
operator|==
name|Permission
operator|.
name|READ
expr_stmt|;
name|modeDisplay
operator|.
name|groupWrite
operator|=
operator|(
name|groupMode
operator|&
name|Permission
operator|.
name|WRITE
operator|)
operator|==
name|Permission
operator|.
name|WRITE
expr_stmt|;
name|modeDisplay
operator|.
name|groupExecute
operator|=
operator|(
name|groupMode
operator|&
name|Permission
operator|.
name|EXECUTE
operator|)
operator|==
name|Permission
operator|.
name|EXECUTE
expr_stmt|;
specifier|final
name|int
name|otherMode
init|=
name|permission
operator|.
name|getOtherMode
argument_list|()
decl_stmt|;
name|modeDisplay
operator|.
name|otherRead
operator|=
operator|(
name|otherMode
operator|&
name|Permission
operator|.
name|READ
operator|)
operator|==
name|Permission
operator|.
name|READ
expr_stmt|;
name|modeDisplay
operator|.
name|otherWrite
operator|=
operator|(
name|otherMode
operator|&
name|Permission
operator|.
name|WRITE
operator|)
operator|==
name|Permission
operator|.
name|WRITE
expr_stmt|;
name|modeDisplay
operator|.
name|otherExecute
operator|=
operator|(
name|otherMode
operator|&
name|Permission
operator|.
name|EXECUTE
operator|)
operator|==
name|Permission
operator|.
name|EXECUTE
expr_stmt|;
name|modeDisplay
operator|.
name|setUid
operator|=
name|permission
operator|.
name|isSetUid
argument_list|()
expr_stmt|;
name|modeDisplay
operator|.
name|setGid
operator|=
name|permission
operator|.
name|isSetGid
argument_list|()
expr_stmt|;
name|modeDisplay
operator|.
name|sticky
operator|=
name|permission
operator|.
name|isSticky
argument_list|()
expr_stmt|;
return|return
name|modeDisplay
return|;
block|}
specifier|public
name|void
name|writeToPermission
parameter_list|(
specifier|final
name|Permission
name|newMode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
comment|// NOTE: we only modify those mode bits which are not null (i.e. TristateState.INDETERMINATE)
if|if
condition|(
name|ownerRead
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ownerRead
condition|)
block|{
name|newMode
operator|.
name|setOwnerMode
argument_list|(
name|newMode
operator|.
name|getOwnerMode
argument_list|()
operator||
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMode
operator|.
name|setOwnerMode
argument_list|(
name|newMode
operator|.
name|getOwnerMode
argument_list|()
operator|&
operator|~
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ownerWrite
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ownerWrite
condition|)
block|{
name|newMode
operator|.
name|setOwnerMode
argument_list|(
name|newMode
operator|.
name|getOwnerMode
argument_list|()
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMode
operator|.
name|setOwnerMode
argument_list|(
name|newMode
operator|.
name|getOwnerMode
argument_list|()
operator|&
operator|~
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ownerExecute
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|ownerExecute
condition|)
block|{
name|newMode
operator|.
name|setOwnerMode
argument_list|(
name|newMode
operator|.
name|getOwnerMode
argument_list|()
operator||
name|Permission
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMode
operator|.
name|setOwnerMode
argument_list|(
name|newMode
operator|.
name|getOwnerMode
argument_list|()
operator|&
operator|~
name|Permission
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groupRead
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|groupRead
condition|)
block|{
name|newMode
operator|.
name|setGroupMode
argument_list|(
name|newMode
operator|.
name|getGroupMode
argument_list|()
operator||
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMode
operator|.
name|setGroupMode
argument_list|(
name|newMode
operator|.
name|getGroupMode
argument_list|()
operator|&
operator|~
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groupWrite
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|groupWrite
condition|)
block|{
name|newMode
operator|.
name|setGroupMode
argument_list|(
name|newMode
operator|.
name|getGroupMode
argument_list|()
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMode
operator|.
name|setGroupMode
argument_list|(
name|newMode
operator|.
name|getGroupMode
argument_list|()
operator|&
operator|~
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|groupExecute
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|groupExecute
condition|)
block|{
name|newMode
operator|.
name|setGroupMode
argument_list|(
name|newMode
operator|.
name|getGroupMode
argument_list|()
operator||
name|Permission
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMode
operator|.
name|setGroupMode
argument_list|(
name|newMode
operator|.
name|getGroupMode
argument_list|()
operator|&
operator|~
name|Permission
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|otherRead
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|otherRead
condition|)
block|{
name|newMode
operator|.
name|setOtherMode
argument_list|(
name|newMode
operator|.
name|getOtherMode
argument_list|()
operator||
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMode
operator|.
name|setOtherMode
argument_list|(
name|newMode
operator|.
name|getOtherMode
argument_list|()
operator|&
operator|~
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|otherWrite
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|otherWrite
condition|)
block|{
name|newMode
operator|.
name|setOtherMode
argument_list|(
name|newMode
operator|.
name|getOtherMode
argument_list|()
operator||
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMode
operator|.
name|setOtherMode
argument_list|(
name|newMode
operator|.
name|getOtherMode
argument_list|()
operator|&
operator|~
name|Permission
operator|.
name|WRITE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|otherExecute
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|otherExecute
condition|)
block|{
name|newMode
operator|.
name|setOtherMode
argument_list|(
name|newMode
operator|.
name|getOtherMode
argument_list|()
operator||
name|Permission
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|newMode
operator|.
name|setOtherMode
argument_list|(
name|newMode
operator|.
name|getOtherMode
argument_list|()
operator|&
operator|~
name|Permission
operator|.
name|EXECUTE
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|setUid
operator|!=
literal|null
condition|)
block|{
name|newMode
operator|.
name|setSetUid
argument_list|(
name|setUid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|setGid
operator|!=
literal|null
condition|)
block|{
name|newMode
operator|.
name|setSetGid
argument_list|(
name|setGid
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sticky
operator|!=
literal|null
condition|)
block|{
name|newMode
operator|.
name|setSticky
argument_list|(
name|sticky
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

