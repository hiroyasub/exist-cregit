begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2012 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|client
operator|.
name|security
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|table
operator|.
name|DefaultTableModel
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_comment
comment|/**  *  * @author<a href="mailto:adam.retter@googlemail.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|AclTableModel
extends|extends
name|DefaultTableModel
block|{
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|COLUMN_NAMES
init|=
operator|new
name|String
index|[]
block|{
literal|"Target"
block|,
literal|"Subject"
block|,
literal|"Access"
block|,
literal|"Read"
block|,
literal|"Write"
block|,
literal|"Execute"
block|}
decl_stmt|;
specifier|public
name|AclTableModel
parameter_list|(
specifier|final
name|Permission
name|permission
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
specifier|final
name|Object
index|[]
index|[]
name|aces
decl_stmt|;
if|if
condition|(
name|permission
operator|instanceof
name|ACLPermission
condition|)
block|{
specifier|final
name|ACLPermission
name|aclPermission
init|=
operator|(
name|ACLPermission
operator|)
name|permission
decl_stmt|;
name|aces
operator|=
operator|new
name|Object
index|[
name|aclPermission
operator|.
name|getACECount
argument_list|()
index|]
index|[
literal|6
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aclPermission
operator|.
name|getACECount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|aces
index|[
name|i
index|]
operator|=
operator|new
name|Object
index|[]
block|{
name|aclPermission
operator|.
name|getACETarget
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
block|,
name|aclPermission
operator|.
name|getACEWho
argument_list|(
name|i
argument_list|)
block|,
name|aclPermission
operator|.
name|getACEAccessType
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
block|,
operator|(
name|aclPermission
operator|.
name|getACEMode
argument_list|(
name|i
argument_list|)
operator|&
name|Permission
operator|.
name|READ
operator|)
operator|==
name|Permission
operator|.
name|READ
block|,
operator|(
name|aclPermission
operator|.
name|getACEMode
argument_list|(
name|i
argument_list|)
operator|&
name|Permission
operator|.
name|WRITE
operator|)
operator|==
name|Permission
operator|.
name|WRITE
block|,
operator|(
name|aclPermission
operator|.
name|getACEMode
argument_list|(
name|i
argument_list|)
operator|&
name|Permission
operator|.
name|EXECUTE
operator|)
operator|==
name|Permission
operator|.
name|EXECUTE
block|,                 }
expr_stmt|;
block|}
block|}
else|else
block|{
name|aces
operator|=
operator|new
name|Object
index|[
literal|0
index|]
index|[
literal|6
index|]
expr_stmt|;
block|}
name|setDataVector
argument_list|(
name|aces
argument_list|,
name|COLUMN_NAMES
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Class
index|[]
name|types
init|=
operator|new
name|Class
index|[]
block|{
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|class
block|,
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|class
block|,
name|java
operator|.
name|lang
operator|.
name|String
operator|.
name|class
block|,
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|class
block|,
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|class
block|,
name|java
operator|.
name|lang
operator|.
name|Boolean
operator|.
name|class
block|}
decl_stmt|;
name|boolean
index|[]
name|canEdit
init|=
operator|new
name|boolean
index|[]
block|{
literal|false
block|,
literal|false
block|,
literal|false
block|,
literal|true
block|,
literal|true
block|,
literal|true
block|}
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Class
name|getColumnClass
parameter_list|(
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|types
index|[
name|columnIndex
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCellEditable
parameter_list|(
name|int
name|rowIndex
parameter_list|,
name|int
name|columnIndex
parameter_list|)
block|{
return|return
name|canEdit
index|[
name|columnIndex
index|]
return|;
block|}
block|}
end_class

end_unit

