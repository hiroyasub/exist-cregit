begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Copyright 2019 Evolved Binary Ltd  *  * This file was ported from FusionDB and relicensed by Evolved Binary  * for use in eXist-db under The 3-Clause BSD License.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Representation of a Unicode String.  *  * The String is a series of Unicode code-points.  * Each Unicode code-point is an int value.  *  * Note that this is a mutable string implementation!  *  * @author Adam Retter<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
specifier|public
class|class
name|CodePointString
block|{
specifier|private
name|int
index|[]
name|codePoints
decl_stmt|;
comment|// TODO(AR) change resizing of codePoints so it isn't linear
comment|/**      * Construct a Code Point String from a java.lang.String.      *      * @param string the Java String      */
specifier|public
name|CodePointString
parameter_list|(
specifier|final
name|String
name|string
parameter_list|)
block|{
name|this
operator|.
name|codePoints
operator|=
name|string
operator|.
name|codePoints
argument_list|()
operator|.
name|toArray
argument_list|()
expr_stmt|;
block|}
comment|/**      * Copy constructor.      *      * @param other the other Code Point String      */
specifier|public
name|CodePointString
parameter_list|(
specifier|final
name|CodePointString
name|other
parameter_list|)
block|{
name|this
operator|.
name|codePoints
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|other
operator|.
name|codePoints
argument_list|,
name|other
operator|.
name|codePoints
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
specifier|public
name|CodePointString
parameter_list|()
block|{
name|this
operator|.
name|codePoints
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
block|}
comment|/**      * Make a copy of this Code Point string.      *      * @return a copy of this Code Point String.      */
specifier|public
name|CodePointString
name|copy
parameter_list|()
block|{
return|return
operator|new
name|CodePointString
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Replace the first instance of<code>oldCodePoint</code> with<code>newCodePoint</code>.      *      * @param oldCodePoint The code point to replace      * @param newCodePoint The replacement code point      *      * @return this      */
specifier|public
name|CodePointString
name|replaceFirst
parameter_list|(
specifier|final
name|int
name|oldCodePoint
parameter_list|,
specifier|final
name|int
name|newCodePoint
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codePoints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|codePoints
index|[
name|i
index|]
operator|==
name|oldCodePoint
condition|)
block|{
name|codePoints
index|[
name|i
index|]
operator|=
name|newCodePoint
expr_stmt|;
break|break;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Replace all instances of<code>oldCodePoint</code> with<code>newCodePoint</code>.      *      * @param oldCodePoint The code point to replace all instances of      * @param newCodePoint The replacement code point      *      * @return this      */
specifier|public
name|CodePointString
name|replaceAll
parameter_list|(
specifier|final
name|int
name|oldCodePoint
parameter_list|,
specifier|final
name|int
name|newCodePoint
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codePoints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|codePoints
index|[
name|i
index|]
operator|==
name|oldCodePoint
condition|)
block|{
name|codePoints
index|[
name|i
index|]
operator|=
name|newCodePoint
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Find the index of a code point.      *      * @param codePoint The code point to find      *      * @return the index of the code point in the      *     string, or -1 if it is not found      */
specifier|public
name|int
name|indexOf
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codePoints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|codePoints
index|[
name|i
index|]
operator|==
name|codePoint
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      * Determines if this string contains a code point.      *      * @param codePoint The code point to find      *      * @return true if the code point is found, false otherwise      */
specifier|public
name|boolean
name|contains
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
return|return
name|indexOf
argument_list|(
name|codePoint
argument_list|)
operator|>=
literal|0
return|;
block|}
comment|/**      * Append a code point to this string.      *      * @param codePoint the code point to append.      * @return this      */
specifier|public
name|CodePointString
name|append
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
name|this
operator|.
name|codePoints
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|codePoints
argument_list|,
name|codePoints
operator|.
name|length
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|codePoints
index|[
name|codePoints
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|codePoint
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Append a code point string to this string.      *      * @param other the code point string to append.      * @return this      */
specifier|public
name|CodePointString
name|append
parameter_list|(
specifier|final
name|CodePointString
name|other
parameter_list|)
block|{
specifier|final
name|int
name|len
init|=
name|codePoints
operator|.
name|length
decl_stmt|;
name|this
operator|.
name|codePoints
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|codePoints
argument_list|,
name|len
operator|+
name|other
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|other
operator|.
name|codePoints
argument_list|,
literal|0
argument_list|,
name|codePoints
argument_list|,
name|len
argument_list|,
name|other
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Left trim this string.      *      * Removes n code points from the start of this string.      *      * @param codePoint the code point to trim starting from index 0      *      * @return this      */
specifier|public
name|CodePointString
name|leftTrim
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
if|if
condition|(
name|codePoints
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|codePoints
operator|.
name|length
operator|&&
name|codePoints
index|[
name|i
index|]
operator|==
name|codePoint
condition|;
name|i
operator|++
control|)
block|{
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|this
operator|.
name|codePoints
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|codePoints
argument_list|,
name|i
argument_list|,
name|codePoints
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Right trim this string.      *      * Removes n code points from the end of this string.      *      * @param codePoint the code point to trim starting from index {@link #length()} - 1      *      * @return this      */
specifier|public
name|CodePointString
name|rightTrim
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
if|if
condition|(
name|codePoints
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|int
name|i
init|=
name|codePoints
operator|.
name|length
operator|-
literal|1
decl_stmt|;
for|for
control|(
init|;
name|i
operator|>=
literal|0
operator|&&
name|codePoints
index|[
name|i
index|]
operator|==
name|codePoint
condition|;
name|i
operator|--
control|)
block|{
block|}
name|this
operator|.
name|codePoints
operator|=
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|codePoints
argument_list|,
literal|0
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Transform a region of code points within the string      *      * Replaces any code point<code>c</code> between<code>fromOldCodePoint</code> (inclusive) to      *<code>toOldCodePoint</code> (inclusive), with<code>fromNewCodePoint + (c - fromOldCodePoint)</code>.      *      * @param fromOldCodePoint the starting code point of the region to transform      * @param toOldCodePoint the ending code point of the region to transform      * @param fromNewCodePoint the new code point for the transformation      *      * @return this      */
specifier|public
name|CodePointString
name|transform
parameter_list|(
specifier|final
name|int
name|fromOldCodePoint
parameter_list|,
specifier|final
name|int
name|toOldCodePoint
parameter_list|,
specifier|final
name|int
name|fromNewCodePoint
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codePoints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|c
init|=
name|codePoints
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|c
operator|>=
name|fromOldCodePoint
operator|&&
name|c
operator|<=
name|toOldCodePoint
condition|)
block|{
name|codePoints
index|[
name|i
index|]
operator|=
name|fromNewCodePoint
operator|+
operator|(
name|c
operator|-
name|fromOldCodePoint
operator|)
expr_stmt|;
block|}
block|}
return|return
name|this
return|;
block|}
comment|/**      * Pads the left of the string with<code>len</code><code>codePoint</code>(s).      *      * @param codePoint the code point to use for the padding      * @param len the length of the padding      *      * @return this      */
specifier|public
name|CodePointString
name|leftPad
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
index|[]
name|newCodePoints
init|=
operator|new
name|int
index|[
name|codePoints
operator|.
name|length
operator|+
name|len
index|]
decl_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|newCodePoints
argument_list|,
literal|0
argument_list|,
name|len
argument_list|,
name|codePoint
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|codePoints
argument_list|,
literal|0
argument_list|,
name|newCodePoints
argument_list|,
name|len
argument_list|,
name|codePoints
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|codePoints
operator|=
name|newCodePoints
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Pads the right of the string with<code>len</code><code>codePoint</code>(s).      *      * @param codePoint the code point to use for the padding      * @param len the length of the padding      *      * @return this      */
specifier|public
name|CodePointString
name|rightPad
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
block|{
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
specifier|final
name|int
name|origLen
init|=
name|codePoints
operator|.
name|length
decl_stmt|;
specifier|final
name|int
name|newLen
init|=
name|codePoints
operator|.
name|length
operator|+
name|len
decl_stmt|;
name|this
operator|.
name|codePoints
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|codePoints
argument_list|,
name|newLen
argument_list|)
expr_stmt|;
name|Arrays
operator|.
name|fill
argument_list|(
name|this
operator|.
name|codePoints
argument_list|,
name|origLen
argument_list|,
name|newLen
argument_list|,
name|codePoint
argument_list|)
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Insert a code point into the string.      *      * @param index the offset at which to insert the code point      * @param codePoint the code point to insert      *      * @return this      *      * @throws IndexOutOfBoundsException if<code>index&lt; 0 || index&gt; getLength()</code>      */
specifier|public
name|CodePointString
name|insert
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>
name|codePoints
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
specifier|final
name|int
index|[]
name|newCodePoints
init|=
operator|new
name|int
index|[
name|codePoints
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|codePoints
argument_list|,
literal|0
argument_list|,
name|newCodePoints
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|newCodePoints
index|[
name|index
index|]
operator|=
name|codePoint
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|codePoints
argument_list|,
name|index
argument_list|,
name|newCodePoints
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|codePoints
operator|.
name|length
operator|-
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|codePoints
operator|=
name|newCodePoints
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Insert a code point into the string at one or more offsets.      *      * Note that this is NOT the same as calling {@link #insert(int, int)}      * multiple times, as the<code>offsets</code> refer to the positions      * in the string before the first insert is made.      *      * @param indexes the offsets at which to insert the code point      * @param codePoint the code point to insert      *      * @return this      *      * @throws IndexOutOfBoundsException if<code>indexes[i]&lt; 0 || indexes[i]&gt; getLength()</code>      */
specifier|public
name|CodePointString
name|insert
parameter_list|(
specifier|final
name|int
index|[]
name|indexes
parameter_list|,
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
comment|// first sort the indexes into ascending order
name|Arrays
operator|.
name|sort
argument_list|(
name|indexes
argument_list|)
expr_stmt|;
comment|// only codePoints.length>= offsets> 0
for|for
control|(
specifier|final
name|int
name|index
range|:
name|indexes
control|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>
name|codePoints
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
block|}
specifier|final
name|int
index|[]
name|newCodePoints
init|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|codePoints
argument_list|,
name|codePoints
operator|.
name|length
operator|+
name|indexes
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indexes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|int
name|index
init|=
name|indexes
index|[
name|i
index|]
operator|+
name|i
decl_stmt|;
comment|// shift to right
if|if
condition|(
name|newCodePoints
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|newCodePoints
argument_list|,
name|index
argument_list|,
name|newCodePoints
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|newCodePoints
operator|.
name|length
operator|-
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// insert codepoint
name|newCodePoints
index|[
name|index
index|]
operator|=
name|codePoint
expr_stmt|;
block|}
name|this
operator|.
name|codePoints
operator|=
name|newCodePoints
expr_stmt|;
return|return
name|this
return|;
block|}
comment|/**      * Remove the first instance of a code point from the string      *      * @param codePoint the code point to remove      *      * @return this      */
specifier|public
name|CodePointString
name|removeFirst
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
name|int
name|idx
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|codePoints
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|codePoints
index|[
name|i
index|]
operator|==
name|codePoint
condition|)
block|{
name|idx
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|idx
operator|>
operator|-
literal|1
condition|)
block|{
specifier|final
name|int
index|[]
name|newCodePoints
init|=
operator|new
name|int
index|[
name|codePoints
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|newCodePoints
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|codePoints
argument_list|,
literal|0
argument_list|,
name|newCodePoints
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|+
literal|1
operator|<
name|codePoints
operator|.
name|length
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|codePoints
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|newCodePoints
argument_list|,
name|idx
argument_list|,
name|newCodePoints
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
name|this
operator|.
name|codePoints
operator|=
name|newCodePoints
expr_stmt|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Return the number of code points in the string.      *      * @return the number of code points in the string      */
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|codePoints
operator|.
name|length
return|;
block|}
comment|/**      * Gets a code point from the string.      *      * @param index the offset within the string      *      * @return the code point      *      * @throws IndexOutOfBoundsException if the index is outside the bounds of the string      */
specifier|public
name|int
name|codePointAt
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|codePoints
index|[
name|index
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|(
name|codePoints
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|int
name|codePoint
range|:
name|codePoints
control|)
block|{
name|builder
operator|.
name|appendCodePoint
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

