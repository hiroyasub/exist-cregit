begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Simple Ring Buffer implementation.  *  * @author Adam Retter adam.retter@googlemail.com  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
specifier|public
class|class
name|RingBuffer
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|int
name|capacity
decl_stmt|;
specifier|private
specifier|final
name|T
index|[]
name|elements
decl_stmt|;
specifier|private
name|int
name|writePos
decl_stmt|;
specifier|private
name|int
name|available
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|RingBuffer
parameter_list|(
specifier|final
name|int
name|capacity
parameter_list|,
specifier|final
name|Supplier
argument_list|<
name|T
argument_list|>
name|constructor
parameter_list|)
block|{
name|this
operator|.
name|capacity
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|elements
operator|=
operator|(
name|T
index|[]
operator|)
operator|new
name|Object
index|[
name|capacity
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capacity
condition|;
name|i
operator|++
control|)
block|{
name|elements
index|[
name|i
index|]
operator|=
name|constructor
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|available
operator|=
name|capacity
expr_stmt|;
name|this
operator|.
name|writePos
operator|=
name|capacity
expr_stmt|;
block|}
specifier|public
annotation|@
name|Nullable
name|T
name|takeEntry
parameter_list|()
block|{
if|if
condition|(
name|available
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
name|int
name|nextSlot
init|=
name|writePos
operator|-
name|available
decl_stmt|;
if|if
condition|(
name|nextSlot
operator|<
literal|0
condition|)
block|{
name|nextSlot
operator|+=
name|capacity
expr_stmt|;
block|}
specifier|final
name|T
name|nextObj
init|=
name|elements
index|[
name|nextSlot
index|]
decl_stmt|;
name|available
operator|--
expr_stmt|;
return|return
name|nextObj
return|;
block|}
specifier|public
name|void
name|returnEntry
parameter_list|(
specifier|final
name|T
name|element
parameter_list|)
block|{
if|if
condition|(
name|available
operator|<
name|capacity
condition|)
block|{
if|if
condition|(
name|writePos
operator|>=
name|capacity
condition|)
block|{
name|writePos
operator|=
literal|0
expr_stmt|;
block|}
name|elements
index|[
name|writePos
index|]
operator|=
name|element
expr_stmt|;
name|writePos
operator|++
expr_stmt|;
name|available
operator|++
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

