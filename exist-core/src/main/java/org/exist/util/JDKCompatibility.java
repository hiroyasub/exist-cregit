begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist-db Open Source Native XML Database  * Copyright (C) 2001 The eXist-db Authors  *  * info@exist-db.org  * http://www.exist-db.org  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public  * License as published by the Free Software Foundation; either  * version 2.1 of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Field
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|JDKCompatibility
block|{
comment|/**      * Gets the {@code modifiers} field from Field.class.      *      * Compatible with JDK 8 through 13.      *      * @return the modifiers field      */
specifier|public
specifier|static
name|Field
name|getModifiersField
parameter_list|()
throws|throws
name|NoSuchFieldException
throws|,
name|IllegalAccessException
block|{
name|Field
name|modifiersField
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// JDK 11, 10, 9, 8
name|modifiersField
operator|=
name|Field
operator|.
name|class
operator|.
name|getDeclaredField
argument_list|(
literal|"modifiers"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NoSuchFieldException
name|e
parameter_list|)
block|{
comment|// JDK 12+
try|try
block|{
specifier|final
name|Method
name|getDeclaredFields0
init|=
name|Class
operator|.
name|class
operator|.
name|getDeclaredMethod
argument_list|(
literal|"getDeclaredFields0"
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|accessibleBeforeSet
init|=
name|getDeclaredFields0
operator|.
name|isAccessible
argument_list|()
decl_stmt|;
name|getDeclaredFields0
operator|.
name|setAccessible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Field
index|[]
name|fields
init|=
operator|(
name|Field
index|[]
operator|)
name|getDeclaredFields0
operator|.
name|invoke
argument_list|(
name|Field
operator|.
name|class
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|getDeclaredFields0
operator|.
name|setAccessible
argument_list|(
name|accessibleBeforeSet
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Field
name|field
range|:
name|fields
control|)
block|{
if|if
condition|(
literal|"modifiers"
operator|.
name|equals
argument_list|(
name|field
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|modifiersField
operator|=
name|field
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|modifiersField
operator|==
literal|null
condition|)
block|{
throw|throw
name|e
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|NoSuchMethodException
decl||
name|InvocationTargetException
name|ex
parameter_list|)
block|{
name|e
operator|.
name|addSuppressed
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
name|modifiersField
return|;
block|}
block|}
end_class

end_unit

