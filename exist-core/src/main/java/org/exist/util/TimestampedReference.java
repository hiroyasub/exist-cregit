begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * A timestamped reference of which  * updates to are conditional on the  * timestamp.  *  * @param<V> The type of the object reference.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
annotation|@
name|NotThreadSafe
specifier|public
class|class
name|TimestampedReference
parameter_list|<
name|V
parameter_list|>
block|{
specifier|private
name|long
name|timestamp
decl_stmt|;
annotation|@
name|Nullable
specifier|private
name|V
name|reference
decl_stmt|;
comment|/**      * Creates a timestamped reference with      * an initial null reference and millisecond      * resolution.      */
specifier|public
name|TimestampedReference
parameter_list|()
block|{
name|this
argument_list|(
literal|false
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a timestamped reference with      * an initial null reference.      *      * @param nanoResolution true for nanosecond resolution      *     or, false for millisecond resolution.      */
specifier|public
name|TimestampedReference
parameter_list|(
specifier|final
name|boolean
name|nanoResolution
parameter_list|)
block|{
name|this
argument_list|(
name|nanoResolution
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a timestamped reference.      *      * @param nanoResolution true for nanosecond resolution      *     or, false for millisecond resolution.      * @param reference the initial object reference.      */
specifier|public
name|TimestampedReference
parameter_list|(
specifier|final
name|boolean
name|nanoResolution
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|V
name|reference
parameter_list|)
block|{
name|this
operator|.
name|reference
operator|=
name|reference
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|nanoResolution
condition|?
name|System
operator|.
name|nanoTime
argument_list|()
else|:
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
comment|/**      * Set the reference if it is older than the provided timestamp.      *      * @param timestamp The new/current timestamp      * @param supplier A provider of a new object reference.      *      * @return the existing reference if not expired, otherwise the new      *     reference after it is set.      */
annotation|@
name|Nullable
specifier|public
name|V
name|setIfExpired
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|Supplier
argument_list|<
name|V
argument_list|>
name|supplier
parameter_list|)
block|{
if|if
condition|(
name|timestamp
operator|>
name|this
operator|.
name|timestamp
condition|)
block|{
name|this
operator|.
name|reference
operator|=
name|supplier
operator|.
name|get
argument_list|()
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
return|return
name|this
operator|.
name|reference
return|;
block|}
comment|/**      * Set the reference if it is older than the provided timestamp or null.      *      * @param timestamp The new/current timestamp      * @param supplier A provider of a new object reference.      *      * @return the existing reference if not expired, otherwise the new      *     reference after it is set.      */
annotation|@
name|Nullable
specifier|public
name|V
name|setIfExpiredOrNull
parameter_list|(
specifier|final
name|long
name|timestamp
parameter_list|,
specifier|final
name|Supplier
argument_list|<
name|V
argument_list|>
name|supplier
parameter_list|)
block|{
if|if
condition|(
name|timestamp
operator|>
name|this
operator|.
name|timestamp
operator|||
name|this
operator|.
name|reference
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|reference
operator|=
name|supplier
operator|.
name|get
argument_list|()
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|timestamp
expr_stmt|;
block|}
return|return
name|this
operator|.
name|reference
return|;
block|}
comment|/**      * Get the reference.      *      * @return the object reference      */
annotation|@
name|Nullable
specifier|public
name|V
name|get
parameter_list|()
block|{
return|return
name|this
operator|.
name|reference
return|;
block|}
block|}
end_class

end_unit

