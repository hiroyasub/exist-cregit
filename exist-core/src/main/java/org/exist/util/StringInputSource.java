begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
operator|.
name|Left
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
operator|.
name|Right
import|;
end_import

begin_class
specifier|public
class|class
name|StringInputSource
extends|extends
name|InputSource
block|{
specifier|private
specifier|final
name|Either
argument_list|<
name|byte
index|[]
argument_list|,
name|String
argument_list|>
name|source
decl_stmt|;
comment|/**      * Creates a String Source from a string      * the InputSource will be read using      * {@link #getCharacterStream()}.      *      * @param string the input string.      */
specifier|public
name|StringInputSource
parameter_list|(
specifier|final
name|String
name|string
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|Right
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a String Source from bytes      * the InputSource will be read using      * {@link #getByteStream()}.      *      * @param string the input string.      */
specifier|public
name|StringInputSource
parameter_list|(
specifier|final
name|byte
index|[]
name|string
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|Left
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Reader
name|getCharacterStream
parameter_list|()
block|{
if|if
condition|(
name|source
operator|.
name|isLeft
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
operator|new
name|StringReader
argument_list|(
name|source
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * Set a character stream input.      *      * @param r the reader      *      * @throws IllegalStateException this class is immutable!      */
annotation|@
name|Override
specifier|public
name|void
name|setCharacterStream
parameter_list|(
specifier|final
name|Reader
name|r
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StringInputSource is immutable"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|InputStream
name|getByteStream
parameter_list|()
block|{
if|if
condition|(
name|source
operator|.
name|isLeft
argument_list|()
condition|)
block|{
return|return
operator|new
name|FastByteArrayInputStream
argument_list|(
name|source
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/**      * Set a byte stream input.      *      * @param is the input stream.      *      * @throws IllegalStateException this class is immutable!      */
annotation|@
name|Override
specifier|public
name|void
name|setByteStream
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"StringInputSource is immutable"
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

