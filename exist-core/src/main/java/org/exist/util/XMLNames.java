begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Implements correct checks for XML names and NCNames.  *  * @author Wolfgang  */
end_comment

begin_class
specifier|public
class|class
name|XMLNames
block|{
comment|/**      * Determines if a character is an XML name start character.      * See https://www.w3.org/TR/REC-xml/#NT-Name.      *      * @param codePoint the code point      * @return true if the character is an XML Name start character      */
specifier|public
specifier|static
name|boolean
name|isXMLNameStartCharacter
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
return|return
name|codePoint
operator|==
literal|':'
operator|||
name|codePoint
operator|>=
literal|'A'
operator|&&
name|codePoint
operator|<=
literal|'Z'
operator|||
name|codePoint
operator|==
literal|'_'
operator|||
name|codePoint
operator|>=
literal|'a'
operator|&&
name|codePoint
operator|<=
literal|'z'
operator|||
name|codePoint
operator|>=
literal|0xC0
operator|&&
name|codePoint
operator|<=
literal|0xD6
operator|||
name|codePoint
operator|>=
literal|0xD8
operator|&&
name|codePoint
operator|<=
literal|0xF6
operator|||
name|codePoint
operator|>=
literal|0xF8
operator|&&
name|codePoint
operator|<=
literal|0x2FF
operator|||
name|codePoint
operator|>=
literal|0x370
operator|&&
name|codePoint
operator|<=
literal|0x37D
operator|||
name|codePoint
operator|>=
literal|0x37F
operator|&&
name|codePoint
operator|<=
literal|0x1FFF
operator|||
name|codePoint
operator|>=
literal|0x200C
operator|&&
name|codePoint
operator|<=
literal|0x200D
operator|||
name|codePoint
operator|>=
literal|0x2070
operator|&&
name|codePoint
operator|<=
literal|0x218F
operator|||
name|codePoint
operator|>=
literal|0x2C00
operator|&&
name|codePoint
operator|<=
literal|0x2FEF
operator|||
name|codePoint
operator|>=
literal|0x3001
operator|&&
name|codePoint
operator|<=
literal|0xD7FF
operator|||
name|codePoint
operator|>=
literal|0xF900
operator|&&
name|codePoint
operator|<=
literal|0xFDCF
operator|||
name|codePoint
operator|>=
literal|0xFDF0
operator|&&
name|codePoint
operator|<=
literal|0xFFFD
operator|||
name|codePoint
operator|>=
literal|0x10000
operator|&&
name|codePoint
operator|<=
literal|0xEFFFF
return|;
block|}
comment|/**      * Determines if a character is an XML name character.      * See https://www.w3.org/TR/REC-xml/#NT-Name.      *      * @param codePoint the code point      * @return true if the character is an XML Name character      */
specifier|public
specifier|static
name|boolean
name|isXMLNameChar
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
return|return
name|isXMLNameStartCharacter
argument_list|(
name|codePoint
argument_list|)
operator|||
name|codePoint
operator|==
literal|'-'
operator|||
name|codePoint
operator|==
literal|'.'
operator|||
name|codePoint
operator|>=
literal|'0'
operator|&&
name|codePoint
operator|<=
literal|'9'
operator|||
name|codePoint
operator|==
literal|0xB7
operator|||
name|codePoint
operator|>=
literal|0x0300
operator|&&
name|codePoint
operator|<=
literal|0x036F
operator|||
name|codePoint
operator|>=
literal|0x203F
operator|&&
name|codePoint
operator|<=
literal|0x2040
return|;
block|}
comment|/**      * Deterimines if a character is an NCName start character.      *      * See https://www.w3.org/TR/REC-xml-names/#NT-NCName      *      * @param codePoint the code point      * @return true if the character is an XML NCName start character      */
specifier|public
specifier|static
name|boolean
name|isNCNameStartChar
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
return|return
name|codePoint
operator|!=
literal|':'
operator|&&
name|isXMLNameStartCharacter
argument_list|(
name|codePoint
argument_list|)
return|;
block|}
comment|/**      * Deterimines if a character is an NCName (Non-Colonised Name) character.      *      * See https://www.w3.org/TR/REC-xml-names/#NT-NCName      *      * @param codePoint the code point      * @return true if the character is an XML NCName character      */
specifier|public
specifier|static
name|boolean
name|isNCNameChar
parameter_list|(
specifier|final
name|int
name|codePoint
parameter_list|)
block|{
return|return
name|codePoint
operator|!=
literal|':'
operator|&&
name|isXMLNameChar
argument_list|(
name|codePoint
argument_list|)
return|;
block|}
comment|/**      * Check if the provided string is a valid xs:NCName.      *      * See https://www.w3.org/TR/REC-xml-names/#NT-NCName      *      * @param s the string      * @return true if the string is a valid XML NCName      */
specifier|public
specifier|static
name|boolean
name|isNCName
parameter_list|(
specifier|final
name|CharSequence
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|firstCodePoint
init|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNCNameStartChar
argument_list|(
name|firstCodePoint
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|Character
operator|.
name|charCount
argument_list|(
name|firstCodePoint
argument_list|)
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|codePoint
init|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|s
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNCNameChar
argument_list|(
name|codePoint
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isName
parameter_list|(
specifier|final
name|CharSequence
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
name|int
name|firstCodePoint
init|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|s
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isXMLNameStartCharacter
argument_list|(
name|firstCodePoint
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
name|Character
operator|.
name|charCount
argument_list|(
name|firstCodePoint
argument_list|)
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|codePoint
init|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|s
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isXMLNameChar
argument_list|(
name|codePoint
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isNmToken
parameter_list|(
specifier|final
name|CharSequence
name|s
parameter_list|)
block|{
if|if
condition|(
name|s
operator|==
literal|null
operator|||
name|s
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
control|)
block|{
specifier|final
name|int
name|codePoint
init|=
name|Character
operator|.
name|codePointAt
argument_list|(
name|s
argument_list|,
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isXMLNameChar
argument_list|(
name|codePoint
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
name|i
operator|+=
name|Character
operator|.
name|charCount
argument_list|(
name|codePoint
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

