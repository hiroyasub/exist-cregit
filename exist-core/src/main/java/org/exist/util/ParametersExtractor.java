begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  * Utility class for extracting parameters from   * DOM representation into a Map.  *  * @author<a href="mailto:adam@exist-db.org">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|ParametersExtractor
block|{
specifier|public
specifier|final
specifier|static
name|String
name|PARAMETERS_ELEMENT_NAME
init|=
literal|"parameters"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PARAMETER_ELEMENT_NAME
init|=
literal|"parameter"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PARAMETER_NAME_ATTRIBUTE
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PARAMETER_VALUE_ATTRIBUTE
init|=
literal|"value"
decl_stmt|;
comment|/**      * Extract the parameters.      *      * @param parameters A "parameters" element, which may contain "parameter" child elements      *      * @return the parameters      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|extract
parameter_list|(
specifier|final
name|Element
name|parameters
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|parameters
operator|==
literal|null
operator|||
operator|!
name|parameters
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
name|PARAMETERS_ELEMENT_NAME
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|namespace
init|=
name|parameters
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
specifier|final
name|NodeList
name|nlParameter
init|=
name|parameters
operator|.
name|getElementsByTagNameNS
argument_list|(
name|namespace
argument_list|,
name|PARAMETER_ELEMENT_NAME
argument_list|)
decl_stmt|;
name|result
operator|=
name|extract
argument_list|(
name|nlParameter
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * Extract the parameters.      *      * @param nlParameter A NodeList of "parameter" elements      *      * @return the parameters      */
specifier|public
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|extract
parameter_list|(
specifier|final
name|NodeList
name|nlParameter
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|nlParameter
operator|==
literal|null
operator|||
name|nlParameter
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
block|{
name|result
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|extractParameters
argument_list|(
name|nlParameter
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|extractParameters
parameter_list|(
specifier|final
name|NodeList
name|nlParameter
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
argument_list|>
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|(
name|nlParameter
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nlParameter
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Element
name|param
init|=
operator|(
name|Element
operator|)
name|nlParameter
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//TODO : rely on schema-driven validation -pb
specifier|final
name|String
name|name
init|=
name|param
operator|.
name|getAttribute
argument_list|(
name|PARAMETER_NAME_ATTRIBUTE
argument_list|)
decl_stmt|;
comment|/*if(name == null) {                 throwOrLog("Expected attribute '" + PARAMETER_NAME_ATTRIBUTE + "' for element '" + PARAMETER_ELEMENT_NAME + "' in trigger's configuration.", testOnly);             }*/
name|List
name|values
init|=
name|parameters
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|param
operator|.
name|getAttribute
argument_list|(
name|PARAMETER_VALUE_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//are there child nodes?
if|if
condition|(
name|param
operator|.
name|getChildNodes
argument_list|()
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|values
operator|==
literal|null
condition|)
block|{
name|values
operator|=
operator|new
name|ArrayList
argument_list|<
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
argument_list|>
argument_list|()
expr_stmt|;
block|}
name|values
operator|.
name|add
argument_list|(
name|getParameterChildParameters
argument_list|(
name|param
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|parameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|values
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
name|getParameterChildParameters
parameter_list|(
specifier|final
name|Element
name|parameter
parameter_list|)
block|{
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|>
name|results
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|NodeList
name|childParameters
init|=
name|parameter
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childParameters
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Node
name|nChildParameter
init|=
name|childParameters
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|nChildParameter
operator|instanceof
name|Element
condition|)
block|{
specifier|final
name|Element
name|childParameter
init|=
operator|(
name|Element
operator|)
name|nChildParameter
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|childParameter
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
if|if
condition|(
name|childParameter
operator|.
name|getAttributes
argument_list|()
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|List
argument_list|<
name|Properties
argument_list|>
name|childParameterProperties
init|=
operator|(
name|List
argument_list|<
name|Properties
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|childParameterProperties
operator|==
literal|null
condition|)
block|{
name|childParameterProperties
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|final
name|NamedNodeMap
name|attrs
init|=
name|childParameter
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
specifier|final
name|Properties
name|props
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|attrs
operator|.
name|getLength
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
specifier|final
name|Node
name|attr
init|=
name|attrs
operator|.
name|item
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|props
operator|.
name|put
argument_list|(
name|attr
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|attr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|childParameterProperties
operator|.
name|add
argument_list|(
name|props
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|childParameterProperties
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|List
argument_list|<
name|String
argument_list|>
name|strings
init|=
operator|(
name|List
argument_list|<
name|String
argument_list|>
operator|)
name|results
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|strings
operator|==
literal|null
condition|)
block|{
name|strings
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
name|strings
operator|.
name|add
argument_list|(
name|childParameter
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|results
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|strings
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|results
return|;
block|}
comment|/**      * Parses a structure like:      *<pre>      * {@code      *<parameters>      *<param name="a" value="1"/><param name="b" value="2"/>      *</parameters>      * }      *</pre>      * into a set of Properties.      *      * @param nParameters      *            The parameters Node      * @return a set of name value properties for representing the XML      *         parameters      */
specifier|public
specifier|static
name|Properties
name|parseParameters
parameter_list|(
specifier|final
name|Node
name|nParameters
parameter_list|)
block|{
return|return
name|parseProperties
argument_list|(
name|nParameters
argument_list|,
literal|"param"
argument_list|)
return|;
block|}
comment|/**      * Parses a structure like:      *<pre>      * {@code      *<properties>      *<property name="a" value="1"/>      *<property name="b" value="2"/>      *</properties>      * }      *</pre>      * into a set of Properties      *      * @param nProperties      *            The properties Node      * @return a set of name value properties for representing the XML      *         properties      */
specifier|public
specifier|static
name|Properties
name|parseProperties
parameter_list|(
specifier|final
name|Node
name|nProperties
parameter_list|)
block|{
return|return
name|parseProperties
argument_list|(
name|nProperties
argument_list|,
literal|"property"
argument_list|)
return|;
block|}
comment|/**      * Parses a structure like:      *<pre>      * {@code      *<features>      *<feature name="a" value="1"/>      *<feature name="b" value="2"/>      *</features>      * }      *</pre>      * into a set of Properties      *      * @param nFeatures      *            The features Node      * @return a set of name value properties for representing the XML      *         features      */
specifier|public
specifier|static
name|Properties
name|parseFeatures
parameter_list|(
specifier|final
name|Node
name|nFeatures
parameter_list|)
block|{
return|return
name|parseProperties
argument_list|(
name|nFeatures
argument_list|,
literal|"feature"
argument_list|)
return|;
block|}
comment|/**      * Parses a structure like:      *<pre>      * {@code      *<properties>      *<property name="a" value="1"/>      *<property name="b" value="2"/>      *</properties>      * }      *</pre>      * into a set of Properties      *      * @param container      *            The container of the properties      * @param elementName      *            The name of the property element      * @return a set of name value properties for representing the XML      *         properties      */
specifier|private
specifier|static
name|Properties
name|parseProperties
parameter_list|(
specifier|final
name|Node
name|container
parameter_list|,
specifier|final
name|String
name|elementName
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
if|if
condition|(
name|container
operator|!=
literal|null
operator|&&
name|container
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
specifier|final
name|NodeList
name|params
init|=
operator|(
operator|(
name|Element
operator|)
name|container
operator|)
operator|.
name|getElementsByTagName
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Element
name|param
init|=
operator|(
operator|(
name|Element
operator|)
name|params
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|)
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|param
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|param
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|!=
literal|null
operator|&&
name|value
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|name
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'name' attribute missing for "
operator|+
name|elementName
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"'value' attribute missing for "
operator|+
name|elementName
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|properties
return|;
block|}
block|}
end_class

end_unit

