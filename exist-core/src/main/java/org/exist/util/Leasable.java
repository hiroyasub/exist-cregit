begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Consumer
import|;
end_import

begin_comment
comment|/**  * A container for an Object upon which  * leases may be taken and returned.  *  * The container keeps a reference count of  * the number of active leases.  *  * If a `closer` is provided then when the  * number of active leases returns to zero,  * the closer is invoked. Once the closer is  * invoked, all subsequent leases of the object  * are invalid.  *  * This is useful for when you have an object which  * makes use of resources that have to be freed when  * you are finished with the object, but you want to be  * able to freely share the object around.  *  * @param<T> The type of the leasable object.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
annotation|@
name|ThreadSafe
specifier|public
class|class
name|Leasable
parameter_list|<
name|T
parameter_list|>
block|{
specifier|private
specifier|final
name|T
name|object
decl_stmt|;
annotation|@
name|Nullable
specifier|private
specifier|final
name|Consumer
argument_list|<
name|T
argument_list|>
name|closer
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
specifier|private
name|int
name|leases
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
specifier|private
name|boolean
name|closed
decl_stmt|;
specifier|public
name|Leasable
parameter_list|(
specifier|final
name|T
name|object
parameter_list|)
block|{
name|this
argument_list|(
name|object
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Leasable
parameter_list|(
specifier|final
name|T
name|object
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|Consumer
argument_list|<
name|T
argument_list|>
name|closer
parameter_list|)
block|{
name|this
operator|.
name|object
operator|=
name|object
expr_stmt|;
name|this
operator|.
name|closer
operator|=
name|closer
expr_stmt|;
block|}
comment|/**      * Creates a {@code Leasable<U>} from an {@code U extends AutoCloseable}.      *      * The {@link AutoCloseable#close()} method will be involed as the `closer`      * and exception thrown by {@link AutoCloseable#close()} will be promoted      * to an {@link IllegalLeasableState} exception.      *      *      * @param<U> the type of the auto-closeable object.      *      * @param object The object to setup for leasing.      *      * @return The leasable object.      */
specifier|public
specifier|static
parameter_list|<
name|U
extends|extends
name|AutoCloseable
parameter_list|>
name|Leasable
argument_list|<
name|U
argument_list|>
name|fromCloseable
parameter_list|(
specifier|final
name|U
name|object
parameter_list|)
block|{
return|return
operator|new
name|Leasable
argument_list|<>
argument_list|(
name|object
argument_list|,
name|_object
lambda|->
block|{
try|try
block|{
name|_object
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalLeasableState
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
argument_list|)
return|;
block|}
comment|/**      * Take a lease on the object.      *      * This will increment the reference      * count of the object by 1.      *      * Note, callers are expected to call      * {@link Lease#close()} when they are      * finished with the lease.      *      * @return a lease of the object.      */
specifier|public
name|Lease
name|lease
parameter_list|()
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalLeasableState
argument_list|(
literal|"Object is closed"
argument_list|)
throw|;
block|}
specifier|final
name|Lease
name|lease
init|=
operator|new
name|Lease
argument_list|()
decl_stmt|;
name|leases
operator|++
expr_stmt|;
return|return
name|lease
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Determines if the object is leased.      *      * @return true if the object is leased.      */
specifier|public
name|boolean
name|isLeased
parameter_list|()
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
return|return
literal|false
return|;
block|}
return|return
name|leases
operator|>
literal|0
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Represents a lease of the leasable object.      */
specifier|public
class|class
name|Lease
implements|implements
name|AutoCloseable
block|{
comment|/**          * Access to the leased object.          *          * @return the leased object.          */
specifier|public
name|T
name|get
parameter_list|()
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalLeasableState
argument_list|(
literal|"Object is closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|leases
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalLeasableState
argument_list|(
literal|"Lease was returned"
argument_list|)
throw|;
block|}
return|return
name|object
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|readLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**          * Releases the lease on the leasable object.          */
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|closed
condition|)
block|{
throw|throw
operator|new
name|IllegalLeasableState
argument_list|(
literal|"Object is closed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|leases
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalLeasableState
argument_list|(
literal|"Lease was already returned"
argument_list|)
throw|;
block|}
name|leases
operator|--
expr_stmt|;
if|if
condition|(
name|leases
operator|==
literal|0
operator|&&
name|closer
operator|!=
literal|null
condition|)
block|{
name|closer
operator|.
name|accept
argument_list|(
name|object
argument_list|)
expr_stmt|;
name|closed
operator|=
literal|true
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|writeLock
argument_list|()
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Represents an illegal state of the leasable/leased object.      */
specifier|public
specifier|static
class|class
name|IllegalLeasableState
extends|extends
name|IllegalStateException
block|{
specifier|public
name|IllegalLeasableState
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
name|super
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
specifier|public
name|IllegalLeasableState
parameter_list|(
specifier|final
name|Throwable
name|cause
parameter_list|)
block|{
name|super
argument_list|(
name|cause
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

