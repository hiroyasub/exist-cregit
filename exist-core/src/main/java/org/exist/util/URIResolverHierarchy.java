begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2020 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A simple hierarchy of URI Resolvers.  *  * The first resolver that matches returns the result.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|URIResolverHierarchy
implements|implements
name|URIResolver
block|{
specifier|private
specifier|final
name|URIResolver
index|[]
name|uriResolvers
decl_stmt|;
comment|/**      * @param uriResolvers the URI resolvers in order of precedence, most significant first.      */
specifier|public
name|URIResolverHierarchy
parameter_list|(
specifier|final
name|URIResolver
modifier|...
name|uriResolvers
parameter_list|)
block|{
name|this
operator|.
name|uriResolvers
operator|=
name|uriResolvers
expr_stmt|;
block|}
comment|/**      * @param uriResolvers the URI resolvers in order of precedence, most significant first.      */
specifier|public
name|URIResolverHierarchy
parameter_list|(
specifier|final
name|List
argument_list|<
name|URIResolver
argument_list|>
name|uriResolvers
parameter_list|)
block|{
name|this
operator|.
name|uriResolvers
operator|=
name|uriResolvers
operator|.
name|toArray
argument_list|(
operator|new
name|URIResolver
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Source
name|resolve
parameter_list|(
specifier|final
name|String
name|href
parameter_list|,
specifier|final
name|String
name|base
parameter_list|)
throws|throws
name|TransformerException
block|{
if|if
condition|(
name|uriResolvers
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|TransformerException
name|firstTransformerException
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|URIResolver
name|uriResolver
range|:
name|uriResolvers
control|)
block|{
try|try
block|{
specifier|final
name|Source
name|source
init|=
name|uriResolver
operator|.
name|resolve
argument_list|(
name|href
argument_list|,
name|base
argument_list|)
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
return|return
name|source
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerException
name|e
parameter_list|)
block|{
if|if
condition|(
name|firstTransformerException
operator|==
literal|null
condition|)
block|{
name|firstTransformerException
operator|=
name|e
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|firstTransformerException
operator|!=
literal|null
condition|)
block|{
throw|throw
name|firstTransformerException
throw|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

