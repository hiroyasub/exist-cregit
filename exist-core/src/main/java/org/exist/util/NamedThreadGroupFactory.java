begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_comment
comment|/**  * A simple factory for thread groups, where you  * may want multiple groups with similar names.  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|NamedThreadGroupFactory
block|{
specifier|private
specifier|final
name|String
name|threadGroupNameBase
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|threadGroupId
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/**      * @param threadGroupNameBase the base name for the thread group.      */
specifier|public
name|NamedThreadGroupFactory
parameter_list|(
specifier|final
name|String
name|threadGroupNameBase
parameter_list|)
block|{
name|this
operator|.
name|threadGroupNameBase
operator|=
name|threadGroupNameBase
expr_stmt|;
block|}
comment|/**      * Produces a thread group named like:      *     "${threadGroupNameBase}-${id}"      *      * Where id is a global monontonically increasing identifier.      *      * @param parent the parent thread group, or null to use the current threads thread group.      *      * @return the new thread group      */
specifier|public
name|ThreadGroup
name|newThreadGroup
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|ThreadGroup
name|parent
parameter_list|)
block|{
specifier|final
name|String
name|threadGroupName
init|=
name|threadGroupNameBase
operator|+
literal|"-"
operator|+
name|threadGroupId
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|parent
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|ThreadGroup
argument_list|(
name|parent
argument_list|,
name|threadGroupName
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|ThreadGroup
argument_list|(
name|threadGroupName
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

