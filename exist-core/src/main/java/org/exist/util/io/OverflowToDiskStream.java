begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:patrick@reini.net">Patrick Reinhart</a>  */
end_comment

begin_class
specifier|final
class|class
name|OverflowToDiskStream
extends|extends
name|OutputStream
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|OverflowToDiskStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|int
name|inMemorySize
decl_stmt|;
specifier|private
specifier|final
name|OutputStreamSupplier
name|overflowStreamSupplier
decl_stmt|;
specifier|private
name|long
name|count
decl_stmt|;
specifier|private
name|byte
index|[]
name|singleByteBuffer
decl_stmt|;
specifier|private
name|MemoryContents
name|memoryContents
decl_stmt|;
specifier|private
name|OutputStream
name|overflowOutputStream
decl_stmt|;
name|OverflowToDiskStream
parameter_list|(
name|int
name|inMemorySize
parameter_list|,
name|MemoryContents
name|memoryContents
parameter_list|,
name|OutputStreamSupplier
name|overflowStreamSupplier
parameter_list|)
block|{
name|this
operator|.
name|inMemorySize
operator|=
name|inMemorySize
expr_stmt|;
name|this
operator|.
name|memoryContents
operator|=
name|memoryContents
expr_stmt|;
name|this
operator|.
name|overflowStreamSupplier
operator|=
name|overflowStreamSupplier
expr_stmt|;
block|}
specifier|private
name|OutputStream
name|switchToOverflow
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|overflowOutputStream
operator|==
literal|null
condition|)
block|{
name|overflowOutputStream
operator|=
name|overflowStreamSupplier
operator|.
name|get
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Writing in memory buffered {} bytes to overflow stream"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|memoryContents
operator|.
name|transferTo
argument_list|(
name|overflowOutputStream
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|memoryContents
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
return|return
name|overflowOutputStream
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|overflowOutputStream
operator|!=
literal|null
condition|)
block|{
comment|/*              * if we have a overflow do no more checks              */
name|overflowOutputStream
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|count
operator|>=
name|inMemorySize
condition|)
block|{
name|switchToOverflow
argument_list|()
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|count
operator|++
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|singleByteBuffer
operator|==
literal|null
condition|)
block|{
name|singleByteBuffer
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
block|}
name|singleByteBuffer
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|b
expr_stmt|;
name|count
operator|+=
name|memoryContents
operator|.
name|writeAtEnd
argument_list|(
name|singleByteBuffer
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|overflowOutputStream
operator|!=
literal|null
condition|)
block|{
comment|/*              * if we have a overflow do no more checks              */
name|overflowOutputStream
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|count
operator|+=
name|len
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|len
operator|>=
name|inMemorySize
condition|)
block|{
comment|/*              * if the request length exceeds the size of the output buffer, flush the output              * buffer and then write the data directly. In this way buffered streams will              * cascade harmlessly.              */
name|switchToOverflow
argument_list|()
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|len
operator|>
name|inMemorySize
operator|-
name|count
condition|)
block|{
name|switchToOverflow
argument_list|()
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|count
operator|+=
name|len
expr_stmt|;
return|return;
block|}
name|count
operator|+=
name|memoryContents
operator|.
name|writeAtEnd
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|overflowOutputStream
operator|!=
literal|null
condition|)
block|{
name|overflowOutputStream
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|overflowOutputStream
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Closing overflow stream after writing {} bytes"
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
name|overflowOutputStream
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

