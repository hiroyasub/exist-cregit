begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|Charset
import|;
end_import

begin_class
specifier|public
class|class
name|InputStreamUtil
block|{
comment|/**      * Default size of the buffer. 64 KB      */
specifier|public
specifier|static
specifier|final
name|int
name|DEFAULT_BUF_SIZE
init|=
literal|65536
decl_stmt|;
comment|// 64KB
comment|/**      * Copy the InputStream to the OutputStream.      *      * @param is the input stream      * @param os the output stream      *      * @throws IOException if an I/O error occurs.      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
specifier|final
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|copy
argument_list|(
name|is
argument_list|,
name|os
argument_list|,
name|DEFAULT_BUF_SIZE
argument_list|)
expr_stmt|;
block|}
comment|/**      * Copy the InputStream to the OutputStream.      *      * @param is the input stream      * @param os the output stream      * @param bufferSize the size of the in-memory buffer to use when copying.      *      * @throws IOException if an I/O error occurs.      */
specifier|public
specifier|static
name|void
name|copy
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
specifier|final
name|OutputStream
name|os
parameter_list|,
specifier|final
name|int
name|bufferSize
parameter_list|)
throws|throws
name|IOException
block|{
name|int
name|read
decl_stmt|;
specifier|final
name|byte
name|buffer
index|[]
init|=
operator|new
name|byte
index|[
name|bufferSize
index|]
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|is
operator|.
name|read
argument_list|(
name|buffer
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|os
operator|.
name|write
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read all bytes from the InputStream.      *      * @param is the input stream      *      * @return the bytes read from the input stream.      *      * @throws IOException if an I/O error occurs.      */
specifier|public
specifier|static
name|byte
index|[]
name|readAll
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|FastByteArrayOutputStream
name|os
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|()
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
name|os
operator|.
name|toByteArray
argument_list|()
return|;
block|}
block|}
comment|/**      * Read all bytes from the InputStream into a String.      *      * @param is the input stream      * @param charset the charset encoding of the byte string.      *      * @return the String read from the input stream.      *      * @throws IOException if an I/O error occurs.      */
specifier|public
specifier|static
name|String
name|readString
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|,
specifier|final
name|Charset
name|charset
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|FastByteArrayOutputStream
name|os
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|()
init|)
block|{
name|os
operator|.
name|write
argument_list|(
name|is
argument_list|)
expr_stmt|;
return|return
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|charset
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

