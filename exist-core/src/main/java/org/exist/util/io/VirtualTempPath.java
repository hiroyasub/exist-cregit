begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|StampedLock
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|GuardedBy
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|Log
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|logging
operator|.
name|LogFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_comment
comment|/**  * @author Patrick Reinhart<patrick@reini.net>  */
end_comment

begin_class
annotation|@
name|ThreadSafe
specifier|public
specifier|final
class|class
name|VirtualTempPath
implements|implements
name|AutoCloseable
block|{
specifier|private
specifier|static
specifier|final
name|Log
name|LOG
init|=
name|LogFactory
operator|.
name|getLog
argument_list|(
name|VirtualTempPath
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|byte
index|[]
name|EMPTY_BUFFER
init|=
operator|new
name|byte
index|[
literal|0
index|]
decl_stmt|;
specifier|private
specifier|final
name|int
name|inMemorySize
decl_stmt|;
specifier|private
specifier|final
name|StampedLock
name|lock
decl_stmt|;
specifier|private
specifier|final
name|TemporaryFileManager
name|tempFileManager
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
specifier|private
name|MemoryContents
name|content
decl_stmt|;
annotation|@
name|GuardedBy
argument_list|(
literal|"lock"
argument_list|)
specifier|private
name|Path
name|contentFile
decl_stmt|;
specifier|public
name|VirtualTempPath
parameter_list|(
name|int
name|inMemorySize
parameter_list|,
name|TemporaryFileManager
name|tempFileManager
parameter_list|)
block|{
name|this
operator|.
name|inMemorySize
operator|=
name|inMemorySize
expr_stmt|;
name|this
operator|.
name|lock
operator|=
operator|new
name|StampedLock
argument_list|()
expr_stmt|;
name|this
operator|.
name|tempFileManager
operator|=
name|tempFileManager
expr_stmt|;
block|}
specifier|private
name|OutputStream
name|initOverflowOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|contentFile
operator|==
literal|null
condition|)
block|{
name|contentFile
operator|=
name|tempFileManager
operator|.
name|getTemporaryFile
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Initializing overflow to "
operator|+
name|contentFile
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|Files
operator|.
name|newOutputStream
argument_list|(
name|contentFile
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|OutputStream
name|newOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|inMemorySize
operator|<=
literal|0
operator|&&
name|contentFile
operator|==
literal|null
condition|)
block|{
name|contentFile
operator|=
name|tempFileManager
operator|.
name|getTemporaryFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"In memory buffering disabled writing to "
operator|+
name|contentFile
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contentFile
operator|!=
literal|null
condition|)
block|{
return|return
name|Files
operator|.
name|newOutputStream
argument_list|(
name|contentFile
argument_list|)
return|;
block|}
if|if
condition|(
name|content
operator|==
literal|null
condition|)
block|{
comment|// initial blocks are 10 % of the specified in memory size but minimum 1
name|content
operator|=
name|MemoryContentsImpl
operator|.
name|createWithInMemorySize
argument_list|(
name|inMemorySize
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|OverflowToDiskStream
argument_list|(
name|inMemorySize
argument_list|,
name|content
argument_list|,
name|this
operator|::
name|initOverflowOutputStream
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|InputStream
name|newInputStream
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|contentFile
operator|!=
literal|null
condition|)
block|{
return|return
name|Files
operator|.
name|newInputStream
argument_list|(
name|contentFile
argument_list|)
return|;
block|}
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
return|return
operator|new
name|MemoryContentsInputStream
argument_list|(
name|content
argument_list|)
return|;
block|}
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|EMPTY_BUFFER
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockRead
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|contentFile
operator|!=
literal|null
condition|)
block|{
name|tempFileManager
operator|.
name|returnTemporaryFile
argument_list|(
name|contentFile
argument_list|)
expr_stmt|;
name|contentFile
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|content
operator|.
name|reset
argument_list|()
expr_stmt|;
name|content
operator|=
literal|null
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockWrite
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|long
name|size
parameter_list|()
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|contentFile
operator|!=
literal|null
condition|)
block|{
return|return
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|contentFile
argument_list|)
return|;
block|}
return|return
name|content
operator|==
literal|null
condition|?
literal|0
else|:
name|content
operator|.
name|size
argument_list|()
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockRead
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getBytes
parameter_list|()
block|{
name|long
name|stamp
init|=
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|content
operator|!=
literal|null
condition|)
block|{
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|content
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|content
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0L
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|buffer
return|;
block|}
if|else if
condition|(
name|contentFile
operator|!=
literal|null
condition|)
block|{
return|return
name|Files
operator|.
name|readAllBytes
argument_list|(
name|contentFile
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get content"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlockRead
argument_list|(
name|stamp
argument_list|)
expr_stmt|;
block|}
return|return
name|EMPTY_BUFFER
return|;
block|}
block|}
end_class

end_unit

