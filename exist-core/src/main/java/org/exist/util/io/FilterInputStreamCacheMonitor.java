begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_comment
comment|/**  * Monitors active {@link FilterInputStreamCacheMonitor} instances.  *  * @author<a href="mailto:adam.retter@googlemail.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|FilterInputStreamCacheMonitor
block|{
specifier|private
specifier|static
specifier|final
name|FilterInputStreamCacheMonitor
name|INSTANCE
init|=
operator|new
name|FilterInputStreamCacheMonitor
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ConcurrentMap
argument_list|<
name|FilterInputStreamCache
argument_list|,
name|FilterInputStreamCacheInfo
argument_list|>
name|activeCaches
init|=
operator|new
name|ConcurrentHashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|FilterInputStreamCacheMonitor
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|FilterInputStreamCacheMonitor
name|getInstance
parameter_list|()
block|{
return|return
name|INSTANCE
return|;
block|}
comment|/**      * Intentionally package private!      *       * Only for use by org.exist.util.io.FilterInputStreamCacheMonitorTest      */
name|void
name|clear
parameter_list|()
block|{
name|activeCaches
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|register
parameter_list|(
specifier|final
name|FilterInputStreamCache
name|cache
parameter_list|)
block|{
specifier|final
name|long
name|now
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|FilterInputStreamCacheInfo
name|info
init|=
operator|new
name|FilterInputStreamCacheInfo
argument_list|(
name|now
argument_list|,
name|cache
argument_list|)
decl_stmt|;
name|activeCaches
operator|.
name|put
argument_list|(
name|cache
argument_list|,
name|info
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Collection
argument_list|<
name|FilterInputStreamCacheInfo
argument_list|>
name|getActive
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|FilterInputStreamCacheInfo
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|(
name|activeCaches
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|list
operator|.
name|sort
argument_list|(
name|Comparator
operator|.
name|comparingLong
argument_list|(
name|FilterInputStreamCacheInfo
operator|::
name|getRegistered
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|list
return|;
block|}
specifier|public
name|void
name|deregister
parameter_list|(
specifier|final
name|FilterInputStreamCache
name|cache
parameter_list|)
block|{
name|activeCaches
operator|.
name|remove
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|dump
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|FilterInputStreamCacheInfo
name|info
range|:
name|getActive
argument_list|()
control|)
block|{
specifier|final
name|FilterInputStreamCache
name|cache
init|=
name|info
operator|.
name|getCache
argument_list|()
decl_stmt|;
specifier|final
name|String
name|id
decl_stmt|;
if|if
condition|(
name|cache
operator|instanceof
name|FileFilterInputStreamCache
condition|)
block|{
name|id
operator|=
operator|(
operator|(
name|FileFilterInputStreamCache
operator|)
name|cache
operator|)
operator|.
name|getFilePath
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|cache
operator|instanceof
name|MemoryMappedFileFilterInputStreamCache
condition|)
block|{
name|id
operator|=
operator|(
operator|(
name|MemoryMappedFileFilterInputStreamCache
operator|)
name|cache
operator|)
operator|.
name|getFilePath
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|cache
operator|instanceof
name|MemoryFilterInputStreamCache
condition|)
block|{
name|id
operator|=
literal|"mem"
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
literal|"unknown"
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|info
operator|.
name|getRegistered
argument_list|()
operator|+
literal|": "
operator|+
name|id
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
class|class
name|FilterInputStreamCacheInfo
block|{
specifier|private
specifier|final
name|long
name|registered
decl_stmt|;
specifier|private
specifier|final
name|FilterInputStreamCache
name|cache
decl_stmt|;
specifier|public
name|FilterInputStreamCacheInfo
parameter_list|(
specifier|final
name|long
name|registered
parameter_list|,
specifier|final
name|FilterInputStreamCache
name|cache
parameter_list|)
block|{
name|this
operator|.
name|registered
operator|=
name|registered
expr_stmt|;
name|this
operator|.
name|cache
operator|=
name|cache
expr_stmt|;
block|}
specifier|public
name|long
name|getRegistered
parameter_list|()
block|{
return|return
name|registered
return|;
block|}
specifier|public
name|FilterInputStreamCache
name|getCache
parameter_list|()
block|{
return|return
name|cache
return|;
block|}
block|}
block|}
end_class

end_unit

