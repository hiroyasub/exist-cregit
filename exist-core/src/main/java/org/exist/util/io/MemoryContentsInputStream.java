begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|Math
operator|.
name|min
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLongFieldUpdater
import|;
end_import

begin_comment
comment|/**  * @author Patrick Reinhart<patrick@reini.net>  */
end_comment

begin_class
specifier|final
class|class
name|MemoryContentsInputStream
extends|extends
name|InputStream
block|{
comment|/**      * The maximum number of bytes to skip.      */
specifier|private
specifier|static
specifier|final
name|int
name|MAX_SKIP_SIZE
init|=
literal|2048
decl_stmt|;
specifier|static
specifier|final
name|AtomicLongFieldUpdater
argument_list|<
name|MemoryContentsInputStream
argument_list|>
name|POSITION_UPDATER
init|=
name|AtomicLongFieldUpdater
operator|.
name|newUpdater
argument_list|(
name|MemoryContentsInputStream
operator|.
name|class
argument_list|,
literal|"position"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|MemoryContents
name|memoryContents
decl_stmt|;
specifier|private
name|byte
index|[]
name|singleByteBuffer
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
comment|// POSITION_UPDATER
specifier|private
specifier|volatile
name|long
name|position
decl_stmt|;
name|MemoryContentsInputStream
parameter_list|(
name|MemoryContents
name|memoryContents
parameter_list|)
block|{
name|this
operator|.
name|memoryContents
operator|=
name|memoryContents
expr_stmt|;
name|singleByteBuffer
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
name|POSITION_UPDATER
operator|.
name|set
argument_list|(
name|this
argument_list|,
literal|0L
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|long
name|available
init|=
name|this
operator|.
name|memoryContents
operator|.
name|size
argument_list|()
operator|-
name|POSITION_UPDATER
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|available
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
if|else if
condition|(
name|available
operator|>
literal|1L
condition|)
block|{
comment|// introduce a subtle bug in code that assumes #available() returns
comment|// everything until the end
return|return
operator|(
name|int
operator|)
operator|(
name|available
operator|-
literal|1
operator|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|int
operator|)
name|available
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
synchronized|synchronized
init|(
name|singleByteBuffer
init|)
block|{
name|int
name|read
init|=
name|this
operator|.
name|read
argument_list|(
name|singleByteBuffer
argument_list|)
decl_stmt|;
if|if
condition|(
name|read
operator|<
literal|1
condition|)
block|{
return|return
name|read
return|;
block|}
else|else
block|{
return|return
name|singleByteBuffer
index|[
literal|0
index|]
operator|&
literal|0xff
return|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|boolean
name|success
init|=
literal|false
decl_stmt|;
name|int
name|read
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|success
condition|)
block|{
name|long
name|positionBefore
init|=
name|POSITION_UPDATER
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|read
operator|=
name|this
operator|.
name|memoryContents
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|positionBefore
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
if|if
condition|(
name|read
operator|<
literal|1
condition|)
block|{
return|return
name|read
return|;
block|}
name|success
operator|=
name|POSITION_UPDATER
operator|.
name|compareAndSet
argument_list|(
name|this
argument_list|,
name|positionBefore
argument_list|,
name|positionBefore
operator|+
name|read
argument_list|)
expr_stmt|;
block|}
return|return
name|read
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|fileSize
init|=
name|this
operator|.
name|memoryContents
operator|.
name|size
argument_list|()
decl_stmt|;
name|long
name|skipped
init|=
literal|0L
decl_stmt|;
name|boolean
name|success
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|success
condition|)
block|{
name|long
name|positionBefore
init|=
name|POSITION_UPDATER
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// do not skip more than MAX_SKIP_SIZE
comment|// this intentionally introduces a subtle bug in code that doesn't check
comment|// for the return value of #skip
name|skipped
operator|=
name|min
argument_list|(
name|min
argument_list|(
name|n
argument_list|,
name|fileSize
operator|-
name|positionBefore
argument_list|)
argument_list|,
name|MAX_SKIP_SIZE
argument_list|)
expr_stmt|;
if|if
condition|(
name|skipped
operator|<
literal|0L
condition|)
block|{
comment|// file size changed due to concurrent access
name|fileSize
operator|=
name|this
operator|.
name|memoryContents
operator|.
name|size
argument_list|()
expr_stmt|;
continue|continue;
block|}
name|success
operator|=
name|POSITION_UPDATER
operator|.
name|compareAndSet
argument_list|(
name|this
argument_list|,
name|positionBefore
argument_list|,
name|positionBefore
operator|+
name|skipped
argument_list|)
expr_stmt|;
block|}
return|return
name|skipped
return|;
block|}
comment|// Java 9 method, has to compile under Java 1.7 so no @Override
specifier|public
name|long
name|transferToâ
parameter_list|(
name|OutputStream
name|out
parameter_list|)
throws|throws
name|IOException
block|{
name|long
name|positionBefore
init|=
name|POSITION_UPDATER
operator|.
name|get
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|long
name|written
init|=
name|this
operator|.
name|memoryContents
operator|.
name|transferTo
argument_list|(
name|out
argument_list|,
name|positionBefore
argument_list|)
decl_stmt|;
name|POSITION_UPDATER
operator|.
name|set
argument_list|(
name|this
argument_list|,
name|this
operator|.
name|memoryContents
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|written
return|;
block|}
block|}
end_class

end_unit

