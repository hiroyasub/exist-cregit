begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_comment
comment|/**  * This class implements a simple version   * of the heapsort algorithm.  *  * This work was undertaken as part of the development of the taxonomic  * repository at http://biodiversity.org.au . See<A  * href="ghw-at-anbg.gov.au">Greg&nbsp;Whitbread</A> for further details.  *   * @author pmurray@bigpond.com  * @author pmurray@anbg.gov.au  * @author https://sourceforge.net/users/paulmurray  * @author http://www.users.bigpond.com/pmurray  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HeapSort
block|{
comment|/*      * Briefly: we impose a tree structure on an array by treating the "child"      * nodes of node N as nodes N2 and N2+1. Obviously, the root of the tree is      * node 1.      *       * A "valid" tree has the property that both child nodes of every node have      * a value<= the value of the node. Note that this is considerably weaker      * than the tree being sorted.      *       * The "heap fix" routine does the following: assume that the trees rooted      * at location 2 and 3 are valid but that the node at location 1 is any value.      * While the node of interest is not greater than both its child nodes, move it      * down into the tree by swapping it with the greater of its two child nodes.      *       * This class has additional complications in that we cannot assume that       * our "heap" starts at index 0, because the top-level sorts may be asked       * to sort a subsection of an array.      */
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|sort
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
comment|// Establish the heap property.
for|for
control|(
name|int
name|i
init|=
name|hi
operator|-
literal|1
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
while|while
condition|(
name|lo
operator|<
name|hi
condition|)
block|{
comment|// a[lo] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|hi
operator|--
expr_stmt|;
name|fixHeap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|sort
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|,
name|int
index|[]
name|b
parameter_list|)
block|{
comment|// Establish the heap property.
for|for
control|(
name|int
name|i
init|=
name|hi
operator|-
literal|1
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|lo
argument_list|,
name|i
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
while|while
condition|(
name|lo
operator|<
name|hi
condition|)
block|{
comment|// a[lo] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|b
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
comment|// Heap shrinks by 1 element.
name|hi
operator|--
expr_stmt|;
name|fixHeap
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|lo
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|C
parameter_list|>
name|void
name|sort
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|Comparator
argument_list|<
name|C
argument_list|>
name|c
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
comment|// Establish the heap property.
for|for
control|(
name|int
name|i
init|=
name|hi
operator|-
literal|1
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|lo
argument_list|,
name|i
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
while|while
condition|(
name|lo
operator|<
name|hi
condition|)
block|{
comment|// a[lo] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|hi
operator|--
expr_stmt|;
name|fixHeap
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|lo
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|sort
parameter_list|(
name|List
argument_list|<
name|C
argument_list|>
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
comment|// Establish the heap property.
for|for
control|(
name|int
name|i
init|=
name|hi
operator|-
literal|1
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
while|while
condition|(
name|lo
operator|<
name|hi
condition|)
block|{
comment|// a[lo] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|hi
operator|--
expr_stmt|;
name|fixHeap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|,
name|Object
name|b
index|[]
parameter_list|)
block|{
comment|// Establish the heap property.
for|for
control|(
name|int
name|i
init|=
name|hi
operator|-
literal|1
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|lo
argument_list|,
name|i
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
while|while
condition|(
name|lo
operator|<
name|hi
condition|)
block|{
comment|// a[lo] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|b
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
comment|// Heap shrinks by 1 element.
name|hi
operator|--
expr_stmt|;
name|fixHeap
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|lo
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|sortByNodeId
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
comment|// Establish the heap property.
for|for
control|(
name|int
name|i
init|=
name|hi
operator|-
literal|1
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeapByNodeId
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
while|while
condition|(
name|lo
operator|<
name|hi
condition|)
block|{
comment|// a[lo] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|hi
operator|--
expr_stmt|;
name|fixHeapByNodeId
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|lo
argument_list|,
name|hi
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|fixHeap
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|item
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|child
init|=
operator|(
name|item
operator|-
name|root
operator|)
operator|*
literal|2
operator|+
literal|1
operator|+
name|root
decl_stmt|;
if|if
condition|(
operator|(
name|child
operator|>
name|end
operator|||
name|a
index|[
name|item
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
index|]
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
index|[
name|item
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|+
literal|1
index|]
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
index|[
name|child
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|+
literal|1
index|]
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|item
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
operator|+
literal|1
argument_list|)
expr_stmt|;
name|item
operator|=
name|child
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|fixHeap
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|int
index|[]
name|b
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|item
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|child
init|=
operator|(
name|item
operator|-
name|root
operator|)
operator|*
literal|2
operator|+
literal|1
operator|+
name|root
decl_stmt|;
if|if
condition|(
operator|(
name|child
operator|>
name|end
operator|||
name|a
index|[
name|item
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
index|]
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
index|[
name|item
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|+
literal|1
index|]
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
index|[
name|child
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|+
literal|1
index|]
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|b
argument_list|,
name|item
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
name|item
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|b
argument_list|,
name|item
argument_list|,
name|child
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|item
operator|=
name|child
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|C
parameter_list|>
name|void
name|fixHeap
parameter_list|(
name|C
index|[]
name|a
parameter_list|,
name|Comparator
argument_list|<
name|C
argument_list|>
name|c
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|item
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|child
init|=
operator|(
name|item
operator|-
name|root
operator|)
operator|*
literal|2
operator|+
literal|1
operator|+
name|root
decl_stmt|;
if|if
condition|(
operator|(
name|child
operator|>
name|end
operator|||
name|c
operator|.
name|compare
argument_list|(
name|a
index|[
name|item
index|]
argument_list|,
name|a
index|[
name|child
index|]
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|c
operator|.
name|compare
argument_list|(
name|a
index|[
name|item
index|]
argument_list|,
name|a
index|[
name|child
operator|+
literal|1
index|]
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|c
operator|.
name|compare
argument_list|(
name|a
index|[
name|child
index|]
argument_list|,
name|a
index|[
name|child
operator|+
literal|1
index|]
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|item
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
operator|+
literal|1
argument_list|)
expr_stmt|;
name|item
operator|=
name|child
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|C
extends|extends
name|Comparable
argument_list|<
name|?
super|super
name|C
argument_list|>
parameter_list|>
name|void
name|fixHeap
parameter_list|(
name|List
argument_list|<
name|C
argument_list|>
name|a
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|item
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|child
init|=
operator|(
name|item
operator|-
name|root
operator|)
operator|*
literal|2
operator|+
literal|1
operator|+
name|root
decl_stmt|;
if|if
condition|(
operator|(
name|child
operator|>
name|end
operator|||
name|a
operator|.
name|get
argument_list|(
name|item
argument_list|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|child
argument_list|)
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
operator|.
name|get
argument_list|(
name|item
argument_list|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|child
operator|+
literal|1
argument_list|)
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|child
operator|+
literal|1
argument_list|)
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|item
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
operator|+
literal|1
argument_list|)
expr_stmt|;
name|item
operator|=
name|child
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|fixHeap
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|Object
index|[]
name|b
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|item
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|child
init|=
operator|(
name|item
operator|-
name|root
operator|)
operator|*
literal|2
operator|+
literal|1
operator|+
name|root
decl_stmt|;
if|if
condition|(
operator|(
name|child
operator|>
name|end
operator|||
name|a
index|[
name|item
index|]
operator|>=
name|a
index|[
name|child
index|]
operator|)
operator|&&
operator|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
index|[
name|item
index|]
operator|>=
name|a
index|[
name|child
operator|+
literal|1
index|]
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
index|[
name|child
index|]
operator|>=
name|a
index|[
name|child
operator|+
literal|1
index|]
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|b
argument_list|,
name|item
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
name|item
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|b
argument_list|,
name|item
argument_list|,
name|child
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|item
operator|=
name|child
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|fixHeapByNodeId
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|item
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
init|;
condition|;
control|)
block|{
name|int
name|child
init|=
operator|(
name|item
operator|-
name|root
operator|)
operator|*
literal|2
operator|+
literal|1
operator|+
name|root
decl_stmt|;
if|if
condition|(
operator|(
name|child
operator|>
name|end
operator|||
name|a
index|[
name|item
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
operator|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
index|[
name|item
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|+
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|>=
literal|0
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|child
operator|+
literal|1
operator|>
name|end
operator|||
name|a
index|[
name|child
index|]
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|+
literal|1
index|]
operator|.
name|getNodeId
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|item
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|item
argument_list|,
name|child
operator|+
literal|1
argument_list|)
expr_stmt|;
name|item
operator|=
name|child
operator|+
literal|1
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|l
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
specifier|final
name|String
index|[]
name|a
init|=
operator|new
name|String
index|[]
block|{
literal|"Rudi"
block|,
literal|"Herbert"
block|,
literal|"Anton"
block|,
literal|"Berta"
block|,
literal|"Olga"
block|,
literal|"Willi"
block|,
literal|"Heinz"
block|}
decl_stmt|;
for|for
control|(
name|String
name|s
range|:
name|a
control|)
name|l
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ordering file "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|java
operator|.
name|io
operator|.
name|BufferedReader
name|is
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|BufferedReader
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|FileReader
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
init|)
block|{
name|String
name|rr
decl_stmt|;
while|while
condition|(
operator|(
name|rr
operator|=
name|is
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|sort
argument_list|(
name|l
argument_list|,
literal|0
argument_list|,
name|l
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|b
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ellapsed time: "
operator|+
operator|(
name|b
operator|-
name|a
operator|)
operator|+
literal|" size: "
operator|+
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|String
name|s
range|:
name|l
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

