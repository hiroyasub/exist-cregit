begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|OptionalUtil
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|lazy
operator|.
name|LazyValE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|net
operator|.
name|jcip
operator|.
name|annotations
operator|.
name|NotThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
operator|.
name|Left
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
operator|.
name|Right
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|launcher
operator|.
name|ConfigurationUtility
operator|.
name|LAUNCHER_PROPERTY_MAX_MEM
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|launcher
operator|.
name|ConfigurationUtility
operator|.
name|LAUNCHER_PROPERTY_MIN_MEM
import|;
end_import

begin_class
annotation|@
name|NotThreadSafe
class|class
name|WindowsServiceManager
implements|implements
name|ServiceManager
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|WindowsServiceManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PROCRUN_SRV_EXE
init|=
literal|"prunsrv-x86_64.exe"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SC_EXE
init|=
literal|"sc.exe"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SERVICE_NAME
init|=
literal|"eXist-db"
decl_stmt|;
specifier|private
specifier|final
name|Path
name|existHome
decl_stmt|;
specifier|private
specifier|final
name|LazyValE
argument_list|<
name|Path
argument_list|,
name|ServiceManagerException
argument_list|>
name|prunsrvExe
decl_stmt|;
specifier|private
enum|enum
name|WindowsServiceState
block|{
name|UNINSTALLED
block|,
name|RUNNING
block|,
name|STOPPED
block|,
name|PAUSED
block|}
name|WindowsServiceManager
parameter_list|()
block|{
name|this
operator|.
name|prunsrvExe
operator|=
operator|new
name|LazyValE
argument_list|<>
argument_list|(
parameter_list|()
lambda|->
name|OptionalUtil
operator|.
name|toRight
argument_list|(
parameter_list|()
lambda|->
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not detect EXIST_HOME when trying to find Procrun exe"
argument_list|)
argument_list|,
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
argument_list|)
operator|.
name|map
argument_list|(
name|base
lambda|->
name|base
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
name|PROCRUN_SRV_EXE
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|exe
lambda|->
name|Files
operator|.
name|exists
argument_list|(
name|exe
argument_list|)
condition|?
name|Right
argument_list|(
name|exe
argument_list|)
else|:
name|Left
argument_list|(
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not find Procrun at: "
operator|+
name|exe
argument_list|)
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|exe
lambda|->
name|Files
operator|.
name|isExecutable
argument_list|(
name|exe
argument_list|)
condition|?
name|Right
argument_list|(
name|exe
argument_list|)
else|:
name|Left
argument_list|(
operator|new
name|ServiceManagerException
argument_list|(
literal|"Procrun is not executable at: "
operator|+
name|exe
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|existHome
operator|=
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
operator|.
name|orElse
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|install
parameter_list|()
throws|throws
name|ServiceManagerException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|!=
name|WindowsServiceState
operator|.
name|UNINSTALLED
condition|)
block|{
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Service is already installed"
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|configFile
init|=
name|ConfigurationHelper
operator|.
name|getFromSystemProperty
argument_list|()
operator|.
name|orElse
argument_list|(
name|existHome
operator|.
name|resolve
argument_list|(
literal|"etc"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"conf.xml"
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|Properties
name|launcherProperties
init|=
name|ConfigurationUtility
operator|.
name|loadProperties
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|maxMemory
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|launcherProperties
operator|.
name|getProperty
argument_list|(
name|LAUNCHER_PROPERTY_MAX_MEM
argument_list|)
argument_list|)
operator|.
name|map
argument_list|(
name|s
lambda|->
name|s
operator|+
literal|"m"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|minMemory
init|=
name|launcherProperties
operator|.
name|getProperty
argument_list|(
name|LAUNCHER_PROPERTY_MIN_MEM
argument_list|,
literal|"128"
argument_list|)
operator|+
literal|"m"
decl_stmt|;
specifier|final
name|StringBuilder
name|jvmOptions
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|jvmOptions
operator|.
name|append
argument_list|(
literal|"-Dfile.encoding=UTF-8"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|propertyName
range|:
name|System
operator|.
name|getProperties
argument_list|()
operator|.
name|stringPropertyNames
argument_list|()
control|)
block|{
if|if
condition|(
name|propertyName
operator|.
name|startsWith
argument_list|(
literal|"exist."
argument_list|)
operator|||
name|propertyName
operator|.
name|startsWith
argument_list|(
literal|"jetty."
argument_list|)
operator|||
name|propertyName
operator|.
name|startsWith
argument_list|(
literal|"log4j."
argument_list|)
condition|)
block|{
specifier|final
name|String
name|propertyValue
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|propertyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|propertyValue
operator|!=
literal|null
condition|)
block|{
name|jvmOptions
operator|.
name|append
argument_list|(
literal|";-D"
argument_list|)
operator|.
name|append
argument_list|(
name|propertyName
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|propertyValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|final
name|Path
name|exe
init|=
name|prunsrvExe
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|newList
argument_list|(
name|exe
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"install"
argument_list|,
name|SERVICE_NAME
argument_list|,
literal|"--DisplayName="
operator|+
name|SERVICE_NAME
argument_list|,
literal|"--Description=eXist-db NoSQL Database Server"
argument_list|,
literal|"--StdError=auto"
argument_list|,
literal|"--StdOutput=auto"
argument_list|,
literal|"--LogPath=\""
operator|+
name|existHome
operator|.
name|resolve
argument_list|(
literal|"logs"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|,
literal|"--LogPrefix=service"
argument_list|,
literal|"--PidFile=service.pid"
argument_list|,
literal|"--Startup=auto"
argument_list|,
literal|"--ServiceUser=LocalSystem"
argument_list|,
comment|// TODO(AR) this changed from `LocalSystem` to `NT Authority\LocalService` in procrun 1.2.0, however our service won't seem to start under that account... we need to investigate!
literal|"--Jvm="
operator|+
name|findJvm
argument_list|()
operator|.
name|orElse
argument_list|(
literal|"auto"
argument_list|)
argument_list|,
literal|"--Classpath=\""
operator|+
name|existHome
operator|.
name|resolve
argument_list|(
literal|"lib"
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
operator|+
literal|"/*\""
argument_list|,
literal|"--JvmMs="
operator|+
name|minMemory
argument_list|,
literal|"--StartMode=jvm"
argument_list|,
literal|"--StartClass=org.exist.service.ExistDbDaemon"
argument_list|,
literal|"--StartMethod=start"
argument_list|,
literal|"--StopMode=jvm"
argument_list|,
literal|"--StopClass=org.exist.service.ExistDbDaemon"
argument_list|,
literal|"--StopMethod=stop"
argument_list|,
literal|"--JvmOptions=\""
operator|+
name|jvmOptions
operator|+
literal|"\""
argument_list|,
literal|"--StartParams=\""
operator|+
name|configFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"\""
argument_list|)
decl_stmt|;
name|maxMemory
operator|.
name|ifPresent
argument_list|(
name|xmx
lambda|->
name|args
operator|.
name|add
argument_list|(
literal|"--JvmMx="
operator|+
name|xmx
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Tuple2
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|execResult
init|=
name|run
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|exitCode
init|=
name|execResult
operator|.
name|_1
decl_stmt|;
specifier|final
name|String
name|result
init|=
name|execResult
operator|.
name|_2
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not install service, exitCode={}, output='{}'"
argument_list|,
name|exitCode
argument_list|,
name|result
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not install service, exitCode="
operator|+
name|exitCode
operator|+
literal|", output='"
operator|+
name|result
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not install service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not install service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
parameter_list|<
name|T
parameter_list|>
name|List
argument_list|<
name|T
argument_list|>
name|newList
parameter_list|(
specifier|final
name|T
modifier|...
name|items
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|T
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|items
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|T
name|item
range|:
name|items
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isInstalled
parameter_list|()
block|{
try|try
block|{
return|return
name|getState
argument_list|()
operator|!=
name|WindowsServiceState
operator|.
name|UNINSTALLED
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ServiceManagerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not determine if service is installed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|uninstall
parameter_list|()
throws|throws
name|ServiceManagerException
block|{
if|if
condition|(
name|getState
argument_list|()
operator|==
name|WindowsServiceState
operator|.
name|UNINSTALLED
condition|)
block|{
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Service is already uninstalled"
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|exe
init|=
name|prunsrvExe
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|exe
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"delete"
argument_list|,
name|SERVICE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Tuple2
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|execResult
init|=
name|run
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|exitCode
init|=
name|execResult
operator|.
name|_1
decl_stmt|;
specifier|final
name|String
name|result
init|=
name|execResult
operator|.
name|_2
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not uninstall service, exitCode={}, output='{}'"
argument_list|,
name|exitCode
argument_list|,
name|result
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not uninstall service, exitCode="
operator|+
name|exitCode
operator|+
literal|", output='"
operator|+
name|result
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not uninstall service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not uninstall service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|ServiceManagerException
block|{
specifier|final
name|WindowsServiceState
name|state
init|=
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|WindowsServiceState
operator|.
name|RUNNING
operator|||
name|state
operator|==
name|WindowsServiceState
operator|.
name|PAUSED
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|state
operator|==
name|WindowsServiceState
operator|.
name|UNINSTALLED
condition|)
block|{
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Cannot start service which is not yet installed"
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|exe
init|=
name|prunsrvExe
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|exe
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"start"
argument_list|,
name|SERVICE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Tuple2
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|execResult
init|=
name|run
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|exitCode
init|=
name|execResult
operator|.
name|_1
decl_stmt|;
specifier|final
name|String
name|result
init|=
name|execResult
operator|.
name|_2
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not start service, exitCode={}, output='{}'"
argument_list|,
name|exitCode
argument_list|,
name|result
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not start service, exitCode="
operator|+
name|exitCode
operator|+
literal|", output='"
operator|+
name|result
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not start service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not start service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRunning
parameter_list|()
block|{
try|try
block|{
return|return
name|getState
argument_list|()
operator|==
name|WindowsServiceState
operator|.
name|RUNNING
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ServiceManagerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not determine if service is running: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|ServiceManagerException
block|{
specifier|final
name|WindowsServiceState
name|state
init|=
name|getState
argument_list|()
decl_stmt|;
if|if
condition|(
name|state
operator|==
name|WindowsServiceState
operator|.
name|UNINSTALLED
condition|)
block|{
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Cannot stop service which is not yet installed"
argument_list|)
throw|;
block|}
if|if
condition|(
name|state
operator|!=
name|WindowsServiceState
operator|.
name|RUNNING
condition|)
block|{
return|return;
block|}
specifier|final
name|Path
name|exe
init|=
name|prunsrvExe
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|exe
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|"stop"
argument_list|,
name|SERVICE_NAME
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Tuple2
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|execResult
init|=
name|run
argument_list|(
name|args
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|final
name|int
name|exitCode
init|=
name|execResult
operator|.
name|_1
decl_stmt|;
specifier|final
name|String
name|result
init|=
name|execResult
operator|.
name|_2
decl_stmt|;
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not stop service, exitCode={}, output='{}'"
argument_list|,
name|exitCode
argument_list|,
name|result
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not stop service, exitCode="
operator|+
name|exitCode
operator|+
literal|", output='"
operator|+
name|result
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not stop service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not stop service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|showNativeServiceManagementConsole
parameter_list|()
throws|throws
name|UnsupportedOperationException
throws|,
name|ServiceManagerException
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|Arrays
operator|.
name|asList
argument_list|(
literal|"cmd.exe"
argument_list|,
literal|"/c"
argument_list|,
literal|"services.msc"
argument_list|)
decl_stmt|;
specifier|final
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|args
argument_list|)
decl_stmt|;
try|try
block|{
name|pb
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Try to find jvm.dll, which should either reside in `bin/client` or `bin/server` below      * JAVA_HOME. Autodetection does not seem to work with OpenJDK-based Java distributions.      *      * @return Path to jvm.dll or empty Optional      */
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|findJvm
parameter_list|()
block|{
specifier|final
name|Path
name|javaHome
init|=
name|Paths
operator|.
name|get
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.home"
argument_list|)
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
decl_stmt|;
name|Path
name|jvm
init|=
name|javaHome
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"client"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"jvm.dll"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|jvm
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|jvm
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
name|jvm
operator|=
name|javaHome
operator|.
name|resolve
argument_list|(
literal|"bin"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"server"
argument_list|)
operator|.
name|resolve
argument_list|(
literal|"jvm.dll"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|jvm
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|jvm
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|private
name|WindowsServiceState
name|getState
parameter_list|()
throws|throws
name|ServiceManagerException
block|{
try|try
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|args
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|SC_EXE
argument_list|,
literal|"query"
argument_list|,
name|SERVICE_NAME
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|execResult
init|=
name|run
argument_list|(
name|args
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|int
name|exitCode
init|=
name|execResult
operator|.
name|_1
decl_stmt|;
specifier|final
name|String
name|result
init|=
name|execResult
operator|.
name|_2
decl_stmt|;
if|if
condition|(
name|exitCode
operator|==
literal|1060
condition|)
block|{
return|return
name|WindowsServiceState
operator|.
name|UNINSTALLED
return|;
block|}
if|if
condition|(
name|exitCode
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not query service status, exitCode="
operator|+
name|exitCode
operator|+
literal|", output='"
operator|+
name|result
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|result
operator|.
name|contains
argument_list|(
literal|"STOPPED"
argument_list|)
condition|)
block|{
return|return
name|WindowsServiceState
operator|.
name|STOPPED
return|;
block|}
if|if
condition|(
name|result
operator|.
name|contains
argument_list|(
literal|"RUNNING"
argument_list|)
condition|)
block|{
return|return
name|WindowsServiceState
operator|.
name|RUNNING
return|;
block|}
if|if
condition|(
name|result
operator|.
name|contains
argument_list|(
literal|"PAUSED"
argument_list|)
condition|)
block|{
return|return
name|WindowsServiceState
operator|.
name|PAUSED
return|;
block|}
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
literal|"Could not determine service status, exitCode="
operator|+
name|exitCode
operator|+
literal|", output='"
operator|+
name|result
operator|+
literal|"'"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|InterruptedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|ServiceManagerException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Tuple2
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|run
parameter_list|(
name|List
argument_list|<
name|String
argument_list|>
name|args
parameter_list|,
specifier|final
name|boolean
name|elevated
parameter_list|)
throws|throws
name|IOException
throws|,
name|InterruptedException
block|{
if|if
condition|(
name|elevated
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|elevatedArgs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|elevatedArgs
operator|.
name|add
argument_list|(
literal|"cmd.exe"
argument_list|)
expr_stmt|;
name|elevatedArgs
operator|.
name|add
argument_list|(
literal|"/c"
argument_list|)
expr_stmt|;
name|elevatedArgs
operator|.
name|addAll
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|args
operator|=
name|elevatedArgs
expr_stmt|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
literal|"Executing: ["
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|args
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|args
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|args
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ProcessBuilder
name|pb
init|=
operator|new
name|ProcessBuilder
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|pb
operator|.
name|directory
argument_list|(
name|existHome
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
name|pb
operator|.
name|redirectErrorStream
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|Process
name|process
init|=
name|pb
operator|.
name|start
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|output
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
name|process
operator|.
name|getInputStream
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|output
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|int
name|exitValue
init|=
name|process
operator|.
name|waitFor
argument_list|()
decl_stmt|;
return|return
name|Tuple
argument_list|(
name|exitValue
argument_list|,
name|output
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

