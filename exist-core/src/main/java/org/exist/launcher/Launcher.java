begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2012-2015 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|launcher
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|SystemUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|jetty
operator|.
name|JettyStart
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|repo
operator|.
name|ExistRepository
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Main
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SystemExitCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|imageio
operator|.
name|ImageIO
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|swing
operator|.
name|Timer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|event
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|awt
operator|.
name|image
operator|.
name|BufferedImage
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ThreadUtils
operator|.
name|newGlobalThread
import|;
end_import

begin_comment
comment|/**  * A launcher for the eXist-db server integrated with the desktop.  * Shows a splash screen during startup and registers a tray icon  * in the system bar.  *  * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
class|class
name|Launcher
extends|extends
name|Observable
implements|implements
name|Observer
block|{
specifier|private
name|MenuItem
name|stopItem
decl_stmt|;
specifier|private
name|MenuItem
name|startItem
decl_stmt|;
specifier|private
name|MenuItem
name|dashboardItem
decl_stmt|;
specifier|private
name|MenuItem
name|eXideItem
decl_stmt|;
specifier|private
name|MenuItem
name|monexItem
decl_stmt|;
specifier|private
name|MenuItem
name|installServiceItem
decl_stmt|;
specifier|private
name|MenuItem
name|uninstallServiceItem
decl_stmt|;
specifier|private
name|MenuItem
name|quitItem
decl_stmt|;
specifier|static
specifier|final
name|String
name|PACKAGE_DASHBOARD
init|=
literal|"http://exist-db.org/apps/dashboard"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PACKAGE_EXIDE
init|=
literal|"http://exist-db.org/apps/eXide"
decl_stmt|;
specifier|static
specifier|final
name|String
name|PACKAGE_MONEX
init|=
literal|"http://exist-db.org/apps/monex"
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|String
name|os
init|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"os.name"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
comment|// Switch to native look and feel except for Linux (ugly)
if|if
condition|(
operator|!
literal|"Linux"
operator|.
name|equals
argument_list|(
name|os
argument_list|)
condition|)
block|{
specifier|final
name|String
name|nativeLF
init|=
name|UIManager
operator|.
name|getSystemLookAndFeelClassName
argument_list|()
decl_stmt|;
try|try
block|{
name|UIManager
operator|.
name|setLookAndFeel
argument_list|(
name|nativeLF
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
comment|// can be safely ignored
block|}
block|}
comment|/* Turn off metal's use of bold fonts */
comment|//UIManager.put("swing.boldMetal", Boolean.FALSE);
comment|//Schedule a job for the event-dispatching thread:
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
operator|new
name|Launcher
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|final
name|ReentrantLock
name|serviceLock
init|=
operator|new
name|ReentrantLock
argument_list|()
decl_stmt|;
comment|/**      * ServiceManager will be null if there is no service      * manager for the current platform      */
annotation|@
name|Nullable
specifier|private
specifier|final
name|ServiceManager
name|serviceManager
decl_stmt|;
annotation|@
name|Nullable
specifier|private
specifier|final
name|SystemTray
name|tray
decl_stmt|;
specifier|private
name|TrayIcon
name|trayIcon
init|=
literal|null
decl_stmt|;
specifier|private
name|SplashScreen
name|splash
decl_stmt|;
specifier|private
specifier|final
name|Path
name|jettyConfig
decl_stmt|;
specifier|private
name|Optional
argument_list|<
name|JettyStart
argument_list|>
name|jetty
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
specifier|private
name|UtilityPanel
name|utilityPanel
decl_stmt|;
specifier|private
name|ConfigurationDialog
name|configDialog
decl_stmt|;
specifier|private
name|boolean
name|isInstallingService
init|=
literal|false
decl_stmt|;
name|Launcher
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|SystemTray
operator|.
name|isSupported
argument_list|()
condition|)
block|{
name|this
operator|.
name|tray
operator|=
name|SystemTray
operator|.
name|getSystemTray
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|tray
operator|=
literal|null
expr_stmt|;
block|}
name|captureConsole
argument_list|()
expr_stmt|;
comment|// try and figure out exist home dir
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|existHomeDir
init|=
name|getFromSysPropOrEnv
argument_list|(
name|Main
operator|.
name|PROP_EXIST_HOME
argument_list|,
name|Main
operator|.
name|ENV_EXIST_HOME
argument_list|)
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
decl_stmt|;
name|this
operator|.
name|jettyConfig
operator|=
name|getJettyConfig
argument_list|(
name|existHomeDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|serviceManager
operator|=
name|ServiceManagerFactory
operator|.
name|getServiceManager
argument_list|()
expr_stmt|;
specifier|final
name|boolean
name|initSystemTray
init|=
name|tray
operator|!=
literal|null
operator|&&
name|initSystemTray
argument_list|()
decl_stmt|;
if|if
condition|(
name|serviceManager
operator|!=
literal|null
condition|)
block|{
name|updateGuiServiceState
argument_list|()
expr_stmt|;
block|}
name|this
operator|.
name|configDialog
operator|=
operator|new
name|ConfigurationDialog
argument_list|(
name|this
operator|::
name|shutdown
argument_list|)
expr_stmt|;
name|this
operator|.
name|splash
operator|=
operator|new
name|SplashScreen
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|splash
operator|.
name|addWindowListener
argument_list|(
operator|new
name|WindowAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|windowOpened
parameter_list|(
name|WindowEvent
name|windowEvent
parameter_list|)
block|{
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|serviceManager
operator|!=
literal|null
operator|&&
name|serviceManager
operator|.
name|isInstalled
argument_list|()
condition|)
block|{
name|splash
operator|.
name|setStatus
argument_list|(
literal|"eXist-db is already installed as service! Attaching to it ..."
argument_list|)
expr_stmt|;
specifier|final
name|Timer
name|timer
init|=
operator|new
name|Timer
argument_list|(
literal|3000
argument_list|,
parameter_list|(
name|event
parameter_list|)
lambda|->
name|splash
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
argument_list|)
decl_stmt|;
name|timer
operator|.
name|setRepeats
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|ConfigurationUtility
operator|.
name|isFirstStart
argument_list|()
condition|)
block|{
name|splash
operator|.
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|configDialog
operator|.
name|open
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|configDialog
operator|.
name|requestFocus
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|startJetty
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
specifier|final
name|boolean
name|systemTrayReady
init|=
name|initSystemTray
operator|&&
name|tray
operator|.
name|getTrayIcons
argument_list|()
operator|.
name|length
operator|>
literal|0
decl_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
name|utilityPanel
operator|=
operator|new
name|UtilityPanel
argument_list|(
name|Launcher
operator|.
name|this
argument_list|,
name|tray
operator|!=
literal|null
argument_list|,
name|systemTrayReady
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|startJetty
parameter_list|()
block|{
specifier|final
name|Runnable
name|runnable
init|=
parameter_list|()
lambda|->
block|{
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|jetty
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|jetty
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|JettyStart
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
index|[]
name|args
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|explicitExistConfigPath
init|=
name|ConfigurationHelper
operator|.
name|getFromSystemProperty
argument_list|()
decl_stmt|;
if|if
condition|(
name|explicitExistConfigPath
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|args
operator|=
operator|new
name|String
index|[]
block|{
name|jettyConfig
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|,
name|explicitExistConfigPath
operator|.
name|get
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|}
empty_stmt|;
block|}
else|else
block|{
name|args
operator|=
operator|new
name|String
index|[]
block|{
name|jettyConfig
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|}
empty_stmt|;
block|}
name|jetty
operator|.
name|get
argument_list|()
operator|.
name|run
argument_list|(
name|args
argument_list|,
name|splash
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|showMessageAndExit
argument_list|(
literal|"Error Occurred"
argument_list|,
literal|"An error occurred during eXist-db startup. Please check console output and logs."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|SystemExitCodes
operator|.
name|CATCH_ALL_GENERAL_ERROR_EXIT_CODE
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
decl_stmt|;
name|newGlobalThread
argument_list|(
literal|"launcher.startJetty"
argument_list|,
name|runnable
argument_list|)
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|private
name|boolean
name|initSystemTray
parameter_list|()
block|{
if|if
condition|(
name|tray
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Dimension
name|iconDim
init|=
name|tray
operator|.
name|getTrayIconSize
argument_list|()
decl_stmt|;
name|BufferedImage
name|image
init|=
literal|null
decl_stmt|;
try|try
block|{
name|image
operator|=
name|ImageIO
operator|.
name|read
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
literal|"icon32.png"
argument_list|)
argument_list|)
expr_stmt|;
name|trayIcon
operator|=
operator|new
name|TrayIcon
argument_list|(
name|image
operator|.
name|getScaledInstance
argument_list|(
name|iconDim
operator|.
name|width
argument_list|,
name|iconDim
operator|.
name|height
argument_list|,
name|Image
operator|.
name|SCALE_SMOOTH
argument_list|)
argument_list|,
literal|"eXist-db Launcher"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|showMessageAndExit
argument_list|(
literal|"Launcher failed"
argument_list|,
literal|"Failed to read system tray icon."
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|final
name|JDialog
name|hiddenFrame
init|=
operator|new
name|JDialog
argument_list|()
decl_stmt|;
name|hiddenFrame
operator|.
name|setUndecorated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hiddenFrame
operator|.
name|setIconImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
specifier|final
name|PopupMenu
name|popup
init|=
name|createMenu
argument_list|()
decl_stmt|;
name|trayIcon
operator|.
name|setPopupMenu
argument_list|(
name|popup
argument_list|)
expr_stmt|;
name|trayIcon
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|showTrayInfoMessage
argument_list|(
literal|"Right click for menu"
argument_list|)
argument_list|)
expr_stmt|;
comment|// add listener for left click on system tray icon. doesn't work well on linux though.
if|if
condition|(
operator|!
name|SystemUtils
operator|.
name|IS_OS_LINUX
condition|)
block|{
name|trayIcon
operator|.
name|addMouseListener
argument_list|(
operator|new
name|MouseAdapter
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|mouseClicked
parameter_list|(
name|MouseEvent
name|mouseEvent
parameter_list|)
block|{
if|if
condition|(
name|mouseEvent
operator|.
name|getButton
argument_list|()
operator|==
name|MouseEvent
operator|.
name|BUTTON1
condition|)
block|{
name|hiddenFrame
operator|.
name|add
argument_list|(
name|popup
argument_list|)
expr_stmt|;
name|popup
operator|.
name|show
argument_list|(
name|hiddenFrame
argument_list|,
name|mouseEvent
operator|.
name|getXOnScreen
argument_list|()
argument_list|,
name|mouseEvent
operator|.
name|getYOnScreen
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|hiddenFrame
operator|.
name|setResizable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|hiddenFrame
operator|.
name|pack
argument_list|()
expr_stmt|;
name|hiddenFrame
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|tray
operator|.
name|add
argument_list|(
name|trayIcon
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|AWTException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|PopupMenu
name|createMenu
parameter_list|()
block|{
specifier|final
name|PopupMenu
name|popup
init|=
operator|new
name|PopupMenu
argument_list|()
decl_stmt|;
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|startItem
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Start server"
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|startItem
argument_list|)
expr_stmt|;
name|startItem
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|serviceManager
operator|!=
literal|null
operator|&&
name|serviceManager
operator|.
name|isInstalled
argument_list|()
condition|)
block|{
name|showTrayInfoMessage
argument_list|(
literal|"Starting the eXist-db service. Please wait..."
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|updateGuiServiceState
argument_list|()
expr_stmt|;
name|showTrayInfoMessage
argument_list|(
literal|"eXist-db service started"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ServiceManagerException
name|e
parameter_list|)
block|{
name|showTrayErrorMessage
argument_list|(
literal|"Starting eXist-db service failed"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Failed to start service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Starting Service Failed"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|jetty
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|jetty
operator|.
name|ifPresent
argument_list|(
name|server
lambda|->
block|{
if|if
condition|(
name|server
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|showTrayWarningMessage
argument_list|(
literal|"Server already started"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|server
operator|.
name|run
argument_list|(
operator|new
name|String
index|[]
block|{
name|jettyConfig
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
block|}
operator|,
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|server
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|showTrayInfoMessage
argument_list|(
literal|"eXist-db server running on port "
operator|+
name|server
operator|.
name|getPrimaryPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|updateGuiServiceState
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|startJetty
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_class

begin_empty_stmt
unit|)
empty_stmt|;
end_empty_stmt

begin_expr_stmt
name|stopItem
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Stop server"
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|popup
operator|.
name|add
argument_list|(
name|stopItem
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|stopItem
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|jetty
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|jetty
operator|.
name|get
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|updateGuiServiceState
argument_list|()
expr_stmt|;
name|showTrayInfoMessage
argument_list|(
literal|"eXist-db stopped"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|serviceManager
operator|!=
literal|null
operator|&&
name|serviceManager
operator|.
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
name|serviceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|updateGuiServiceState
argument_list|()
expr_stmt|;
name|showTrayInfoMessage
argument_list|(
literal|"eXist-db service stopped"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ServiceManagerException
name|e
parameter_list|)
block|{
name|showTrayErrorMessage
argument_list|(
literal|"Stopping eXist-db service failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Failed to stop service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Stopping Service Failed"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|MenuItem
name|configItem
init|=
operator|new
name|MenuItem
argument_list|(
literal|"System Configuration"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|popup
operator|.
name|add
argument_list|(
name|configItem
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|configItem
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|EventQueue
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|configDialog
operator|.
name|open
argument_list|(
literal|false
argument_list|)
argument_list|;
name|configDialog
operator|.
name|toFront
argument_list|()
argument_list|;
name|configDialog
operator|.
name|repaint
argument_list|()
argument_list|;
name|configDialog
operator|.
name|requestFocus
argument_list|()
argument_list|;
end_expr_stmt

begin_empty_stmt
unit|}))
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|final
name|String
name|requiresRootMsg
decl_stmt|;
end_decl_stmt

begin_if_stmt
if|if
condition|(
name|serviceManager
operator|!=
literal|null
condition|)
block|{
name|requiresRootMsg
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|requiresRootMsg
operator|=
literal|" (requires root)"
expr_stmt|;
block|}
end_if_stmt

begin_expr_stmt
name|installServiceItem
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Install as service"
operator|+
name|requiresRootMsg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|popup
operator|.
name|add
argument_list|(
name|installServiceItem
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|installServiceItem
operator|.
name|setEnabled
argument_list|(
name|serviceManager
operator|!=
literal|null
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|installServiceItem
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|this
operator|::
name|installService
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|uninstallServiceItem
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Uninstall service"
operator|+
name|requiresRootMsg
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|popup
operator|.
name|add
argument_list|(
name|uninstallServiceItem
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|uninstallServiceItem
operator|.
name|setEnabled
argument_list|(
name|serviceManager
operator|!=
literal|null
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|uninstallServiceItem
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|this
operator|::
name|uninstallService
argument_list|)
argument_list|)
expr_stmt|;
end_expr_stmt

begin_if_stmt
if|if
condition|(
name|SystemUtils
operator|.
name|IS_OS_WINDOWS
condition|)
block|{
specifier|final
name|MenuItem
name|showServices
init|=
operator|new
name|MenuItem
argument_list|(
literal|"Show services console"
argument_list|)
decl_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|showServices
argument_list|)
expr_stmt|;
name|showServices
operator|.
name|addActionListener
argument_list|(
name|e
lambda|->
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|this
operator|::
name|showNativeServiceManagementConsole
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_if_stmt

begin_expr_stmt
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
end_expr_stmt

begin_decl_stmt
specifier|final
name|MenuItem
name|toolbar
init|=
operator|new
name|MenuItem
argument_list|(
literal|"Show tool window"
argument_list|)
decl_stmt|;
end_decl_stmt

begin_expr_stmt
name|popup
operator|.
name|add
argument_list|(
name|toolbar
argument_list|)
expr_stmt|;
end_expr_stmt

begin_expr_stmt
name|toolbar
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|EventQueue
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|utilityPanel
operator|.
name|toFront
argument_list|()
argument_list|;
name|utilityPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
argument_list|;
end_expr_stmt

begin_empty_stmt
unit|}))
empty_stmt|;
end_empty_stmt

begin_decl_stmt
name|MenuItem
name|item
decl_stmt|;
end_decl_stmt

begin_if_stmt
if|if
condition|(
name|Desktop
operator|.
name|isDesktopSupported
argument_list|()
condition|)
block|{
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
specifier|final
name|Desktop
name|desktop
init|=
name|Desktop
operator|.
name|getDesktop
argument_list|()
decl_stmt|;
if|if
condition|(
name|desktop
operator|.
name|isSupported
argument_list|(
name|Desktop
operator|.
name|Action
operator|.
name|BROWSE
argument_list|)
condition|)
block|{
name|dashboardItem
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Open Dashboard"
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|dashboardItem
argument_list|)
expr_stmt|;
name|dashboardItem
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|dashboard
argument_list|(
name|desktop
argument_list|)
argument_list|)
expr_stmt|;
name|eXideItem
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Open eXide"
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|eXideItem
argument_list|)
expr_stmt|;
name|eXideItem
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|eXide
argument_list|(
name|desktop
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Open Java Admin Client"
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|item
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|client
argument_list|()
argument_list|)
expr_stmt|;
name|monexItem
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Open Monitoring and Profiling"
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|monexItem
argument_list|)
expr_stmt|;
name|monexItem
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
name|monex
argument_list|(
name|desktop
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|desktop
operator|.
name|isSupported
argument_list|(
name|Desktop
operator|.
name|Action
operator|.
name|OPEN
argument_list|)
condition|)
block|{
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|item
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Open exist.log"
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|item
operator|.
name|addActionListener
argument_list|(
operator|new
name|LogActionListener
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|popup
operator|.
name|addSeparator
argument_list|()
expr_stmt|;
name|quitItem
operator|=
operator|new
name|MenuItem
argument_list|(
literal|"Quit"
argument_list|)
expr_stmt|;
name|popup
operator|.
name|add
argument_list|(
name|quitItem
argument_list|)
expr_stmt|;
name|quitItem
operator|.
name|addActionListener
argument_list|(
name|actionEvent
lambda|->
block|{
if|if
condition|(
name|serviceManager
operator|!=
literal|null
operator|&&
name|serviceManager
operator|.
name|isInstalled
argument_list|()
condition|)
block|{
if|if
condition|(
name|tray
operator|!=
literal|null
condition|)
block|{
name|tray
operator|.
name|remove
argument_list|(
name|trayIcon
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|exit
argument_list|(
name|SystemExitCodes
operator|.
name|OK_EXIT_CODE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|shutdown
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_if_stmt

begin_block
unit|} finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
end_block

begin_return
return|return
name|popup
return|;
end_return

begin_function
unit|}      private
name|void
name|installService
parameter_list|()
block|{
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|jetty
operator|.
name|ifPresent
argument_list|(
name|server
lambda|->
block|{
if|if
condition|(
name|server
operator|.
name|isStarted
argument_list|()
condition|)
block|{
name|showTrayInfoMessage
argument_list|(
literal|"Stopping eXist-db..."
argument_list|)
expr_stmt|;
name|server
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
name|jetty
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
if|if
condition|(
name|serviceManager
operator|==
literal|null
condition|)
block|{
name|showTrayWarningMessage
argument_list|(
literal|"It is not possible to use Service installation on this platform"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|showTrayInfoMessage
argument_list|(
literal|"Installing service and starting eXist-db..."
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceManager
operator|.
name|install
argument_list|()
expr_stmt|;
name|updateGuiServiceState
argument_list|()
expr_stmt|;
name|showTrayInfoMessage
argument_list|(
literal|"Service installed and started"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ServiceManagerException
name|e
parameter_list|)
block|{
name|showTrayErrorMessage
argument_list|(
literal|"Failed to install service."
argument_list|,
literal|"Failed to install service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Failed to install service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Install Service Failed"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
name|isInstallingService
operator|=
literal|false
expr_stmt|;
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|uninstallService
parameter_list|()
block|{
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|serviceManager
operator|==
literal|null
condition|)
block|{
name|showTrayWarningMessage
argument_list|(
literal|"It is not possible to use Service uninstallation on this platform"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|showTrayInfoMessage
argument_list|(
literal|"Uninstalling service..."
argument_list|)
expr_stmt|;
try|try
block|{
name|serviceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|serviceManager
operator|.
name|uninstall
argument_list|()
expr_stmt|;
name|updateGuiServiceState
argument_list|()
expr_stmt|;
name|showTrayInfoMessage
argument_list|(
literal|"Service stopped and uninstalled"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ServiceManagerException
name|e
parameter_list|)
block|{
name|showTrayErrorMessage
argument_list|(
literal|"Failed to uninstall service."
argument_list|,
literal|"Failed to uninstall service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Failed to uninstall service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Uninstalling Service Failed"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|showNativeServiceManagementConsole
parameter_list|()
block|{
if|if
condition|(
name|serviceManager
operator|==
literal|null
condition|)
block|{
name|showTrayWarningMessage
argument_list|(
literal|"It is not possible to use Service Management on this platform"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|serviceManager
operator|.
name|showNativeServiceManagementConsole
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnsupportedOperationException
decl||
name|ServiceManagerException
name|e
parameter_list|)
block|{
name|showTrayErrorMessage
argument_list|(
literal|"Failed to open Service Management Console"
argument_list|,
literal|"Failed to open Service Management Console: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|updateGuiServiceState
parameter_list|()
block|{
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|boolean
name|serverRunning
decl_stmt|;
if|if
condition|(
name|serviceManager
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|serviceManager
operator|.
name|isInstalled
argument_list|()
condition|)
block|{
name|installServiceItem
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|uninstallServiceItem
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|installServiceItem
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|uninstallServiceItem
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|serverRunning
operator|=
name|serviceManager
operator|.
name|isRunning
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|serverRunning
operator|=
name|jetty
operator|.
name|isPresent
argument_list|()
operator|&&
name|jetty
operator|.
name|get
argument_list|()
operator|.
name|isStarted
argument_list|()
expr_stmt|;
block|}
name|quitItem
operator|.
name|setLabel
argument_list|(
name|serverRunning
condition|?
literal|"Quit (and stop server)"
else|:
literal|"Quit"
argument_list|)
expr_stmt|;
name|stopItem
operator|.
name|setEnabled
argument_list|(
name|serverRunning
argument_list|)
expr_stmt|;
name|startItem
operator|.
name|setEnabled
argument_list|(
operator|!
name|serverRunning
argument_list|)
expr_stmt|;
if|if
condition|(
name|dashboardItem
operator|!=
literal|null
condition|)
block|{
name|dashboardItem
operator|.
name|setEnabled
argument_list|(
name|serverRunning
argument_list|)
expr_stmt|;
name|monexItem
operator|.
name|setEnabled
argument_list|(
name|serverRunning
argument_list|)
expr_stmt|;
name|eXideItem
operator|.
name|setEnabled
argument_list|(
name|serverRunning
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|shutdown
parameter_list|(
specifier|final
name|boolean
name|restart
parameter_list|)
block|{
name|utilityPanel
operator|.
name|setStatus
argument_list|(
literal|"Shutting down ..."
argument_list|)
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|serviceManager
operator|!=
literal|null
operator|&&
name|serviceManager
operator|.
name|isRunning
argument_list|()
condition|)
block|{
try|try
block|{
name|serviceManager
operator|.
name|stop
argument_list|()
expr_stmt|;
name|showTrayInfoMessage
argument_list|(
literal|"Database stopped"
argument_list|)
expr_stmt|;
if|if
condition|(
name|restart
condition|)
block|{
try|try
block|{
name|serviceManager
operator|.
name|start
argument_list|()
expr_stmt|;
name|showTrayInfoMessage
argument_list|(
literal|"Database started"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ServiceManagerException
name|e
parameter_list|)
block|{
name|showTrayErrorMessage
argument_list|(
literal|"Failed to start. Please start service manually: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Failed to start service. "
argument_list|,
literal|"Starting Service Failed"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
name|updateGuiServiceState
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ServiceManagerException
name|e
parameter_list|)
block|{
name|showTrayErrorMessage
argument_list|(
literal|"Failed to stop. Please stop service manually: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
literal|null
argument_list|,
literal|"Failed to stop service: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
literal|"Stopping Service Failed"
argument_list|,
name|JOptionPane
operator|.
name|ERROR_MESSAGE
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|tray
operator|!=
literal|null
condition|)
block|{
name|tray
operator|.
name|remove
argument_list|(
name|trayIcon
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|jetty
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|jetty
operator|.
name|get
argument_list|()
operator|.
name|shutdown
argument_list|()
expr_stmt|;
if|if
condition|(
name|restart
condition|)
block|{
specifier|final
name|LauncherWrapper
name|wrapper
init|=
operator|new
name|LauncherWrapper
argument_list|(
name|Launcher
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|launch
argument_list|()
expr_stmt|;
block|}
block|}
name|System
operator|.
name|exit
argument_list|(
name|SystemExitCodes
operator|.
name|OK_EXIT_CODE
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|dashboard
parameter_list|(
specifier|final
name|Desktop
name|desktop
parameter_list|)
block|{
name|utilityPanel
operator|.
name|setStatus
argument_list|(
literal|"Opening dashboard in browser ..."
argument_list|)
expr_stmt|;
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|URI
name|uri
init|=
name|getAppUri
argument_list|(
literal|"dashboard"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|openAppInBrowser
argument_list|(
name|desktop
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|eXide
parameter_list|(
specifier|final
name|Desktop
name|desktop
parameter_list|)
block|{
name|utilityPanel
operator|.
name|setStatus
argument_list|(
literal|"Opening eXide in browser ..."
argument_list|)
expr_stmt|;
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|URI
name|uri
init|=
name|getAppUri
argument_list|(
literal|"eXide"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|openAppInBrowser
argument_list|(
name|desktop
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|monex
parameter_list|(
specifier|final
name|Desktop
name|desktop
parameter_list|)
block|{
name|utilityPanel
operator|.
name|setStatus
argument_list|(
literal|"Opening Monitoring and Profiling in browser ..."
argument_list|)
expr_stmt|;
name|serviceLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|URI
name|uri
init|=
name|getAppUri
argument_list|(
literal|"monex"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
block|{
name|openAppInBrowser
argument_list|(
name|desktop
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|serviceLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|openAppInBrowser
parameter_list|(
specifier|final
name|Desktop
name|desktop
parameter_list|,
specifier|final
name|URI
name|uri
parameter_list|)
block|{
try|try
block|{
name|desktop
operator|.
name|browse
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|showTrayWarningMessage
argument_list|(
literal|"Failed to open URL: "
operator|+
name|uri
operator|.
name|toString
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|utilityPanel
operator|.
name|setStatus
argument_list|(
literal|"Unable to launch browser"
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
annotation|@
name|Nullable
name|URI
name|getAppUri
parameter_list|(
specifier|final
name|String
name|appTarget
parameter_list|)
block|{
specifier|final
name|int
name|port
init|=
name|jetty
operator|.
name|map
argument_list|(
name|JettyStart
operator|::
name|getPrimaryPort
argument_list|)
operator|.
name|orElse
argument_list|(
literal|8080
argument_list|)
decl_stmt|;
specifier|final
name|String
name|url
init|=
literal|"http://localhost:"
operator|+
name|port
operator|+
literal|"/exist/apps/"
operator|+
name|appTarget
operator|+
literal|"/"
decl_stmt|;
try|try
block|{
return|return
operator|new
name|URI
argument_list|(
name|url
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|showTrayWarningMessage
argument_list|(
literal|"Failed to open URL: "
operator|+
name|url
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|utilityPanel
operator|.
name|setStatus
argument_list|(
literal|"Unable to launch browser"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_function

begin_function
name|void
name|client
parameter_list|()
block|{
specifier|final
name|LauncherWrapper
name|wrapper
init|=
operator|new
name|LauncherWrapper
argument_list|(
literal|"client"
argument_list|)
decl_stmt|;
name|wrapper
operator|.
name|launch
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
name|void
name|signalStarted
parameter_list|()
block|{
if|if
condition|(
name|tray
operator|!=
literal|null
condition|)
block|{
name|startItem
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|stopItem
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|checkInstalledApps
argument_list|()
expr_stmt|;
name|registerObserver
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|SystemUtils
operator|.
name|IS_OS_WINDOWS
operator|&&
operator|!
name|isInstallingService
operator|&&
name|serviceManager
operator|!=
literal|null
operator|&&
operator|!
name|serviceManager
operator|.
name|isInstalled
argument_list|()
condition|)
block|{
name|isInstallingService
operator|=
literal|true
expr_stmt|;
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
parameter_list|()
lambda|->
block|{
if|if
condition|(
name|JOptionPane
operator|.
name|showConfirmDialog
argument_list|(
name|splash
argument_list|,
literal|"It is recommended to run eXist-db as a service on "
operator|+
literal|"Windows.\nNot doing so may lead to data loss if you shut down the computer before "
operator|+
literal|"eXist-db.\n\nWould you like to install the service?"
argument_list|,
literal|"Install as Service?"
argument_list|,
name|JOptionPane
operator|.
name|YES_NO_OPTION
argument_list|,
name|JOptionPane
operator|.
name|QUESTION_MESSAGE
argument_list|)
operator|==
name|JOptionPane
operator|.
name|YES_OPTION
condition|)
block|{
name|SwingUtilities
operator|.
name|invokeLater
argument_list|(
name|this
operator|::
name|installService
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
name|void
name|signalShutdown
parameter_list|()
block|{
if|if
condition|(
name|tray
operator|!=
literal|null
condition|)
block|{
name|trayIcon
operator|.
name|setToolTip
argument_list|(
literal|"eXist-db server stopped"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isInstallingService
condition|)
block|{
name|startItem
operator|.
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|stopItem
operator|.
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|checkInstalledApps
parameter_list|()
block|{
try|try
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|pkgs
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
literal|"repo:list()"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|pkgs
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|ExistRepository
operator|.
name|Notification
name|notification
init|=
operator|new
name|ExistRepository
operator|.
name|Notification
argument_list|(
name|ExistRepository
operator|.
name|Action
operator|.
name|INSTALL
argument_list|,
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|expathRepo
init|=
name|pool
operator|.
name|getExpathRepo
argument_list|()
decl_stmt|;
if|if
condition|(
name|expathRepo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|update
argument_list|(
name|expathRepo
operator|.
name|get
argument_list|()
argument_list|,
name|notification
argument_list|)
expr_stmt|;
name|utilityPanel
operator|.
name|update
argument_list|(
name|expathRepo
operator|.
name|get
argument_list|()
argument_list|,
name|notification
argument_list|)
expr_stmt|;
block|}
name|expathRepo
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|EXistException
argument_list|(
literal|"EXPath repository is not available."
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
decl||
name|XPathException
decl||
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to check installed packages: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|registerObserver
parameter_list|()
block|{
try|try
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|repo
init|=
name|pool
operator|.
name|getExpathRepo
argument_list|()
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|repo
operator|.
name|get
argument_list|()
operator|.
name|addObserver
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|repo
operator|.
name|get
argument_list|()
operator|.
name|addObserver
argument_list|(
name|utilityPanel
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"EXPath repository is not available."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Failed to register as observer for package manager events"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
end_function

begin_function
annotation|@
name|Override
specifier|public
name|void
name|update
parameter_list|(
specifier|final
name|Observable
name|observable
parameter_list|,
specifier|final
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|ExistRepository
operator|.
name|Notification
name|notification
init|=
operator|(
name|ExistRepository
operator|.
name|Notification
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|notification
operator|.
name|getPackageURI
argument_list|()
operator|.
name|equals
argument_list|(
name|PACKAGE_DASHBOARD
argument_list|)
operator|&&
name|dashboardItem
operator|!=
literal|null
condition|)
block|{
name|dashboardItem
operator|.
name|setEnabled
argument_list|(
name|notification
operator|.
name|getAction
argument_list|()
operator|==
name|ExistRepository
operator|.
name|Action
operator|.
name|INSTALL
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|notification
operator|.
name|getPackageURI
argument_list|()
operator|.
name|equals
argument_list|(
name|PACKAGE_EXIDE
argument_list|)
operator|&&
name|eXideItem
operator|!=
literal|null
condition|)
block|{
name|eXideItem
operator|.
name|setEnabled
argument_list|(
name|notification
operator|.
name|getAction
argument_list|()
operator|==
name|ExistRepository
operator|.
name|Action
operator|.
name|INSTALL
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|notification
operator|.
name|getPackageURI
argument_list|()
operator|.
name|equals
argument_list|(
name|PACKAGE_MONEX
argument_list|)
operator|&&
name|monexItem
operator|!=
literal|null
condition|)
block|{
name|monexItem
operator|.
name|setEnabled
argument_list|(
name|notification
operator|.
name|getAction
argument_list|()
operator|==
name|ExistRepository
operator|.
name|Action
operator|.
name|INSTALL
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|Path
name|getJettyConfig
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|existHomeDir
parameter_list|)
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|existJettyConfigFile
init|=
name|getFromSysPropOrEnv
argument_list|(
name|Main
operator|.
name|PROP_EXIST_JETTY_CONFIG
argument_list|,
name|Main
operator|.
name|ENV_EXIST_JETTY_CONFIG
argument_list|)
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|existJettyConfigFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|jettyHomeDir
init|=
name|getFromSysPropOrEnv
argument_list|(
name|Main
operator|.
name|PROP_JETTY_HOME
argument_list|,
name|Main
operator|.
name|ENV_JETTY_HOME
argument_list|)
operator|.
name|map
argument_list|(
name|Paths
operator|::
name|get
argument_list|)
decl_stmt|;
if|if
condition|(
name|jettyHomeDir
operator|.
name|isPresent
argument_list|()
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|jettyHomeDir
operator|.
name|get
argument_list|()
operator|.
name|resolve
argument_list|(
name|Main
operator|.
name|CONFIG_DIR_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|existJettyConfigFile
operator|=
name|jettyHomeDir
operator|.
name|map
argument_list|(
name|f
lambda|->
name|f
operator|.
name|resolve
argument_list|(
name|Main
operator|.
name|CONFIG_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
name|Main
operator|.
name|STANDARD_ENABLED_JETTY_CONFIGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|existHomeDir
operator|.
name|isPresent
argument_list|()
operator|&&
name|Files
operator|.
name|exists
argument_list|(
name|existHomeDir
operator|.
name|get
argument_list|()
operator|.
name|resolve
argument_list|(
name|Main
operator|.
name|CONFIG_DIR_NAME
argument_list|)
argument_list|)
condition|)
block|{
name|existJettyConfigFile
operator|=
name|existHomeDir
operator|.
name|map
argument_list|(
name|f
lambda|->
name|f
operator|.
name|resolve
argument_list|(
name|Main
operator|.
name|CONFIG_DIR_NAME
argument_list|)
operator|.
name|resolve
argument_list|(
name|Main
operator|.
name|STANDARD_ENABLED_JETTY_CONFIGS
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|existJettyConfigFile
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|showMessageAndExit
argument_list|(
literal|"Error Occurred"
argument_list|,
literal|"ERROR: jetty config file could not be found! Make sure to set exist.jetty.config or EXIST_JETTY_CONFIG."
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
name|SystemExitCodes
operator|.
name|CATCH_ALL_GENERAL_ERROR_EXIT_CODE
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|existJettyConfigFile
operator|.
name|get
argument_list|()
return|;
block|}
end_function

begin_function
specifier|private
name|Optional
argument_list|<
name|String
argument_list|>
name|getFromSysPropOrEnv
parameter_list|(
specifier|final
name|String
name|sysPropName
parameter_list|,
specifier|final
name|String
name|envVarName
parameter_list|)
block|{
name|Optional
argument_list|<
name|String
argument_list|>
name|value
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
name|sysPropName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|value
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|value
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|System
operator|.
name|getenv
argument_list|()
operator|.
name|get
argument_list|(
name|envVarName
argument_list|)
argument_list|)
expr_stmt|;
comment|// if we managed to detect from environment, store it in a system property
name|value
operator|.
name|ifPresent
argument_list|(
name|s
lambda|->
name|System
operator|.
name|setProperty
argument_list|(
name|sysPropName
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_function

begin_function
name|void
name|showMessageAndExit
parameter_list|(
specifier|final
name|String
name|title
parameter_list|,
specifier|final
name|String
name|message
parameter_list|,
specifier|final
name|boolean
name|logs
parameter_list|)
block|{
specifier|final
name|JPanel
name|panel
init|=
operator|new
name|JPanel
argument_list|()
decl_stmt|;
name|panel
operator|.
name|setLayout
argument_list|(
operator|new
name|BorderLayout
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|JLabel
name|label
init|=
operator|new
name|JLabel
argument_list|(
name|message
argument_list|)
decl_stmt|;
name|label
operator|.
name|setHorizontalAlignment
argument_list|(
name|SwingConstants
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|label
argument_list|,
name|BorderLayout
operator|.
name|CENTER
argument_list|)
expr_stmt|;
if|if
condition|(
name|logs
condition|)
block|{
specifier|final
name|JButton
name|displayLogs
init|=
operator|new
name|JButton
argument_list|(
literal|"View Log"
argument_list|)
decl_stmt|;
name|displayLogs
operator|.
name|addActionListener
argument_list|(
operator|new
name|LogActionListener
argument_list|()
argument_list|)
expr_stmt|;
name|label
operator|.
name|setHorizontalAlignment
argument_list|(
name|SwingConstants
operator|.
name|CENTER
argument_list|)
expr_stmt|;
name|panel
operator|.
name|add
argument_list|(
name|displayLogs
argument_list|,
name|BorderLayout
operator|.
name|SOUTH
argument_list|)
expr_stmt|;
block|}
name|utilityPanel
operator|.
name|showMessages
argument_list|()
expr_stmt|;
name|utilityPanel
operator|.
name|toFront
argument_list|()
expr_stmt|;
name|utilityPanel
operator|.
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|JOptionPane
operator|.
name|showMessageDialog
argument_list|(
name|splash
argument_list|,
name|panel
argument_list|,
name|title
argument_list|,
name|JOptionPane
operator|.
name|WARNING_MESSAGE
argument_list|)
expr_stmt|;
comment|//System.exit(SystemExitCodes.CATCH_ALL_GENERAL_ERROR_EXIT_CODE);
block|}
end_function

begin_function
specifier|private
name|void
name|showTrayInfoMessage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
name|showTrayInfoMessage
argument_list|(
name|message
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|showTrayInfoMessage
parameter_list|(
specifier|final
name|String
name|caption
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|tray
operator|!=
literal|null
condition|)
block|{
name|trayIcon
operator|.
name|displayMessage
argument_list|(
name|caption
argument_list|,
name|message
argument_list|,
name|TrayIcon
operator|.
name|MessageType
operator|.
name|INFO
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|showTrayWarningMessage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
name|showTrayInfoMessage
argument_list|(
name|message
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|showTrayWarningMessage
parameter_list|(
specifier|final
name|String
name|caption
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|tray
operator|!=
literal|null
condition|)
block|{
name|trayIcon
operator|.
name|displayMessage
argument_list|(
name|caption
argument_list|,
name|message
argument_list|,
name|TrayIcon
operator|.
name|MessageType
operator|.
name|WARNING
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_function
specifier|private
name|void
name|showTrayErrorMessage
parameter_list|(
specifier|final
name|String
name|message
parameter_list|)
block|{
name|showTrayErrorMessage
argument_list|(
name|message
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|showTrayErrorMessage
parameter_list|(
specifier|final
name|String
name|caption
parameter_list|,
specifier|final
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|tray
operator|!=
literal|null
condition|)
block|{
name|trayIcon
operator|.
name|displayMessage
argument_list|(
name|caption
argument_list|,
name|message
argument_list|,
name|TrayIcon
operator|.
name|MessageType
operator|.
name|ERROR
argument_list|)
expr_stmt|;
block|}
block|}
end_function

begin_comment
comment|/**      * Ensure that stdout and stderr messages are also printed      * to the logs.      */
end_comment

begin_function
specifier|private
name|void
name|captureConsole
parameter_list|()
block|{
name|System
operator|.
name|setOut
argument_list|(
name|createLoggingProxy
argument_list|(
name|System
operator|.
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|setErr
argument_list|(
name|createLoggingProxy
argument_list|(
name|System
operator|.
name|err
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|PrintStream
name|createLoggingProxy
parameter_list|(
specifier|final
name|PrintStream
name|realStream
parameter_list|)
block|{
specifier|final
name|OutputStream
name|out
init|=
operator|new
name|OutputStream
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|int
name|i
parameter_list|)
block|{
name|realStream
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
name|Character
operator|.
name|toString
argument_list|(
operator|(
name|char
operator|)
name|i
argument_list|)
decl_stmt|;
name|Launcher
operator|.
name|this
operator|.
name|setChanged
argument_list|()
expr_stmt|;
name|Launcher
operator|.
name|this
operator|.
name|notifyObservers
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|)
throws|throws
name|IOException
block|{
name|realStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|Launcher
operator|.
name|this
operator|.
name|setChanged
argument_list|()
expr_stmt|;
name|Launcher
operator|.
name|this
operator|.
name|notifyObservers
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|byte
index|[]
name|bytes
parameter_list|,
specifier|final
name|int
name|offset
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
block|{
name|realStream
operator|.
name|write
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|)
expr_stmt|;
specifier|final
name|String
name|s
init|=
operator|new
name|String
argument_list|(
name|bytes
argument_list|,
name|offset
argument_list|,
name|len
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|Launcher
operator|.
name|this
operator|.
name|setChanged
argument_list|()
expr_stmt|;
name|Launcher
operator|.
name|this
operator|.
name|notifyObservers
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
decl_stmt|;
return|return
operator|new
name|PrintStream
argument_list|(
name|out
argument_list|)
return|;
block|}
end_function

begin_class
specifier|private
class|class
name|LogActionListener
implements|implements
name|ActionListener
block|{
annotation|@
name|Override
specifier|public
name|void
name|actionPerformed
parameter_list|(
specifier|final
name|ActionEvent
name|actionEvent
parameter_list|)
block|{
if|if
condition|(
operator|!
name|Desktop
operator|.
name|isDesktopSupported
argument_list|()
condition|)
block|{
return|return;
block|}
specifier|final
name|Desktop
name|desktop
init|=
name|Desktop
operator|.
name|getDesktop
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|home
init|=
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|logFile
init|=
name|FileUtils
operator|.
name|resolve
argument_list|(
name|home
argument_list|,
literal|"logs/exist.log"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|logFile
argument_list|)
condition|)
block|{
name|showTrayErrorMessage
argument_list|(
literal|"Log file not found: "
operator|+
name|logFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|desktop
operator|.
name|open
argument_list|(
name|logFile
operator|.
name|toFile
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|showTrayErrorMessage
argument_list|(
literal|"Failed to open log file: "
operator|+
name|logFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|normalize
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|". "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

unit|}
end_unit

