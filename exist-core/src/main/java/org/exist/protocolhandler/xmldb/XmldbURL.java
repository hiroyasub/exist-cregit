begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id: XmldbURL.java 218 2007-04-13 15:06:43Z dizzzz $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|protocolhandler
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_comment
comment|/**  *  A utility class for xmldb URLs. Since, java.net.URL is final this class  * acts as a wrapper, convenience methods have been added.<BR>  *<BR>  * Example:<BR>  *<I>xmldb:exist://username:password@hostname:8080/exist/xmlrpc/db/collection/document.xml</I><BR>  *<BR>  * Note: A collection URL ends with a "/":<BR>  *<I>xmldb:exist://hostname:8080/exist/xmlrpc/db/collection/</I>  *  * @see java.net.URI  * @see java.net.URL  * @see org.exist.xmldb.XmldbURI  *  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|XmldbURL
block|{
specifier|private
specifier|static
specifier|final
name|int
name|USERNAME
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|PASSWORD
init|=
literal|2
decl_stmt|;
specifier|private
name|URL
name|myUrl
decl_stmt|;
comment|/**      * Creates a new instance of XmldbURL using an XmldbURI object.      *      * @param xmldbURI Resource location.      * @throws java.net.MalformedURLException URL is not correct.      */
specifier|public
name|XmldbURL
parameter_list|(
name|XmldbURI
name|xmldbURI
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
argument_list|(
name|xmldbURI
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of XmldbURL using an URL object.      * @param url Resource location.      * @throws java.net.MalformedURLException URL is not correct.      */
specifier|public
name|XmldbURL
parameter_list|(
name|URL
name|url
parameter_list|)
throws|throws
name|MalformedURLException
block|{
comment|// check protocol
if|if
condition|(
literal|"xmldb"
operator|.
name|equals
argument_list|(
name|url
operator|.
name|getProtocol
argument_list|()
argument_list|)
condition|)
block|{
name|myUrl
operator|=
name|url
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"URL is not an \"xmldb:\" URL: "
operator|+
name|url
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
block|}
comment|/**      * Creates a new instance of XmldbURL using an URI object.      *      * @param uri Resource location.      * @throws java.net.MalformedURLException URL is not correct.      */
specifier|public
name|XmldbURL
parameter_list|(
name|URI
name|uri
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
argument_list|(
name|uri
operator|.
name|toURL
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new instance of XmldbURL using an String.      * @param txt Resource location.      * @throws java.net.MalformedURLException URL is not correct.      */
specifier|public
name|XmldbURL
parameter_list|(
name|String
name|txt
parameter_list|)
throws|throws
name|MalformedURLException
block|{
name|this
argument_list|(
operator|new
name|URL
argument_list|(
name|txt
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * xmldb:exist://<B>username:password</B>@hostname:8080/exist/xmlrpc/db/collection/document.xml      * @see java.net.URL#getUserInfo      *      * @return username:password      */
specifier|public
name|String
name|getUserInfo
parameter_list|()
block|{
return|return
name|myUrl
operator|.
name|getUserInfo
argument_list|()
return|;
block|}
comment|/**      * xmldb:exist://<B>username</B>:password@hostname:8080/exist/xmlrpc/db/collection/document.xml      * @return username      */
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|extractCredentials
argument_list|(
name|USERNAME
argument_list|)
return|;
block|}
comment|/**      * xmldb:exist://username:<B>password</B>@hostname:8080/exist/xmlrpc/db/collection/document.xml      * @return password      */
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|extractCredentials
argument_list|(
name|PASSWORD
argument_list|)
return|;
block|}
comment|/**      * @return URL representation of location.      */
specifier|public
name|URL
name|getURL
parameter_list|()
block|{
return|return
name|myUrl
return|;
block|}
comment|/**      * xmldb:exist://<B>username:password@hostname:8080/exist/xmlrpc/db/collection/document.xml</B>?query#fragment      * @see java.net.URL#getAuthority      * @return authority      */
specifier|public
name|String
name|getAuthority
parameter_list|()
block|{
return|return
name|myUrl
operator|.
name|getAuthority
argument_list|()
return|;
block|}
comment|/**      * xmldb:exist://username:password@hostname:8080<B>/exist/xmlrpc</B>/db/collection/document.xml?query#fragment      * @return context, null if not available.      */
specifier|public
name|String
name|getContext
parameter_list|()
block|{
specifier|final
name|String
name|path
init|=
name|myUrl
operator|.
name|getPath
argument_list|()
decl_stmt|;
specifier|final
name|int
name|dbPosition
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|"/db"
argument_list|)
decl_stmt|;
name|String
name|context
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|dbPosition
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// since all paths begin with this pattern..
name|context
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|dbPosition
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|!=
literal|null
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|context
argument_list|)
condition|)
block|{
name|context
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|context
return|;
block|}
comment|// /exist/xmlrpc/db/shakespeare/plays/macbeth.xml
comment|// /exist/xmlrpc/db/shakespeare/plays/
comment|// /db/shakespeare/plays/macbeth.xml
comment|// /db/shakespeare/plays/
comment|/**      * xmldb:exist://username:password@hostname:8080/exist/xmlrpc<B>/db/collection</B>/document.xml      * @return collection      */
specifier|public
name|String
name|getCollection
parameter_list|()
block|{
name|String
name|path
init|=
name|myUrl
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|collectionName
init|=
literal|null
decl_stmt|;
specifier|final
name|int
name|dbLocation
init|=
name|path
operator|.
name|indexOf
argument_list|(
literal|"/db"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dbLocation
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// found pattern "/db"
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// -1 removes the slash
name|collectionName
operator|=
name|path
operator|.
name|substring
argument_list|(
name|dbLocation
argument_list|,
operator|(
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|lastSep
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSep
operator|==
literal|0
condition|)
block|{
name|collectionName
operator|=
literal|"/"
expr_stmt|;
block|}
if|else if
condition|(
name|lastSep
operator|!=
operator|-
literal|1
condition|)
block|{
name|collectionName
operator|=
name|path
operator|.
name|substring
argument_list|(
name|dbLocation
argument_list|,
name|lastSep
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectionName
operator|=
name|path
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// TODO not very well tested
comment|// pattern not found, taking full path
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// -1 removes the slash
name|collectionName
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
operator|(
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|int
name|lastSep
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSep
operator|!=
operator|-
literal|1
condition|)
block|{
name|collectionName
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|lastSep
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collectionName
operator|=
literal|"/"
expr_stmt|;
block|}
block|}
block|}
return|return
name|collectionName
return|;
block|}
comment|/**      * xmldb:exist://username:password@hostname:8080/exist/xmlrpc/db/collection/<B>document.xml</B>      * @return collection      */
specifier|public
name|String
name|getDocumentName
parameter_list|()
block|{
name|String
name|serverPath
init|=
name|myUrl
operator|.
name|getPath
argument_list|()
decl_stmt|;
name|String
name|documentName
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|serverPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
specifier|final
name|int
name|lastSep
init|=
name|serverPath
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastSep
operator|==
operator|-
literal|1
condition|)
block|{
name|documentName
operator|=
name|serverPath
expr_stmt|;
block|}
else|else
block|{
name|documentName
operator|=
name|serverPath
operator|.
name|substring
argument_list|(
name|lastSep
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|documentName
return|;
block|}
comment|// Get username or password
specifier|private
name|String
name|extractCredentials
parameter_list|(
name|int
name|part
parameter_list|)
block|{
name|String
name|userInfo
init|=
name|myUrl
operator|.
name|getUserInfo
argument_list|()
decl_stmt|;
name|String
name|username
init|=
literal|null
decl_stmt|;
name|String
name|password
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userInfo
operator|!=
literal|null
condition|)
block|{
specifier|final
name|int
name|separator
init|=
name|userInfo
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|separator
operator|==
operator|-
literal|1
condition|)
block|{
name|username
operator|=
name|userInfo
expr_stmt|;
name|password
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|username
operator|=
name|userInfo
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|separator
argument_list|)
expr_stmt|;
name|password
operator|=
name|userInfo
operator|.
name|substring
argument_list|(
name|separator
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Fix credentials. If not found (empty string) fill NULL
if|if
condition|(
name|username
operator|!=
literal|null
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|username
argument_list|)
condition|)
block|{
name|username
operator|=
literal|null
expr_stmt|;
block|}
comment|// Fix credentials. If not found (empty string) fill NULL
if|if
condition|(
name|password
operator|!=
literal|null
operator|&&
literal|""
operator|.
name|equals
argument_list|(
name|password
argument_list|)
condition|)
block|{
name|password
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|part
operator|==
name|USERNAME
condition|)
block|{
return|return
name|username
return|;
block|}
if|else if
condition|(
name|part
operator|==
name|PASSWORD
condition|)
block|{
return|return
name|password
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *<B>xmldb</B>:exist://username:password@hostname:8080/exist/xmlrpc/db/collection/document.xml      * @see java.net.URL#getProtocol      * @return protocol      */
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|myUrl
operator|.
name|getProtocol
argument_list|()
return|;
block|}
comment|/**      * xmldb:exist://username:password@<B>hostname</B>:8080/exist/xmlrpc/db/collection/document.xml      * @see java.net.URL#getProtocol      * @return protocol      */
specifier|public
name|String
name|getHost
parameter_list|()
block|{
specifier|final
name|String
name|hostname
init|=
name|myUrl
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|hostname
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
name|hostname
return|;
block|}
block|}
comment|/**      * xmldb:exist://username:password@hostname:<B>8080</B>/exist/xmlrpc/db/collection/document.xml      * @see java.net.URL#getPort      * @return port      */
specifier|public
name|int
name|getPort
parameter_list|()
block|{
return|return
name|myUrl
operator|.
name|getPort
argument_list|()
return|;
block|}
comment|/**      * xmldb:exist://username:password@hostname:8080:<B>/exist/xmlrpc/db/collection/document.xml</B>      * @see java.net.URL#getPath      * @return port      */
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|myUrl
operator|.
name|getPath
argument_list|()
return|;
block|}
comment|/**      * xmldb:exist://username:password@hostname:8080/exist/xmlrpc/db/collection/document.xml?<B>query</B>#fragment      * @see java.net.URL#getQuery      * @return query      */
specifier|public
name|String
name|getQuery
parameter_list|()
block|{
return|return
name|myUrl
operator|.
name|getQuery
argument_list|()
return|;
block|}
comment|/**      * xmldb:exist://username:password@hostname:8080:/exist/xmlrpc<B>/db/collection/document.xml</B>      * @return collectionpath      */
specifier|public
name|String
name|getCollectionPath
parameter_list|()
block|{
return|return
name|myUrl
operator|.
name|getPath
argument_list|()
operator|.
name|substring
argument_list|(
literal|13
argument_list|)
return|;
block|}
comment|/**      * Get http:// URL from xmldb:exist:// URL      * xmldb:exist://username:password@hostname:8080:/exist/xmlrpc/db/collection/document.xml      * @return http://username:password@hostname:8080:/exist/xmlrpc/db/collection/document.xml      */
specifier|public
name|String
name|getXmlRpcURL
parameter_list|()
block|{
return|return
literal|"http://"
operator|+
name|myUrl
operator|.
name|getAuthority
argument_list|()
operator|+
name|getContext
argument_list|()
return|;
block|}
comment|/**      * Does the URL have at least a username?      * @return TRUE when URL contains username      */
specifier|public
name|boolean
name|hasUserInfo
parameter_list|()
block|{
return|return
operator|(
name|getUserInfo
argument_list|()
operator|!=
literal|null
operator|&&
name|getUsername
argument_list|()
operator|!=
literal|null
operator|)
return|;
block|}
comment|/**      * Get eXist instance name.      *      * @return eXist-db instance name, at this moment fixed to exist      */
specifier|public
name|String
name|getInstanceName
parameter_list|()
block|{
return|return
literal|"exist"
return|;
comment|// No other choice
block|}
comment|/**      * Get textual representation of URL.      *      * @see java.net.URL#toString      * @return Text representation of URL.      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|myUrl
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get information wether URL is an embedded URL.      *      * @return TRUE when URL refers to resource in embedded eXist-db.      */
specifier|public
name|boolean
name|isEmbedded
parameter_list|()
block|{
return|return
operator|(
name|getHost
argument_list|()
operator|==
literal|null
operator|)
return|;
block|}
block|}
end_class

end_unit

