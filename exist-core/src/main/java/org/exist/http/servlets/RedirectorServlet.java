begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
package|;
end_package

begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|FileSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Servlet to redirect HTTP requests. The request is passed to an XQuery whose return value  * determines where the request will be redirected to. The query should return a single XML element:  *  *<pre>  *&lt;exist:dispatch xmlns:exist="http://exist.sourceforge.net/NS/exist"  *      path="/preview.xql" servlet-name="MyServlet" redirect="path"&gt;  *&lt;exist:add-parameter name="new-param" value="new-param-value"/&gt;  *&lt;/exist:dispatch&gt;  *</pre>  *  * The element should have one of three attributes:<em>path</em>,<em>servlet-name</em> or  *<em>redirect</em>.  *  * If the servlet-name attribute is present, the request will be forwarded to the named servlet  * (name as specified in web.xml). Alternatively, path can point to an arbitrary resource. It can be either absolute or relative.  * Relative paths are resolved relative to the original request.  *  * The request is forwarded via {@link javax.servlet.RequestDispatcher#forward(javax.servlet.ServletRequest, javax.servlet.ServletResponse)}.  * Contrary to HTTP forwarding, there is no additional roundtrip to the client. It all happens on  * the server. The client will not notice the redirect.  *  * When forwarding to other servlets, the fields in {@link javax.servlet.http.HttpServletRequest} will be  * updated to point to the new, redirected URI. However, the original request URI is stored in the  * request attribute org.exist.forward.request-uri.  *  * If present, the "redirect" attribute causes the server to send a redirect request to the client, which will usually respond  * with a new request to the redirected location. Note that this is quite different from a forwarding via RequestDispatcher,  * which is completely transparent to the client.  *  * RedirectorServlet takes a single parameter in web.xml: "xquery". This parameter should point to an  * XQuery script. It should be relative to the current web context.  *  *<pre>  *&lt;servlet&gt;  *&lt;servlet-name&gt;RedirectorServlet&lt;/servlet-name&gt;  *&lt;servlet-class&gt;org.exist.http.servlets.RedirectorServlet&lt;/servlet-class&gt;  *  *&lt;init-param&gt;  *&lt;param-name&gt;xquery&lt;/param-name&gt;  *&lt;param-value&gt;dispatcher.xql&lt;/param-value&gt;  *&lt;/init-param&gt;  *&lt;/servlet&gt;  *  *&lt;servlet-mapping&gt;  *&lt;servlet-name&gt;RedirectorServlet&lt;/servlet-name&gt;  *&lt;url-pattern&gt;/wiki/*&lt;/url-pattern&gt;  *&lt;/servlet-mapping&gt;  *</pre>  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|RedirectorServlet
extends|extends
name|AbstractExistHttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|853971301553787943L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|RedirectorServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_USER
init|=
literal|"guest"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|DEFAULT_PASS
init|=
literal|"guest"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|XmldbURI
name|DEFAULT_URI
init|=
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|append
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
decl_stmt|;
specifier|private
name|String
name|user
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|password
init|=
literal|null
decl_stmt|;
specifier|private
name|XmldbURI
name|collectionURI
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|query
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|query
operator|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"xquery"
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"RedirectorServlet requires a parameter 'xquery'."
argument_list|)
throw|;
block|}
name|user
operator|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|user
operator|=
name|DEFAULT_USER
expr_stmt|;
block|}
name|password
operator|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|password
operator|=
name|DEFAULT_PASS
expr_stmt|;
block|}
specifier|final
name|String
name|confCollectionURI
init|=
name|config
operator|.
name|getInitParameter
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|confCollectionURI
operator|==
literal|null
condition|)
block|{
name|collectionURI
operator|=
name|DEFAULT_URI
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|collectionURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|confCollectionURI
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Invalid XmldbURI for parameter 'uri': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|service
parameter_list|(
specifier|final
name|HttpServletRequest
name|req
parameter_list|,
specifier|final
name|HttpServletResponse
name|res
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
specifier|final
name|RequestWrapper
name|request
init|=
operator|new
name|HttpRequestWrapper
argument_list|(
name|req
argument_list|)
decl_stmt|;
specifier|final
name|ResponseWrapper
name|response
init|=
operator|new
name|HttpResponseWrapper
argument_list|(
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
operator|==
literal|null
condition|)
try|try
block|{
name|request
operator|.
name|setCharacterEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalStateException
name|e
parameter_list|)
block|{
block|}
comment|// Try to find the XQuery
specifier|final
name|String
name|qpath
init|=
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
name|query
argument_list|)
decl_stmt|;
specifier|final
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|qpath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Files
operator|.
name|isReadable
argument_list|(
name|p
argument_list|)
operator|&&
name|Files
operator|.
name|isRegularFile
argument_list|(
name|p
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Cannot read XQuery source from "
operator|+
name|p
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|FileSource
name|source
init|=
operator|new
name|FileSource
argument_list|(
name|p
argument_list|,
literal|true
argument_list|)
decl_stmt|;
try|try
block|{
comment|// Prepare and execute the XQuery
specifier|final
name|Sequence
name|result
init|=
name|executeQuery
argument_list|(
name|source
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
name|String
name|redirectTo
init|=
literal|null
decl_stmt|;
name|String
name|servletName
init|=
literal|null
decl_stmt|;
name|String
name|path
init|=
literal|null
decl_stmt|;
name|ModifiableRequestWrapper
name|modifiedRequest
init|=
literal|null
decl_stmt|;
comment|// parse the query result element
if|if
condition|(
name|result
operator|!=
literal|null
operator|&&
name|result
operator|.
name|getItemCount
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Node
name|node
init|=
operator|(
name|Node
operator|)
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|DOCUMENT_NODE
condition|)
block|{
name|node
operator|=
operator|(
operator|(
name|Document
operator|)
name|node
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Redirect XQuery should return an XML element. Received: "
operator|+
name|node
argument_list|)
expr_stmt|;
return|return;
block|}
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|node
decl_stmt|;
specifier|final
name|String
name|ns
init|=
name|elem
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
operator|||
operator|(
operator|(
operator|!
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|ns
argument_list|)
operator|)
operator|&&
literal|"dispatch"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Redirect XQuery should return an element<exist:dispatch>. Received: "
operator|+
name|node
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|elem
operator|.
name|hasAttribute
argument_list|(
literal|"path"
argument_list|)
condition|)
block|{
name|path
operator|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|elem
operator|.
name|hasAttribute
argument_list|(
literal|"servlet-name"
argument_list|)
condition|)
block|{
name|servletName
operator|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"servlet-name"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|elem
operator|.
name|hasAttribute
argument_list|(
literal|"redirect"
argument_list|)
condition|)
block|{
name|redirectTo
operator|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"redirect"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_BAD_REQUEST
argument_list|,
literal|"Element<exist:dispatch> should either provide an attribute 'path' or 'servlet-name'. Received: "
operator|+
name|node
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Check for add-parameter elements etc.
if|if
condition|(
name|elem
operator|.
name|hasChildNodes
argument_list|()
condition|)
block|{
name|node
operator|=
name|elem
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
while|while
condition|(
name|node
operator|!=
literal|null
condition|)
block|{
specifier|final
name|String
name|nsUri
init|=
name|node
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|nsUri
operator|!=
literal|null
operator|&&
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|nsUri
argument_list|)
condition|)
block|{
name|elem
operator|=
operator|(
name|Element
operator|)
name|node
expr_stmt|;
if|if
condition|(
literal|"add-parameter"
operator|.
name|equals
argument_list|(
name|elem
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|modifiedRequest
operator|==
literal|null
condition|)
block|{
name|modifiedRequest
operator|=
operator|new
name|ModifiableRequestWrapper
argument_list|(
name|req
argument_list|)
expr_stmt|;
block|}
name|modifiedRequest
operator|.
name|addParameter
argument_list|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|node
operator|=
name|node
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|redirectTo
operator|!=
literal|null
condition|)
block|{
comment|// directly redirect to the specified URI
name|response
operator|.
name|sendRedirect
argument_list|(
name|redirectTo
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// Get a RequestDispatcher, either from the servlet context or the request
name|RequestDispatcher
name|dispatcher
decl_stmt|;
if|if
condition|(
name|servletName
operator|!=
literal|null
operator|&&
name|servletName
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|dispatcher
operator|=
name|getServletContext
argument_list|()
operator|.
name|getNamedDispatcher
argument_list|(
name|servletName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Dispatching to "
operator|+
name|path
argument_list|)
expr_stmt|;
name|dispatcher
operator|=
name|getServletContext
argument_list|()
operator|.
name|getRequestDispatcher
argument_list|(
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|dispatcher
operator|==
literal|null
condition|)
block|{
name|dispatcher
operator|=
name|request
operator|.
name|getRequestDispatcher
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dispatcher
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
literal|"Could not create a request dispatcher. Giving up."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|modifiedRequest
operator|!=
literal|null
condition|)
block|{
comment|// store the original request URI to org.exist.forward.request-uri
name|modifiedRequest
operator|.
name|setAttribute
argument_list|(
literal|"org.exist.forward.request-uri"
argument_list|,
name|modifiedRequest
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|modifiedRequest
operator|.
name|setAttribute
argument_list|(
literal|"org.exist.forward.servlet-path"
argument_list|,
name|modifiedRequest
operator|.
name|getServletPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// finally, execute the forward
name|dispatcher
operator|.
name|forward
argument_list|(
name|modifiedRequest
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// store the original request URI to org.exist.forward.request-uri
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.exist.forward.request-uri"
argument_list|,
name|request
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
literal|"org.exist.forward.servlet-path"
argument_list|,
name|request
operator|.
name|getServletPath
argument_list|()
argument_list|)
expr_stmt|;
comment|// finally, execute the forward
name|dispatcher
operator|.
name|forward
argument_list|(
name|req
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
decl||
name|EXistException
decl||
name|PermissionDeniedException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"An error occurred while executing the RedirectorServlet XQuery: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Sequence
name|executeQuery
parameter_list|(
specifier|final
name|Source
name|source
parameter_list|,
specifier|final
name|RequestWrapper
name|request
parameter_list|,
specifier|final
name|ResponseWrapper
name|response
parameter_list|)
throws|throws
name|EXistException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|getPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryPool
name|pool
init|=
name|getPool
argument_list|()
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|getPool
argument_list|()
operator|.
name|getBroker
argument_list|()
init|)
block|{
specifier|final
name|XQueryContext
name|context
decl_stmt|;
name|CompiledXQuery
name|compiled
init|=
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
comment|// special header to indicate that the query is not returned from
comment|// cache
name|response
operator|.
name|setHeader
argument_list|(
literal|"X-XQuery-Cached"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|XQueryContext
argument_list|(
name|getPool
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setHeader
argument_list|(
literal|"X-XQuery-Cached"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
name|context
operator|.
name|prepareForReuse
argument_list|()
expr_stmt|;
block|}
try|try
block|{
return|return
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|runCleanupTasks
argument_list|()
expr_stmt|;
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|Logger
name|getLog
parameter_list|()
block|{
return|return
name|LOG
return|;
block|}
specifier|private
specifier|static
class|class
name|ModifiableRequestWrapper
extends|extends
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequestWrapper
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|addedParams
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|ModifiableRequestWrapper
parameter_list|(
specifier|final
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|super
argument_list|(
name|request
argument_list|)
expr_stmt|;
comment|// copy parameters
for|for
control|(
specifier|final
name|Enumeration
name|e
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|key
init|=
operator|(
name|String
operator|)
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|value
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|addedParams
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|addParameter
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|addedParams
operator|.
name|put
argument_list|(
name|name
argument_list|,
operator|new
name|String
index|[]
block|{
name|value
block|}
argument_list|)
expr_stmt|;
block|}
comment|//XXX: something wrong here, the value can be String[], see line 278
annotation|@
name|Override
specifier|public
name|String
name|getParameter
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|value
init|=
name|addedParams
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
operator|&&
name|value
operator|.
name|length
operator|>
literal|0
condition|)
block|{
return|return
name|value
index|[
literal|0
index|]
return|;
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|getParameterMap
parameter_list|()
block|{
return|return
name|addedParams
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
name|getParameterNames
parameter_list|()
block|{
specifier|final
name|Vector
argument_list|<
name|String
argument_list|>
name|v
init|=
operator|new
name|Vector
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|key
range|:
name|addedParams
operator|.
name|keySet
argument_list|()
control|)
block|{
name|v
operator|.
name|addElement
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
return|return
name|v
operator|.
name|elements
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
specifier|final
name|String
index|[]
name|value
init|=
name|addedParams
operator|.
name|get
argument_list|(
name|s
argument_list|)
decl_stmt|;
return|return
name|value
return|;
block|}
block|}
block|}
end_class

end_unit

