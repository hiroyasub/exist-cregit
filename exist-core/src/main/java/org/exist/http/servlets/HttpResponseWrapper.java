begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2006 The eXist team  *  http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|ISO_8859_1
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:wolfgang@exist-db.org">Wolfgang Meier</a>  */
end_comment

begin_class
specifier|public
class|class
name|HttpResponseWrapper
implements|implements
name|ResponseWrapper
block|{
specifier|private
name|HttpServletResponse
name|response
decl_stmt|;
comment|/** 	 * @param response the http response 	 */
specifier|public
name|HttpResponseWrapper
parameter_list|(
name|HttpServletResponse
name|response
parameter_list|)
block|{
name|this
operator|.
name|response
operator|=
name|response
expr_stmt|;
block|}
comment|/** 	 * @param name Name of the Cookie 	 * @param value Value of the Cookie 	 */
specifier|public
name|void
name|addCookie
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|response
operator|.
name|addCookie
argument_list|(
operator|new
name|Cookie
argument_list|(
name|name
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>addCookie</code>      *      * @param name Name of the Cookie      * @param value Value of the Cookie      * @param maxAge an<code>int</code> value      */
specifier|public
name|void
name|addCookie
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|int
name|maxAge
parameter_list|)
block|{
specifier|final
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|name
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|cookie
operator|.
name|setMaxAge
argument_list|(
name|maxAge
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCookie
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>addCookie</code>      *      * @param name Name of the Cookie      * @param value Value of the Cookie      * @param maxAge an<code>int</code> value 	 * @param secure security of the Cookie      */
specifier|public
name|void
name|addCookie
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|int
name|maxAge
parameter_list|,
name|boolean
name|secure
parameter_list|)
block|{
specifier|final
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|name
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|cookie
operator|.
name|setMaxAge
argument_list|(
name|maxAge
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setSecure
argument_list|(
name|secure
argument_list|)
expr_stmt|;
name|response
operator|.
name|addCookie
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * The method<code>addCookie</code> 	 * 	 * @param name Name of the Cookie 	 * @param value Value of the Cookie 	 * @param maxAge an<code>int</code> value 	 * @param secure security of the Cookie 	 * @param domain domain of the cookie 	 * @param path path scope of the cookie 	 */
specifier|public
name|void
name|addCookie
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|int
name|maxAge
parameter_list|,
name|boolean
name|secure
parameter_list|,
specifier|final
name|String
name|domain
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
block|{
specifier|final
name|Cookie
name|cookie
init|=
operator|new
name|Cookie
argument_list|(
name|name
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
decl_stmt|;
name|cookie
operator|.
name|setMaxAge
argument_list|(
name|maxAge
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setSecure
argument_list|(
name|secure
argument_list|)
expr_stmt|;
if|if
condition|(
name|domain
operator|!=
literal|null
condition|)
block|{
name|cookie
operator|.
name|setDomain
argument_list|(
name|domain
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|!=
literal|null
condition|)
block|{
name|cookie
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|response
operator|.
name|addCookie
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @param contentType Content Type of the response 	 */
specifier|public
name|void
name|setContentType
parameter_list|(
name|String
name|contentType
parameter_list|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|contentType
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Add a date header. 	 * 	 * @param name the header name 	 * @param value the value of the header 	 */
specifier|public
name|void
name|addDateHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|response
operator|.
name|addDateHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Add a header. 	 * 	 * @param name the header name 	 * @param value the value of the header 	 */
specifier|public
name|void
name|addHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|response
operator|.
name|addHeader
argument_list|(
name|name
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Add a int header. 	 * 	 * @param name the header name 	 * @param value the value of the header 	 */
specifier|public
name|void
name|addIntHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|response
operator|.
name|addIntHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Returns true of the response contains the header. 	 * 	 * @param name the header name 	 * @return a boolean indicating whether the header is present 	 */
specifier|public
name|boolean
name|containsHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|response
operator|.
name|containsHeader
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** 	 * Encode a String as a URL. 	 * 	 * @param s the string to encode 	 * @return the encoded value 	 */
specifier|public
name|String
name|encodeURL
parameter_list|(
name|String
name|s
parameter_list|)
block|{
return|return
name|response
operator|.
name|encodeURL
argument_list|(
name|s
argument_list|)
return|;
block|}
specifier|public
name|void
name|flushBuffer
parameter_list|()
throws|throws
name|IOException
block|{
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * @return returns the default character encoding 	 */
specifier|public
name|String
name|getCharacterEncoding
parameter_list|()
block|{
return|return
name|response
operator|.
name|getCharacterEncoding
argument_list|()
return|;
block|}
comment|/** 	 * @return returns the locale 	 */
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
name|response
operator|.
name|getLocale
argument_list|()
return|;
block|}
comment|/** 	 * @return returns isCommitted 	 */
specifier|public
name|boolean
name|isCommitted
parameter_list|()
block|{
return|return
name|response
operator|.
name|isCommitted
argument_list|()
return|;
block|}
comment|/** 	 * Send a HTTP Reedirect. 	 * 	 * @param url the URL to redirect to 	 * @throws IOException if an I/O error occurs 	 */
specifier|public
name|void
name|sendRedirect
parameter_list|(
name|String
name|url
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|sendRedirect
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
comment|/** used the feature "Guess last modification time for an XQuery result" */
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
name|dateHeaders
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Long
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 	 * Set a date header. 	 * 	 * @param name the header name 	 * @param value the header value 	 */
specifier|public
name|void
name|setDateHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|long
name|value
parameter_list|)
block|{
name|dateHeaders
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|Long
operator|.
name|valueOf
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|response
operator|.
name|setDateHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get a date header. 	 * 	 * @param name the header name 	 * 	 * @return the value of Date Header corresponding to given name, 0 if none has been set. 	 */
specifier|public
name|long
name|getDateHeader
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|long
name|ret
init|=
literal|0
decl_stmt|;
specifier|final
name|Long
name|val
init|=
name|dateHeaders
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|!=
literal|null
condition|)
block|{
name|ret
operator|=
name|val
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
comment|/** 	 * Set a header. 	 * 	 * @param name the header name 	 * @param value the header value 	 */
specifier|public
name|void
name|setHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|response
operator|.
name|setHeader
argument_list|(
name|name
argument_list|,
name|encode
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Set an int header. 	 * 	 * @param name the header name 	 * @param value the header value 	 */
specifier|public
name|void
name|setIntHeader
parameter_list|(
name|String
name|name
parameter_list|,
name|int
name|value
parameter_list|)
block|{
name|response
operator|.
name|setIntHeader
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
specifier|final
name|int
name|code
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|sendError
argument_list|(
name|code
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|sendError
parameter_list|(
specifier|final
name|int
name|code
parameter_list|,
specifier|final
name|String
name|msg
parameter_list|)
throws|throws
name|IOException
block|{
name|response
operator|.
name|sendError
argument_list|(
name|code
argument_list|,
name|msg
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Set the HTP Status Code 	 *      * @param statusCode the status code.      */
specifier|public
name|void
name|setStatusCode
parameter_list|(
name|int
name|statusCode
parameter_list|)
block|{
name|response
operator|.
name|setStatus
argument_list|(
name|statusCode
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Set the locale. 	 * 	 * @param locale the locale. 	 */
specifier|public
name|void
name|setLocale
parameter_list|(
name|Locale
name|locale
parameter_list|)
block|{
name|response
operator|.
name|setLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|response
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
comment|// TODO: remove this hack after fixing HTTP 1.1 :)
specifier|private
name|String
name|encode
parameter_list|(
name|String
name|value
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|value
operator|.
name|getBytes
argument_list|()
argument_list|,
name|ISO_8859_1
argument_list|)
return|;
block|}
block|}
end_class

end_unit

