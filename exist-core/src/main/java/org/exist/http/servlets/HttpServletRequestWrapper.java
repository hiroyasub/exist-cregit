begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database Copyright (C) 2001-06 Wolfgang M.  * Meier meier@ifs.tu-darmstadt.de http://exist.sourceforge.net  *  * This program is free software; you can redistribute it and/or modify it  * under the terms of the GNU Lesser General Public License as published by the  * Free Software Foundation; either version 2 of the License, or (at your  * option) any later version.  *  * This program is distributed in the hope that it will be useful, but WITHOUT  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or  * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License  * for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation,  * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
package|;
end_package

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|AsyncContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|DispatcherType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|RequestDispatcher
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ReadListener
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletContext
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletInputStream
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpUpgradeHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Part
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLDecoder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|IterableEnumeration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|CachingFilterInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FilterInputStreamCache
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FilterInputStreamCacheFactory
import|;
end_import

begin_comment
comment|/**  * A wrapper for HttpServletRequest  * - differentiates between POST parameters in the URL or Content Body  * - caches content Body of the POST request as read, making it available many times  *  * A method of differentiating between POST parameters in the URL or Content Body of the request was needed.  * The standard javax.servlet.http.HTTPServletRequest does not differentiate between URL or content body parameters,  * this class does, the type is indicated in RequestParameter.type.  *  * To differentiate manually we need to read the URL (getQueryString()) and the Content body (getInputStream()),  * this is problematic with the standard javax.servlet.http.HTTPServletRequest as parameter functions (getParameterMap(), getParameterNames(), getParameter(String), getParameterValues(String))  * affect the  input stream functions (getInputStream(), getReader()) and vice versa.  *  * This class solves this by reading the Request Parameters initially from both the URL and the Content Body of the Request  * and storing them in the private variable params for later use.  *  * @author<a href="mailto:adam.retter@devon.gov.uk">Adam Retter</a>  * @version 1.2  * @serial 2018-04-03  */
end_comment

begin_comment
comment|//TODO: check loops to make sure they only iterate as few times as needed
end_comment

begin_comment
comment|//TODO: do we need to do anything with encoding strings manually?
end_comment

begin_class
specifier|public
class|class
name|HttpServletRequestWrapper
implements|implements
name|HttpServletRequest
implements|,
name|Closeable
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|HttpServletRequestWrapper
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|HttpServletRequest
name|request
decl_stmt|;
specifier|private
specifier|final
name|String
name|formEncoding
decl_stmt|;
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RequestParameter
argument_list|>
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|FilterInputStreamCache
name|cache
decl_stmt|;
specifier|private
specifier|final
name|CachingFilterInputStream
name|is
decl_stmt|;
comment|/**      * HttpServletRequestWrapper Constructor      *      * @param cacheConfiguration the cache configuration      * @param request The HttpServletRequest to wrap      * @param formEncoding The encoding to use      *      * @throws IOException if an I/O error occurs      */
specifier|public
name|HttpServletRequestWrapper
parameter_list|(
specifier|final
name|FilterInputStreamCacheFactory
operator|.
name|FilterInputStreamCacheConfiguration
name|cacheConfiguration
parameter_list|,
specifier|final
name|HttpServletRequest
name|request
parameter_list|,
specifier|final
name|String
name|formEncoding
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|request
operator|=
name|request
expr_stmt|;
if|if
condition|(
name|request
operator|.
name|getCharacterEncoding
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|formEncoding
operator|=
name|getCharacterEncoding
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|request
operator|.
name|setCharacterEncoding
argument_list|(
name|formEncoding
argument_list|)
expr_stmt|;
name|this
operator|.
name|formEncoding
operator|=
name|formEncoding
expr_stmt|;
block|}
name|this
operator|.
name|cache
operator|=
name|FilterInputStreamCacheFactory
operator|.
name|getCacheInstance
argument_list|(
name|cacheConfiguration
argument_list|,
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|is
operator|=
operator|new
name|CachingFilterInputStream
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|initialiseWrapper
argument_list|()
expr_stmt|;
block|}
comment|//Initialises the wrapper, and parameter map
specifier|private
name|void
name|initialiseWrapper
parameter_list|()
block|{
comment|//Parse out parameters from the URL
name|parseURLParameters
argument_list|(
name|this
operator|.
name|request
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
comment|//If POST request, Parse out parameters from the Content Body
if|if
condition|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
condition|)
block|{
comment|//If there is some Content
specifier|final
name|int
name|contentLength
init|=
name|request
operator|.
name|getContentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentLength
operator|>
literal|0
operator|||
name|contentLength
operator|==
operator|-
literal|1
condition|)
block|{
comment|// If a form POST , and not a document POST
name|String
name|contentType
init|=
name|request
operator|.
name|getContentType
argument_list|()
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|final
name|int
name|semicolon
init|=
name|contentType
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|)
decl_stmt|;
if|if
condition|(
name|semicolon
operator|>
literal|0
condition|)
block|{
name|contentType
operator|=
name|contentType
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|semicolon
argument_list|)
operator|.
name|trim
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
literal|"application/x-www-form-urlencoded"
operator|.
name|equals
argument_list|(
name|contentType
argument_list|)
operator|&&
name|request
operator|.
name|getHeader
argument_list|(
literal|"ContentType"
argument_list|)
operator|==
literal|null
condition|)
block|{
comment|//Parse out parameters from the Content Body
name|parseContentBodyParameters
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//Stores parameters from the QueryString of the request
specifier|private
name|void
name|parseURLParameters
parameter_list|(
specifier|final
name|String
name|querystring
parameter_list|)
block|{
if|if
condition|(
name|querystring
operator|!=
literal|null
condition|)
block|{
comment|//Parse any parameters from the URL
name|parseParameters
argument_list|(
name|querystring
argument_list|,
name|RequestParameter
operator|.
name|ParameterSource
operator|.
name|URL
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Stores parameters from the Content Body of the Request      */
specifier|private
name|void
name|parseContentBodyParameters
parameter_list|()
block|{
try|try
init|(
specifier|final
name|Reader
name|reader
init|=
name|getReader
argument_list|()
init|)
block|{
specifier|final
name|StringBuilder
name|body
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|final
name|char
name|buf
index|[]
init|=
operator|new
name|char
index|[
literal|16
operator|*
literal|1024
index|]
decl_stmt|;
name|int
name|read
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
name|body
operator|.
name|append
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
block|}
comment|//Parse any parameters from the Content Body
name|parseParameters
argument_list|(
name|body
operator|.
name|toString
argument_list|()
argument_list|,
name|RequestParameter
operator|.
name|ParameterSource
operator|.
name|CONTENT
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Error Reading the Content Body into the buffer"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Parses Parameters into param objects and stores them in a vector in params.      *      * @param parameters the parameters to parse      * @param type the type of the parameters      */
specifier|private
name|void
name|parseParameters
parameter_list|(
specifier|final
name|String
name|parameters
parameter_list|,
specifier|final
name|RequestParameter
operator|.
name|ParameterSource
name|type
parameter_list|)
block|{
comment|//Split parameters into an array
specifier|final
name|String
index|[]
name|nameValuePairs
init|=
name|parameters
operator|.
name|split
argument_list|(
literal|"&"
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|nameValuePair
range|:
name|nameValuePairs
control|)
block|{
comment|//Split parameter into name and value
specifier|final
name|String
index|[]
name|thePair
init|=
name|nameValuePair
operator|.
name|split
argument_list|(
literal|"="
argument_list|)
decl_stmt|;
try|try
block|{
comment|//URL Decode the parameter name and value
name|thePair
index|[
literal|0
index|]
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|thePair
index|[
literal|0
index|]
argument_list|,
name|formEncoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|thePair
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|thePair
index|[
literal|1
index|]
operator|=
name|URLDecoder
operator|.
name|decode
argument_list|(
name|thePair
index|[
literal|1
index|]
argument_list|,
name|formEncoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|//Have we encountered a parameter with this name?
if|if
condition|(
name|params
operator|.
name|containsKey
argument_list|(
name|thePair
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|//key exists in hash map, add value and type to vector
specifier|final
name|List
argument_list|<
name|RequestParameter
argument_list|>
name|vecValues
init|=
name|params
operator|.
name|get
argument_list|(
name|thePair
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|vecValues
operator|.
name|add
argument_list|(
operator|new
name|RequestParameter
argument_list|(
operator|(
name|thePair
operator|.
name|length
operator|==
literal|2
condition|?
name|thePair
index|[
literal|1
index|]
else|:
literal|""
operator|)
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|thePair
index|[
literal|0
index|]
argument_list|,
name|vecValues
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//not in hash map so add a vector with the initial value
specifier|final
name|List
argument_list|<
name|RequestParameter
argument_list|>
name|vecValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|vecValues
operator|.
name|add
argument_list|(
operator|new
name|RequestParameter
argument_list|(
operator|(
name|thePair
operator|.
name|length
operator|==
literal|2
condition|?
name|thePair
index|[
literal|1
index|]
else|:
literal|""
operator|)
argument_list|,
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|thePair
index|[
literal|0
index|]
argument_list|,
name|vecValues
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|ServletInputStream
name|getInputStream
parameter_list|()
block|{
return|return
operator|new
name|ServletInputStreamWrapper
argument_list|(
name|is
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getParameter
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|//Does the parameter exist?
if|if
condition|(
name|params
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|//Get the parameters vector of values
specifier|final
name|List
argument_list|<
name|RequestParameter
argument_list|>
name|vecParameterValues
init|=
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|//return the first value in the vector
return|return
name|vecParameterValues
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getValue
argument_list|()
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getParameterNames
parameter_list|()
block|{
return|return
operator|new
name|IterableEnumeration
argument_list|<>
argument_list|(
name|params
operator|.
name|keySet
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getParameterValues
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|//Does the parameter exist?
if|if
condition|(
name|params
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|//Get the parameters vector of values
specifier|final
name|List
argument_list|<
name|RequestParameter
argument_list|>
name|vecParameterValues
init|=
name|params
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|//Create a string array to hold the values
specifier|final
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|vecParameterValues
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|//Copy each value into the string array
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vecParameterValues
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|vecParameterValues
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
comment|//return the string array of values
return|return
name|values
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|getParameterMap
parameter_list|()
block|{
comment|//Map to hold the parameters
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|mapParameters
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RequestParameter
argument_list|>
argument_list|>
argument_list|>
name|setParams
init|=
name|params
operator|.
name|entrySet
argument_list|()
decl_stmt|;
comment|//iterate through the Request Parameters
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RequestParameter
argument_list|>
argument_list|>
name|me
range|:
name|setParams
control|)
block|{
comment|//Get the parameters values
specifier|final
name|List
argument_list|<
name|RequestParameter
argument_list|>
name|vecParamValues
init|=
name|me
operator|.
name|getValue
argument_list|()
decl_stmt|;
comment|//Create a string array to hold the parameter values
specifier|final
name|String
index|[]
name|values
init|=
operator|new
name|String
index|[
name|vecParamValues
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
comment|//Copy the parameter values into a string array
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|RequestParameter
argument_list|>
name|itParamValues
init|=
name|vecParamValues
operator|.
name|iterator
argument_list|()
init|;
name|itParamValues
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|values
index|[
name|i
index|]
operator|=
name|itParamValues
operator|.
name|next
argument_list|()
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
name|mapParameters
operator|.
name|put
argument_list|(
name|me
operator|.
name|getKey
argument_list|()
argument_list|,
name|values
argument_list|)
expr_stmt|;
comment|//Store the parameter in a map
block|}
return|return
name|mapParameters
return|;
comment|//return the Map of parameters
block|}
annotation|@
name|Override
specifier|public
name|BufferedReader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
name|String
name|encoding
init|=
name|request
operator|.
name|getCharacterEncoding
argument_list|()
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
try|try
block|{
return|return
operator|new
name|BufferedReader
argument_list|(
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|CachingFilterInputStream
argument_list|(
name|is
argument_list|)
argument_list|,
name|encoding
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InstantiationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Similar to javax.servlet.http.HttpServletRequest.toString() ,      * except it includes output of the Request parameters from the Request's Content Body      *      * @return String representation of HttpServletRequestWrapper      */
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
comment|// If POST request AND there is some content AND its not a file upload
if|if
condition|(
literal|"POST"
operator|.
name|equals
argument_list|(
name|request
operator|.
name|getMethod
argument_list|()
operator|.
name|toUpperCase
argument_list|()
argument_list|)
operator|&&
operator|(
name|request
operator|.
name|getContentLength
argument_list|()
operator|>
literal|0
operator|||
name|request
operator|.
name|getContentLength
argument_list|()
operator|==
operator|-
literal|1
operator|)
operator|&&
operator|!
name|request
operator|.
name|getContentType
argument_list|()
operator|.
name|toUpperCase
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"MULTIPART/"
argument_list|)
condition|)
block|{
comment|// Also return the content parameters, these are not part
comment|// of the standard HttpServletRequest.toString() output
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|request
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Set
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RequestParameter
argument_list|>
argument_list|>
argument_list|>
name|setParams
init|=
name|params
operator|.
name|entrySet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|RequestParameter
argument_list|>
argument_list|>
name|me
range|:
name|setParams
control|)
block|{
specifier|final
name|List
argument_list|<
name|RequestParameter
argument_list|>
name|vecParamValues
init|=
name|me
operator|.
name|getValue
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|RequestParameter
name|p
range|:
name|vecParamValues
control|)
block|{
if|if
condition|(
name|p
operator|.
name|source
operator|==
name|RequestParameter
operator|.
name|ParameterSource
operator|.
name|CONTENT
condition|)
block|{
if|if
condition|(
name|buf
operator|.
name|charAt
argument_list|(
name|buf
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'\n'
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"&"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|me
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|p
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"line.separator"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
comment|//Return standard HttpServletRequest.toString() output
return|return
name|request
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAuthType
parameter_list|()
block|{
return|return
name|request
operator|.
name|getAuthType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Cookie
index|[]
name|getCookies
parameter_list|()
block|{
return|return
name|request
operator|.
name|getCookies
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDateHeader
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|request
operator|.
name|getDateHeader
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getHeader
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|request
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getHeaders
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|request
operator|.
name|getHeaders
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getHeaderNames
parameter_list|()
block|{
return|return
name|request
operator|.
name|getHeaderNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getIntHeader
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|request
operator|.
name|getIntHeader
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getMethod
parameter_list|()
block|{
return|return
name|request
operator|.
name|getMethod
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPathInfo
parameter_list|()
block|{
return|return
name|request
operator|.
name|getPathInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPathTranslated
parameter_list|()
block|{
return|return
name|request
operator|.
name|getPathInfo
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContextPath
parameter_list|()
block|{
return|return
name|request
operator|.
name|getContextPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getQueryString
parameter_list|()
block|{
return|return
name|request
operator|.
name|getQueryString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRemoteUser
parameter_list|()
block|{
return|return
name|request
operator|.
name|getRemoteUser
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isUserInRole
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|request
operator|.
name|isUserInRole
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Principal
name|getUserPrincipal
parameter_list|()
block|{
return|return
name|request
operator|.
name|getUserPrincipal
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRequestedSessionId
parameter_list|()
block|{
return|return
name|request
operator|.
name|getRequestedSessionId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRequestURI
parameter_list|()
block|{
return|return
name|request
operator|.
name|getRequestURI
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|StringBuffer
name|getRequestURL
parameter_list|()
block|{
return|return
name|request
operator|.
name|getRequestURL
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getServletPath
parameter_list|()
block|{
return|return
name|request
operator|.
name|getServletPath
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|HttpSession
name|getSession
parameter_list|(
specifier|final
name|boolean
name|create
parameter_list|)
block|{
return|return
name|request
operator|.
name|getSession
argument_list|(
name|create
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|HttpSession
name|getSession
parameter_list|()
block|{
return|return
name|request
operator|.
name|getSession
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|changeSessionId
parameter_list|()
block|{
return|return
name|request
operator|.
name|changeSessionId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRequestedSessionIdValid
parameter_list|()
block|{
return|return
name|request
operator|.
name|isRequestedSessionIdValid
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRequestedSessionIdFromCookie
parameter_list|()
block|{
return|return
name|request
operator|.
name|isRequestedSessionIdFromCookie
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isRequestedSessionIdFromURL
parameter_list|()
block|{
return|return
name|request
operator|.
name|isRequestedSessionIdFromURL
argument_list|()
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|boolean
name|isRequestedSessionIdFromUrl
parameter_list|()
block|{
return|return
name|request
operator|.
name|isRequestedSessionIdFromUrl
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|authenticate
parameter_list|(
specifier|final
name|HttpServletResponse
name|httpServletResponse
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
return|return
name|request
operator|.
name|authenticate
argument_list|(
name|httpServletResponse
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|login
parameter_list|(
specifier|final
name|String
name|s
parameter_list|,
specifier|final
name|String
name|s1
parameter_list|)
throws|throws
name|ServletException
block|{
name|request
operator|.
name|login
argument_list|(
name|s
argument_list|,
name|s1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|logout
parameter_list|()
throws|throws
name|ServletException
block|{
name|request
operator|.
name|logout
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Collection
argument_list|<
name|Part
argument_list|>
name|getParts
parameter_list|()
throws|throws
name|IOException
throws|,
name|ServletException
block|{
return|return
name|request
operator|.
name|getParts
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Part
name|getPart
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
return|return
name|request
operator|.
name|getPart
argument_list|(
name|s
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|HttpUpgradeHandler
parameter_list|>
name|T
name|upgrade
parameter_list|(
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|clazz
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
return|return
name|request
operator|.
name|upgrade
argument_list|(
name|clazz
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|request
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|String
argument_list|>
name|getAttributeNames
parameter_list|()
block|{
return|return
name|request
operator|.
name|getAttributeNames
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getCharacterEncoding
parameter_list|()
block|{
return|return
name|request
operator|.
name|getCharacterEncoding
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setCharacterEncoding
parameter_list|(
specifier|final
name|String
name|enc
parameter_list|)
throws|throws
name|UnsupportedEncodingException
block|{
name|request
operator|.
name|setCharacterEncoding
argument_list|(
name|enc
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getContentLength
parameter_list|()
block|{
return|return
name|request
operator|.
name|getContentLength
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getContentLengthLong
parameter_list|()
block|{
return|return
name|request
operator|.
name|getContentLengthLong
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getContentType
parameter_list|()
block|{
return|return
name|request
operator|.
name|getContentType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getProtocol
parameter_list|()
block|{
return|return
name|request
operator|.
name|getProtocol
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|request
operator|.
name|getScheme
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getServerName
parameter_list|()
block|{
return|return
name|request
operator|.
name|getServerName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getServerPort
parameter_list|()
block|{
return|return
name|request
operator|.
name|getServerPort
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRemoteAddr
parameter_list|()
block|{
return|return
name|request
operator|.
name|getRemoteAddr
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRemoteHost
parameter_list|()
block|{
return|return
name|request
operator|.
name|getRemoteHost
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|Object
name|o
parameter_list|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|name
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeAttribute
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
name|request
operator|.
name|removeAttribute
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Locale
name|getLocale
parameter_list|()
block|{
return|return
name|request
operator|.
name|getLocale
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Enumeration
argument_list|<
name|Locale
argument_list|>
name|getLocales
parameter_list|()
block|{
return|return
name|request
operator|.
name|getLocales
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isSecure
parameter_list|()
block|{
return|return
name|request
operator|.
name|isSecure
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|RequestDispatcher
name|getRequestDispatcher
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
return|return
name|request
operator|.
name|getRequestDispatcher
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
annotation|@
name|Deprecated
specifier|public
name|String
name|getRealPath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
return|return
name|request
operator|.
name|getSession
argument_list|()
operator|.
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
name|path
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getRemotePort
parameter_list|()
block|{
return|return
name|request
operator|.
name|getRemotePort
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLocalName
parameter_list|()
block|{
return|return
name|request
operator|.
name|getLocalName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getLocalAddr
parameter_list|()
block|{
return|return
name|request
operator|.
name|getLocalAddr
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLocalPort
parameter_list|()
block|{
return|return
name|request
operator|.
name|getLocalPort
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|ServletContext
name|getServletContext
parameter_list|()
block|{
return|return
name|request
operator|.
name|getServletContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AsyncContext
name|startAsync
parameter_list|()
throws|throws
name|IllegalStateException
block|{
return|return
name|request
operator|.
name|startAsync
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AsyncContext
name|startAsync
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|,
name|ServletResponse
name|servletResponse
parameter_list|)
throws|throws
name|IllegalStateException
block|{
return|return
name|request
operator|.
name|startAsync
argument_list|(
name|servletRequest
argument_list|,
name|servletResponse
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAsyncStarted
parameter_list|()
block|{
return|return
name|request
operator|.
name|isAsyncStarted
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAsyncSupported
parameter_list|()
block|{
return|return
name|request
operator|.
name|isAsyncSupported
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|AsyncContext
name|getAsyncContext
parameter_list|()
block|{
return|return
name|request
operator|.
name|getAsyncContext
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|DispatcherType
name|getDispatcherType
parameter_list|()
block|{
return|return
name|request
operator|.
name|getDispatcherType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
name|this
operator|.
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|cache
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ServletInputStreamWrapper
extends|extends
name|ServletInputStream
block|{
specifier|private
specifier|final
name|CachingFilterInputStream
name|is
decl_stmt|;
specifier|public
name|ServletInputStreamWrapper
parameter_list|(
specifier|final
name|CachingFilterInputStream
name|is
parameter_list|)
block|{
name|this
operator|.
name|is
operator|=
name|is
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|is
operator|.
name|read
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|read
parameter_list|(
specifier|final
name|byte
name|b
index|[]
parameter_list|,
specifier|final
name|int
name|off
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|is
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|is
operator|.
name|available
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isFinished
parameter_list|()
block|{
try|try
block|{
return|return
name|is
operator|.
name|available
argument_list|()
operator|==
literal|0
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isReady
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setReadListener
parameter_list|(
specifier|final
name|ReadListener
name|readListener
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
comment|/**      * Simple class to hold the value and type of a request parameter      */
specifier|private
specifier|static
class|class
name|RequestParameter
block|{
enum|enum
name|ParameterSource
block|{
name|URL
block|,
comment|//parameter from the URL of the request
name|CONTENT
comment|//parameter from the Content of the request
block|}
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
specifier|final
name|ParameterSource
name|source
decl_stmt|;
comment|/**          * RequestParameter Constructor          *          * @param value  Value of the Request Parameter          * @param source Source of the Request Parameter, URL (1) or Content (2)          */
name|RequestParameter
parameter_list|(
specifier|final
name|String
name|value
parameter_list|,
specifier|final
name|ParameterSource
name|source
parameter_list|)
block|{
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|source
operator|=
name|source
expr_stmt|;
block|}
comment|/**          * Request parameter value accessor          *          * @return Value of Request parameter          */
specifier|public
name|String
name|getValue
parameter_list|()
block|{
return|return
operator|(
name|value
operator|)
return|;
block|}
comment|/**          * Request parameter source accessor          *          * @return Source of Request parameter          */
specifier|public
name|ParameterSource
name|getSource
parameter_list|()
block|{
return|return
operator|(
name|source
operator|)
return|;
block|}
block|}
block|}
end_class

end_unit

