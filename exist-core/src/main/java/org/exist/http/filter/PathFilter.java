begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|InetAddress
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|UnknownHostException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_comment
comment|/**  *  * HTTP GET /rest/  * HTTP GET ?_query=  * HTTP POST XUpdate  * HTTP POST Query Document  * HTTP DELETE  * HTTP PUT   * Created by IntelliJ IDEA.  * User: lcahlander  * Date: Aug 18, 2010  * Time: 2:03:11 PM  * To change this template use File | Settings | File Templates.  */
end_comment

begin_class
specifier|public
class|class
name|PathFilter
implements|implements
name|Filter
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|PathFilter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|FilterConfig
name|filterConfig
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_REST
init|=
literal|"HTTP GET /rest/"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_GET_QUERY
init|=
literal|"HTTP GET ?_query="
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_POST_XUPDATE
init|=
literal|"HTTP POST XUpdate"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_POST_QUERY
init|=
literal|"HTTP POST Query Document"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DELETE
init|=
literal|"HTTP DELETE"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_PUT
init|=
literal|"HTTP PUT"
decl_stmt|;
specifier|private
name|boolean
name|allowFirst
init|=
literal|false
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|allows
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|denys
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
name|HashSet
argument_list|<
name|String
argument_list|>
name|filterNames
init|=
operator|new
name|HashSet
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|setFilterConfig
argument_list|(
name|filterConfig
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|,
name|ServletResponse
name|servletResponse
parameter_list|,
name|FilterChain
name|filterChain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
if|if
condition|(
name|filterConfig
operator|==
literal|null
condition|)
block|{
name|filterChain
operator|.
name|doFilter
argument_list|(
name|servletRequest
argument_list|,
name|servletResponse
argument_list|)
expr_stmt|;
return|return;
block|}
name|HttpServletRequest
name|httpServletRequest
decl_stmt|;
name|HttpServletResponse
name|httpServletResponse
decl_stmt|;
if|if
condition|(
name|servletRequest
operator|instanceof
name|HttpServletRequest
condition|)
block|{
name|httpServletRequest
operator|=
operator|(
name|HttpServletRequest
operator|)
name|servletRequest
expr_stmt|;
name|httpServletResponse
operator|=
operator|(
name|HttpServletResponse
operator|)
name|servletResponse
expr_stmt|;
block|}
else|else
block|{
name|filterChain
operator|.
name|doFilter
argument_list|(
name|servletRequest
argument_list|,
name|servletResponse
argument_list|)
expr_stmt|;
return|return;
block|}
name|boolean
name|conditionMet
init|=
literal|false
decl_stmt|;
specifier|final
name|String
name|queryString
init|=
name|httpServletRequest
operator|.
name|getQueryString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|requestURI
init|=
name|httpServletRequest
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"requestURI = ["
operator|+
name|requestURI
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"queryString = ["
operator|+
name|queryString
operator|+
literal|"]"
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"method = ["
operator|+
name|httpServletRequest
operator|.
name|getMethod
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|queryString
operator|!=
literal|null
operator|&&
name|queryString
operator|.
name|indexOf
argument_list|(
literal|"_query="
argument_list|)
operator|>=
literal|0
operator|)
operator|&&
name|filterNames
operator|.
name|contains
argument_list|(
name|TEST_GET_QUERY
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
name|TEST_GET_QUERY
operator|+
literal|" met"
argument_list|)
expr_stmt|;
name|conditionMet
operator|=
literal|true
expr_stmt|;
block|}
if|else if
condition|(
name|requestURI
operator|!=
literal|null
operator|&&
name|requestURI
operator|.
name|indexOf
argument_list|(
literal|"/rest/"
argument_list|)
operator|>=
literal|0
operator|&&
name|filterNames
operator|.
name|contains
argument_list|(
name|TEST_REST
argument_list|)
condition|)
block|{
name|conditionMet
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|TEST_REST
operator|+
literal|" met"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|httpServletRequest
operator|.
name|getMethod
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"PUT"
argument_list|)
operator|&&
name|filterNames
operator|.
name|contains
argument_list|(
name|TEST_PUT
argument_list|)
condition|)
block|{
name|conditionMet
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|TEST_PUT
operator|+
literal|" met"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|httpServletRequest
operator|.
name|getMethod
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"DELETE"
argument_list|)
operator|&&
name|filterNames
operator|.
name|contains
argument_list|(
name|TEST_DELETE
argument_list|)
condition|)
block|{
name|conditionMet
operator|=
literal|true
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|TEST_DELETE
operator|+
literal|" met"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|httpServletRequest
operator|.
name|getMethod
argument_list|()
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"POST"
argument_list|)
condition|)
block|{
block|}
if|if
condition|(
operator|!
name|conditionMet
condition|)
block|{
name|filterChain
operator|.
name|doFilter
argument_list|(
name|httpServletRequest
argument_list|,
name|httpServletResponse
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|allowFirst
condition|)
block|{
if|if
condition|(
name|allowMatch
argument_list|(
name|httpServletRequest
argument_list|)
condition|)
block|{
name|filterChain
operator|.
name|doFilter
argument_list|(
name|httpServletRequest
argument_list|,
name|httpServletResponse
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|denyMatch
argument_list|(
name|httpServletRequest
argument_list|)
condition|)
block|{
name|httpServletResponse
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|allowMatch
argument_list|(
name|httpServletRequest
argument_list|)
condition|)
block|{
name|filterChain
operator|.
name|doFilter
argument_list|(
name|httpServletRequest
argument_list|,
name|httpServletResponse
argument_list|)
expr_stmt|;
block|}
block|}
name|httpServletResponse
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
expr_stmt|;
block|}
specifier|private
name|String
name|validName
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|)
block|{
name|String
name|name
init|=
name|servletRequest
operator|.
name|getRemoteHost
argument_list|()
decl_stmt|;
specifier|final
name|String
name|address
init|=
name|servletRequest
operator|.
name|getRemoteAddr
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
name|address
argument_list|)
condition|)
block|{
try|try
block|{
name|name
operator|=
name|InetAddress
operator|.
name|getByName
argument_list|(
name|address
argument_list|)
operator|.
name|getCanonicalHostName
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnknownHostException
name|e
parameter_list|)
block|{
name|name
operator|=
literal|null
expr_stmt|;
block|}
block|}
return|return
name|name
return|;
block|}
specifier|private
name|boolean
name|denyMatch
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|validName
argument_list|(
name|servletRequest
argument_list|)
decl_stmt|;
specifier|final
name|String
name|address
init|=
name|servletRequest
operator|.
name|getRemoteAddr
argument_list|()
decl_stmt|;
return|return
name|denys
operator|.
name|contains
argument_list|(
name|address
argument_list|)
operator|||
name|denys
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|allowMatch
parameter_list|(
name|ServletRequest
name|servletRequest
parameter_list|)
block|{
specifier|final
name|String
name|name
init|=
name|validName
argument_list|(
name|servletRequest
argument_list|)
decl_stmt|;
specifier|final
name|String
name|address
init|=
name|servletRequest
operator|.
name|getRemoteAddr
argument_list|()
decl_stmt|;
return|return
name|allows
operator|.
name|contains
argument_list|(
name|address
argument_list|)
operator|||
name|allows
operator|.
name|contains
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|allows
operator|=
literal|null
expr_stmt|;
name|denys
operator|=
literal|null
expr_stmt|;
name|filterNames
operator|=
literal|null
expr_stmt|;
name|filterConfig
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|FilterConfig
name|getFilterConfig
parameter_list|()
block|{
return|return
name|filterConfig
return|;
block|}
specifier|public
name|void
name|setFilterConfig
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
block|{
name|this
operator|.
name|filterConfig
operator|=
name|filterConfig
expr_stmt|;
specifier|final
name|Enumeration
name|initParams
init|=
name|filterConfig
operator|.
name|getInitParameterNames
argument_list|()
decl_stmt|;
comment|// no initial parameters, so invoke the next filter in the chain
if|if
condition|(
name|initParams
operator|!=
literal|null
condition|)
block|{
name|allows
operator|.
name|clear
argument_list|()
expr_stmt|;
name|denys
operator|.
name|clear
argument_list|()
expr_stmt|;
name|filterNames
operator|.
name|clear
argument_list|()
expr_stmt|;
while|while
condition|(
name|initParams
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
operator|(
name|String
operator|)
name|initParams
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|filterConfig
operator|.
name|getInitParameter
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Parameter ["
operator|+
name|name
operator|+
literal|"]["
operator|+
name|value
operator|+
literal|"]"
argument_list|)
expr_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"exclude"
argument_list|)
condition|)
block|{
name|denys
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"include"
argument_list|)
condition|)
block|{
name|allows
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
literal|"type"
argument_list|)
condition|)
block|{
name|filterNames
operator|.
name|add
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"order"
argument_list|)
condition|)
block|{
name|allowFirst
operator|=
name|value
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"allow,deny"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

