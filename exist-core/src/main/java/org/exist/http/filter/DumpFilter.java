begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|filter
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|Cookie
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|sql
operator|.
name|Timestamp
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Locale
import|;
end_import

begin_class
specifier|public
class|class
name|DumpFilter
implements|implements
name|Filter
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|DumpFilter
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// ----------------------------------------------------- Instance Variables
comment|/**      * The filter configuration object we are associated with.  If this value      * is null, this filter instance is not currently configured.      */
specifier|private
name|FilterConfig
name|filterConfig
init|=
literal|null
decl_stmt|;
comment|// --------------------------------------------------------- Public Methods
comment|/**      * Take this filter out of service.      */
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|this
operator|.
name|filterConfig
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Time the processing that is performed by all subsequent filters in the      * current filter stack, including the ultimately invoked servlet.      *      * @param request  The servlet request we are processing      * @param response The servlet response we are creating      * @param chain    The filter chain we are processing      * @throws IOException      if an input/output error occurs      * @throws ServletException if a servlet error occurs      */
specifier|public
name|void
name|doFilter
parameter_list|(
name|ServletRequest
name|request
parameter_list|,
name|ServletResponse
name|response
parameter_list|,
name|FilterChain
name|chain
parameter_list|)
throws|throws
name|IOException
throws|,
name|ServletException
block|{
if|if
condition|(
operator|!
name|LOG
operator|.
name|isInfoEnabled
argument_list|()
condition|)
block|{
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
return|return;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"== START ===================================="
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Request Received at "
operator|+
operator|(
operator|new
name|Timestamp
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"============================================="
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|" characterEncoding="
operator|+
name|request
operator|.
name|getCharacterEncoding
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"     contentLength="
operator|+
name|request
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"       contentType="
operator|+
name|request
operator|.
name|getContentType
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"            locale="
operator|+
name|request
operator|.
name|getLocale
argument_list|()
argument_list|)
expr_stmt|;
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"           locales="
argument_list|)
expr_stmt|;
specifier|final
name|Enumeration
name|locales
init|=
name|request
operator|.
name|getLocales
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|locales
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|Locale
name|locale
init|=
operator|(
name|Locale
operator|)
name|locales
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|first
condition|)
block|{
name|first
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|locale
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|Enumeration
name|names
init|=
name|request
operator|.
name|getParameterNames
argument_list|()
decl_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
literal|"         parameter="
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|"="
argument_list|)
expr_stmt|;
specifier|final
name|String
name|values
index|[]
init|=
name|request
operator|.
name|getParameterValues
argument_list|(
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|buffer
operator|.
name|append
argument_list|(
name|values
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
name|buffer
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"          protocol="
operator|+
name|request
operator|.
name|getProtocol
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"        remoteAddr="
operator|+
name|request
operator|.
name|getRemoteAddr
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"        remoteHost="
operator|+
name|request
operator|.
name|getRemoteHost
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"            scheme="
operator|+
name|request
operator|.
name|getScheme
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"        serverName="
operator|+
name|request
operator|.
name|getServerName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"        serverPort="
operator|+
name|request
operator|.
name|getServerPort
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"          isSecure="
operator|+
name|request
operator|.
name|isSecure
argument_list|()
argument_list|)
expr_stmt|;
comment|// Render the HTTP servlet request properties
if|if
condition|(
name|request
operator|instanceof
name|HttpServletRequest
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"---------------------------------------------"
argument_list|)
expr_stmt|;
specifier|final
name|HttpServletRequest
name|hrequest
init|=
operator|(
name|HttpServletRequest
operator|)
name|request
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"       contextPath="
operator|+
name|hrequest
operator|.
name|getContextPath
argument_list|()
argument_list|)
expr_stmt|;
name|Cookie
name|cookies
index|[]
init|=
name|hrequest
operator|.
name|getCookies
argument_list|()
decl_stmt|;
if|if
condition|(
name|cookies
operator|==
literal|null
condition|)
block|{
name|cookies
operator|=
operator|new
name|Cookie
index|[
literal|0
index|]
expr_stmt|;
block|}
for|for
control|(
name|Cookie
name|cookie
range|:
name|cookies
control|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"            cookie="
operator|+
name|cookie
operator|.
name|getName
argument_list|()
operator|+
literal|"="
operator|+
name|cookie
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|names
operator|=
name|hrequest
operator|.
name|getHeaderNames
argument_list|()
expr_stmt|;
while|while
condition|(
name|names
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
specifier|final
name|String
name|name
init|=
operator|(
name|String
operator|)
name|names
operator|.
name|nextElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|value
init|=
name|hrequest
operator|.
name|getHeader
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"            header="
operator|+
name|name
operator|+
literal|"="
operator|+
name|value
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"            method="
operator|+
name|hrequest
operator|.
name|getMethod
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"          pathInfo="
operator|+
name|hrequest
operator|.
name|getPathInfo
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"       queryString="
operator|+
name|hrequest
operator|.
name|getQueryString
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"        remoteUser="
operator|+
name|hrequest
operator|.
name|getRemoteUser
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"requestedSessionId="
operator|+
name|hrequest
operator|.
name|getRequestedSessionId
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"        requestURI="
operator|+
name|hrequest
operator|.
name|getRequestURI
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"       servletPath="
operator|+
name|hrequest
operator|.
name|getServletPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|LOG
operator|.
name|info
argument_list|(
literal|"== END ======================================"
argument_list|)
expr_stmt|;
comment|// Pass control on to the next filter
name|chain
operator|.
name|doFilter
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
expr_stmt|;
block|}
comment|/**      * Place this filter into service.      *      * @param filterConfig The filter configuration object      */
specifier|public
name|void
name|init
parameter_list|(
name|FilterConfig
name|filterConfig
parameter_list|)
throws|throws
name|ServletException
block|{
name|this
operator|.
name|filterConfig
operator|=
name|filterConfig
expr_stmt|;
block|}
comment|/**      * Return a String representation of this object.      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|filterConfig
operator|==
literal|null
condition|)
block|{
return|return
operator|(
literal|"RequestDumperFilter()"
operator|)
return|;
block|}
return|return
literal|"RequestDumperFilter("
operator|+
name|filterConfig
operator|+
literal|")"
return|;
block|}
block|}
end_class

end_unit

