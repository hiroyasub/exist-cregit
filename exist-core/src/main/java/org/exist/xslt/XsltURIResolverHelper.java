begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2020 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xslt
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|repo
operator|.
name|PkgXsltModuleURIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|EXistURISchemeURIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|URIResolverHierarchy
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Utilities for XSLT URI Resolution.  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|XsltURIResolverHelper
block|{
comment|/**      * Get a URI Resolver for XSLT Modules.      *      * @param brokerPool the database      * @param defaultResolver the default fallback resolver, or null      * @param base the URI base, or null      * @param avoidSelf true to avoid nesting {@link URIResolverHierarchy}      *      * @return the URIResolver, or null if there is no resolver      */
specifier|public
specifier|static
annotation|@
name|Nullable
name|URIResolver
name|getXsltURIResolver
parameter_list|(
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|URIResolver
name|defaultResolver
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|base
parameter_list|,
specifier|final
name|boolean
name|avoidSelf
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|URIResolver
argument_list|>
name|resolvers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
comment|// database resolver
name|resolvers
operator|.
name|add
argument_list|(
operator|new
name|EXistURISchemeURIResolver
argument_list|(
operator|new
name|EXistURIResolver
argument_list|(
name|brokerPool
argument_list|,
name|base
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// EXpath Pkg resolver
name|brokerPool
operator|.
name|getExpathRepo
argument_list|()
operator|.
name|map
argument_list|(
name|repo
lambda|->
name|resolvers
operator|.
name|add
argument_list|(
operator|new
name|PkgXsltModuleURIResolver
argument_list|(
name|repo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// default resolver
if|if
condition|(
name|defaultResolver
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|avoidSelf
condition|)
block|{
if|if
condition|(
operator|!
name|defaultResolver
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|URIResolverHierarchy
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|resolvers
operator|.
name|add
argument_list|(
name|defaultResolver
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|resolvers
operator|.
name|add
argument_list|(
name|defaultResolver
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|resolvers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|new
name|URIResolverHierarchy
argument_list|(
name|resolvers
argument_list|)
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

