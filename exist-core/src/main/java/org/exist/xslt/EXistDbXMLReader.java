begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xslt
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|DTDHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * {@link org.xml.sax.XMLReader} that uses an {@link org.exist.storage.serializers.Serializer}  * to send a database document to a content handler.  *  * @author<a href="mailto:Paul.L.Merchant.Jr@dartmouth.edu">Paul Merchant, Jr.</a>  */
end_comment

begin_class
specifier|public
class|class
name|EXistDbXMLReader
implements|implements
name|XMLReader
implements|,
name|Locator
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|EXistDbSource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|ContentHandler
name|contentHandler
decl_stmt|;
specifier|private
name|ErrorHandler
name|errHandler
decl_stmt|;
specifier|private
name|InputSource
name|source
decl_stmt|;
specifier|public
name|EXistDbXMLReader
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|contentHandler
return|;
block|}
annotation|@
name|Override
specifier|public
name|DTDHandler
name|getDTDHandler
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
name|this
operator|.
name|errHandler
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|InputSource
name|input
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|input
operator|instanceof
name|EXistDbInputSource
operator|)
condition|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"EXistDbXMLReader only accepts EXistDbInputSource"
argument_list|)
throw|;
block|}
name|EXistDbInputSource
name|source
init|=
operator|(
name|EXistDbInputSource
operator|)
name|input
decl_stmt|;
try|try
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|source
operator|.
name|getBroker
argument_list|()
operator|.
name|newSerializer
argument_list|()
decl_stmt|;
name|this
operator|.
name|source
operator|=
name|input
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|setDocumentLocator
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|serializer
operator|.
name|setSAXHandlers
argument_list|(
name|this
operator|.
name|contentHandler
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|toSAX
argument_list|(
name|source
operator|.
name|getDocument
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|contentHandler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"SaxParseException: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|errHandler
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception handling exception: {}"
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception: {}"
argument_list|,
name|e
argument_list|)
expr_stmt|;
try|try
block|{
comment|/* FIXME:  Do we need to forward the exception to the errHandler, or has this                  * been done for us? - PLM 		 */
name|this
operator|.
name|errHandler
operator|.
name|error
argument_list|(
operator|new
name|SAXParseException
argument_list|(
literal|"Unable to parse document"
argument_list|,
literal|null
argument_list|,
name|e
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e2
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception handling exception: {}"
argument_list|,
name|e2
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|this
operator|.
name|source
operator|=
literal|null
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|systemId
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setContentHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|contentHandler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDTDHandler
parameter_list|(
name|DTDHandler
name|handler
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|errHandler
operator|=
name|handler
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|int
name|getColumnNumber
parameter_list|()
block|{
comment|// FIXME:  Can we do better than -1?
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLineNumber
parameter_list|()
block|{
comment|// FIXME:  Can we do better than -1?
return|return
operator|-
literal|1
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSystemId
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|source
operator|.
name|getSystemId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPublicId
parameter_list|()
block|{
return|return
name|this
operator|.
name|source
operator|==
literal|null
condition|?
literal|null
else|:
name|this
operator|.
name|source
operator|.
name|getPublicId
argument_list|()
return|;
block|}
block|}
end_class

end_unit

