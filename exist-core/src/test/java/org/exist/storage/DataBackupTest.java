begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|ZipFile
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|DataBackupTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
name|TemporaryFolder
name|folder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|backup
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|IOException
block|{
specifier|final
name|TestableDataBackup
name|dataBackup
init|=
operator|new
name|TestableDataBackup
argument_list|(
name|folder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
argument_list|)
decl_stmt|;
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|triggerSystemTask
argument_list|(
name|dataBackup
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|dataBackup
operator|.
name|isCompleted
argument_list|()
condition|)
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|lastBackup
init|=
name|dataBackup
operator|.
name|getLastBackup
argument_list|()
decl_stmt|;
name|assertTrue
argument_list|(
name|lastBackup
operator|.
name|isPresent
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|ZipFile
name|zipFile
init|=
operator|new
name|ZipFile
argument_list|(
name|lastBackup
operator|.
name|get
argument_list|()
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|zipFile
operator|.
name|getEntry
argument_list|(
literal|"collections.dbx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zipFile
operator|.
name|getEntry
argument_list|(
literal|"dom.dbx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zipFile
operator|.
name|getEntry
argument_list|(
literal|"structure.dbx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zipFile
operator|.
name|getEntry
argument_list|(
literal|"symbols.dbx"
argument_list|)
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|zipFile
operator|.
name|getEntry
argument_list|(
literal|"values.dbx"
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
class|class
name|TestableDataBackup
extends|extends
name|DataBackup
block|{
specifier|private
specifier|volatile
name|boolean
name|completed
init|=
literal|false
decl_stmt|;
specifier|public
name|TestableDataBackup
parameter_list|(
specifier|final
name|Path
name|destination
parameter_list|)
block|{
name|super
argument_list|(
name|destination
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|EXistException
block|{
name|super
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|)
expr_stmt|;
name|completed
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|isCompleted
parameter_list|()
block|{
return|return
name|completed
return|;
block|}
block|}
block|}
end_class

end_unit

