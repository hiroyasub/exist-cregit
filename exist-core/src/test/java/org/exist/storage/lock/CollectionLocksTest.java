begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|SupplierE
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicReference
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for Collection Locks  *  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|CollectionLocksTest
block|{
specifier|private
specifier|static
specifier|final
name|int
name|CONCURRENCY_LEVEL
init|=
name|Runtime
operator|.
name|getRuntime
argument_list|()
operator|.
name|availableProcessors
argument_list|()
operator|*
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|TEST_DEADLOCK_TIMEOUT
init|=
literal|8000
decl_stmt|;
comment|// 4 seconds
comment|/**      * In the noDeadlock tests this is the maximum amount of time to wait for the second thread to acquire its lock      *      * Note: this must be greater than the period required to acquire a lock under a contention of two threads      */
specifier|private
specifier|static
specifier|final
name|int
name|AWAIT_OTHER_THREAD_TIMEOUT
init|=
name|TEST_DEADLOCK_TIMEOUT
operator|/
literal|4
decl_stmt|;
comment|/**      * In the stress deadlock tests, the maximum amount of time      * a thread should sleep whilst pausing (in the effort to cause a deadlock on contended lock)      *      * Note: this should likely be greater than the period required to acquire a lock under contention of CONCURRENCY_LEVEL threads      */
specifier|private
specifier|static
specifier|final
name|int
name|STRESS_DEADLOCK_THREAD_SLEEP
init|=
literal|100
decl_stmt|;
comment|// 100ms
comment|/**      * The maximum amount of time we should allow deadlock stress      * tests to execute their threads for, after which we assume      * a deadlock was caused      *      * Default: Twice the (maximum) sleep time of the total number of threads involved in the test      */
specifier|private
specifier|static
specifier|final
name|int
name|STRESS_DEADLOCK_TEST_TIMEOUT
init|=
operator|(
name|STRESS_DEADLOCK_THREAD_SLEEP
operator|*
name|CONCURRENCY_LEVEL
operator|)
operator|*
literal|2
decl_stmt|;
comment|/**      * In the single writer tests, the maximum amount of time      * a thread should sleep whilst waiting for thread queueing      *      * Note: this should likely be greater than the period required to acquire a lock under contention of CONCURRENCY_LEVEL threads      */
specifier|private
specifier|static
specifier|final
name|int
name|SINGLE_WRITER_THREAD_SLEEP
init|=
literal|10
decl_stmt|;
comment|// 10ms
comment|/**      * The maximum amount of time we should allow singleWriter      * tests to execute their threads for, after which we assume      * a deadlock was caused      *      * Default: Quadruple the (maximum) sleep time of the total number of threads involved in the test      */
specifier|private
specifier|static
specifier|final
name|int
name|SINGLE_WRITER_TEST_TIMEOUT
init|=
operator|(
name|SINGLE_WRITER_THREAD_SLEEP
operator|*
name|CONCURRENCY_LEVEL
operator|)
operator|*
literal|4
decl_stmt|;
comment|/**      * The maximum amount of time we should allow multiReaders      * tests to execute their threads for, after which we assume      * a deadlock was caused      *      * Default: 4 seconds      */
specifier|private
specifier|static
specifier|final
name|int
name|MULTI_READER_TEST_TIMEOUT
init|=
literal|4000
decl_stmt|;
comment|// 4 seconds
specifier|private
specifier|static
specifier|final
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
comment|/**      * This test makes sure that there can be multiple reader locks      * held by different threads on the same Collection at the same time      *      * A {@link CountDownLatch} is used to ensure that all threads hold      * a read lock at the same time      */
annotation|@
name|Test
specifier|public
name|void
name|multipleReaders
parameter_list|()
throws|throws
name|LockException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|numberOfThreads
init|=
name|CONCURRENCY_LEVEL
decl_stmt|;
specifier|final
name|XmldbURI
name|collectionUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|continueLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|numberOfThreads
argument_list|)
decl_stmt|;
comment|// thread definition
specifier|final
name|Supplier
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|readCollectionFn
init|=
parameter_list|()
lambda|->
parameter_list|()
lambda|->
block|{
block_content|try(final ManagedCollectionLock collectionLock
init|=
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|collectionUri
argument_list|)
init|)
block|{
name|continueLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|continueLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
empty_stmt|;
comment|// create threads
specifier|final
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|callables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
condition|;
name|i
operator|++
control|)
block|{
name|callables
operator|.
name|add
argument_list|(
name|readCollectionFn
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// execute threads
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numberOfThreads
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|,
name|MULTI_READER_TEST_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
comment|// await all threads to finish
for|for
control|(
specifier|final
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
if|if
condition|(
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"multipleReaders test likely showed a thread deadlock"
argument_list|)
expr_stmt|;
block|}
block|}
name|executorService
operator|.
name|shutdown
parameter_list|()
constructor_decl|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|continueLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_class

begin_comment
comment|/**      * This test makes sure that there can be only a single writer lock      * held by any one thread on the same Collection      * at the same time      *      * A {@link CountDownLatch} is used to ensure that the first thread      * holds the write lock when the second thread attempts to acquire it      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|singleWriter
parameter_list|()
throws|throws
name|LockException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|singleWriter
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This test makes sure that there can be only a single writer lock      * held by any one thread on the same Collection (and parent Collection)      * at the same time      *      * A {@link CountDownLatch} is used to ensure that the first thread      * holds the write lock when the second thread attempts to acquire it      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|singleWriter_lockParent
parameter_list|()
throws|throws
name|LockException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
name|singleWriter
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * This test abstraction makes sure that there can be only a single writer lock      * held by any one thread on the same Collection (and optionally parent Collection)      * at the same time      *      * A {@link CountDownLatch} is used to ensure that the first thread      * holds the write lock when the second thread attempts to acquire it      */
end_comment

begin_function
specifier|private
name|void
name|singleWriter
parameter_list|(
specifier|final
name|boolean
name|lockParent
parameter_list|)
throws|throws
name|LockException
throws|,
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|numberOfThreads
init|=
name|CONCURRENCY_LEVEL
decl_stmt|;
specifier|final
name|XmldbURI
name|collectionUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|thread2StartLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|AtomicReference
name|firstWriteHolder
init|=
operator|new
name|AtomicReference
argument_list|()
decl_stmt|;
specifier|final
name|AtomicReference
name|lastWriteHolder
init|=
operator|new
name|AtomicReference
argument_list|()
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable1
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|collectionLock
init|=
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|collectionUri
argument_list|,
name|lockParent
argument_list|)
init|)
block|{
name|thread2StartLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|firstWriteHolder
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|// make sure the second thread is waiting for the write lock before we continue
name|Thread
operator|.
name|sleep
argument_list|(
name|SINGLE_WRITER_THREAD_SLEEP
argument_list|)
expr_stmt|;
comment|//                    if(lockParent) {
comment|//                        while (!lockManager.getCollectionLock(collectionUri.removeLastSegment().getCollectionPath()).hasQueuedThreads()) {
comment|//                            Thread.sleep(SINGLE_WRITER_THREAD_SLEEP);
comment|//                        }
comment|//                    } else {
comment|//                        while (!lockManager.getCollectionLock(collectionUri.getCollectionPath()).hasQueuedThreads()) {
comment|//                            Thread.sleep(SINGLE_WRITER_THREAD_SLEEP);
comment|//                        }
comment|//                    }
name|lastWriteHolder
operator|.
name|set
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable2
init|=
operator|new
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Void
name|call
parameter_list|()
throws|throws
name|Exception
block|{
name|thread2StartLatch
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|collectionLock
init|=
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|collectionUri
argument_list|,
name|lockParent
argument_list|)
init|)
block|{
name|firstWriteHolder
operator|.
name|compareAndSet
argument_list|(
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|lastWriteHolder
operator|.
name|set
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
block|}
decl_stmt|;
comment|// create threads
specifier|final
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|callables
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|callable2
argument_list|,
name|callable1
argument_list|)
decl_stmt|;
comment|// execute threads
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numberOfThreads
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|,
name|SINGLE_WRITER_TEST_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
comment|// await all threads to finish
for|for
control|(
specifier|final
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
if|if
condition|(
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"singleWriter test likely showed a thread deadlock"
argument_list|)
expr_stmt|;
block|}
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|thread2StartLatch
operator|.
name|getCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|callable1
argument_list|,
name|firstWriteHolder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|callable2
argument_list|,
name|lastWriteHolder
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 1 - Two Writers, Same Subtree, Parent first      *      * t1,1 - request WRITE_LOCK /db/x/y      * t2,1 - request WRITE_LOCK /db/x/y/z      * t1,2 - request WRITE_LOCK /db/x/y/z      * t2,2 - request WRITE_LOCK /db/x/y      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S1_noDeadlock_writeWrite_subtree_parentFirst
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
name|noDeadlock_writeWrite
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 2 - Two Writers, Same Subtree, Descendant first      *      * t1,1 - request WRITE_LOCK /db/x/y/z      * t2,1 - request WRITE_LOCK /db/x/y      * t1,2 - request WRITE_LOCK /db/x/y      * t2,2 - request WRITE_LOCK /db/x/y/z      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S2_noDeadlock_writeWrite_subtree_descendantFirst
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y"
argument_list|)
decl_stmt|;
name|noDeadlock_writeWrite
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 3 - Two Writers, No common subtree, Left to right      *      * t1,1 - request WRITE_LOCK /db/a      * t2,1 - request WRITE_LOCK /db/b      * t1,2 - request WRITE_LOCK /db/b      * t2,2 - request WRITE_LOCK /db/a      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S3_noDeadlock_writeWrite_leftRight
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/b"
argument_list|)
decl_stmt|;
name|noDeadlock_writeWrite
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 4 - Two Writers, No common subtree, Right to left      *      * t1,1 - request WRITE_LOCK /db/b      * t2,1 - request WRITE_LOCK /db/a      * t1,2 - request WRITE_LOCK /db/a      * t2,2 - request WRITE_LOCK /db/b      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S4_noDeadlock_writeWrite_rightLeft
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/b"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a"
argument_list|)
decl_stmt|;
name|noDeadlock_writeWrite
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 5 - One Writer and One Reader, Same Subtree, Parent first      *      * t1,1 - request WRITE_LOCK /db/x/y      * t2,1 - request READ_LOCK /db/x/y/z      * t1,2 - request WRITE_LOCK /db/x/y/z      * t2,2 - request READ_LOCK /db/x/y      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S5_noDeadlock_writeRead_subtree_parentFirst
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
name|noDeadlock_writeRead
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 6 - One Writer and One Reader, Same Subtree, Descendant first      *      * t1,1 - request WRITE_LOCK /db/x/y/z      * t2,1 - request READ_LOCK /db/x/y      * t1,2 - request WRITE_LOCK /db/x/y      * t2,2 - request READ_LOCK /db/x/y/z      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S6_noDeadlock_writeRead_subtree_descendantFirst
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y"
argument_list|)
decl_stmt|;
name|noDeadlock_writeRead
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 7 - One Writer and One Reader, No common subtree, Left to right      *      * t1,1 - request WRITE_LOCK /db/a      * t2,1 - request READ_LOCK /db/b      * t1,2 - request WRITE_LOCK /db/b      * t2,2 - request READ_LOCK /db/a      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S7_noDeadlock_writeRead_leftRight
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/b"
argument_list|)
decl_stmt|;
name|noDeadlock_writeRead
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 8 - One Writer and One Reader, No common subtree, Right to left      *      * t1,1 - request WRITE_LOCK /db/b      * t2,1 - request READ_LOCK /db/a      * t1,2 - request WRITE_LOCK /db/a      * t2,2 - request READ_LOCK /db/b      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S8_noDeadlock_writeRead_rightLeft
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/b"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a"
argument_list|)
decl_stmt|;
name|noDeadlock_writeRead
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 9 - Two Readers, Same Subtree, Parent first      *      * t1,1 - request READ_LOCK /db/x/y      * t2,1 - request READ_LOCK /db/x/y/z      * t1,2 - request READ_LOCK /db/x/y/z      * t2,2 - request READ_LOCK /db/x/y      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S9_noDeadlock_readRead_subtree_parentFirst
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
name|noDeadlock_readRead
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 10 - Two Readers, Same Subtree, Descendant first      *      * t1,1 - request READ_LOCK /db/x/y/z      * t2,1 - request READ_LOCK /db/x/y      * t1,2 - request READ_LOCK /db/x/y      * t2,2 - request READ_LOCK /db/x/y/z      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S10_noDeadlock_readRead_subtree_descendantFirst
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y"
argument_list|)
decl_stmt|;
name|noDeadlock_readRead
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 11 - Two Readers, No common subtree, Left to right      *      * t1,1 - request READ_LOCK /db/a      * t2,1 - request READ_LOCK /db/b      * t1,2 - request READ_LOCK /db/b      * t2,2 - request READ_LOCK /db/a      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S11_noDeadlock_readRead_leftRight
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/b"
argument_list|)
decl_stmt|;
name|noDeadlock_readRead
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_comment
comment|/**      * Scenario 12 - Two Readers, No common subtree, Right to left      *      * t1,1 - request READ_LOCK /db/b      * t2,1 - request READ_LOCK /db/a      * t1,2 - request READ_LOCK /db/a      * t2,2 - request READ_LOCK /db/b      */
end_comment

begin_function
annotation|@
name|Test
specifier|public
name|void
name|S12_noDeadlock_readRead_rightLeft
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/b"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a"
argument_list|)
decl_stmt|;
name|noDeadlock_readRead
argument_list|(
name|col1Uri
argument_list|,
name|col2Uri
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|noDeadlock_writeWrite
parameter_list|(
specifier|final
name|XmldbURI
name|col1Uri
parameter_list|,
specifier|final
name|XmldbURI
name|col2Uri
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|t1t2
init|=
name|createInterleaved
argument_list|(
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col1Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col2Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t2,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col2Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,2
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col1Uri
argument_list|,
literal|false
argument_list|)
comment|//t2,2
argument_list|)
decl_stmt|;
name|noDeadlock
argument_list|(
name|t1t2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|noDeadlock_writeRead
parameter_list|(
specifier|final
name|XmldbURI
name|col1Uri
parameter_list|,
specifier|final
name|XmldbURI
name|col2Uri
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|t1t2
init|=
name|createInterleaved
argument_list|(
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col1Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col2Uri
argument_list|)
argument_list|,
comment|//t2,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col2Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,2
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col1Uri
argument_list|)
comment|//t2,2
argument_list|)
decl_stmt|;
name|noDeadlock
argument_list|(
name|t1t2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|noDeadlock_readRead
parameter_list|(
specifier|final
name|XmldbURI
name|col1Uri
parameter_list|,
specifier|final
name|XmldbURI
name|col2Uri
parameter_list|)
throws|throws
name|InterruptedException
block|{
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|t1t2
init|=
name|createInterleaved
argument_list|(
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col1Uri
argument_list|)
argument_list|,
comment|//t1,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col2Uri
argument_list|)
argument_list|,
comment|//t2,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col2Uri
argument_list|)
argument_list|,
comment|//t1,2
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col1Uri
argument_list|)
comment|//t2,2
argument_list|)
decl_stmt|;
name|noDeadlock
argument_list|(
name|t1t2
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|void
name|noDeadlock
parameter_list|(
specifier|final
name|Tuple2
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|t1t2
parameter_list|)
throws|throws
name|InterruptedException
block|{
comment|// create threads
specifier|final
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|callables
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|t1t2
operator|.
name|_1
argument_list|,
name|t1t2
operator|.
name|_2
argument_list|)
decl_stmt|;
comment|// execute threads
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|callables
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|,
name|TEST_DEADLOCK_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
comment|// await all threads to finish
for|for
control|(
specifier|final
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
if|if
condition|(
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Test likely showed a thread deadlock"
argument_list|)
expr_stmt|;
block|}
block|}
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
end_function

begin_function
specifier|private
name|Tuple2
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|,
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|createInterleaved
parameter_list|(
specifier|final
name|SupplierE
argument_list|<
name|ManagedCollectionLock
argument_list|,
name|LockException
argument_list|>
name|thread1Lock1
parameter_list|,
specifier|final
name|SupplierE
argument_list|<
name|ManagedCollectionLock
argument_list|,
name|LockException
argument_list|>
name|thread2Lock1
parameter_list|,
specifier|final
name|SupplierE
argument_list|<
name|ManagedCollectionLock
argument_list|,
name|LockException
argument_list|>
name|thread1Lock2
parameter_list|,
specifier|final
name|SupplierE
argument_list|<
name|ManagedCollectionLock
argument_list|,
name|LockException
argument_list|>
name|thread2Lock2
parameter_list|)
block|{
specifier|final
name|CountDownLatch
name|thread2StartLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|thread1ContinueLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|thread2ContinueLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|thread1FinishLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|thread2FinishLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable1
init|=
parameter_list|()
lambda|->
block|{
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|col1Lock
init|=
name|thread1Lock1
operator|.
name|get
argument_list|()
init|)
block|{
name|thread2StartLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|thread1ContinueLatch
operator|.
name|await
argument_list|(
name|AWAIT_OTHER_THREAD_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|col2Lock
init|=
name|thread1Lock2
operator|.
name|get
argument_list|()
init|)
block|{
name|thread2ContinueLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|thread1FinishLatch
operator|.
name|await
argument_list|(
name|AWAIT_OTHER_THREAD_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
expr_stmt|;
block|}
name|thread2FinishLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
decl_stmt|;
specifier|final
name|Callable
argument_list|<
name|Void
argument_list|>
name|callable2
init|=
parameter_list|()
lambda|->
block|{
name|thread2StartLatch
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|col2Lock
init|=
name|thread2Lock1
operator|.
name|get
argument_list|()
init|)
block|{
name|thread1ContinueLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|thread2ContinueLatch
operator|.
name|await
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|col1Lock
init|=
name|thread2Lock2
operator|.
name|get
argument_list|()
init|)
block|{
name|thread1FinishLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|thread2FinishLatch
operator|.
name|await
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
decl_stmt|;
return|return
operator|new
name|Tuple2
argument_list|<>
argument_list|(
name|callable1
argument_list|,
name|callable2
argument_list|)
return|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|stress_noDeadlock_writeWrite_subtree
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|numberOfThreads
init|=
name|CONCURRENCY_LEVEL
decl_stmt|;
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
name|stress_noDeadlock
argument_list|(
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col1Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col2Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t2,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col2Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,2
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col1Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t2,2
name|numberOfThreads
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|stress_noDeadlock_writeWrite
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|numberOfThreads
init|=
name|CONCURRENCY_LEVEL
decl_stmt|;
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/b"
argument_list|)
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
name|stress_noDeadlock
argument_list|(
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col1Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col2Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t2,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col2Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,2
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col1Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t2,2
name|numberOfThreads
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|stress_noDeadlock_writeRead_subtree
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|numberOfThreads
init|=
name|CONCURRENCY_LEVEL
decl_stmt|;
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
name|stress_noDeadlock
argument_list|(
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col1Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col2Uri
argument_list|)
argument_list|,
comment|//t2,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col2Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,2
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col1Uri
argument_list|)
argument_list|,
comment|//t2,2
name|numberOfThreads
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|stress_noDeadlock_writeRead
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|numberOfThreads
init|=
name|CONCURRENCY_LEVEL
decl_stmt|;
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/b"
argument_list|)
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
name|stress_noDeadlock
argument_list|(
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col1Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col2Uri
argument_list|)
argument_list|,
comment|//t2,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|col2Uri
argument_list|,
literal|false
argument_list|)
argument_list|,
comment|//t1,2
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col1Uri
argument_list|)
argument_list|,
comment|//t2,2
name|numberOfThreads
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|stress_noDeadlock_readRead_subtree
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|numberOfThreads
init|=
name|CONCURRENCY_LEVEL
decl_stmt|;
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/x/y/z"
argument_list|)
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
name|stress_noDeadlock
argument_list|(
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col1Uri
argument_list|)
argument_list|,
comment|//t1,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col2Uri
argument_list|)
argument_list|,
comment|//t2,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col2Uri
argument_list|)
argument_list|,
comment|//t1,2
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col1Uri
argument_list|)
argument_list|,
comment|//t2,2
name|numberOfThreads
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
annotation|@
name|Test
specifier|public
name|void
name|stress_noDeadlock_readRead
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|int
name|numberOfThreads
init|=
name|CONCURRENCY_LEVEL
decl_stmt|;
specifier|final
name|XmldbURI
name|col1Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/a"
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|col2Uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/b"
argument_list|)
decl_stmt|;
specifier|final
name|LockManager
name|lockManager
init|=
operator|new
name|LockManager
argument_list|(
name|CONCURRENCY_LEVEL
argument_list|)
decl_stmt|;
name|stress_noDeadlock
argument_list|(
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col1Uri
argument_list|)
argument_list|,
comment|//t1,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col2Uri
argument_list|)
argument_list|,
comment|//t2,1
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col2Uri
argument_list|)
argument_list|,
comment|//t1,2
parameter_list|()
lambda|->
name|lockManager
operator|.
name|acquireCollectionReadLock
argument_list|(
name|col1Uri
argument_list|)
argument_list|,
comment|//t2,2
name|numberOfThreads
argument_list|)
expr_stmt|;
block|}
end_function

begin_function
name|void
name|stress_noDeadlock
parameter_list|(
specifier|final
name|SupplierE
argument_list|<
name|ManagedCollectionLock
argument_list|,
name|LockException
argument_list|>
name|thread1Lock1
parameter_list|,
specifier|final
name|SupplierE
argument_list|<
name|ManagedCollectionLock
argument_list|,
name|LockException
argument_list|>
name|thread2Lock1
parameter_list|,
specifier|final
name|SupplierE
argument_list|<
name|ManagedCollectionLock
argument_list|,
name|LockException
argument_list|>
name|thread1Lock2
parameter_list|,
specifier|final
name|SupplierE
argument_list|<
name|ManagedCollectionLock
argument_list|,
name|LockException
argument_list|>
name|thread2Lock2
parameter_list|,
specifier|final
name|int
name|numberOfThreads
parameter_list|)
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
block|{
specifier|final
name|Supplier
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|col1ThenCol2_callable
init|=
parameter_list|()
lambda|->
parameter_list|()
lambda|->
block|{
block_content|try(final ManagedCollectionLock col1
init|=
name|thread1Lock1
operator|.
name|get
argument_list|()
init|)
block|{
name|sleep
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|col2
init|=
name|thread1Lock2
operator|.
name|get
argument_list|()
init|)
block|{
name|sleep
argument_list|()
expr_stmt|;
block|}
block|}
return|return
literal|null
return|;
block|}
end_function

begin_empty_stmt
empty_stmt|;
end_empty_stmt

begin_decl_stmt
specifier|final
name|Supplier
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|col2ThenCol1_callable
init|=
parameter_list|()
lambda|->
parameter_list|()
lambda|->
block|{
block_content|try(final ManagedCollectionLock col2
init|=
name|thread2Lock1
operator|.
name|get
argument_list|()
init|)
block|{
name|sleep
argument_list|()
expr_stmt|;
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|col1
init|=
name|thread2Lock2
operator|.
name|get
argument_list|()
init|)
block|{
name|sleep
argument_list|()
expr_stmt|;
block|}
block|}
end_decl_stmt

begin_return
return|return
literal|null
return|;
end_return

begin_comment
unit|};
comment|// create threads
end_comment

begin_decl_stmt
specifier|final
name|List
argument_list|<
name|Callable
argument_list|<
name|Void
argument_list|>
argument_list|>
name|callables
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
end_decl_stmt

begin_for
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numberOfThreads
operator|/
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|callables
operator|.
name|add
argument_list|(
name|col1ThenCol2_callable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|callables
operator|.
name|add
argument_list|(
name|col2ThenCol1_callable
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_for

begin_comment
comment|// execute threads
end_comment

begin_decl_stmt
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|numberOfThreads
argument_list|)
decl_stmt|;
end_decl_stmt

begin_decl_stmt
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Void
argument_list|>
argument_list|>
name|futures
init|=
name|executorService
operator|.
name|invokeAll
argument_list|(
name|callables
argument_list|,
name|STRESS_DEADLOCK_TEST_TIMEOUT
argument_list|,
name|TimeUnit
operator|.
name|MILLISECONDS
argument_list|)
decl_stmt|;
end_decl_stmt

begin_try
try|try
block|{
comment|// await all threads to finish
for|for
control|(
specifier|final
name|Future
argument_list|<
name|Void
argument_list|>
name|future
range|:
name|futures
control|)
block|{
if|if
condition|(
name|future
operator|.
name|isCancelled
argument_list|()
condition|)
block|{
name|fail
argument_list|(
literal|"Stress test likely showed a thread deadlock"
argument_list|)
expr_stmt|;
name|future
operator|.
name|get
argument_list|()
expr_stmt|;
comment|// get the result, so that if the future was cancelled due to an exception, the exception is thrown
block|}
block|}
block|}
finally|finally
block|{
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
end_try

begin_comment
unit|}
comment|/**      * Sleeps between 1 and STRESS_DEADLOCK_THREAD_SLEEP      * milliseconds      */
end_comment

begin_function
unit|private
specifier|static
name|void
name|sleep
parameter_list|()
block|{
try|try
block|{
name|Thread
operator|.
name|sleep
argument_list|(
literal|1
operator|+
name|random
operator|.
name|nextInt
argument_list|(
name|STRESS_DEADLOCK_THREAD_SLEEP
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
end_function

unit|}
end_unit

