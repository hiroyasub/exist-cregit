begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-17 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|input
operator|.
name|CountingInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|StandardOpenOption
operator|.
name|CREATE_NEW
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|RecoverBinaryTest
extends|extends
name|AbstractRecoverTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|Path
name|testFile1
init|=
literal|null
decl_stmt|;
specifier|private
specifier|static
name|Path
name|testFile2
init|=
literal|null
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|storeTempBinaryDocs
parameter_list|()
throws|throws
name|IOException
block|{
name|testFile1
operator|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob1.bin"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|testFile1
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"blob1"
argument_list|)
argument_list|,
name|CREATE_NEW
argument_list|)
expr_stmt|;
name|testFile2
operator|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|"blob2.bin"
argument_list|)
expr_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|testFile2
argument_list|,
name|Arrays
operator|.
name|asList
argument_list|(
literal|"blob2"
argument_list|)
argument_list|,
name|CREATE_NEW
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|Path
name|getTestFile1
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|testFile1
return|;
block|}
annotation|@
name|Override
specifier|protected
name|Path
name|getTestFile2
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|testFile2
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|storeAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|InputSource
name|data
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
block|{
specifier|final
name|Path
name|file
init|=
operator|(
operator|(
name|FileInputSource
operator|)
name|data
operator|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|content
init|=
name|Files
operator|.
name|readAllBytes
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|BinaryDocument
name|doc
init|=
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|dbFilename
argument_list|)
argument_list|,
name|content
argument_list|,
literal|"application/octet-stream"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
argument_list|,
name|doc
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|readAndVerify
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|doc
parameter_list|,
specifier|final
name|InputSource
name|data
parameter_list|,
specifier|final
name|String
name|dbFilename
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|file
init|=
operator|(
operator|(
name|FileInputSource
operator|)
name|data
operator|)
operator|.
name|getFile
argument_list|()
decl_stmt|;
specifier|final
name|BinaryDocument
name|binDoc
init|=
operator|(
name|BinaryDocument
operator|)
name|doc
decl_stmt|;
comment|// verify the size, to ensure it is the correct content
specifier|final
name|long
name|expectedSize
init|=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|binDoc
operator|.
name|getContentLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the actual content too!
specifier|final
name|byte
index|[]
name|bdata
init|=
operator|new
name|byte
index|[
operator|(
name|int
operator|)
name|binDoc
operator|.
name|getContentLength
argument_list|()
index|]
decl_stmt|;
try|try
init|(
specifier|final
name|CountingInputStream
name|cis
init|=
operator|new
name|CountingInputStream
argument_list|(
name|broker
operator|.
name|getBinaryResource
argument_list|(
name|binDoc
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|int
name|read
init|=
name|cis
operator|.
name|read
argument_list|(
name|bdata
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|bdata
operator|.
name|length
argument_list|,
name|read
argument_list|)
expr_stmt|;
specifier|final
name|String
name|content
init|=
operator|new
name|String
argument_list|(
name|bdata
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedSize
argument_list|,
name|cis
operator|.
name|getByteCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

