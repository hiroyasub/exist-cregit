begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2016 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|BTree
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|btree
operator|.
name|DBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeSelector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|QueryRewriter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
operator|.
name|ELEMENT
import|;
end_import

begin_class
specifier|public
class|class
name|MoveOverwriteResourceTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|XML1
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<test1>"
operator|+
literal|"<title>Hello1</title>"
operator|+
literal|"</test1>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XML2
init|=
literal|"<?xml version=\"1.0\"?>"
operator|+
literal|"<test2>"
operator|+
literal|"<title>Hello2</title>"
operator|+
literal|"</test2>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|TEST_COLLECTION_URI
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|.
name|append
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|SUB_TEST_COLLECTION_URI
init|=
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
literal|"test2"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|doc1Name
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"doc1.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|doc2Name
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"doc2.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|test1
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|test2
decl_stmt|;
comment|/**      * This test ensures that when moving an      * XML resource over the top of an existing      * XML resource, the overwritten resource      * is completely removed from the database; i.e.      * its nodes are no longer present in the structural      * index      */
annotation|@
name|Test
specifier|public
name|void
name|moveAndOverwriteXML
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|Database
name|db
init|=
name|startDB
argument_list|()
decl_stmt|;
specifier|final
name|DefaultDocumentSet
name|docs
init|=
operator|new
name|DefaultDocumentSet
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|db
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|db
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|store
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|test1
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|doc1Name
argument_list|)
argument_list|)
expr_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|test2
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|doc2Name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|move
argument_list|(
name|db
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|db
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|db
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|docs
operator|.
name|add
argument_list|(
name|test2
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|doc2Name
argument_list|)
argument_list|)
expr_stmt|;
name|checkIndex
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|Exception
block|{
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|test1
operator|=
name|createCollection
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|TEST_COLLECTION_URI
argument_list|)
expr_stmt|;
name|test2
operator|=
name|createCollection
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|SUB_TEST_COLLECTION_URI
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|test1
argument_list|,
name|doc1Name
argument_list|,
name|XML1
argument_list|)
expr_stmt|;
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|test2
argument_list|,
name|doc2Name
argument_list|,
name|XML2
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Collection
name|createCollection
parameter_list|(
name|Txn
name|txn
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
name|Collection
name|col
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|txn
argument_list|,
name|uri
argument_list|)
decl_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|col
argument_list|)
expr_stmt|;
return|return
name|col
return|;
block|}
specifier|private
name|void
name|store
parameter_list|(
name|Txn
name|txn
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|Collection
name|col
parameter_list|,
name|XmldbURI
name|name
parameter_list|,
name|String
name|data
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
block|{
name|IndexInfo
name|info
init|=
name|col
operator|.
name|validateXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|name
argument_list|,
name|data
argument_list|)
decl_stmt|;
name|col
operator|.
name|store
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|move
parameter_list|(
specifier|final
name|Database
name|db
parameter_list|)
throws|throws
name|Exception
block|{
name|TestIndex
name|index
init|=
operator|new
name|TestIndex
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|db
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|db
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getIndexManager
argument_list|()
operator|.
name|registerIndex
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
comment|//remove
name|index
operator|.
name|expectingDocument
operator|.
name|add
argument_list|(
name|test2
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|doc2Name
argument_list|)
argument_list|)
expr_stmt|;
comment|//remove
name|index
operator|.
name|expectingDocument
operator|.
name|add
argument_list|(
name|test1
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|doc1Name
argument_list|)
argument_list|)
expr_stmt|;
comment|//create
name|index
operator|.
name|expectingDocument
operator|.
name|add
argument_list|(
name|test2
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|doc2Name
argument_list|)
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|db
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|db
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|db
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|test1
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|doc1Name
argument_list|)
decl_stmt|;
name|broker
operator|.
name|moveResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|,
name|test2
argument_list|,
name|doc2Name
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|index
operator|.
name|expectingDocument
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkIndex
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentSet
name|docs
parameter_list|)
throws|throws
name|Exception
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|broker
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
specifier|final
name|NodeSelector
name|selector
init|=
name|NodeProxy
operator|::
operator|new
decl_stmt|;
name|NodeSet
name|nodes
decl_stmt|;
name|nodes
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ELEMENT
argument_list|,
name|docs
argument_list|,
operator|new
name|QName
argument_list|(
literal|"test2"
argument_list|)
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|nodes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|nodes
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ELEMENT
argument_list|,
name|docs
argument_list|,
operator|new
name|QName
argument_list|(
literal|"test1"
argument_list|)
argument_list|,
name|selector
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|nodes
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|BrokerPool
name|startDB
parameter_list|()
throws|throws
name|DatabaseConfigurationException
throws|,
name|EXistException
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|()
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|BrokerPool
operator|.
name|getInstance
argument_list|()
return|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
block|{
name|TestUtils
operator|.
name|cleanupDB
argument_list|()
expr_stmt|;
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
class|class
name|TestIndex
implements|implements
name|Index
block|{
name|LinkedList
argument_list|<
name|XmldbURI
argument_list|>
name|expectingDocument
init|=
operator|new
name|LinkedList
argument_list|<>
argument_list|()
decl_stmt|;
name|BrokerPool
name|pool
decl_stmt|;
annotation|@
name|Override
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
literal|"test"
return|;
block|}
annotation|@
name|Override
specifier|public
name|BrokerPool
name|getBrokerPool
parameter_list|()
block|{
return|return
name|pool
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|Path
name|dataDir
parameter_list|,
name|Element
name|config
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|open
parameter_list|()
throws|throws
name|DatabaseConfigurationException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|DBException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|sync
parameter_list|()
throws|throws
name|DBException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|()
throws|throws
name|DBException
block|{
block|}
annotation|@
name|Override
specifier|public
name|IndexWorker
name|getWorker
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
operator|new
name|IndexWorker
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|String
name|getIndexId
parameter_list|()
block|{
return|return
name|TestIndex
operator|.
name|this
operator|.
name|getIndexId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getIndexName
parameter_list|()
block|{
return|return
name|TestIndex
operator|.
name|this
operator|.
name|getIndexName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Object
name|configure
parameter_list|(
name|IndexController
name|controller
parameter_list|,
name|NodeList
name|configNodes
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaces
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectingDocument
operator|.
name|pollFirst
argument_list|()
argument_list|,
name|doc
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|StreamListener
operator|.
name|ReindexMode
name|mode
parameter_list|)
block|{
name|assertEquals
argument_list|(
name|expectingDocument
operator|.
name|pollFirst
argument_list|()
argument_list|,
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMode
parameter_list|(
name|StreamListener
operator|.
name|ReindexMode
name|mode
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|StreamListener
operator|.
name|ReindexMode
name|getMode
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
extends|extends
name|IStoredNode
parameter_list|>
name|IStoredNode
name|getReindexRoot
parameter_list|(
name|IStoredNode
argument_list|<
name|T
argument_list|>
name|node
parameter_list|,
name|NodePath
name|path
parameter_list|,
name|boolean
name|insert
parameter_list|,
name|boolean
name|includeSelf
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|StreamListener
name|getListener
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|MatchListener
name|getMatchListener
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|NodeProxy
name|proxy
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|flush
parameter_list|()
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|removeCollection
parameter_list|(
name|Collection
name|collection
parameter_list|,
name|DBBroker
name|broker
parameter_list|,
name|boolean
name|reindex
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Occurrences
index|[]
name|scanIndex
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|contextSet
parameter_list|,
name|Map
argument_list|<
name|?
argument_list|,
name|?
argument_list|>
name|hints
parameter_list|)
block|{
return|return
operator|new
name|Occurrences
index|[
literal|0
index|]
return|;
block|}
annotation|@
name|Override
specifier|public
name|QueryRewriter
name|getQueryRewriter
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|checkIndex
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|BTree
name|getStorage
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
block|}
block|}
end_class

end_unit

