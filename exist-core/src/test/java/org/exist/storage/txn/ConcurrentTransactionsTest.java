begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TransactionTestDSL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TransactionTestDSL
operator|.
name|ExecutionListener
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TransactionTestDSL
operator|.
name|NULL_SCHEDULE_LISTENER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TransactionTestDSL
operator|.
name|STD_OUT_SCHEDULE_LISTENER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TransactionTestDSL
operator|.
name|TransactionOperation
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TransactionTestDSL
operator|.
name|TransactionScheduleBuilder
operator|.
name|biSchedule
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNull
import|;
end_import

begin_import
import|import static
name|samples
operator|.
name|Samples
operator|.
name|SAMPLES
import|;
end_import

begin_comment
comment|/**  * Tests for Transactional Operations on the database.  *  * Each transaction executes in its own thread according  * to the schedule which we describe with the {@link TransactionTestDSL}.  *  * @author<a href="mailto:adam@evolvedbinary.com>Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|ConcurrentTransactionsTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|// flip this to `true` if you want to see a trace of the transaction schedule execution on Standard Out
specifier|private
specifier|static
specifier|final
name|boolean
name|DEBUG_TRACING
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|ExecutionListener
name|EXECUTION_LISTENER
init|=
name|DEBUG_TRACING
condition|?
name|STD_OUT_SCHEDULE_LISTENER
else|:
name|NULL_SCHEDULE_LISTENER
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|getDocuments
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|documentUri
init|=
literal|"/db/test/hamlet.xml"
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|DocumentImpl
argument_list|,
name|DocumentImpl
argument_list|>
name|result
init|=
name|biSchedule
argument_list|()
operator|.
name|firstT1
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|andThenT2
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|andThenT1
argument_list|(
name|commit
argument_list|()
argument_list|)
operator|.
name|andThenT2
argument_list|(
name|commit
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|execute
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|EXECUTION_LISTENER
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|_1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|_2
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|documentUri
argument_list|,
name|result
operator|.
name|_1
operator|.
name|getURI
argument_list|()
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|documentUri
argument_list|,
name|result
operator|.
name|_2
operator|.
name|getURI
argument_list|()
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getDeleteUpdate
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|documentUri
init|=
literal|"/db/test/hamlet.xml"
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Void
argument_list|,
name|Void
argument_list|>
name|result
init|=
name|biSchedule
argument_list|()
operator|.
name|firstT1
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|andThenT2
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|andThenT1
argument_list|(
name|deleteDocument
argument_list|()
argument_list|)
operator|.
name|andThenT1
argument_list|(
name|commit
argument_list|()
argument_list|)
operator|.
name|andThenT2
argument_list|(
name|updateDocument
argument_list|(
literal|"update value /title[1] with 'updated by t2 in various test'"
argument_list|)
argument_list|)
operator|.
name|andThenT2
argument_list|(
name|commit
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|execute
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|EXECUTION_LISTENER
argument_list|)
decl_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|delete_read
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|documentUri
init|=
literal|"/db/test/hamlet.xml"
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Void
argument_list|,
name|DocumentImpl
argument_list|>
name|result
init|=
name|biSchedule
argument_list|()
operator|.
name|firstT1
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|andThenT1
argument_list|(
name|deleteDocument
argument_list|()
argument_list|)
operator|.
name|andThenT2
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|execute
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|EXECUTION_LISTENER
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
literal|null
argument_list|,
name|result
operator|.
name|_1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
literal|null
argument_list|,
name|result
operator|.
name|_2
argument_list|)
expr_stmt|;
comment|// should be null as document was deleted!
block|}
annotation|@
name|Test
specifier|public
name|void
name|delete_commit_read
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|documentUri
init|=
literal|"/db/test/hamlet.xml"
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Void
argument_list|,
name|DocumentImpl
argument_list|>
name|result
init|=
name|biSchedule
argument_list|()
operator|.
name|firstT1
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|andThenT1
argument_list|(
name|deleteDocument
argument_list|()
argument_list|)
operator|.
name|andThenT1
argument_list|(
name|commit
argument_list|()
argument_list|)
operator|.
name|andThenT2
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|execute
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|EXECUTION_LISTENER
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|_1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|_2
argument_list|)
expr_stmt|;
comment|// should be null as document was deleted!
block|}
comment|/**      * NOTE: Aborting a transaction in eXist-db does not rollback the changes      * made by the transaction.      */
annotation|@
name|Test
specifier|public
name|void
name|delete_abort_read
parameter_list|()
throws|throws
name|ExecutionException
throws|,
name|InterruptedException
block|{
specifier|final
name|String
name|documentUri
init|=
literal|"/db/test/hamlet.xml"
decl_stmt|;
specifier|final
name|Tuple2
argument_list|<
name|Void
argument_list|,
name|DocumentImpl
argument_list|>
name|result
init|=
name|biSchedule
argument_list|()
operator|.
name|firstT1
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|andThenT1
argument_list|(
name|deleteDocument
argument_list|()
argument_list|)
operator|.
name|andThenT1
argument_list|(
name|abort
argument_list|()
argument_list|)
operator|.
name|andThenT2
argument_list|(
name|getDocument
argument_list|(
name|documentUri
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
operator|.
name|execute
argument_list|(
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|EXECUTION_LISTENER
argument_list|)
decl_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|_1
argument_list|)
expr_stmt|;
name|assertNull
argument_list|(
name|result
operator|.
name|_2
argument_list|)
expr_stmt|;
comment|//        assertNotNull(result._2);
comment|//        assertEquals(documentUri, result._2.getURI().getCollectionPath());  // should not be null as transaction T1 was aborted!
block|}
annotation|@
name|Before
specifier|public
name|void
name|setupDocs
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|URISyntaxException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|test
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|test
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|test
argument_list|)
expr_stmt|;
specifier|final
name|InputSource
name|inputSource
init|=
operator|new
name|FileInputSource
argument_list|(
name|SAMPLES
operator|.
name|getHamletSample
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|test
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"hamlet.xml"
argument_list|)
argument_list|,
name|inputSource
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|info
argument_list|)
expr_stmt|;
name|test
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|inputSource
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|removeDocs
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|test
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|test
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

