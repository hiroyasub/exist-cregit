begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Tests for startup triggers.  */
end_comment

begin_class
specifier|public
class|class
name|StartupTriggerTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|USER
init|=
literal|"testuser1"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PASSWORD
init|=
literal|"testpass"
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|,
name|properties
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Properties
name|properties
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Configuration
operator|.
name|StartupTriggerConfig
argument_list|>
name|startupTriggers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
name|startupTriggers
operator|.
name|add
argument_list|(
operator|new
name|Configuration
operator|.
name|StartupTriggerConfig
argument_list|(
name|TestStartupTrigger
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|properties
operator|.
name|put
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_STARTUP_TRIGGERS
argument_list|,
name|startupTriggers
argument_list|)
expr_stmt|;
return|return
name|properties
return|;
block|}
comment|/**      * Check if startup trigger has access to security manager.      */
annotation|@
name|Test
specifier|public
name|void
name|createUser
parameter_list|()
throws|throws
name|DatabaseConfigurationException
throws|,
name|EXistException
throws|,
name|IOException
block|{
name|assertTrue
argument_list|(
name|TestStartupTrigger
operator|.
name|completed
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
class|class
name|TestStartupTrigger
implements|implements
name|StartupTrigger
block|{
specifier|static
specifier|volatile
name|boolean
name|completed
init|=
literal|false
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|DBBroker
name|sysBroker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
parameter_list|)
block|{
specifier|final
name|SecurityManager
name|secman
init|=
name|sysBroker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|secman
operator|.
name|hasAccount
argument_list|(
name|USER
argument_list|)
condition|)
block|{
specifier|final
name|UserAider
name|aider
init|=
operator|new
name|UserAider
argument_list|(
name|USER
argument_list|)
decl_stmt|;
name|aider
operator|.
name|setPassword
argument_list|(
name|PASSWORD
argument_list|)
expr_stmt|;
try|try
block|{
name|secman
operator|.
name|addAccount
argument_list|(
name|sysBroker
argument_list|,
name|aider
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|EXistException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|secman
operator|.
name|hasAccount
argument_list|(
name|USER
argument_list|)
argument_list|)
expr_stmt|;
try|try
block|{
name|secman
operator|.
name|deleteAccount
argument_list|(
name|USER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|EXistException
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|completed
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

