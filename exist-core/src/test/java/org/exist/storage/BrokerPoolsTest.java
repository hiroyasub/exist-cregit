begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPools
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|LocalCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|createDirectory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
operator|.
name|write
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|util
operator|.
name|Collections
operator|.
name|singleton
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:patrick@reini.net">Patrick Reinhart</a>  */
end_comment

begin_class
specifier|public
class|class
name|BrokerPoolsTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|TemporaryFolder
name|temporaryFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|shutdownConcurrent
parameter_list|()
throws|throws
name|InterruptedException
throws|,
name|ExecutionException
throws|,
name|EXistException
throws|,
name|DatabaseConfigurationException
throws|,
name|IOException
block|{
specifier|final
name|int
name|testThreads
init|=
literal|5
decl_stmt|;
specifier|final
name|Path
name|tempDir
init|=
name|temporaryFolder
operator|.
name|getRoot
argument_list|()
operator|.
name|toPath
argument_list|()
decl_stmt|;
specifier|final
name|CountDownLatch
name|shutdownLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|CountDownLatch
name|acquiredLatch
init|=
operator|new
name|CountDownLatch
argument_list|(
name|testThreads
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|Future
argument_list|<
name|Exception
argument_list|>
argument_list|>
name|shutdownTasks
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ExecutorService
name|executorService
init|=
name|Executors
operator|.
name|newFixedThreadPool
argument_list|(
name|testThreads
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testThreads
condition|;
name|i
operator|++
control|)
block|{
name|Path
name|datadir
init|=
name|createDirectory
argument_list|(
name|tempDir
operator|.
name|resolve
argument_list|(
literal|"exist"
operator|+
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|Path
name|conf
init|=
name|datadir
operator|.
name|resolve
argument_list|(
literal|"conf.xml"
argument_list|)
decl_stmt|;
name|write
argument_list|(
name|conf
argument_list|,
name|singleton
argument_list|(
literal|"<exist><db-connection database='native' files='"
operator|+
name|datadir
operator|+
literal|"'/></exist>"
argument_list|)
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|"instance"
operator|+
name|i
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|new
name|Configuration
argument_list|(
name|conf
operator|.
name|toString
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|datadir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|shutdownTasks
operator|.
name|add
argument_list|(
name|executorService
operator|.
name|submit
argument_list|(
operator|new
name|BrokerPoolShutdownTask
argument_list|(
name|acquiredLatch
argument_list|,
name|shutdownLatch
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// wait for all shutdown threads to be acquired
name|acquiredLatch
operator|.
name|await
argument_list|()
expr_stmt|;
name|shutdownLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
name|executorService
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|assertTrue
argument_list|(
name|executorService
operator|.
name|awaitTermination
argument_list|(
literal|4
argument_list|,
name|TimeUnit
operator|.
name|SECONDS
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Future
argument_list|<
name|Exception
argument_list|>
name|shutdownTask
range|:
name|shutdownTasks
control|)
block|{
name|assertNull
argument_list|(
name|shutdownTask
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
class|class
name|BrokerPoolShutdownTask
implements|implements
name|Callable
argument_list|<
name|Exception
argument_list|>
block|{
specifier|private
specifier|final
name|CountDownLatch
name|acquiredLatch
decl_stmt|;
specifier|private
specifier|final
name|CountDownLatch
name|shutdownLatch
decl_stmt|;
specifier|public
name|BrokerPoolShutdownTask
parameter_list|(
specifier|final
name|CountDownLatch
name|acquiredLatch
parameter_list|,
specifier|final
name|CountDownLatch
name|shutdownLatch
parameter_list|)
block|{
name|this
operator|.
name|acquiredLatch
operator|=
name|acquiredLatch
expr_stmt|;
name|this
operator|.
name|shutdownLatch
operator|=
name|shutdownLatch
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Exception
name|call
parameter_list|()
throws|throws
name|Exception
block|{
try|try
block|{
name|acquiredLatch
operator|.
name|countDown
argument_list|()
expr_stmt|;
comment|// wait for signal to release the broker
name|shutdownLatch
operator|.
name|await
argument_list|()
expr_stmt|;
comment|// shutdown
name|BrokerPools
operator|.
name|stopAll
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
name|e
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

