begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Locator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Reproduce the EXistException "the document is too complex/irregularily structured  * to be mapped into eXist's numbering scheme"  * raised in {@link org.exist.dom.persistent.DocumentImpl} .  * It creates with DOM a simple document having a branch of 16 elements depth  * connected to the root, with width (arity) of 16 at each level.  */
end_comment

begin_class
specifier|public
class|class
name|IndexingTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
name|int
name|siblingCount
decl_stmt|;
specifier|private
name|int
name|depth
decl_stmt|;
specifier|private
name|Node
name|deepBranch
decl_stmt|;
specifier|private
name|Random
name|random
decl_stmt|;
comment|//	private static String driver = "org.exist.xmldb.DatabaseImpl";
specifier|private
specifier|static
name|String
name|baseURI
init|=
name|XmldbURI
operator|.
name|LOCAL_DB
decl_stmt|;
specifier|private
specifier|static
name|String
name|username
init|=
literal|"admin"
decl_stmt|;
specifier|private
specifier|static
name|String
name|password
init|=
literal|""
decl_stmt|;
comment|//<<<
specifier|private
specifier|static
name|String
name|name
init|=
literal|"test.xml"
decl_stmt|;
specifier|private
name|String
name|EXIST_HOME
init|=
literal|""
decl_stmt|;
comment|//<<<
specifier|private
name|int
name|effectiveSiblingCount
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|int
name|effectiveDepth
decl_stmt|;
specifier|private
name|long
name|startTime
decl_stmt|;
specifier|private
name|int
name|arity
decl_stmt|;
specifier|private
name|boolean
name|randomSizes
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|siblingCount
operator|=
literal|2
expr_stmt|;
name|depth
operator|=
literal|16
expr_stmt|;
name|arity
operator|=
literal|16
expr_stmt|;
name|randomSizes
operator|=
literal|false
expr_stmt|;
name|random
operator|=
operator|new
name|Random
argument_list|(
literal|1234
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|irregularilyStructured
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|irregularilyStructured
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|irregularilyStructured
parameter_list|(
name|boolean
name|getContentAsDOM
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|ClassNotFoundException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
block|{
name|Database
name|database
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|testName
init|=
literal|"IrregularilyStructured"
decl_stmt|;
name|startTime
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|Collection
name|coll
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|baseURI
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
decl_stmt|;
name|XMLResource
name|resource
init|=
operator|(
name|XMLResource
operator|)
name|coll
operator|.
name|createResource
argument_list|(
name|name
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|Document
name|doc
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
operator|.
name|newDocument
argument_list|()
decl_stmt|;
name|effectiveSiblingCount
operator|=
name|populate
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setContentAsDOM
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|coll
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|coll
operator|.
name|close
argument_list|()
expr_stmt|;
name|coll
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|baseURI
argument_list|,
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|resource
operator|=
operator|(
name|XMLResource
operator|)
name|coll
operator|.
name|getResource
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|Node
name|n
decl_stmt|;
if|if
condition|(
name|getContentAsDOM
condition|)
block|{
name|n
operator|=
name|resource
operator|.
name|getContentAsDOM
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|String
name|s
init|=
operator|(
name|String
operator|)
name|resource
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|byte
index|[]
name|bytes
init|=
name|s
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|FastByteArrayInputStream
name|bais
init|=
operator|new
name|FastByteArrayInputStream
argument_list|(
name|bytes
argument_list|)
decl_stmt|;
name|DocumentBuilder
name|db
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|n
operator|=
name|db
operator|.
name|parse
argument_list|(
name|bais
argument_list|)
expr_stmt|;
block|}
name|Element
name|documentElement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|n
operator|instanceof
name|Element
condition|)
block|{
name|documentElement
operator|=
operator|(
name|Element
operator|)
name|n
expr_stmt|;
block|}
if|else if
condition|(
name|n
operator|instanceof
name|Document
condition|)
block|{
name|documentElement
operator|=
operator|(
operator|(
name|Document
operator|)
name|n
operator|)
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
block|}
name|assertions
argument_list|(
name|documentElement
argument_list|)
expr_stmt|;
name|coll
operator|.
name|removeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
comment|/**      * Assertions and output:      */
specifier|private
name|void
name|assertions
parameter_list|(
name|Element
name|documentElement
parameter_list|)
block|{
name|int
name|computedSiblingCount
init|=
name|documentElement
operator|.
name|getChildNodes
argument_list|()
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|computedDepth
init|=
operator|(
operator|(
name|Element
operator|)
name|deepBranch
operator|)
operator|.
name|getElementsByTagName
argument_list|(
literal|"element"
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|int
name|computedElementCount
init|=
name|documentElement
operator|.
name|getElementsByTagName
argument_list|(
literal|"element"
argument_list|)
operator|.
name|getLength
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"siblingCount"
argument_list|,
name|effectiveSiblingCount
argument_list|,
name|computedSiblingCount
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"depth"
argument_list|,
name|depth
operator|*
name|arity
operator|+
name|depth
argument_list|,
name|computedDepth
argument_list|)
expr_stmt|;
comment|// dumpCatabaseContent(n);
block|}
comment|/**      * This one provokes the Exception      */
specifier|private
name|int
name|populate
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|int
name|childrenCount
init|=
name|addChildren
argument_list|(
name|doc
argument_list|,
name|siblingCount
argument_list|)
decl_stmt|;
comment|// Add a long fat branch at root's first child :
name|deepBranch
operator|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|effectiveDepth
operator|=
name|addFatBranch
argument_list|(
name|doc
argument_list|,
name|deepBranch
argument_list|,
name|depth
argument_list|,
literal|null
argument_list|)
expr_stmt|;
return|return
name|childrenCount
return|;
block|}
comment|/**      * This one doesn't provoke the Exception      */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|int
name|populateOK
parameter_list|(
name|Document
name|doc
parameter_list|)
block|{
name|int
name|childrenCount
init|=
name|addChildren
argument_list|(
name|doc
argument_list|,
name|siblingCount
argument_list|)
decl_stmt|;
comment|// Add large branches at root's first and last children :
name|addBranch
argument_list|(
name|doc
argument_list|,
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|depth
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|deepBranch
operator|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getLastChild
argument_list|()
expr_stmt|;
name|effectiveDepth
operator|=
name|addBranch
argument_list|(
name|doc
argument_list|,
name|deepBranch
argument_list|,
name|depth
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|Element
name|documentElement
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
comment|// Add (small) branches everywhere at level 1 :
name|int
name|firstLevelWidth
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
operator|.
name|getChildNodes
argument_list|()
operator|.
name|getLength
argument_list|()
decl_stmt|;
block|{
name|Node
name|current
init|=
name|documentElement
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|firstLevelWidth
operator|-
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|addBranch
argument_list|(
name|doc
argument_list|,
name|current
argument_list|,
literal|10
argument_list|,
literal|"branch"
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Add level 2 siblings everywhere at level 1 :
block|{
name|Node
name|current
init|=
name|documentElement
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|firstLevelWidth
operator|-
literal|1
condition|;
name|j
operator|++
control|)
block|{
name|addChildren
argument_list|(
name|current
argument_list|,
name|arity
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|childrenCount
return|;
block|}
specifier|private
name|int
name|addBranch
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|branchNode
parameter_list|,
name|int
name|depth
parameter_list|,
name|String
name|elementName
parameter_list|)
block|{
name|int
name|rdepth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|branchNode
operator|!=
literal|null
condition|)
block|{
name|Node
name|current
init|=
name|branchNode
decl_stmt|;
if|if
condition|(
name|elementName
operator|==
literal|null
operator|||
name|elementName
operator|==
literal|""
condition|)
name|elementName
operator|=
literal|"element"
expr_stmt|;
if|if
condition|(
name|randomSizes
condition|)
name|rdepth
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|depth
argument_list|)
expr_stmt|;
else|else
name|rdepth
operator|=
name|depth
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rdepth
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|el
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
name|current
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|current
operator|=
name|el
expr_stmt|;
block|}
block|}
return|return
name|rdepth
return|;
block|}
specifier|private
name|int
name|addFatBranch
parameter_list|(
name|Document
name|doc
parameter_list|,
name|Node
name|branchNode
parameter_list|,
name|int
name|depth
parameter_list|,
name|String
name|elementName
parameter_list|)
block|{
name|int
name|rdepth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|branchNode
operator|!=
literal|null
condition|)
block|{
name|Node
name|current
init|=
name|branchNode
decl_stmt|;
if|if
condition|(
name|elementName
operator|==
literal|null
operator|||
name|elementName
operator|==
literal|""
condition|)
name|elementName
operator|=
literal|"element"
expr_stmt|;
if|if
condition|(
name|randomSizes
condition|)
name|rdepth
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|depth
argument_list|)
expr_stmt|;
else|else
name|rdepth
operator|=
name|depth
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rdepth
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|el
init|=
name|doc
operator|.
name|createElement
argument_list|(
name|elementName
argument_list|)
decl_stmt|;
name|addChildren
argument_list|(
name|el
argument_list|,
name|arity
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|current
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
name|current
operator|=
name|el
expr_stmt|;
block|}
block|}
return|return
name|rdepth
return|;
block|}
comment|/**      * @param doc      * @param i      */
specifier|private
name|int
name|addChildren
parameter_list|(
name|Document
name|doc
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|Element
name|rootElem
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"root"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|appendChild
argument_list|(
name|rootElem
argument_list|)
expr_stmt|;
return|return
name|addChildren
argument_list|(
name|rootElem
argument_list|,
name|length
argument_list|,
name|doc
argument_list|)
return|;
block|}
specifier|private
name|int
name|addChildren
parameter_list|(
name|Node
name|rootElem
parameter_list|,
name|int
name|length
parameter_list|,
name|Document
name|doc
parameter_list|)
block|{
name|int
name|rlength
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|rootElem
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|randomSizes
condition|)
name|rlength
operator|=
name|random
operator|.
name|nextInt
argument_list|(
name|length
argument_list|)
expr_stmt|;
else|else
name|rlength
operator|=
name|length
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|rlength
condition|;
name|j
operator|++
control|)
block|{
name|Element
name|el
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"element"
argument_list|)
decl_stmt|;
name|rootElem
operator|.
name|appendChild
argument_list|(
name|el
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rlength
return|;
block|}
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|dumpCatabaseContent
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
try|try
block|{
name|Transformer
name|t
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newTransformer
argument_list|()
decl_stmt|;
name|DOMSource
name|source
init|=
operator|new
name|DOMSource
argument_list|(
name|n
argument_list|)
decl_stmt|;
name|SAXHandler
name|saxHandler
init|=
operator|new
name|SAXHandler
argument_list|()
decl_stmt|;
name|SAXResult
name|result
init|=
operator|new
name|SAXResult
argument_list|(
name|saxHandler
argument_list|)
decl_stmt|;
name|t
operator|.
name|transform
argument_list|(
name|source
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|saxHandler
operator|.
name|getWriter
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|class
name|SAXHandler
implements|implements
name|ContentHandler
block|{
specifier|private
specifier|final
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|)
decl_stmt|;
name|SAXHandler
parameter_list|()
block|{
block|}
specifier|public
name|PrintWriter
name|getWriter
parameter_list|()
block|{
return|return
name|writer
return|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.characters("
operator|+
operator|new
name|String
argument_list|(
name|ch
argument_list|)
operator|+
literal|", "
operator|+
name|start
operator|+
literal|", "
operator|+
name|length
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endDocument
parameter_list|()
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.endDocument()"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.endElement("
operator|+
name|namespaceURI
operator|+
literal|", "
operator|+
name|localName
operator|+
literal|", "
operator|+
name|qName
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.endPrefixMapping("
operator|+
name|prefix
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|ignorableWhitespace
parameter_list|(
name|char
index|[]
name|ch
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.ignorableWhitespace("
operator|+
operator|new
name|String
argument_list|(
name|ch
argument_list|)
operator|+
literal|", "
operator|+
name|start
operator|+
literal|", "
operator|+
name|length
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|processingInstruction
parameter_list|(
name|String
name|target
parameter_list|,
name|String
name|data
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.processingInstruction("
operator|+
name|target
operator|+
literal|", "
operator|+
name|data
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setDocumentLocator
parameter_list|(
name|Locator
name|locator
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.setDocumentLocator("
operator|+
name|locator
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|skippedEntity
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.skippedEntity("
operator|+
name|name
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startDocument
parameter_list|()
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.startDocument()"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qName
parameter_list|,
name|Attributes
name|atts
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.startElement("
operator|+
name|namespaceURI
operator|+
literal|", "
operator|+
name|localName
operator|+
literal|", "
operator|+
name|qName
operator|+
literal|","
operator|+
name|atts
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|xuri
parameter_list|)
block|{
name|writer
operator|.
name|println
argument_list|(
literal|"SAXHandler.startPrefixMapping("
operator|+
name|prefix
operator|+
literal|", "
operator|+
name|xuri
operator|+
literal|")"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

