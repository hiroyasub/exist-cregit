begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2011 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id: BinaryResourceUpdateTest.java 11148 2010-02-07 14:37:35Z dizzzz $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbLocalTests
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|CollectionConfigurationTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_COLLECTION
init|=
literal|"testIndexConfiguration"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|COLLECTION_SUB1
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|.
name|append
argument_list|(
name|TEST_COLLECTION
argument_list|)
operator|.
name|append
argument_list|(
literal|"sub1"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XmldbURI
name|COLLECTION_SUB2
init|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|.
name|append
argument_list|(
name|TEST_COLLECTION
argument_list|)
operator|.
name|append
argument_list|(
literal|"sub2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|CONF_COLL_URI
init|=
name|XmldbURI
operator|.
name|CONFIG_COLLECTION_URI
operator|.
name|append
argument_list|(
literal|"/db/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|CONF_COLL_URI2
init|=
name|CONF_COLL_URI
operator|.
name|append
argument_list|(
name|TestConstants
operator|.
name|SPECIAL_NAME
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_CONFIG_NAME_1
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"test1.xconf"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_CONFIG_NAME_2
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|TestConstants
operator|.
name|SPECIAL_NAME
operator|+
literal|".xconf"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DOCUMENT_CONTENT
init|=
literal|"<test>"
operator|+
literal|"<a>001</a>"
operator|+
literal|"<a>01</a>"
operator|+
literal|"<a>1</a>"
operator|+
literal|"<b>001</b>"
operator|+
literal|"<b>01</b>"
operator|+
literal|"<b>1</b>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DOCUMENT_CONTENT2
init|=
literal|"<test x='0'>"
operator|+
literal|"<c c='2002-12-07T12:20:46.275+01:00'>2002-12-07T12:20:46.275+01:00</c>"
operator|+
literal|"<d d='1'>1</d>"
operator|+
literal|"<e e='1'>1</e>"
operator|+
literal|"<f f='true'>true</f>"
operator|+
literal|"<g g='1'>1</g>"
operator|+
literal|"<h h='1'>1</h>"
operator|+
literal|"<test x='1'><test x='2'></test></test></test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DOCUMENT_CONTENT3
init|=
literal|"<test>"
operator|+
literal|"<a>1</a>"
operator|+
literal|"<b>1</b>"
operator|+
literal|"<c>1</c>"
operator|+
literal|"<d>x</d>"
operator|+
literal|"<e>xx</e>"
operator|+
literal|"<f>xxx</f>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|CONFIG1
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<create qname=\"a\" type=\"xs:integer\"/>"
operator|+
literal|"<create qname=\"b\" type=\"xs:string\"/>"
operator|+
literal|"<create path=\"//a\" type=\"xs:integer\"/>"
operator|+
literal|"<create path=\"//b\" type=\"xs:string\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|CONFIG2
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<create path=\"//c\" type=\"xs:dateTime\"/>"
operator|+
literal|"<create path=\"//d\" type=\"xs:double\"/>"
operator|+
literal|"<create path=\"//e\" type=\"xs:float\"/>"
operator|+
literal|"<create path=\"//f\" type=\"xs:boolean\"/>"
operator|+
literal|"<create path=\"//g\" type=\"xs:integer\"/>"
operator|+
literal|"<create path=\"//h\" type=\"xs:string\"/>"
operator|+
literal|"<create path=\"//@c\" type=\"xs:dateTime\"/>"
operator|+
literal|"<create path=\"//@d\" type=\"xs:double\"/>"
operator|+
literal|"<create path=\"//@e\" type=\"xs:float\"/>"
operator|+
literal|"<create path=\"//@f\" type=\"xs:boolean\"/>"
operator|+
literal|"<create path=\"//@g\" type=\"xs:integer\"/>"
operator|+
literal|"<create path=\"//@h\" type=\"xs:string\"/>"
operator|+
literal|"<create path=\"//test/@x\" type=\"xs:integer\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|CONFIG3
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<create qname=\"a\" type=\"xs:integer\"/>"
operator|+
literal|"<create path=\"//a\" type=\"xs:integer\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|QNAME_CONFIG
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<create qname=\"a\" type=\"xs:integer\"/>"
operator|+
literal|"<create qname=\"b\" type=\"xs:integer\"/>"
operator|+
literal|"<create path=\"/test/c\" type=\"xs:integer\"/>"
operator|+
literal|"<create qname=\"d\" type=\"xs:string\"/>"
operator|+
literal|"<create qname=\"e\" type=\"xs:string\"/>"
operator|+
literal|"<create path=\"/test/f\" type=\"xs:string\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|final
name|String
name|QNAME_CONFIG2
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"<create qname=\"c\" type=\"xs:dateTime\"/>"
operator|+
literal|"<create qname=\"d\" type=\"xs:double\"/>"
operator|+
literal|"<create qname=\"e\" type=\"xs:float\"/>"
operator|+
literal|"<create qname=\"f\" type=\"xs:boolean\"/>"
operator|+
literal|"<create qname=\"g\" type=\"xs:integer\"/>"
operator|+
literal|"<create qname=\"h\" type=\"xs:string\"/>"
operator|+
literal|"<create qname=\"@c\" type=\"xs:dateTime\"/>"
operator|+
literal|"<create qname=\"@d\" type=\"xs:double\"/>"
operator|+
literal|"<create qname=\"@e\" type=\"xs:float\"/>"
operator|+
literal|"<create qname=\"@f\" type=\"xs:boolean\"/>"
operator|+
literal|"<create qname=\"@g\" type=\"xs:integer\"/>"
operator|+
literal|"<create qname=\"@h\" type=\"xs:string\"/>"
operator|+
literal|"<create qname=\"@x\" type=\"xs:integer\"/>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|EMPTY_CONFIG
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">"
operator|+
literal|"<index>"
operator|+
literal|"</index>"
operator|+
literal|"</collection>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INVALID_CONFIG1
init|=
literal|"<collection xmlns=\"http://exist-db.org/collection-config/1.0\">\n"
operator|+
literal|"<triggers>\n"
operator|+
literal|"<trigger event=\"store,update,remove\" class=\"org.exist.NonExistingTrigger\">\n"
operator|+
literal|"</trigger>\n"
operator|+
literal|"</triggers>\n"
operator|+
literal|"<index>\n"
operator|+
literal|"<create foo=\"a\" type=\"xs:integer\"/>\n"
operator|+
literal|"</index>\n"
operator|+
literal|"</collection>"
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|testCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// change ownership to guest
specifier|final
name|Account
name|guest
init|=
name|ums
operator|.
name|getAccount
argument_list|(
name|GUEST_UID
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|guest
argument_list|,
name|guest
operator|.
name|getPrimaryGroup
argument_list|()
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|testConfCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
name|CONF_COLL_URI
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|testConfCollection
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
comment|// change ownership to guest
name|ums
operator|.
name|chown
argument_list|(
name|guest
argument_list|,
name|guest
operator|.
name|getPrimaryGroup
argument_list|()
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
comment|//  configColl = cms.createCollection(CONF_COLL_URI.toString());
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|existEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
name|TEST_COLLECTION
argument_list|)
expr_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
name|CONF_COLL_URI
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//Removes the collection config collection *manually*
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|//Configure collection automatically
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG1
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//3 numeric values
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testCollectionConfigurationService2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|// Add document....
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ... then configure collection automatically
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG1
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// No numeric values because we have no index
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences( /test/a, 1 ) "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// No string value because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences( /test/b, \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// No numeric values because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// No string value because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ...let's activate the index
name|idxConf
operator|.
name|reindexCollection
argument_list|()
expr_stmt|;
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|//Configure collection *manually*
name|storeConfiguration
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|CollectionConfiguration
operator|.
name|DEFAULT_COLLECTION_CONFIG_FILE_URI
argument_list|,
name|CONFIG1
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//3 numeric values
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService4
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|// Add document....
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|// ... then configure collection *manually*
name|storeConfiguration
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|CollectionConfiguration
operator|.
name|DEFAULT_COLLECTION_CONFIG_FILE_URI
argument_list|,
name|CONFIG1
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// No numeric values because we have no index
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences( /test/a, 1 ) "
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// No string value because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences( /test/b, \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// No numeric values because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// No string value because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ...let's activate the index
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|reindexCollection
argument_list|()
expr_stmt|;
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService5
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|//Configure collection *manually*
name|XmldbURI
name|configurationFileName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|CollectionConfiguration
operator|.
name|DEFAULT_COLLECTION_CONFIG_FILE
argument_list|)
decl_stmt|;
name|storeConfiguration
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|configurationFileName
argument_list|,
name|CONFIG1
argument_list|)
expr_stmt|;
comment|// ... then configure collection automatically
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG1
argument_list|)
expr_stmt|;
comment|// Add document....
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//our config file
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"xmldb:get-child-resources('"
operator|+
name|CONF_COLL_URI
operator|+
literal|"')"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|configurationFileName
operator|.
name|toString
argument_list|()
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService6
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|// Add document....
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
comment|//... then configure collection *manually*
name|XmldbURI
name|configurationFileName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|CollectionConfiguration
operator|.
name|DEFAULT_COLLECTION_CONFIG_FILE
argument_list|)
decl_stmt|;
name|storeConfiguration
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|configurationFileName
argument_list|,
name|CONFIG1
argument_list|)
expr_stmt|;
comment|//... then configure collection automatically
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG1
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//our config file
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"xmldb:get-child-resources('"
operator|+
name|CONF_COLL_URI
operator|+
literal|"')"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|configurationFileName
operator|.
name|toString
argument_list|()
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// No numeric values because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences( /test/a, 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// No string value because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences( /test/b, \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// No numeric values because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// No string value because we have no index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ...let's activate the index
name|idxConf
operator|.
name|reindexCollection
argument_list|()
expr_stmt|;
comment|//WARNING : the code hereafter used to *not* work whereas
comment|//testCollectionConfigurationService4 did.
comment|//Adding confMgr.invalidateAll(getName()); in Collection.storeInternal solved the problem
comment|//Strange case that needs investigations... -pb
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Check if configurations are properly passed down the collection hierarchy. */
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService7
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|sub2
init|=
name|cms
operator|.
name|createCollection
argument_list|(
name|COLLECTION_SUB2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
comment|//Configure collection automatically
comment|// sub2 should inherit its index configuration from the top collection
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG1
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|sub2
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|sub2
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//3 numeric values
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Overwrite configuration in a sub collection */
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService8
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|sub2
init|=
name|cms
operator|.
name|createCollection
argument_list|(
name|COLLECTION_SUB2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
comment|//Configure collection automatically
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG1
argument_list|)
expr_stmt|;
comment|// Overwrite main configuration with an empty configuration in the subcollection
name|idxConf
operator|=
operator|(
name|IndexQueryService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_CONFIG
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|sub2
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|sub2
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// index should be empty
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Overwrite configuration in a sub collection 2 times */
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService9
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|sub1
init|=
name|cms
operator|.
name|createCollection
argument_list|(
name|COLLECTION_SUB1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|sub1
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
name|Collection
name|sub2
init|=
name|cms
operator|.
name|createCollection
argument_list|(
name|COLLECTION_SUB2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ums
operator|=
operator|(
name|UserManagementService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG1
argument_list|)
expr_stmt|;
comment|// Overwrite main configuration with an empty configuration in the subcollection
name|idxConf
operator|=
operator|(
name|IndexQueryService
operator|)
name|sub1
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|EMPTY_CONFIG
argument_list|)
expr_stmt|;
comment|// Overwrite sub1 configuration in sub2
name|idxConf
operator|=
operator|(
name|IndexQueryService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG3
argument_list|)
expr_stmt|;
comment|//... then store document into sub1
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|sub1
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|sub1
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|sub1
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// sub1 has empty configuration, so index should be empty as well
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove document in sub1 and restore it in sub2
name|sub1
operator|.
name|removeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
operator|(
name|XMLResource
operator|)
name|sub2
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|sub2
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|service
operator|=
operator|(
name|XPathQueryService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
comment|// sub2 only has an index on /test/a, but not on /test/b
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// 3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// ... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup( xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Remove config document */
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService10
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|sub2
init|=
name|cms
operator|.
name|createCollection
argument_list|(
name|COLLECTION_SUB2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG1
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|sub2
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|sub2
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//3 numeric values
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove config document thus dropping the configuration
name|Collection
name|confCol
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist://"
operator|+
name|CONF_COLL_URI
operator|.
name|toString
argument_list|()
argument_list|,
name|ADMIN_UID
argument_list|,
name|ADMIN_PWD
argument_list|)
decl_stmt|;
name|Resource
name|confDoc
init|=
name|confCol
operator|.
name|getResource
argument_list|(
literal|"collection.xconf"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|confDoc
argument_list|)
expr_stmt|;
name|confCol
operator|.
name|removeResource
argument_list|(
name|confDoc
argument_list|)
expr_stmt|;
comment|//            cms = (CollectionManagementService) confCol.getService("CollectionManagementService", "1.0");
comment|//            cms.removeCollection(".");
name|idxConf
operator|.
name|reindexCollection
argument_list|()
expr_stmt|;
comment|// index should be empty since configuration was removed
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** Remove config collection */
annotation|@
name|Test
specifier|public
name|void
name|collectionConfigurationService11
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|sub2
init|=
name|cms
operator|.
name|createCollection
argument_list|(
name|COLLECTION_SUB2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG1
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|sub2
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|sub2
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//3 numeric values
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
comment|//3 numeric values
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|//... but 1 string value
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove config document thus dropping the configuration
name|Collection
name|confCol
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist://"
operator|+
name|CONF_COLL_URI
operator|.
name|toString
argument_list|()
argument_list|,
name|ADMIN_UID
argument_list|,
name|ADMIN_PWD
argument_list|)
decl_stmt|;
name|Resource
name|confDoc
init|=
name|confCol
operator|.
name|getResource
argument_list|(
literal|"collection.xconf"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|confDoc
argument_list|)
expr_stmt|;
name|confCol
operator|.
name|removeResource
argument_list|(
name|confDoc
argument_list|)
expr_stmt|;
name|idxConf
operator|.
name|reindexCollection
argument_list|()
expr_stmt|;
comment|// index should be empty since configuration was removed
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/b, \"1\")"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"b\"), \"1\" ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|invalidConfiguration1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|sub2
init|=
name|cms
operator|.
name|createCollection
argument_list|(
name|COLLECTION_SUB2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|INVALID_CONFIG1
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|sub2
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT
argument_list|)
expr_stmt|;
name|sub2
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|sub2
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// index should be empty since configuration was invalid
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/a, 1)"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:qname-index-lookup(xs:QName(\"a\"), 1 ) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|rangeIndex1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|//Configure collection automatically
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG2
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT2
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/c, xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") )"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/c)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:dateTime"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/d, xs:double(1) )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/d)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:double"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/e, xs:float(1) )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/e)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:float"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/f, true())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/f)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:boolean"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/g, xs:integer(1))"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/g)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:integer"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/h, '1')"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/h)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:string"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/c[(# exist:force-index-use #) { . = xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { c = xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/d[(# exist:force-index-use #) { . = xs:double(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { d = xs:double(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/e[(# exist:force-index-use #) { . = xs:float(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { e = xs:float(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/f[(# exist:force-index-use #) { . = true() }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { f = true() }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/g[(# exist:force-index-use #) { . = 1 }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { g = 1 }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/h[(# exist:force-index-use #) { . = '1' }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { h = '1' }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { contains(d, '1') }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"contains() should not use index of type xs:double"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
name|exceptionCaught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { matches(d, '1') }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"matches() should not use index of type xs:double"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[matches(h, '1')]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|rangeIndex2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|//Configure collection automatically
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|QNAME_CONFIG2
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT2
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/c, xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") )"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/c)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:dateTime"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/d, xs:double(1) )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/d)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:double"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/e, xs:float(1) )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/e)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:float"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/f, true())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/f)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:boolean"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/g, xs:integer(1))"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/g)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:integer"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/h, '1')"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/h)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:string"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test/c[. = xs:dateTime(\"2002-12-07T12:20:46.275+01:00\")] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[c = xs:dateTime(\"2002-12-07T12:20:46.275+01:00\")] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test/d[. = xs:double(1)] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[d = xs:double(1)] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test/e[. = xs:float(1)] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[e = xs:float(1)] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test/f[. = true()] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[f = true()] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test/g[. = 1] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[g = 1] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test/h[. = '1'] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[h = '1'] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[contains(d, '1')] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"contains() should not use index of type xs:double"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
name|exceptionCaught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[matches(d, '1')] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"matches() should not use index of type xs:double"
argument_list|,
name|exceptionCaught
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[matches(h, '1')]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|rangeIndex3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|//Configure collection automatically
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|QNAME_CONFIG
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT3
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|EXistXQueryService
name|service
init|=
operator|(
name|EXistXQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// the query optimizer cannot optimize the following general comparison as
comment|// the context qname is unknown. however, the available qname index should still be used.
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/a where $t = 1 return $t}"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/d where contains($t, 'x') return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/d where matches($t, 'x$') return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// left operand to comparison uses nodes from different elements, both having an index defined
comment|// by qname: use qname index
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/(a|b) where $t = 1 return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/(d|e) where contains($t, 'x') return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/(d|e) where matches($t, 'x$') return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// left operand to comparison uses nodes from different elements with mixed indexes,
comment|// some defined on qname, one defined by path: comparison needs to scan all 3 indexes.
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/(a|b|c) where $t = 1 return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/(d|e|f) where contains($t, 'x') return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/(d|e|f) where matches($t, 'x$') return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// left operand has index defined on path. other elements in the collection use indexes
comment|// on qname: comparison needs to scan all index types.
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/c where $t = 1 return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// simple comparison, left operand has index defined on path.
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[c = 1] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[matches(d, 'x')] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// wrong index type: can't use fn:contains with an integer index
name|boolean
name|exceptionCaught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/c where contains($t, '1') return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
comment|// wrong index type: can't use fn:matches with an integer index
name|exceptionCaught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { for $t in /test/c where matches($t, '1') return $t}"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
comment|// wrong index type: can't use fn:matches with an integer index
name|exceptionCaught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"(# exist:force-index-use #) { /test[matches(c, '1')] }"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionCaught
operator|=
literal|true
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionCaught
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
annotation|@
name|Ignore
specifier|public
name|void
name|rangeIndexOverAttributes
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
comment|//Configure collection automatically
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|idxConf
operator|.
name|configureCollection
argument_list|(
name|CONFIG2
argument_list|)
expr_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT2
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
literal|"//test[@x = 0]"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//test[@x eq 0]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//test[(# exist:force-index-use #) { @x = 0 }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"//test[(# exist:force-index-use #) { @x eq 0 }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test//@c, xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test//@c)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:dateTime"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/c/@c, xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/c/@c)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:dateTime"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test//@d, xs:double(1) )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test//@d)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:double"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/d/@d, xs:double(1) )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/d/@d)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:double"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test//@e, xs:float(1) )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test//@e)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:float"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/e/@e, xs:float(1) )"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/e/@e)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:float"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test//@f, true())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test//@f)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:boolean"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/f/@f, true())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/f/@f)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:boolean"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test//@g, xs:integer(1))"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test//@g)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:integer"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/g/@g, xs:integer(1))"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/g/@g)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:integer"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test//@h, '1')"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test//@h)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:string"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-key-occurrences(/test/h/@h, '1')"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"util:index-type(/test/h/@h)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"xs:string"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test//@c[(# exist:force-index-use #) { . = xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { .//@c = xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/c/@c[(# exist:force-index-use #) { . = xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { ./c/@c = xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test//@d[(# exist:force-index-use #) { . = xs:double(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { .//@d = xs:double(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/d/@d[(# exist:force-index-use #) { . = xs:double(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { ./d/@d = xs:double(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test//@e[(# exist:force-index-use #) { . = xs:float(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { .//@e = xs:float(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/e/@e[(# exist:force-index-use #) { . = xs:float(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { ./e/@e = xs:float(1) }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test//@f[(# exist:force-index-use #) { . = true() }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { .//@f = true() }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/f/@f[(# exist:force-index-use #) { . = true() }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { ./f/@f = true() }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test//@g[(# exist:force-index-use #) { . = 1 }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { .//@g = 1 }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/g/@g[(# exist:force-index-use #) { . = 1 }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { ./g/@g = 1 }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test//@h[(# exist:force-index-use #) { . = '1' }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { .//@h = '1' }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/h/@h[(# exist:force-index-use #) { . = '1' }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test[(# exist:force-index-use #) { ./h/@h = '1' }]"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|missingRangeIndexes
parameter_list|()
throws|throws
name|Exception
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|ResourceSet
name|result
decl_stmt|;
name|boolean
name|exceptionThrown
init|=
literal|false
decl_stmt|;
comment|//Configure collection automatically
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|IndexQueryService
name|idxConf
init|=
operator|(
name|IndexQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"IndexQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//... then index document
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|TestConstants
operator|.
name|TEST_XML_URI
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|DOCUMENT_CONTENT2
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/c[(# exist:force-index-use #) { . = xs:dateTime(\"2002-12-07T12:20:46.275+01:00\") }]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
comment|//e.printStackTrace();
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"XQDYxxxx"
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
else|else
throw|throw
name|e
throw|;
block|}
name|assertTrue
argument_list|(
literal|"Exception expected : missing index"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/d[(# exist:force-index-use #) { . = xs:double(1) }]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"XQDYxxxx"
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
else|else
throw|throw
name|e
throw|;
block|}
name|assertTrue
argument_list|(
literal|"Exception expected : missing index"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/e[(# exist:force-index-use #) { . = xs:float(1) }]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"XQDYxxxx"
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
else|else
throw|throw
name|e
throw|;
block|}
name|assertTrue
argument_list|(
literal|"Exception expected : missing index"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/f[(# exist:force-index-use #) { . = true() }]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"XQDYxxxx"
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
else|else
throw|throw
name|e
throw|;
block|}
name|assertTrue
argument_list|(
literal|"Exception expected : missing index"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/g[(# exist:force-index-use #) { . = 1 }]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"XQDYxxxx"
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
else|else
throw|throw
name|e
throw|;
block|}
name|assertTrue
argument_list|(
literal|"Exception expected : missing index"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"/test/h[(# exist:force-index-use #) { . = '1' }]"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"XQDYxxxx"
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
else|else
throw|throw
name|e
throw|;
block|}
name|assertTrue
argument_list|(
literal|"Exception expected : missing index"
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations00
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations01
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations02
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations03
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations04
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations05
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations06
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations07
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations08
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations09
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations10
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations11
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations12
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations13
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
name|CONF_COLL_URI
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations14
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|multipleConfigurations15
parameter_list|()
block|{
name|checkStoreConf
argument_list|(
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
name|CONF_COLL_URI2
argument_list|,
name|TEST_CONFIG_NAME_2
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|checkStoreConf
parameter_list|(
name|XmldbURI
name|coll1
parameter_list|,
name|XmldbURI
name|confName1
parameter_list|,
name|XmldbURI
name|coll2
parameter_list|,
name|XmldbURI
name|confName2
parameter_list|,
name|boolean
name|shouldSucceed
parameter_list|)
block|{
try|try
block|{
name|storeConfiguration
argument_list|(
name|coll1
argument_list|,
name|confName1
argument_list|,
name|CONFIG1
argument_list|)
expr_stmt|;
name|storeConfiguration
argument_list|(
name|coll2
argument_list|,
name|confName2
argument_list|,
name|CONFIG1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|shouldSucceed
condition|)
block|{
name|fail
argument_list|(
literal|"Should not have been able to store '"
operator|+
name|confName1
operator|+
literal|"' to '"
operator|+
name|coll1
operator|+
literal|"'\n\tand then '"
operator|+
name|confName2
operator|+
literal|"' to '"
operator|+
name|coll2
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xe
parameter_list|)
block|{
if|if
condition|(
name|shouldSucceed
condition|)
block|{
name|fail
argument_list|(
literal|"Should have been able to store '"
operator|+
name|confName1
operator|+
literal|"' to '"
operator|+
name|coll1
operator|+
literal|"'\n\tand then '"
operator|+
name|confName2
operator|+
literal|"' to '"
operator|+
name|coll2
operator|+
literal|"': "
operator|+
name|xe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|storeConfiguration
parameter_list|(
name|XmldbURI
name|collPath
parameter_list|,
name|XmldbURI
name|confName
parameter_list|,
name|String
name|confContent
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|testCollection
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|ROOT_URI
operator|+
literal|"/"
operator|+
name|TEST_COLLECTION
argument_list|)
decl_stmt|;
name|String
name|fullCollPath
init|=
name|ROOT_URI
operator|+
name|collPath
operator|.
name|toString
argument_list|()
decl_stmt|;
name|Collection
name|configColl
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|fullCollPath
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|configColl
operator|==
literal|null
condition|)
block|{
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|configColl
operator|=
name|cms
operator|.
name|createCollection
argument_list|(
name|collPath
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|configColl
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
literal|"rwxr-xr-x"
argument_list|)
expr_stmt|;
block|}
name|assertNotNull
argument_list|(
name|configColl
argument_list|)
expr_stmt|;
name|Resource
name|res
init|=
name|configColl
operator|.
name|createResource
argument_list|(
name|confName
operator|.
name|toString
argument_list|()
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|confContent
argument_list|)
expr_stmt|;
name|configColl
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|configColl
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|res
argument_list|,
literal|0744
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

