begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist-db Open Source Native XML Database  * Copyright (C) 2001 The eXist-db Authors  *  * info@exist-db.org  * http://www.exist-db.org  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public  * License as published by the Free Software Foundation; either  * version 2.1 of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|impl
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|RenameCollectionTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistWebServer
name|existWebServer
init|=
operator|new
name|ExistWebServer
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|PORT_PLACEHOLDER
init|=
literal|"${PORT}"
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"local"
block|,
literal|"xmldb:exist://"
block|}
block|,
block|{
literal|"remote"
block|,
literal|"xmldb:exist://localhost:"
operator|+
name|PORT_PLACEHOLDER
operator|+
literal|"/xmlrpc"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameterized
operator|.
name|Parameter
specifier|public
name|String
name|apiName
decl_stmt|;
annotation|@
name|Parameterized
operator|.
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|String
name|baseUri
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION_NAME
init|=
literal|"testRename"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ZERO_COLLECTION_NAME
init|=
literal|"0"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|ONE_COLLECTION_NAME
init|=
literal|"1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|THREE_COLLECTION_NAME
init|=
literal|"3"
decl_stmt|;
specifier|private
name|Collection
name|testCollection
decl_stmt|;
specifier|private
specifier|final
name|String
name|getBaseUri
parameter_list|()
block|{
return|return
name|baseUri
operator|.
name|replace
argument_list|(
name|PORT_PLACEHOLDER
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|existWebServer
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|rename_sameName
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|/*          * Create the collections:          *          * /db/testRename/0          * /db/testRename/1          * /db/testRename/0/3          */
name|EXistCollectionManagementService
name|service
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|zeroCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
name|ZERO_COLLECTION_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|zeroCollection
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|oneCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
name|ONE_COLLECTION_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|oneCollection
argument_list|)
expr_stmt|;
name|service
operator|=
operator|(
name|EXistCollectionManagementService
operator|)
name|zeroCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|threeCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
name|THREE_COLLECTION_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|threeCollection
argument_list|)
expr_stmt|;
comment|// rename the collection /db/testRename/0 to /db/testRename/zero
name|service
operator|=
operator|(
name|EXistCollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
try|try
block|{
name|service
operator|.
name|move
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|ZERO_COLLECTION_NAME
argument_list|)
argument_list|,
literal|null
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|ZERO_COLLECTION_NAME
argument_list|)
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"It should be impossible to rename a collection to the same name"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|.
name|indexOf
argument_list|(
literal|"Cannot move collection to itself"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|rename_differentName
parameter_list|()
throws|throws
name|XMLDBException
block|{
comment|/*          * Create the collections:          *          * /db/test/0          * /db/test/1          * /db/test/0/3          */
name|EXistCollectionManagementService
name|service
init|=
operator|(
name|EXistCollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|zeroCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
name|ZERO_COLLECTION_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|zeroCollection
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|oneCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
name|ONE_COLLECTION_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|oneCollection
argument_list|)
expr_stmt|;
name|service
operator|=
operator|(
name|EXistCollectionManagementService
operator|)
name|zeroCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|threeCollection
init|=
name|service
operator|.
name|createCollection
argument_list|(
name|THREE_COLLECTION_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|threeCollection
argument_list|)
expr_stmt|;
comment|// rename the collection /db/test/0 to /db/test/zero
name|service
operator|=
operator|(
name|EXistCollectionManagementService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
specifier|final
name|XmldbURI
name|newName
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"zero"
argument_list|)
decl_stmt|;
name|service
operator|.
name|move
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|ZERO_COLLECTION_NAME
argument_list|)
argument_list|,
literal|null
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|tearDown
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|getBaseUri
argument_list|()
operator|+
literal|"/db"
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
specifier|final
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
name|testCollection
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

