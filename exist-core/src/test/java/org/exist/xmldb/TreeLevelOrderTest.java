begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|After
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Tests the TreeLevelOrder function.  *  * @author Tobias Wunden  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|TreeLevelOrderTest
block|{
comment|/**      * eXist database url      */
specifier|private
specifier|static
specifier|final
name|String
name|eXistUrl
init|=
literal|"xmldb:exist://"
decl_stmt|;
specifier|private
name|Collection
name|root
init|=
literal|null
decl_stmt|;
comment|/**      * Test for the TreeLevelOrder function. This test      *<ul>      *<li>Registers a database instance</li>      *<li>Writes a document to the database using the XQueryService</li>      *<li>Reads the document from the database using XmlDB</li>      *<li>Accesses the document using DOM</li>      *</ul>      */
annotation|@
name|Test
specifier|public
name|void
name|treeLevelOrder
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|ClassNotFoundException
block|{
name|String
name|document
init|=
literal|"survey.xml"
decl_stmt|;
name|EXistXQueryService
name|service
init|=
literal|null
decl_stmt|;
comment|// Obtain XQuery service
name|service
operator|=
name|getXQueryService
argument_list|()
expr_stmt|;
name|assertNotNull
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// create document
name|StringBuilder
name|xmlDocument
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<survey>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<date>2004/11/24 17:42:31 GMT</date>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<from><![CDATA[tobias.wunden@o2it.ch]]></from>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<to><![CDATA[tobias.wunden@o2it.ch]]></to>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<subject><![CDATA[Test]]></subject>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<field>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<name><![CDATA[homepage]]></name>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"<value><![CDATA[-]]></value>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"</field>"
argument_list|)
expr_stmt|;
name|xmlDocument
operator|.
name|append
argument_list|(
literal|"</survey>"
argument_list|)
expr_stmt|;
comment|// write document to the database
name|store
argument_list|(
name|xmlDocument
operator|.
name|toString
argument_list|()
argument_list|,
name|service
argument_list|,
name|document
argument_list|)
expr_stmt|;
comment|// read document back from database
name|Node
name|elem
init|=
name|load
argument_list|(
name|service
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|elem
argument_list|)
expr_stmt|;
comment|//get node using DOM
name|String
name|strTo
init|=
literal|null
decl_stmt|;
name|NodeList
name|rootChildren
init|=
name|elem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rootChildren
operator|.
name|getLength
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|rootChildren
operator|.
name|item
argument_list|(
name|r
argument_list|)
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"to"
argument_list|)
condition|)
block|{
name|Node
name|to
init|=
name|rootChildren
operator|.
name|item
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|strTo
operator|=
name|to
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|strTo
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stores the given xml fragment into the database.      *      * @param xml      the xml document      * @param service  the xquery service      * @param document the document name      */
specifier|private
name|void
name|store
parameter_list|(
name|String
name|xml
parameter_list|,
name|EXistXQueryService
name|service
parameter_list|,
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xdb=\"http://exist-db.org/xquery/xmldb\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $isLoggedIn := xdb:login('"
operator|+
name|eXistUrl
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', 'admin', ''),"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"$doc := xdb:store(\""
operator|+
name|eXistUrl
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"\", $document, $survey)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return<result/>"
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"survey"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads the xml document identified by<code>document</code> from the database.      *      * @param service  the xquery service      * @param document the document to load      */
specifier|private
name|Node
name|load
parameter_list|(
name|EXistXQueryService
name|service
parameter_list|,
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $survey := doc(string-join(('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', $document), '/'))"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return $survey"
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|ResourceSet
name|set
init|=
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
operator|&&
name|set
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|XMLResource
operator|)
name|set
operator|.
name|getIterator
argument_list|()
operator|.
name|nextResource
argument_list|()
operator|)
operator|.
name|getContentAsDOM
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      * Retrieves the base collection and thereof returns a reference to the collection's      * xquery service.      *      * @return the xquery service      */
specifier|private
name|EXistXQueryService
name|getXQueryService
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|EXistXQueryService
name|service
init|=
operator|(
name|EXistXQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
comment|/**      * Registers a new database instance and returns it.      */
annotation|@
name|Before
specifier|public
name|void
name|registerDatabase
parameter_list|()
throws|throws
name|ClassNotFoundException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|XMLDBException
block|{
name|String
name|driverName
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
name|Class
argument_list|<
name|?
argument_list|>
name|driver
init|=
name|Class
operator|.
name|forName
argument_list|(
name|driverName
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|driver
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|this
operator|.
name|root
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|eXistUrl
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|deregisterDatabase
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|DatabaseInstanceManager
name|mgr
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|root
operator|.
name|close
argument_list|()
expr_stmt|;
name|mgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

