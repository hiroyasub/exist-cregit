begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * Tests the TreeLevelOrder function.  *  * @author Tobias Wunden  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|TreeLevelOrderTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|server
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOC1_NAME
init|=
literal|"survey.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOC1
init|=
literal|"<survey>"
operator|+
literal|"<date>2004/11/24 17:42:31 GMT</date>"
operator|+
literal|"<from><![CDATA[tobias.wunden@o2it.ch]]></from>"
operator|+
literal|"<to><![CDATA[tobias.wunden@o2it.ch]]></to>"
operator|+
literal|"<subject><![CDATA[Test]]></subject>"
operator|+
literal|"<field>"
operator|+
literal|"<name><![CDATA[homepage]]></name>"
operator|+
literal|"<value><![CDATA[-]]></value>"
operator|+
literal|"</field>"
operator|+
literal|"</survey>"
decl_stmt|;
comment|/**      * Test for the TreeLevelOrder function. This test      *<ul>      *<li>Registers a database instance</li>      *<li>Writes a document to the database using the XQueryService</li>      *<li>Reads the document from the database using XmlDB</li>      *<li>Accesses the document using DOM</li>      *</ul>      */
annotation|@
name|Test
specifier|public
name|void
name|treeLevelOrder
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|ClassNotFoundException
block|{
comment|// create document
comment|// write document to the database
name|store
argument_list|(
name|DOC1
argument_list|,
name|DOC1_NAME
argument_list|)
expr_stmt|;
comment|// read document back from database
name|Node
name|elem
init|=
name|load
argument_list|(
name|DOC1_NAME
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|elem
argument_list|)
expr_stmt|;
comment|//get node using DOM
name|String
name|strTo
init|=
literal|null
decl_stmt|;
name|NodeList
name|rootChildren
init|=
name|elem
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|rootChildren
operator|.
name|getLength
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
if|if
condition|(
name|rootChildren
operator|.
name|item
argument_list|(
name|r
argument_list|)
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"to"
argument_list|)
condition|)
block|{
name|Node
name|to
init|=
name|rootChildren
operator|.
name|item
argument_list|(
name|r
argument_list|)
decl_stmt|;
name|strTo
operator|=
name|to
operator|.
name|getTextContent
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|assertNotNull
argument_list|(
name|strTo
argument_list|)
expr_stmt|;
block|}
comment|/**      * Stores the given xml fragment into the database.      *      * @param xml      the xml document      * @param document the document name      */
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|String
name|xml
parameter_list|,
specifier|final
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xmldb='http://exist-db.org/xquery/xmldb';"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $isLoggedIn := xmldb:login('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', '"
operator|+
name|TestUtils
operator|.
name|ADMIN_DB_USER
operator|+
literal|"', '"
operator|+
name|TestUtils
operator|.
name|ADMIN_DB_PWD
operator|+
literal|"'),"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"$doc := xmldb:store('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', $document, $survey)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return<result/>"
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|server
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"survey"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
specifier|final
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
expr_stmt|;
block|}
comment|/**      * Loads the xml document identified by<code>document</code> from the database.      *      * @param document the document to load      */
specifier|private
name|Node
name|load
parameter_list|(
specifier|final
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $survey := doc(string-join(('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', $document), '/'))"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return $survey"
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|server
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
specifier|final
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|set
init|=
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
operator|&&
name|set
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|XMLResource
operator|)
name|set
operator|.
name|getIterator
argument_list|()
operator|.
name|nextResource
argument_list|()
operator|)
operator|.
name|getContentAsDOM
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

