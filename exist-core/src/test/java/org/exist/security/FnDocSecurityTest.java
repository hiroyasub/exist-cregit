begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|ACEAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|XQuerySerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
operator|.
name|ROOT_COLLECTION
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|FnDocSecurityTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|TEST_USER_1
init|=
literal|"docTestUser1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOC_NAME_ALL
init|=
literal|"all.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOC_URI_ALL
init|=
name|ROOT_COLLECTION
operator|+
literal|"/"
operator|+
name|TEST_DOC_NAME_ALL
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOC_NAME_SYSTEM_ONLY
init|=
literal|"system-only.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOC_URI_SYSTEM_ONLY
init|=
name|ROOT_COLLECTION
operator|+
literal|"/"
operator|+
name|TEST_DOC_NAME_SYSTEM_ONLY
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION_1
init|=
literal|"/db/fnDocSecurityTest1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SUB_COLLECTION_1
init|=
name|TEST_COLLECTION_1
operator|+
literal|"/child1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOC_NAME_1
init|=
literal|"doc1.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOC_URI_1
init|=
name|TEST_SUB_COLLECTION_1
operator|+
literal|"/"
operator|+
name|TEST_DOC_NAME_1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_COLLECTION_2
init|=
literal|"/db/fnDocSecurityTest2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_SUB_COLLECTION_2
init|=
name|TEST_COLLECTION_2
operator|+
literal|"/child2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOC_NAME_2
init|=
literal|"doc2.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEST_DOC_URI_2
init|=
name|TEST_SUB_COLLECTION_2
operator|+
literal|"/"
operator|+
name|TEST_DOC_NAME_2
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|server
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|/**      * Sets up the database like:      *      *  /db/all.xml                              system:dba rwxrwxrwx      *  /db/system-only.xml                      system:dba rwx------      *      *  /db/fnDocSecurityTest1                   system:dba rwxr-xr--      *  /db/fnDocSecurityTest1/child1            system:dba rwxrwxrwx      *  /db/fnDocSecurityTest1/child1/doc1.xml   system:dba rwxrwxrwx      *      *  /db/fnDocSecurityTest2                   system:dba rwxr-xr-x+ (acl=[DENIED USER docTestUser1 "r-x"])      *  /db/fnDocSecurityTest2/child2            system:dba rwxrwxrwx      *  /db/fnDocSecurityTest2/child2/doc2.xml   system:dba rwxrwxrwx      *      * Creates a new user: docTestUser1      */
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|SyntaxException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
block|{
comment|// as system user
specifier|final
name|BrokerPool
name|pool
init|=
name|server
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|securityManager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|createUser
argument_list|(
name|securityManager
argument_list|,
name|broker
argument_list|,
name|TEST_USER_1
argument_list|)
expr_stmt|;
comment|// create /db/all.xml
name|createDocument
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|ROOT_COLLECTION
argument_list|,
name|TEST_DOC_NAME_ALL
argument_list|,
literal|"<hello/>"
argument_list|,
literal|"rwxrwxrwx"
argument_list|)
expr_stmt|;
comment|// create /db/system-only.xml
name|createDocument
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|ROOT_COLLECTION
argument_list|,
name|TEST_DOC_NAME_SYSTEM_ONLY
argument_list|,
literal|"<hello/>"
argument_list|,
literal|"rwx------"
argument_list|)
expr_stmt|;
comment|// create /db/fnDocSecurityTest1...
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_COLLECTION_1
argument_list|,
literal|"rwxr-xr--"
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SUB_COLLECTION_1
argument_list|,
literal|"rwxrwxrwx"
argument_list|)
expr_stmt|;
name|createDocument
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SUB_COLLECTION_1
argument_list|,
name|TEST_DOC_NAME_1
argument_list|,
literal|"<hello/>"
argument_list|,
literal|"rwxrwxrwx"
argument_list|)
expr_stmt|;
comment|// create /db/fnDocSecurityTest2...
specifier|final
name|ACEAider
name|ace
init|=
operator|new
name|ACEAider
argument_list|(
name|ACLPermission
operator|.
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
argument_list|,
name|ACLPermission
operator|.
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|TEST_USER_1
argument_list|,
name|SimpleACLPermission
operator|.
name|aceSimpleSymbolicModeToInt
argument_list|(
literal|"r-x"
argument_list|)
argument_list|)
decl_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_COLLECTION_2
argument_list|,
literal|"rwxr-xr-x"
argument_list|,
name|ace
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SUB_COLLECTION_2
argument_list|,
literal|"rwxrwxrwx"
argument_list|)
expr_stmt|;
name|createDocument
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SUB_COLLECTION_2
argument_list|,
name|TEST_DOC_NAME_2
argument_list|,
literal|"<hello/>"
argument_list|,
literal|"rwxrwxrwx"
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|canAccessDocument
parameter_list|()
throws|throws
name|EXistException
throws|,
name|AuthenticationException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
throws|,
name|IOException
throws|,
name|SAXException
block|{
comment|// as docTestUser1 user
specifier|final
name|String
name|query
init|=
literal|"fn:doc('"
operator|+
name|TEST_DOC_URI_ALL
operator|+
literal|"')"
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|server
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|securityManager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|testUser1
init|=
name|securityManager
operator|.
name|authenticate
argument_list|(
name|TEST_USER_1
argument_list|,
name|TEST_USER_1
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|testUser1
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|XQuery
name|xqueryService
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<hello/>"
argument_list|,
name|serialize
argument_list|(
name|broker
argument_list|,
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotAccessRestrictedDocument
parameter_list|()
throws|throws
name|EXistException
throws|,
name|AuthenticationException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
throws|,
name|IOException
throws|,
name|SAXException
block|{
comment|// as docTestUser1 user
specifier|final
name|String
name|query
init|=
literal|"fn:doc('"
operator|+
name|TEST_DOC_URI_SYSTEM_ONLY
operator|+
literal|"')"
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|server
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|securityManager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|testUser1
init|=
name|securityManager
operator|.
name|authenticate
argument_list|(
name|TEST_USER_1
argument_list|,
name|TEST_USER_1
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|testUser1
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|XQuery
name|xqueryService
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected PermissionDeniedException via XPathException"
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|PermissionDeniedException
condition|)
block|{
throw|throw
operator|(
name|PermissionDeniedException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotAccessDocumentInCollectionHierarchyWithDeniedExecute
parameter_list|()
throws|throws
name|EXistException
throws|,
name|AuthenticationException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
comment|// as docTestUser1 user
specifier|final
name|String
name|query
init|=
literal|"fn:doc('"
operator|+
name|TEST_DOC_URI_1
operator|+
literal|"')"
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|server
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|securityManager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|testUser1
init|=
name|securityManager
operator|.
name|authenticate
argument_list|(
name|TEST_USER_1
argument_list|,
name|TEST_USER_1
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|testUser1
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|XQuery
name|xqueryService
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected PermissionDeniedException via XPathException"
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|PermissionDeniedException
condition|)
block|{
throw|throw
operator|(
name|PermissionDeniedException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotAccessDocumentInCollectionHierarchyWithDeniedReadAndExecuteAce
parameter_list|()
throws|throws
name|EXistException
throws|,
name|AuthenticationException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
comment|// as docTestUser1 user
specifier|final
name|String
name|query
init|=
literal|"fn:doc('"
operator|+
name|TEST_DOC_URI_2
operator|+
literal|"')"
decl_stmt|;
specifier|final
name|BrokerPool
name|pool
init|=
name|server
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|securityManager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|testUser1
init|=
name|securityManager
operator|.
name|authenticate
argument_list|(
name|TEST_USER_1
argument_list|,
name|TEST_USER_1
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|testUser1
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|XQuery
name|xqueryService
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|fail
argument_list|(
literal|"Expected PermissionDeniedException via XPathException"
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|PermissionDeniedException
condition|)
block|{
throw|throw
operator|(
name|PermissionDeniedException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|createUser
parameter_list|(
specifier|final
name|SecurityManager
name|securityManager
parameter_list|,
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|String
name|username
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|UserAider
name|user
init|=
operator|new
name|UserAider
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|Group
name|group
init|=
operator|new
name|GroupAider
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|group
operator|.
name|setMetadataValue
argument_list|(
name|EXistSchemaType
operator|.
name|DESCRIPTION
argument_list|,
literal|"Personal group for "
operator|+
name|username
argument_list|)
expr_stmt|;
name|group
operator|.
name|addManager
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|securityManager
operator|.
name|addGroup
argument_list|(
name|broker
argument_list|,
name|group
argument_list|)
expr_stmt|;
comment|// add the personal group as the primary group
name|user
operator|.
name|addGroup
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|securityManager
operator|.
name|addAccount
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// add the new account as a manager of their personal group
name|group
operator|=
name|securityManager
operator|.
name|getGroup
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|group
operator|.
name|addManager
argument_list|(
name|securityManager
operator|.
name|getAccount
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|securityManager
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|createCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|String
name|collectionUri
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|,
specifier|final
name|ACEAider
modifier|...
name|aces
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|SyntaxException
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|collectionUri
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|Permission
name|permissions
init|=
name|collection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|permissions
operator|.
name|setMode
argument_list|(
name|modeStr
argument_list|)
expr_stmt|;
if|if
condition|(
name|permissions
operator|instanceof
name|SimpleACLPermission
condition|)
block|{
specifier|final
name|SimpleACLPermission
name|aclPermissions
init|=
operator|(
name|SimpleACLPermission
operator|)
name|permissions
decl_stmt|;
for|for
control|(
specifier|final
name|ACEAider
name|ace
range|:
name|aces
control|)
block|{
name|aclPermissions
operator|.
name|addACE
argument_list|(
name|ace
operator|.
name|getAccessType
argument_list|()
argument_list|,
name|ace
operator|.
name|getTarget
argument_list|()
argument_list|,
name|ace
operator|.
name|getWho
argument_list|()
argument_list|,
name|ace
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|createDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|String
name|collectionUri
parameter_list|,
specifier|final
name|String
name|docName
parameter_list|,
specifier|final
name|String
name|content
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|SyntaxException
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|collectionUri
argument_list|)
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
specifier|final
name|IndexInfo
name|indexInfo
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|docName
argument_list|)
argument_list|,
name|content
argument_list|)
decl_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|indexInfo
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|PermissionFactory
operator|.
name|chmod_str
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|XmldbURI
operator|.
name|create
argument_list|(
name|collectionUri
argument_list|)
operator|.
name|append
argument_list|(
name|docName
argument_list|)
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|modeStr
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|serialize
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Sequence
name|sequence
parameter_list|)
throws|throws
name|IOException
throws|,
name|XPathException
throws|,
name|SAXException
block|{
try|try
init|(
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
init|)
block|{
specifier|final
name|XQuerySerializer
name|serializer
init|=
operator|new
name|XQuerySerializer
argument_list|(
name|broker
argument_list|,
operator|new
name|Properties
argument_list|()
argument_list|,
name|writer
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

