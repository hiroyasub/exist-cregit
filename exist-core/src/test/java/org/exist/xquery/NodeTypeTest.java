begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XQueryService
import|;
end_import

begin_comment
comment|/**  * RemoveAndReloadTest.java  *  * O2 IT Engineering  * Zurich,  Switzerland (CH)  *  * This test provokes a parameter type error (how?).  *   * @author Tobias Wunden  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|NodeTypeTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistXmldbEmbeddedServer
name|server
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DOC
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
operator|+
literal|"<page partition=\"home\" path=\"/\" version=\"live\">"
operator|+
literal|"<header>"
operator|+
literal|"<renderer>home_dreispaltig</renderer>"
operator|+
literal|"<layout>default</layout>"
operator|+
literal|"<type>default</type>"
operator|+
literal|"<publish>"
operator|+
literal|"<from>2005/06/06 10:53:40 GMT</from>"
operator|+
literal|"<to>292278994/08/17 07:12:55 GMT</to>"
operator|+
literal|"</publish>"
operator|+
literal|"<security>"
operator|+
literal|"<owner>www</owner>"
operator|+
literal|"<permission id=\"system:manage\" type=\"role\">system:editor</permission>"
operator|+
literal|"<permission id=\"system:read\" type=\"role\">system:guest</permission>"
operator|+
literal|"<permission id=\"system:translate\" type=\"role\">system:translator</permission>"
operator|+
literal|"<permission id=\"system:publish\" type=\"role\">system:publisher</permission>"
operator|+
literal|"<permission id=\"system:write\" type=\"role\">system:editor</permission>"
operator|+
literal|"</security>"
operator|+
literal|"<keywords/>"
operator|+
literal|"<title language=\"de\">Home</title>"
operator|+
literal|"<title language=\"fr\">Home</title>"
operator|+
literal|"<title language=\"it\">Home</title>"
operator|+
literal|"<modified>"
operator|+
literal|"<date>2005/06/06 10:53:40 GMT</date>"
operator|+
literal|"<user>markus.jauss</user>"
operator|+
literal|"</modified>"
operator|+
literal|"</header>"
operator|+
literal|"<body/>"
operator|+
literal|"</page>"
decl_stmt|;
comment|/** 	 * This test passes nodes containing xml entities to eXist and tries 	 * to read it back in: 	 *<ul> 	 *<li>Register a database instance</li> 	 *<li>Write a "live" document to the database using the XQueryService</li> 	 *<li>Create a "work" version of it</li> 	 *</ul> 	 */
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|removeAndReload
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|InstantiationException
throws|,
name|IllegalAccessException
throws|,
name|ClassNotFoundException
block|{
comment|// write "live" document to the database
name|store
argument_list|(
name|DOC
argument_list|,
literal|"live.xml"
argument_list|)
expr_stmt|;
comment|// copy content from work.xml to live.xml using XUpdate
name|prepareWorkVersion
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Stores the given xml fragment into the database. 	 *  	 * @param xml the xml document 	 * @param document the document name	  	 */
specifier|private
specifier|final
name|void
name|store
parameter_list|(
specifier|final
name|String
name|xml
parameter_list|,
specifier|final
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xmldb='http://exist-db.org/xquery/xmldb';"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $isLoggedIn := xmldb:login('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|+
literal|"', '"
operator|+
name|TestUtils
operator|.
name|ADMIN_DB_USER
operator|+
literal|"', '"
operator|+
name|TestUtils
operator|.
name|ADMIN_DB_USER
operator|+
literal|"'),"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"$doc := xmldb:store('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', $document, $data)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return<result/>"
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|server
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"data"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
specifier|final
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Updates the given xml fragment in the database using XUpdate. 	 */
specifier|private
specifier|final
name|void
name|prepareWorkVersion
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xmldb='http://exist-db.org/xquery/xmldb';\n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace f='urn:weblounge';\n"
argument_list|)
expr_stmt|;
comment|// Returns a new with a given body and a new header
name|query
operator|.
name|append
argument_list|(
literal|"declare function f:create($live as node(), $target as xs:string) as node() { \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"<page partition='{$live/@partition}' path='{$live/@path}' version='{$target}'> \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"        {$live/*} \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"</page> \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"}; \n"
argument_list|)
expr_stmt|;
comment|// Function "prepare". Checks if the work version already exists. If this is not the
comment|// case, it calls the "create" function to have a new page created with the live body
comment|// but with a "work" or "$target" header.
name|query
operator|.
name|append
argument_list|(
literal|"declare function f:prepare($data as node(), $target as xs:string) as xs:string? { \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"    if (empty(xmldb:xcollection($collection)/page[@version eq $target])) then \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"        let $isLoggedIn := xmldb:login($collection, '"
operator|+
name|TestUtils
operator|.
name|ADMIN_DB_USER
operator|+
literal|"', '"
operator|+
name|TestUtils
operator|.
name|ADMIN_DB_PWD
operator|+
literal|"') \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"        return xmldb:store($collection, concat($target, '.xml'), f:create($data, $target)) \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"    else \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"    () \n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"}; \n"
argument_list|)
expr_stmt|;
comment|// Main clause, tries to create a work from an existing live version
name|query
operator|.
name|append
argument_list|(
literal|"let $live := xmldb:xcollection($collection)/page[@version eq 'live'],\n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"     $log := util:log('DEBUG', $live),\n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"     $w := f:prepare($live, 'work')\n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"    return\n"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"		              ()\n"
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|server
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"collection"
argument_list|,
name|XmldbURI
operator|.
name|ROOT_COLLECTION
argument_list|)
expr_stmt|;
specifier|final
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Updates the given xml fragment in the database using XUpdate. 	 */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|void
name|xupdateRemove
parameter_list|(
specifier|final
name|String
name|doc
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xmldb='http://exist-db.org/xquery/xmldb';"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $isLoggedIn := xmldb:login('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
operator|+
literal|"', '"
operator|+
name|TestUtils
operator|.
name|ADMIN_DB_USER
operator|+
literal|"', '"
operator|+
name|TestUtils
operator|.
name|ADMIN_DB_USER
operator|+
literal|"'),"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"$mods := xmldb:remove('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', '"
operator|+
name|doc
operator|+
literal|"')"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return<modifications>{$mods}</modifications>"
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|server
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Loads the xml document identified by<code>document</code> from the database. 	 * 	 * @param document the document to load	  	 */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
specifier|private
name|Node
name|load
parameter_list|(
specifier|final
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $result := doc(string-join(('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', $document), '/'))"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return ($result)"
argument_list|)
expr_stmt|;
specifier|final
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|server
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|declareVariable
argument_list|(
literal|"document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
specifier|final
name|CompiledExpression
name|cQuery
init|=
name|service
operator|.
name|compile
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|ResourceSet
name|set
init|=
name|service
operator|.
name|execute
argument_list|(
name|cQuery
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|!=
literal|null
operator|&&
name|set
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|XMLResource
operator|)
name|set
operator|.
name|getIterator
argument_list|()
operator|.
name|nextResource
argument_list|()
operator|)
operator|.
name|getContentAsDOM
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

