begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist-db Open Source Native XML Database  * Copyright (C) 2001 The eXist-db Authors  *  * info@exist-db.org  * http://www.exist-db.org  *  * This library is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public  * License as published by the Free Software Foundation; either  * version 2.1 of the License, or (at your option) any later version.  *  * This library is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU  * Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|CardinalityTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|atLeastOne
parameter_list|()
block|{
name|assertFalse
argument_list|(
name|EMPTY_SEQUENCE
operator|.
name|atLeastOne
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ZERO_OR_ONE
operator|.
name|atLeastOne
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ONE_OR_MORE
operator|.
name|atLeastOne
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ZERO_OR_MORE
operator|.
name|atLeastOne
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|atMostOne
parameter_list|()
block|{
name|assertTrue
argument_list|(
name|EMPTY_SEQUENCE
operator|.
name|atMostOne
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|ZERO_OR_ONE
operator|.
name|atMostOne
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ONE_OR_MORE
operator|.
name|atMostOne
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|ZERO_OR_MORE
operator|.
name|atMostOne
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isSubCardinalityOrEqualOf
parameter_list|()
block|{
name|isSubCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|notSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|isSubCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|isSubCardinalityOrEqualOf
parameter_list|(
specifier|final
name|Cardinality
name|subject
parameter_list|,
specifier|final
name|Cardinality
name|test
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|subject
operator|.
name|name
argument_list|()
operator|+
literal|".isSubCardinalityOrEqualOf("
operator|+
name|test
operator|.
name|name
argument_list|()
operator|+
literal|") == false, expected true"
argument_list|,
name|subject
operator|.
name|isSubCardinalityOrEqualOf
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|notSubCardinalityOrEqualOf
parameter_list|(
specifier|final
name|Cardinality
name|subject
parameter_list|,
specifier|final
name|Cardinality
name|test
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|subject
operator|.
name|name
argument_list|()
operator|+
literal|".isSubCardinalityOrEqualOf("
operator|+
name|test
operator|.
name|name
argument_list|()
operator|+
literal|") == true, expected false"
argument_list|,
name|subject
operator|.
name|isSubCardinalityOrEqualOf
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|isSuperCardinalityOf
parameter_list|()
block|{
name|isSuperCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|notSuperCardinalityOrEqualOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|EXACTLY_ONE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
name|isSuperCardinalityOrEqualOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|isSuperCardinalityOrEqualOf
parameter_list|(
specifier|final
name|Cardinality
name|subject
parameter_list|,
specifier|final
name|Cardinality
name|test
parameter_list|)
block|{
name|assertTrue
argument_list|(
name|subject
operator|.
name|name
argument_list|()
operator|+
literal|".isSuperCardinalityOrEqualOf("
operator|+
name|test
operator|.
name|name
argument_list|()
operator|+
literal|") == false, expected true"
argument_list|,
name|subject
operator|.
name|isSuperCardinalityOrEqualOf
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|notSuperCardinalityOrEqualOf
parameter_list|(
specifier|final
name|Cardinality
name|subject
parameter_list|,
specifier|final
name|Cardinality
name|test
parameter_list|)
block|{
name|assertFalse
argument_list|(
name|subject
operator|.
name|name
argument_list|()
operator|+
literal|".isSuperCardinalityOrEqualOf("
operator|+
name|test
operator|.
name|name
argument_list|()
operator|+
literal|") == true, expected false"
argument_list|,
name|subject
operator|.
name|isSuperCardinalityOrEqualOf
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|superCardinalityOf
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|EXACTLY_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|ONE_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EMPTY_SEQUENCE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|EXACTLY_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|ONE_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|EXACTLY_ONE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|EXACTLY_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|ONE_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_ONE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|EXACTLY_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|ONE_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ONE_OR_MORE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|EMPTY_SEQUENCE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|EXACTLY_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|ZERO_OR_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|ONE_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|Cardinality
operator|.
name|superCardinalityOf
argument_list|(
name|ZERO_OR_MORE
argument_list|,
name|ZERO_OR_MORE
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

