begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * XMLNodeAsXQueryParameterTest.java  *  * 2005 by O2 IT Engineering  * Zurich,  Switzerland (CH)  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_comment
comment|/**  * Class to test eXist's capability to handle XML Nodes as XQuery parameter.  *  * @author Tobias Wunden  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|XMLNodeAsXQueryParameterTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|final
specifier|static
name|ExistXmldbEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|/** 	 * This test passes a W3C dom node as an xquery parameter to eXist and tries 	 * to read it back in: 	 *<ul> 	 *<li>Register a database instance</li> 	 *<li>Write a document to the database using the XQueryService</li> 	 *<li>Read the document from the database using XmlDB</li> 	 *<li>Check for the document content</li> 	 *</ul> 	 */
annotation|@
name|Test
specifier|public
specifier|final
name|void
name|xmlNodeAsXQueryParameter
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|ParserConfigurationException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|ClassNotFoundException
block|{
specifier|final
name|String
name|document
init|=
literal|"test.xml"
decl_stmt|;
comment|// create document
specifier|final
name|String
name|xmlDocument
init|=
literal|"<XmlNodeTest/>"
decl_stmt|;
comment|// write document to the database
name|store
argument_list|(
name|xmlDocument
argument_list|,
name|document
argument_list|)
expr_stmt|;
comment|// add content using XUpdate
specifier|final
name|String
name|xmlData
init|=
literal|"<content/>"
decl_stmt|;
try|try
init|(
specifier|final
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|xmlData
argument_list|)
init|)
block|{
specifier|final
name|InputSource
name|is
init|=
operator|new
name|InputSource
argument_list|(
name|reader
argument_list|)
decl_stmt|;
specifier|final
name|DocumentBuilder
name|docBuilder
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
specifier|final
name|Document
name|doc
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
decl_stmt|;
name|xupdate
argument_list|(
name|doc
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
comment|// read document back from database
specifier|final
name|Node
name|root
init|=
name|load
argument_list|(
name|document
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Document "
operator|+
name|document
operator|+
literal|" was not found in the database!"
argument_list|)
expr_stmt|;
block|}
comment|// issue xpath query
specifier|final
name|Node
name|node
init|=
name|root
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|node
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"XUpdate:append using w3c dom node failed! Content node was not returned."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Stores the given xml fragment into the database. 	 * 	 * @param xml the xml document 	 * @param document the document name 	 * @throws XMLDBException on database error 	 */
specifier|private
name|void
name|store
parameter_list|(
specifier|final
name|String
name|xml
parameter_list|,
specifier|final
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xmldb=\"http://exist-db.org/xquery/xmldb\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare variable $local:document external;"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare variable $local:data external;"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $loggedIn := xmldb:login(\""
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"\", \"admin\", \"\"),"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"$doc := xmldb:store(\""
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"\", $local:document, $local:data)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return<result/>"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|externalVariables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|externalVariables
operator|.
name|put
argument_list|(
literal|"local:document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
name|externalVariables
operator|.
name|put
argument_list|(
literal|"local:data"
argument_list|,
name|xml
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|,
name|externalVariables
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Updates the given xml fragment in the database using XUpdate. 	 * 	 * @param data the data node 	 * @throws XMLDBException on database error 	 */
specifier|private
name|void
name|xupdate
parameter_list|(
specifier|final
name|Object
name|data
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|data
operator|==
literal|null
condition|)
block|{
name|fail
argument_list|(
literal|"Cannot update because data is 'null'"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare namespace xmldb=\"http://exist-db.org/xquery/xmldb\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare variable $local:data external;"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare variable $xupdate {"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"<xu:modifications version=\"1.0\" xmlns:xu=\"http://www.xmldb.org/xupdate\">"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"<xu:append select=\"xmldb:xcollection('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"')/XmlNodeTest\">"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"{$local:data}"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"</xu:append>"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"</xu:modifications>"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"};"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $isLoggedIn := xmldb:login('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', \"admin\", \"\"),"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"$mods := xmldb:update(\""
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"\", $xupdate)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return<modifications>{$mods}</modifications>"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|externalVariables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|externalVariables
operator|.
name|put
argument_list|(
literal|"local:data"
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|,
name|externalVariables
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Loads the xml document identified by<code>document</code> from the database. 	 * 	 * @param document the document to load 	 * @throws XMLDBException on database error 	 */
specifier|private
name|Node
name|load
parameter_list|(
specifier|final
name|String
name|document
parameter_list|)
throws|throws
name|XMLDBException
block|{
specifier|final
name|StringBuilder
name|query
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"xquery version \"1.0\";"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"declare variable $local:document external;"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"let $survey := doc(string-join(('"
operator|+
name|XmldbURI
operator|.
name|ROOT_COLLECTION
operator|+
literal|"', $local:document), '/'))"
argument_list|)
expr_stmt|;
name|query
operator|.
name|append
argument_list|(
literal|"return $survey"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|externalVariables
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
name|externalVariables
operator|.
name|put
argument_list|(
literal|"local:document"
argument_list|,
name|document
argument_list|)
expr_stmt|;
specifier|final
name|ResourceSet
name|results
init|=
name|existEmbeddedServer
operator|.
name|executeQuery
argument_list|(
name|query
operator|.
name|toString
argument_list|()
argument_list|,
name|externalVariables
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|!=
literal|null
operator|&&
name|results
operator|.
name|getSize
argument_list|()
operator|>
literal|0
condition|)
block|{
return|return
operator|(
operator|(
name|XMLResource
operator|)
name|results
operator|.
name|getIterator
argument_list|()
operator|.
name|nextResource
argument_list|()
operator|)
operator|.
name|getContentAsDOM
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

