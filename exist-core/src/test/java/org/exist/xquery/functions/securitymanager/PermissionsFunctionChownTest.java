begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|securitymanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|Runnable4E
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|TestConstants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_class
specifier|public
class|class
name|PermissionsFunctionChownTest
block|{
specifier|private
specifier|static
specifier|final
name|boolean
name|RESTRICTED
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|NOT_RESTRICTED
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|IS_SET
init|=
literal|true
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|boolean
name|NOT_SET
init|=
literal|false
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER1_NAME
init|=
literal|"user1"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER1_PWD
init|=
name|USER1_NAME
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER2_NAME
init|=
literal|"user2"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USER2_PWD
init|=
name|USER2_NAME
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USERRM_NAME
init|=
literal|"userrm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|USERRM_PWD
init|=
name|USERRM_NAME
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|USER1_COL1
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"u1c1"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|USER1_COL2
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"u1c2"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|USER1_DOC1
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"u1d1.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|USER1_XQUERY1
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"u1xq1.xq"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|OTHER_GROUP_NAME
init|=
literal|"otherGroup"
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistEmbeddedServer
name|existWebServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|/**      * With {@code posix-chown-restricted="true"},      * as a DBA user change the owner of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as a DBA user change the owner of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as a DBA user change the owner of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as a DBA user change the owner of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the owner of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the collection owner user change the owner of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the document's owner) change the owner of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the document's owner) change the owner of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the collection's owner) change the owner of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the collection's owner) change the owner of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as a DBA user change the owner of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as a DBA user change the owner of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as a DBA user change the owner of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as a DBA user change the owner of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentOwnerAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the owner of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionOwnerAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the collection owner user change the owner of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the document's owner) change the owner of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentOwnerAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the document's owner) change the owner of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentOwnerAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the collection's owner) change the owner of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionOwnerAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the collection's owner) change the owner of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionOwnerAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "user1".      * Finally make sure that chown has cleared the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsNonDBAOwner_clearsSetUidAndSetGid_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are now cleared
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "user1".      * Finally make sure that chown has cleared the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsNonDBAOwner_clearsSetUidAndSetGid
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are now cleared
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the owner of {@link #USER1_COL2} from "user1" to "user1".      * Finally make sure that chown has cleared the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsNonDBAOwner_clearsSetUidAndSetGid_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are now cleared
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the collection owner user change the owner of {@link #USER1_COL2} from "user1" to "user1".      * Finally make sure that chown has cleared the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsNonDBAOwner_clearsSetUidAndSetGid
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are now cleared
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the DBA user change the owner of {@link #USER1_DOC1} from "user1" to "user1".      * Finally make sure that chown has preserved the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsDBA_preservesSetUidAndSetGid_restricted
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are still set
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the DBA user change the owner of {@link #USER1_DOC1} from "user1" to "user1".      * Finally make sure that chown has preserved the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToSelfAsDBA_preservesSetUidAndSetGid
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are still set
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the DBA user change the owner of {@link #USER1_COL2} from "user1" to "user1".      * Finally make sure that chown has preserved the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsDBA_preservesSetUidAndSetGid_restricted
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are still set
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the DBA user change the owner of {@link #USER1_COL2} from "user1" to "user1".      * Finally make sure that chown has preserved the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToSelfAsDBA_preservesSetUidAndSetGid
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are still set
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as a DBA user change the group of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as a DBA user change the group of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as a DBA user change the group of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as a DBA user change the group of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the group of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the document owner user change the group of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the group of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the collection owner user change the group of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the document's owner) change the group of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the document's owner) change the group of {@link #USER1_DOC1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the collection's owner) change the group of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the collection's owner) change the group of {@link #USER1_COL1} from "user1" to "user1".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as a DBA user change the group of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as a DBA user change the group of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as a DBA user change the group of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as a DBA user change the group of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the group of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentGroupAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the document owner user change the group of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the group of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionGroupAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the collection owner user change the group of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the document's owner) change the group of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentGroupAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the document's owner) change the group of {@link #USER1_DOC1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentGroupAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the collection's owner) change the group of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionGroupAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the collection's owner) change the group of {@link #USER1_COL1} from "user1" to "user2".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionGroupAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the group of {@link #USER1_DOC1} from "user1" to "otherGroup" (of which user1 is a member).      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToMemberGroupAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|OTHER_GROUP_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the document owner user change the group of {@link #USER1_DOC1} from "user1" to "otherGroup" (of which user1 is a member).      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToMemberGroupAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|OTHER_GROUP_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the group of {@link #USER1_COL1} from "user1" to "otherGroup" (of which user1 is a member).      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToMemberGroupAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|OTHER_GROUP_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the collection owner user change the group of {@link #USER1_COL1} from "user1" to "otherGroup" (of which user1 is a member).      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToMemberGroupAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|OTHER_GROUP_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the document's owner) change the group of {@link #USER1_DOC1} from "user1" to "otherGroup" (of which user2 is a member).      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentGroupToMemberGroupAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|OTHER_GROUP_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the document's owner) change the group of {@link #USER1_DOC1} from "user1" to "otherGroup" (of which user2 is a member).      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentGroupToMemberGroupAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|OTHER_GROUP_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the user "user2" (not the collection's owner) change the group of {@link #USER1_COL1} from "user1" to "otherGroup" (of which user2 is a member).      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionGroupToMemberGroupAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|OTHER_GROUP_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the user "user2" (not the collection's owner) change the group of {@link #USER1_COL1} from "user1" to "otherGroup" (of which user2 is a member).      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionGroupToMemberGroupAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|OTHER_GROUP_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the group of {@link #USER1_DOC1} from "user1" to "user1".      * Finally make sure that chown has cleared the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsNonDBAOwner_clearsSetUidAndSetGid_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are now cleared
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the document owner user change the group of {@link #USER1_DOC1} from "user1" to "user1".      * Finally make sure that chown has cleared the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsNonDBAOwner_clearsSetUidAndSetGid
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are now cleared
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the group of {@link #USER1_COL2} from "user1" to "user1".      * Finally make sure that chown has cleared the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsNonDBAOwner_clearsSetUidAndSetGid_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are now cleared
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the collection owner user change the group of {@link #USER1_COL2} from "user1" to "user1".      * Finally make sure that chown has cleared the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsNonDBAOwner_clearsSetUidAndSetGid
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are now cleared
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|NOT_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the DBA user change the group of {@link #USER1_DOC1} from "user1" to "user1".      * Finally make sure that chown has preserved the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsDBA_preservesSetUidAndSetGid_restricted
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are still set
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the DBA user change the group of {@link #USER1_DOC1} from "user1" to "user1".      * Finally make sure that chown has preserved the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToSelfAsDBA_preservesSetUidAndSetGid
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are still set
name|assertDocumentSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_XQUERY1
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the DBA user change the group of {@link #USER1_COL2} from "user1" to "user1".      * Finally make sure that chown has preserved the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsDBA_preservesSetUidAndSetGid_restricted
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are still set
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="false"},      * as the DBA user change the owner of {@link #USER1_COL2} from "user1" to "user1".      * Finally make sure that chown has preserved the setUid and setGid bits.      */
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToSelfAsDBA_preservesSetUidAndSetGid
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
decl_stmt|;
comment|// check the setUid and setGid bits are set before we begin
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
comment|// change the owner
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
comment|// check the setUid and setGid bits are still set
name|assertCollectionSetUidSetGid
argument_list|(
name|user1
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|,
name|IS_SET
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToNonExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToNonExistentAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToRemovedUserAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToRemovedUserAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToNonExistentAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the owner of {@link #USER1_COL1} from "user1" to "no-such-user".      */
specifier|public
name|void
name|changeCollectionOwnerToNonExistentAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionOwnerToRemovedUserAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the owner of {@link #USER1_COL1} from "user1" to "userrm".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionOwnerToRemovedUserAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionOwnerToNonExistentAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionOwnerToNonExistentAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionOwnerToRemovedUserAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionOwnerToRemovedUserAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToNonExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToNonExistentAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToRemovedGroupAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToRemovedGroupAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToNonExistentAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToNonExistentAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToRemovedGroupAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeCollectionGroupToRemovedGroupAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionGroupToNonExistentAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionGroupToNonExistentAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionGroupToRemovedGroupAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeCollectionGroupToRemovedGroupAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToNonExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToNonExistentAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToRemovedUserAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToRemovedUserAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToNonExistentAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "no-such-user".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentOwnerToNonExistentAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentOwnerToRemovedUserAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "no-such-user".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentOwnerToRemovedUserAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentOwnerToNonExistentAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentOwnerToNonExistentAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-user"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentOwnerToRemovedUserAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentOwnerToRemovedUserAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToNonExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToNonExistentAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToRemovedGroupAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToRemovedGroupAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToNonExistentAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToNonExistentAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToRemovedGroupAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|changeDocumentGroupToRemovedGroupAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentGroupToNonExistentAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentGroupToNonExistentAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
literal|"no-such-group"
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentGroupToRemovedGroupAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|changeDocumentGroupToRemovedGroupAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeGroup
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|USERRM_NAME
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
comment|//TODO need tests for changing owner like "user:group" and checking both resultant group and owner
annotation|@
name|Test
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToNonExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToNonExistentAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToRemovedAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToRemovedAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToNonExistentAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the owner of {@link #USER1_COL1} from "user1" to "no-such-user".      */
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToNonExistentAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToRemovedAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the collection owner user change the owner of {@link #USER1_COL1} from "user1" to "userrm".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToRemovedAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToNonExistentAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToNonExistentAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToRemovedAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeCollectionOwnerAndGroupToRemovedAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToNonExistentAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToNonExistentAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToRemovedAsDBA
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToRemovedAsDBA_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|adminUser
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|adminUser
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToNonExistentAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "no-such-user".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToNonExistentAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToRemovedAsNonDBAOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * With {@code posix-chown-restricted="true"},      * as the document owner user change the owner of {@link #USER1_DOC1} from "user1" to "no-such-user".      */
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToRemovedAsNonDBAOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user1
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user1
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToNonExistentAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToNonExistentAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
literal|"no-such-user"
argument_list|,
literal|"no-such-group"
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToRemovedAsNonOwner
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|NOT_RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|ChangeDocumentOwnerAndGroupToRemovedAsNonOwner_restricted
parameter_list|()
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
specifier|final
name|Subject
name|user2
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
decl_stmt|;
name|changeOwner
argument_list|(
name|user2
argument_list|,
name|RESTRICTED
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USERRM_NAME
argument_list|,
name|USERRM_NAME
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_NAME
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|changeOwner
parameter_list|(
specifier|final
name|Subject
name|execAsUser
parameter_list|,
specifier|final
name|boolean
name|restricted
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|,
specifier|final
name|String
name|newOwner
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
name|changeOwner
argument_list|(
name|execAsUser
argument_list|,
name|restricted
argument_list|,
name|uri
argument_list|,
name|newOwner
argument_list|,
name|newOwner
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|changeOwner
parameter_list|(
specifier|final
name|Subject
name|execAsUser
parameter_list|,
specifier|final
name|boolean
name|restricted
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|,
specifier|final
name|Tuple2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|newOwnerGroup
parameter_list|,
specifier|final
name|Tuple2
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|expectedOwnerGroup
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
name|changeOwner
argument_list|(
name|execAsUser
argument_list|,
name|restricted
argument_list|,
name|uri
argument_list|,
name|newOwnerGroup
operator|.
expr|<
name|String
operator|>
name|fold
argument_list|(
name|og
lambda|->
name|og
operator|.
name|_1
operator|+
literal|":"
operator|+
name|og
operator|.
name|_2
argument_list|)
argument_list|,
name|expectedOwnerGroup
operator|.
expr|<
name|String
operator|>
name|fold
argument_list|(
name|og
lambda|->
name|og
operator|.
name|_1
operator|+
literal|":"
operator|+
name|og
operator|.
name|_2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|changeOwner
parameter_list|(
specifier|final
name|Subject
name|execAsUser
parameter_list|,
specifier|final
name|boolean
name|restricted
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|,
specifier|final
name|String
name|newOwnerGroup
parameter_list|,
specifier|final
name|String
name|expectedOwnerGroup
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|prevRestricted
init|=
name|setPosixChownRestricted
argument_list|(
name|restricted
argument_list|)
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"import module namespace sm = 'http://exist-db.org/xquery/securitymanager';\n"
operator|+
literal|"sm:chown(xs:anyURI('"
operator|+
name|uri
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"'), '"
operator|+
name|newOwnerGroup
operator|+
literal|"'),\n"
operator|+
literal|"sm:get-permissions(xs:anyURI('"
operator|+
name|uri
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"'))/sm:permission/(string(@owner), string(@group))"
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|execAsUser
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|String
name|expectedOwnerGroupParts
index|[]
init|=
name|expectedOwnerGroup
operator|.
name|split
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expectedOwnerGroupParts
index|[
literal|0
index|]
argument_list|,
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectedOwnerGroupParts
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|assertEquals
argument_list|(
name|expectedOwnerGroupParts
index|[
literal|1
index|]
argument_list|,
name|result
operator|.
name|itemAt
argument_list|(
literal|1
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|setPosixChownRestricted
argument_list|(
name|prevRestricted
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|changeGroup
parameter_list|(
specifier|final
name|Subject
name|execAsUser
parameter_list|,
specifier|final
name|boolean
name|restricted
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|,
specifier|final
name|String
name|newGroup
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
name|changeGroup
argument_list|(
name|execAsUser
argument_list|,
name|restricted
argument_list|,
name|uri
argument_list|,
name|newGroup
argument_list|,
name|newGroup
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|changeGroup
parameter_list|(
specifier|final
name|Subject
name|execAsUser
parameter_list|,
specifier|final
name|boolean
name|restricted
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|,
specifier|final
name|String
name|newGroup
parameter_list|,
specifier|final
name|String
name|expectedGroup
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|prevRestricted
init|=
name|setPosixChownRestricted
argument_list|(
name|restricted
argument_list|)
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"import module namespace sm = 'http://exist-db.org/xquery/securitymanager';\n"
operator|+
literal|"sm:chgrp(xs:anyURI('"
operator|+
name|uri
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"'), '"
operator|+
name|newGroup
operator|+
literal|"'),\n"
operator|+
literal|"sm:get-permissions(xs:anyURI('"
operator|+
name|uri
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"'))/sm:permission/string(@group)"
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|execAsUser
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedGroup
argument_list|,
name|result
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|setPosixChownRestricted
argument_list|(
name|prevRestricted
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|assertDocumentSetUidSetGid
parameter_list|(
specifier|final
name|Subject
name|execAsUser
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|,
specifier|final
name|boolean
name|isSet
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|execAsUser
argument_list|)
argument_list|)
init|;
specifier|final
name|LockedDocument
name|lockedDoc
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|uri
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|)
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|lockedDoc
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|isSet
condition|)
block|{
name|assertTrue
argument_list|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetUid
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetUid
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|assertCollectionSetUidSetGid
parameter_list|(
specifier|final
name|Subject
name|execAsUser
parameter_list|,
specifier|final
name|XmldbURI
name|uri
parameter_list|,
specifier|final
name|boolean
name|isSet
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|execAsUser
argument_list|)
argument_list|)
init|)
block|{
try|try
init|(
specifier|final
name|Collection
name|col
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|uri
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|;
init|)
block|{
if|if
condition|(
name|isSet
condition|)
block|{
name|assertTrue
argument_list|(
name|col
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetUid
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|col
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|assertFalse
argument_list|(
name|col
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetUid
argument_list|()
argument_list|)
expr_stmt|;
name|assertFalse
argument_list|(
name|col
operator|.
name|getPermissions
argument_list|()
operator|.
name|isSetGid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|prepareDb
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|sm
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sm
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
decl_stmt|;
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|collection
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|511
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|createUser
argument_list|(
name|broker
argument_list|,
name|sm
argument_list|,
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
expr_stmt|;
name|createUser
argument_list|(
name|broker
argument_list|,
name|sm
argument_list|,
name|USER2_NAME
argument_list|,
name|USER2_PWD
argument_list|)
expr_stmt|;
name|createUser
argument_list|(
name|broker
argument_list|,
name|sm
argument_list|,
name|USERRM_NAME
argument_list|,
name|USERRM_PWD
argument_list|)
expr_stmt|;
specifier|final
name|Group
name|otherGroup
init|=
operator|new
name|GroupAider
argument_list|(
name|OTHER_GROUP_NAME
argument_list|)
decl_stmt|;
name|sm
operator|.
name|addGroup
argument_list|(
name|broker
argument_list|,
name|otherGroup
argument_list|)
expr_stmt|;
specifier|final
name|Account
name|user1
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|USER1_NAME
argument_list|)
decl_stmt|;
name|user1
operator|.
name|addGroup
argument_list|(
name|OTHER_GROUP_NAME
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateAccount
argument_list|(
name|user1
argument_list|)
expr_stmt|;
specifier|final
name|Account
name|user2
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|USER2_NAME
argument_list|)
decl_stmt|;
name|user2
operator|.
name|addGroup
argument_list|(
name|OTHER_GROUP_NAME
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateAccount
argument_list|(
name|user2
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sm
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|removeUser
argument_list|(
name|sm
argument_list|,
name|USERRM_NAME
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Before
specifier|public
name|void
name|setup
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|SAXException
throws|,
name|IOException
throws|,
name|AuthenticationException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
comment|// create user1 resources
specifier|final
name|Subject
name|user1
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|USER1_NAME
argument_list|,
name|USER1_PWD
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|user1
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|;
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
specifier|final
name|Collection
name|u1c1
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
decl_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|u1c1
argument_list|)
expr_stmt|;
specifier|final
name|Collection
name|u1c2
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|)
decl_stmt|;
name|PermissionFactory
operator|.
name|chmod_str
argument_list|(
name|broker
argument_list|,
name|u1c2
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"u+s,g+s"
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|u1c2
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xml1
init|=
literal|"<empty1/>"
decl_stmt|;
specifier|final
name|IndexInfo
name|indexInfo1
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|USER1_DOC1
argument_list|,
name|xml1
argument_list|)
decl_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|indexInfo1
argument_list|,
name|xml1
argument_list|)
expr_stmt|;
specifier|final
name|String
name|xquery1
init|=
literal|"import module namespace sm = 'http://exist-db.org/xquery/securitymanager';\n"
operator|+
literal|"sm:id()"
decl_stmt|;
specifier|final
name|BinaryDocument
name|uqxq1
init|=
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|USER1_XQUERY1
argument_list|,
name|xquery1
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
literal|"application/xquery"
argument_list|)
decl_stmt|;
name|PermissionFactory
operator|.
name|chmod_str
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|uqxq1
operator|.
name|getURI
argument_list|()
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
literal|"u+s,g+s"
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|After
specifier|public
name|void
name|teardown
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
throws|,
name|LockException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|removeDocument
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_DOC1
argument_list|)
argument_list|)
expr_stmt|;
name|removeCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL2
argument_list|)
argument_list|)
expr_stmt|;
name|removeCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
operator|.
name|append
argument_list|(
name|USER1_COL1
argument_list|)
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupDb
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|sm
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|sm
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|removeUser
argument_list|(
name|sm
argument_list|,
name|USER2_NAME
argument_list|)
expr_stmt|;
name|removeUser
argument_list|(
name|sm
argument_list|,
name|USER1_NAME
argument_list|)
expr_stmt|;
name|removeGroup
argument_list|(
name|sm
argument_list|,
name|OTHER_GROUP_NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|sm
operator|.
name|hasAccount
argument_list|(
name|USERRM_NAME
argument_list|)
condition|)
block|{
name|removeUser
argument_list|(
name|sm
argument_list|,
name|USERRM_NAME
argument_list|)
expr_stmt|;
block|}
name|removeCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TestConstants
operator|.
name|TEST_COLLECTION_URI
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|extractPermissionDenied
parameter_list|(
specifier|final
name|Runnable4E
argument_list|<
name|AuthenticationException
argument_list|,
name|XPathException
argument_list|,
name|PermissionDeniedException
argument_list|,
name|EXistException
argument_list|>
name|runnable
parameter_list|)
throws|throws
name|AuthenticationException
throws|,
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|PermissionDeniedException
condition|)
block|{
throw|throw
operator|(
name|PermissionDeniedException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|removeDocument
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|documentUri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|documentUri
operator|.
name|removeLastSegment
argument_list|()
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
name|collection
operator|.
name|removeXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|documentUri
operator|.
name|lastSegment
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|removeCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionUri
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|createUser
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|String
name|password
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Group
name|userGroup
init|=
operator|new
name|GroupAider
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|sm
operator|.
name|addGroup
argument_list|(
name|broker
argument_list|,
name|userGroup
argument_list|)
expr_stmt|;
specifier|final
name|Account
name|user
init|=
operator|new
name|UserAider
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|user
operator|.
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|user
operator|.
name|setPrimaryGroup
argument_list|(
name|userGroup
argument_list|)
expr_stmt|;
name|sm
operator|.
name|addAccount
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|userGroup
operator|=
name|sm
operator|.
name|getGroup
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|userGroup
operator|.
name|addManager
argument_list|(
name|sm
operator|.
name|getAccount
argument_list|(
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateGroup
argument_list|(
name|userGroup
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|removeUser
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|String
name|username
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|sm
operator|.
name|deleteAccount
argument_list|(
name|username
argument_list|)
expr_stmt|;
name|removeGroup
argument_list|(
name|sm
argument_list|,
name|username
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|removeGroup
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|String
name|groupname
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|sm
operator|.
name|deleteGroup
argument_list|(
name|groupname
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the posix-chown-restricted flag.      *      * @param restricted true if the restriction is enforced, false otherwise.      *      * @return the previous value of the flag.      */
specifier|private
name|boolean
name|setPosixChownRestricted
parameter_list|(
specifier|final
name|boolean
name|restricted
parameter_list|)
block|{
specifier|final
name|Configuration
name|config
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|prevPosixChownRestricted
init|=
name|config
operator|.
name|getProperty
argument_list|(
name|DBBroker
operator|.
name|POSIX_CHOWN_RESTRICTED_PROPERTY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
name|DBBroker
operator|.
name|POSIX_CHOWN_RESTRICTED_PROPERTY
argument_list|,
name|restricted
argument_list|)
expr_stmt|;
return|return
name|prevPosixChownRestricted
return|;
block|}
block|}
end_class

end_unit

