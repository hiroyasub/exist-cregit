begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|transform
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple2
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|ManagedCollectionLock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|diff
operator|.
name|Diff
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|tuple
operator|.
name|Tuple
operator|.
name|Tuple
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertNotNull
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|TransformTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|ExistEmbeddedServer
name|existEmbeddedServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_IDS_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/transform-ids-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|INPUT_LIST_XML_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"inputListOps.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|INPUT_XML
init|=
literal|"<listOps>\n"
operator|+
literal|"<ops id=\"IRCANTEC\"/>\n"
operator|+
literal|"<ops id=\"CIBTP\"/>\n"
operator|+
literal|"<ops id=\"AGIRC-ARRCO\"/>\n"
operator|+
literal|"<ops id=\"CTIP-FFSA-FNMF\"/>\n"
operator|+
literal|"</listOps>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|DICTIONARY_XML_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"listOpsErr.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DICTIONARY_XML
init|=
literal|"<listOps>\n"
operator|+
literal|"<ops id=\"IRCANTEC\" doEntiteAff=\"false\" doGenerateB20=\"true\"></ops>\n"
operator|+
literal|"<ops id=\"CIBTP\" doEntiteAff=\"true\" doGenerateB20=\"true\"/>\n"
operator|+
literal|"<ops id=\"AGIRC-ARRCO\" doEntiteAff=\"true\" doGenerateB20=\"false\"></ops>\n"
operator|+
literal|"<ops id=\"CTIP-FFSA-FNMF\" doEntiteAff=\"true\" doGenerateB20=\"true\"></ops>\n"
operator|+
literal|"<ops id=\"POLEEMPLOI\" doEntiteAff=\"true\" doGenerateB20=\"true\"></ops>\n"
operator|+
literal|"</listOps>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|LIST_OPS_XSLT_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"testListOps.xsl"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LIST_OPS_XSLT
init|=
literal|"<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:ts=\"http://www.talentia-software.fr\" version=\"2.0\">\n"
operator|+
literal|"<xsl:output method=\"xml\" indent=\"no\" encoding=\"UTF-8\"/>\n"
operator|+
literal|"<!-- -->\n"
operator|+
literal|"<xsl:param name=\"listOpsFileUri\" required=\"yes\"/>\n"
operator|+
literal|"\n"
operator|+
literal|"<!-- -->\n"
operator|+
literal|"<xsl:variable name=\"ts:listOps\" select=\"doc($listOpsFileUri)\"/>\n"
operator|+
literal|"\n"
operator|+
literal|"<xsl:key name=\"ts:listOpsById\" match=\"//ops\" use=\"@id\"/>\n"
operator|+
literal|"\n"
operator|+
literal|"<!-- -->\n"
operator|+
literal|"<xsl:template match=\"/\">\n"
operator|+
literal|"<xsl:if test=\"empty($ts:listOps)\">\n"
operator|+
literal|"<xsl:message terminate=\"yes\">Could not find listOpsFileUri document</xsl:message>\n"
operator|+
literal|"</xsl:if>\n"
operator|+
literal|"\n"
operator|+
literal|"<DSN_FLAT>\n"
operator|+
literal|"<xsl:for-each select=\"//ops\">\n"
operator|+
literal|"<xsl:variable name=\"keyId\" select=\"@id\"/>\n"
operator|+
literal|"<xsl:variable name=\"refListOpsEntry\" select=\"$ts:listOps/key('ts:listOpsById', $keyId)\"/>\n"
operator|+
literal|"<xsl:element name=\"keyId\">\n"
operator|+
literal|"<xsl:value-of select=\"$keyId\"/>\n"
operator|+
literal|"</xsl:element>\n"
operator|+
literal|"<xsl:element name=\"listOpsEntry\">\n"
operator|+
literal|"<xsl:for-each select=\"$refListOpsEntry/@*\">\n"
operator|+
literal|"<xsl:value-of select=\"concat(name(), ': ', ., ' ')\"/>\n"
operator|+
literal|"</xsl:for-each>\n"
operator|+
literal|"</xsl:element>\n"
operator|+
literal|"</xsl:for-each>\n"
operator|+
literal|"</DSN_FLAT>\n"
operator|+
literal|"</xsl:template>\n"
operator|+
literal|"</xsl:stylesheet>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|LIST_OPS_XQUERY
init|=
literal|"xquery version \"3.0\";\n"
operator|+
literal|"\n"
operator|+
literal|"(:Read document with xsl:for-each and look for key in the dictionary document :)\n"
operator|+
literal|"declare variable $xsltPath as xs:string := '"
operator|+
name|TEST_IDS_COLLECTION
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|"';\n"
operator|+
literal|"declare variable $listOpsFileUri as xs:string := '"
operator|+
name|TEST_IDS_COLLECTION
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|"/listOpsErr.xml';\n"
operator|+
literal|"declare variable $inputFileUri as xs:string := '"
operator|+
name|TEST_IDS_COLLECTION
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|"/inputListOps.xml';\n"
operator|+
literal|"\n"
operator|+
literal|"let $params :=<parameters>\n"
operator|+
literal|"<param name=\"listOpsFileUri\" value=\"{$listOpsFileUri}\" />\n"
operator|+
literal|"</parameters>\n"
operator|+
literal|"\n"
operator|+
literal|"let $xmlData := doc($inputFileUri)\n"
operator|+
literal|"\n"
operator|+
literal|"return transform:transform($xmlData, doc(concat($xsltPath, '/', 'testListOps.xsl')),$params)"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_DOCUMENT_XSLT_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/transform-doc-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|DOCUMENT_XSLT_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"xsl-doc.xslt"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCUMENT_XSLT
init|=
literal|"<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"2.0\">\n"
operator|+
literal|"\t<xsl:template name=\"xsl-doc\">\n"
operator|+
literal|"\t\t<xsl:document><elem1/></xsl:document>\n"
operator|+
literal|"\t</xsl:template>\n"
operator|+
literal|"</xsl:stylesheet>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|DOCUMENT_XSLT_QUERY
init|=
literal|"import module namespace transform=\"http://exist-db.org/xquery/transform\";\n"
operator|+
literal|"\n"
operator|+
literal|"let $xsl := doc('"
operator|+
name|TEST_DOCUMENT_XSLT_COLLECTION
operator|.
name|append
argument_list|(
name|DOCUMENT_XSLT_NAME
argument_list|)
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"')\n"
operator|+
literal|"return\n"
operator|+
literal|"\ttransform:transform((), $xsl, (),<attributes><attr name=\"http://saxon.sf.net/feature/initialTemplate\" value=\"xsl-doc\"/></attributes>, ())"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|SIMPLE_XML_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"simple.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_SIMPLE_XML_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/transform-simple-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_SIMPLE_XML_WITH_COMMENT_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/transform-simple-1c-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_SIMPLE_XML_WITH_TWO_COMMENTS_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/transform-simple-2c-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIMPLE_XML
init|=
literal|"<n/>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIMPLE_XML_WITH_COMMENT
init|=
literal|"<!-- -->\n"
operator|+
literal|"<n/>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|SIMPLE_XML_WITH_TWO_COMMENTS
init|=
literal|"<!-- 1 --><!-- 2 -->\n"
operator|+
literal|"<n/>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|COUNT_DESCENDANTS_XSLT_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"count-descendants.xslt"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TWO_NODES_XML_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"two-nodes.xml"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|TEST_TWO_NODES_COLLECTION
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"/db/transform-two-nodes-test"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TWO_NODES_XML
init|=
literal|"<a><b/></a>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|XmldbURI
name|COUNT_DESCENDANTS_TWO_NODES_XSLT_NAME
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
literal|"count-descendants-two-nodes.xslt"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COUNT_DESCENDANTS_TWO_NODES_XSLT
init|=
literal|"<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"2.0\">\n"
operator|+
literal|"\n"
operator|+
literal|"\t<xsl:variable name=\"xml\" select=\"doc('"
operator|+
name|TEST_TWO_NODES_COLLECTION
operator|.
name|append
argument_list|(
name|TWO_NODES_XML_NAME
argument_list|)
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"')\"/>\n"
operator|+
literal|"\t\n"
operator|+
literal|"\t<xsl:template match=\"/\">\n"
operator|+
literal|"\t\t<counts>\n"
operator|+
literal|"\t\t\t<count1><xsl:value-of select=\"count($xml//*)\"/></count1>\n"
operator|+
literal|"\t\t\t<count2><xsl:value-of select=\"count($xml/a//*)\"/></count2>\n"
operator|+
literal|"\t\t</counts>\n"
operator|+
literal|"\t</xsl:template>\n"
operator|+
literal|"\n"
operator|+
literal|"</xsl:stylesheet>"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|COUNT_DESCENDANTS_TWO_NODES_QUERY
init|=
literal|"import module namespace transform=\"http://exist-db.org/xquery/transform\";\n"
operator|+
literal|"\n"
operator|+
literal|"let $xml := doc('"
operator|+
name|TEST_TWO_NODES_COLLECTION
operator|.
name|append
argument_list|(
name|TWO_NODES_XML_NAME
argument_list|)
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"')\n"
operator|+
literal|"let $xsl := doc('"
operator|+
name|TEST_TWO_NODES_COLLECTION
operator|.
name|append
argument_list|(
name|COUNT_DESCENDANTS_TWO_NODES_XSLT_NAME
argument_list|)
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"')\n"
operator|+
literal|"return\n"
operator|+
literal|"\ttransform:transform($xml, $xsl, ())"
decl_stmt|;
comment|/**      * {@see https://github.com/eXist-db/exist/issues/1506}      */
annotation|@
name|Test
specifier|public
name|void
name|keys
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|Sequence
name|sequence
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|LIST_OPS_XQUERY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|sequence
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Item
name|item
init|=
name|sequence
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertTrue
argument_list|(
name|item
operator|instanceof
name|Element
argument_list|)
expr_stmt|;
specifier|final
name|Element
name|dsn_flat
init|=
operator|(
operator|(
name|Element
operator|)
name|item
operator|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"DSN_FLAT"
argument_list|,
name|dsn_flat
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|NodeList
name|nodeList
init|=
name|dsn_flat
operator|.
name|getElementsByTagName
argument_list|(
literal|"listOpsEntry"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|4
argument_list|,
name|nodeList
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id: IRCANTEC doEntiteAff: false doGenerateB20: true "
argument_list|,
name|nodeList
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id: CIBTP doEntiteAff: true doGenerateB20: true "
argument_list|,
name|nodeList
operator|.
name|item
argument_list|(
literal|1
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id: AGIRC-ARRCO doEntiteAff: true doGenerateB20: false "
argument_list|,
name|nodeList
operator|.
name|item
argument_list|(
literal|2
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"id: CTIP-FFSA-FNMF doEntiteAff: true doGenerateB20: true "
argument_list|,
name|nodeList
operator|.
name|item
argument_list|(
literal|3
argument_list|)
operator|.
name|getTextContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"https://github.com/eXist-db/exist/issues/2096"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|xslDocument
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|Sequence
name|sequence
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|DOCUMENT_XSLT_QUERY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sequence
operator|.
name|hasOne
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Item
name|item
init|=
name|sequence
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Type
operator|.
name|DOCUMENT
argument_list|,
name|item
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Source
name|expected
init|=
name|Input
operator|.
name|fromString
argument_list|(
literal|"<elem1/>"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|actual
init|=
name|Input
operator|.
name|fromDocument
argument_list|(
name|sequence
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Document
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|actual
argument_list|)
operator|.
name|withTest
argument_list|(
name|expected
argument_list|)
operator|.
name|checkForSimilar
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * {@see https://github.com/eXist-db/exist/issues/1691}      */
annotation|@
name|Test
specifier|public
name|void
name|transformReindexTransform
parameter_list|()
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|LockException
block|{
name|transform1
argument_list|(
name|TEST_SIMPLE_XML_COLLECTION
argument_list|)
expr_stmt|;
name|reindex
argument_list|(
name|TEST_SIMPLE_XML_COLLECTION
argument_list|)
expr_stmt|;
name|transform1
argument_list|(
name|TEST_SIMPLE_XML_COLLECTION
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@see https://github.com/eXist-db/exist/issues/1691}      */
annotation|@
name|Test
specifier|public
name|void
name|transformReindexTransform_with_comment
parameter_list|()
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|LockException
block|{
name|transform1
argument_list|(
name|TEST_SIMPLE_XML_WITH_COMMENT_COLLECTION
argument_list|)
expr_stmt|;
name|reindex
argument_list|(
name|TEST_SIMPLE_XML_WITH_COMMENT_COLLECTION
argument_list|)
expr_stmt|;
name|transform1
argument_list|(
name|TEST_SIMPLE_XML_WITH_COMMENT_COLLECTION
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@see https://github.com/eXist-db/exist/issues/1691}      */
annotation|@
name|Test
specifier|public
name|void
name|transformReindexTransform_with_two_comments
parameter_list|()
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
throws|,
name|LockException
block|{
name|transform1
argument_list|(
name|TEST_SIMPLE_XML_WITH_TWO_COMMENTS_COLLECTION
argument_list|)
expr_stmt|;
name|reindex
argument_list|(
name|TEST_SIMPLE_XML_WITH_TWO_COMMENTS_COLLECTION
argument_list|)
expr_stmt|;
name|transform1
argument_list|(
name|TEST_SIMPLE_XML_WITH_TWO_COMMENTS_COLLECTION
argument_list|)
expr_stmt|;
block|}
comment|/**      * {@see https://github.com/eXist-db/exist/issues/1691}      */
annotation|@
name|Test
specifier|public
name|void
name|twoNodesCountDescendants
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
throws|,
name|IOException
throws|,
name|LockException
block|{
name|transform_twoNodesCountDescendants
argument_list|()
expr_stmt|;
name|reindex
argument_list|(
name|TEST_TWO_NODES_COLLECTION
argument_list|)
expr_stmt|;
name|transform_twoNodesCountDescendants
argument_list|()
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|transform1
parameter_list|(
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|Sequence
name|sequence
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|getCountDescendantsXquery
argument_list|(
name|collectionUri
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sequence
operator|.
name|hasOne
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Source
name|expected
init|=
name|Input
operator|.
name|fromString
argument_list|(
literal|"<count-descendants>1</count-descendants>"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|actual
init|=
name|Input
operator|.
name|fromDocument
argument_list|(
name|sequence
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Node
operator|.
name|class
argument_list|)
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|expected
argument_list|)
operator|.
name|withTest
argument_list|(
name|actual
argument_list|)
operator|.
name|checkForSimilar
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|reindex
parameter_list|(
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|LockException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|broker
operator|.
name|reindexCollection
argument_list|(
name|transaction
argument_list|,
name|collectionUri
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|String
name|getCountDescendantsXquery
parameter_list|(
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
block|{
return|return
literal|"import module namespace transform=\"http://exist-db.org/xquery/transform\";\n"
operator|+
literal|"\n"
operator|+
literal|"let $xml := doc('"
operator|+
name|collectionUri
operator|.
name|append
argument_list|(
name|SIMPLE_XML_NAME
argument_list|)
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"')\n"
operator|+
literal|"let $xsl := doc('"
operator|+
name|collectionUri
operator|.
name|append
argument_list|(
name|COUNT_DESCENDANTS_XSLT_NAME
argument_list|)
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"')\n"
operator|+
literal|"return\n"
operator|+
literal|"\ttransform:transform($xml, $xsl, ())"
return|;
block|}
specifier|private
specifier|static
name|String
name|getCountDescendantsXslt
parameter_list|(
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
block|{
return|return
literal|"<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"2.0\">\n"
operator|+
literal|"\n"
operator|+
literal|"\t<xsl:variable name=\"xml\" select=\"document('"
operator|+
name|collectionUri
operator|.
name|append
argument_list|(
name|SIMPLE_XML_NAME
argument_list|)
operator|.
name|getRawCollectionPath
argument_list|()
operator|+
literal|"')\"/>\n"
operator|+
literal|"\t\n"
operator|+
literal|"\t<xsl:template match=\"/\">\n"
operator|+
literal|"\t\t<count-descendants><xsl:value-of select=\"count($xml//*)\"/></count-descendants>\n"
operator|+
literal|"\t</xsl:template>\n"
operator|+
literal|"\n"
operator|+
literal|"</xsl:stylesheet>"
return|;
block|}
specifier|private
specifier|static
name|void
name|transform_twoNodesCountDescendants
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|XQuery
name|xquery
init|=
name|pool
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|Sequence
name|sequence
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|COUNT_DESCENDANTS_TWO_NODES_QUERY
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|sequence
operator|.
name|hasOne
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Source
name|expected
init|=
name|Input
operator|.
name|fromString
argument_list|(
literal|"<counts><count1>2</count1><count2>1</count2></counts>"
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|actual
init|=
name|Input
operator|.
name|fromDocument
argument_list|(
name|sequence
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Node
operator|.
name|class
argument_list|)
operator|.
name|getOwnerDocument
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|expected
argument_list|)
operator|.
name|withTest
argument_list|(
name|actual
argument_list|)
operator|.
name|checkForSimilar
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|storeResources
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_IDS_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|LIST_OPS_XSLT_NAME
argument_list|,
name|LIST_OPS_XSLT
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|INPUT_LIST_XML_NAME
argument_list|,
name|INPUT_XML
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|DICTIONARY_XML_NAME
argument_list|,
name|DICTIONARY_XML
argument_list|)
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_DOCUMENT_XSLT_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|DOCUMENT_XSLT_NAME
argument_list|,
name|DOCUMENT_XSLT
argument_list|)
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SIMPLE_XML_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|SIMPLE_XML_NAME
argument_list|,
name|SIMPLE_XML
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|COUNT_DESCENDANTS_XSLT_NAME
argument_list|,
name|getCountDescendantsXslt
argument_list|(
name|TEST_SIMPLE_XML_COLLECTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SIMPLE_XML_WITH_COMMENT_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|SIMPLE_XML_NAME
argument_list|,
name|SIMPLE_XML_WITH_COMMENT
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|COUNT_DESCENDANTS_XSLT_NAME
argument_list|,
name|getCountDescendantsXslt
argument_list|(
name|TEST_SIMPLE_XML_WITH_COMMENT_COLLECTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SIMPLE_XML_WITH_TWO_COMMENTS_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|SIMPLE_XML_NAME
argument_list|,
name|SIMPLE_XML_WITH_TWO_COMMENTS
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|COUNT_DESCENDANTS_XSLT_NAME
argument_list|,
name|getCountDescendantsXslt
argument_list|(
name|TEST_SIMPLE_XML_WITH_TWO_COMMENTS_COLLECTION
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|createCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_TWO_NODES_COLLECTION
argument_list|,
name|Tuple
argument_list|(
name|TWO_NODES_XML_NAME
argument_list|,
name|TWO_NODES_XML
argument_list|)
argument_list|,
name|Tuple
argument_list|(
name|COUNT_DESCENDANTS_TWO_NODES_XSLT_NAME
argument_list|,
name|COUNT_DESCENDANTS_TWO_NODES_XSLT
argument_list|)
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|SafeVarargs
specifier|private
specifier|static
name|void
name|createCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|,
specifier|final
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|String
argument_list|>
modifier|...
name|docs
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|LockException
throws|,
name|EXistException
block|{
try|try
init|(
specifier|final
name|ManagedCollectionLock
name|collectionLock
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getLockManager
argument_list|()
operator|.
name|acquireCollectionWriteLock
argument_list|(
name|collectionUri
argument_list|)
init|)
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|collectionUri
argument_list|)
decl_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Tuple2
argument_list|<
name|XmldbURI
argument_list|,
name|String
argument_list|>
name|doc
range|:
name|docs
control|)
block|{
name|storeXml
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|collection
argument_list|,
name|doc
operator|.
name|_1
argument_list|,
name|doc
operator|.
name|_2
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|void
name|storeXml
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|XmldbURI
name|name
parameter_list|,
specifier|final
name|String
name|xml
parameter_list|)
throws|throws
name|LockException
throws|,
name|SAXException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
block|{
specifier|final
name|IndexInfo
name|indexInfo
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|indexInfo
argument_list|,
name|xml
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|deleteCollection
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|,
specifier|final
name|XmldbURI
name|collectionUri
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
try|try
init|(
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionUri
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
init|)
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanupResources
parameter_list|()
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
throws|,
name|TriggerException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existEmbeddedServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
argument_list|)
init|;
specifier|final
name|Txn
name|transaction
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_IDS_COLLECTION
argument_list|)
expr_stmt|;
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_DOCUMENT_XSLT_COLLECTION
argument_list|)
expr_stmt|;
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SIMPLE_XML_COLLECTION
argument_list|)
expr_stmt|;
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SIMPLE_XML_WITH_COMMENT_COLLECTION
argument_list|)
expr_stmt|;
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_SIMPLE_XML_WITH_TWO_COMMENTS_COLLECTION
argument_list|)
expr_stmt|;
name|deleteCollection
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|TEST_TWO_NODES_COLLECTION
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

