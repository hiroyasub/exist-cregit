begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|securitymanager
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|Runnable3E
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Rule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_class
specifier|public
class|class
name|AccountManagementFunctionRemoveAccountTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|ExistEmbeddedServer
name|existWebServer
init|=
operator|new
name|ExistEmbeddedServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotDeleteSystemAccount
parameter_list|()
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|AuthenticationException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|admin
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
name|xqueryRemoveAccount
argument_list|(
name|SecurityManager
operator|.
name|SYSTEM
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|admin
argument_list|)
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotDeleteDbaAccount
parameter_list|()
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
name|xqueryRemoveAccount
argument_list|(
name|SecurityManager
operator|.
name|DBA_USER
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotDeleteGuestAccount
parameter_list|()
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
name|xqueryRemoveAccount
argument_list|(
name|SecurityManager
operator|.
name|GUEST_USER
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|PermissionDeniedException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|cannotDeleteUnknownAccount
parameter_list|()
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|extractPermissionDenied
argument_list|(
parameter_list|()
lambda|->
block|{
name|xqueryRemoveAccount
argument_list|(
name|SecurityManager
operator|.
name|UNKNOWN_USER
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Sequence
name|xqueryRemoveAccount
parameter_list|(
specifier|final
name|String
name|username
parameter_list|)
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Subject
argument_list|>
name|asUser
init|=
name|Optional
operator|.
name|of
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|xqueryRemoveAccount
argument_list|(
name|username
argument_list|,
name|asUser
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|xqueryRemoveAccount
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Subject
argument_list|>
name|asUser
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|XPathException
block|{
specifier|final
name|BrokerPool
name|pool
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
decl_stmt|;
specifier|final
name|String
name|query
init|=
literal|"import module namespace sm = 'http://exist-db.org/xquery/securitymanager';\n"
operator|+
literal|"sm:remove-account('"
operator|+
name|username
operator|+
literal|"')"
decl_stmt|;
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|asUser
argument_list|)
init|)
block|{
specifier|final
name|XQuery
name|xquery
init|=
name|existWebServer
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|xquery
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
block|}
specifier|private
specifier|static
name|void
name|extractPermissionDenied
parameter_list|(
specifier|final
name|Runnable3E
argument_list|<
name|XPathException
argument_list|,
name|PermissionDeniedException
argument_list|,
name|EXistException
argument_list|>
name|runnable
parameter_list|)
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
try|try
block|{
name|runnable
operator|.
name|run
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getCause
argument_list|()
operator|!=
literal|null
operator|&&
name|e
operator|.
name|getCause
argument_list|()
operator|instanceof
name|PermissionDeniedException
condition|)
block|{
throw|throw
operator|(
name|PermissionDeniedException
operator|)
name|e
operator|.
name|getCause
argument_list|()
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

