begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|request
package|;
end_package

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|NameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|fluent
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|ContentType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|entity
operator|.
name|mime
operator|.
name|MultipartEntityBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|message
operator|.
name|BasicNameValuePair
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|RESTTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|UserManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_comment
comment|/**  * Tests expected behaviour of request:get-parameter() XQuery function  *   * @author<a href="mailto:adam@exist-db.org">Adam Retter</a>  * @version 1.0  */
end_comment

begin_class
specifier|public
class|class
name|GetParameterTest
extends|extends
name|RESTTest
block|{
specifier|private
specifier|final
specifier|static
name|String
name|XQUERY
init|=
literal|"for $param-name in request:get-parameter-names() return for $param-value in request:get-parameter($param-name, ()) return fn:concat($param-name, '=', $param-value)"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XQUERY_FILENAME
init|=
literal|"test-get-parameter.xql"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_FILE_CONTENT
init|=
literal|"hello world"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|TEST_FILE_NAME
init|=
literal|"helloworld.txt"
decl_stmt|;
specifier|private
specifier|static
name|Collection
name|root
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|beforeClass
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|root
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist://localhost:"
operator|+
name|existWebServer
operator|.
name|getPort
argument_list|()
operator|+
literal|"/xmlrpc/db"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|BinaryResource
name|res
init|=
operator|(
name|BinaryResource
operator|)
name|root
operator|.
name|createResource
argument_list|(
name|XQUERY_FILENAME
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|res
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|XQUERY
argument_list|)
expr_stmt|;
name|root
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|res
argument_list|,
literal|0777
argument_list|)
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|afterClass
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|BinaryResource
name|res
init|=
operator|(
name|BinaryResource
operator|)
name|root
operator|.
name|getResource
argument_list|(
name|XQUERY_FILENAME
argument_list|)
decl_stmt|;
name|root
operator|.
name|removeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetNoParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testGet
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostNoParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testPost
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetEmptyParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testGet
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostEmptyParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testPost
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetSingleValueParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testGet
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostSingleValueParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testPost
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testGetMultiValueParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testGet
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultiValueParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testPost
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultiValueParameterWithQueryStringMultiValueParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testPost
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
block|,             }
argument_list|,
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"valueA"
block|,
literal|"valueB"
block|,
literal|"valueC"
block|,
literal|"valueD"
block|}
argument_list|)
block|,             }
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testPostMultiValueParameterWithQueryStringMultiValueParameterMerge
parameter_list|()
throws|throws
name|IOException
block|{
name|testPost
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
block|,             }
argument_list|,
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"valueA"
block|,
literal|"valueB"
block|,
literal|"valueC"
block|,
literal|"valueD"
block|}
argument_list|)
block|,             }
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipartPostMultiValueParameterAndFile
parameter_list|()
throws|throws
name|IOException
block|{
name|testMultipartPost
argument_list|(
operator|new
name|Param
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
block|,
operator|new
name|TextFileUpload
argument_list|(
name|TEST_FILE_NAME
argument_list|,
name|TEST_FILE_CONTENT
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipartPostFileAndMultiValueParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testMultipartPost
argument_list|(
operator|new
name|Param
index|[]
block|{
operator|new
name|TextFileUpload
argument_list|(
name|TEST_FILE_NAME
argument_list|,
name|TEST_FILE_CONTENT
argument_list|)
block|,
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipartPostMultiValueParameterAndFileAndMultiValueParameter
parameter_list|()
throws|throws
name|IOException
block|{
name|testMultipartPost
argument_list|(
operator|new
name|Param
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
block|,
operator|new
name|TextFileUpload
argument_list|(
name|TEST_FILE_NAME
argument_list|,
name|TEST_FILE_CONTENT
argument_list|)
block|,
operator|new
name|NameValues
argument_list|(
literal|"param2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"valueA"
block|,
literal|"valueB"
block|,
literal|"valueC"
block|,
literal|"valueD"
block|}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipartPostAndMultiValueParameterAndFileAndMultiValueParameterWithQueryStringMultiValueParameters
parameter_list|()
throws|throws
name|IOException
block|{
name|testMultipartPost
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
block|}
argument_list|,
operator|new
name|Param
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"valueA"
block|,
literal|"valueB"
block|,
literal|"valueC"
block|,
literal|"valueD"
block|}
argument_list|)
block|,
operator|new
name|TextFileUpload
argument_list|(
name|TEST_FILE_NAME
argument_list|,
name|TEST_FILE_CONTENT
argument_list|)
block|,
operator|new
name|NameValues
argument_list|(
literal|"param3"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"valueZ"
block|,
literal|"valueY"
block|,
literal|"valueX"
block|,
literal|"valueW"
block|}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|testMultipartPostAndMultiValueParameterAndFileAndMultiValueParameterWithQueryStringMultiValueParametersMerged
parameter_list|()
throws|throws
name|IOException
block|{
name|testMultipartPost
argument_list|(
operator|new
name|NameValues
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value1"
block|,
literal|"value2"
block|,
literal|"value3"
block|,
literal|"value4"
block|}
argument_list|)
block|}
argument_list|,
operator|new
name|Param
index|[]
block|{
operator|new
name|NameValues
argument_list|(
literal|"param1"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"value5"
block|,
literal|"value6"
block|,
literal|"value7"
block|,
literal|"value8"
block|}
argument_list|)
block|,
operator|new
name|TextFileUpload
argument_list|(
name|TEST_FILE_NAME
argument_list|,
name|TEST_FILE_CONTENT
argument_list|)
block|,
operator|new
name|NameValues
argument_list|(
literal|"param2"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"valueA"
block|,
literal|"valueB"
block|,
literal|"valueC"
block|,
literal|"valueD"
block|}
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testGet
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|NameValues
index|[]
name|queryStringParams
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
if|if
condition|(
name|queryStringParams
operator|!=
literal|null
condition|)
block|{
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|NameValues
name|queryStringParam
range|:
name|queryStringParams
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
name|queryStringParam
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
block|}
name|Request
name|get
init|=
name|Request
operator|.
name|Get
argument_list|(
name|getCollectionRootUri
argument_list|()
operator|+
literal|"/"
operator|+
name|XQUERY_FILENAME
operator|+
operator|(
name|queryStringParams
operator|==
literal|null
operator|||
name|queryStringParams
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
literal|"?"
operator|+
name|buf
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|testRequest
argument_list|(
name|get
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testPost
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|NameValues
index|[]
name|formParams
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|Request
name|post
init|=
name|Request
operator|.
name|Post
argument_list|(
name|getCollectionRootUri
argument_list|()
operator|+
literal|"/"
operator|+
name|XQUERY_FILENAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|formParams
operator|!=
literal|null
condition|)
block|{
specifier|final
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|bodyPairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NameValues
name|formParam
range|:
name|formParams
control|)
block|{
for|for
control|(
specifier|final
name|String
name|value
range|:
name|formParam
operator|.
name|getData
argument_list|()
control|)
block|{
name|bodyPairs
operator|.
name|add
argument_list|(
operator|new
name|BasicNameValuePair
argument_list|(
name|formParam
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|formParam
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|post
operator|=
name|post
operator|.
name|bodyForm
argument_list|(
name|bodyPairs
argument_list|)
expr_stmt|;
block|}
name|testRequest
argument_list|(
name|post
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testPost
parameter_list|(
specifier|final
name|NameValues
index|[]
name|queryStringParams
parameter_list|,
specifier|final
name|NameValues
index|[]
name|formParams
parameter_list|)
throws|throws
name|IOException
block|{
name|StringBuilder
name|queryStringBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|StringBuilder
name|formBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|NameValues
name|queryStringParam
range|:
name|queryStringParams
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|queryStringBuf
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|queryStringBuf
operator|.
name|append
argument_list|(
name|queryStringParam
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|Request
name|post
init|=
name|Request
operator|.
name|Post
argument_list|(
name|getCollectionRootUri
argument_list|()
operator|+
literal|"/"
operator|+
name|XQUERY_FILENAME
operator|+
operator|(
name|queryStringParams
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
literal|"?"
operator|+
name|queryStringBuf
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
decl_stmt|;
specifier|final
name|List
argument_list|<
name|NameValuePair
argument_list|>
name|bodyPairs
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NameValues
name|formParam
range|:
name|formParams
control|)
block|{
for|for
control|(
specifier|final
name|String
name|value
range|:
name|formParam
operator|.
name|getData
argument_list|()
control|)
block|{
name|bodyPairs
operator|.
name|add
argument_list|(
operator|new
name|BasicNameValuePair
argument_list|(
name|formParam
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|formBuf
operator|.
name|append
argument_list|(
name|formParam
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|post
operator|=
name|post
operator|.
name|bodyForm
argument_list|(
name|bodyPairs
argument_list|)
expr_stmt|;
name|testRequest
argument_list|(
name|post
argument_list|,
name|queryStringBuf
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|""
argument_list|)
operator|+
name|formBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMultipartPost
parameter_list|(
specifier|final
name|Param
index|[]
name|multipartParams
parameter_list|)
throws|throws
name|IOException
block|{
name|MultipartEntityBuilder
name|multipart
init|=
name|MultipartEntityBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Param
name|multipartParam
range|:
name|multipartParams
control|)
block|{
if|if
condition|(
name|multipartParam
operator|instanceof
name|NameValues
condition|)
block|{
specifier|final
name|NameValues
name|nameValues
init|=
operator|(
name|NameValues
operator|)
name|multipartParam
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|value
range|:
name|nameValues
operator|.
name|getData
argument_list|()
control|)
block|{
name|multipart
operator|=
name|multipart
operator|.
name|addTextBody
argument_list|(
name|nameValues
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|nameValues
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|multipartParam
operator|instanceof
name|TextFileUpload
condition|)
block|{
specifier|final
name|TextFileUpload
name|textFileUpload
init|=
operator|(
name|TextFileUpload
operator|)
name|multipartParam
decl_stmt|;
name|multipart
operator|=
name|multipart
operator|.
name|addBinaryBody
argument_list|(
literal|"fileUpload"
argument_list|,
name|textFileUpload
operator|.
name|getData
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
name|ContentType
operator|.
name|TEXT_PLAIN
argument_list|,
name|textFileUpload
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"fileUpload="
operator|+
name|textFileUpload
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Request
name|post
init|=
name|Request
operator|.
name|Post
argument_list|(
name|getCollectionRootUri
argument_list|()
operator|+
literal|"/"
operator|+
name|XQUERY_FILENAME
argument_list|)
operator|.
name|body
argument_list|(
name|multipart
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|testRequest
argument_list|(
name|post
argument_list|,
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testMultipartPost
parameter_list|(
specifier|final
name|NameValues
index|[]
name|queryStringParams
parameter_list|,
specifier|final
name|Param
index|[]
name|multipartParams
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|StringBuilder
name|queryStringBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|NameValues
name|queryStringParam
range|:
name|queryStringParams
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|queryStringBuf
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|queryStringBuf
operator|.
name|append
argument_list|(
name|queryStringParam
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|MultipartEntityBuilder
name|multipart
init|=
name|MultipartEntityBuilder
operator|.
name|create
argument_list|()
decl_stmt|;
specifier|final
name|StringBuilder
name|bodyBuf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Param
name|multipartParam
range|:
name|multipartParams
control|)
block|{
if|if
condition|(
name|multipartParam
operator|instanceof
name|NameValues
condition|)
block|{
specifier|final
name|NameValues
name|nameValues
init|=
operator|(
name|NameValues
operator|)
name|multipartParam
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|value
range|:
name|nameValues
operator|.
name|getData
argument_list|()
control|)
block|{
name|multipart
operator|=
name|multipart
operator|.
name|addTextBody
argument_list|(
name|nameValues
operator|.
name|getName
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|bodyBuf
operator|.
name|append
argument_list|(
name|nameValues
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|multipartParam
operator|instanceof
name|TextFileUpload
condition|)
block|{
specifier|final
name|TextFileUpload
name|textFileUpload
init|=
operator|(
name|TextFileUpload
operator|)
name|multipartParam
decl_stmt|;
name|multipart
operator|=
name|multipart
operator|.
name|addBinaryBody
argument_list|(
literal|"fileUpload"
argument_list|,
name|textFileUpload
operator|.
name|getData
argument_list|()
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|,
name|ContentType
operator|.
name|TEXT_PLAIN
argument_list|,
name|textFileUpload
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|bodyBuf
operator|.
name|append
argument_list|(
literal|"fileUpload="
operator|+
name|textFileUpload
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Request
name|post
init|=
name|Request
operator|.
name|Post
argument_list|(
name|getCollectionRootUri
argument_list|()
operator|+
literal|"/"
operator|+
name|XQUERY_FILENAME
operator|+
operator|(
name|queryStringParams
operator|.
name|length
operator|==
literal|0
condition|?
literal|""
else|:
literal|"?"
operator|+
name|queryStringBuf
operator|.
name|toString
argument_list|()
operator|)
argument_list|)
operator|.
name|body
argument_list|(
name|multipart
operator|.
name|build
argument_list|()
argument_list|)
decl_stmt|;
name|testRequest
argument_list|(
name|post
argument_list|,
name|queryStringBuf
operator|.
name|toString
argument_list|()
operator|.
name|replaceAll
argument_list|(
literal|"&"
argument_list|,
literal|""
argument_list|)
operator|+
name|bodyBuf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|testRequest
parameter_list|(
specifier|final
name|Request
name|request
parameter_list|,
specifier|final
name|String
name|expected
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|HttpResponse
name|response
init|=
name|request
operator|.
name|execute
argument_list|()
operator|.
name|returnResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|HttpStatus
operator|.
name|SC_OK
argument_list|,
name|response
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|FastByteArrayOutputStream
name|os
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|()
init|)
block|{
name|response
operator|.
name|getEntity
argument_list|()
operator|.
name|writeTo
argument_list|(
name|os
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
operator|new
name|String
argument_list|(
name|os
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
class|class
name|NameValues
implements|implements
name|Param
argument_list|<
name|String
index|[]
argument_list|>
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|String
name|values
index|[]
decl_stmt|;
specifier|public
name|NameValues
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|values
index|[]
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|values
operator|=
name|values
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getData
parameter_list|()
block|{
return|return
name|values
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|boolean
name|first
init|=
literal|true
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|value
range|:
name|values
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|name
argument_list|)
operator|.
name|append
argument_list|(
literal|'='
argument_list|)
operator|.
name|append
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
class|class
name|TextFileUpload
implements|implements
name|Param
argument_list|<
name|String
argument_list|>
block|{
specifier|final
name|String
name|name
decl_stmt|;
specifier|final
name|String
name|content
decl_stmt|;
specifier|public
name|TextFileUpload
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|content
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|content
operator|=
name|content
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getData
parameter_list|()
block|{
return|return
name|content
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
block|}
specifier|public
interface|interface
name|Param
parameter_list|<
name|T
parameter_list|>
block|{
name|String
name|getName
parameter_list|()
function_decl|;
name|T
name|getData
parameter_list|()
function_decl|;
block|}
block|}
end_class

end_unit

