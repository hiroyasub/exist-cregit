begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|com
operator|.
name|ibm
operator|.
name|icu
operator|.
name|impl
operator|.
name|Assert
operator|.
name|fail
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|DoubleValueTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|convertToInteger
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|double
name|value
init|=
operator|-
literal|2147483649d
decl_stmt|;
specifier|final
name|DoubleValue
name|doubleValue
init|=
operator|new
name|DoubleValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
specifier|final
name|IntegerValue
name|integerValue
init|=
operator|(
name|IntegerValue
operator|)
name|doubleValue
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2147483647
argument_list|,
name|integerValue
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2147483649l
argument_list|,
name|integerValue
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getInt
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|double
name|value
init|=
operator|-
literal|2147483649d
decl_stmt|;
specifier|final
name|DoubleValue
name|doubleValue
init|=
operator|new
name|DoubleValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|2147483647
argument_list|,
name|doubleValue
operator|.
name|getInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|getLong
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|double
name|value
init|=
operator|-
literal|2147483649d
decl_stmt|;
specifier|final
name|DoubleValue
name|doubleValue
init|=
operator|new
name|DoubleValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2147483649l
argument_list|,
name|doubleValue
operator|.
name|getLong
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|toJavaObject_int_lowerBound
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|double
name|value
init|=
operator|-
literal|2147483649d
decl_stmt|;
comment|// NOTE: this is out of bounds for an XDM xs:int, so should generate an error
specifier|final
name|DoubleValue
name|doubleValue
init|=
operator|new
name|DoubleValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|doubleValue
operator|.
name|toJavaObject
argument_list|(
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"xs:double value is out of bounds for xs:int"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
argument_list|(
name|expected
operator|=
name|XPathException
operator|.
name|class
argument_list|)
specifier|public
name|void
name|toJavaObject_int_upperBound
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|double
name|value
init|=
literal|2147483649d
decl_stmt|;
comment|// NOTE: this is out of bounds for an XDM xs:int, so should generate an error
specifier|final
name|DoubleValue
name|doubleValue
init|=
operator|new
name|DoubleValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|doubleValue
operator|.
name|toJavaObject
argument_list|(
name|int
operator|.
name|class
argument_list|)
expr_stmt|;
name|fail
argument_list|(
literal|"xs:double value is out of bounds for xs:int"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|toJavaObject_int
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|double
name|value
init|=
operator|-
literal|2147483648d
decl_stmt|;
specifier|final
name|DoubleValue
name|doubleValue
init|=
operator|new
name|DoubleValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
specifier|final
name|int
name|i
init|=
name|doubleValue
operator|.
name|toJavaObject
argument_list|(
name|int
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2147483648
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|toJavaObject_long
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|double
name|value
init|=
operator|-
literal|2147483649d
decl_stmt|;
specifier|final
name|DoubleValue
name|doubleValue
init|=
operator|new
name|DoubleValue
argument_list|(
name|value
argument_list|)
decl_stmt|;
specifier|final
name|long
name|l
init|=
name|doubleValue
operator|.
name|toJavaObject
argument_list|(
name|long
operator|.
name|class
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|2147483649l
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

