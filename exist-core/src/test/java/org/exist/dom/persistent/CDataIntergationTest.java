begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
package|;
end_package

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|exceptions
operator|.
name|BadRequestException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|exceptions
operator|.
name|ConflictException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|exceptions
operator|.
name|NotAuthorizedException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|bradmcevoy
operator|.
name|http
operator|.
name|exceptions
operator|.
name|NotFoundException
import|;
end_import

begin_import
import|import
name|com
operator|.
name|ettrema
operator|.
name|httpclient
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpHost
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpResponse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|fluent
operator|.
name|Executor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|client
operator|.
name|fluent
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistWebServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Ignore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|rules
operator|.
name|TemporaryFolder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|apache
operator|.
name|http
operator|.
name|HttpStatus
operator|.
name|SC_CREATED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Tests for retrieving a document containing CDATA via  * various APIs.  */
end_comment

begin_class
specifier|public
class|class
name|CDataIntergationTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|ExistWebServer
name|existWebServer
init|=
operator|new
name|ExistWebServer
argument_list|(
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
annotation|@
name|ClassRule
specifier|public
specifier|static
specifier|final
name|TemporaryFolder
name|tempFolder
init|=
operator|new
name|TemporaryFolder
argument_list|()
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|cdata_content
init|=
literal|"Hello there \"Bob?\""
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|cdata_xml
init|=
literal|"<elem1><![CDATA["
operator|+
name|cdata_content
operator|+
literal|"]]></elem1>"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|cdataRestApi
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|String
name|uri
init|=
literal|"http://localhost:"
operator|+
name|existWebServer
operator|.
name|getPort
argument_list|()
operator|+
literal|"/exist/rest/db"
decl_stmt|;
specifier|final
name|String
name|docUri
init|=
name|uri
operator|+
literal|"/rest-cdata-test.xml"
decl_stmt|;
specifier|final
name|Executor
name|executor
init|=
name|Executor
operator|.
name|newInstance
argument_list|()
operator|.
name|auth
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
operator|.
name|authPreemptive
argument_list|(
operator|new
name|HttpHost
argument_list|(
literal|"localhost"
argument_list|,
name|existWebServer
operator|.
name|getPort
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// store document
specifier|final
name|HttpResponse
name|storeResponse
init|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Put
argument_list|(
name|docUri
argument_list|)
operator|.
name|addHeader
argument_list|(
literal|"Content-Type"
argument_list|,
literal|"application/xml"
argument_list|)
operator|.
name|bodyByteArray
argument_list|(
name|cdata_xml
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|SC_CREATED
argument_list|,
name|storeResponse
operator|.
name|getStatusLine
argument_list|()
operator|.
name|getStatusCode
argument_list|()
argument_list|)
expr_stmt|;
comment|// retrieve document
specifier|final
name|HttpResponse
name|retrieveResponse
init|=
name|executor
operator|.
name|execute
argument_list|(
name|Request
operator|.
name|Get
argument_list|(
name|docUri
argument_list|)
argument_list|)
operator|.
name|returnResponse
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|FastByteArrayOutputStream
name|baos
init|=
operator|new
name|FastByteArrayOutputStream
argument_list|()
init|)
block|{
name|retrieveResponse
operator|.
name|getEntity
argument_list|()
operator|.
name|writeTo
argument_list|(
name|baos
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cdata_xml
argument_list|,
name|baos
operator|.
name|toString
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|cdataXmlDbApi
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|String
name|docName
init|=
literal|"xmldb-cdata-test.xml"
decl_stmt|;
specifier|final
name|Database
name|database
init|=
operator|new
name|DatabaseImpl
argument_list|()
decl_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
comment|// store document
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Resource
name|resource
init|=
name|root
operator|.
name|createResource
argument_list|(
name|docName
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|cdata_xml
argument_list|)
expr_stmt|;
name|root
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// retrieve document
name|root
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|LOCAL_DB
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|,
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Resource
name|resource
init|=
name|root
operator|.
name|getResource
argument_list|(
name|docName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cdata_xml
argument_list|,
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|root
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Ignore
argument_list|(
literal|"Cannot get the Milton WebDav client to work with eXist-db?!?"
argument_list|)
annotation|@
name|Test
specifier|public
name|void
name|cdataWebDavApi
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|NotAuthorizedException
throws|,
name|BadRequestException
throws|,
name|HttpException
throws|,
name|ConflictException
throws|,
name|NotFoundException
block|{
specifier|final
name|String
name|docName
init|=
literal|"webdav-cdata-test.xml"
decl_stmt|;
specifier|final
name|HostBuilder
name|builder
init|=
operator|new
name|HostBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|setServer
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPort
argument_list|(
name|existWebServer
operator|.
name|getPort
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setRootPath
argument_list|(
literal|"exist/webdav/db"
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setUser
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_USER
argument_list|)
expr_stmt|;
name|builder
operator|.
name|setPassword
argument_list|(
name|TestUtils
operator|.
name|ADMIN_DB_PWD
argument_list|)
expr_stmt|;
specifier|final
name|Host
name|host
init|=
name|builder
operator|.
name|buildHost
argument_list|()
decl_stmt|;
specifier|final
name|Folder
name|folder
init|=
name|host
operator|.
name|getFolder
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
comment|// store document
specifier|final
name|byte
name|data
index|[]
init|=
name|cdata_xml
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
specifier|final
name|java
operator|.
name|io
operator|.
name|File
name|tmpStoreFile
init|=
name|tempFolder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|Files
operator|.
name|write
argument_list|(
name|tmpStoreFile
operator|.
name|toPath
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|folder
operator|.
name|upload
argument_list|(
name|tmpStoreFile
argument_list|)
expr_stmt|;
comment|// retrieve document
specifier|final
name|com
operator|.
name|ettrema
operator|.
name|httpclient
operator|.
name|Resource
name|resource
init|=
name|folder
operator|.
name|child
argument_list|(
name|docName
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|resource
operator|instanceof
name|File
argument_list|)
expr_stmt|;
specifier|final
name|java
operator|.
name|io
operator|.
name|File
name|tempRetrieveFile
init|=
name|tempFolder
operator|.
name|newFile
argument_list|()
decl_stmt|;
name|resource
operator|.
name|downloadTo
argument_list|(
name|tempRetrieveFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|cdata_xml
argument_list|,
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|tempRetrieveFile
operator|.
name|toPath
argument_list|()
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

