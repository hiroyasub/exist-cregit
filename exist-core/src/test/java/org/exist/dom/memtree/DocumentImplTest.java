begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|dom
operator|.
name|AttrNSImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ExistSAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|XMLConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DocumentImplTest
block|{
specifier|private
specifier|static
specifier|final
name|String
name|DOC
init|=
literal|"<repo:meta xmlns=\"http://exist-db.org/xquery/repo\" xmlns:repo=\"http://exist-db.org/xquery/repo\">\n"
operator|+
literal|"<repo:description>some description or other</repo:description>\n"
operator|+
literal|"</repo:meta>"
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|checkNamespaces_xerces
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
specifier|final
name|Document
name|doc
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
operator|new
name|FastByteArrayInputStream
argument_list|(
name|DOC
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|doc
operator|=
name|parseXerces
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Element
name|elem
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
specifier|final
name|NamedNodeMap
name|attrs
init|=
name|elem
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|2
argument_list|,
name|attrs
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|final
name|Attr
name|attr1
init|=
operator|(
name|Attr
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|,
name|attr1
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|attr1
operator|instanceof
name|AttrNSImpl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
name|attr1
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|attr1
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|attr1
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|attr1
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://exist-db.org/xquery/repo"
argument_list|,
name|attr1
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Attr
name|attr2
init|=
operator|(
name|Attr
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|,
name|attr2
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|attr2
operator|instanceof
name|AttrNSImpl
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
name|attr2
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|attr2
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"repo"
argument_list|,
name|attr2
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|+
literal|":repo"
argument_list|,
name|attr2
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://exist-db.org/xquery/repo"
argument_list|,
name|attr2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkNamespaces_saxon
parameter_list|()
throws|throws
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
throws|,
name|ClassNotFoundException
block|{
specifier|final
name|Document
name|doc
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
operator|new
name|FastByteArrayInputStream
argument_list|(
name|DOC
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|doc
operator|=
name|parseSaxon
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Element
name|elem
init|=
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
specifier|final
name|NamedNodeMap
name|attrs
init|=
name|elem
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|attrs
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|final
name|Attr
name|attr1
init|=
operator|(
name|Attr
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|,
name|attr1
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
name|attr1
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|attr1
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XML_NS_PREFIX
argument_list|,
name|attr1
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|+
literal|":"
operator|+
name|XMLConstants
operator|.
name|XML_NS_PREFIX
argument_list|,
name|attr1
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XML_NS_URI
argument_list|,
name|attr1
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Attr
name|attr2
init|=
operator|(
name|Attr
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|,
name|attr2
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
name|attr2
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|attr2
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|attr2
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|attr2
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://exist-db.org/xquery/repo"
argument_list|,
name|attr2
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Attr
name|attr3
init|=
operator|(
name|Attr
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|Node
operator|.
name|ATTRIBUTE_NODE
argument_list|,
name|attr3
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
name|attr3
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|attr3
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"repo"
argument_list|,
name|attr3
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
operator|+
literal|":repo"
argument_list|,
name|attr3
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://exist-db.org/xquery/repo"
argument_list|,
name|attr3
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|checkNamespaces_exist
parameter_list|()
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
block|{
specifier|final
name|DocumentImpl
name|doc
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
operator|new
name|FastByteArrayInputStream
argument_list|(
name|DOC
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
argument_list|)
init|)
block|{
name|doc
operator|=
name|parseExist
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
specifier|final
name|ElementImpl
name|elem
init|=
operator|(
name|ElementImpl
operator|)
name|doc
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
specifier|final
name|NamedNodeMap
name|attrs
init|=
name|elem
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|attrs
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
comment|//        assertEquals(2, attrs.getLength());
name|int
name|index
init|=
literal|0
decl_stmt|;
specifier|final
name|Attr
name|attr1
init|=
operator|(
name|Attr
operator|)
name|attrs
operator|.
name|item
argument_list|(
name|index
operator|++
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|NodeImpl
operator|.
name|NAMESPACE_NODE
argument_list|,
name|attr1
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|attr1
operator|instanceof
name|NamespaceNode
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE_NS_URI
argument_list|,
name|attr1
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|attr1
operator|.
name|getPrefix
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|attr1
operator|.
name|getLocalName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|XMLConstants
operator|.
name|XMLNS_ATTRIBUTE
argument_list|,
name|attr1
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"http://exist-db.org/xquery/repo"
argument_list|,
name|attr1
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//        final Attr attr2 = (Attr)attrs.item(index++);
comment|//        assertEquals(NodeImpl.NAMESPACE_NODE, attr2.getNodeType());
comment|//        assertTrue(attr2 instanceof NamespaceNode);
comment|//        assertEquals(XMLConstants.XMLNS_ATTRIBUTE_NS_URI, attr2.getNamespaceURI());
comment|//        assertEquals(XMLConstants.XMLNS_ATTRIBUTE, attr2.getPrefix());
comment|//        assertEquals("repo", attr2.getLocalName());
comment|//        assertEquals(XMLConstants.XMLNS_ATTRIBUTE + ":repo", attr2.getNodeName());
comment|//        assertEquals("http://exist-db.org/xquery/repo", attr2.getValue());
block|}
specifier|private
name|Document
name|parseXerces
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
specifier|final
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|DocumentBuilder
name|builder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
return|;
block|}
specifier|private
name|Document
name|parseSaxon
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
throws|,
name|ParserConfigurationException
throws|,
name|ClassNotFoundException
throws|,
name|IllegalAccessException
throws|,
name|InstantiationException
block|{
specifier|final
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"net.sf.saxon.dom.DocumentBuilderImpl"
argument_list|)
decl_stmt|;
specifier|final
name|DocumentBuilder
name|builder
init|=
operator|(
name|DocumentBuilder
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
return|return
name|builder
operator|.
name|parse
argument_list|(
name|is
argument_list|)
return|;
block|}
specifier|private
name|DocumentImpl
name|parseExist
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|ParserConfigurationException
throws|,
name|SAXException
throws|,
name|IOException
block|{
specifier|final
name|SAXParserFactory
name|saxParserFactory
init|=
name|ExistSAXParserFactory
operator|.
name|getSAXParserFactory
argument_list|()
decl_stmt|;
specifier|final
name|SAXParser
name|saxParser
init|=
name|saxParserFactory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
specifier|final
name|XMLReader
name|reader
init|=
name|saxParser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
specifier|final
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
specifier|final
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setProperty
argument_list|(
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
return|return
name|adapter
operator|.
name|getDocument
argument_list|()
return|;
block|}
block|}
end_class

end_unit

