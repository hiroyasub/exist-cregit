begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|NodeTest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|NodeImplTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|iterate_loop
parameter_list|()
block|{
specifier|final
name|SequenceIterator
name|it
init|=
operator|new
name|StubNodeImpl
argument_list|()
operator|.
name|iterate
argument_list|()
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|nextItem
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|iterate_skip_loop
parameter_list|()
block|{
specifier|final
name|SequenceIterator
name|it
init|=
operator|new
name|StubNodeImpl
argument_list|()
operator|.
name|iterate
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|it
operator|.
name|skippable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|it
operator|.
name|skip
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|it
operator|.
name|skippable
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|nextItem
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|iterate_loop_skip_loop
parameter_list|()
block|{
specifier|final
name|SequenceIterator
name|it
init|=
operator|new
name|StubNodeImpl
argument_list|()
operator|.
name|iterate
argument_list|()
decl_stmt|;
name|int
name|len
init|=
literal|20
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|it
operator|.
name|nextItem
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|it
operator|.
name|skippable
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|it
operator|.
name|skip
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|it
operator|.
name|skippable
argument_list|()
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|nextItem
argument_list|()
expr_stmt|;
name|count
operator|++
expr_stmt|;
block|}
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|StubNodeImpl
extends|extends
name|NodeImpl
argument_list|<
name|StubNodeImpl
argument_list|>
block|{
specifier|public
name|StubNodeImpl
parameter_list|()
block|{
name|super
argument_list|(
literal|null
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|StubNodeImpl
name|o
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectDescendantAttributes
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|selectChildren
parameter_list|(
specifier|final
name|NodeTest
name|test
parameter_list|,
specifier|final
name|Sequence
name|result
parameter_list|)
block|{
block|}
block|}
block|}
end_class

end_unit

