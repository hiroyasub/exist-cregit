begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
package|;
end_package

begin_import
import|import
name|com
operator|.
name|googlecode
operator|.
name|junittoolbox
operator|.
name|ParallelRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|EasyMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|NamePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  *  * @author aretter  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|ParallelRunner
operator|.
name|class
argument_list|)
specifier|public
class|class
name|DocumentBuilderReceiverTest
block|{
specifier|private
specifier|static
name|String
name|ATOM_NS
init|=
literal|"http://www.w3.org/2005/Atom"
decl_stmt|;
comment|//    private static String ATOM_PREFIX = "atom";
annotation|@
name|Test
specifier|public
name|void
name|when_prefix_is_known_in_context_dont_use_if_namespace_equals_default_namespace
parameter_list|()
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|entry_name
init|=
literal|"entry"
decl_stmt|;
specifier|final
name|String
name|id_name
init|=
literal|"id"
decl_stmt|;
name|XQueryContext
name|mockContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getSharedNamePool
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|NamePool
argument_list|()
argument_list|)
expr_stmt|;
comment|//expect(mockContext.getPrefixForURI(ATOM_NS)).andReturn(ATOM_PREFIX).times(2);
name|replay
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|(
name|mockContext
argument_list|)
decl_stmt|;
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|startPrefixMapping
argument_list|(
literal|""
argument_list|,
name|ATOM_NS
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|ATOM_NS
argument_list|,
name|entry_name
argument_list|,
name|entry_name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|ATOM_NS
argument_list|,
name|id_name
argument_list|,
name|id_name
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|endElement
argument_list|(
name|ATOM_NS
argument_list|,
name|id_name
argument_list|,
name|id_name
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|endElement
argument_list|(
name|ATOM_NS
argument_list|,
name|entry_name
argument_list|,
name|entry_name
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|Node
name|entryNode
init|=
name|doc
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|entry_name
argument_list|,
name|entryNode
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|Node
name|idNode
init|=
name|entryNode
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|id_name
argument_list|,
name|idNode
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|use_given_namespace_prefix
parameter_list|()
throws|throws
name|SAXException
block|{
comment|// if an explicit namespace prefix is present, it should be used
comment|// unless a different mapping was defined in context
specifier|final
name|String
name|title
init|=
literal|"title"
decl_stmt|;
specifier|final
name|String
name|titleQName
init|=
literal|"atom:title"
decl_stmt|;
name|XQueryContext
name|mockContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getSharedNamePool
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|NamePool
argument_list|()
argument_list|)
expr_stmt|;
comment|// no namespace mapping in context
name|expect
argument_list|(
name|mockContext
operator|.
name|getPrefixForURI
argument_list|(
name|ATOM_NS
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|(
name|mockContext
argument_list|)
decl_stmt|;
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|ATOM_NS
argument_list|,
name|title
argument_list|,
name|titleQName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|endElement
argument_list|(
name|ATOM_NS
argument_list|,
name|title
argument_list|,
name|titleQName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|Node
name|entryNode
init|=
name|doc
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Explicit namespace prefix should be preserved"
argument_list|,
name|titleQName
argument_list|,
name|entryNode
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|use_namespace_prefix_from_context
parameter_list|()
throws|throws
name|SAXException
block|{
comment|// if a namespace is mapped in the current context, use its prefix and overwrite
comment|// local prefix
specifier|final
name|String
name|title
init|=
literal|"title"
decl_stmt|;
specifier|final
name|String
name|titleQName
init|=
literal|"atom:title"
decl_stmt|;
name|XQueryContext
name|mockContext
init|=
name|EasyMock
operator|.
name|createMock
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getDatabase
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|mockContext
operator|.
name|getSharedNamePool
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|new
name|NamePool
argument_list|()
argument_list|)
expr_stmt|;
comment|// namespace mapping in context
name|expect
argument_list|(
name|mockContext
operator|.
name|getPrefixForURI
argument_list|(
name|ATOM_NS
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|(
name|mockContext
argument_list|)
decl_stmt|;
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|startElement
argument_list|(
name|ATOM_NS
argument_list|,
name|title
argument_list|,
name|titleQName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|endElement
argument_list|(
name|ATOM_NS
argument_list|,
name|title
argument_list|,
name|titleQName
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
name|verify
argument_list|(
name|mockContext
argument_list|)
expr_stmt|;
name|Document
name|doc
init|=
name|builder
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|Node
name|entryNode
init|=
name|doc
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Explicit namespace prefix should be preserved"
argument_list|,
literal|"a:title"
argument_list|,
name|entryNode
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

