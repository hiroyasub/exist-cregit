begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xupdate
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|TestUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|UserManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|hamcrest
operator|.
name|Matchers
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XUpdateQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|DiffBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|builder
operator|.
name|Input
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmlunit
operator|.
name|diff
operator|.
name|Diff
import|;
end_import

begin_comment
comment|/**  * @author berlinge-to  */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|XUpdateTest
block|{
annotation|@
name|Rule
specifier|public
specifier|final
name|ExistXmldbEmbeddedServer
name|existXmldbEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//TODO should not execute as 'admin' user
comment|//also additional tests needed to verify update permissions
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
return|return
name|Arrays
operator|.
name|asList
argument_list|(
operator|new
name|Object
index|[]
index|[]
block|{
block|{
literal|"append"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"insert_after"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"insert_before"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"remove"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"update"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"append_attribute"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"append_child"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"insert_after_big"
block|,
literal|"address_big.xml"
block|}
block|,
block|{
literal|"conditional"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"variables"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"replace"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"whitespace"
block|,
literal|"address.xml"
block|}
block|,
block|{
literal|"namespaces"
block|,
literal|"namespaces.xml"
block|}
block|,
comment|/* TODO Added by Geoff Shuetrim (geoff@galexy.net) on 15 July 2006                 to highlight that root element renaming does not currently succeed,                 resulting instead in a null pointer exception because the renaming                 relies upon obtaining the parent element of the element being                 renamed and this is null for the root element. */
block|{
literal|"rename_root_element"
block|,
literal|"address.xml"
block|}
block|,
comment|/* TODO Added by Geoff Shuetrim (geoff@galexy.net) on 15 July 2006                 to highlight that renaming of an element fails when the renaming also                 involves a change of namespace */
block|{
literal|"rename_including_namespace"
block|,
literal|"namespaces.xml"
block|}
block|}
argument_list|)
return|;
block|}
annotation|@
name|Parameter
specifier|public
name|String
name|testName
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|String
name|sourceFile
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XUPDATE_COLLECTION
init|=
literal|"xupdate_tests"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|MODIFICATION_DIR_NAME
init|=
literal|"modifications"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|RESULT_DIR_NAME
init|=
literal|"results"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|SOURCE_DIR_NAME
init|=
literal|"input"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|XUPDATE_FILE
init|=
literal|"xu.xml"
decl_stmt|;
comment|// xml document name in eXist
specifier|private
name|Collection
name|col
init|=
literal|null
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|xupdate
parameter_list|()
throws|throws
name|Exception
block|{
comment|//skip tests from Geoff Shuetrim (see above!)
name|Assume
operator|.
name|assumeThat
argument_list|(
name|testName
argument_list|,
name|not
argument_list|(
name|anyOf
argument_list|(
name|equalTo
argument_list|(
literal|"rename_root_element"
argument_list|)
argument_list|,
name|equalTo
argument_list|(
literal|"rename_including_namespace"
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//update input xml file
specifier|final
name|Path
name|modFile
init|=
name|getRelFile
argument_list|(
name|MODIFICATION_DIR_NAME
operator|+
literal|"/"
operator|+
name|testName
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|xupdateResult
init|=
name|updateDocument
argument_list|(
name|modFile
argument_list|)
decl_stmt|;
comment|//Read reference xml file
specifier|final
name|Path
name|resultFile
init|=
name|getRelFile
argument_list|(
name|RESULT_DIR_NAME
operator|+
literal|"/"
operator|+
name|testName
operator|+
literal|".xml"
argument_list|)
decl_stmt|;
comment|//compare
specifier|final
name|Source
name|expectedDoc
init|=
name|Input
operator|.
name|fromFile
argument_list|(
name|resultFile
operator|.
name|toFile
argument_list|()
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Source
name|actualDoc
init|=
name|Input
operator|.
name|fromString
argument_list|(
name|xupdateResult
argument_list|)
operator|.
name|build
argument_list|()
decl_stmt|;
specifier|final
name|Diff
name|diff
init|=
name|DiffBuilder
operator|.
name|compare
argument_list|(
name|expectedDoc
argument_list|)
operator|.
name|withTest
argument_list|(
name|actualDoc
argument_list|)
operator|.
name|ignoreWhitespace
argument_list|()
operator|.
name|checkForIdentical
argument_list|()
operator|.
name|build
argument_list|()
decl_stmt|;
name|assertFalse
argument_list|(
name|diff
operator|.
name|toString
argument_list|()
argument_list|,
name|diff
operator|.
name|hasDifferences
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|addDocument
parameter_list|(
specifier|final
name|String
name|sourceFile
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|Path
name|f
init|=
name|getRelFile
argument_list|(
name|SOURCE_DIR_NAME
operator|+
literal|"/"
operator|+
name|sourceFile
argument_list|)
decl_stmt|;
specifier|final
name|XMLResource
name|document
init|=
operator|(
name|XMLResource
operator|)
name|col
operator|.
name|createResource
argument_list|(
name|XUPDATE_FILE
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|document
operator|.
name|setContent
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|col
operator|.
name|storeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Path
name|getRelFile
parameter_list|(
specifier|final
name|String
name|relPath
parameter_list|)
throws|throws
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|URL
name|url
init|=
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|relPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't find file: "
operator|+
name|relPath
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|f
init|=
name|Paths
operator|.
name|get
argument_list|(
name|url
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|f
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Can't read file: "
operator|+
name|url
argument_list|)
throw|;
block|}
return|return
name|f
return|;
block|}
specifier|private
name|void
name|removeDocument
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|Resource
name|document
init|=
name|col
operator|.
name|getResource
argument_list|(
name|XUPDATE_FILE
argument_list|)
decl_stmt|;
name|col
operator|.
name|removeResource
argument_list|(
name|document
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return resultant XML document as a String      */
specifier|private
name|String
name|updateDocument
parameter_list|(
specifier|final
name|Path
name|updateFile
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|ParserConfigurationException
throws|,
name|SAXException
block|{
specifier|final
name|XUpdateQueryService
name|service
init|=
operator|(
name|XUpdateQueryService
operator|)
name|col
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// Read XUpdate-Modifcations
specifier|final
name|String
name|xUpdateModifications
init|=
operator|new
name|String
argument_list|(
name|Files
operator|.
name|readAllBytes
argument_list|(
name|updateFile
argument_list|)
argument_list|,
name|UTF_8
argument_list|)
decl_stmt|;
name|service
operator|.
name|update
argument_list|(
name|xUpdateModifications
argument_list|)
expr_stmt|;
specifier|final
name|XMLResource
name|ret
init|=
operator|(
name|XMLResource
operator|)
name|col
operator|.
name|getResource
argument_list|(
name|XUPDATE_FILE
argument_list|)
decl_stmt|;
return|return
operator|(
operator|(
name|String
operator|)
name|ret
operator|.
name|getContent
argument_list|()
operator|)
return|;
block|}
annotation|@
name|Before
specifier|public
name|void
name|startup
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|URISyntaxException
block|{
name|col
operator|=
name|existXmldbEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getChildCollection
argument_list|(
name|XUPDATE_COLLECTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|==
literal|null
condition|)
block|{
specifier|final
name|CollectionManagementService
name|collectionManagementService
init|=
operator|(
name|CollectionManagementService
operator|)
name|existXmldbEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|col
operator|=
name|collectionManagementService
operator|.
name|createCollection
argument_list|(
name|XUPDATE_COLLECTION
argument_list|)
expr_stmt|;
specifier|final
name|UserManagementService
name|ums
init|=
operator|(
name|UserManagementService
operator|)
name|col
operator|.
name|getService
argument_list|(
literal|"UserManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|// change ownership to guest
specifier|final
name|Account
name|guest
init|=
name|ums
operator|.
name|getAccount
argument_list|(
literal|"guest"
argument_list|)
decl_stmt|;
name|ums
operator|.
name|chown
argument_list|(
name|guest
argument_list|,
name|guest
operator|.
name|getPrimaryGroup
argument_list|()
argument_list|)
expr_stmt|;
name|ums
operator|.
name|chmod
argument_list|(
name|Permission
operator|.
name|DEFAULT_COLLECTION_PERM
argument_list|)
expr_stmt|;
block|}
name|addDocument
argument_list|(
name|sourceFile
argument_list|)
expr_stmt|;
block|}
annotation|@
name|After
specifier|public
name|void
name|shutdown
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|LockException
throws|,
name|TriggerException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|IOException
block|{
name|removeDocument
argument_list|()
expr_stmt|;
name|TestUtils
operator|.
name|cleanupDB
argument_list|()
expr_stmt|;
name|col
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

