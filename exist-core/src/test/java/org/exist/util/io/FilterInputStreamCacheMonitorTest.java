begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|test
operator|.
name|ExistXmldbEmbeddedServer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|ExtendedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|LocalBinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|AfterClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|BeforeClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|ClassRule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import static
name|junit
operator|.
name|framework
operator|.
name|TestCase
operator|.
name|assertTrue
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertFalse
import|;
end_import

begin_class
specifier|public
class|class
name|FilterInputStreamCacheMonitorTest
block|{
annotation|@
name|ClassRule
specifier|public
specifier|static
name|ExistXmldbEmbeddedServer
name|existXmldbEmbeddedServer
init|=
operator|new
name|ExistXmldbEmbeddedServer
argument_list|(
literal|false
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|TEST_COLLECTION_NAME
init|=
literal|"testFilterInputStreamCacheMonitor"
decl_stmt|;
annotation|@
name|BeforeClass
specifier|public
specifier|static
name|void
name|setup
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
throws|,
name|URISyntaxException
block|{
specifier|final
name|Path
name|icon
init|=
name|Paths
operator|.
name|get
argument_list|(
name|FilterInputStreamCacheMonitorTest
operator|.
name|class
operator|.
name|getResource
argument_list|(
literal|"icon.png"
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Collection
name|testCollection
init|=
name|existXmldbEmbeddedServer
operator|.
name|createCollection
argument_list|(
name|existXmldbEmbeddedServer
operator|.
name|getRoot
argument_list|()
argument_list|,
name|TEST_COLLECTION_NAME
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|EXistResource
name|resource
init|=
operator|(
name|EXistResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
literal|"icon.png"
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
init|)
block|{
name|resource
operator|.
name|setContent
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
name|testCollection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
annotation|@
name|AfterClass
specifier|public
specifier|static
name|void
name|cleanup
parameter_list|()
throws|throws
name|XMLDBException
block|{
specifier|final
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|existXmldbEmbeddedServer
operator|.
name|getRoot
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
name|TEST_COLLECTION_NAME
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|binaryResult
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
block|{
specifier|final
name|FilterInputStreamCacheMonitor
name|monitor
init|=
name|FilterInputStreamCacheMonitor
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// assert no binaries in use yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|monitor
operator|.
name|getActive
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceSet
name|resourceSet
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resourceSet
operator|=
name|existXmldbEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"util:binary-doc('/db/"
operator|+
name|TEST_COLLECTION_NAME
operator|+
literal|"/icon.png')"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resourceSet
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|EXistResource
name|resource
init|=
operator|(
name|EXistResource
operator|)
name|resourceSet
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|assertTrue
argument_list|(
name|resource
operator|instanceof
name|LocalBinaryResource
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
operator|(
operator|(
name|ExtendedResource
operator|)
name|resource
operator|)
operator|.
name|getExtendedContent
argument_list|()
operator|instanceof
name|BinaryValue
argument_list|)
expr_stmt|;
comment|// one active binary (as it is in the result set)
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|monitor
operator|.
name|getActive
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// assert no active binaries as we just closed the resource in the try-with-resources
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|monitor
operator|.
name|getActive
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|resourceSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|enclosedExpressionCleanup
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
block|{
specifier|final
name|FilterInputStreamCacheMonitor
name|monitor
init|=
name|FilterInputStreamCacheMonitor
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// assert no binaries in use yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|monitor
operator|.
name|getActive
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceSet
name|resourceSet
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resourceSet
operator|=
name|existXmldbEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $embedded :=<logo><image>{util:binary-doc('/db/"
operator|+
name|TEST_COLLECTION_NAME
operator|+
literal|"/icon.png')}</image></logo>\n"
operator|+
literal|"return xmldb:store('/db/"
operator|+
name|TEST_COLLECTION_NAME
operator|+
literal|"', 'icon.xml', $embedded)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resourceSet
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|EXistResource
name|resource
init|=
operator|(
name|EXistResource
operator|)
name|resourceSet
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|assertFalse
argument_list|(
name|resource
operator|instanceof
name|LocalBinaryResource
argument_list|)
expr_stmt|;
comment|// assert still no active binaries (because they have been cleaned up)
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|monitor
operator|.
name|getActive
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|resourceSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|enclosedExpressionsCleanup
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|IOException
block|{
specifier|final
name|FilterInputStreamCacheMonitor
name|monitor
init|=
name|FilterInputStreamCacheMonitor
operator|.
name|getInstance
argument_list|()
decl_stmt|;
comment|// assert no binaries in use yet
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|monitor
operator|.
name|getActive
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|ResourceSet
name|resourceSet
init|=
literal|null
decl_stmt|;
try|try
block|{
name|resourceSet
operator|=
name|existXmldbEmbeddedServer
operator|.
name|executeQuery
argument_list|(
literal|"let $bin := util:binary-doc('/db/"
operator|+
name|TEST_COLLECTION_NAME
operator|+
literal|"/icon.png')\n"
operator|+
literal|"let $embedded :=<logo><image>{$bin}</image></logo>\n"
operator|+
literal|"let $embedded-2 :=<other>{$bin}</other>\n"
operator|+
literal|"return xmldb:store('/db/"
operator|+
name|TEST_COLLECTION_NAME
operator|+
literal|"', 'icon.xml', $embedded)"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|resourceSet
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
init|(
specifier|final
name|EXistResource
name|resource
init|=
operator|(
name|EXistResource
operator|)
name|resourceSet
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
init|)
block|{
name|assertFalse
argument_list|(
name|resource
operator|instanceof
name|LocalBinaryResource
argument_list|)
expr_stmt|;
comment|// assert still no active binaries (because they have been cleaned up)
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|monitor
operator|.
name|getActive
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|resourceSet
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

