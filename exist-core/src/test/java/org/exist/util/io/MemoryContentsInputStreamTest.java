begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|org
operator|.
name|easymock
operator|.
name|IArgumentMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|aryEq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|createMock
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|eq
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|expect
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|replay
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|reportMatcher
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|easymock
operator|.
name|EasyMock
operator|.
name|verify
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * @author Patrick Reinhart<patrick@reini.net>  */
end_comment

begin_class
specifier|public
class|class
name|MemoryContentsInputStreamTest
block|{
specifier|private
name|MemoryContents
name|memoryContents
decl_stmt|;
specifier|private
name|MemoryContentsInputStream
name|inputStream
decl_stmt|;
annotation|@
name|Before
specifier|public
name|void
name|setUp
parameter_list|()
block|{
name|memoryContents
operator|=
name|createMock
argument_list|(
name|MemoryContents
operator|.
name|class
argument_list|)
expr_stmt|;
name|inputStream
operator|=
operator|new
name|MemoryContentsInputStream
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|available
parameter_list|()
throws|throws
name|IOException
block|{
name|expect
argument_list|(
name|memoryContents
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1L
operator|+
name|Integer
operator|.
name|MAX_VALUE
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1235L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1L
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|Integer
operator|.
name|MAX_VALUE
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1234L
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|1L
argument_list|,
name|inputStream
operator|.
name|available
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readSingleByte
parameter_list|()
throws|throws
name|IOException
block|{
name|expect
argument_list|(
name|memoryContents
operator|.
name|read
argument_list|(
name|write
argument_list|(
literal|'a'
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|read
argument_list|(
name|write
argument_list|(
literal|'b'
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|read
argument_list|(
name|write
argument_list|(
literal|'c'
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|'a'
argument_list|,
name|inputStream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inputStream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|inputStream
operator|.
name|read
argument_list|()
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|readByteArray
parameter_list|()
throws|throws
name|IOException
block|{
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|20
index|]
decl_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|read
argument_list|(
name|aryEq
argument_list|(
name|buf
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|0L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|1
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|10
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|read
argument_list|(
name|aryEq
argument_list|(
name|buf
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|9L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|2
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|9
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|read
argument_list|(
name|aryEq
argument_list|(
name|buf
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|9L
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|3
argument_list|)
argument_list|,
name|eq
argument_list|(
literal|8
argument_list|)
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|9
argument_list|,
name|inputStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|inputStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|2
argument_list|,
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
operator|-
literal|1
argument_list|,
name|inputStream
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|3
argument_list|,
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|skip
parameter_list|()
throws|throws
name|IOException
block|{
name|expect
argument_list|(
name|memoryContents
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|10L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|50L
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|10
argument_list|,
name|inputStream
operator|.
name|skip
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|20
argument_list|,
name|inputStream
operator|.
name|skip
argument_list|(
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|transferToâ
parameter_list|()
throws|throws
name|IOException
block|{
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|123L
argument_list|)
expr_stmt|;
name|expect
argument_list|(
name|memoryContents
operator|.
name|transferTo
argument_list|(
name|out
argument_list|,
literal|0L
argument_list|)
argument_list|)
operator|.
name|andReturn
argument_list|(
literal|123L
argument_list|)
expr_stmt|;
name|replay
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|123L
argument_list|,
name|inputStream
operator|.
name|transferTo
argument_list|(
name|out
argument_list|)
argument_list|)
expr_stmt|;
name|verify
argument_list|(
name|memoryContents
argument_list|)
expr_stmt|;
block|}
specifier|static
name|byte
index|[]
name|write
parameter_list|(
name|int
name|ch
parameter_list|)
block|{
name|reportMatcher
argument_list|(
operator|new
name|IArgumentMatcher
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|boolean
name|matches
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|byte
index|[]
condition|)
block|{
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|data
operator|.
name|length
operator|==
literal|1
condition|)
block|{
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|ch
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|appendTo
parameter_list|(
name|StringBuffer
name|stringBuffer
parameter_list|)
block|{
name|stringBuffer
operator|.
name|append
argument_list|(
literal|"bye[1]"
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
end_class

end_unit

