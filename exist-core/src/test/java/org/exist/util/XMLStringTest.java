begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * XMLStringTest.java - Aug 11, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_class
specifier|public
class|class
name|XMLStringTest
block|{
comment|/* 	 * Test for XMLString append(char[], int, int) 	 */
annotation|@
name|Test
specifier|public
name|void
name|appendcharArrayintint
parameter_list|()
block|{
specifier|final
name|XMLString
name|s
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
try|try
block|{
name|char
name|ch
index|[]
init|=
literal|"Hello"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|,
literal|"Hello"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|normalize
parameter_list|()
block|{
specifier|final
name|XMLString
name|s
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|XMLString
name|normalized
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|char
name|ch
index|[]
init|=
literal|"\n	Hello World\r\n"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
name|normalized
operator|=
name|s
operator|.
name|normalize
argument_list|(
name|XMLString
operator|.
name|SUPPRESS_BOTH
argument_list|)
expr_stmt|;
specifier|final
name|String
name|r
init|=
name|normalized
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|normalized
operator|!=
name|s
condition|)
block|{
name|normalized
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|s
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|collapse
parameter_list|()
block|{
specifier|final
name|XMLString
name|s
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|XMLString
name|normalized
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|char
name|ch
index|[]
init|=
literal|"\n	Hello   World\r\n"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
name|normalized
operator|=
name|s
operator|.
name|normalize
argument_list|(
name|XMLString
operator|.
name|NORMALIZE
argument_list|)
expr_stmt|;
specifier|final
name|String
name|r
init|=
name|normalized
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|normalized
operator|!=
name|s
condition|)
block|{
name|normalized
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|s
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|substring
parameter_list|()
block|{
specifier|final
name|XMLString
name|s
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
name|XMLString
name|normalized
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|char
name|ch
index|[]
init|=
literal|"\n	Hello World\r\n"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
name|normalized
operator|=
name|s
operator|.
name|normalize
argument_list|(
name|XMLString
operator|.
name|SUPPRESS_BOTH
argument_list|)
expr_stmt|;
specifier|final
name|String
name|r
init|=
name|normalized
operator|.
name|substring
argument_list|(
literal|6
argument_list|,
literal|5
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
literal|"World"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|normalized
operator|!=
name|s
condition|)
block|{
name|normalized
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
name|s
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|insert
parameter_list|()
block|{
specifier|final
name|XMLString
name|s
init|=
operator|new
name|XMLString
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|char
name|ch
index|[]
init|=
literal|"Hello World"
operator|.
name|toCharArray
argument_list|()
decl_stmt|;
name|s
operator|.
name|append
argument_list|(
name|ch
argument_list|,
literal|0
argument_list|,
name|ch
operator|.
name|length
argument_list|)
expr_stmt|;
name|s
operator|.
name|insert
argument_list|(
literal|5
argument_list|,
literal|" happy"
argument_list|)
expr_stmt|;
name|String
name|r
init|=
name|s
operator|.
name|toString
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
literal|"Hello happy World"
argument_list|)
expr_stmt|;
name|s
operator|.
name|delete
argument_list|(
literal|5
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|r
operator|=
name|s
operator|.
name|toString
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|r
argument_list|,
literal|"Hello World"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|s
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

