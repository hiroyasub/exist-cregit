begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|sorters
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|sorters
operator|.
name|ComparatorChecker
operator|.
name|SortOrder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runner
operator|.
name|RunWith
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|runners
operator|.
name|Parameterized
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Random
import|;
end_import

begin_comment
comment|/**  * Test case - given a sort() method and an algorithm via a checker, do a variety  * of tests that rely on the comparator methods.  *  * This work was undertaken as part of the development of the taxonomic  * repository at http://biodiversity.org.au . See<A  * href="ghw-at-anbg.gov.au">Greg&nbsp;Whitbread</A> for further details.  *   * @author pmurray@bigpond.com  * @author pmurray@anbg.gov.au  * @author https://sourceforge.net/users/paulmurray  * @author http://www.users.bigpond.com/pmurray  *   */
end_comment

begin_class
annotation|@
name|RunWith
argument_list|(
name|Parameterized
operator|.
name|class
argument_list|)
specifier|public
class|class
name|SortComparatorTest
block|{
annotation|@
name|Parameters
argument_list|(
name|name
operator|=
literal|"{0}"
argument_list|)
specifier|public
specifier|static
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Object
index|[]
argument_list|>
name|data
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|Object
index|[]
argument_list|>
name|parameters
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|SortingAlgorithmTester
name|s
range|:
name|SortingAlgorithmTester
operator|.
name|allSorters
argument_list|()
control|)
block|{
specifier|final
name|String
name|name
init|=
name|s
operator|.
name|getClass
argument_list|()
operator|.
name|getSimpleName
argument_list|()
operator|+
literal|": "
operator|+
name|PlainArrayChecker
operator|.
name|class
operator|.
name|getSimpleName
argument_list|()
decl_stmt|;
name|parameters
operator|.
name|add
argument_list|(
operator|new
name|Object
index|[]
block|{
name|name
block|,
operator|new
name|PlainArrayChecker
argument_list|(
name|s
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
return|return
name|parameters
return|;
block|}
specifier|private
specifier|final
name|Random
name|rnd
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
annotation|@
name|Parameter
specifier|public
name|String
name|sortTestName
decl_stmt|;
annotation|@
name|Parameter
argument_list|(
name|value
operator|=
literal|1
argument_list|)
specifier|public
name|ComparatorChecker
name|checker
decl_stmt|;
annotation|@
name|Test
specifier|public
name|void
name|comparatorAscending
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|checker
operator|.
name|init
argument_list|(
name|getRandomIntArray
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|sort
argument_list|(
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|SortOrder
operator|.
name|ASCENDING
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|comparatorDescending
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|checker
operator|.
name|init
argument_list|(
name|getRandomIntArray
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|sort
argument_list|(
name|SortOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|SortOrder
operator|.
name|DESCENDING
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|badComparatorUnstable
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|++
control|)
block|{
name|checker
operator|.
name|init
argument_list|(
name|getRandomIntArray
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|sort
argument_list|(
name|SortOrder
operator|.
name|UNSTABLE
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|badComparatorRandom
parameter_list|()
throws|throws
name|Exception
block|{
name|checker
operator|.
name|init
argument_list|(
name|getRandomIntArray
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|checker
operator|.
name|sort
argument_list|(
name|SortOrder
operator|.
name|RANDOM
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortSubsection1asc
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|+=
literal|100
control|)
block|{
name|int
index|[]
name|a
init|=
operator|new
name|int
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
literal|1000
condition|;
name|ii
operator|++
control|)
block|{
name|a
index|[
name|ii
index|]
operator|=
operator|(
name|ii
operator|>=
name|i
operator|&&
name|ii
operator|<
name|i
operator|+
literal|100
operator|)
condition|?
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
else|:
literal|999
operator|-
name|ii
expr_stmt|;
block|}
name|checker
operator|.
name|init
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|checker
operator|.
name|sort
argument_list|(
name|SortOrder
operator|.
name|ASCENDING
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|99
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|SortOrder
operator|.
name|ASCENDING
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|99
argument_list|)
expr_stmt|;
comment|// check that the other values have not been disturbed
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|i
condition|;
name|ii
operator|++
control|)
block|{
name|checker
operator|.
name|checkValue
argument_list|(
name|ii
argument_list|,
literal|999
operator|-
name|ii
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|ii
init|=
name|i
operator|+
literal|100
init|;
name|ii
operator|<
literal|1000
condition|;
name|ii
operator|++
control|)
block|{
name|checker
operator|.
name|checkValue
argument_list|(
name|ii
argument_list|,
literal|999
operator|-
name|ii
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortSubsection2asc
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|+=
literal|100
control|)
block|{
name|int
index|[]
name|a
init|=
operator|new
name|int
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
literal|1000
condition|;
name|ii
operator|++
control|)
block|{
name|a
index|[
name|ii
index|]
operator|=
operator|(
name|ii
operator|>=
name|i
operator|&&
name|ii
operator|<
name|i
operator|+
literal|100
operator|)
condition|?
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
else|:
name|ii
expr_stmt|;
block|}
name|checker
operator|.
name|init
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|checker
operator|.
name|sort
argument_list|(
name|SortOrder
operator|.
name|ASCENDING
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|99
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|SortOrder
operator|.
name|ASCENDING
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|99
argument_list|)
expr_stmt|;
comment|// check that the other values have not been disturbed
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|i
condition|;
name|ii
operator|++
control|)
block|{
name|checker
operator|.
name|checkValue
argument_list|(
name|ii
argument_list|,
name|ii
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|ii
init|=
name|i
operator|+
literal|100
init|;
name|ii
operator|<
literal|1000
condition|;
name|ii
operator|++
control|)
block|{
name|checker
operator|.
name|checkValue
argument_list|(
name|ii
argument_list|,
name|ii
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortSubsection1desc
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|+=
literal|100
control|)
block|{
name|int
index|[]
name|a
init|=
operator|new
name|int
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
literal|1000
condition|;
name|ii
operator|++
control|)
block|{
name|a
index|[
name|ii
index|]
operator|=
operator|(
name|ii
operator|>=
name|i
operator|&&
name|ii
operator|<
name|i
operator|+
literal|100
operator|)
condition|?
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
else|:
literal|999
operator|-
name|ii
expr_stmt|;
block|}
name|checker
operator|.
name|init
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|checker
operator|.
name|sort
argument_list|(
name|SortOrder
operator|.
name|DESCENDING
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|99
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|SortOrder
operator|.
name|DESCENDING
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|99
argument_list|)
expr_stmt|;
comment|// check that the other values have not been disturbed
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|i
condition|;
name|ii
operator|++
control|)
block|{
name|checker
operator|.
name|checkValue
argument_list|(
name|ii
argument_list|,
literal|999
operator|-
name|ii
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|ii
init|=
name|i
operator|+
literal|100
init|;
name|ii
operator|<
literal|1000
condition|;
name|ii
operator|++
control|)
block|{
name|checker
operator|.
name|checkValue
argument_list|(
name|ii
argument_list|,
literal|999
operator|-
name|ii
argument_list|)
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Test
specifier|public
name|void
name|sortSubsection2desc
parameter_list|()
throws|throws
name|Exception
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
name|i
operator|+=
literal|100
control|)
block|{
name|int
index|[]
name|a
init|=
operator|new
name|int
index|[
literal|1000
index|]
decl_stmt|;
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
literal|1000
condition|;
name|ii
operator|++
control|)
block|{
name|a
index|[
name|ii
index|]
operator|=
operator|(
name|ii
operator|>=
name|i
operator|&&
name|ii
operator|<
name|i
operator|+
literal|100
operator|)
condition|?
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
else|:
name|ii
expr_stmt|;
block|}
name|checker
operator|.
name|init
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|checker
operator|.
name|sort
argument_list|(
name|SortOrder
operator|.
name|DESCENDING
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|99
argument_list|)
expr_stmt|;
name|checker
operator|.
name|check
argument_list|(
name|SortOrder
operator|.
name|DESCENDING
argument_list|,
name|i
argument_list|,
name|i
operator|+
literal|99
argument_list|)
expr_stmt|;
comment|// check that the other values have not been disturbed
for|for
control|(
name|int
name|ii
init|=
literal|0
init|;
name|ii
operator|<
name|i
condition|;
name|ii
operator|++
control|)
block|{
name|checker
operator|.
name|checkValue
argument_list|(
name|ii
argument_list|,
name|ii
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|ii
init|=
name|i
operator|+
literal|100
init|;
name|ii
operator|<
literal|1000
condition|;
name|ii
operator|++
control|)
block|{
name|checker
operator|.
name|checkValue
argument_list|(
name|ii
argument_list|,
name|ii
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|int
index|[]
name|getRandomIntArray
parameter_list|(
name|int
name|sz
parameter_list|)
block|{
name|int
index|[]
name|a
init|=
operator|new
name|int
index|[
name|sz
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
name|i
operator|++
control|)
block|{
name|a
index|[
name|i
index|]
operator|=
name|rnd
operator|.
name|nextInt
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
block|}
end_class

end_unit

