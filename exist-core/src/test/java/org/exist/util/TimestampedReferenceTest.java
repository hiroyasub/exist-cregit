begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|junit
operator|.
name|Test
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|junit
operator|.
name|Assert
operator|.
name|assertEquals
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|TimestampedReferenceTest
block|{
annotation|@
name|Test
specifier|public
name|void
name|setIfExpired_expired
parameter_list|()
block|{
specifier|final
name|TimestampedReference
argument_list|<
name|String
argument_list|>
name|timestampedReference
init|=
operator|new
name|TimestampedReference
argument_list|<>
argument_list|(
literal|true
argument_list|,
literal|"Original"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Original"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|timestampedReference
operator|.
name|setIfExpired
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
parameter_list|()
lambda|->
literal|"Updated"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Updated"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setIfExpired_notExpired
parameter_list|()
block|{
specifier|final
name|long
name|firstTimestamp
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|TimestampedReference
argument_list|<
name|String
argument_list|>
name|timestampedReference
init|=
operator|new
name|TimestampedReference
argument_list|<>
argument_list|(
literal|true
argument_list|,
literal|"Original"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Original"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|timestampedReference
operator|.
name|setIfExpired
argument_list|(
name|firstTimestamp
argument_list|,
parameter_list|()
lambda|->
literal|"Updated"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Original"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setIfExpiredOrNull_expired
parameter_list|()
block|{
specifier|final
name|TimestampedReference
argument_list|<
name|String
argument_list|>
name|timestampedReference
init|=
operator|new
name|TimestampedReference
argument_list|<>
argument_list|(
literal|true
argument_list|,
literal|"Original"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Original"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|timestampedReference
operator|.
name|setIfExpiredOrNull
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
parameter_list|()
lambda|->
literal|"Updated"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Updated"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setIfExpiredOrNull_notExpired
parameter_list|()
block|{
specifier|final
name|long
name|firstTimestamp
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|TimestampedReference
argument_list|<
name|String
argument_list|>
name|timestampedReference
init|=
operator|new
name|TimestampedReference
argument_list|<>
argument_list|(
literal|true
argument_list|,
literal|"Original"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|"Original"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|timestampedReference
operator|.
name|setIfExpiredOrNull
argument_list|(
name|firstTimestamp
argument_list|,
parameter_list|()
lambda|->
literal|"Updated"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Original"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setIfExpiredOrNull_expiredAndNull
parameter_list|()
block|{
specifier|final
name|TimestampedReference
argument_list|<
name|String
argument_list|>
name|timestampedReference
init|=
operator|new
name|TimestampedReference
argument_list|<>
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|timestampedReference
operator|.
name|setIfExpiredOrNull
argument_list|(
name|System
operator|.
name|nanoTime
argument_list|()
argument_list|,
parameter_list|()
lambda|->
literal|"Updated"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Updated"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Test
specifier|public
name|void
name|setIfExpiredOrNull_notExpiredAndNull
parameter_list|()
block|{
specifier|final
name|long
name|firstTimestamp
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
specifier|final
name|TimestampedReference
argument_list|<
name|String
argument_list|>
name|timestampedReference
init|=
operator|new
name|TimestampedReference
argument_list|<>
argument_list|(
literal|true
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|null
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|timestampedReference
operator|.
name|setIfExpiredOrNull
argument_list|(
name|firstTimestamp
argument_list|,
parameter_list|()
lambda|->
literal|"Updated"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"Updated"
argument_list|,
name|timestampedReference
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

