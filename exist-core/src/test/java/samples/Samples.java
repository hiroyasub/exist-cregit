begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|samples
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_class
specifier|public
class|class
name|Samples
block|{
specifier|public
specifier|static
specifier|final
name|Samples
name|SAMPLES
init|=
operator|new
name|Samples
argument_list|()
decl_stmt|;
comment|/**      * Gets the path of the Address Book sample      *      * @return The path to the Address Book sample      */
specifier|public
name|Path
name|getAddressBookSample
parameter_list|()
throws|throws
name|URISyntaxException
block|{
return|return
name|getSample
argument_list|(
literal|"validation/addressbook/addressbook.xsd"
argument_list|)
return|;
block|}
comment|/**      * Gets the path of the Shakespeare Hamlet sample      *      * @return The path to the Shakespeare Hamlet sample      */
specifier|public
name|Path
name|getHamletSample
parameter_list|()
throws|throws
name|URISyntaxException
block|{
return|return
name|getSample
argument_list|(
literal|"shakespeare/hamlet.xml"
argument_list|)
return|;
block|}
comment|/**      * Gets the path of the Shakespeare Romeo and Juliet sample      *      * @return The path to the Shakespeare Romeo and Juliet sample      */
specifier|public
name|Path
name|getRomeoAndJulietSample
parameter_list|()
throws|throws
name|URISyntaxException
block|{
return|return
name|getSample
argument_list|(
literal|"shakespeare/r_and_j.xml"
argument_list|)
return|;
block|}
comment|/**      * Gets the path of the Macbeth sample      *      * @return The path to the Macbeth sample      */
specifier|public
name|Path
name|getMacbethSample
parameter_list|()
throws|throws
name|URISyntaxException
block|{
return|return
name|getSample
argument_list|(
literal|"shakespeare/macbeth.xml"
argument_list|)
return|;
block|}
comment|/**      * Gets the path of the Shakespeare samples      *      * @return The path to the Shakespeare samples      */
specifier|public
name|Path
name|getShakespeareSamples
parameter_list|()
throws|throws
name|URISyntaxException
block|{
return|return
name|getRomeoAndJulietSample
argument_list|()
operator|.
name|getParent
argument_list|()
return|;
block|}
comment|/**      * Gets the path of the Bibliographic sample      *      * @return The path to the Bibliographic sample      */
specifier|public
name|Path
name|getBiblioSample
parameter_list|()
throws|throws
name|URISyntaxException
block|{
return|return
name|getSample
argument_list|(
literal|"biblio.rdf"
argument_list|)
return|;
block|}
comment|/**      * Gets the sample      *      * @return The path to the sample      */
specifier|public
name|Path
name|getSample
parameter_list|(
specifier|final
name|String
name|sample
parameter_list|)
throws|throws
name|URISyntaxException
block|{
return|return
name|Paths
operator|.
name|get
argument_list|(
name|getClass
argument_list|()
operator|.
name|getResource
argument_list|(
name|sample
argument_list|)
operator|.
name|toURI
argument_list|()
argument_list|)
return|;
block|}
block|}
end_class

end_unit

