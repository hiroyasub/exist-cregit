begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2019 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
package|;
end_package

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Benchmark
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|Scope
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jmh
operator|.
name|annotations
operator|.
name|State
import|;
end_import

begin_class
specifier|public
class|class
name|LockTableBenchmark
block|{
specifier|private
specifier|static
specifier|final
name|int
name|DATA_SUB_COLLECTIONS
init|=
literal|13
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|DOCUMENTS
init|=
literal|20
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|EVENTS_BTREE_READ_LOCK
init|=
literal|593062
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|EVENTS_COLLECTION_INTENTION_READ_LOCK
init|=
literal|86619
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|EVENTS_COLLECTION_READ_LOCK
init|=
literal|19630
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|EVENTS_DOCUMENT_READ_LOCK
init|=
literal|60370
decl_stmt|;
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Benchmark
argument_list|)
specifier|public
specifier|static
class|class
name|LockTableState
block|{
specifier|private
specifier|final
name|LockTable
name|lockTable
init|=
operator|new
name|LockTable
argument_list|(
literal|"jmh-LockTableBenchmark"
argument_list|,
operator|new
name|ThreadGroup
argument_list|(
literal|"jmh-locktable"
argument_list|)
argument_list|)
decl_stmt|;
block|}
annotation|@
name|State
argument_list|(
name|Scope
operator|.
name|Thread
argument_list|)
specifier|public
specifier|static
class|class
name|EventsState
block|{
specifier|private
name|int
name|btreeReads
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|collectionIntentionReads
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|collectionReads
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|documentReads
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|dataSubCollectionIndex
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|documentsIndex
init|=
literal|0
decl_stmt|;
block|}
annotation|@
name|Benchmark
specifier|public
name|void
name|testEvent
parameter_list|(
specifier|final
name|LockTableState
name|lockTableState
parameter_list|,
specifier|final
name|EventsState
name|eventsState
parameter_list|)
block|{
while|while
condition|(
operator|!
operator|(
name|eventsState
operator|.
name|collectionIntentionReads
operator|>=
name|EVENTS_COLLECTION_INTENTION_READ_LOCK
operator|&&
name|eventsState
operator|.
name|collectionReads
operator|>=
name|EVENTS_COLLECTION_READ_LOCK
operator|&&
name|eventsState
operator|.
name|documentReads
operator|>=
name|EVENTS_DOCUMENT_READ_LOCK
operator|&&
name|eventsState
operator|.
name|btreeReads
operator|>=
name|EVENTS_BTREE_READ_LOCK
operator|)
condition|)
block|{
specifier|final
name|long
name|groupId
init|=
name|System
operator|.
name|nanoTime
argument_list|()
decl_stmt|;
if|if
condition|(
name|eventsState
operator|.
name|btreeReads
operator|<
name|EVENTS_BTREE_READ_LOCK
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|btreeReads
operator|++
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|boolean
name|didCollectionIntentionRead
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|eventsState
operator|.
name|collectionIntentionReads
operator|<
name|EVENTS_COLLECTION_INTENTION_READ_LOCK
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"/db"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"/db"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|collectionIntentionReads
operator|++
expr_stmt|;
if|if
condition|(
name|eventsState
operator|.
name|btreeReads
operator|<
name|EVENTS_BTREE_READ_LOCK
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|btreeReads
operator|++
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"/db/apps"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"/db/apps"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
literal|"/db"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|collectionIntentionReads
operator|++
expr_stmt|;
if|if
condition|(
name|eventsState
operator|.
name|btreeReads
operator|<
name|EVENTS_BTREE_READ_LOCK
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|btreeReads
operator|++
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"/db/apps/docs"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"/db/apps/docs"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
literal|"/db/apps"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|collectionIntentionReads
operator|++
expr_stmt|;
if|if
condition|(
name|eventsState
operator|.
name|btreeReads
operator|<
name|EVENTS_BTREE_READ_LOCK
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|btreeReads
operator|++
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"/db/apps/docs/data"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"/db/apps/docs/data"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
literal|"/db/apps/docs"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|collectionIntentionReads
operator|++
expr_stmt|;
if|if
condition|(
name|eventsState
operator|.
name|btreeReads
operator|<
name|EVENTS_BTREE_READ_LOCK
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|btreeReads
operator|++
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|didCollectionIntentionRead
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|eventsState
operator|.
name|dataSubCollectionIndex
operator|>
name|DATA_SUB_COLLECTIONS
condition|)
block|{
name|eventsState
operator|.
name|dataSubCollectionIndex
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|String
name|dataSubCollection
init|=
literal|"/db/apps/docs/data/"
operator|+
name|eventsState
operator|.
name|dataSubCollectionIndex
operator|++
decl_stmt|;
name|boolean
name|didCollectionRead
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|eventsState
operator|.
name|collectionReads
operator|<
name|EVENTS_COLLECTION_READ_LOCK
condition|)
block|{
if|if
condition|(
name|eventsState
operator|.
name|btreeReads
operator|<
name|EVENTS_BTREE_READ_LOCK
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|btreeReads
operator|++
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|dataSubCollection
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|dataSubCollection
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|collectionReads
operator|++
expr_stmt|;
name|didCollectionRead
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|didCollectionIntentionRead
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
literal|"/db/apps/docs/data"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|INTENTION_READ
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eventsState
operator|.
name|documentReads
operator|<
name|EVENTS_DOCUMENT_READ_LOCK
condition|)
block|{
if|if
condition|(
name|eventsState
operator|.
name|btreeReads
operator|<
name|EVENTS_BTREE_READ_LOCK
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|btreeReads
operator|++
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
literal|"BTREE"
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|BTREE
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|eventsState
operator|.
name|documentsIndex
operator|>
name|DOCUMENTS
condition|)
block|{
name|eventsState
operator|.
name|documentsIndex
operator|=
literal|0
expr_stmt|;
block|}
specifier|final
name|String
name|document
init|=
name|dataSubCollection
operator|+
literal|'/'
operator|+
name|eventsState
operator|.
name|documentsIndex
operator|++
decl_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|attempt
argument_list|(
name|groupId
argument_list|,
name|document
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|acquired
argument_list|(
name|groupId
argument_list|,
name|document
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|eventsState
operator|.
name|documentReads
operator|++
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|document
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|DOCUMENT
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|didCollectionRead
condition|)
block|{
name|lockTableState
operator|.
name|lockTable
operator|.
name|released
argument_list|(
name|groupId
argument_list|,
name|dataSubCollection
argument_list|,
name|Lock
operator|.
name|LockType
operator|.
name|COLLECTION
argument_list|,
name|Lock
operator|.
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
specifier|final
name|String
name|args
index|[]
parameter_list|)
block|{
comment|// NOTE: just for running with the java debugger
name|LockTableBenchmark
name|lockTableBenchmark
init|=
operator|new
name|LockTableBenchmark
argument_list|()
decl_stmt|;
name|LockTableState
name|lockTableState
init|=
operator|new
name|LockTableState
argument_list|()
decl_stmt|;
name|EventsState
name|eventsState
init|=
operator|new
name|EventsState
argument_list|()
decl_stmt|;
name|lockTableBenchmark
operator|.
name|testEvent
argument_list|(
name|lockTableState
argument_list|,
name|eventsState
argument_list|)
expr_stmt|;
name|lockTableState
operator|.
name|lockTable
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

