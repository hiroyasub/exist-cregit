begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/**  * eXist Open Source Native XML Database  * Copyright (C) 2001 The eXist-db Project  * info@exist-db.org  * http://www.exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jcstress
operator|.
name|annotations
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|openjdk
operator|.
name|jcstress
operator|.
name|infra
operator|.
name|results
operator|.
name|Z_Result
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantLock
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:adam@evolvedbinary.com">Adam Retter</a>  */
end_comment

begin_class
specifier|public
class|class
name|WeakLazyStripesStressTest
block|{
annotation|@
name|JCStressTest
annotation|@
name|Outcome
argument_list|(
name|id
operator|=
literal|"false"
argument_list|,
name|expect
operator|=
name|Expect
operator|.
name|FORBIDDEN
argument_list|,
name|desc
operator|=
literal|"Different Object for Same Key"
argument_list|)
annotation|@
name|Outcome
argument_list|(
name|id
operator|=
literal|"true"
argument_list|,
name|expect
operator|=
name|Expect
operator|.
name|ACCEPTABLE
argument_list|,
name|desc
operator|=
literal|"Same Object for Same Key"
argument_list|)
annotation|@
name|State
specifier|public
specifier|static
class|class
name|SameObjectForSameKey
block|{
name|WeakLazyStripes
argument_list|<
name|String
argument_list|,
name|Lock
argument_list|>
name|lockMap
init|=
operator|new
name|WeakLazyStripes
argument_list|<>
argument_list|(
parameter_list|(
name|key
parameter_list|)
lambda|->
operator|new
name|ReentrantLock
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|ar1
decl_stmt|;
name|Object
name|ar2
decl_stmt|;
name|Object
name|ar3
decl_stmt|;
name|Object
name|ar4
decl_stmt|;
name|Object
name|ar5
decl_stmt|;
name|Object
name|ar6
decl_stmt|;
name|Object
name|ar7
decl_stmt|;
name|Object
name|ar8
decl_stmt|;
annotation|@
name|Actor
specifier|public
name|void
name|actor1
parameter_list|()
block|{
name|ar1
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor2
parameter_list|()
block|{
name|ar2
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor3
parameter_list|()
block|{
name|ar3
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor4
parameter_list|()
block|{
name|ar4
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor5
parameter_list|()
block|{
name|ar5
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor6
parameter_list|()
block|{
name|ar6
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor7
parameter_list|()
block|{
name|ar7
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor8
parameter_list|()
block|{
name|ar8
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Arbiter
specifier|public
name|void
name|arbiter
parameter_list|(
name|Z_Result
name|r
parameter_list|)
block|{
name|r
operator|.
name|r1
operator|=
name|ar1
operator|==
name|ar2
operator|&&
name|ar2
operator|==
name|ar3
operator|&&
name|ar3
operator|==
name|ar4
operator|&&
name|ar4
operator|==
name|ar5
operator|&&
name|ar5
operator|==
name|ar6
operator|&&
name|ar6
operator|==
name|ar7
operator|&&
name|ar7
operator|==
name|ar8
expr_stmt|;
block|}
block|}
annotation|@
name|JCStressTest
annotation|@
name|Outcome
argument_list|(
name|id
operator|=
literal|"false"
argument_list|,
name|expect
operator|=
name|Expect
operator|.
name|FORBIDDEN
argument_list|,
name|desc
operator|=
literal|"Same Object for Different Keys"
argument_list|)
annotation|@
name|Outcome
argument_list|(
name|id
operator|=
literal|"true"
argument_list|,
name|expect
operator|=
name|Expect
operator|.
name|ACCEPTABLE
argument_list|,
name|desc
operator|=
literal|"Different Object for Different Keys"
argument_list|)
annotation|@
name|State
specifier|public
specifier|static
class|class
name|DifferentObjectForDifferentKeys
block|{
name|WeakLazyStripes
argument_list|<
name|String
argument_list|,
name|Lock
argument_list|>
name|lockMap
init|=
operator|new
name|WeakLazyStripes
argument_list|<>
argument_list|(
parameter_list|(
name|key
parameter_list|)
lambda|->
operator|new
name|ReentrantLock
argument_list|()
argument_list|)
decl_stmt|;
name|Object
name|ar1
decl_stmt|;
name|Object
name|ar2
decl_stmt|;
name|Object
name|ar3
decl_stmt|;
name|Object
name|ar4
decl_stmt|;
name|Object
name|ar5
decl_stmt|;
name|Object
name|ar6
decl_stmt|;
name|Object
name|ar7
decl_stmt|;
name|Object
name|ar8
decl_stmt|;
annotation|@
name|Actor
specifier|public
name|void
name|actor1
parameter_list|()
block|{
name|ar1
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key1"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor2
parameter_list|()
block|{
name|ar2
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key2"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor3
parameter_list|()
block|{
name|ar3
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key3"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor4
parameter_list|()
block|{
name|ar4
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key4"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor5
parameter_list|()
block|{
name|ar5
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key5"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor6
parameter_list|()
block|{
name|ar6
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key6"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor7
parameter_list|()
block|{
name|ar7
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key7"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Actor
specifier|public
name|void
name|actor8
parameter_list|()
block|{
name|ar8
operator|=
name|lockMap
operator|.
name|get
argument_list|(
literal|"key8"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Arbiter
specifier|public
name|void
name|arbiter
parameter_list|(
name|Z_Result
name|r
parameter_list|)
block|{
name|r
operator|.
name|r1
operator|=
name|ar1
operator|!=
name|ar2
operator|&&
name|ar2
operator|!=
name|ar3
operator|&&
name|ar3
operator|!=
name|ar4
operator|&&
name|ar4
operator|!=
name|ar5
operator|&&
name|ar5
operator|!=
name|ar6
operator|&&
name|ar6
operator|!=
name|ar7
operator|&&
name|ar7
operator|!=
name|ar8
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

