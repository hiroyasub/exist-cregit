begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|service
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|daemon
operator|.
name|Daemon
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|daemon
operator|.
name|DaemonContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|daemon
operator|.
name|DaemonInitException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Main
import|;
end_import

begin_class
specifier|public
class|class
name|ExistDbDaemon
implements|implements
name|Daemon
block|{
specifier|private
specifier|static
specifier|final
name|String
name|MODE_JETTY
init|=
literal|"jetty"
decl_stmt|;
specifier|private
name|Main
name|main
init|=
literal|null
decl_stmt|;
specifier|private
name|String
index|[]
name|args
init|=
literal|null
decl_stmt|;
specifier|private
name|void
name|init
parameter_list|(
specifier|final
name|String
name|args
index|[]
parameter_list|)
block|{
name|this
operator|.
name|main
operator|=
operator|new
name|Main
argument_list|(
literal|"jetty"
argument_list|)
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
comment|//<editor-fold desc="Jsvc Implementation">
annotation|@
name|Override
specifier|public
name|void
name|init
parameter_list|(
specifier|final
name|DaemonContext
name|daemonContext
parameter_list|)
throws|throws
name|DaemonInitException
block|{
if|if
condition|(
name|this
operator|.
name|main
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|DaemonInitException
argument_list|(
literal|"Daemon already initialised"
argument_list|)
throw|;
block|}
name|init
argument_list|(
name|daemonContext
operator|.
name|getArguments
argument_list|()
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|start
parameter_list|()
throws|throws
name|Exception
block|{
specifier|final
name|String
index|[]
name|runArgs
init|=
operator|new
name|String
index|[
literal|1
operator|+
name|args
operator|.
name|length
index|]
decl_stmt|;
name|runArgs
index|[
literal|0
index|]
operator|=
name|MODE_JETTY
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|runArgs
argument_list|,
literal|1
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|this
operator|.
name|main
operator|.
name|runEx
argument_list|(
name|runArgs
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|stop
parameter_list|()
throws|throws
name|Exception
block|{
name|this
operator|.
name|main
operator|.
name|shutdownEx
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|destroy
parameter_list|()
block|{
name|this
operator|.
name|args
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|main
operator|=
literal|null
expr_stmt|;
block|}
comment|//</editor-fold>
comment|//<editor-fold desc="Procrun Implementation">
specifier|private
specifier|static
name|ExistDbDaemon
name|instance
decl_stmt|;
specifier|static
name|void
name|start
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|instance
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already started"
argument_list|)
throw|;
block|}
name|instance
operator|=
operator|new
name|ExistDbDaemon
argument_list|()
expr_stmt|;
name|instance
operator|.
name|init
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|instance
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
specifier|static
name|void
name|stop
parameter_list|(
specifier|final
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|instance
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalStateException
argument_list|(
literal|"Instance already stopped"
argument_list|)
throw|;
block|}
name|instance
operator|.
name|stop
argument_list|()
expr_stmt|;
name|instance
operator|.
name|destroy
argument_list|()
expr_stmt|;
name|instance
operator|=
literal|null
expr_stmt|;
block|}
comment|//</editor-fold>
block|}
end_class

end_unit

