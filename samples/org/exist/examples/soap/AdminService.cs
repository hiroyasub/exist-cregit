//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3705.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.0.3705.0.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="AdminSoapBinding", Namespace="urn:exist")]
public class AdminService : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public AdminService() {
        this.Url = "http://localhost:8080/exist/services/Admin";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:exist", ResponseNamespace="urn:exist")]
    public void store([System.Xml.Serialization.SoapElementAttribute(DataType="base64Binary")] System.Byte[] in0, string in1, string in2, bool in3) {
        this.Invoke("store", new object[] {
                    in0,
                    in1,
                    in2,
                    in3});
    }
    
    /// <remarks/>
    public System.IAsyncResult Beginstore(System.Byte[] in0, string in1, string in2, bool in3, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("store", new object[] {
                    in0,
                    in1,
                    in2,
                    in3}, callback, asyncState);
    }
    
    /// <remarks/>
    public void Endstore(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:exist", ResponseNamespace="urn:exist")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public bool removeCollection(string in0) {
        object[] results = this.Invoke("removeCollection", new object[] {
                    in0});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginremoveCollection(string in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("removeCollection", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndremoveCollection(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:exist", ResponseNamespace="urn:exist")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public bool removeDocument(string in0) {
        object[] results = this.Invoke("removeDocument", new object[] {
                    in0});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginremoveDocument(string in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("removeDocument", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndremoveDocument(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:exist", ResponseNamespace="urn:exist")]
    [return: System.Xml.Serialization.SoapElementAttribute("return")]
    public bool createCollection(string in0) {
        object[] results = this.Invoke("createCollection", new object[] {
                    in0});
        return ((bool)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BegincreateCollection(string in0, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("createCollection", new object[] {
                    in0}, callback, asyncState);
    }
    
    /// <remarks/>
    public bool EndcreateCollection(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((bool)(results[0]));
    }
}
