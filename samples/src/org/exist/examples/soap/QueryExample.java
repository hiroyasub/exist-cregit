begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|examples
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|nio
operator|.
name|charset
operator|.
name|StandardCharsets
operator|.
name|UTF_8
import|;
end_import

begin_class
specifier|public
class|class
name|QueryExample
block|{
comment|/**      * Execute xquery via SOAP      *      * Execute: bin\run.bat org.exist.examples.soap.QueryExample<query file>      */
specifier|protected
specifier|static
name|String
name|readFile
parameter_list|(
name|String
name|file
parameter_list|)
throws|throws
name|IOException
block|{
name|BufferedReader
name|f
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|line
decl_stmt|;
name|StringBuffer
name|xml
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|f
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|xml
operator|.
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|xml
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|xml
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|!=
literal|1
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Usage: org.exist.examples.soap.QueryExample xquery-file"
argument_list|)
expr_stmt|;
name|System
operator|.
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|String
name|xquery
init|=
name|readFile
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
comment|// we send the data in base64 encoding to avoid
comment|// difficulties with XML special chars in the query.
name|byte
index|[]
name|queryData
init|=
name|xquery
operator|.
name|getBytes
argument_list|(
name|UTF_8
argument_list|)
decl_stmt|;
name|QueryService
name|service
init|=
operator|new
name|QueryServiceLocator
argument_list|()
decl_stmt|;
name|Query
name|query
init|=
name|service
operator|.
name|getQuery
argument_list|()
decl_stmt|;
comment|// connect to the database
name|String
name|sessionId
init|=
name|query
operator|.
name|connect
argument_list|(
literal|"guest"
argument_list|,
literal|"guest"
argument_list|)
decl_stmt|;
comment|// execute the query
name|QueryResponse
name|resp
init|=
name|query
operator|.
name|xquery
argument_list|(
name|sessionId
argument_list|,
name|queryData
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"found: "
operator|+
name|resp
operator|.
name|getHits
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|resp
operator|.
name|getHits
argument_list|()
operator|==
literal|0
condition|)
comment|// nothing found
return|return;
comment|// retrieve first 10 results, indenting is on, xinclude is off, matches in elements
comment|// are highlighted (tagged)
name|byte
index|[]
index|[]
name|hits
init|=
name|query
operator|.
name|retrieveData
argument_list|(
name|sessionId
argument_list|,
literal|1
argument_list|,
literal|10
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
literal|"elements"
argument_list|)
operator|.
name|getElements
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hits
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
operator|new
name|String
argument_list|(
name|hits
index|[
name|i
index|]
argument_list|,
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// close the connection (release session on the server)
name|query
operator|.
name|disconnect
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

