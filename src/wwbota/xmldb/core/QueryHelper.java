begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|wwbota
operator|.
name|xmldb
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/** Currently unused clas, because we use Criterium.getXPathSimple()     and generate the rest in highlight.xslt.xsp */
end_comment

begin_class
specifier|public
class|class
name|QueryHelper
block|{
specifier|static
specifier|public
name|String
name|makeHighlightXSLT
parameter_list|(
specifier|final
name|Query
name|q
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
name|it
init|=
name|q
operator|.
name|getCriteriums
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Criterium
name|crit
init|=
operator|(
name|Criterium
operator|)
operator|(
name|it
operator|.
name|next
argument_list|()
operator|)
decl_stmt|;
comment|//Organ organ = crit.getOrgan();
comment|//Property prop = crit.getProperty();
name|buf
operator|.
name|append
argument_list|(
literal|"<xsl:template match=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|crit
operator|.
name|getXPathSimple
argument_list|()
argument_list|)
expr_stmt|;
comment|/*        if ( ! organ.getName().equals("") ) {           buf.append( organ.getName() + "/" );        } else { }        buf.append( "text()" );        if ( ! prop.getValue().equals("") ) {           buf.append(                "[contains(.,'" +                prop.getValue() + "')]" );        } */
name|buf
operator|.
name|append
argument_list|(
literal|"\">\n"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<xsl:apply-templates select='.' mode='highlight' />\n</xsl:template>\n\n"
argument_list|)
expr_stmt|;
comment|/*<xsl:template match="flower/text()[contains(.,'yellow')]"><xsl:apply-templates select='.' mode="highlight" /></xsl:template> */
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|static
name|boolean
name|test
parameter_list|()
block|{
name|Query
name|q
init|=
operator|new
name|Query
argument_list|()
decl_stmt|;
name|boolean
name|res
init|=
name|Query
operator|.
name|test
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|QueryHelper
operator|.
name|makeHighlightXSLT
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|boolean
name|res
init|=
name|QueryHelper
operator|.
name|test
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"QueryHelper.test(): "
operator|+
name|res
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

