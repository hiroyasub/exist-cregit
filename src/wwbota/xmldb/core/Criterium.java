begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/** Java class "Criterium.java" generated from Poseidon for UML.  *  Poseidon for UML is developed by<A HREF="http://www.gentleware.com">Gentleware</A>.  *  Generated with<A HREF="http://jakarta.apache.org/velocity/">velocity</A> template engine.  */
end_comment

begin_package
package|package
name|wwbota
operator|.
name|xmldb
operator|.
name|core
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *<p>  *   *</p>  */
end_comment

begin_class
specifier|public
class|class
name|Criterium
block|{
comment|/** 	 * Constructor Criterium. 	 * @param org 	 * @param contains 	 */
specifier|public
name|Criterium
parameter_list|(
name|Organ
name|org
parameter_list|,
name|String
name|contains
parameter_list|)
block|{
name|this
operator|.
name|setOrgan
argument_list|(
name|org
argument_list|)
expr_stmt|;
name|this
operator|.
name|contains
operator|=
name|contains
expr_stmt|;
name|setProperty
argument_list|(
operator|new
name|Property
argument_list|(
name|contains
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|///////////////////////////////////////
comment|// attributes
comment|/** 	 *<p> 	 * A String or word required for the search. 	 *</p> 	 */
specifier|private
name|String
name|contains
decl_stmt|;
comment|///////////////////////////////////////
comment|// associations
comment|/** 	 *<p> 	 *  	 *</p> 	 */
specifier|public
name|Query
name|query
decl_stmt|;
comment|/** 	 *<p> 	 *  	 *</p> 	 */
specifier|public
name|Organ
name|organ
decl_stmt|;
comment|/** 	 *<p> 	 *  	 *</p> 	 */
specifier|public
name|Property
name|property
decl_stmt|;
comment|/** 	 *<p> 	 *  	 *</p> 	 */
specifier|public
name|Species
name|results
decl_stmt|;
specifier|private
name|String
name|rubricXPath
init|=
literal|""
decl_stmt|;
comment|// "tr[@*[local-name()='source']] / td / *";
specifier|private
name|boolean
name|usingWildcards
init|=
literal|true
decl_stmt|;
comment|///////////////////////////////////////
comment|// access methods for associations
specifier|public
name|Query
name|getQuery
parameter_list|()
block|{
return|return
name|query
return|;
block|}
specifier|public
name|void
name|setQuery
parameter_list|(
name|Query
name|query
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|query
operator|!=
name|query
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|query
operator|!=
literal|null
condition|)
name|this
operator|.
name|query
operator|.
name|removeCriterium
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|query
expr_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
name|query
operator|.
name|addCriterium
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Organ
name|getOrgan
parameter_list|()
block|{
return|return
name|organ
return|;
block|}
specifier|public
name|void
name|setOrgan
parameter_list|(
name|Organ
name|organ
parameter_list|)
block|{
name|this
operator|.
name|organ
operator|=
name|organ
expr_stmt|;
block|}
specifier|public
name|Property
name|getProperty
parameter_list|()
block|{
return|return
name|property
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|Property
name|property
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|property
operator|!=
name|property
condition|)
block|{
if|if
condition|(
name|this
operator|.
name|property
operator|!=
literal|null
condition|)
name|this
operator|.
name|property
operator|.
name|removeCriterium
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|this
operator|.
name|property
operator|=
name|property
expr_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
name|property
operator|.
name|addCriterium
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Species
name|getResults
parameter_list|()
block|{
return|return
name|results
return|;
block|}
specifier|public
name|void
name|setResults
parameter_list|(
name|Species
name|species
parameter_list|)
block|{
name|this
operator|.
name|results
operator|=
name|species
expr_stmt|;
block|}
comment|/** 	 * @return an XPath constrain expression, suitable to append to a composite XPath query, e.g. 		  [.//stem[contains(.,'compact')]] 	 */
specifier|public
name|String
name|getXPath
parameter_list|()
block|{
name|String
name|returnValue
init|=
literal|"[.//"
decl_stmt|;
name|returnValue
operator|+=
name|getXPathSimple
argument_list|()
expr_stmt|;
name|returnValue
operator|+=
literal|"]"
expr_stmt|;
return|return
name|returnValue
return|;
block|}
comment|/** 	 * @return an relative XPath expression, suitable to be a match for an XSLT template, e.g. 		  stem[contains(.,'compact')] 	 * Used in XML:DB search. 	 */
specifier|public
name|String
name|getXPathSimple
parameter_list|()
block|{
name|String
name|returnValue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|isGlobal
argument_list|()
condition|)
block|{
name|returnValue
operator|+=
literal|"*"
expr_stmt|;
block|}
else|else
block|{
name|returnValue
operator|+=
literal|""
operator|+
name|getOrgan
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
block|{
comment|// TODO: contains should be "XMLencoded" in returnValue
if|if
condition|(
name|usingWildcards
condition|)
block|{
name|returnValue
operator|+=
literal|"[.&='*"
operator|+
name|contains
operator|+
literal|"*']"
expr_stmt|;
block|}
else|else
block|{
name|returnValue
operator|+=
literal|"[.&='"
operator|+
name|contains
operator|+
literal|"']"
expr_stmt|;
comment|// eXist query too slow: returnValue += "[contains(.,'" + contains + "')]";
block|}
block|}
return|return
name|returnValue
return|;
block|}
comment|/** 	 * @return an XPath global match expression, suitable to be a match for an XSLT template, e.g. 		stem[contains(.,'compact')] 		or : 		flora/species/*[contains(.,'compact')] 	 * Used in highlight of XML:DB search result, with XSLT stylesheets. 	 */
specifier|public
name|String
name|getXPathGlobalMatch
parameter_list|()
block|{
name|String
name|returnValue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|isGlobal
argument_list|()
condition|)
block|{
name|returnValue
operator|+=
name|getRubricXPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|returnValue
operator|+=
literal|""
operator|+
name|getOrgan
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contains
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
condition|)
comment|// TODO: contains should be "XMLencoded" in returnValue
name|returnValue
operator|+=
literal|"[contains(.,'"
operator|+
name|contains
operator|+
literal|"')]"
expr_stmt|;
return|return
name|returnValue
return|;
block|}
comment|/** This property is true<==> the Criterium applies to any rubric or Organ. 	*/
specifier|public
name|boolean
name|isGlobal
parameter_list|()
block|{
name|boolean
name|returnValue
init|=
literal|false
decl_stmt|;
name|String
name|organName
init|=
name|getOrgan
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|organName
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|organName
operator|.
name|equals
argument_list|(
literal|"*"
argument_list|)
condition|)
name|returnValue
operator|=
literal|true
expr_stmt|;
return|return
name|returnValue
return|;
block|}
comment|/** This property is the relative XPath match for a rubric or Organ, e.g. 		species 		or : 		flora/* 	 * Used in highlight of XML:DB search result. 	*/
specifier|public
name|void
name|setRubricXPath
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|rubricXPath
operator|=
name|s
expr_stmt|;
block|}
specifier|public
name|String
name|getRubricXPath
parameter_list|()
block|{
return|return
name|rubricXPath
return|;
block|}
comment|/** This property tells wether eXist XML:DB search should use wildcards for search terms. 	*/
specifier|public
name|void
name|isUsingWildcards
parameter_list|(
name|boolean
name|b
parameter_list|)
block|{
name|this
operator|.
name|usingWildcards
operator|=
name|b
expr_stmt|;
block|}
specifier|public
name|boolean
name|getUsingWildcards
parameter_list|()
block|{
return|return
name|usingWildcards
return|;
block|}
comment|/** A human-readable account of the Criterium. 	*/
specifier|public
name|String
name|getExplanation
parameter_list|()
block|{
name|String
name|returnValue
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|isGlobal
argument_list|()
condition|)
block|{
name|returnValue
operator|+=
literal|"\""
operator|+
name|contains
operator|+
literal|"\""
expr_stmt|;
block|}
else|else
block|{
name|returnValue
operator|+=
literal|"\""
operator|+
name|contains
operator|+
literal|"\""
operator|+
literal|" in "
operator|+
name|getOrgan
argument_list|()
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
return|return
name|returnValue
return|;
block|}
block|}
end_class

begin_comment
comment|// end Criterium
end_comment

end_unit

