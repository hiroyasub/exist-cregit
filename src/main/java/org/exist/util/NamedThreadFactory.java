begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|annotation
operator|.
name|Nullable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Objects
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|atomic
operator|.
name|AtomicLong
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ThreadUtils
operator|.
name|nameGlobalThread
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ThreadUtils
operator|.
name|nameInstanceThread
import|;
end_import

begin_comment
comment|/**  * A simple thread factory that provides a standard naming convention  * for threads.  *  * @author Adam Retter<adam@evolvedbinary.com>  */
end_comment

begin_class
specifier|public
class|class
name|NamedThreadFactory
implements|implements
name|ThreadFactory
block|{
specifier|private
specifier|final
name|ThreadGroup
name|threadGroup
decl_stmt|;
annotation|@
name|Nullable
specifier|private
specifier|final
name|String
name|instanceId
decl_stmt|;
specifier|private
specifier|final
name|String
name|nameBase
decl_stmt|;
specifier|private
specifier|final
name|AtomicLong
name|threadId
init|=
operator|new
name|AtomicLong
argument_list|()
decl_stmt|;
comment|/**      * A factory who will produce threads named like either:      *     "instance.${instanceId}.${nameBase}-${id}".      *      * @param instanceId the id of the database instance      * @param nameBase The name base for the thread name      *      * @deprecated use {@link #NamedThreadFactory(Database, String)}.      */
annotation|@
name|Deprecated
specifier|public
name|NamedThreadFactory
parameter_list|(
specifier|final
name|String
name|instanceId
parameter_list|,
specifier|final
name|String
name|nameBase
parameter_list|)
block|{
name|this
argument_list|(
literal|null
argument_list|,
name|instanceId
argument_list|,
name|nameBase
argument_list|)
expr_stmt|;
block|}
comment|/**      * A factory who will produce threads named like either:      *     "instance.${instanceId}.${nameBase}-${id}".      *      * @param database the database instance which the threads are created for      * @param nameBase The name base for the thread name      *      * @deprecated use {@link #NamedThreadFactory(Database, String)}.      */
specifier|public
name|NamedThreadFactory
parameter_list|(
specifier|final
name|Database
name|database
parameter_list|,
specifier|final
name|String
name|nameBase
parameter_list|)
block|{
name|this
argument_list|(
name|database
operator|.
name|getThreadGroup
argument_list|()
argument_list|,
name|database
operator|.
name|getId
argument_list|()
argument_list|,
name|nameBase
argument_list|)
expr_stmt|;
block|}
comment|/**      * A factory who will produce threads named like either:      *      *    1. "instance.${instanceId}.${nameBase}-${id}".      *    2. "global.${nameBase}-${id}".      *      * @param threadGroup The thread group for the created threads, or null      *     to use the same group as the calling thread.      * @param instanceId the id of the database instance, or null if the      *     thread is a global thread i.e. shared between instances.      * @param nameBase The name base for the thread name.      */
specifier|public
name|NamedThreadFactory
parameter_list|(
annotation|@
name|Nullable
specifier|final
name|ThreadGroup
name|threadGroup
parameter_list|,
annotation|@
name|Nullable
specifier|final
name|String
name|instanceId
parameter_list|,
specifier|final
name|String
name|nameBase
parameter_list|)
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nameBase
argument_list|)
expr_stmt|;
name|this
operator|.
name|threadGroup
operator|=
name|threadGroup
expr_stmt|;
name|this
operator|.
name|instanceId
operator|=
name|instanceId
expr_stmt|;
name|this
operator|.
name|nameBase
operator|=
name|nameBase
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
specifier|final
name|Runnable
name|runnable
parameter_list|)
block|{
specifier|final
name|String
name|localName
init|=
name|nameBase
operator|+
literal|"-"
operator|+
name|threadId
operator|.
name|getAndIncrement
argument_list|()
decl_stmt|;
if|if
condition|(
name|instanceId
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|Thread
argument_list|(
name|threadGroup
argument_list|,
name|runnable
argument_list|,
name|nameGlobalThread
argument_list|(
name|localName
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|new
name|Thread
argument_list|(
name|threadGroup
argument_list|,
name|runnable
argument_list|,
name|nameInstanceThread
argument_list|(
name|instanceId
argument_list|,
name|localName
argument_list|)
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

