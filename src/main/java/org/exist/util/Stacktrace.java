begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2016 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_comment
comment|/**  * Utility methods for dealing with stack traces  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|Stacktrace
block|{
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_STACK_TOP
init|=
literal|10
decl_stmt|;
comment|/**      * Gets the top N frames from the stack trace and      * returns them as a string      *      * Excludes the callee and self stack frames      *      * @param stack The stack      * @param top The number of frames to examine      *      * @return String representation of the top frames of the stack      */
specifier|public
specifier|static
name|String
name|top
parameter_list|(
specifier|final
name|StackTraceElement
index|[]
name|stack
parameter_list|,
specifier|final
name|int
name|top
parameter_list|)
block|{
specifier|final
name|int
name|from
init|=
literal|2
decl_stmt|;
specifier|final
name|int
name|until
init|=
name|stack
operator|.
name|length
operator|-
name|from
operator|<
name|top
condition|?
name|stack
operator|.
name|length
operator|-
name|from
else|:
name|top
operator|+
name|from
decl_stmt|;
return|return
name|asString
argument_list|(
name|stack
argument_list|,
name|from
argument_list|,
name|until
argument_list|)
return|;
block|}
comment|/**      * Formats the stack trace as a String      *      * @return A formatted string showing the stack trace      */
specifier|public
specifier|static
name|String
name|asString
parameter_list|(
specifier|final
name|StackTraceElement
index|[]
name|stack
parameter_list|)
block|{
return|return
name|asString
argument_list|(
name|stack
argument_list|,
literal|0
argument_list|,
name|stack
operator|.
name|length
argument_list|)
return|;
block|}
comment|/**      * Formats the stack trace as a String      *      * @param from The most recent frame to start from      * @param until The least recent frame to format until      * @return A formatted string showing the stack trace      */
specifier|public
specifier|static
name|String
name|asString
parameter_list|(
specifier|final
name|StackTraceElement
index|[]
name|stack
parameter_list|,
specifier|final
name|int
name|from
parameter_list|,
specifier|final
name|int
name|until
parameter_list|)
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|from
init|;
name|i
operator|<
name|until
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|"<- "
argument_list|)
operator|.
name|append
argument_list|(
name|stack
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Get a subset of the StackTraceElements      *      * @param stack The stack trace      * @param from Starting from HEAD      * @param max The maximum number of elements to take      *      * @return The stack trace elements between from and from+max (or less)      */
specifier|public
specifier|static
name|StackTraceElement
index|[]
name|substack
parameter_list|(
specifier|final
name|StackTraceElement
index|[]
name|stack
parameter_list|,
specifier|final
name|int
name|from
parameter_list|,
specifier|final
name|int
name|max
parameter_list|)
block|{
specifier|final
name|int
name|to
init|=
name|stack
operator|.
name|length
operator|-
name|from
operator|<
name|max
condition|?
name|stack
operator|.
name|length
operator|-
name|from
else|:
name|from
operator|+
name|max
decl_stmt|;
return|return
name|Arrays
operator|.
name|copyOfRange
argument_list|(
name|stack
argument_list|,
name|from
argument_list|,
name|to
argument_list|)
return|;
block|}
block|}
end_class

end_unit

