begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_comment
comment|/**  * This class extends InputSource to be able to deal with  * GZIP compressed files. Its main feature is that each time  * {@link #getByteStream()} is called, a new uncompressed  * stream is created from the compressed GZIP gzipFile.  * This is very useful for eXist, which works in two steps:  * validation and insertion.  *   * @author JosÃ© MarÃ­a FernÃ¡ndez (jmfg@users.sourceforge.net)  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|GZIPInputSource
extends|extends
name|EXistInputSource
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|GZIPInputSource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|Path
name|gzipFile
decl_stmt|;
specifier|private
name|Optional
argument_list|<
name|InputStream
argument_list|>
name|inputStream
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
comment|/** 	 * Constructor which with gzip-gzipFile 	 * @param gzipFile The gzip gzipFile. 	 */
specifier|public
name|GZIPInputSource
parameter_list|(
specifier|final
name|Path
name|gzipFile
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|gzipFile
operator|=
name|gzipFile
expr_stmt|;
block|}
comment|/** 	 * This method was re-implemented to open a 	 * new GZIPInputStream each time it is called. 	 * @return 	 * If the gzipFile was set, and it could be opened, and it was 	 * a correct gzip gzipFile, a GZIPInputStream object. 	 * null, otherwise. 	 * 	 * @throws IllegalStateException If the InputSource was previously closed 	 */
annotation|@
name|Override
specifier|public
name|InputStream
name|getByteStream
parameter_list|()
block|{
name|assertOpen
argument_list|()
expr_stmt|;
try|try
block|{
specifier|final
name|InputStream
name|is
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|gzipFile
argument_list|)
argument_list|)
decl_stmt|;
name|this
operator|.
name|inputStream
operator|=
name|Optional
operator|.
name|of
argument_list|(
operator|new
name|GZIPInputStream
argument_list|(
name|is
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|inputStream
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
return|;
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided 	 * 	 * @throws IllegalStateException If the InputSource was previously closed 	 */
annotation|@
name|Override
specifier|public
name|void
name|setByteStream
parameter_list|(
specifier|final
name|InputStream
name|is
parameter_list|)
block|{
name|assertOpen
argument_list|()
expr_stmt|;
comment|// Nothing, so collateral effects are avoided!
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided 	 * 	 * @throws IllegalStateException If the InputSource was previously closed 	 */
annotation|@
name|Override
specifier|public
name|void
name|setCharacterStream
parameter_list|(
specifier|final
name|Reader
name|r
parameter_list|)
block|{
name|assertOpen
argument_list|()
expr_stmt|;
comment|// Nothing, so collateral effects are avoided!
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided 	 * 	 * @throws IllegalStateException If the InputSource was previously closed 	 */
annotation|@
name|Override
specifier|public
name|void
name|setSystemId
parameter_list|(
specifier|final
name|String
name|systemId
parameter_list|)
block|{
name|assertOpen
argument_list|()
expr_stmt|;
comment|// Nothing, so collateral effects are avoided!
block|}
comment|/** 	 * @see EXistInputSource#getByteStreamLength() 	 * 	 * @throws IllegalStateException If the InputSource was previously closed 	 */
annotation|@
name|Override
specifier|public
name|long
name|getByteStreamLength
parameter_list|()
block|{
name|assertOpen
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|Files
operator|.
name|size
argument_list|(
name|gzipFile
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
comment|/** 	 * @see EXistInputSource#getSymbolicPath() 	 * 	 * @throws IllegalStateException If the InputSource was previously closed 	 */
annotation|@
name|Override
specifier|public
name|String
name|getSymbolicPath
parameter_list|()
block|{
name|assertOpen
argument_list|()
expr_stmt|;
return|return
name|gzipFile
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
try|try
block|{
name|close
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|super
operator|.
name|finalize
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isClosed
argument_list|()
condition|)
block|{
try|try
block|{
if|if
condition|(
name|inputStream
operator|.
name|isPresent
argument_list|()
condition|)
block|{
try|try
block|{
name|inputStream
operator|.
name|get
argument_list|()
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|this
operator|.
name|inputStream
operator|=
name|Optional
operator|.
name|empty
argument_list|()
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
name|super
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

