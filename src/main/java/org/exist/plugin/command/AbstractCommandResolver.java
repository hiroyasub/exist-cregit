begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|plugin
operator|.
name|command
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractCommandResolver
implements|implements
name|CommandResolver
block|{
specifier|protected
name|Map
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
name|commands
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Command
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|void
name|plug
parameter_list|(
name|Class
argument_list|<
name|?
extends|extends
name|Command
argument_list|>
name|commandClass
parameter_list|)
block|{
name|Command
name|cmd
decl_stmt|;
try|try
block|{
name|cmd
operator|=
name|commandClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return;
block|}
specifier|final
name|String
index|[]
name|names
init|=
name|cmd
operator|.
name|getNames
argument_list|()
decl_stmt|;
if|if
condition|(
name|names
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|//TODO: report for debug
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|names
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
comment|//TODO: check for conflicts
name|commands
operator|.
name|put
argument_list|(
name|names
index|[
name|i
index|]
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Command
name|getCommand
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|CommandNotFoundException
block|{
specifier|final
name|Command
name|cmd
init|=
name|commands
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmd
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|CommandNotFoundException
argument_list|(
literal|"Command '"
operator|+
name|name
operator|+
literal|"' not found."
argument_list|)
throw|;
block|}
return|return
name|cmd
return|;
block|}
specifier|public
name|void
name|execute
parameter_list|(
name|XmldbURI
name|collection
parameter_list|,
name|String
index|[]
name|params
parameter_list|)
throws|throws
name|CommandException
block|{
specifier|final
name|Command
name|cmd
init|=
name|getCommand
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|commandData
init|=
operator|new
name|String
index|[
name|params
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|params
argument_list|,
literal|1
argument_list|,
name|commandData
argument_list|,
literal|0
argument_list|,
name|params
operator|.
name|length
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|process
argument_list|(
name|collection
argument_list|,
name|commandData
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

