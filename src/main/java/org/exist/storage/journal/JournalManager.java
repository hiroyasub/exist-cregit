begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2016 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|recovery
operator|.
name|RecoveryManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ReadOnlyException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|CopyOnWriteArrayList
import|;
end_import

begin_comment
comment|/**  * Journal Manager just adds some light-weight  * wrapping around {@link Journal}  */
end_comment

begin_class
specifier|public
class|class
name|JournalManager
implements|implements
name|BrokerPoolService
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|JournalManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Path
name|journalDir
decl_stmt|;
specifier|private
name|boolean
name|groupCommits
decl_stmt|;
specifier|private
name|Journal
name|journal
decl_stmt|;
specifier|private
name|boolean
name|journallingDisabled
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|private
specifier|final
name|List
argument_list|<
name|JournalListener
argument_list|>
name|journalListeners
init|=
operator|new
name|CopyOnWriteArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
specifier|final
name|Configuration
name|configuration
parameter_list|)
block|{
name|this
operator|.
name|journalDir
operator|=
operator|(
name|Path
operator|)
name|Optional
operator|.
name|ofNullable
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|configuration
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|groupCommits
operator|=
name|configuration
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_RECOVERY_GROUP_COMMIT
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"GroupCommits = "
operator|+
name|groupCommits
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
if|if
condition|(
operator|!
name|journallingDisabled
condition|)
block|{
try|try
block|{
name|this
operator|.
name|journal
operator|=
operator|new
name|Journal
argument_list|(
name|pool
argument_list|,
name|journalDir
argument_list|)
expr_stmt|;
name|this
operator|.
name|journal
operator|.
name|initialize
argument_list|()
expr_stmt|;
name|this
operator|.
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
decl||
name|ReadOnlyException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BrokerPoolServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|disableJournalling
parameter_list|()
block|{
name|this
operator|.
name|journallingDisabled
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * Write a single entry to the journal      *      * @see Journal#writeToLog(Loggable)      *      * @param loggable The entry to write in the journal      */
specifier|public
specifier|synchronized
name|void
name|journal
parameter_list|(
specifier|final
name|Loggable
name|loggable
parameter_list|)
throws|throws
name|JournalException
block|{
if|if
condition|(
operator|!
name|journallingDisabled
condition|)
block|{
name|journal
operator|.
name|writeToLog
argument_list|(
name|loggable
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Write a group of entrys to the journal      *      * @see Journal#writeToLog(Loggable)      * @see Journal#flushToLog(boolean)      *      * @param loggable The entry to write in the journalGroup      */
specifier|public
specifier|synchronized
name|void
name|journalGroup
parameter_list|(
specifier|final
name|Loggable
name|loggable
parameter_list|)
throws|throws
name|JournalException
block|{
if|if
condition|(
operator|!
name|journallingDisabled
condition|)
block|{
name|journal
operator|.
name|writeToLog
argument_list|(
name|loggable
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|groupCommits
condition|)
block|{
name|journal
operator|.
name|flushToLog
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * @see Journal#checkpoint(long, boolean)      *      * Create a new checkpoint. A checkpoint fixes the current database state. All dirty pages      * are written to disk and the journal file is cleaned.      *      * This method is called from      * {@link org.exist.storage.BrokerPool} within pre-defined periods. It      * should not be called from somewhere else. The database needs to      * be in a stable state (all transactions completed, no operations running).      *      * @param transactionId The id of the transaction for the checkpoint      * @param switchFiles Whether a new journal file should be started      *      * @throws JournalException      */
specifier|public
specifier|synchronized
name|void
name|checkpoint
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|boolean
name|switchFiles
parameter_list|)
throws|throws
name|JournalException
block|{
if|if
condition|(
operator|!
name|journallingDisabled
condition|)
block|{
name|journal
operator|.
name|checkpoint
argument_list|(
name|transactionId
argument_list|,
name|switchFiles
argument_list|)
expr_stmt|;
comment|// notify each listener, de-registering those who want no further events
name|journalListeners
operator|.
name|forEach
argument_list|(
name|listener
lambda|->
block|{
if|if
condition|(
operator|!
name|listener
operator|.
name|afterCheckpoint
argument_list|(
name|transactionId
argument_list|)
condition|)
block|{
name|journalListeners
operator|.
name|remove
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see Journal#flushToLog(boolean, boolean)      */
specifier|public
specifier|synchronized
name|void
name|flush
parameter_list|(
specifier|final
name|boolean
name|fsync
parameter_list|,
specifier|final
name|boolean
name|forceSync
parameter_list|)
block|{
name|journal
operator|.
name|flushToLog
argument_list|(
name|fsync
argument_list|,
name|forceSync
argument_list|)
expr_stmt|;
block|}
comment|/**      * Shut down the journal. This will write a checkpoint record      * to the log, so recovery manager knows the file has been      * closed in a clean way.      *      * @param transactionId The id of the transaction for the shutdown      * @param checkpoint Whether to write a checkpoint before shutdown      */
specifier|public
specifier|synchronized
name|void
name|shutdown
parameter_list|(
specifier|final
name|long
name|transactionId
parameter_list|,
specifier|final
name|boolean
name|checkpoint
parameter_list|)
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|journal
operator|.
name|shutdown
argument_list|(
name|transactionId
argument_list|,
name|checkpoint
argument_list|)
expr_stmt|;
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|/**      * @see Journal#lastWrittenLsn()      */
specifier|public
name|Lsn
name|lastWrittenLsn
parameter_list|()
block|{
return|return
name|journal
operator|.
name|lastWrittenLsn
argument_list|()
return|;
block|}
specifier|public
name|RecoveryManager
operator|.
name|JournalRecoveryAccessor
name|getRecoveryAccessor
parameter_list|(
specifier|final
name|RecoveryManager
name|recoveryManager
parameter_list|)
block|{
return|return
name|recoveryManager
operator|.
expr|new
name|JournalRecoveryAccessor
argument_list|(
name|journal
operator|::
name|setInRecovery
argument_list|,
name|journal
operator|::
name|getFiles
argument_list|,
name|journal
operator|::
name|getFile
argument_list|,
name|journal
operator|::
name|setCurrentFileNum
argument_list|,
parameter_list|()
lambda|->
block|{
name|journal
operator|.
name|switchFiles
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|,
parameter_list|()
lambda|->
block|{
name|journal
operator|.
name|clearBackupFiles
argument_list|()
expr_stmt|;
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
comment|/**      * Add a callback which can listen for Journal events.      *      * @param listener the journal listener      */
specifier|public
name|void
name|listen
parameter_list|(
specifier|final
name|JournalListener
name|listener
parameter_list|)
block|{
name|this
operator|.
name|journalListeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
comment|/**      * Callback for Journal events      */
specifier|public
interface|interface
name|JournalListener
block|{
comment|/**          * Called after the journal has written a checkpoint          *          * @param txnId The id of the transaction written in the checkpoint          *          * @return true if the listener should continue to receive events, false          *    if the listener should be de-registered and receive no further events.          */
name|boolean
name|afterCheckpoint
parameter_list|(
specifier|final
name|long
name|txnId
parameter_list|)
function_decl|;
block|}
block|}
end_class

end_unit

