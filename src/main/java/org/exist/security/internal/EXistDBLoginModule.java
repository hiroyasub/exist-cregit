begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010-2011 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|Callback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|CallbackHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|NameCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|PasswordCallback
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|callback
operator|.
name|UnsupportedCallbackException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|FailedLoginException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|login
operator|.
name|LoginException
import|;
end_import

begin_comment
comment|//import org.apache.logging.log4j.LogManager;
end_comment

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *   */
end_comment

begin_class
specifier|public
class|class
name|EXistDBLoginModule
implements|implements
name|javax
operator|.
name|security
operator|.
name|auth
operator|.
name|spi
operator|.
name|LoginModule
block|{
comment|//	private final static Logger LOG = LogManager.getLogger(EXistLoginModule.class);
comment|// initial state
specifier|private
name|Subject
name|subject
decl_stmt|;
specifier|private
name|CallbackHandler
name|callbackHandler
decl_stmt|;
comment|//	private Map<String, ?> sharedState;
comment|//	private Map<String, ?> options;
comment|// configurable option
specifier|private
name|boolean
name|debug
init|=
literal|false
decl_stmt|;
comment|// the authentication status
specifier|private
name|boolean
name|succeeded
init|=
literal|false
decl_stmt|;
specifier|private
name|boolean
name|commitSucceeded
init|=
literal|false
decl_stmt|;
specifier|private
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
name|userPrincipal
init|=
literal|null
decl_stmt|;
comment|/** 	 * Initialize this<code>LoginModule</code>. 	 *  	 *<p> 	 *  	 * @param subject 	 *            the<code>Subject</code> to be authenticated. 	 *<p> 	 *  	 * @param callbackHandler 	 *            a<code>CallbackHandler</code> for communicating with the end 	 *            user (prompting for user names and passwords, for example). 	 *<p> 	 *  	 * @param sharedState 	 *            shared<code>LoginModule</code> state. 	 *<p> 	 *  	 * @param options 	 *            options specified in the login<code>Configuration</code> for 	 *            this particular<code>LoginModule</code>. 	 */
specifier|public
name|void
name|initialize
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|CallbackHandler
name|callbackHandler
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|sharedState
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|?
argument_list|>
name|options
parameter_list|)
block|{
name|this
operator|.
name|subject
operator|=
name|subject
expr_stmt|;
name|this
operator|.
name|callbackHandler
operator|=
name|callbackHandler
expr_stmt|;
comment|//		this.sharedState = sharedState;
comment|//		this.options = options;
comment|// initialize any configured options
name|debug
operator|=
literal|"true"
operator|.
name|equalsIgnoreCase
argument_list|(
operator|(
name|String
operator|)
name|options
operator|.
name|get
argument_list|(
literal|"debug"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Authenticate the user by prompting for a user name and password. 	 *  	 *<p> 	 *  	 * @return true in all cases since this<code>LoginModule</code> should not 	 *         be ignored. 	 *  	 * @exception FailedLoginException 	 *                if the authentication fails. 	 *<p> 	 *  	 * @exception LoginException 	 *                if this<code>LoginModule</code> is unable to perform the 	 *                authentication. 	 */
specifier|public
name|boolean
name|login
parameter_list|()
throws|throws
name|LoginException
block|{
comment|// prompt for a user name and password
if|if
condition|(
name|callbackHandler
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Error: no CallbackHandler available "
operator|+
literal|"to garner authentication information from the user"
argument_list|)
throw|;
block|}
specifier|final
name|Callback
index|[]
name|callbacks
init|=
operator|new
name|Callback
index|[
literal|2
index|]
decl_stmt|;
name|callbacks
index|[
literal|0
index|]
operator|=
operator|new
name|NameCallback
argument_list|(
literal|"user name: "
argument_list|)
expr_stmt|;
name|callbacks
index|[
literal|1
index|]
operator|=
operator|new
name|PasswordCallback
argument_list|(
literal|"password: "
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// username and password
name|String
name|username
decl_stmt|;
name|char
index|[]
name|password
decl_stmt|;
try|try
block|{
name|callbackHandler
operator|.
name|handle
argument_list|(
name|callbacks
argument_list|)
expr_stmt|;
name|username
operator|=
operator|(
operator|(
name|NameCallback
operator|)
name|callbacks
index|[
literal|0
index|]
operator|)
operator|.
name|getName
argument_list|()
expr_stmt|;
name|char
index|[]
name|tmpPassword
init|=
operator|(
operator|(
name|PasswordCallback
operator|)
name|callbacks
index|[
literal|1
index|]
operator|)
operator|.
name|getPassword
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmpPassword
operator|==
literal|null
condition|)
block|{
comment|// treat a NULL password as an empty password
name|tmpPassword
operator|=
operator|new
name|char
index|[
literal|0
index|]
expr_stmt|;
block|}
name|password
operator|=
operator|new
name|char
index|[
name|tmpPassword
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|tmpPassword
argument_list|,
literal|0
argument_list|,
name|password
argument_list|,
literal|0
argument_list|,
name|tmpPassword
operator|.
name|length
argument_list|)
expr_stmt|;
operator|(
operator|(
name|PasswordCallback
operator|)
name|callbacks
index|[
literal|1
index|]
operator|)
operator|.
name|clearPassword
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|java
operator|.
name|io
operator|.
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
name|ioe
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnsupportedCallbackException
name|uce
parameter_list|)
block|{
throw|throw
operator|new
name|LoginException
argument_list|(
literal|"Error: "
operator|+
name|uce
operator|.
name|getCallback
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" not available to garner authentication information"
operator|+
literal|" from the user"
argument_list|)
throw|;
block|}
comment|// print debugging information
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t[eXistLoginModule] user entered user name: "
operator|+
name|username
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|userPrincipal
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|username
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthenticationException
name|e
parameter_list|)
block|{
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t[eXistLoginModule] authentication failed"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|FailedLoginException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FailedLoginException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|succeeded
operator|=
name|userPrincipal
operator|.
name|isAuthenticated
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|/** 	 *<p> 	 * This method is called if the LoginContext's overall authentication 	 * succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL 	 * LoginModules succeeded). 	 *  	 *<p> 	 * If this LoginModule's own authentication attempt succeeded (checked by 	 * retrieving the private state saved by the<code>login</code> method), 	 * then this method associates a<code>SamplePrincipal</code> with the 	 *<code>Subject</code> located in the<code>LoginModule</code>. If this 	 * LoginModule's own authentication attempted failed, then this method 	 * removes any state that was originally saved. 	 *  	 *<p> 	 *  	 * @exception LoginException 	 *                if the commit fails. 	 *  	 * @return true if this LoginModule's own login and commit attempts 	 *         succeeded, or false otherwise. 	 */
specifier|public
name|boolean
name|commit
parameter_list|()
throws|throws
name|LoginException
block|{
if|if
condition|(
operator|!
name|succeeded
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
comment|// add a Principal (authenticated identity)
comment|// to the Subject
if|if
condition|(
operator|!
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|contains
argument_list|(
name|userPrincipal
argument_list|)
condition|)
block|{
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|add
argument_list|(
name|userPrincipal
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|debug
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"\t\t[eXistLoginModule] added User to Subject"
argument_list|)
expr_stmt|;
block|}
name|commitSucceeded
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
comment|/** 	 *<p> 	 * This method is called if the LoginContext's overall authentication 	 * failed. (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL 	 * LoginModules did not succeed). 	 *  	 *<p> 	 * If this LoginModule's own authentication attempt succeeded (checked by 	 * retrieving the private state saved by the<code>login</code> and 	 *<code>commit</code> methods), then this method cleans up any state that 	 * was originally saved. 	 *  	 *<p> 	 *  	 * @exception LoginException 	 *                if the abort fails. 	 *  	 * @return false if this LoginModule's own login and/or commit attempts 	 *         failed, and true otherwise. 	 */
specifier|public
name|boolean
name|abort
parameter_list|()
throws|throws
name|LoginException
block|{
if|if
condition|(
name|succeeded
operator|==
literal|false
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|succeeded
operator|&&
operator|!
name|commitSucceeded
condition|)
block|{
comment|// login succeeded but overall authentication failed
name|succeeded
operator|=
literal|false
expr_stmt|;
name|userPrincipal
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
comment|// overall authentication succeeded and commit succeeded,
comment|// but someone else's commit failed
name|logout
argument_list|()
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Logout the user. 	 *  	 *<p> 	 * This method removes the<code>SamplePrincipal</code> that was added by 	 * the<code>commit</code> method. 	 *  	 *<p> 	 *  	 * @exception LoginException 	 *                if the logout fails. 	 *  	 * @return true in all cases since this<code>LoginModule</code> should not 	 *         be ignored. 	 */
specifier|public
name|boolean
name|logout
parameter_list|()
throws|throws
name|LoginException
block|{
name|subject
operator|.
name|getPrincipals
argument_list|()
operator|.
name|remove
argument_list|(
name|userPrincipal
argument_list|)
expr_stmt|;
name|succeeded
operator|=
name|commitSucceeded
expr_stmt|;
name|userPrincipal
operator|=
literal|null
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
end_class

end_unit

