begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2011 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id: UnixStylePermission.java 14502 2011-05-23 10:12:51Z deliriumsky $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteInput
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|VariableByteOutputStream
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionRequired
operator|.
name|IS_DBA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionRequired
operator|.
name|IS_OWNER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionRequired
operator|.
name|ACL_WRITE
import|;
end_import

begin_comment
comment|/**  * A simple ACL (Access Control List) implementation  * which extends UnixStylePermission with additional  * ACEs (Access Control Entries).  *  * everyone has READ_ACL  * WRITE access implies WRITE_ACL  *  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|SimpleACLPermission
extends|extends
name|UnixStylePermission
implements|implements
name|ACLPermission
block|{
specifier|public
specifier|static
specifier|final
name|short
name|VERSION
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|MAX_ACL_LENGTH
init|=
literal|255
decl_stmt|;
comment|//restrict to sizeof 1 byte
specifier|private
name|int
name|acl
index|[]
init|=
operator|new
name|int
index|[
literal|0
index|]
decl_stmt|;
specifier|public
name|SimpleACLPermission
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|)
block|{
name|super
argument_list|(
name|sm
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleACLPermission
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|long
name|vector
parameter_list|)
block|{
name|super
argument_list|(
name|sm
argument_list|,
name|vector
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SimpleACLPermission
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|int
name|ownerId
parameter_list|,
specifier|final
name|int
name|groupId
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|sm
argument_list|,
name|ownerId
argument_list|,
name|groupId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addUserACE
parameter_list|(
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|int
name|userId
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|addACE
argument_list|(
name|access_type
argument_list|,
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|userId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addGroupACE
parameter_list|(
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|int
name|groupId
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|addACE
argument_list|(
name|access_type
argument_list|,
name|ACE_TARGET
operator|.
name|GROUP
argument_list|,
name|groupId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addACE
parameter_list|(
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|addACE
argument_list|(
name|access_type
argument_list|,
name|target
argument_list|,
name|lookupTargetId
argument_list|(
name|target
argument_list|,
name|name
argument_list|)
argument_list|,
name|modeStrToMode
argument_list|(
name|modeStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addACE
parameter_list|(
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|addACE
argument_list|(
name|access_type
argument_list|,
name|target
argument_list|,
name|lookupTargetId
argument_list|(
name|target
argument_list|,
name|name
argument_list|)
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PermissionRequired
argument_list|(
name|user
operator|=
name|IS_DBA
operator||
name|IS_OWNER
argument_list|,
name|mode
operator|=
name|ACL_WRITE
argument_list|)
specifier|private
name|void
name|addACE
parameter_list|(
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|acl
operator|.
name|length
operator|>=
name|MAX_ACL_LENGTH
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Maximum of "
operator|+
name|MAX_ACL_LENGTH
operator|+
literal|" ACEs has been reached."
argument_list|)
throw|;
block|}
specifier|final
name|int
name|newAcl
index|[]
init|=
operator|new
name|int
index|[
name|acl
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|acl
argument_list|,
literal|0
argument_list|,
name|newAcl
argument_list|,
literal|0
argument_list|,
name|acl
operator|.
name|length
argument_list|)
expr_stmt|;
name|newAcl
index|[
name|newAcl
operator|.
name|length
operator|-
literal|1
index|]
operator|=
name|encodeAsACE
argument_list|(
name|access_type
argument_list|,
name|target
argument_list|,
name|id
argument_list|,
name|mode
argument_list|)
expr_stmt|;
name|this
operator|.
name|acl
operator|=
name|newAcl
expr_stmt|;
block|}
specifier|public
name|void
name|insertUserACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|int
name|userId
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|insertACE
argument_list|(
name|index
argument_list|,
name|access_type
argument_list|,
name|ACE_TARGET
operator|.
name|USER
argument_list|,
name|userId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|insertGroupACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|int
name|groupId
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|insertACE
argument_list|(
name|index
argument_list|,
name|access_type
argument_list|,
name|ACE_TARGET
operator|.
name|GROUP
argument_list|,
name|groupId
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|insertACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|insertACE
argument_list|(
name|index
argument_list|,
name|access_type
argument_list|,
name|target
argument_list|,
name|lookupTargetId
argument_list|(
name|target
argument_list|,
name|name
argument_list|)
argument_list|,
name|modeStrToMode
argument_list|(
name|modeStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PermissionRequired
argument_list|(
name|user
operator|=
name|IS_DBA
operator||
name|IS_OWNER
argument_list|,
name|mode
operator|=
name|ACL_WRITE
argument_list|)
specifier|private
name|void
name|insertACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|acl
operator|.
name|length
operator|>=
name|MAX_ACL_LENGTH
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Maximum of "
operator|+
name|MAX_ACL_LENGTH
operator|+
literal|" ACEs has been reached."
argument_list|)
throw|;
block|}
if|if
condition|(
name|index
operator|<
literal|0
operator|||
operator|(
name|acl
operator|.
name|length
operator|>
literal|0
operator|&&
name|acl
operator|.
name|length
operator|<=
name|index
operator|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"No Such ACE index "
operator|+
name|index
operator|+
literal|" in ACL."
argument_list|)
throw|;
block|}
specifier|final
name|int
name|newAcl
index|[]
init|=
operator|new
name|int
index|[
name|acl
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|acl
argument_list|,
literal|0
argument_list|,
name|newAcl
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|newAcl
index|[
name|index
index|]
operator|=
name|encodeAsACE
argument_list|(
name|access_type
argument_list|,
name|target
argument_list|,
name|id
argument_list|,
name|mode
argument_list|)
expr_stmt|;
if|if
condition|(
name|acl
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|System
operator|.
name|arraycopy
argument_list|(
name|acl
argument_list|,
name|index
argument_list|,
name|newAcl
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|newAcl
operator|.
name|length
operator|-
name|index
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|acl
operator|=
name|newAcl
expr_stmt|;
block|}
specifier|private
name|int
name|modeStrToMode
parameter_list|(
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|modeStr
operator|==
literal|null
operator|||
name|modeStr
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|modeStr
operator|.
name|length
argument_list|()
operator|>
literal|3
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Invalid mode string '"
operator|+
name|modeStr
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|int
name|mode
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|char
name|c
range|:
name|modeStr
operator|.
name|toCharArray
argument_list|()
control|)
block|{
switch|switch
condition|(
name|c
condition|)
block|{
case|case
name|READ_CHAR
case|:
name|mode
operator||=
name|READ
expr_stmt|;
break|break;
case|case
name|WRITE_CHAR
case|:
name|mode
operator||=
name|WRITE
expr_stmt|;
break|break;
case|case
name|EXECUTE_CHAR
case|:
name|mode
operator||=
name|EXECUTE
expr_stmt|;
break|break;
case|case
name|UNSET_CHAR
case|:
break|break;
default|default:
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Unknown char '"
operator|+
name|c
operator|+
literal|"' in mode string '"
operator|+
name|modeStr
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
return|return
name|mode
return|;
block|}
specifier|private
name|int
name|lookupTargetId
parameter_list|(
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|String
name|targetName
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|int
name|id
decl_stmt|;
if|if
condition|(
name|target
operator|==
name|ACE_TARGET
operator|.
name|USER
condition|)
block|{
specifier|final
name|Account
name|account
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|targetName
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User Account for username '"
operator|+
name|targetName
operator|+
literal|"' is unknown."
argument_list|)
throw|;
block|}
name|id
operator|=
name|account
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|target
operator|==
name|ACE_TARGET
operator|.
name|GROUP
condition|)
block|{
specifier|final
name|Group
name|group
init|=
name|sm
operator|.
name|getGroup
argument_list|(
name|targetName
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User Group for groupname '"
operator|+
name|targetName
operator|+
literal|"' is unknown."
argument_list|)
throw|;
block|}
name|id
operator|=
name|group
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Unknown ACE_TARGET type"
argument_list|)
throw|;
block|}
return|return
name|id
return|;
block|}
comment|/**      * should return max of 29 bits - e.g. The maximum numeric value - 536870911      * exact encoding is [target(3),id(20),mode(3),access_type(3)]      */
specifier|private
name|int
name|encodeAsACE
parameter_list|(
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
name|int
name|id
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
comment|//ensure mode is just 3 bits max (rwu) - TODO(AR) maybe error if not 20 bits
name|mode
operator|=
name|mode
operator|&
literal|7
expr_stmt|;
comment|//makes sure id is only 20 bits max - TODO(AR) maybe error if not 20 bits
name|id
operator|=
name|id
operator|&
literal|1048575
expr_stmt|;
return|return
operator|(
name|target
operator|.
name|getVal
argument_list|()
operator|<<
literal|26
operator|)
operator||
operator|(
name|id
operator|<<
literal|6
operator|)
operator||
operator|(
name|mode
operator|<<
literal|3
operator|)
operator||
name|access_type
operator|.
name|getVal
argument_list|()
return|;
block|}
annotation|@
name|PermissionRequired
argument_list|(
name|user
operator|=
name|IS_DBA
operator||
name|IS_OWNER
argument_list|,
name|mode
operator|=
name|ACL_WRITE
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|removeACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|acl
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"ACL Entry does not exist"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|newAcl
index|[]
init|=
operator|new
name|int
index|[
name|acl
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|acl
argument_list|,
literal|0
argument_list|,
name|newAcl
argument_list|,
literal|0
argument_list|,
name|index
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|acl
argument_list|,
name|index
operator|+
literal|1
argument_list|,
name|newAcl
argument_list|,
name|index
argument_list|,
name|newAcl
operator|.
name|length
operator|-
name|index
argument_list|)
expr_stmt|;
name|this
operator|.
name|acl
operator|=
name|newAcl
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modifyACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|modifyACE
argument_list|(
name|index
argument_list|,
name|access_type
argument_list|,
name|modeStrToMode
argument_list|(
name|modeStr
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|PermissionRequired
argument_list|(
name|user
operator|=
name|IS_DBA
operator||
name|IS_OWNER
argument_list|,
name|mode
operator|=
name|ACL_WRITE
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|modifyACE
parameter_list|(
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|index
operator|>=
name|acl
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"ACL Entry does not exist"
argument_list|)
throw|;
block|}
specifier|final
name|int
name|ace
init|=
name|acl
index|[
name|index
index|]
decl_stmt|;
name|acl
index|[
name|index
index|]
operator|=
operator|(
operator|(
name|ace
operator|>>>
literal|6
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|mode
operator|<<
literal|3
operator|)
operator||
name|access_type
operator|.
name|getVal
argument_list|()
expr_stmt|;
block|}
comment|/**      * Clears all ACE's      */
annotation|@
name|PermissionRequired
argument_list|(
name|user
operator|=
name|IS_DBA
operator||
name|IS_OWNER
argument_list|,
name|mode
operator|=
name|ACL_WRITE
argument_list|)
annotation|@
name|Override
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|acl
operator|=
operator|new
name|int
index|[
literal|0
index|]
expr_stmt|;
block|}
specifier|public
name|int
name|getACEId
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|acl
index|[
name|index
index|]
operator|>>>
literal|6
operator|)
operator|&
literal|1048575
return|;
block|}
comment|/**      * Convenience method for getting the name of the user or group      * of which this ace is applied to      */
annotation|@
name|Override
specifier|public
name|String
name|getACEWho
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
switch|switch
condition|(
name|getACETarget
argument_list|(
name|index
argument_list|)
condition|)
block|{
case|case
name|USER
case|:
return|return
name|sm
operator|.
name|getAccount
argument_list|(
name|getACEId
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
return|;
case|case
name|GROUP
case|:
return|return
name|sm
operator|.
name|getGroup
argument_list|(
name|getACEId
argument_list|(
name|index
argument_list|)
argument_list|)
operator|.
name|getName
argument_list|()
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|getACEMode
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
operator|(
name|acl
index|[
name|index
index|]
operator|>>>
literal|3
operator|)
operator|&
literal|7
return|;
block|}
specifier|public
name|String
name|getACEModeString
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
specifier|final
name|int
name|aceMode
init|=
name|getACEMode
argument_list|(
name|index
argument_list|)
decl_stmt|;
specifier|final
name|char
name|ch
index|[]
init|=
operator|new
name|char
index|[]
block|{
operator|(
name|aceMode
operator|&
name|READ
operator|)
operator|!=
name|READ
condition|?
name|UNSET_CHAR
else|:
name|READ_CHAR
block|,
operator|(
name|aceMode
operator|&
name|WRITE
operator|)
operator|!=
name|WRITE
condition|?
name|UNSET_CHAR
else|:
name|WRITE_CHAR
block|,
operator|(
name|aceMode
operator|&
name|EXECUTE
operator|)
operator|!=
name|EXECUTE
condition|?
name|UNSET_CHAR
else|:
name|EXECUTE_CHAR
block|}
decl_stmt|;
return|return
name|String
operator|.
name|valueOf
argument_list|(
name|ch
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ACE_TARGET
name|getACETarget
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|ACE_TARGET
operator|.
name|fromVal
argument_list|(
name|acl
index|[
name|index
index|]
operator|>>>
literal|26
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|ACE_ACCESS_TYPE
name|getACEAccessType
parameter_list|(
specifier|final
name|int
name|index
parameter_list|)
block|{
return|return
name|ACE_ACCESS_TYPE
operator|.
name|fromVal
argument_list|(
name|acl
index|[
name|index
index|]
operator|&
literal|7
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getACECount
parameter_list|()
block|{
return|return
name|acl
operator|.
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|read
parameter_list|(
specifier|final
name|VariableByteInput
name|istream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|read
argument_list|(
name|istream
argument_list|)
expr_stmt|;
specifier|final
name|int
name|aclLength
init|=
name|istream
operator|.
name|read
argument_list|()
decl_stmt|;
name|acl
operator|=
operator|new
name|int
index|[
name|aclLength
index|]
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aclLength
condition|;
name|i
operator|++
control|)
block|{
name|acl
index|[
name|i
index|]
operator|=
name|istream
operator|.
name|readInt
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
specifier|final
name|VariableByteOutputStream
name|ostream
parameter_list|)
throws|throws
name|IOException
block|{
name|super
operator|.
name|write
argument_list|(
name|ostream
argument_list|)
expr_stmt|;
name|ostream
operator|.
name|write
argument_list|(
name|acl
operator|.
name|length
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|int
name|ace
range|:
name|acl
control|)
block|{
name|ostream
operator|.
name|writeInt
argument_list|(
name|ace
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Evaluation order is -      *      * 1) ACL ACEs are evaluated first      * 2) Classic Unix Style Permissions are evaluated second      *      * The first match is considered the authority      */
annotation|@
name|Override
specifier|public
name|boolean
name|validate
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
block|{
comment|//group dba has full access
if|if
condition|(
name|user
operator|.
name|hasDbaRole
argument_list|()
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|int
name|userId
init|=
name|user
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|int
name|userGroupIds
index|[]
init|=
name|user
operator|.
name|getGroupIds
argument_list|()
decl_stmt|;
comment|/*          * START EXTENDED ACL VALIDATION.          *          * exact encoding is [target(3),id(20),mode(3),access_type(3)]          */
comment|//check ACL
for|for
control|(
specifier|final
name|int
name|ace
range|:
name|acl
control|)
block|{
specifier|final
name|int
name|aceTarget
init|=
name|ace
operator|>>>
literal|26
decl_stmt|;
specifier|final
name|int
name|id
init|=
operator|(
name|ace
operator|>>>
literal|6
operator|)
operator|&
literal|1048575
decl_stmt|;
specifier|final
name|int
name|aceMode
init|=
operator|(
name|ace
operator|>>>
literal|3
operator|)
operator|&
literal|7
decl_stmt|;
specifier|final
name|int
name|accessType
init|=
name|ace
operator|&
literal|7
decl_stmt|;
if|if
condition|(
operator|(
name|aceTarget
operator|&
name|ACE_TARGET
operator|.
name|USER
operator|.
name|getVal
argument_list|()
operator|)
operator|==
name|ACE_TARGET
operator|.
name|USER
operator|.
name|getVal
argument_list|()
condition|)
block|{
comment|//check for a user
if|if
condition|(
name|id
operator|==
name|userId
operator|&&
operator|(
name|aceMode
operator|&
name|mode
operator|)
operator|==
name|mode
condition|)
block|{
return|return
operator|(
name|accessType
operator|==
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
operator|.
name|getVal
argument_list|()
operator|)
return|;
block|}
block|}
if|else if
condition|(
operator|(
name|aceTarget
operator|&
name|ACE_TARGET
operator|.
name|GROUP
operator|.
name|getVal
argument_list|()
operator|)
operator|==
name|ACE_TARGET
operator|.
name|GROUP
operator|.
name|getVal
argument_list|()
condition|)
block|{
comment|//check for a group
for|for
control|(
specifier|final
name|int
name|userGroupId
range|:
name|userGroupIds
control|)
block|{
if|if
condition|(
name|userGroupId
operator|==
name|id
operator|&&
operator|(
name|aceMode
operator|&
name|mode
operator|)
operator|==
name|mode
condition|)
block|{
return|return
operator|(
name|accessType
operator|==
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
operator|.
name|getVal
argument_list|()
operator|)
return|;
block|}
block|}
block|}
block|}
comment|/*          *   END EXTENDED ACL VALIDATION          */
comment|/*          * FALLBACK to UNIX STYLE VALIDATION          */
comment|//check owner
if|if
condition|(
name|userId
operator|==
operator|(
name|vector
operator|>>>
literal|32
operator|)
condition|)
block|{
comment|//check owner
return|return
operator|(
name|mode
operator|&
operator|(
operator|(
name|vector
operator|>>>
literal|28
operator|)
operator|&
literal|7
operator|)
operator|)
operator|==
name|mode
return|;
comment|//check owner mode
block|}
comment|//check group
specifier|final
name|int
name|groupId
init|=
operator|(
name|int
operator|)
operator|(
operator|(
name|vector
operator|>>>
literal|8
operator|)
operator|&
literal|1048575
operator|)
decl_stmt|;
for|for
control|(
specifier|final
name|int
name|userGroupId
range|:
name|userGroupIds
control|)
block|{
if|if
condition|(
name|userGroupId
operator|==
name|groupId
condition|)
block|{
return|return
operator|(
name|mode
operator|&
operator|(
operator|(
name|vector
operator|>>>
literal|4
operator|)
operator|&
literal|7
operator|)
operator|)
operator|==
name|mode
return|;
block|}
block|}
comment|//check other
if|if
condition|(
operator|(
name|mode
operator|&
operator|(
name|vector
operator|&
literal|7
operator|)
operator|)
operator|==
name|mode
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|/*          * END FALLBACK to UNIX STYLE VALIDATION          */
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|short
name|getVersion
parameter_list|()
block|{
return|return
name|VERSION
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCurrentSubjectCanWriteACL
parameter_list|()
block|{
return|return
name|validate
argument_list|(
name|getCurrentSubject
argument_list|()
argument_list|,
name|WRITE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|SimpleACLPermission
name|copy
parameter_list|()
block|{
specifier|final
name|SimpleACLPermission
name|prm
init|=
operator|new
name|SimpleACLPermission
argument_list|(
name|sm
argument_list|,
name|vector
argument_list|)
decl_stmt|;
name|prm
operator|.
name|acl
operator|=
operator|new
name|int
index|[
name|acl
operator|.
name|length
index|]
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|acl
argument_list|,
literal|0
argument_list|,
name|prm
operator|.
name|acl
argument_list|,
literal|0
argument_list|,
name|acl
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|prm
return|;
block|}
comment|/**      * Determines if this permisisons ACL is equal to that      * of another permissions ACL.      *      * @param other the other ACL to check equality against.      *      * @return true if the ACLs are equal      */
specifier|public
name|boolean
name|equalsAcl
parameter_list|(
specifier|final
name|SimpleACLPermission
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
operator|||
name|other
operator|.
name|getACECount
argument_list|()
operator|!=
name|getACECount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getACECount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getACEAccessType
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getACEAccessType
argument_list|(
name|i
argument_list|)
operator|||
name|getACETarget
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getACETarget
argument_list|(
name|i
argument_list|)
operator|||
operator|(
operator|!
name|getACEWho
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getACEWho
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
operator|||
name|getACEMode
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getACEMode
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
annotation|@
name|PermissionRequired
argument_list|(
name|user
operator|=
name|IS_DBA
operator||
name|IS_OWNER
argument_list|,
name|mode
operator|=
name|ACL_WRITE
argument_list|)
specifier|public
name|void
name|copyAclOf
parameter_list|(
specifier|final
name|SimpleACLPermission
name|simpleACLPermission
parameter_list|)
block|{
name|this
operator|.
name|acl
operator|=
name|Arrays
operator|.
name|copyOf
argument_list|(
name|simpleACLPermission
operator|.
name|acl
argument_list|,
name|simpleACLPermission
operator|.
name|acl
operator|.
name|length
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|aclEquals
parameter_list|(
specifier|final
name|ACLPermission
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|instanceof
name|SimpleACLPermission
condition|)
block|{
comment|// optimisation for when both are the same type
return|return
name|Arrays
operator|.
name|equals
argument_list|(
name|acl
argument_list|,
operator|(
operator|(
name|SimpleACLPermission
operator|)
name|other
operator|)
operator|.
name|acl
argument_list|)
return|;
block|}
else|else
block|{
if|if
condition|(
name|getACECount
argument_list|()
operator|!=
name|other
operator|.
name|getACECount
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|getACECount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|getACEAccessType
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getACEAccessType
argument_list|(
name|i
argument_list|)
operator|||
name|getACETarget
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getACETarget
argument_list|(
name|i
argument_list|)
operator|||
operator|(
operator|!
name|getACEWho
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getACEWho
argument_list|(
name|i
argument_list|)
argument_list|)
operator|)
operator|||
name|getACEMode
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getACEMode
argument_list|(
name|i
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
end_class

end_unit

