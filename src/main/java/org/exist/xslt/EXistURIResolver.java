begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xslt
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Array
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|dom
operator|.
name|DOMSource
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_comment
comment|/**  * Implementation of URIResolver which  * will resolve paths from the eXist database  */
end_comment

begin_class
specifier|public
class|class
name|EXistURIResolver
implements|implements
name|URIResolver
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|EXistURIResolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|BrokerPool
name|db
decl_stmt|;
specifier|final
name|String
name|basePath
decl_stmt|;
specifier|public
name|EXistURIResolver
parameter_list|(
specifier|final
name|BrokerPool
name|db
parameter_list|,
specifier|final
name|String
name|docPath
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
name|this
operator|.
name|basePath
operator|=
name|normalize
argument_list|(
name|docPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"EXistURIResolver base path set to "
operator|+
name|basePath
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|normalize
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
argument_list|)
condition|)
block|{
return|return
name|uri
operator|.
name|substring
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
return|return
name|uri
return|;
block|}
comment|/**    * Simplify a path removing any "." and ".." path elements.    * Assumes an absolute path is given.    */
specifier|private
name|String
name|normalizePath
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
if|if
condition|(
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"normalizePath may only be applied to an absolute path; "
operator|+
literal|"argument was: "
operator|+
name|path
operator|+
literal|"; base: "
operator|+
name|basePath
argument_list|)
throw|;
block|}
specifier|final
name|String
index|[]
name|pathComponents
init|=
name|path
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
operator|.
name|split
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
specifier|final
name|int
name|numPathComponents
init|=
name|Array
operator|.
name|getLength
argument_list|(
name|pathComponents
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|simplifiedComponents
init|=
operator|new
name|String
index|[
name|numPathComponents
index|]
decl_stmt|;
name|int
name|numSimplifiedComponents
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|s
range|:
name|pathComponents
control|)
block|{
comment|// Remove empty elements ("/")
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
comment|// Remove identity elements (".")
if|if
condition|(
literal|"."
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
continue|continue;
block|}
comment|// Remove parent elements ("..") unless at the root
if|if
condition|(
literal|".."
operator|.
name|equals
argument_list|(
name|s
argument_list|)
condition|)
block|{
if|if
condition|(
name|numSimplifiedComponents
operator|>
literal|0
condition|)
block|{
name|numSimplifiedComponents
operator|--
expr_stmt|;
block|}
continue|continue;
block|}
name|simplifiedComponents
index|[
name|numSimplifiedComponents
operator|++
index|]
operator|=
name|s
expr_stmt|;
block|}
if|if
condition|(
name|numSimplifiedComponents
operator|==
literal|0
condition|)
block|{
return|return
literal|"/"
return|;
block|}
specifier|final
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|path
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|numSimplifiedComponents
condition|;
name|x
operator|++
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
operator|.
name|append
argument_list|(
name|simplifiedComponents
index|[
name|x
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|sb
operator|.
name|append
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Source
name|resolve
parameter_list|(
specifier|final
name|String
name|href
parameter_list|,
name|String
name|base
parameter_list|)
throws|throws
name|TransformerException
block|{
name|String
name|path
decl_stmt|;
if|if
condition|(
name|href
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|path
operator|=
name|base
expr_stmt|;
block|}
else|else
block|{
name|URI
name|hrefURI
init|=
literal|null
decl_stmt|;
try|try
block|{
name|hrefURI
operator|=
operator|new
name|URI
argument_list|(
name|href
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|hrefURI
operator|!=
literal|null
operator|&&
name|hrefURI
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|path
operator|=
name|href
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|href
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|href
expr_stmt|;
block|}
if|else if
condition|(
name|href
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
argument_list|)
condition|)
block|{
name|path
operator|=
name|href
operator|.
name|substring
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|base
operator|==
literal|null
operator|||
name|base
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
name|path
operator|=
name|basePath
operator|+
literal|"/"
operator|+
name|href
expr_stmt|;
block|}
else|else
block|{
comment|// Maybe base never contains this prefix?  Check to be sure.
if|if
condition|(
name|base
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
argument_list|)
condition|)
block|{
name|base
operator|=
name|base
operator|.
name|substring
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|base
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|base
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
operator|+
name|href
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Resolving path "
operator|+
name|href
operator|+
literal|" with base "
operator|+
name|base
operator|+
literal|" to "
operator|+
name|path
argument_list|)
expr_stmt|;
comment|// + " (URI = " + uri.toASCIIString() + ")");
block|}
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|normalizePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|databaseSource
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|urlSource
argument_list|(
name|path
argument_list|)
return|;
block|}
block|}
specifier|private
name|Source
name|urlSource
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|TransformerException
block|{
try|try
block|{
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|path
argument_list|)
decl_stmt|;
return|return
operator|new
name|StreamSource
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Source
name|databaseSource
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|TransformerException
block|{
specifier|final
name|XmldbURI
name|uri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|final
name|DBBroker
name|broker
init|=
name|db
operator|.
name|getActiveBroker
argument_list|()
decl_stmt|;
specifier|final
name|DocumentImpl
name|doc
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|broker
operator|.
name|getResource
argument_list|(
name|uri
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Document "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|TransformerException
argument_list|(
literal|"Resource "
operator|+
name|path
operator|+
literal|" not found in database."
argument_list|)
throw|;
block|}
specifier|final
name|Source
name|source
decl_stmt|;
if|if
condition|(
name|doc
operator|instanceof
name|BinaryDocument
condition|)
block|{
comment|/*          * NOTE: this is extremely unpleasant as we let a reference to the blob file          * escape from the closure into the StreamSource. This means that the file could have been deleted          * by time the user comes to access the StreamSource, however this was also          * the case with eXist-db's previous design, and due to the lack of resource          * management of the StreamSource class, there is little we can do to improve          * the situation - AR.          */
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|source
operator|=
name|broker
operator|.
name|withBinaryFile
argument_list|(
name|transaction
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|doc
argument_list|,
name|p
lambda|->
block|{
specifier|final
name|StreamSource
name|source1
init|=
operator|new
name|StreamSource
argument_list|(
name|p
operator|.
name|toFile
argument_list|()
argument_list|)
decl_stmt|;
name|source1
operator|.
name|setSystemId
argument_list|(
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|source1
return|;
block|}
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|source
return|;
block|}
block|}
else|else
block|{
name|source
operator|=
operator|new
name|DOMSource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|source
operator|.
name|setSystemId
argument_list|(
name|uri
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|TransactionException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TransformerException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

