begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|LambdaMetafactory
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandle
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodHandles
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|BiFunction
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|invoke
operator|.
name|MethodType
operator|.
name|methodType
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BinaryValueType
parameter_list|<
name|T
extends|extends
name|FilterOutputStream
parameter_list|>
block|{
specifier|private
specifier|static
specifier|final
name|MethodHandles
operator|.
name|Lookup
name|LOOKUP
init|=
name|MethodHandles
operator|.
name|lookup
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|int
name|xqueryType
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|coder
decl_stmt|;
specifier|public
name|BinaryValueType
parameter_list|(
name|int
name|xqueryType
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|coder
parameter_list|)
block|{
name|this
operator|.
name|xqueryType
operator|=
name|xqueryType
expr_stmt|;
name|this
operator|.
name|coder
operator|=
name|coder
expr_stmt|;
block|}
specifier|public
name|int
name|getXQueryType
parameter_list|()
block|{
return|return
name|xqueryType
return|;
block|}
specifier|public
name|T
name|getEncoder
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instantiateCoder
argument_list|(
name|os
argument_list|,
literal|true
argument_list|)
return|;
block|}
specifier|public
name|T
name|getDecoder
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|instantiateCoder
argument_list|(
name|os
argument_list|,
literal|false
argument_list|)
return|;
block|}
specifier|private
name|T
name|instantiateCoder
parameter_list|(
name|OutputStream
name|stream
parameter_list|,
name|boolean
name|encoder
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
specifier|final
name|MethodHandle
name|methodHandle
init|=
name|LOOKUP
operator|.
name|findConstructor
argument_list|(
name|coder
argument_list|,
name|methodType
argument_list|(
name|void
operator|.
name|class
argument_list|,
name|OutputStream
operator|.
name|class
argument_list|,
name|boolean
operator|.
name|class
argument_list|)
argument_list|)
decl_stmt|;
comment|// NOTE we have to explicitly replace boolean.class with Boolean.class for the implementation
specifier|final
name|BiFunction
argument_list|<
name|OutputStream
argument_list|,
name|Boolean
argument_list|,
name|T
argument_list|>
name|c
init|=
operator|(
name|BiFunction
argument_list|<
name|OutputStream
argument_list|,
name|Boolean
argument_list|,
name|T
argument_list|>
operator|)
name|LambdaMetafactory
operator|.
name|metafactory
argument_list|(
name|LOOKUP
argument_list|,
literal|"apply"
argument_list|,
name|methodType
argument_list|(
name|BiFunction
operator|.
name|class
argument_list|)
argument_list|,
name|methodHandle
operator|.
name|type
argument_list|()
operator|.
name|changeParameterType
argument_list|(
literal|1
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
operator|.
name|erase
argument_list|()
argument_list|,
name|methodHandle
argument_list|,
name|methodHandle
operator|.
name|type
argument_list|()
operator|.
name|changeParameterType
argument_list|(
literal|1
argument_list|,
name|Boolean
operator|.
name|class
argument_list|)
argument_list|)
operator|.
name|getTarget
argument_list|()
operator|.
name|invokeExact
argument_list|()
decl_stmt|;
specifier|final
name|T
name|f
init|=
name|c
operator|.
name|apply
argument_list|(
name|stream
argument_list|,
name|encoder
argument_list|)
decl_stmt|;
return|return
name|f
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|instanceof
name|InterruptedException
condition|)
block|{
comment|// NOTE: must set interrupted flag
name|Thread
operator|.
name|currentThread
argument_list|()
operator|.
name|interrupt
argument_list|()
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to get binary coder '"
operator|+
name|coder
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|String
name|verifyAndFormatString
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|XPathException
block|{
name|str
operator|=
name|str
operator|.
name|replaceAll
argument_list|(
literal|"\\s"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|verifyString
argument_list|(
name|str
argument_list|)
expr_stmt|;
return|return
name|formatString
argument_list|(
name|str
argument_list|)
return|;
block|}
specifier|protected
specifier|abstract
name|void
name|verifyString
parameter_list|(
name|String
name|str
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|protected
specifier|abstract
name|String
name|formatString
parameter_list|(
name|String
name|str
parameter_list|)
function_decl|;
block|}
end_class

end_unit

