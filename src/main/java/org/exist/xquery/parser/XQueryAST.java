begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *   *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|CommonAST
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_comment
comment|/**  * @author Wolfgang Meier (wolfgang@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|XQueryAST
extends|extends
name|CommonAST
block|{
specifier|private
name|int
name|line
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|column
init|=
literal|0
decl_stmt|;
specifier|public
name|XQueryAST
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XQueryAST
parameter_list|(
name|int
name|type
parameter_list|,
name|String
name|text
parameter_list|)
block|{
name|initialize
argument_list|(
name|type
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryAST
parameter_list|(
name|AST
name|ast
parameter_list|)
block|{
name|initialize
argument_list|(
name|ast
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see antlr.CommonAST#initialize(antlr.collections.AST) 	 */
specifier|public
name|void
name|initialize
parameter_list|(
name|AST
name|ast
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|ast
argument_list|)
expr_stmt|;
if|if
condition|(
name|ast
operator|instanceof
name|XQueryAST
condition|)
block|{
name|copyLexInfo
argument_list|(
operator|(
name|XQueryAST
operator|)
name|ast
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see antlr.CommonAST#initialize(antlr.Token) 	 */
specifier|public
name|void
name|initialize
parameter_list|(
name|Token
name|token
parameter_list|)
block|{
name|super
operator|.
name|initialize
argument_list|(
name|token
argument_list|)
expr_stmt|;
name|setLine
argument_list|(
name|token
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|setColumn
argument_list|(
name|token
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|copyLexInfo
parameter_list|(
name|XQueryAST
name|ast
parameter_list|)
block|{
name|setLine
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|setColumn
argument_list|(
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLine
parameter_list|(
name|int
name|line
parameter_list|)
block|{
name|this
operator|.
name|line
operator|=
name|line
expr_stmt|;
block|}
specifier|public
name|void
name|setColumn
parameter_list|(
name|int
name|column
parameter_list|)
block|{
name|this
operator|.
name|column
operator|=
name|column
expr_stmt|;
block|}
specifier|public
name|int
name|getLine
parameter_list|()
block|{
return|return
name|line
return|;
block|}
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|column
return|;
block|}
specifier|public
name|void
name|setDoc
parameter_list|(
name|String
name|doc
parameter_list|)
block|{
comment|// implemented by subclasses
block|}
specifier|public
name|String
name|getDoc
parameter_list|()
block|{
comment|// might be implemented by subclasses
return|return
literal|null
return|;
block|}
comment|//	/* (non-Javadoc)
comment|//	 * @see antlr.BaseAST#toString()
comment|//	 */
comment|//	public String toString() {
comment|//		StringBuffer buf = new StringBuffer();
comment|//		buf.append(super.toString());
comment|//		buf.append("[");
comment|//		buf.append(getLine());
comment|//		buf.append(", ");
comment|//		buf.append(getColumn());
comment|//		buf.append("]");
comment|//		return buf.toString();
comment|//	}
block|}
end_class

end_unit

