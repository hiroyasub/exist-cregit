begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|array
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A literal array constructor (XQuery 3.1)  */
end_comment

begin_class
specifier|public
class|class
name|ArrayConstructor
extends|extends
name|AbstractExpression
block|{
specifier|public
enum|enum
name|ConstructorType
block|{
name|SQUARE_ARRAY
block|,
name|CURLY_ARRAY
block|}
specifier|private
name|ConstructorType
name|type
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|ArrayConstructor
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|ConstructorType
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|addArgument
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|arguments
operator|.
name|add
argument_list|(
name|expression
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|contextInfo
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|Expression
name|expr
range|:
name|arguments
control|)
block|{
name|expr
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getXQueryVersion
argument_list|()
operator|<
literal|31
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|EXXQDY0004
argument_list|,
literal|"arrays are only available in XQuery 3.1, but version declaration states "
operator|+
name|context
operator|.
name|getXQueryVersion
argument_list|()
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|SQUARE_ARRAY
case|:
specifier|final
name|List
argument_list|<
name|Sequence
argument_list|>
name|items
init|=
operator|new
name|ArrayList
argument_list|<
name|Sequence
argument_list|>
argument_list|(
name|arguments
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|Expression
name|arg
range|:
name|arguments
control|)
block|{
specifier|final
name|Sequence
name|result
init|=
name|arg
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|items
operator|.
name|add
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|ArrayType
argument_list|(
name|context
argument_list|,
name|items
argument_list|)
return|;
default|default:
specifier|final
name|Sequence
name|result
init|=
name|arguments
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
return|return
operator|new
name|ArrayType
argument_list|(
name|context
argument_list|,
name|result
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|ARRAY
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
for|for
control|(
name|Expression
name|expr
range|:
name|arguments
control|)
block|{
name|expr
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"array {"
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|ExpressionVisitor
name|visitor
parameter_list|)
block|{
for|for
control|(
name|Expression
name|expr
range|:
name|arguments
control|)
block|{
name|expr
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

