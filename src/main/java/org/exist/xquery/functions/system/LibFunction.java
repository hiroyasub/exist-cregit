begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id: RenderFunction.java 10610 2009-11-26 09:12:00Z shabanovd $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|system
package|;
end_package

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|LatestFileResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_comment
comment|/**  * @author Evgeny Gazdovsky<gazdovsky@gmail.com>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|LibFunction
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|final
specifier|static
name|String
name|LIB_WEBINF
init|=
literal|"WEB-INF/lib/"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
index|[]
name|LIB
init|=
block|{
literal|"./lib/core"
block|,
literal|"./lib/optional"
block|,
literal|"./lib/extensions"
block|,
literal|"./lib/user"
block|,
literal|"."
block|}
decl_stmt|;
specifier|private
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|allFiles
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|LatestFileResolver
name|libFileResolver
init|=
operator|new
name|LatestFileResolver
argument_list|()
decl_stmt|;
specifier|private
name|Stream
argument_list|<
name|Path
argument_list|>
name|libFolders
decl_stmt|;
specifier|public
name|LibFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
name|libFolders
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getExistHome
argument_list|()
operator|.
name|map
argument_list|(
name|this
operator|::
name|libFolders
argument_list|)
operator|.
name|orElse
argument_list|(
name|Stream
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Stream
argument_list|<
name|Path
argument_list|>
name|libFolders
parameter_list|(
specifier|final
name|Path
name|contextRoot
parameter_list|)
block|{
comment|// Setup path based on installation (in jetty, container)
if|if
condition|(
name|isInWarFile
argument_list|(
name|contextRoot
argument_list|)
condition|)
block|{
comment|// all files mixed in contextRoot/WEB-INF/lib
return|return
name|Stream
operator|.
name|of
argument_list|(
name|contextRoot
operator|.
name|resolve
argument_list|(
name|LIB_WEBINF
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
comment|//files located in contextRoot/lib/* and contextRoot
return|return
name|Arrays
operator|.
name|stream
argument_list|(
name|LIB
argument_list|)
operator|.
name|map
argument_list|(
name|contextRoot
operator|::
name|resolve
argument_list|)
return|;
block|}
block|}
specifier|private
name|boolean
name|isInWarFile
parameter_list|(
name|Path
name|existHome
parameter_list|)
block|{
return|return
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|existHome
operator|.
name|resolve
argument_list|(
name|LIB
index|[
literal|0
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Optional
argument_list|<
name|Path
argument_list|>
name|getLib
parameter_list|(
specifier|final
name|Path
name|folder
parameter_list|,
specifier|final
name|String
name|libFileBaseName
parameter_list|)
block|{
specifier|final
name|String
name|fileToFind
init|=
name|folder
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|resolve
argument_list|(
name|libFileBaseName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|String
name|resolvedFile
init|=
name|libFileResolver
operator|.
name|getResolvedFileName
argument_list|(
name|fileToFind
argument_list|)
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|resolvedFile
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Files
operator|::
name|exists
argument_list|)
return|;
block|}
specifier|protected
name|Path
name|getLib
parameter_list|(
specifier|final
name|String
name|key
parameter_list|)
block|{
name|Path
name|retVal
init|=
name|allFiles
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|allFiles
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|key
argument_list|)
condition|)
block|{
return|return
name|retVal
return|;
block|}
specifier|final
name|Optional
argument_list|<
name|Optional
argument_list|<
name|Path
argument_list|>
argument_list|>
name|libVal
init|=
name|libFolders
operator|.
name|map
argument_list|(
name|libFolder
lambda|->
name|getLib
argument_list|(
name|libFolder
argument_list|,
name|key
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Optional
operator|::
name|isPresent
argument_list|)
operator|.
name|findFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|libVal
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|libVal
operator|.
name|get
argument_list|()
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|retVal
operator|=
name|libVal
operator|.
name|get
argument_list|()
operator|.
name|get
argument_list|()
expr_stmt|;
block|}
block|}
name|allFiles
operator|.
name|put
argument_list|(
name|key
argument_list|,
name|retVal
argument_list|)
expr_stmt|;
return|return
name|retVal
return|;
block|}
block|}
end_class

end_unit

