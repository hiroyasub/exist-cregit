begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|web
operator|.
name|HttpAccount
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|XIncludeFilter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|Receiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|ReceiverToSAX
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SAXToReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|SerializerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|Stylesheet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|TemplatesFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|TransformerFactoryAllocator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xslt
operator|.
name|XSLTErrorsListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Transformer
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_comment
comment|/**  * eXist-db servlet for XSLT transformations.  *  * @author Wolfgang  */
end_comment

begin_class
specifier|public
class|class
name|XSLTServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|7258405385386062151L
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|REQ_ATTRIBUTE_PREFIX
init|=
literal|"xslt."
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|REQ_ATTRIBUTE_STYLESHEET
init|=
literal|"xslt.stylesheet"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|REQ_ATTRIBUTE_INPUT
init|=
literal|"xslt.input"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|REQ_ATTRIBUTE_OUTPUT
init|=
literal|"xslt.output."
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|REQ_ATTRIBUTE_BASE
init|=
literal|"xslt.base"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|XSLTServlet
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|XSLTErrorsListener
argument_list|<
name|ServletException
argument_list|>
name|errorListener
init|=
operator|new
name|XSLTErrorsListener
argument_list|<
name|ServletException
argument_list|>
argument_list|(
literal|true
argument_list|,
literal|false
argument_list|)
block|{
annotation|@
name|Override
specifier|protected
name|void
name|raiseError
parameter_list|(
name|String
name|error
parameter_list|,
name|Exception
name|ex
parameter_list|)
throws|throws
name|ServletException
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|error
argument_list|,
name|ex
argument_list|)
throw|;
block|}
block|}
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|private
name|Boolean
name|caching
init|=
literal|null
decl_stmt|;
comment|/**      * @return Value of TransformerFactoryAllocator.PROPERTY_CACHING_ATTRIBUTE or TRUE if not present.      */
specifier|private
name|boolean
name|isCaching
parameter_list|()
block|{
if|if
condition|(
name|caching
operator|==
literal|null
condition|)
block|{
specifier|final
name|Object
name|property
init|=
name|pool
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|TransformerFactoryAllocator
operator|.
name|PROPERTY_CACHING_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|!=
literal|null
condition|)
block|{
name|caching
operator|=
operator|(
name|Boolean
operator|)
name|property
expr_stmt|;
block|}
else|else
block|{
name|caching
operator|=
literal|true
expr_stmt|;
block|}
block|}
return|return
name|caching
return|;
block|}
annotation|@
name|Override
specifier|protected
name|void
name|doPost
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
specifier|final
name|String
name|uri
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|REQ_ATTRIBUTE_STYLESHEET
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"No stylesheet source specified!"
argument_list|)
throw|;
block|}
name|Item
name|inputNode
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|sourceAttrib
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|REQ_ATTRIBUTE_INPUT
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceAttrib
operator|!=
literal|null
condition|)
block|{
name|Object
name|sourceObj
init|=
name|request
operator|.
name|getAttribute
argument_list|(
name|sourceAttrib
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourceObj
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|sourceObj
operator|instanceof
name|ValueSequence
condition|)
block|{
specifier|final
name|ValueSequence
name|seq
init|=
operator|(
name|ValueSequence
operator|)
name|sourceObj
decl_stmt|;
if|if
condition|(
name|seq
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
block|{
name|sourceObj
operator|=
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sourceObj
operator|instanceof
name|Item
condition|)
block|{
name|inputNode
operator|=
operator|(
name|Item
operator|)
name|sourceObj
expr_stmt|;
if|if
condition|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|inputNode
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Input for XSLT servlet is not a node. Read from attribute "
operator|+
name|sourceAttrib
argument_list|)
throw|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Taking XSLT input from request attribute "
operator|+
name|sourceAttrib
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Input for XSLT servlet is not a node. Read from attribute "
operator|+
name|sourceAttrib
argument_list|)
throw|;
block|}
block|}
block|}
try|try
block|{
name|pool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|Subject
name|user
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGuestSubject
argument_list|()
decl_stmt|;
name|Subject
name|requestUser
init|=
name|HttpAccount
operator|.
name|getUserFromServletRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|requestUser
operator|!=
literal|null
condition|)
block|{
name|user
operator|=
name|requestUser
expr_stmt|;
block|}
comment|// Retrieve username / password from HTTP request attributes
specifier|final
name|String
name|userParam
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"xslt.user"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|passwd
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
literal|"xslt.password"
argument_list|)
decl_stmt|;
if|if
condition|(
name|userParam
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|user
operator|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|authenticate
argument_list|(
name|userParam
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthenticationException
name|e1
parameter_list|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|,
literal|"Wrong password or user"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
specifier|final
name|Stylesheet
name|stylesheet
init|=
name|stylesheet
argument_list|(
name|uri
argument_list|,
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|stylesheet
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|//do the transformation
try|try
init|(
specifier|final
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|Optional
operator|.
name|of
argument_list|(
name|user
argument_list|)
argument_list|)
init|)
block|{
specifier|final
name|TransformerHandler
name|handler
init|=
name|stylesheet
operator|.
name|newTransformerHandler
argument_list|(
name|broker
argument_list|,
name|errorListener
argument_list|)
decl_stmt|;
name|setTransformerParameters
argument_list|(
name|request
argument_list|,
name|handler
operator|.
name|getTransformer
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Properties
name|properties
init|=
name|handler
operator|.
name|getTransformer
argument_list|()
operator|.
name|getOutputProperties
argument_list|()
decl_stmt|;
name|setOutputProperties
argument_list|(
name|request
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|String
name|encoding
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
name|encoding
operator|==
literal|null
condition|)
block|{
name|encoding
operator|=
literal|"UTF-8"
expr_stmt|;
block|}
name|response
operator|.
name|setCharacterEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
specifier|final
name|String
name|mediaType
init|=
name|properties
operator|.
name|getProperty
argument_list|(
literal|"media-type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mediaType
operator|!=
literal|null
condition|)
block|{
comment|//check, do mediaType have "charset"
if|if
condition|(
operator|!
name|mediaType
operator|.
name|contains
argument_list|(
literal|"charset"
argument_list|)
condition|)
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|mediaType
operator|+
literal|"; charset="
operator|+
name|encoding
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|response
operator|.
name|setContentType
argument_list|(
name|mediaType
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|SAXSerializer
name|sax
init|=
operator|(
name|SAXSerializer
operator|)
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|borrowObject
argument_list|(
name|SAXSerializer
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|final
name|Writer
name|writer
init|=
operator|new
name|BufferedWriter
argument_list|(
name|response
operator|.
name|getWriter
argument_list|()
argument_list|)
decl_stmt|;
name|sax
operator|.
name|setOutput
argument_list|(
name|writer
argument_list|,
name|properties
argument_list|)
expr_stmt|;
specifier|final
name|SAXResult
name|result
init|=
operator|new
name|SAXResult
argument_list|(
name|sax
argument_list|)
decl_stmt|;
name|handler
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|Receiver
name|receiver
init|=
operator|new
name|ReceiverToSAX
argument_list|(
name|handler
argument_list|)
decl_stmt|;
try|try
block|{
name|XIncludeFilter
name|xinclude
init|=
operator|new
name|XIncludeFilter
argument_list|(
name|serializer
argument_list|,
name|receiver
argument_list|)
decl_stmt|;
name|receiver
operator|=
name|xinclude
expr_stmt|;
name|String
name|baseUri
decl_stmt|;
specifier|final
name|String
name|base
init|=
operator|(
name|String
operator|)
name|request
operator|.
name|getAttribute
argument_list|(
name|REQ_ATTRIBUTE_BASE
argument_list|)
decl_stmt|;
if|if
condition|(
name|base
operator|!=
literal|null
condition|)
block|{
name|baseUri
operator|=
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
name|base
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
literal|"xmldb:exist://"
argument_list|)
condition|)
block|{
name|baseUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|uri
argument_list|)
operator|.
name|getCollectionPath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|baseUri
operator|=
name|getCurrentDir
argument_list|(
name|request
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
name|xinclude
operator|.
name|setModuleLoadPath
argument_list|(
name|baseUri
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setReceiver
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputNode
operator|!=
literal|null
condition|)
block|{
name|serializer
operator|.
name|toSAX
argument_list|(
operator|(
name|NodeValue
operator|)
name|inputNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|SAXToReceiver
name|saxreceiver
init|=
operator|new
name|SAXToReceiver
argument_list|(
name|receiver
argument_list|)
decl_stmt|;
specifier|final
name|XMLReader
name|reader
init|=
name|pool
operator|.
name|getParserPool
argument_list|()
operator|.
name|borrowXMLReader
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|saxreceiver
argument_list|)
expr_stmt|;
comment|//Handle gziped input stream
name|InputStream
name|stream
decl_stmt|;
name|InputStream
name|inStream
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|request
operator|.
name|getInputStream
argument_list|()
argument_list|)
decl_stmt|;
name|inStream
operator|.
name|mark
argument_list|(
literal|10
argument_list|)
expr_stmt|;
try|try
block|{
name|stream
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|inStream
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|inStream
operator|.
name|reset
argument_list|()
expr_stmt|;
name|stream
operator|=
name|inStream
expr_stmt|;
block|}
name|reader
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|stream
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXParseException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_INTERNAL_SERVER_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"SAX exception while transforming node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|SerializerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|returnObject
argument_list|(
name|sax
argument_list|)
expr_stmt|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
name|response
operator|.
name|flushBuffer
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"IO exception while transforming node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Exception while transforming node: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"An error occurred: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/*      * Please add comments to this method. make assumption clear. These might not be valid.      */
specifier|private
name|Stylesheet
name|stylesheet
parameter_list|(
name|String
name|stylesheet
parameter_list|,
name|HttpServletRequest
name|request
parameter_list|,
name|HttpServletResponse
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Check if stylesheet contains an URI. If not, try to resolve from file system
if|if
condition|(
name|stylesheet
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|==
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
comment|// replace double slash
name|stylesheet
operator|=
name|stylesheet
operator|.
name|replaceAll
argument_list|(
literal|"//"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|Path
name|f
init|=
name|Paths
operator|.
name|get
argument_list|(
name|stylesheet
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|f
argument_list|)
condition|)
block|{
comment|// Found file, get URI
name|stylesheet
operator|=
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// if the stylesheet path is absolute, it must be resolved relative to the webapp root
comment|// f.isAbsolute is problematic on windows.
if|if
condition|(
name|stylesheet
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
specifier|final
name|String
name|url
init|=
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
name|stylesheet
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|==
literal|null
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Stylesheet not found (URL: "
operator|+
name|stylesheet
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|f
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|stylesheet
operator|=
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// relative path is relative to the current working directory
name|f
operator|=
name|getCurrentDir
argument_list|(
name|request
argument_list|)
operator|.
name|resolve
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
name|stylesheet
operator|=
name|f
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_NOT_FOUND
argument_list|,
literal|"Stylesheet not found (URL: "
operator|+
name|stylesheet
operator|+
literal|")"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
block|}
return|return
name|TemplatesFactory
operator|.
name|stylesheet
argument_list|(
name|stylesheet
argument_list|,
literal|""
argument_list|,
name|isCaching
argument_list|()
argument_list|)
return|;
block|}
comment|/*      * Please explain what this method is about. Write about assumptions / input.      */
specifier|private
name|Path
name|getCurrentDir
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|)
block|{
name|String
name|path
init|=
name|request
operator|.
name|getPathTranslated
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|==
literal|null
condition|)
block|{
name|path
operator|=
name|request
operator|.
name|getRequestURI
argument_list|()
operator|.
name|substring
argument_list|(
name|request
operator|.
name|getContextPath
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|int
name|p
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
name|path
operator|=
name|getServletContext
argument_list|()
operator|.
name|getRealPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Path
name|file
init|=
name|Paths
operator|.
name|get
argument_list|(
name|path
argument_list|)
operator|.
name|normalize
argument_list|()
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
name|file
return|;
block|}
else|else
block|{
return|return
name|file
operator|.
name|getParent
argument_list|()
return|;
block|}
block|}
comment|/**      * Copy "xslt." attributes from HTTP request to transformer. Does not copy 'input', 'output'      * and 'styleheet' attributes.      */
specifier|private
name|void
name|setTransformerParameters
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Transformer
name|transformer
parameter_list|)
throws|throws
name|XPathException
block|{
for|for
control|(
specifier|final
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|request
operator|.
name|getAttributeNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|name
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|REQ_ATTRIBUTE_PREFIX
argument_list|)
operator|&&
operator|!
operator|(
name|name
operator|.
name|startsWith
argument_list|(
name|REQ_ATTRIBUTE_OUTPUT
argument_list|)
operator|||
name|REQ_ATTRIBUTE_INPUT
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|REQ_ATTRIBUTE_STYLESHEET
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|)
condition|)
block|{
name|Object
name|value
init|=
name|request
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|NodeValue
condition|)
block|{
specifier|final
name|NodeValue
name|nv
init|=
operator|(
name|NodeValue
operator|)
name|value
decl_stmt|;
if|if
condition|(
name|nv
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|IN_MEMORY_NODE
condition|)
block|{
name|value
operator|=
name|nv
operator|.
name|toMemNodeSet
argument_list|()
expr_stmt|;
block|}
block|}
name|transformer
operator|.
name|setParameter
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|transformer
operator|.
name|setParameter
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|REQ_ATTRIBUTE_PREFIX
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Copies 'output' attributes to properties object.      */
specifier|private
name|void
name|setOutputProperties
parameter_list|(
name|HttpServletRequest
name|request
parameter_list|,
name|Properties
name|properties
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Enumeration
argument_list|<
name|String
argument_list|>
name|e
init|=
name|request
operator|.
name|getAttributeNames
argument_list|()
init|;
name|e
operator|.
name|hasMoreElements
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|name
init|=
name|e
operator|.
name|nextElement
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|startsWith
argument_list|(
name|REQ_ATTRIBUTE_OUTPUT
argument_list|)
condition|)
block|{
specifier|final
name|Object
name|value
init|=
name|request
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
literal|null
condition|)
block|{
name|properties
operator|.
name|setProperty
argument_list|(
name|name
operator|.
name|substring
argument_list|(
name|REQ_ATTRIBUTE_OUTPUT
operator|.
name|length
argument_list|()
argument_list|)
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

