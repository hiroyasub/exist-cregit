begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_comment
comment|/**  * Defines occurrence indicators (*,?,+).  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|Cardinality
block|{
specifier|public
specifier|final
specifier|static
name|int
name|ZERO
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|ONE
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MANY
init|=
literal|4
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|EMPTY
init|=
name|ZERO
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|EXACTLY_ONE
init|=
name|ONE
decl_stmt|;
comment|/** indicator '+' **/
specifier|public
specifier|final
specifier|static
name|int
name|ONE_OR_MORE
init|=
name|ONE
operator||
name|MANY
decl_stmt|;
comment|/** indicator '*' **/
specifier|public
specifier|final
specifier|static
name|int
name|ZERO_OR_MORE
init|=
name|ZERO
operator||
name|ONE
operator||
name|MANY
decl_stmt|;
comment|/** indicator '?' **/
specifier|public
specifier|final
specifier|static
name|int
name|ZERO_OR_ONE
init|=
name|ZERO
operator||
name|ONE
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|toString
parameter_list|(
name|int
name|cardinality
parameter_list|)
block|{
switch|switch
condition|(
name|cardinality
condition|)
block|{
case|case
name|EMPTY
case|:
return|return
literal|"empty()"
return|;
case|case
name|EXACTLY_ONE
case|:
return|return
literal|""
return|;
case|case
name|ONE_OR_MORE
case|:
return|return
literal|"+"
return|;
case|case
name|ZERO_OR_MORE
case|:
return|return
literal|"*"
return|;
case|case
name|ZERO_OR_ONE
case|:
return|return
literal|"?"
return|;
default|default:
comment|// impossible
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown cardinality: "
operator|+
name|cardinality
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|final
specifier|static
name|String
name|getDescription
parameter_list|(
name|int
name|cardinality
parameter_list|)
block|{
switch|switch
condition|(
name|cardinality
condition|)
block|{
case|case
name|EMPTY
case|:
return|return
literal|"empty"
return|;
case|case
name|EXACTLY_ONE
case|:
return|return
literal|"exactly one"
return|;
case|case
name|ONE_OR_MORE
case|:
return|return
literal|"one or more"
return|;
case|case
name|ZERO_OR_MORE
case|:
return|return
literal|"zero or more"
return|;
case|case
name|ZERO_OR_ONE
case|:
return|return
literal|"zero or one"
return|;
case|case
name|MANY
case|:
return|return
literal|"many"
return|;
default|default:
comment|// impossible
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"unknown cardinality: "
operator|+
name|cardinality
argument_list|)
throw|;
block|}
block|}
specifier|public
specifier|final
specifier|static
name|boolean
name|checkCardinality
parameter_list|(
name|int
name|required
parameter_list|,
name|int
name|cardinality
parameter_list|)
block|{
return|return
operator|(
operator|(
name|required
operator|&
name|cardinality
operator|)
operator|==
name|cardinality
operator|)
return|;
block|}
block|}
end_class

end_unit

