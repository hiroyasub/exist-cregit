begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SimpleTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|DocumentTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|Trigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerStatePerThread
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|SessionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|ExistPDP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|NullAccessContextException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|SourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|UpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockedDocumentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Collations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|session
operator|.
name|SessionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryLexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryTreeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|JavaObjectValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_comment
comment|/**  * The current XQuery execution context. Contains the static as well  * as the dynamic XQuery context components.  *   * @author Wolfgang Meier (wolfgang@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|XQueryContext
block|{
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_ELEMENT_NAME
init|=
literal|"xquery"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_MODULES_ELEMENT_NAME
init|=
literal|"builtin-modules"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ENABLE_QUERY_REWRITING_ATTRIBUTE
init|=
literal|"enable-query-rewriting"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XQUERY_BACKWARD_COMPATIBLE_ATTRIBUTE
init|=
literal|"backwardCompatible"
decl_stmt|;
comment|//TODO : move elsewhere ?
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_MODULE_ELEMENT_NAME
init|=
literal|"module"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BUILT_IN_MODULE_URI_ATTRIBUTE
init|=
literal|"uri"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|BUILT_IN_MODULE_CLASS_ATTRIBUTE
init|=
literal|"class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
init|=
literal|"xquery.backwardCompatible"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_ENABLE_QUERY_REWRITING
init|=
literal|"xquery.enable-query-rewriting"
decl_stmt|;
comment|//TODO : move elsewhere ?
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_BUILT_IN_MODULES
init|=
literal|"xquery.modules"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAVA_URI_START
init|=
literal|"java:"
decl_stmt|;
comment|//private static final String XMLDB_URI_START = "xmldb:exist://";
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|TEMP_STORE_ERROR
init|=
literal|"Error occurred while storing temporary data"
decl_stmt|;
comment|// Static namespace/prefix mappings
specifier|protected
name|HashMap
name|staticNamespaces
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Local in-scope namespace/prefix mappings in the current context
specifier|protected
name|HashMap
name|inScopeNamespaces
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Inherited in-scope namespace/prefix mappings in the current context
specifier|protected
name|HashMap
name|inheritedInScopeNamespaces
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Static prefix/namespace mappings
specifier|protected
name|HashMap
name|staticPrefixes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Local prefix/namespace mappings in the current context
specifier|protected
name|HashMap
name|inScopePrefixes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Inherited prefix/namespace mappings in the current context
specifier|protected
name|HashMap
name|inheritedInScopePrefixes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// Local namespace stack
specifier|protected
specifier|final
name|Stack
name|namespaceStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
comment|// Known user defined functions in the local module
specifier|protected
name|TreeMap
name|declaredFunctions
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
comment|// Globally declared variables
specifier|protected
name|TreeMap
name|globalVariables
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
comment|// The last element in the linked list of local in-scope variables
specifier|protected
name|LocalVariable
name|lastVar
init|=
literal|null
decl_stmt|;
specifier|protected
name|Stack
name|contextStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
specifier|final
name|Stack
name|callStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
comment|// The current size of the variable stack
specifier|protected
name|int
name|variableStackSize
init|=
literal|0
decl_stmt|;
comment|// Unresolved references to user defined functions
specifier|protected
specifier|final
name|Stack
name|forwardReferences
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
comment|// List of options declared for this query
specifier|protected
name|List
name|options
init|=
literal|null
decl_stmt|;
comment|//The Calendar for this context : may be changed by some options
name|XMLGregorianCalendar
name|calendar
init|=
literal|null
decl_stmt|;
name|TimeZone
name|implicitTimeZone
init|=
literal|null
decl_stmt|;
comment|/**      * the watchdog object assigned to this query      *        * @uml.property name="watchdog"      * @uml.associationEnd multiplicity="(1 1)"      */
specifier|protected
name|XQueryWatchDog
name|watchdog
decl_stmt|;
comment|/** 	 * Loaded modules. 	 */
specifier|protected
name|HashMap
name|modules
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**  	 * The set of statically known documents specified as 	 * an array of paths to documents and collections. 	 */
specifier|protected
name|XmldbURI
index|[]
name|staticDocumentPaths
init|=
literal|null
decl_stmt|;
comment|/** 	 * The actual set of statically known documents. This 	 * will be generated on demand from staticDocumentPaths. 	 */
specifier|protected
name|DocumentSet
name|staticDocuments
init|=
literal|null
decl_stmt|;
comment|/**  	 * The set of statically known documents specified as 	 * an array of paths to documents and collections. 	 */
specifier|protected
name|XmldbURI
index|[]
name|staticCollections
init|=
literal|null
decl_stmt|;
comment|/** 	 * The main database broker object providing access 	 * to storage and indexes. Every XQuery has its own 	 * DBBroker object. 	 */
specifier|protected
name|DBBroker
name|broker
decl_stmt|;
comment|/**      * A general-purpose map to set attributes in the current      * query context.      */
specifier|protected
name|Map
name|attributes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|protected
name|AnyURIValue
name|baseURI
init|=
name|AnyURIValue
operator|.
name|EMPTY_URI
decl_stmt|;
specifier|protected
name|boolean
name|baseURISetInProlog
init|=
literal|false
decl_stmt|;
specifier|protected
name|String
name|moduleLoadPath
init|=
literal|"."
decl_stmt|;
specifier|protected
name|String
name|defaultFunctionNamespace
init|=
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
decl_stmt|;
specifier|protected
name|AnyURIValue
name|defaultElementNamespace
init|=
name|AnyURIValue
operator|.
name|EMPTY_URI
decl_stmt|;
specifier|protected
name|AnyURIValue
name|defaultElementNamespaceSchema
init|=
name|AnyURIValue
operator|.
name|EMPTY_URI
decl_stmt|;
comment|/** 	 * The default collation URI 	 */
specifier|private
name|String
name|defaultCollation
init|=
name|Collations
operator|.
name|CODEPOINT
decl_stmt|;
comment|/** 	 * Default Collator. Will be null for the default unicode codepoint collation. 	 */
specifier|private
name|Collator
name|defaultCollator
init|=
literal|null
decl_stmt|;
comment|/** 	 * Set to true to enable XPath 1.0 	 * backwards compatibility. 	 */
specifier|private
name|boolean
name|backwardsCompatible
init|=
literal|false
decl_stmt|;
comment|/** 	 * Should whitespace inside node constructors be stripped? 	 */
specifier|private
name|boolean
name|stripWhitespace
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|preserveNamespaces
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|inheritNamespaces
init|=
literal|true
decl_stmt|;
comment|/** 	 * Should empty order greatest or least? 	 */
specifier|private
name|boolean
name|orderEmptyGreatest
init|=
literal|true
decl_stmt|;
comment|/** 	 * The position of the currently processed item in the context  	 * sequence. This field has to be set on demand, for example, 	 * before calling the fn:position() function.  	 */
specifier|private
name|int
name|contextPosition
init|=
literal|0
decl_stmt|;
comment|/** 	 * The builder used for creating in-memory document  	 * fragments 	 */
specifier|private
name|MemTreeBuilder
name|builder
init|=
literal|null
decl_stmt|;
comment|/** 	 * Stack for temporary document fragments 	 */
specifier|private
name|Stack
name|fragmentStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
comment|/** 	 * The root of the expression tree 	 */
specifier|private
name|Expression
name|rootExpression
decl_stmt|;
comment|/** 	 * An incremental counter to count the expressions in 	 * the current XQuery. Used during compilation to assign 	 * a unique ID to every expression. 	 */
specifier|private
name|int
name|expressionCounter
init|=
literal|0
decl_stmt|;
comment|/** 	 * Should all documents loaded by the query be locked? 	 * If set to true, it is the responsibility of the calling client 	 * code to unlock documents after the query has completed. 	 */
comment|//	private boolean lockDocumentsOnLoad = false;
comment|/**      * Documents locked during the query.      */
comment|//	private LockedDocumentMap lockedDocuments = null;
specifier|private
name|LockedDocumentMap
name|protectedDocuments
init|=
literal|null
decl_stmt|;
comment|/**      * The profiler instance used by this context.      */
specifier|private
name|Profiler
name|profiler
init|=
operator|new
name|Profiler
argument_list|()
decl_stmt|;
comment|//For holding XQuery Context variables from setXQueryContextVar() and getXQueryContextVar()
name|HashMap
name|XQueryContextVars
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XQUERY_CONTEXTVAR_XQUERY_UPDATE_ERROR
init|=
literal|"_eXist_xquery_update_error"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTTP_SESSIONVAR_XMLDB_USER
init|=
literal|"_eXist_xmldb_user"
decl_stmt|;
comment|//Transaction for  batched xquery updates
specifier|private
name|Txn
name|batchTransaction
init|=
literal|null
decl_stmt|;
specifier|private
name|DocumentSet
name|batchTransactionTriggers
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
specifier|private
name|AccessContext
name|accessCtx
decl_stmt|;
specifier|private
name|ContextUpdateListener
name|updateListener
init|=
literal|null
decl_stmt|;
specifier|private
name|boolean
name|enableOptimizer
init|=
literal|true
decl_stmt|;
specifier|private
name|XQueryContext
parameter_list|()
block|{
block|}
specifier|protected
name|XQueryContext
parameter_list|(
name|AccessContext
name|accessCtx
parameter_list|)
block|{
if|if
condition|(
name|accessCtx
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullAccessContextException
argument_list|()
throw|;
name|this
operator|.
name|accessCtx
operator|=
name|accessCtx
expr_stmt|;
name|builder
operator|=
operator|new
name|MemTreeBuilder
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
specifier|public
name|XQueryContext
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|AccessContext
name|accessCtx
parameter_list|)
block|{
name|this
argument_list|(
name|accessCtx
argument_list|)
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|loadDefaults
argument_list|(
name|broker
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryContext
parameter_list|(
name|XQueryContext
name|copyFrom
parameter_list|)
block|{
name|this
argument_list|(
name|copyFrom
operator|.
name|getAccessContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|copyFrom
operator|.
name|broker
expr_stmt|;
name|loadDefaultNS
argument_list|()
expr_stmt|;
name|Iterator
name|prefixes
init|=
name|copyFrom
operator|.
name|staticNamespaces
operator|.
name|keySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|prefixes
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|prefix
init|=
operator|(
name|String
operator|)
name|prefixes
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
literal|"xml"
argument_list|)
operator|||
name|prefix
operator|.
name|equals
argument_list|(
literal|"xmlns"
argument_list|)
condition|)
block|{
continue|continue;
block|}
try|try
block|{
name|declareNamespace
argument_list|(
name|prefix
argument_list|,
operator|(
name|String
operator|)
name|copyFrom
operator|.
name|staticNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|XQueryContext
name|copyContext
parameter_list|()
block|{
name|XQueryContext
name|ctx
init|=
operator|new
name|XQueryContext
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|copyFields
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
return|return
name|ctx
return|;
block|}
specifier|protected
name|void
name|copyFields
parameter_list|(
name|XQueryContext
name|ctx
parameter_list|)
block|{
name|ctx
operator|.
name|calendar
operator|=
name|this
operator|.
name|calendar
expr_stmt|;
name|ctx
operator|.
name|implicitTimeZone
operator|=
name|this
operator|.
name|implicitTimeZone
expr_stmt|;
name|ctx
operator|.
name|baseURI
operator|=
name|this
operator|.
name|baseURI
expr_stmt|;
name|ctx
operator|.
name|baseURISetInProlog
operator|=
name|this
operator|.
name|baseURISetInProlog
expr_stmt|;
name|ctx
operator|.
name|staticDocumentPaths
operator|=
name|this
operator|.
name|staticDocumentPaths
expr_stmt|;
name|ctx
operator|.
name|staticDocuments
operator|=
name|this
operator|.
name|staticDocuments
expr_stmt|;
name|ctx
operator|.
name|moduleLoadPath
operator|=
name|this
operator|.
name|moduleLoadPath
expr_stmt|;
name|ctx
operator|.
name|defaultFunctionNamespace
operator|=
name|this
operator|.
name|defaultFunctionNamespace
expr_stmt|;
name|ctx
operator|.
name|defaultElementNamespace
operator|=
name|this
operator|.
name|defaultElementNamespace
expr_stmt|;
name|ctx
operator|.
name|defaultCollation
operator|=
name|this
operator|.
name|defaultCollation
expr_stmt|;
name|ctx
operator|.
name|defaultCollator
operator|=
name|this
operator|.
name|defaultCollator
expr_stmt|;
name|ctx
operator|.
name|backwardsCompatible
operator|=
name|this
operator|.
name|backwardsCompatible
expr_stmt|;
name|ctx
operator|.
name|enableOptimizer
operator|=
name|this
operator|.
name|enableOptimizer
expr_stmt|;
name|ctx
operator|.
name|stripWhitespace
operator|=
name|this
operator|.
name|stripWhitespace
expr_stmt|;
name|ctx
operator|.
name|preserveNamespaces
operator|=
name|this
operator|.
name|preserveNamespaces
expr_stmt|;
name|ctx
operator|.
name|inheritNamespaces
operator|=
name|this
operator|.
name|inheritNamespaces
expr_stmt|;
name|ctx
operator|.
name|orderEmptyGreatest
operator|=
name|this
operator|.
name|orderEmptyGreatest
expr_stmt|;
name|ctx
operator|.
name|declaredFunctions
operator|=
operator|new
name|TreeMap
argument_list|(
name|this
operator|.
name|declaredFunctions
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|globalVariables
operator|=
operator|new
name|TreeMap
argument_list|(
name|this
operator|.
name|globalVariables
argument_list|)
expr_stmt|;
comment|// make imported modules available in the new context
name|ctx
operator|.
name|modules
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|this
operator|.
name|modules
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
try|try
block|{
name|Module
name|module
init|=
operator|(
name|Module
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|ctx
operator|.
name|modules
operator|.
name|put
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
name|String
name|prefix
init|=
operator|(
name|String
operator|)
name|this
operator|.
name|staticPrefixes
operator|.
name|get
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|declareNamespace
argument_list|(
name|prefix
argument_list|,
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|// ignore
block|}
block|}
name|ctx
operator|.
name|watchdog
operator|=
name|this
operator|.
name|watchdog
expr_stmt|;
name|ctx
operator|.
name|lastVar
operator|=
name|this
operator|.
name|lastVar
expr_stmt|;
name|ctx
operator|.
name|variableStackSize
operator|=
name|getCurrentStackSize
argument_list|()
expr_stmt|;
name|ctx
operator|.
name|contextStack
operator|=
name|this
operator|.
name|contextStack
expr_stmt|;
block|}
comment|/** 	 * Prepares the current context before xquery execution 	 */
specifier|public
name|void
name|prepare
parameter_list|()
block|{
comment|//if there is an existing user in the current http session
comment|//then set the DBBroker user
name|User
name|user
init|=
name|getUserFromHttpSession
argument_list|()
decl_stmt|;
if|if
condition|(
name|user
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
block|}
comment|//Reset current context position
name|setContextPosition
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//Note that, for some reasons, an XQueryContext might be used without calling this method
try|try
block|{
if|if
condition|(
name|calendar
operator|==
literal|null
condition|)
block|{
comment|//Initialize to current dateTime
name|calendar
operator|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|implicitTimeZone
operator|==
literal|null
condition|)
block|{
name|implicitTimeZone
operator|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
expr_stmt|;
if|if
condition|(
name|implicitTimeZone
operator|.
name|inDaylightTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
condition|)
name|implicitTimeZone
operator|.
name|setRawOffset
argument_list|(
name|implicitTimeZone
operator|.
name|getRawOffset
argument_list|()
operator|+
name|implicitTimeZone
operator|.
name|getDSTSavings
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|AccessContext
name|getAccessContext
parameter_list|()
block|{
return|return
name|accessCtx
return|;
block|}
comment|/**      * @return true if profiling is enabled for this context.      */
specifier|public
name|boolean
name|isProfilingEnabled
parameter_list|()
block|{
return|return
name|profiler
operator|.
name|isEnabled
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isProfilingEnabled
parameter_list|(
name|int
name|verbosity
parameter_list|)
block|{
return|return
name|profiler
operator|.
name|isEnabled
argument_list|()
operator|&&
name|profiler
operator|.
name|verbosity
argument_list|()
operator|>=
name|verbosity
return|;
block|}
comment|/**      * Returns the {@link Profiler} instance of this context       * if profiling is enabled.      *       * @return the profiler instance.      */
specifier|public
name|Profiler
name|getProfiler
parameter_list|()
block|{
return|return
name|profiler
return|;
block|}
comment|/** 	 * Called from the XQuery compiler to set the root expression 	 * for this context. 	 *  	 * @param expr 	 */
specifier|public
name|void
name|setRootExpression
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
name|this
operator|.
name|rootExpression
operator|=
name|expr
expr_stmt|;
block|}
comment|/** 	 * Returns the root expression of the XQuery associated with 	 * this context. 	 *  	 * @return root expression 	 */
specifier|public
name|Expression
name|getRootExpression
parameter_list|()
block|{
return|return
name|rootExpression
return|;
block|}
comment|/** 	 * Returns the next unique expression id. Every expression 	 * in the XQuery is identified by a unique id. During compilation, 	 * expressions are assigned their id by calling this method. 	 *   	 * @return The next unique expression id. 	 */
specifier|protected
name|int
name|nextExpressionId
parameter_list|()
block|{
return|return
name|expressionCounter
operator|++
return|;
block|}
comment|/**      * Returns the number of expression objects in the internal      * representation of the query. Used to estimate the size      * of the query.      *       * @return number of expression objects       */
specifier|public
name|int
name|getExpressionCount
parameter_list|()
block|{
return|return
name|expressionCounter
return|;
block|}
comment|/** 	 * Declare a user-defined prefix/namespace mapping. 	 *  	 * eXist internally keeps a table containing all prefix/namespace 	 * mappings it found in documents, which have been previously 	 * stored into the database. These default mappings need not to be 	 * declared explicitely. 	 *  	 * @param prefix 	 * @param uri 	 */
specifier|public
name|void
name|declareNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
name|prefix
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
name|uri
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|prefix
operator|.
name|equals
argument_list|(
literal|"xml"
argument_list|)
operator|||
name|prefix
operator|.
name|equals
argument_list|(
literal|"xmlns"
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"err:XQST0070: Namespace predefined prefix '"
operator|+
name|prefix
operator|+
literal|"' can not be bound"
argument_list|)
throw|;
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|Namespaces
operator|.
name|XML_NS
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"err:XQST0070: Namespace URI '"
operator|+
name|uri
operator|+
literal|"' must be bound to the 'xml' prefix"
argument_list|)
throw|;
specifier|final
name|String
name|prevURI
init|=
operator|(
name|String
operator|)
name|staticNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
comment|//This prefix was not bound
if|if
condition|(
name|prevURI
operator|==
literal|null
condition|)
block|{
comment|//Bind it
if|if
condition|(
name|uri
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|staticNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|staticPrefixes
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//Nothing to bind
else|else
block|{
comment|//TODO : check the specs : unbinding an NS which is not already bound may be disallowed.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unbinding unbound prefix '"
operator|+
name|prefix
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
comment|//This prefix was bound
block|{
comment|//Unbind it
if|if
condition|(
name|uri
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
comment|// if an empty namespace is specified,
comment|// remove any existing mapping for this namespace
comment|//TODO : improve, since XML_NS can't be unbound
name|staticPrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|staticNamespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//those prefixes can be rebound to different URIs
if|if
condition|(
operator|(
name|prefix
operator|.
name|equals
argument_list|(
literal|"xs"
argument_list|)
operator|&&
name|Namespaces
operator|.
name|SCHEMA_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
operator|||
operator|(
name|prefix
operator|.
name|equals
argument_list|(
literal|"xsi"
argument_list|)
operator|&&
name|Namespaces
operator|.
name|SCHEMA_INSTANCE_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
operator|||
operator|(
name|prefix
operator|.
name|equals
argument_list|(
literal|"xdt"
argument_list|)
operator|&&
name|Namespaces
operator|.
name|XPATH_DATATYPES_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
operator|||
operator|(
name|prefix
operator|.
name|equals
argument_list|(
literal|"fn"
argument_list|)
operator|&&
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
operator|||
operator|(
name|prefix
operator|.
name|equals
argument_list|(
literal|"local"
argument_list|)
operator|&&
name|Namespaces
operator|.
name|XQUERY_LOCAL_NS
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
operator|)
condition|)
block|{
name|staticPrefixes
operator|.
name|remove
argument_list|(
name|prevURI
argument_list|)
expr_stmt|;
name|staticNamespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|staticNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|staticPrefixes
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//Nothing to bind (not sure if it should raise an error though)
else|else
block|{
comment|//TODO : check the specs : unbinding an NS which is not already bound may be disallowed.
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unbinding unbound prefix '"
operator|+
name|prefix
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//Forbids rebinding the *same* prefix in a *different* namespace in this *same* context
if|if
condition|(
operator|!
name|uri
operator|.
name|equals
argument_list|(
name|prevURI
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"err:XQST0033: Namespace prefix '"
operator|+
name|prefix
operator|+
literal|"' is already bound to a different uri '"
operator|+
name|prevURI
operator|+
literal|"'"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
name|void
name|declareNamespaces
parameter_list|(
name|Map
name|namespaceMap
parameter_list|)
block|{
name|Map
operator|.
name|Entry
name|entry
decl_stmt|;
name|String
name|prefix
decl_stmt|,
name|uri
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaceMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|prefix
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|uri
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
name|prefix
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
name|uri
operator|=
literal|""
expr_stmt|;
name|staticNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|staticPrefixes
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Declare an in-scope namespace. This is called during query execution. 	 *  	 * @param prefix 	 * @param uri 	 */
specifier|public
name|void
name|declareInScopeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|uri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null argument passed to declareNamespace"
argument_list|)
throw|;
if|if
condition|(
name|inheritedInScopePrefixes
operator|.
name|get
argument_list|(
name|getURIForPrefix
argument_list|(
name|prefix
argument_list|)
argument_list|)
operator|!=
literal|null
condition|)
name|inheritedInScopePrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|inheritedInScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
operator|!=
literal|null
condition|)
name|inheritedInScopeNamespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|inScopeNamespaces
operator|==
literal|null
condition|)
name|inScopeNamespaces
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|inScopePrefixes
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|inScopeNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Returns the current default function namespace. 	 *  	 * @return current default function namespace 	 */
specifier|public
name|String
name|getDefaultFunctionNamespace
parameter_list|()
block|{
return|return
name|defaultFunctionNamespace
return|;
block|}
comment|/** 	 * Set the default function namespace. By default, this 	 * points to the namespace for XPath built-in functions. 	 *  	 * @param uri 	 */
specifier|public
name|void
name|setDefaultFunctionNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//Not sure for the 2nd clause : eXist forces the function NS as default.
if|if
condition|(
name|defaultFunctionNamespace
operator|!=
literal|null
operator|&&
operator|!
name|defaultFunctionNamespace
operator|.
name|equals
argument_list|(
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
operator|&&
operator|!
name|defaultFunctionNamespace
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"err:XQST0066: default function namespace is already set to: '"
operator|+
name|defaultFunctionNamespace
operator|+
literal|"'"
argument_list|)
throw|;
name|defaultFunctionNamespace
operator|=
name|uri
expr_stmt|;
block|}
comment|/** 	 * Returns the current default element namespace. 	 *  	 * @return current default element namespace schema 	 */
specifier|public
name|String
name|getDefaultElementNamespaceSchema
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|defaultElementNamespaceSchema
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/** 	 * Set the default element namespace. By default, this 	 * points to the empty uri. 	 *  	 * @param uri 	 */
specifier|public
name|void
name|setDefaultElementNamespaceSchema
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// eXist forces the empty element NS as default.
if|if
condition|(
operator|!
name|defaultElementNamespaceSchema
operator|.
name|equals
argument_list|(
name|AnyURIValue
operator|.
name|EMPTY_URI
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"err:XQST0066: default function namespace schema is already set to: '"
operator|+
name|defaultElementNamespaceSchema
operator|.
name|getStringValue
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
name|defaultElementNamespaceSchema
operator|=
operator|new
name|AnyURIValue
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Returns the current default element namespace. 	 *  	 * @return current default element namespace 	 */
specifier|public
name|String
name|getDefaultElementNamespace
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|defaultElementNamespace
operator|.
name|getStringValue
argument_list|()
return|;
block|}
comment|/**      * Set the default element namespace. By default, this 	 * points to the empty uri. 	 *       * @param uri a<code>String</code> value      * @param schema a<code>String</code> value      * @exception XPathException if an error occurs      */
specifier|public
name|void
name|setDefaultElementNamespace
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// eXist forces the empty element NS as default.
if|if
condition|(
operator|!
name|defaultElementNamespace
operator|.
name|equals
argument_list|(
name|AnyURIValue
operator|.
name|EMPTY_URI
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"err:XQST0066: default element namespace is already set to: '"
operator|+
name|defaultElementNamespace
operator|.
name|getStringValue
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
name|defaultElementNamespace
operator|=
operator|new
name|AnyURIValue
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|defaultElementNamespaceSchema
operator|=
operator|new
name|AnyURIValue
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Set the default collation to be used by all operators and functions on strings. 	 * Throws an exception if the collation is unknown or cannot be instantiated. 	 *  	 * @param uri 	 * @throws XPathException 	 */
specifier|public
name|void
name|setDefaultCollation
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|Collations
operator|.
name|CODEPOINT
argument_list|)
operator|||
name|uri
operator|.
name|equals
argument_list|(
name|Collations
operator|.
name|CODEPOINT_SHORT
argument_list|)
condition|)
block|{
name|defaultCollation
operator|=
name|Collations
operator|.
name|CODEPOINT
expr_stmt|;
name|defaultCollator
operator|=
literal|null
expr_stmt|;
block|}
name|URI
name|uriTest
decl_stmt|;
try|try
block|{
name|uriTest
operator|=
operator|new
name|URI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"err:XQST0038: Unknown collation : '"
operator|+
name|uri
operator|+
literal|"'"
argument_list|)
throw|;
block|}
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|Collations
operator|.
name|EXIST_COLLATION_URI
argument_list|)
operator|||
name|uri
operator|.
name|startsWith
argument_list|(
literal|"?"
argument_list|)
operator|||
name|uriTest
operator|.
name|isAbsolute
argument_list|()
condition|)
block|{
name|defaultCollator
operator|=
name|Collations
operator|.
name|getCollationFromURI
argument_list|(
name|this
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|defaultCollation
operator|=
name|uri
expr_stmt|;
block|}
else|else
block|{
name|String
name|absUri
init|=
name|getBaseURI
argument_list|()
operator|.
name|getStringValue
argument_list|()
operator|+
name|uri
decl_stmt|;
name|defaultCollator
operator|=
name|Collations
operator|.
name|getCollationFromURI
argument_list|(
name|this
argument_list|,
name|absUri
argument_list|)
expr_stmt|;
name|defaultCollation
operator|=
name|absUri
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getDefaultCollation
parameter_list|()
block|{
return|return
name|defaultCollation
return|;
block|}
specifier|public
name|Collator
name|getCollator
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
return|return
name|defaultCollator
return|;
return|return
name|Collations
operator|.
name|getCollationFromURI
argument_list|(
name|this
argument_list|,
name|uri
argument_list|)
return|;
block|}
specifier|public
name|Collator
name|getDefaultCollator
parameter_list|()
block|{
return|return
name|defaultCollator
return|;
block|}
comment|/** 	 * Return the namespace URI mapped to the registered prefix 	 * or null if the prefix is not registered. 	 *  	 * @param prefix 	 * @return namespace 	 */
specifier|public
name|String
name|getURIForPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
comment|// try in-scope namespace declarations
name|String
name|uri
init|=
name|inScopeNamespaces
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
return|return
name|uri
return|;
comment|//TODO : test NS inheritance
name|uri
operator|=
name|inheritedInScopeNamespaces
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inheritedInScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
return|return
name|uri
return|;
comment|// Check global declarations
return|return
operator|(
name|String
operator|)
name|staticNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
comment|/* old code checked namespaces first 		String ns = (String) namespaces.get(prefix); 		if (ns == null) 			// try in-scope namespace declarations 			return inScopeNamespaces == null 				? null 				: (String) inScopeNamespaces.get(prefix); 		else 			return ns;         */
block|}
comment|/** 	 * @param uri          * @return the prefix mapped to the registered URI or null if the URI           * is not registered. 	 */
specifier|public
name|String
name|getPrefixForURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|String
name|prefix
init|=
name|inScopePrefixes
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inScopePrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
return|return
name|prefix
return|;
comment|//TODO : test the NS inheritance
name|prefix
operator|=
name|inheritedInScopePrefixes
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inheritedInScopePrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
return|return
name|prefix
return|;
return|return
operator|(
name|String
operator|)
name|staticPrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInScopeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|inScopeNamespaces
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInScopePrefix
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|inScopePrefixes
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inScopePrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInheritedNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|inheritedInScopeNamespaces
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inheritedInScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInheritedPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|inheritedInScopePrefixes
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inheritedInScopePrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
comment|/** 	 * Removes the namespace URI from the prefix/namespace  	 * mappings table. 	 *  	 * @param uri 	 */
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|staticPrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|staticNamespaces
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|inScopePrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|inScopeNamespaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|inScopeNamespaces
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
comment|//TODO : is this relevant ?
name|inheritedInScopePrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|inheritedInScopeNamespaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|inheritedInScopeNamespaces
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
comment|/** 	 * Clear all user-defined prefix/namespace mappings. 	 */
comment|// TODO: remove since never used?
comment|//	public void clearNamespaces() {
comment|//		staticNamespaces.clear();
comment|//		staticPrefixes.clear();
comment|//		if (inScopeNamespaces != null) {
comment|//			inScopeNamespaces.clear();
comment|//			inScopePrefixes.clear();
comment|//		}
comment|//		//TODO : it this relevant ?
comment|//		if (inheritedInScopeNamespaces != null) {
comment|//			inheritedInScopeNamespaces.clear();
comment|//			inheritedInScopePrefixes.clear();
comment|//		}
comment|//		loadDefaults(broker.getConfiguration());
comment|//	}
comment|/** 	 * Set the set of statically known documents for the current 	 * execution context. These documents will be processed if 	 * no explicit document set has been set for the current expression 	 * with fn:doc() or fn:collection(). 	 *  	 * @param docs 	 */
specifier|public
name|void
name|setStaticallyKnownDocuments
parameter_list|(
name|XmldbURI
index|[]
name|docs
parameter_list|)
block|{
name|staticDocumentPaths
operator|=
name|docs
expr_stmt|;
block|}
specifier|public
name|void
name|setStaticallyKnownDocuments
parameter_list|(
name|DocumentSet
name|set
parameter_list|)
block|{
name|staticDocuments
operator|=
name|set
expr_stmt|;
block|}
comment|//TODO : not sure how these 2 options might/have to be related
specifier|public
name|void
name|setCalendar
parameter_list|(
name|XMLGregorianCalendar
name|newCalendar
parameter_list|)
block|{
name|this
operator|.
name|calendar
operator|=
operator|(
name|XMLGregorianCalendar
operator|)
name|newCalendar
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setTimeZone
parameter_list|(
name|TimeZone
name|newTimeZone
parameter_list|)
block|{
name|this
operator|.
name|implicitTimeZone
operator|=
name|newTimeZone
expr_stmt|;
block|}
specifier|public
name|XMLGregorianCalendar
name|getCalendar
parameter_list|()
block|{
comment|//TODO : we might prefer to return null
if|if
condition|(
name|calendar
operator|==
literal|null
condition|)
block|{
try|try
block|{
comment|//Initialize to current dateTime
name|calendar
operator|=
name|DatatypeFactory
operator|.
name|newInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
operator|new
name|GregorianCalendar
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatatypeConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|//That's how we ensure stability of that static context function
return|return
name|calendar
return|;
block|}
specifier|public
name|TimeZone
name|getImplicitTimeZone
parameter_list|()
block|{
if|if
condition|(
name|implicitTimeZone
operator|==
literal|null
condition|)
block|{
name|implicitTimeZone
operator|=
name|TimeZone
operator|.
name|getDefault
argument_list|()
expr_stmt|;
if|if
condition|(
name|implicitTimeZone
operator|.
name|inDaylightTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
condition|)
name|implicitTimeZone
operator|.
name|setRawOffset
argument_list|(
name|implicitTimeZone
operator|.
name|getRawOffset
argument_list|()
operator|+
name|implicitTimeZone
operator|.
name|getDSTSavings
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//That's how we ensure stability of that static context function
return|return
name|this
operator|.
name|implicitTimeZone
return|;
block|}
comment|/** 	 * @return set of statically known documents. 	 */
specifier|public
name|DocumentSet
name|getStaticallyKnownDocuments
parameter_list|()
throws|throws
name|XPathException
block|{
if|if
condition|(
name|staticDocuments
operator|!=
literal|null
condition|)
comment|// the document set has already been built, return it
return|return
name|staticDocuments
return|;
if|if
condition|(
name|protectedDocuments
operator|!=
literal|null
condition|)
block|{
name|staticDocuments
operator|=
name|protectedDocuments
operator|.
name|toDocumentSet
argument_list|()
expr_stmt|;
return|return
name|staticDocuments
return|;
block|}
name|staticDocuments
operator|=
operator|new
name|DocumentSet
argument_list|(
literal|1031
argument_list|)
expr_stmt|;
if|if
condition|(
name|staticDocumentPaths
operator|==
literal|null
condition|)
comment|// no path defined: return all documents in the db
name|broker
operator|.
name|getAllXMLResources
argument_list|(
name|staticDocuments
argument_list|)
expr_stmt|;
else|else
block|{
name|DocumentImpl
name|doc
decl_stmt|;
name|Collection
name|collection
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|staticDocumentPaths
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
try|try
block|{
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|staticDocumentPaths
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|allDocs
argument_list|(
name|broker
argument_list|,
name|staticDocuments
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|doc
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|staticDocumentPaths
index|[
name|i
index|]
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|staticDocuments
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Permission denied to read resource "
operator|+
name|staticDocumentPaths
index|[
name|i
index|]
operator|+
literal|". Skipping it."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|staticDocuments
return|;
block|}
specifier|public
name|void
name|setProtectedDocs
parameter_list|(
name|LockedDocumentMap
name|map
parameter_list|)
block|{
name|this
operator|.
name|protectedDocuments
operator|=
name|map
expr_stmt|;
block|}
specifier|public
name|LockedDocumentMap
name|getProtectedDocs
parameter_list|()
block|{
return|return
name|this
operator|.
name|protectedDocuments
return|;
block|}
specifier|public
name|boolean
name|inProtectedMode
parameter_list|()
block|{
return|return
name|protectedDocuments
operator|!=
literal|null
return|;
block|}
comment|/** 	 * Should loaded documents be locked? 	 *       * see #setLockDocumentsOnLoad(boolean)      * 	 */
specifier|public
name|boolean
name|lockDocumentsOnLoad
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|//	/**
comment|//	 * If lock is true, all documents loaded during query execution
comment|//	 * will be locked. This way, we avoid that query results become
comment|//	 * invalid before the entire result has been processed by the client
comment|//	 * code. All attempts to modify nodes which are part of the result
comment|//	 * set will be blocked.
comment|//	 *
comment|//	 * However, it is the client's responsibility to proper unlock
comment|//	 * all documents once processing is completed.
comment|//	 *
comment|//	 * @param lock
comment|//	 */
comment|//	public void setLockDocumentsOnLoad(boolean lock) {
comment|//	    lockDocumentsOnLoad = lock;
comment|//	    if(lock)
comment|//	        lockedDocuments = new LockedDocumentMap();
comment|//	}
specifier|public
name|void
name|addLockedDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
comment|//        if (lockedDocuments != null)
comment|//           lockedDocuments.add(doc);
block|}
comment|//    /**
comment|//     * Release all locks on documents that have been locked
comment|//     * during query execution.
comment|//     *
comment|//     *@see #setLockDocumentsOnLoad(boolean)
comment|//     */
comment|//	public void releaseLockedDocuments() {
comment|//        if(lockedDocuments != null)
comment|//	        lockedDocuments.unlock();
comment|//	    lockDocumentsOnLoad = false;
comment|//		lockedDocuments = null;
comment|//	}
comment|//    /**
comment|//     * Release all locks on documents not being referenced by the sequence.
comment|//     * This is called after query execution has completed. Only locks on those
comment|//     * documents contained in the final result set will be preserved. All other
comment|//     * locks are released as they are no longer needed.
comment|//     *
comment|//     * @param seq
comment|//     * @throws XPathException
comment|//     */
comment|//	public LockedDocumentMap releaseUnusedDocuments(Sequence seq) throws XPathException {
comment|//	    if(lockedDocuments == null)
comment|//	        return null;
comment|//        // determine the set of documents referenced by nodes in the sequence
comment|//        DocumentSet usedDocs = new DocumentSet();
comment|//        for(SequenceIterator i = seq.iterate(); i.hasNext(); ) {
comment|//            Item next = i.nextItem();
comment|//            if(Type.subTypeOf(next.getType(), Type.NODE)) {
comment|//                NodeValue node = (NodeValue) next;
comment|//                if(node.getImplementationType() == NodeValue.PERSISTENT_NODE) {
comment|//                    DocumentImpl doc = ((NodeProxy)node).getDocument();
comment|//                    if(!usedDocs.contains(doc.getDocId()))
comment|//	                    usedDocs.add(doc, false);
comment|//                }
comment|//            }
comment|//        }
comment|//        LockedDocumentMap remaining = lockedDocuments.unlockSome(usedDocs);
comment|//        lockDocumentsOnLoad = false;
comment|//		lockedDocuments = null;
comment|//        return remaining;
comment|//    }
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|reset
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Prepare this XQueryContext to be reused. This should be      * called when adding an XQuery to the cache. 	 */
specifier|public
name|void
name|reset
parameter_list|(
name|boolean
name|keepGlobals
parameter_list|)
block|{
name|calendar
operator|=
literal|null
expr_stmt|;
name|implicitTimeZone
operator|=
literal|null
expr_stmt|;
name|builder
operator|=
operator|new
name|MemTreeBuilder
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|keepGlobals
condition|)
block|{
comment|// do not reset the statically known documents
name|staticDocumentPaths
operator|=
literal|null
expr_stmt|;
name|staticDocuments
operator|=
literal|null
expr_stmt|;
block|}
name|lastVar
operator|=
literal|null
expr_stmt|;
name|fragmentStack
operator|=
operator|new
name|Stack
argument_list|()
expr_stmt|;
name|callStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|protectedDocuments
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|keepGlobals
condition|)
name|globalVariables
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//remove the context-vars, subsequent execution of the query
comment|//may generate different values for the vars based on the
comment|//content of the db
name|XQueryContextVars
operator|.
name|clear
argument_list|()
expr_stmt|;
name|watchdog
operator|.
name|reset
argument_list|()
expr_stmt|;
name|profiler
operator|.
name|reset
argument_list|()
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|modules
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Module
name|module
init|=
operator|(
name|Module
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|module
operator|.
name|reset
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|clearUpdateListeners
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Returns true if whitespace between constructed element nodes 	 * should be stripped by default. 	 */
specifier|public
name|boolean
name|stripWhitespace
parameter_list|()
block|{
return|return
name|stripWhitespace
return|;
block|}
specifier|public
name|void
name|setStripWhitespace
parameter_list|(
name|boolean
name|strip
parameter_list|)
block|{
name|this
operator|.
name|stripWhitespace
operator|=
name|strip
expr_stmt|;
block|}
comment|/** 	 * Returns true if namespaces for constructed element and document nodes 	 * should be preserved on copy by default. 	 */
specifier|public
name|boolean
name|preserveNamespaces
parameter_list|()
block|{
return|return
name|preserveNamespaces
return|;
block|}
comment|/**      * The method<code>setPreserveNamespaces</code>      *      * @param preserve a<code>boolean</code> value      */
specifier|public
name|void
name|setPreserveNamespaces
parameter_list|(
specifier|final
name|boolean
name|preserve
parameter_list|)
block|{
name|this
operator|.
name|preserveNamespaces
operator|=
name|preserve
expr_stmt|;
block|}
comment|/** 	 * Returns true if namespaces for constructed element and document nodes 	 * should be inherited on copy by default. 	 */
specifier|public
name|boolean
name|inheritNamespaces
parameter_list|()
block|{
return|return
name|inheritNamespaces
return|;
block|}
comment|/**      * The method<code>setInheritNamespaces</code>      *      * @param inherit a<code>boolean</code> value      */
specifier|public
name|void
name|setInheritNamespaces
parameter_list|(
specifier|final
name|boolean
name|inherit
parameter_list|)
block|{
name|this
operator|.
name|inheritNamespaces
operator|=
name|inherit
expr_stmt|;
block|}
comment|/** 	 * Returns true if order empty is set to gretest, otherwise false      * for order empty is least. 	 */
specifier|public
name|boolean
name|orderEmptyGreatest
parameter_list|()
block|{
return|return
name|orderEmptyGreatest
return|;
block|}
comment|/**      * The method<code>setOrderEmptyGreatest</code>      *      * @param order a<code>boolean</code> value      */
specifier|public
name|void
name|setOrderEmptyGreatest
parameter_list|(
specifier|final
name|boolean
name|order
parameter_list|)
block|{
name|this
operator|.
name|orderEmptyGreatest
operator|=
name|order
expr_stmt|;
block|}
comment|/** 	 * @return iterator over all built-in modules currently 	 * registered. 	 */
specifier|public
name|Iterator
name|getModules
parameter_list|()
block|{
return|return
name|modules
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/** 	 * Get the built-in module registered for the given namespace 	 * URI. 	 *  	 * @param namespaceURI 	 * @return built-in module 	 */
specifier|public
name|Module
name|getModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
operator|(
name|Module
operator|)
name|modules
operator|.
name|get
argument_list|(
name|namespaceURI
argument_list|)
return|;
block|}
comment|/** 	 * For compiled expressions: check if the source of any 	 * module imported by the current query has changed since 	 * compilation. 	 */
specifier|public
name|boolean
name|checkModulesValid
parameter_list|()
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|modules
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Module
name|module
init|=
operator|(
name|Module
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|module
operator|.
name|isInternalModule
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|moduleIsValid
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Module with URI "
operator|+
name|module
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|" has changed and needs to be reloaded"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * Load a built-in module from the given class name and assign it to the 	 * namespace URI. The specified class should be a subclass of 	 * {@link Module}. The method will try to instantiate the class. If the 	 * class is not found or an exception is thrown, the method will silently  	 * fail. The namespace URI has to be equal to the namespace URI declared 	 * by the module class. Otherwise, the module is not loaded. 	 *  	 * @param namespaceURI 	 * @param moduleClass 	 */
specifier|public
name|Module
name|loadBuiltInModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|moduleClass
parameter_list|)
block|{
name|Module
name|module
init|=
name|getModule
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
comment|//			LOG.debug("module " + namespaceURI + " is already present");
return|return
name|module
return|;
block|}
return|return
name|initBuiltInModule
argument_list|(
name|namespaceURI
argument_list|,
name|moduleClass
argument_list|)
return|;
block|}
specifier|protected
name|Module
name|initBuiltInModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|moduleClass
parameter_list|)
block|{
name|Module
name|module
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// lookup the class
name|Class
name|mClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|moduleClass
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Module
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mClass
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"failed to load module. "
operator|+
name|moduleClass
operator|+
literal|" is not an instance of org.exist.xquery.Module."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|instantiateModule
argument_list|(
name|namespaceURI
argument_list|,
name|mClass
argument_list|)
expr_stmt|;
comment|//LOG.debug("module " + module.getNamespaceURI() + " loaded successfully.");
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"module class "
operator|+
name|moduleClass
operator|+
literal|" not found. Skipping..."
argument_list|)
expr_stmt|;
block|}
return|return
name|module
return|;
block|}
specifier|protected
name|Module
name|instantiateModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|Class
name|mClass
parameter_list|)
block|{
name|Module
name|module
init|=
literal|null
decl_stmt|;
try|try
block|{
name|module
operator|=
operator|(
name|Module
operator|)
name|mClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|module
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"the module declares a different namespace URI. Expected: "
operator|+
name|namespaceURI
operator|+
literal|" found: "
operator|+
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|getPrefixForURI
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
name|module
operator|.
name|getDefaultPrefix
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|declareNamespace
argument_list|(
name|module
operator|.
name|getDefaultPrefix
argument_list|()
argument_list|,
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|put
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
return|return
name|module
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while instantiating module class "
operator|+
name|mClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while instantiating module class "
operator|+
name|mClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while instantiating module class "
operator|+
name|mClass
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Convenience method that returns the XACML Policy Decision Point for  	 * this database instance.  If XACML has not been enabled, this returns 	 * null. 	 *  	 * @return the PDP for this database instance, or null if XACML is disabled  	 */
specifier|public
name|ExistPDP
name|getPDP
parameter_list|()
block|{
return|return
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getPDP
argument_list|()
return|;
block|}
comment|/** 	 * Declare a user-defined function. All user-defined functions are kept 	 * in a single hash map. 	 *  	 * @param function 	 * @throws XPathException 	 */
specifier|public
name|void
name|declareFunction
parameter_list|(
name|UserDefinedFunction
name|function
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// TODO: redeclaring functions should be forbidden. however, throwing an
comment|// exception will currently break util:eval.
if|if
condition|(
name|Namespaces
operator|.
name|XML_NS
operator|.
name|equals
argument_list|(
name|function
operator|.
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XQST0045: function is in the forbidden namespace '"
operator|+
name|Namespaces
operator|.
name|XML_NS
operator|+
literal|"'"
argument_list|)
throw|;
if|if
condition|(
name|Namespaces
operator|.
name|SCHEMA_NS
operator|.
name|equals
argument_list|(
name|function
operator|.
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XQST0045: function is in the forbidden namespace '"
operator|+
name|Namespaces
operator|.
name|SCHEMA_NS
operator|+
literal|"'"
argument_list|)
throw|;
if|if
condition|(
name|Namespaces
operator|.
name|SCHEMA_INSTANCE_NS
operator|.
name|equals
argument_list|(
name|function
operator|.
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XQST0045: function is in the forbidden namespace '"
operator|+
name|Namespaces
operator|.
name|SCHEMA_INSTANCE_NS
operator|+
literal|"'"
argument_list|)
throw|;
if|if
condition|(
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
operator|.
name|equals
argument_list|(
name|function
operator|.
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XQST0045: function is in the forbidden namespace '"
operator|+
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
operator|+
literal|"'"
argument_list|)
throw|;
name|declaredFunctions
operator|.
name|put
argument_list|(
name|function
operator|.
name|getSignature
argument_list|()
operator|.
name|getFunctionId
argument_list|()
argument_list|,
name|function
argument_list|)
expr_stmt|;
comment|//		if (declaredFunctions.get(function.getSignature().getFunctionId()) == null)
comment|//				declaredFunctions.put(function.getSignature().getFunctionId(), function);
comment|//		else
comment|//			throw new XPathException("XQST0034: function " + function.getName() + " is already defined with the same arity");
block|}
comment|/** 	 * Resolve a user-defined function. 	 *  	 * @param name 	 * @return user-defined function 	 * @throws XPathException 	 */
specifier|public
name|UserDefinedFunction
name|resolveFunction
parameter_list|(
name|QName
name|name
parameter_list|,
name|int
name|argCount
parameter_list|)
throws|throws
name|XPathException
block|{
name|FunctionId
name|id
init|=
operator|new
name|FunctionId
argument_list|(
name|name
argument_list|,
name|argCount
argument_list|)
decl_stmt|;
name|UserDefinedFunction
name|func
init|=
operator|(
name|UserDefinedFunction
operator|)
name|declaredFunctions
operator|.
name|get
argument_list|(
name|id
argument_list|)
decl_stmt|;
return|return
name|func
return|;
block|}
specifier|public
name|Iterator
name|getSignaturesForFunction
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
name|ArrayList
name|signatures
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|declaredFunctions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|UserDefinedFunction
name|func
init|=
operator|(
name|UserDefinedFunction
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|func
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
name|signatures
operator|.
name|add
argument_list|(
name|func
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|signatures
operator|.
name|iterator
argument_list|()
return|;
block|}
specifier|public
name|Iterator
name|localFunctions
parameter_list|()
block|{
return|return
name|declaredFunctions
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/** 	 * Declare a local variable. This is called by variable binding expressions like 	 * "let" and "for". 	 *  	 * @param var 	 * @throws XPathException 	 */
specifier|public
name|LocalVariable
name|declareVariableBinding
parameter_list|(
name|LocalVariable
name|var
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|lastVar
operator|==
literal|null
condition|)
name|lastVar
operator|=
name|var
expr_stmt|;
else|else
block|{
name|lastVar
operator|.
name|addAfter
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|lastVar
operator|=
name|var
expr_stmt|;
block|}
name|var
operator|.
name|setStackPosition
argument_list|(
name|getCurrentStackSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
comment|/** 	 * Declare a global variable as by "declare variable". 	 *  	 * @param var 	 * @throws XPathException 	 */
specifier|public
name|Variable
name|declareGlobalVariable
parameter_list|(
name|Variable
name|var
parameter_list|)
throws|throws
name|XPathException
block|{
name|globalVariables
operator|.
name|put
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
argument_list|,
name|var
argument_list|)
expr_stmt|;
name|var
operator|.
name|setStackPosition
argument_list|(
name|getCurrentStackSize
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
comment|/** 	 * Declare a user-defined variable. 	 *  	 * The value argument is converted into an XPath value 	 * (@see XPathUtil#javaObjectToXPath(Object)). 	 *  	 * @param qname the qualified name of the new variable. Any namespaces should 	 * have been declared before. 	 * @param value a Java object, representing the fixed value of the variable 	 * @return the created Variable object 	 * @throws XPathException if the value cannot be converted into a known XPath value 	 * or the variable QName references an unknown namespace-prefix.  	 */
specifier|public
name|Variable
name|declareVariable
parameter_list|(
name|String
name|qname
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|qname
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|Variable
name|var
decl_stmt|;
name|Module
name|module
init|=
name|getModule
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|module
operator|.
name|declareVariable
argument_list|(
name|qn
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
name|Sequence
name|val
init|=
name|XPathUtil
operator|.
name|javaObjectToXPath
argument_list|(
name|value
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|var
operator|=
operator|(
name|Variable
operator|)
name|globalVariables
operator|.
name|get
argument_list|(
name|qn
argument_list|)
expr_stmt|;
if|if
condition|(
name|var
operator|==
literal|null
condition|)
block|{
name|var
operator|=
operator|new
name|Variable
argument_list|(
name|qn
argument_list|)
expr_stmt|;
name|globalVariables
operator|.
name|put
argument_list|(
name|qn
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|int
name|actualCardinality
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
name|actualCardinality
operator|=
name|Cardinality
operator|.
name|EMPTY
expr_stmt|;
if|else if
condition|(
name|val
operator|.
name|hasMany
argument_list|()
condition|)
name|actualCardinality
operator|=
name|Cardinality
operator|.
name|MANY
expr_stmt|;
else|else
name|actualCardinality
operator|=
name|Cardinality
operator|.
name|ONE
expr_stmt|;
comment|//Type.EMPTY is *not* a subtype of other types ; checking cardinality first
if|if
condition|(
operator|!
name|Cardinality
operator|.
name|checkCardinality
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getCardinality
argument_list|()
argument_list|,
name|actualCardinality
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPTY0004: Invalid cardinality for variable $"
operator|+
name|var
operator|.
name|getQName
argument_list|()
operator|+
literal|". Expected "
operator|+
name|Cardinality
operator|.
name|getDescription
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getCardinality
argument_list|()
argument_list|)
operator|+
literal|", got "
operator|+
name|Cardinality
operator|.
name|getDescription
argument_list|(
name|actualCardinality
argument_list|)
argument_list|)
throw|;
comment|//TODO : ignore nodes right now ; they are returned as xs:untypedAtomicType
if|if
condition|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|val
operator|.
name|getItemType
argument_list|()
argument_list|,
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPTY0004: Invalid type for variable $"
operator|+
name|var
operator|.
name|getQName
argument_list|()
operator|+
literal|". Expected "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
operator|+
literal|", got "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|val
operator|.
name|getItemType
argument_list|()
argument_list|)
argument_list|)
throw|;
comment|//Here is an attempt to process the nodes correctly
block|}
else|else
block|{
comment|//Same as above : we probably may factorize
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|val
operator|.
name|getItemType
argument_list|()
argument_list|,
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPTY0004: Invalid type for variable $"
operator|+
name|var
operator|.
name|getQName
argument_list|()
operator|+
literal|". Expected "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|var
operator|.
name|getSequenceType
argument_list|()
operator|.
name|getPrimaryType
argument_list|()
argument_list|)
operator|+
literal|", got "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|val
operator|.
name|getItemType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
comment|//TODO : should we allow global variable *re*declaration ?
name|var
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
comment|/** 	 * Try to resolve a variable. 	 *  	 * @param name the qualified name of the variable as string 	 * @return the declared Variable object 	 * @throws XPathException if the variable is unknown 	 */
specifier|public
name|Variable
name|resolveVariable
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|XPathException
block|{
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|name
argument_list|,
literal|null
argument_list|)
decl_stmt|;
return|return
name|resolveVariable
argument_list|(
name|qn
argument_list|)
return|;
block|}
comment|/** 	 * Try to resolve a variable. 	 *  	 * @param qname the qualified name of the variable 	 * @return the declared Variable object 	 * @throws XPathException if the variable is unknown 	 */
specifier|public
name|Variable
name|resolveVariable
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
name|Variable
name|var
decl_stmt|;
comment|// check if the variable is declared local
name|var
operator|=
name|resolveLocalVariable
argument_list|(
name|qname
argument_list|)
expr_stmt|;
comment|// check if the variable is declared in a module
if|if
condition|(
name|var
operator|==
literal|null
condition|)
block|{
name|Module
name|module
init|=
name|getModule
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|module
operator|.
name|resolveVariable
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check if the variable is declared global
if|if
condition|(
name|var
operator|==
literal|null
condition|)
name|var
operator|=
operator|(
name|Variable
operator|)
name|globalVariables
operator|.
name|get
argument_list|(
name|qname
argument_list|)
expr_stmt|;
comment|//if (var == null)
comment|//	throw new XPathException("variable $" + qname + " is not bound");
return|return
name|var
return|;
block|}
specifier|protected
name|Variable
name|resolveLocalVariable
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
name|LocalVariable
name|end
init|=
name|contextStack
operator|.
name|isEmpty
argument_list|()
condition|?
literal|null
else|:
operator|(
name|LocalVariable
operator|)
name|contextStack
operator|.
name|peek
argument_list|()
decl_stmt|;
for|for
control|(
name|LocalVariable
name|var
init|=
name|lastVar
init|;
name|var
operator|!=
literal|null
condition|;
name|var
operator|=
name|var
operator|.
name|before
control|)
block|{
if|if
condition|(
name|var
operator|==
name|end
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|qname
operator|.
name|equals
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
argument_list|)
condition|)
return|return
name|var
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|isVarDeclared
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
name|Module
name|module
init|=
name|getModule
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|module
operator|.
name|isVarDeclared
argument_list|(
name|qname
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
name|globalVariables
operator|.
name|get
argument_list|(
name|qname
argument_list|)
operator|!=
literal|null
return|;
block|}
comment|/** 	 * Turn on/off XPath 1.0 backwards compatibility. 	 *  	 * If turned on, comparison expressions will behave like 	 * in XPath 1.0, i.e. if any one of the operands is a number, 	 * the other operand will be cast to a double. 	 *  	 * @param backwardsCompatible 	 */
specifier|public
name|void
name|setBackwardsCompatibility
parameter_list|(
name|boolean
name|backwardsCompatible
parameter_list|)
block|{
name|this
operator|.
name|backwardsCompatible
operator|=
name|backwardsCompatible
expr_stmt|;
block|}
comment|/** 	 * XPath 1.0 backwards compatibility turned on? 	 *  	 * In XPath 1.0 compatible mode, additional conversions 	 * will be applied to values if a numeric value is expected. 	 *   	 */
specifier|public
name|boolean
name|isBackwardsCompatible
parameter_list|()
block|{
return|return
name|this
operator|.
name|backwardsCompatible
return|;
block|}
comment|/** 	 * Get the DBBroker instance used for the current query. 	 *  	 * The DBBroker is the main database access object, providing 	 * access to all internal database functions. 	 *  	 * @return DBBroker instance 	 */
specifier|public
name|DBBroker
name|getBroker
parameter_list|()
block|{
return|return
name|broker
return|;
block|}
specifier|public
name|void
name|setBroker
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
comment|/** 	 * Get the user which executes the current query. 	 *  	 * @return user 	 */
specifier|public
name|User
name|getUser
parameter_list|()
block|{
return|return
name|broker
operator|.
name|getUser
argument_list|()
return|;
block|}
comment|/** 	 * If there is a HTTP Session, and a User has been stored in the session then this will 	 * return the user object from the session 	 *  	 * @return The user or null if there is no session or no user 	 */
specifier|private
name|User
name|getUserFromHttpSession
parameter_list|()
block|{
name|SessionModule
name|myModule
init|=
operator|(
name|SessionModule
operator|)
name|getModule
argument_list|(
name|SessionModule
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
comment|//Sanity check : one may *not* want to bind the module !
if|if
condition|(
name|myModule
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|Variable
name|var
init|=
literal|null
decl_stmt|;
try|try
block|{
name|var
operator|=
name|myModule
operator|.
name|resolveVariable
argument_list|(
name|SessionModule
operator|.
name|SESSION_VAR
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|xpe
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|var
operator|!=
literal|null
operator|&&
name|var
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|getValue
argument_list|()
operator|.
name|getItemType
argument_list|()
operator|==
name|Type
operator|.
name|JAVA_OBJECT
condition|)
block|{
name|JavaObjectValue
name|session
init|=
operator|(
name|JavaObjectValue
operator|)
name|var
operator|.
name|getValue
argument_list|()
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getObject
argument_list|()
operator|instanceof
name|SessionWrapper
condition|)
block|{
try|try
block|{
return|return
operator|(
name|User
operator|)
operator|(
operator|(
name|SessionWrapper
operator|)
name|session
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
name|HTTP_SESSIONVAR_XMLDB_USER
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IllegalStateException
name|e
parameter_list|)
block|{
comment|// session is invalid
return|return
literal|null
return|;
block|}
block|}
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Get the document builder currently used for creating 	 * temporary document fragments. A new document builder 	 * will be created on demand. 	 *  	 * @return document builder 	 */
specifier|public
name|MemTreeBuilder
name|getDocumentBuilder
parameter_list|()
block|{
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
operator|new
name|MemTreeBuilder
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/* Methods delegated to the watchdog */
specifier|public
name|void
name|proceed
parameter_list|()
throws|throws
name|TerminatedException
block|{
name|proceed
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|proceed
parameter_list|(
name|Expression
name|expr
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|watchdog
operator|.
name|proceed
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|proceed
parameter_list|(
name|Expression
name|expr
parameter_list|,
name|MemTreeBuilder
name|builder
parameter_list|)
throws|throws
name|TerminatedException
block|{
name|watchdog
operator|.
name|proceed
argument_list|(
name|expr
argument_list|,
name|builder
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|recover
parameter_list|()
block|{
name|watchdog
operator|.
name|reset
argument_list|()
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|XQueryWatchDog
name|getWatchDog
parameter_list|()
block|{
return|return
name|watchdog
return|;
block|}
specifier|protected
name|void
name|setWatchDog
parameter_list|(
name|XQueryWatchDog
name|watchdog
parameter_list|)
block|{
name|this
operator|.
name|watchdog
operator|=
name|watchdog
expr_stmt|;
block|}
comment|/** 	 * Push any document fragment created within the current 	 * execution context on the stack. 	 */
specifier|public
name|void
name|pushDocumentContext
parameter_list|()
block|{
name|fragmentStack
operator|.
name|push
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|popDocumentContext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|fragmentStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|builder
operator|=
operator|(
name|MemTreeBuilder
operator|)
name|fragmentStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Set the base URI for the evaluation context. 	 *  	 * This is the URI returned by the fn:base-uri() 	 * function. 	 *  	 * @param uri 	 */
specifier|public
name|void
name|setBaseURI
parameter_list|(
name|AnyURIValue
name|uri
parameter_list|)
block|{
name|setBaseURI
argument_list|(
name|uri
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the base URI for the evaluation context.      *       * A base URI specified via the base-uri directive in the      * XQuery prolog overwrites any other setting.      *       * @param uri      * @param setInProlog      */
specifier|public
name|void
name|setBaseURI
parameter_list|(
name|AnyURIValue
name|uri
parameter_list|,
name|boolean
name|setInProlog
parameter_list|)
block|{
if|if
condition|(
name|baseURISetInProlog
condition|)
return|return;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
name|baseURI
operator|=
name|AnyURIValue
operator|.
name|EMPTY_URI
expr_stmt|;
name|baseURI
operator|=
name|uri
expr_stmt|;
name|baseURISetInProlog
operator|=
name|setInProlog
expr_stmt|;
block|}
comment|/** 	 * Set the path to a base directory where modules should 	 * be loaded from. Relative module paths will be resolved against 	 * this directory. The property is usually set by the XQueryServlet or 	 * XQueryGenerator, but can also be specified manually.  	 *  	 * @param path 	 */
specifier|public
name|void
name|setModuleLoadPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|moduleLoadPath
operator|=
name|path
expr_stmt|;
block|}
specifier|public
name|String
name|getModuleLoadPath
parameter_list|()
block|{
return|return
name|moduleLoadPath
return|;
block|}
comment|/**      * The method<code>isBaseURIDeclared</code>      *      * @return a<code>boolean</code> value      */
specifier|public
name|boolean
name|isBaseURIDeclared
parameter_list|()
block|{
if|if
condition|(
name|baseURI
operator|==
literal|null
operator|||
name|baseURI
operator|.
name|equals
argument_list|(
name|AnyURIValue
operator|.
name|EMPTY_URI
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
comment|/**      * Get the base URI of the evaluation context. 	 *  	 * This is the URI returned by the fn:base-uri() function. 	 *       * @return base URI of the evaluation context      * @exception XPathException if an error occurs      */
specifier|public
name|AnyURIValue
name|getBaseURI
parameter_list|()
throws|throws
name|XPathException
block|{
comment|// the base URI in the static context is established according to the
comment|// principles outlined in [RFC3986] Section 5.1âthat is, it defaults
comment|// first to the base URI of the encapsulating entity, then to the URI
comment|// used to retrieve the entity, and finally to an implementation-defined
comment|// default. If the URILiteral in the base URI declaration is a relative
comment|// URI, then it is made absolute by resolving it with respect to this
comment|// same hierarchy.
comment|// It is not intrinsically an error if this process fails to establish
comment|// an absolute base URI; however, the base URI in the static context
comment|// is then undefined, and any attempt to use its value may result in
comment|// an error [err:XPST0001].
if|if
condition|(
name|baseURI
operator|==
literal|null
operator|||
name|baseURI
operator|.
name|equals
argument_list|(
name|AnyURIValue
operator|.
name|EMPTY_URI
argument_list|)
condition|)
block|{
comment|//throw new XPathException("err:XPST0001: base URI of the static context  has not been assigned a value.");
comment|// We catch and resolve this to the XmlDbURI.ROOT_COLLECTION_URI
comment|// at least in DocumentImpl so maybe we should do it here./ljo
block|}
return|return
name|baseURI
return|;
block|}
comment|/** 	 * Set the current context position, i.e. the position 	 * of the currently processed item in the context sequence. 	 * This value is required by some expressions, e.g. fn:position(). 	 *  	 * @param pos 	 */
specifier|public
name|void
name|setContextPosition
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|contextPosition
operator|=
name|pos
expr_stmt|;
block|}
comment|/** 	 * Get the current context position, i.e. the position of 	 * the currently processed item in the context sequence. 	 *   	 * @return current context position 	 */
specifier|public
name|int
name|getContextPosition
parameter_list|()
block|{
return|return
name|contextPosition
return|;
block|}
comment|/** 	 * Push all in-scope namespace declarations onto the stack. 	 */
specifier|public
name|void
name|pushInScopeNamespaces
parameter_list|()
block|{
comment|//TODO : push into an inheritedInScopeNamespaces HashMap... and return an empty HashMap
name|HashMap
name|m
init|=
operator|(
name|HashMap
operator|)
name|inScopeNamespaces
operator|.
name|clone
argument_list|()
decl_stmt|;
name|HashMap
name|p
init|=
operator|(
name|HashMap
operator|)
name|inScopePrefixes
operator|.
name|clone
argument_list|()
decl_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|inheritedInScopeNamespaces
argument_list|)
expr_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|inheritedInScopePrefixes
argument_list|)
expr_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|inScopeNamespaces
argument_list|)
expr_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|inScopePrefixes
argument_list|)
expr_stmt|;
comment|//Current namespaces now become inherited just like the previous inherited ones
name|inheritedInScopeNamespaces
operator|=
operator|(
name|HashMap
operator|)
name|inheritedInScopeNamespaces
operator|.
name|clone
argument_list|()
expr_stmt|;
name|inheritedInScopeNamespaces
operator|.
name|putAll
argument_list|(
name|m
argument_list|)
expr_stmt|;
name|inheritedInScopePrefixes
operator|=
operator|(
name|HashMap
operator|)
name|inheritedInScopePrefixes
operator|.
name|clone
argument_list|()
expr_stmt|;
name|inheritedInScopePrefixes
operator|.
name|putAll
argument_list|(
name|p
argument_list|)
expr_stmt|;
comment|//TODO : consider dynamic instanciation
name|inScopeNamespaces
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|inScopePrefixes
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|popInScopeNamespaces
parameter_list|()
block|{
name|inScopePrefixes
operator|=
operator|(
name|HashMap
operator|)
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|inScopeNamespaces
operator|=
operator|(
name|HashMap
operator|)
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|inheritedInScopePrefixes
operator|=
operator|(
name|HashMap
operator|)
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|inheritedInScopeNamespaces
operator|=
operator|(
name|HashMap
operator|)
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|pushNamespaceContext
parameter_list|()
block|{
name|HashMap
name|m
init|=
operator|(
name|HashMap
operator|)
name|staticNamespaces
operator|.
name|clone
argument_list|()
decl_stmt|;
name|HashMap
name|p
init|=
operator|(
name|HashMap
operator|)
name|staticPrefixes
operator|.
name|clone
argument_list|()
decl_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|staticNamespaces
argument_list|)
expr_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|staticPrefixes
argument_list|)
expr_stmt|;
name|staticNamespaces
operator|=
name|m
expr_stmt|;
name|staticPrefixes
operator|=
name|p
expr_stmt|;
block|}
specifier|public
name|void
name|popNamespaceContext
parameter_list|()
block|{
name|staticPrefixes
operator|=
operator|(
name|HashMap
operator|)
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|staticNamespaces
operator|=
operator|(
name|HashMap
operator|)
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Returns the last variable on the local variable stack. 	 * The current variable context can be restored by passing 	 * the return value to {@link #popLocalVariables(LocalVariable)}. 	 *  	 * @return last variable on the local variable stack 	 */
specifier|public
name|LocalVariable
name|markLocalVariables
parameter_list|(
name|boolean
name|newContext
parameter_list|)
block|{
if|if
condition|(
name|newContext
condition|)
name|contextStack
operator|.
name|push
argument_list|(
name|lastVar
argument_list|)
expr_stmt|;
name|variableStackSize
operator|++
expr_stmt|;
return|return
name|lastVar
return|;
block|}
comment|/** 	 * Restore the local variable stack to the position marked 	 * by variable var. 	 *  	 * @param var 	 */
specifier|public
name|void
name|popLocalVariables
parameter_list|(
name|LocalVariable
name|var
parameter_list|)
block|{
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
block|{
name|var
operator|.
name|after
operator|=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|contextStack
operator|.
name|isEmpty
argument_list|()
operator|&&
name|var
operator|==
name|contextStack
operator|.
name|peek
argument_list|()
condition|)
block|{
name|contextStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
block|}
name|lastVar
operator|=
name|var
expr_stmt|;
name|variableStackSize
operator|--
expr_stmt|;
block|}
comment|/** 	 * Returns the current size of the stack. This is used to determine 	 * where a variable has been declared. 	 *  	 * @return current size of the stack 	 */
specifier|public
name|int
name|getCurrentStackSize
parameter_list|()
block|{
return|return
name|variableStackSize
return|;
block|}
comment|/* ----------------- Function call stack ------------------------ */
comment|/**      * Report the start of a function execution. Adds the reported function signature       * to the function call stack.      */
specifier|public
name|void
name|functionStart
parameter_list|(
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|callStack
operator|.
name|push
argument_list|(
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/**      * Report the end of the currently executed function. Pops the last function      * signature from the function call stack.      *      */
specifier|public
name|void
name|functionEnd
parameter_list|()
block|{
if|if
condition|(
name|callStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Function call stack is empty, but XQueryContext.functionEnd() was called. This "
operator|+
literal|"could indicate a concurrency issue (shared XQueryContext?)"
argument_list|)
expr_stmt|;
block|}
else|else
name|callStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/**      * Check if the specified function signature is found in the current function       * called stack. If yes, the function might be tail recursive and needs to be      * optimized.       *       * @param signature      */
specifier|public
name|boolean
name|tailRecursiveCall
parameter_list|(
name|FunctionSignature
name|signature
parameter_list|)
block|{
return|return
name|callStack
operator|.
name|contains
argument_list|(
name|signature
argument_list|)
return|;
block|}
comment|/* ----------------- Module imports ------------------------ */
comment|/** 	 * Import a module and make it available in this context. The prefix and 	 * location parameters are optional. If prefix is null, the default prefix specified 	 * by the module is used. If location is null, the module will be read from the 	 * namespace URI. 	 *  	 * @param namespaceURI 	 * @param prefix 	 * @param location 	 * @throws XPathException 	 */
specifier|public
name|void
name|importModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|XPathException
block|{
name|Module
name|module
init|=
name|getModule
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Module "
operator|+
name|namespaceURI
operator|+
literal|" already present."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
name|location
operator|=
name|namespaceURI
expr_stmt|;
comment|// is it a Java module?
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|JAVA_URI_START
argument_list|)
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
name|JAVA_URI_START
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|module
operator|=
name|loadBuiltInModule
argument_list|(
name|namespaceURI
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Source
name|source
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
operator|||
name|moduleLoadPath
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
condition|)
block|{
comment|// Is the module source stored in the database?
try|try
block|{
name|XmldbURI
name|locationUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|moduleLoadPath
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
condition|)
block|{
name|XmldbURI
name|moduleLoadPathUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|moduleLoadPath
argument_list|)
decl_stmt|;
name|locationUri
operator|=
name|moduleLoadPathUri
operator|.
name|resolveCollectionPath
argument_list|(
name|locationUri
argument_list|)
expr_stmt|;
block|}
name|DocumentImpl
name|sourceDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sourceDoc
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|locationUri
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceDoc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"source for module "
operator|+
name|location
operator|+
literal|" not found in database"
argument_list|)
throw|;
if|if
condition|(
name|sourceDoc
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|||
operator|!
name|sourceDoc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"application/xquery"
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"source for module "
operator|+
name|location
operator|+
literal|" is not an XQuery or "
operator|+
literal|"declares a wrong mime-type"
argument_list|)
throw|;
name|source
operator|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|sourceDoc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|module
operator|=
name|compileModule
argument_list|(
name|namespaceURI
argument_list|,
name|location
argument_list|,
name|module
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"permission denied to read module source from "
operator|+
name|location
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|sourceDoc
operator|!=
literal|null
condition|)
name|sourceDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No. Load from file or URL
try|try
block|{
comment|//TODO: use URIs to ensure proper resolution of relative locations
name|source
operator|=
name|SourceFactory
operator|.
name|getSource
argument_list|(
name|broker
argument_list|,
name|moduleLoadPath
argument_list|,
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"source location for module "
operator|+
name|namespaceURI
operator|+
literal|" should be a valid URL: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"source for module "
operator|+
name|namespaceURI
operator|+
literal|" not found: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Permission denied to access module "
operator|+
name|namespaceURI
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|module
operator|=
name|compileModule
argument_list|(
name|namespaceURI
argument_list|,
name|location
argument_list|,
name|module
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
name|prefix
operator|=
name|module
operator|.
name|getDefaultPrefix
argument_list|()
expr_stmt|;
name|declareNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
comment|/**      * @param namespaceURI      * @param location      * @param module      * @param source      * @return The compiled module.      * @throws XPathException      */
specifier|private
name|Module
name|compileModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|location
parameter_list|,
name|Module
name|module
parameter_list|,
name|Source
name|source
parameter_list|)
throws|throws
name|XPathException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading module from "
operator|+
name|location
argument_list|)
expr_stmt|;
name|Reader
name|reader
decl_stmt|;
try|try
block|{
name|reader
operator|=
name|source
operator|.
name|getReader
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"IO exception while loading module "
operator|+
name|namespaceURI
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|XQueryContext
name|modContext
init|=
operator|new
name|ModuleContext
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|XQueryLexer
name|lexer
init|=
operator|new
name|XQueryLexer
argument_list|(
name|modContext
argument_list|,
name|reader
argument_list|)
decl_stmt|;
name|XQueryParser
name|parser
init|=
operator|new
name|XQueryParser
argument_list|(
name|lexer
argument_list|)
decl_stmt|;
name|XQueryTreeParser
name|astParser
init|=
operator|new
name|XQueryTreeParser
argument_list|(
name|modContext
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|xpath
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|foundErrors
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|parser
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|parser
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
name|AST
name|ast
init|=
name|parser
operator|.
name|getAST
argument_list|()
decl_stmt|;
name|PathExpr
name|path
init|=
operator|new
name|PathExpr
argument_list|(
name|modContext
argument_list|)
decl_stmt|;
name|astParser
operator|.
name|xpath
argument_list|(
name|ast
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|astParser
operator|.
name|foundErrors
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|astParser
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|astParser
operator|.
name|getLastException
argument_list|()
argument_list|)
throw|;
block|}
name|path
operator|.
name|analyze
argument_list|(
operator|new
name|AnalyzeContextInfo
argument_list|()
argument_list|)
expr_stmt|;
name|ExternalModule
name|modExternal
init|=
name|astParser
operator|.
name|getModule
argument_list|()
decl_stmt|;
if|if
condition|(
name|modExternal
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"source at "
operator|+
name|location
operator|+
literal|" is not a valid module"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|modExternal
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"namespace URI declared by module ("
operator|+
name|modExternal
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|") does not match namespace URI in import statement, which was: "
operator|+
name|namespaceURI
argument_list|)
throw|;
name|modules
operator|.
name|put
argument_list|(
name|modExternal
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|modExternal
argument_list|)
expr_stmt|;
name|modExternal
operator|.
name|setSource
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|modExternal
operator|.
name|setContext
argument_list|(
name|modContext
argument_list|)
expr_stmt|;
name|module
operator|=
name|modExternal
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
operator|.
name|getLine
argument_list|()
argument_list|,
name|e
operator|.
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TokenStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|prependMessage
argument_list|(
literal|"Error while loading module "
operator|+
name|location
operator|+
literal|": "
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Internal error while loading module: "
operator|+
name|location
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
try|try
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error while closing module source: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|declareModuleVars
argument_list|(
name|module
argument_list|)
expr_stmt|;
return|return
name|module
return|;
block|}
specifier|private
name|void
name|declareModuleVars
parameter_list|(
name|Module
name|module
parameter_list|)
block|{
name|String
name|moduleNS
init|=
name|module
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|globalVariables
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Variable
name|var
init|=
operator|(
name|Variable
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|moduleNS
operator|.
name|equals
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|module
operator|.
name|declareVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Add a forward reference to an undeclared function. Forward 	 * references will be resolved later. 	 *  	 * @param call 	 */
specifier|public
name|void
name|addForwardReference
parameter_list|(
name|FunctionCall
name|call
parameter_list|)
block|{
name|forwardReferences
operator|.
name|push
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Resolve all forward references to previously undeclared functions. 	 *  	 * @throws XPathException 	 */
specifier|public
name|void
name|resolveForwardReferences
parameter_list|()
throws|throws
name|XPathException
block|{
while|while
condition|(
operator|!
name|forwardReferences
operator|.
name|empty
argument_list|()
condition|)
block|{
name|FunctionCall
name|call
init|=
operator|(
name|FunctionCall
operator|)
name|forwardReferences
operator|.
name|pop
argument_list|()
decl_stmt|;
name|UserDefinedFunction
name|func
init|=
name|resolveFunction
argument_list|(
name|call
operator|.
name|getQName
argument_list|()
argument_list|,
name|call
operator|.
name|getArgumentCount
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|call
operator|.
name|getASTNode
argument_list|()
argument_list|,
literal|"Call to undeclared function: "
operator|+
name|call
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|)
throw|;
name|call
operator|.
name|resolveForwardReference
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|optimizationsEnabled
parameter_list|()
block|{
return|return
name|enableOptimizer
return|;
block|}
specifier|public
name|void
name|addOption
parameter_list|(
name|String
name|qnameString
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|XPathException
block|{
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|qnameString
argument_list|,
name|defaultFunctionNamespace
argument_list|)
decl_stmt|;
name|Option
name|option
init|=
operator|new
name|Option
argument_list|(
name|qn
argument_list|,
name|contents
argument_list|)
decl_stmt|;
if|if
condition|(
name|options
operator|==
literal|null
condition|)
name|options
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
comment|// check if this overwrites an already existing option
name|boolean
name|added
init|=
literal|false
decl_stmt|;
name|Option
name|old
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|old
operator|=
operator|(
name|Option
operator|)
name|options
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|old
operator|.
name|equals
argument_list|(
name|option
argument_list|)
condition|)
block|{
name|options
operator|.
name|add
argument_list|(
name|i
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|added
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
comment|// add the option to the list if it does not yet exist
if|if
condition|(
operator|!
name|added
condition|)
name|options
operator|.
name|add
argument_list|(
name|option
argument_list|)
expr_stmt|;
comment|// check predefined options
if|if
condition|(
name|Option
operator|.
name|PROFILE_QNAME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|// configure profiling
name|profiler
operator|.
name|configure
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Option
operator|.
name|TIMEOUT_QNAME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
name|watchdog
operator|.
name|setTimeoutFromOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|else if
condition|(
name|Option
operator|.
name|OUTPUT_SIZE_QNAME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
name|watchdog
operator|.
name|setMaxNodesFromOption
argument_list|(
name|option
argument_list|)
expr_stmt|;
if|else if
condition|(
name|Option
operator|.
name|OPTIMIZE_QNAME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
name|String
name|params
index|[]
init|=
name|option
operator|.
name|tokenizeContents
argument_list|()
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|String
index|[]
name|param
init|=
name|Option
operator|.
name|parseKeyValuePair
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"enable"
operator|.
name|equals
argument_list|(
name|param
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
literal|"yes"
operator|.
name|equals
argument_list|(
name|param
index|[
literal|1
index|]
argument_list|)
condition|)
name|enableOptimizer
operator|=
literal|true
expr_stmt|;
else|else
name|enableOptimizer
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
comment|//TODO : not sure how these 2 options might/have to be related
if|else if
condition|(
name|Option
operator|.
name|OPTIMIZE_IMPLICIT_TIMEZONE
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|//TODO : error check
name|Duration
name|duration
init|=
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|newDuration
argument_list|(
name|option
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|implicitTimeZone
operator|=
operator|new
name|SimpleTimeZone
argument_list|(
operator|(
name|int
operator|)
name|duration
operator|.
name|getTimeInMillis
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
literal|"XQuery context"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Option
operator|.
name|CURRENT_DATETIME
operator|.
name|compareTo
argument_list|(
name|qn
argument_list|)
operator|==
literal|0
condition|)
block|{
comment|//TODO : error check
name|DateTimeValue
name|dtv
init|=
operator|new
name|DateTimeValue
argument_list|(
name|option
operator|.
name|getContents
argument_list|()
argument_list|)
decl_stmt|;
name|calendar
operator|=
operator|(
name|XMLGregorianCalendar
operator|)
name|dtv
operator|.
name|calendar
operator|.
name|clone
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Option
name|getOption
parameter_list|(
name|QName
name|qname
parameter_list|)
block|{
if|if
condition|(
name|options
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Option
name|option
init|=
operator|(
name|Option
operator|)
name|options
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|qname
operator|.
name|compareTo
argument_list|(
name|option
operator|.
name|getQName
argument_list|()
argument_list|)
operator|==
literal|0
condition|)
return|return
name|option
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|Pragma
name|getPragma
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|XPathException
block|{
name|QName
name|qname
init|=
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPST0081: pragma's ('"
operator|+
name|name
operator|+
literal|"') namespace URI is empty"
argument_list|)
throw|;
block|}
if|else if
condition|(
name|Namespaces
operator|.
name|EXIST_NS
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
condition|)
block|{
name|contents
operator|=
name|StringValue
operator|.
name|trimWhitespace
argument_list|(
name|contents
argument_list|)
expr_stmt|;
if|if
condition|(
name|TimerPragma
operator|.
name|TIMER_PRAGMA
operator|.
name|equalsSimple
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|TimerPragma
argument_list|(
name|qname
argument_list|,
name|contents
argument_list|)
return|;
block|}
if|if
condition|(
name|Optimize
operator|.
name|OPTIMIZE_PRAGMA
operator|.
name|equalsSimple
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|Optimize
argument_list|(
name|this
argument_list|,
name|qname
argument_list|,
name|contents
argument_list|,
literal|true
argument_list|)
return|;
block|}
if|if
condition|(
name|BatchTransactionPragma
operator|.
name|BATCH_TRANSACTION_PRAGMA
operator|.
name|equalsSimple
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|BatchTransactionPragma
argument_list|(
name|qname
argument_list|,
name|contents
argument_list|)
return|;
block|}
if|if
condition|(
name|ForceIndexUse
operator|.
name|EXCEPTION_IF_INDEX_NOT_USED_PRAGMA
operator|.
name|equalsSimple
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|ForceIndexUse
argument_list|(
name|qname
argument_list|,
name|contents
argument_list|)
return|;
block|}
if|if
condition|(
name|ProfilePragma
operator|.
name|PROFILIE_PRAGMA
operator|.
name|equalsSimple
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|ProfilePragma
argument_list|(
name|qname
argument_list|,
name|contents
argument_list|)
return|;
block|}
if|if
condition|(
name|NoIndexPragma
operator|.
name|NO_INDEX_PRAGMA
operator|.
name|equalsSimple
argument_list|(
name|qname
argument_list|)
condition|)
block|{
return|return
operator|new
name|NoIndexPragma
argument_list|(
name|qname
argument_list|,
name|contents
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Store the supplied data to a temporary document fragment. 	 *  	 * @param doc 	 * @throws XPathException 	 */
specifier|public
name|DocumentImpl
name|storeTemporaryDoc
parameter_list|(
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
name|DocumentImpl
name|targetDoc
init|=
name|broker
operator|.
name|storeTempResource
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetDoc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Internal error: failed to store temporary doc fragment"
argument_list|)
throw|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Stored: "
operator|+
name|targetDoc
operator|.
name|getDocId
argument_list|()
operator|+
literal|": "
operator|+
name|targetDoc
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|targetDoc
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|TEMP_STORE_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|TEMP_STORE_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|TEMP_STORE_ERROR
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|attribute
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|attribute
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|attribute
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|get
argument_list|(
name|attribute
argument_list|)
return|;
block|}
comment|/** 	 * Set an XQuery Context variable. 	 * Used by the context extension module; called by context:set-var(). 	 *  	 * @param name The variable name 	 * @param XQvar The variable value, may be of any xs: type  	 */
specifier|public
name|void
name|setXQueryContextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|XQvar
parameter_list|)
block|{
name|XQueryContextVars
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|XQvar
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get an XQuery Context variable. 	 * Used by the context extension module; called by context:get-var(). 	 *  	 * @param name The variable name 	 * @return The variable value indicated by name. 	 */
specifier|public
name|Object
name|getXQueryContextVar
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|XQueryContextVars
operator|.
name|get
argument_list|(
name|name
argument_list|)
operator|)
return|;
block|}
comment|/**      *	Starts a batch Transaction       */
specifier|public
name|void
name|startBatchTransaction
parameter_list|()
throws|throws
name|TransactionException
block|{
comment|//only allow one batch to exist at once, if there is a current batch then commit them
if|if
condition|(
name|batchTransaction
operator|!=
literal|null
condition|)
name|finishBatchTransaction
argument_list|()
expr_stmt|;
name|TransactionManager
name|txnMgr
init|=
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|batchTransaction
operator|=
name|txnMgr
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
block|}
comment|/**      *	Determines if a batch transaction should be performed      *      * 	@return true if a batch update transaction should be performed      */
specifier|public
name|boolean
name|hasBatchTransaction
parameter_list|()
block|{
return|return
operator|(
name|batchTransaction
operator|!=
literal|null
operator|)
return|;
block|}
comment|/**      * Get the Transaction for the batch      *       * @return The Transaction      */
specifier|public
name|Txn
name|getBatchTransaction
parameter_list|()
block|{
return|return
name|batchTransaction
return|;
block|}
comment|/**      * Set's that a trigger should be executed for the provided document as part of the batch transaction      *       * @param	doc	The document to trigger for      */
specifier|public
name|void
name|setBatchTransactionTrigger
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
block|{
comment|//we want the last updated version of the document, so remove any previous version (matched by xmldburi)
name|Iterator
name|itTrigDoc
init|=
name|batchTransactionTriggers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itTrigDoc
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DocumentImpl
name|trigDoc
init|=
operator|(
name|DocumentImpl
operator|)
name|itTrigDoc
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|trigDoc
operator|.
name|getURI
argument_list|()
operator|.
name|equals
argument_list|(
name|doc
operator|.
name|getURI
argument_list|()
argument_list|)
condition|)
block|{
name|itTrigDoc
operator|.
name|remove
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
comment|//store the document so we can later finish the trigger
name|batchTransactionTriggers
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
comment|/**      * Completes a batch transaction, by committing the transaction and calling finish on any triggers      * set by setBatchTransactionTrigger()      * */
specifier|public
name|void
name|finishBatchTransaction
parameter_list|()
throws|throws
name|TransactionException
block|{
if|if
condition|(
name|batchTransaction
operator|!=
literal|null
condition|)
block|{
comment|//commit the transaction batch
name|TransactionManager
name|txnMgr
init|=
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|txnMgr
operator|.
name|commit
argument_list|(
name|batchTransaction
argument_list|)
expr_stmt|;
comment|//finish any triggers
name|Iterator
name|itDoc
init|=
name|batchTransactionTriggers
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|itDoc
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|itDoc
operator|.
name|next
argument_list|()
decl_stmt|;
comment|//finish the trigger
name|CollectionConfiguration
name|config
init|=
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getConfiguration
argument_list|(
name|doc
operator|.
name|getBroker
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|!=
literal|null
condition|)
block|{
name|DocumentTrigger
name|trigger
init|=
literal|null
decl_stmt|;
try|try
block|{
name|trigger
operator|=
operator|(
name|DocumentTrigger
operator|)
name|config
operator|.
name|newTrigger
argument_list|(
name|Trigger
operator|.
name|UPDATE_DOCUMENT_EVENT
argument_list|,
name|getBroker
argument_list|()
argument_list|,
name|doc
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|CollectionConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"An error occurred while initializing a trigger for collection "
operator|+
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|trigger
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|trigger
operator|.
name|finish
argument_list|(
name|Trigger
operator|.
name|UPDATE_DOCUMENT_EVENT
argument_list|,
name|doc
operator|.
name|getBroker
argument_list|()
argument_list|,
name|TriggerStatePerThread
operator|.
name|getTransaction
argument_list|()
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Trigger event UPDATE_DOCUMENT_EVENT for collection: "
operator|+
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
operator|+
literal|" with: "
operator|+
name|doc
operator|.
name|getURI
argument_list|()
operator|+
literal|" "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|batchTransactionTriggers
operator|.
name|clear
argument_list|()
expr_stmt|;
name|batchTransaction
operator|=
literal|null
expr_stmt|;
block|}
block|}
comment|/** 	 * Set the serializer to use for output 	 * Used by the context extension module; called by context:set-serializer(). 	 *  	 * @param name The name of the serializer to use 	 * @param indent Should the output be indented? 	 * @param omitxmldeclaration Should the output omit the xml declaration? 	 */
specifier|public
name|void
name|setXQuerySerializer
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|indent
parameter_list|,
name|boolean
name|omitxmldeclaration
parameter_list|)
throws|throws
name|XPathException
block|{
name|Option
name|option
decl_stmt|;
comment|//Has a exist:serialize option already been set?
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|option
operator|=
operator|(
name|Option
operator|)
name|options
operator|.
name|get
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|option
operator|.
name|getQName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"exist:serialize"
argument_list|)
condition|)
block|{
comment|//yes, so modify the content from the existing option
name|String
name|content
init|=
name|option
operator|.
name|getContents
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|.
name|indexOf
argument_list|(
literal|"method="
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|content
operator|=
name|content
operator|.
name|replaceFirst
argument_list|(
literal|"method=[^/ ]*"
argument_list|,
literal|"method="
operator|+
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|content
operator|+=
literal|" method="
operator|+
name|name
expr_stmt|;
block|}
if|if
condition|(
name|content
operator|.
name|indexOf
argument_list|(
literal|"indent="
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|content
operator|=
name|content
operator|.
name|replaceFirst
argument_list|(
literal|"indent=[^/ ]*"
argument_list|,
literal|"indent="
operator|+
operator|(
name|indent
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|content
operator|+=
literal|" indent"
operator|+
operator|(
name|indent
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|content
operator|.
name|indexOf
argument_list|(
literal|"omit-xml-declaration"
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|content
operator|=
name|content
operator|.
name|replaceFirst
argument_list|(
literal|"omit-xml-declaration=[^/ ]*"
argument_list|,
literal|"omit-xml-declaration="
operator|+
operator|(
name|omitxmldeclaration
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|content
operator|+=
literal|" omit-xml-declaration"
operator|+
operator|(
name|omitxmldeclaration
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
expr_stmt|;
block|}
comment|//Delete the existing serialize option
name|options
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
comment|//Add the new serialize option
name|addOption
argument_list|(
literal|"exist:serialize"
argument_list|,
name|content
argument_list|)
expr_stmt|;
return|return;
comment|//done
block|}
block|}
comment|//no, so set a option for serialization
name|addOption
argument_list|(
literal|"exist:serialize"
argument_list|,
literal|"method="
operator|+
name|name
operator|+
literal|" indent="
operator|+
operator|(
name|indent
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|+
literal|" omit-xml-declaration="
operator|+
operator|(
name|omitxmldeclaration
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Load the default prefix/namespace mappings table and set up 	 * internal functions. 	 */
specifier|protected
name|void
name|loadDefaults
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|this
operator|.
name|watchdog
operator|=
operator|new
name|XQueryWatchDog
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|/* 		SymbolTable syms = broker.getSymbols(); 		String[] pfx = syms.defaultPrefixList(); 		namespaces = new HashMap(pfx.length); 		prefixes = new HashMap(pfx.length); 		String sym; 		for (int i = 0; i< pfx.length; i++) { 			sym = syms.getDefaultNamespace(pfx[i]); 			namespaces.put(pfx[i], sym); 			prefixes.put(sym, pfx[i]);			 		}	 		*/
name|loadDefaultNS
argument_list|()
expr_stmt|;
name|String
name|param
init|=
operator|(
name|String
operator|)
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PROPERTY_ENABLE_QUERY_REWRITING
argument_list|)
decl_stmt|;
name|enableOptimizer
operator|=
name|param
operator|!=
literal|null
operator|&&
name|param
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
name|param
operator|=
operator|(
name|String
operator|)
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PROPERTY_XQUERY_BACKWARD_COMPATIBLE
argument_list|)
expr_stmt|;
name|backwardsCompatible
operator|=
name|param
operator|==
literal|null
condition|?
literal|true
else|:
name|param
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
comment|// load built-in modules
name|Map
name|modules
init|=
operator|(
name|Map
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|PROPERTY_BUILT_IN_MODULES
argument_list|)
decl_stmt|;
if|if
condition|(
name|modules
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|modules
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|Class
name|mClass
init|=
operator|(
name|Class
operator|)
name|entry
operator|.
name|getValue
argument_list|()
decl_stmt|;
name|String
name|namespaceURI
init|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
decl_stmt|;
comment|// first check if the module has already been loaded
comment|// in the parent context
name|Module
name|module
init|=
name|getModule
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
name|instantiateModule
argument_list|(
name|namespaceURI
argument_list|,
name|mClass
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|protected
name|void
name|loadDefaultNS
parameter_list|()
block|{
try|try
block|{
comment|// default namespaces
name|staticNamespaces
operator|.
name|put
argument_list|(
literal|"xml"
argument_list|,
name|Namespaces
operator|.
name|XML_NS
argument_list|)
expr_stmt|;
name|staticPrefixes
operator|.
name|put
argument_list|(
name|Namespaces
operator|.
name|XML_NS
argument_list|,
literal|"xml"
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"xs"
argument_list|,
name|Namespaces
operator|.
name|SCHEMA_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"xsi"
argument_list|,
name|Namespaces
operator|.
name|SCHEMA_INSTANCE_NS
argument_list|)
expr_stmt|;
comment|//required for backward compatibility
name|declareNamespace
argument_list|(
literal|"xdt"
argument_list|,
name|Namespaces
operator|.
name|XPATH_DATATYPES_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"fn"
argument_list|,
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"local"
argument_list|,
name|Namespaces
operator|.
name|XQUERY_LOCAL_NS
argument_list|)
expr_stmt|;
comment|//*not* as standard NS
name|declareNamespace
argument_list|(
literal|"exist"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
expr_stmt|;
comment|//TODO : include "err" namespace ?
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|//TODO : ignored because it should never happen
block|}
block|}
specifier|public
name|void
name|registerUpdateListener
parameter_list|(
name|UpdateListener
name|listener
parameter_list|)
block|{
if|if
condition|(
name|updateListener
operator|==
literal|null
condition|)
block|{
name|updateListener
operator|=
operator|new
name|ContextUpdateListener
argument_list|()
expr_stmt|;
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNotificationService
argument_list|()
operator|.
name|subscribe
argument_list|(
name|updateListener
argument_list|)
expr_stmt|;
block|}
name|updateListener
operator|.
name|addListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|clearUpdateListeners
parameter_list|()
block|{
if|if
condition|(
name|updateListener
operator|!=
literal|null
condition|)
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getNotificationService
argument_list|()
operator|.
name|unsubscribe
argument_list|(
name|updateListener
argument_list|)
expr_stmt|;
name|updateListener
operator|=
literal|null
expr_stmt|;
block|}
comment|/**      * Check if the XQuery contains pragmas that define serialization settings.      * If yes, copy the corresponding settings to the current set of output      * properties.      *      * @param properties the properties object to which serialization parameters will      * be added.      * @throws XPathException if an error occurs while parsing the option      */
specifier|public
name|void
name|checkOptions
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|XPathException
block|{
name|Option
name|pragma
init|=
name|getOption
argument_list|(
name|Option
operator|.
name|SERIALIZE_QNAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|pragma
operator|==
literal|null
condition|)
return|return;
name|String
index|[]
name|contents
init|=
name|pragma
operator|.
name|tokenizeContents
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|contents
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
index|[]
name|pair
init|=
name|Option
operator|.
name|parseKeyValuePair
argument_list|(
name|contents
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|pair
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown parameter found in "
operator|+
name|pragma
operator|.
name|getQName
argument_list|()
operator|.
name|getStringValue
argument_list|()
operator|+
literal|": '"
operator|+
name|contents
index|[
name|i
index|]
operator|+
literal|"'"
argument_list|)
throw|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Setting serialization property from pragma: "
operator|+
name|pair
index|[
literal|0
index|]
operator|+
literal|" = "
operator|+
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|properties
operator|.
name|setProperty
argument_list|(
name|pair
index|[
literal|0
index|]
argument_list|,
name|pair
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Read list of built-in modules from the configuration. This method will only make sure      * that the specified module class exists and is a subclass of {@link org.exist.xquery.Module}.      *      * @param xquery configuration root      * @return class name mapped to Class object.      * @throws DatabaseConfigurationException      */
specifier|public
specifier|static
name|Map
name|loadModuleClasses
parameter_list|(
name|Element
name|xquery
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|Map
name|classMap
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|// add the standard function module
name|classMap
operator|.
name|put
argument_list|(
name|Namespaces
operator|.
name|XPATH_FUNCTIONS_NS
argument_list|,
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|ModuleImpl
operator|.
name|class
argument_list|)
expr_stmt|;
comment|// add other modules specified in configuration
name|NodeList
name|builtins
init|=
name|xquery
operator|.
name|getElementsByTagName
argument_list|(
name|CONFIGURATION_MODULES_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|builtins
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|builtins
operator|.
name|item
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|NodeList
name|modules
init|=
name|elem
operator|.
name|getElementsByTagName
argument_list|(
name|CONFIGURATION_MODULE_ELEMENT_NAME
argument_list|)
decl_stmt|;
if|if
condition|(
name|modules
operator|.
name|getLength
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modules
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|elem
operator|=
operator|(
name|Element
operator|)
name|modules
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|String
name|uri
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
name|XQueryContext
operator|.
name|BUILT_IN_MODULE_URI_ATTRIBUTE
argument_list|)
decl_stmt|;
name|String
name|clazz
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
name|XQueryContext
operator|.
name|BUILT_IN_MODULE_CLASS_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"element 'module' requires an attribute 'uri'"
argument_list|)
throw|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"element 'module' requires an attribute 'class'"
argument_list|)
throw|;
name|Class
name|mClass
init|=
name|lookupModuleClass
argument_list|(
name|uri
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
name|mClass
operator|!=
literal|null
condition|)
name|classMap
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|mClass
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Configured module '"
operator|+
name|uri
operator|+
literal|"' implemented in '"
operator|+
name|clazz
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|classMap
return|;
block|}
specifier|private
specifier|static
name|Class
name|lookupModuleClass
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|clazz
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
try|try
block|{
name|Class
name|mClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|clazz
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Module
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mClass
argument_list|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Failed to load module: "
operator|+
name|uri
operator|+
literal|". Class "
operator|+
name|clazz
operator|+
literal|" is not an instance of org.exist.xquery.Module."
argument_list|)
throw|;
block|}
return|return
name|mClass
return|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
comment|// Note: can't throw an exception here since this would create
comment|// problems with test cases and jar dependencies
name|LOG
operator|.
name|warn
argument_list|(
literal|"Configuration problem: failed to load class for module "
operator|+
name|uri
operator|+
literal|"; class: "
operator|+
name|clazz
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
class|class
name|ContextUpdateListener
implements|implements
name|UpdateListener
block|{
specifier|private
name|List
name|listeners
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|void
name|addListener
parameter_list|(
name|UpdateListener
name|listener
parameter_list|)
block|{
name|listeners
operator|.
name|add
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|documentUpdated
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|event
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|UpdateListener
name|listener
init|=
operator|(
name|UpdateListener
operator|)
name|listeners
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
name|listener
operator|.
name|documentUpdated
argument_list|(
name|document
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unsubscribe
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|UpdateListener
name|listener
init|=
operator|(
name|UpdateListener
operator|)
name|listeners
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
block|{
name|listener
operator|.
name|unsubscribe
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|nodeMoved
parameter_list|(
name|NodeId
name|oldNodeId
parameter_list|,
name|StoredNode
name|newNode
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|UpdateListener
name|listener
init|=
operator|(
name|UpdateListener
operator|)
name|listeners
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|listener
operator|!=
literal|null
condition|)
name|listener
operator|.
name|nodeMoved
argument_list|(
name|oldNodeId
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|debug
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"XQueryContext: "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listeners
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
operator|(
operator|(
name|UpdateListener
operator|)
name|listeners
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|debug
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

