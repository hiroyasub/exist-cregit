begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|SymbolTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryLexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryTreeParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|text
operator|.
name|TextModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|transform
operator|.
name|ModuleImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_comment
comment|/**  * The current XQuery execution context. Contains the static as well  * as the dynamic XQuery context components.  *   * @author Wolfgang Meier (wolfgang@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|XQueryContext
block|{
specifier|public
specifier|final
specifier|static
name|String
name|XML_NS
init|=
literal|"http://www.w3.org/XML/1998/namespace"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|SCHEMA_NS
init|=
literal|"http://www.w3.org/2001/XMLSchema"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|SCHEMA_DATATYPES_NS
init|=
literal|"http://www.w3.org/2001/XMLSchema-datatypes"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|SCHEMA_INSTANCE_NS
init|=
literal|"http://www.w3.org/2001/XMLSchema-instance"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|XPATH_DATATYPES_NS
init|=
literal|"http://www.w3.org/2003/05/xpath-datatypes"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|XQUERY_LOCAL_NS
init|=
literal|"http://www.w3.org/2003/08/xquery-local-functions"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XQueryContext
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Map
name|namespaces
decl_stmt|;
specifier|private
name|HashMap
name|inScopeNamespaces
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|HashMap
name|prefixes
decl_stmt|;
specifier|private
name|HashMap
name|inScopePrefixes
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|Stack
name|namespaceStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|TreeMap
name|declaredFunctions
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|private
name|TreeMap
name|globalVariables
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|private
name|TreeMap
name|variables
init|=
operator|new
name|TreeMap
argument_list|()
decl_stmt|;
specifier|private
name|Stack
name|variableStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|Stack
name|forwardReferences
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
comment|/** 	 * Loaded modules. 	 */
specifier|private
name|HashMap
name|modules
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
comment|/**  	 * The set of statically known documents. 	 */
specifier|private
name|DocumentSet
name|staticDocuments
init|=
literal|null
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
specifier|private
name|String
name|baseURI
init|=
literal|""
decl_stmt|;
specifier|private
name|String
name|moduleLoadPath
init|=
literal|"."
decl_stmt|;
specifier|private
name|String
name|defaultFunctionNamespace
init|=
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
decl_stmt|;
comment|/** 	 * Set to true to enable XPath 1.0 	 * backwards compatibility. 	 */
specifier|private
name|boolean
name|backwardsCompatible
init|=
literal|true
decl_stmt|;
specifier|private
name|boolean
name|stripWhitespace
init|=
literal|true
decl_stmt|;
comment|/** 	 * The position of the currently processed item in the context  	 * sequence. This field has to be set on demand, for example, 	 * before calling the fn:position() function.  	 */
specifier|private
name|int
name|contextPosition
init|=
literal|0
decl_stmt|;
comment|/** 	 * The builder used for creating in-memory document  	 * fragments 	 */
specifier|private
name|MemTreeBuilder
name|builder
init|=
literal|null
decl_stmt|;
specifier|private
name|Stack
name|fragmentStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|Expression
name|rootExpression
decl_stmt|;
specifier|public
name|XQueryContext
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
name|loadDefaults
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|setRootExpression
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
name|this
operator|.
name|rootExpression
operator|=
name|expr
expr_stmt|;
block|}
specifier|public
name|Expression
name|getRootExpression
parameter_list|()
block|{
return|return
name|rootExpression
return|;
block|}
comment|/** 	 * Declare a user-defined prefix/namespace mapping. 	 *  	 * eXist internally keeps a table containing all prefix/namespace 	 * mappings it found in documents, which have been previously 	 * stored into the database. These default mappings need not to be 	 * declared explicitely. 	 *  	 * @param prefix 	 * @param uri 	 */
specifier|public
name|void
name|declareNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
name|prefix
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
name|uri
operator|=
literal|""
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|put
argument_list|(
name|uri
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|declareNamespaces
parameter_list|(
name|Map
name|namespaceMap
parameter_list|)
block|{
name|this
operator|.
name|namespaces
operator|=
name|namespaceMap
expr_stmt|;
name|Map
operator|.
name|Entry
name|entry
decl_stmt|;
name|String
name|prefix
decl_stmt|,
name|uri
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaceMap
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|prefix
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
expr_stmt|;
name|uri
operator|=
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
expr_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
name|prefix
operator|=
literal|""
expr_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
name|uri
operator|=
literal|""
expr_stmt|;
name|prefixes
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Declare an in-scope namespace. This is called during query execution. 	 *  	 * @param prefix 	 * @param uri 	 */
specifier|public
name|void
name|declareInScopeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
if|if
condition|(
name|prefix
operator|==
literal|null
operator|||
name|uri
operator|==
literal|null
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"null argument passed to declareNamespace"
argument_list|)
throw|;
if|if
condition|(
name|inScopeNamespaces
operator|==
literal|null
condition|)
name|inScopeNamespaces
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|inScopeNamespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Returns the current default function namespace. 	 *  	 * @return 	 */
specifier|public
name|String
name|getDefaultFunctionNamespace
parameter_list|()
block|{
return|return
name|defaultFunctionNamespace
return|;
block|}
comment|/** 	 * Set the default function namespace. By default, this 	 * points to the namespace for XPath built-in functions. 	 *  	 * @param uri 	 */
specifier|public
name|void
name|setDefaultFunctionNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|defaultFunctionNamespace
operator|=
name|uri
expr_stmt|;
block|}
comment|/** 	 * Return the namespace URI mapped to the registered prefix 	 * or null if the prefix is not registered. 	 *  	 * @param prefix 	 * @return 	 */
specifier|public
name|String
name|getURIForPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|String
name|ns
init|=
operator|(
name|String
operator|)
name|namespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|ns
operator|==
literal|null
condition|)
comment|// try in-scope namespace declarations
return|return
name|inScopeNamespaces
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inScopeNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
else|else
return|return
name|ns
return|;
block|}
comment|/** 	 * Return the prefix mapped to the registered URI or 	 * null if the URI is not registered. 	 *  	 * @param uri 	 * @return 	 */
specifier|public
name|String
name|getPrefixForURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|String
name|prefix
init|=
operator|(
name|String
operator|)
name|prefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
return|return
name|inScopePrefixes
operator|==
literal|null
condition|?
literal|null
else|:
operator|(
name|String
operator|)
name|inScopeNamespaces
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
else|else
return|return
name|prefix
return|;
block|}
comment|/** 	 * Removes the namespace URI from the prefix/namespace  	 * mappings table. 	 *  	 * @param uri 	 */
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|prefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaces
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
name|inScopePrefixes
operator|.
name|remove
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|inScopeNamespaces
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Iterator
name|i
init|=
name|inScopeNamespaces
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
operator|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
comment|/** 	 * Clear all user-defined prefix/namespace mappings. 	 */
specifier|public
name|void
name|clearNamespaces
parameter_list|()
block|{
name|namespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
name|prefixes
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|inScopeNamespaces
operator|!=
literal|null
condition|)
block|{
name|inScopeNamespaces
operator|.
name|clear
argument_list|()
expr_stmt|;
name|inScopePrefixes
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|loadDefaults
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Set the set of statically known documents for the current 	 * execution context. These documents will be processed if 	 * no explicit document set has been set for the current expression 	 * with fn:doc() or fn:collection(). 	 *  	 * @param docs 	 */
specifier|public
name|void
name|setStaticallyKnownDocuments
parameter_list|(
name|DocumentSet
name|docs
parameter_list|)
block|{
name|staticDocuments
operator|=
name|docs
expr_stmt|;
block|}
comment|/** 	 * Get the set of statically known documents. 	 *  	 * @return 	 */
specifier|public
name|DocumentSet
name|getStaticallyKnownDocuments
parameter_list|()
block|{
return|return
name|staticDocuments
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|builder
operator|=
literal|null
expr_stmt|;
name|staticDocuments
operator|=
literal|null
expr_stmt|;
name|variableStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fragmentStack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Returns true if whitespace between constructed element nodes 	 * should be stripped by default. 	 *  	 * @return 	 */
specifier|public
name|boolean
name|stripWhitespace
parameter_list|()
block|{
return|return
name|stripWhitespace
return|;
block|}
comment|/** 	 * Return an iterator over all built-in modules currently 	 * registered. 	 *  	 * @return 	 */
specifier|public
name|Iterator
name|getModules
parameter_list|()
block|{
return|return
name|modules
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/** 	 * Get the built-in module registered for the given namespace 	 * URI. 	 *  	 * @param namespaceURI 	 * @return 	 */
specifier|public
name|Module
name|getModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
return|return
operator|(
name|Module
operator|)
name|modules
operator|.
name|get
argument_list|(
name|namespaceURI
argument_list|)
return|;
block|}
comment|/** 	 * Load a built-in module from the given class name and assign it to the 	 * namespace URI. The specified class should be a subclass of 	 * {@link Module}. The method will try to instantiate the class. If the 	 * class is not found or an exception is thrown, the method will silently  	 * fail. The namespace URI has to be equal to the namespace URI declared 	 * by the module class. Otherwise, the module is not loaded. 	 *  	 * @param namespaceURI 	 * @param moduleClass 	 */
specifier|public
name|void
name|loadBuiltInModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|moduleClass
parameter_list|)
block|{
if|if
condition|(
name|modules
operator|.
name|containsKey
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"module "
operator|+
name|namespaceURI
operator|+
literal|" is already present"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|Class
name|mClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|moduleClass
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|Module
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|mClass
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"failed to load module. "
operator|+
name|moduleClass
operator|+
literal|" is not an instance of org.exist.xpath.Module."
argument_list|)
expr_stmt|;
return|return;
block|}
name|Module
name|module
init|=
operator|(
name|Module
operator|)
name|mClass
operator|.
name|newInstance
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|module
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"the module declares a different namespace URI. Skipping..."
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|getPrefixForURI
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|==
literal|null
operator|&&
name|module
operator|.
name|getDefaultPrefix
argument_list|()
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
name|declareNamespace
argument_list|(
name|module
operator|.
name|getDefaultPrefix
argument_list|()
argument_list|,
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
name|modules
operator|.
name|put
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
comment|//LOG.debug("module " + module.getNamespaceURI() + " loaded successfully.");
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"module class "
operator|+
name|moduleClass
operator|+
literal|" not found. Skipping..."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while instantiating module class "
operator|+
name|moduleClass
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while instantiating module class "
operator|+
name|moduleClass
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Declare a user-defined function. All user-defined functions are kept 	 * in a single hash map. 	 *  	 * @param function 	 * @throws XPathException 	 */
specifier|public
name|void
name|declareFunction
parameter_list|(
name|UserDefinedFunction
name|function
parameter_list|)
throws|throws
name|XPathException
block|{
name|declaredFunctions
operator|.
name|put
argument_list|(
name|function
operator|.
name|getName
argument_list|()
argument_list|,
name|function
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Resolve a user-defined function. 	 *  	 * @param name 	 * @return 	 * @throws XPathException 	 */
specifier|public
name|UserDefinedFunction
name|resolveFunction
parameter_list|(
name|QName
name|name
parameter_list|)
throws|throws
name|XPathException
block|{
name|UserDefinedFunction
name|func
init|=
operator|(
name|UserDefinedFunction
operator|)
name|declaredFunctions
operator|.
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
return|return
name|func
return|;
block|}
comment|/** 	 * Declare a variable. This is called by variable binding expressions like 	 * "let" and "for". 	 *  	 * @param var 	 * @return 	 * @throws XPathException 	 */
specifier|public
name|Variable
name|declareVariable
parameter_list|(
name|Variable
name|var
parameter_list|)
throws|throws
name|XPathException
block|{
name|variables
operator|.
name|put
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
argument_list|,
name|var
argument_list|)
expr_stmt|;
name|var
operator|.
name|setStackPosition
argument_list|(
name|variableStack
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
comment|/** 	 * Declare a global variable as by "declare variable". 	 *  	 * @param qname 	 * @param value 	 * @return 	 * @throws XPathException 	 */
specifier|public
name|Variable
name|declareGlobalVariable
parameter_list|(
name|Variable
name|var
parameter_list|)
throws|throws
name|XPathException
block|{
name|globalVariables
operator|.
name|put
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
argument_list|,
name|var
argument_list|)
expr_stmt|;
name|var
operator|.
name|setStackPosition
argument_list|(
name|variableStack
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
comment|/** 	 * Declare a user-defined variable. 	 *  	 * The value argument is converted into an XPath value 	 * (@see XPathUtil#javaObjectToXPath(Object)). 	 *  	 * @param qname the qualified name of the new variable. Any namespaces should 	 * have been declared before. 	 * @param value a Java object, representing the fixed value of the variable 	 * @return the created Variable object 	 * @throws XPathException if the value cannot be converted into a known XPath value 	 * or the variable QName references an unknown namespace-prefix.  	 */
specifier|public
name|Variable
name|declareVariable
parameter_list|(
name|String
name|qname
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|qname
argument_list|)
decl_stmt|;
name|Variable
name|var
decl_stmt|;
name|Module
name|module
init|=
name|getModule
argument_list|(
name|qn
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|module
operator|.
name|declareVariable
argument_list|(
name|qn
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
name|Sequence
name|val
init|=
name|XPathUtil
operator|.
name|javaObjectToXPath
argument_list|(
name|value
argument_list|)
decl_stmt|;
name|var
operator|=
operator|(
name|Variable
operator|)
name|globalVariables
operator|.
name|get
argument_list|(
name|qn
argument_list|)
expr_stmt|;
if|if
condition|(
name|var
operator|==
literal|null
condition|)
block|{
name|var
operator|=
operator|new
name|Variable
argument_list|(
name|qn
argument_list|)
expr_stmt|;
name|globalVariables
operator|.
name|put
argument_list|(
name|qn
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
name|var
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
return|return
name|var
return|;
block|}
comment|/** 	 * Try to resolve a variable. 	 *  	 * @param qname the qualified name of the variable as string 	 * @return the declared Variable object 	 * @throws XPathException if the variable is unknown 	 */
specifier|public
name|Variable
name|resolveVariable
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|XPathException
block|{
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|resolveVariable
argument_list|(
name|qn
argument_list|)
return|;
block|}
comment|/** 	 * Try to resolve a variable. 	 *  	 * @param qname the qualified name of the variable 	 * @return the declared Variable object 	 * @throws XPathException if the variable is unknown 	 */
specifier|public
name|Variable
name|resolveVariable
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
name|Variable
name|var
decl_stmt|;
comment|// first, check if the variable is declared in a module
name|Module
name|module
init|=
operator|(
name|Module
operator|)
name|modules
operator|.
name|get
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
name|var
operator|=
name|module
operator|.
name|resolveVariable
argument_list|(
name|qname
argument_list|)
expr_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
condition|)
return|return
name|var
return|;
block|}
name|var
operator|=
operator|(
name|Variable
operator|)
name|variables
operator|.
name|get
argument_list|(
name|qname
argument_list|)
expr_stmt|;
if|if
condition|(
name|var
operator|==
literal|null
condition|)
block|{
name|var
operator|=
operator|(
name|Variable
operator|)
name|globalVariables
operator|.
name|get
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|var
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"variable "
operator|+
name|qname
operator|+
literal|" is not bound"
argument_list|)
throw|;
return|return
name|var
return|;
block|}
comment|/** 	 * Turn on/off XPath 1.0 backwards compatibility. 	 *  	 * If turned on, comparison expressions will behave like 	 * in XPath 1.0, i.e. if any one of the operands is a number, 	 * the other operand will be cast to a double. 	 *  	 * @param backwardsCompatible 	 */
specifier|public
name|void
name|setBackwardsCompatibility
parameter_list|(
name|boolean
name|backwardsCompatible
parameter_list|)
block|{
name|this
operator|.
name|backwardsCompatible
operator|=
name|backwardsCompatible
expr_stmt|;
block|}
comment|/** 	 * XPath 1.0 backwards compatibility turned on? 	 *  	 * In XPath 1.0 compatible mode, additional conversions 	 * will be applied to values if a numeric value is expected. 	 *   	 * @return 	 */
specifier|public
name|boolean
name|isBackwardsCompatible
parameter_list|()
block|{
return|return
name|this
operator|.
name|backwardsCompatible
return|;
block|}
comment|/** 	 * Get the DBBroker instance used for the current query. 	 *  	 * The DBBroker is the main database access object, providing 	 * access to all internal database functions. 	 *  	 * @return 	 */
specifier|public
name|DBBroker
name|getBroker
parameter_list|()
block|{
return|return
name|broker
return|;
block|}
specifier|public
name|void
name|setBroker
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
comment|/** 	 * Get the user which executes the current query. 	 *  	 * @return 	 */
specifier|public
name|User
name|getUser
parameter_list|()
block|{
return|return
name|broker
operator|.
name|getUser
argument_list|()
return|;
block|}
comment|/** 	 * Get the document builder currently used for creating 	 * temporary document fragments. A new document builder 	 * will be created on demand. 	 *  	 * @return 	 */
specifier|public
name|MemTreeBuilder
name|getDocumentBuilder
parameter_list|()
block|{
if|if
condition|(
name|builder
operator|==
literal|null
condition|)
block|{
name|builder
operator|=
operator|new
name|MemTreeBuilder
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
block|}
return|return
name|builder
return|;
block|}
comment|/** 	 * Push any document fragment created within the current 	 * execution context on the stack. 	 */
specifier|public
name|void
name|pushDocumentContext
parameter_list|()
block|{
if|if
condition|(
name|builder
operator|!=
literal|null
condition|)
name|fragmentStack
operator|.
name|push
argument_list|(
name|builder
argument_list|)
expr_stmt|;
name|builder
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|popDocumentContext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|fragmentStack
operator|.
name|isEmpty
argument_list|()
condition|)
name|builder
operator|=
operator|(
name|MemTreeBuilder
operator|)
name|fragmentStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Set the base URI for the evaluation context. 	 *  	 * This is the URI returned by the fn:base-uri() 	 * function. 	 *  	 * @param uri 	 */
specifier|public
name|void
name|setBaseURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|baseURI
operator|=
name|uri
expr_stmt|;
block|}
specifier|public
name|void
name|setModuleLoadPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|this
operator|.
name|moduleLoadPath
operator|=
name|path
expr_stmt|;
block|}
comment|/** 	 * Get the base URI of the evaluation context. 	 *  	 * This is the URI returned by the fn:base-uri() function. 	 *  	 * @return 	 */
specifier|public
name|String
name|getBaseURI
parameter_list|()
block|{
return|return
name|baseURI
return|;
block|}
comment|/** 	 * Set the current context position, i.e. the position 	 * of the currently processed item in the context sequence. 	 * This value is required by some expressions, e.g. fn:position(). 	 *  	 * @param pos 	 */
specifier|public
name|void
name|setContextPosition
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
name|contextPosition
operator|=
name|pos
expr_stmt|;
block|}
comment|/** 	 * Get the current context position, i.e. the position of 	 * the currently processed item in the context sequence. 	 *   	 * @return 	 */
specifier|public
name|int
name|getContextPosition
parameter_list|()
block|{
return|return
name|contextPosition
return|;
block|}
comment|/** 	 * Push all in-scope namespace declarations onto the stack. 	 */
specifier|public
name|void
name|pushNamespaceContext
parameter_list|()
block|{
name|HashMap
name|m
init|=
operator|(
name|HashMap
operator|)
name|inScopeNamespaces
operator|.
name|clone
argument_list|()
decl_stmt|;
name|namespaceStack
operator|.
name|push
argument_list|(
name|inScopeNamespaces
argument_list|)
expr_stmt|;
name|inScopeNamespaces
operator|=
name|m
expr_stmt|;
block|}
specifier|public
name|void
name|popNamespaceContext
parameter_list|()
block|{
name|inScopeNamespaces
operator|=
operator|(
name|HashMap
operator|)
name|namespaceStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Save the current context on top of a stack.  	 *  	 * Use {@link popContext()} to restore the current state. 	 * This method saves the current in-scope variable 	 * definitions. 	 */
specifier|public
name|void
name|pushLocalContext
parameter_list|(
name|boolean
name|emptyContext
parameter_list|)
block|{
name|variableStack
operator|.
name|push
argument_list|(
name|variables
argument_list|)
expr_stmt|;
if|if
condition|(
name|emptyContext
condition|)
name|variables
operator|=
operator|new
name|TreeMap
argument_list|()
expr_stmt|;
else|else
name|variables
operator|=
operator|new
name|TreeMap
argument_list|(
name|variables
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Restore previous state. 	 */
specifier|public
name|void
name|popLocalContext
parameter_list|()
block|{
name|variables
operator|=
operator|(
name|TreeMap
operator|)
name|variableStack
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Returns the current size of the stack. This is used to determine 	 * where a variable has been declared. 	 *  	 * @return 	 */
specifier|public
name|int
name|getCurrentStackSize
parameter_list|()
block|{
return|return
name|variableStack
operator|.
name|size
argument_list|()
return|;
block|}
comment|/** 	 * Import a module and make it available in this context. The prefix and 	 * location parameters are optional. If prefix is null, the default prefix specified 	 * by the module is used. If location is null, the module will be read from the 	 * namespace URI. 	 *  	 * @param namespaceURI 	 * @param prefix 	 * @param location 	 * @throws XPathException 	 */
specifier|public
name|void
name|importModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|location
operator|==
literal|null
condition|)
name|location
operator|=
name|namespaceURI
expr_stmt|;
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"java:"
argument_list|)
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|substring
argument_list|(
literal|"java:"
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|loadBuiltInModule
argument_list|(
name|namespaceURI
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
name|declareNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|location
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|<
literal|0
condition|)
block|{
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|moduleLoadPath
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|canRead
argument_list|()
condition|)
block|{
name|f
operator|=
operator|new
name|File
argument_list|(
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|canRead
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot read module source from file at "
operator|+
name|f
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
try|try
block|{
name|location
operator|=
operator|new
name|URI
argument_list|(
name|f
operator|.
name|toURL
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e1
parameter_list|)
block|{
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Loading module from "
operator|+
name|location
argument_list|)
expr_stmt|;
name|InputStreamReader
name|reader
decl_stmt|;
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|reader
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"source location for module "
operator|+
name|namespaceURI
operator|+
literal|" should be a valid URL"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"unsupported source encoding"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"IO exception while loading module "
operator|+
name|namespaceURI
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|XQueryContext
name|context
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|getStaticallyKnownDocuments
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setBaseURI
argument_list|(
name|baseURI
argument_list|)
expr_stmt|;
name|XQueryLexer
name|lexer
init|=
operator|new
name|XQueryLexer
argument_list|(
name|reader
argument_list|)
decl_stmt|;
name|XQueryParser
name|parser
init|=
operator|new
name|XQueryParser
argument_list|(
name|lexer
argument_list|)
decl_stmt|;
name|XQueryTreeParser
name|astParser
init|=
operator|new
name|XQueryTreeParser
argument_list|(
name|context
argument_list|)
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|xpath
argument_list|()
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|foundErrors
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
name|parser
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|parser
operator|.
name|getErrorMessage
argument_list|()
argument_list|)
throw|;
block|}
name|AST
name|ast
init|=
name|parser
operator|.
name|getAST
argument_list|()
decl_stmt|;
name|PathExpr
name|path
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|astParser
operator|.
name|xpath
argument_list|(
name|ast
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|astParser
operator|.
name|foundErrors
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|astParser
operator|.
name|getErrorMessage
argument_list|()
argument_list|,
name|astParser
operator|.
name|getLastException
argument_list|()
argument_list|)
throw|;
block|}
name|ExternalModule
name|module
init|=
name|astParser
operator|.
name|getModule
argument_list|()
decl_stmt|;
if|if
condition|(
name|module
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"source at "
operator|+
name|location
operator|+
literal|" is not a valid module"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|module
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|equals
argument_list|(
name|namespaceURI
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"namespace URI declared by module ("
operator|+
name|module
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|") does not match namespace URI in import statement, which was: "
operator|+
name|namespaceURI
argument_list|)
throw|;
if|if
condition|(
name|prefix
operator|==
literal|null
condition|)
name|prefix
operator|=
name|module
operator|.
name|getDefaultPrefix
argument_list|()
expr_stmt|;
name|declareNamespace
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|modules
operator|.
name|put
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
name|context
operator|.
name|modules
operator|.
name|put
argument_list|(
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|module
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TokenStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"error found while loading module from "
operator|+
name|location
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|addForwardReference
parameter_list|(
name|FunctionCall
name|call
parameter_list|)
block|{
name|forwardReferences
operator|.
name|push
argument_list|(
name|call
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|resolveForwardReferences
parameter_list|()
throws|throws
name|XPathException
block|{
while|while
condition|(
operator|!
name|forwardReferences
operator|.
name|empty
argument_list|()
condition|)
block|{
name|FunctionCall
name|call
init|=
operator|(
name|FunctionCall
operator|)
name|forwardReferences
operator|.
name|pop
argument_list|()
decl_stmt|;
name|UserDefinedFunction
name|func
init|=
name|resolveFunction
argument_list|(
name|call
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|func
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|call
operator|.
name|getASTNode
argument_list|()
argument_list|,
literal|"Call to undeclared function: "
operator|+
name|call
operator|.
name|getQName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
name|call
operator|.
name|resolveForwardReference
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Load the default prefix/namespace mappings table and set up 	 * internal functions. 	 */
specifier|private
name|void
name|loadDefaults
parameter_list|()
block|{
name|SymbolTable
name|syms
init|=
name|broker
operator|.
name|getSymbols
argument_list|()
decl_stmt|;
name|String
index|[]
name|pfx
init|=
name|syms
operator|.
name|defaultPrefixList
argument_list|()
decl_stmt|;
name|namespaces
operator|=
operator|new
name|HashMap
argument_list|(
name|pfx
operator|.
name|length
argument_list|)
expr_stmt|;
name|prefixes
operator|=
operator|new
name|HashMap
argument_list|(
name|pfx
operator|.
name|length
argument_list|)
expr_stmt|;
name|String
name|sym
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pfx
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|sym
operator|=
name|syms
operator|.
name|getDefaultNamespace
argument_list|(
name|pfx
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|namespaces
operator|.
name|put
argument_list|(
name|pfx
index|[
name|i
index|]
argument_list|,
name|sym
argument_list|)
expr_stmt|;
name|prefixes
operator|.
name|put
argument_list|(
name|sym
argument_list|,
name|pfx
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
comment|// default namespaces
name|declareNamespace
argument_list|(
literal|"xml"
argument_list|,
name|XML_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"xs"
argument_list|,
name|SCHEMA_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"xdt"
argument_list|,
name|XPATH_DATATYPES_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"local"
argument_list|,
name|XQUERY_LOCAL_NS
argument_list|)
expr_stmt|;
name|declareNamespace
argument_list|(
literal|"fn"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
expr_stmt|;
comment|// load built-in modules
name|loadBuiltInModule
argument_list|(
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|,
literal|"org.exist.xquery.functions.ModuleImpl"
argument_list|)
expr_stmt|;
name|loadBuiltInModule
argument_list|(
name|Function
operator|.
name|UTIL_FUNCTION_NS
argument_list|,
literal|"org.exist.xquery.functions.util.ModuleImpl"
argument_list|)
expr_stmt|;
name|loadBuiltInModule
argument_list|(
name|ModuleImpl
operator|.
name|NAMESPACE_URI
argument_list|,
literal|"org.exist.xquery.functions.transform.ModuleImpl"
argument_list|)
expr_stmt|;
name|loadBuiltInModule
argument_list|(
name|Function
operator|.
name|XMLDB_FUNCTION_NS
argument_list|,
literal|"org.exist.xquery.functions.xmldb.ModuleImpl"
argument_list|)
expr_stmt|;
name|loadBuiltInModule
argument_list|(
name|Function
operator|.
name|REQUEST_FUNCTION_NS
argument_list|,
literal|"org.exist.xquery.functions.request.RequestModule"
argument_list|)
expr_stmt|;
name|loadBuiltInModule
argument_list|(
name|TextModule
operator|.
name|NAMESPACE_URI
argument_list|,
literal|"org.exist.xquery.functions.text.TextModule"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

