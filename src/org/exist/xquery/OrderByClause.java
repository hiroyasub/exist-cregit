begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|OrderedValueSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Represents an "order by" clause within a FLWOR expression.  */
end_comment

begin_class
specifier|public
class|class
name|OrderByClause
extends|extends
name|AbstractFLWORClause
block|{
specifier|protected
name|OrderSpec
index|[]
name|orderSpecs
init|=
literal|null
decl_stmt|;
specifier|protected
name|OrderedValueSequence
name|orderedResult
init|=
literal|null
decl_stmt|;
specifier|public
name|OrderByClause
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|List
argument_list|<
name|OrderSpec
argument_list|>
name|orderSpecs
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|orderSpecs
operator|=
name|orderSpecs
operator|.
name|toArray
argument_list|(
operator|new
name|OrderSpec
index|[
name|orderSpecs
operator|.
name|size
argument_list|()
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|OrderSpec
index|[]
name|getOrderSpecs
parameter_list|()
block|{
return|return
name|orderSpecs
return|;
block|}
annotation|@
name|Override
specifier|public
name|ClauseType
name|getType
parameter_list|()
block|{
return|return
name|ClauseType
operator|.
name|ORDERBY
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|contextInfo
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|unordered
operator|=
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|UNORDERED
operator|)
operator|>
literal|0
expr_stmt|;
specifier|final
name|AnalyzeContextInfo
name|newContextInfo
init|=
operator|new
name|AnalyzeContextInfo
argument_list|(
name|contextInfo
argument_list|)
decl_stmt|;
name|newContextInfo
operator|.
name|addFlag
argument_list|(
name|SINGLE_STEP_EXECUTION
argument_list|)
expr_stmt|;
if|if
condition|(
name|orderSpecs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|OrderSpec
name|spec
range|:
name|orderSpecs
control|)
block|{
name|spec
operator|.
name|analyze
argument_list|(
name|newContextInfo
argument_list|)
expr_stmt|;
block|}
block|}
name|returnExpr
operator|.
name|analyze
argument_list|(
name|newContextInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|orderedResult
operator|==
literal|null
condition|)
block|{
name|orderedResult
operator|=
operator|new
name|OrderedValueSequence
argument_list|(
name|orderSpecs
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Sequence
name|result
init|=
name|getReturnExpression
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|!=
literal|null
condition|)
block|{
name|orderedResult
operator|.
name|addAll
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|postEval
parameter_list|(
name|Sequence
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|orderedResult
operator|==
literal|null
condition|)
block|{
return|return
name|seq
return|;
block|}
name|orderedResult
operator|.
name|sort
argument_list|()
expr_stmt|;
name|Sequence
name|result
init|=
name|orderedResult
decl_stmt|;
comment|// reset to prepare for next iteration of outer loop
name|orderedResult
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|getReturnExpression
argument_list|()
operator|instanceof
name|FLWORClause
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|FLWORClause
operator|)
name|getReturnExpression
argument_list|()
operator|)
operator|.
name|postEval
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|postEval
argument_list|(
name|result
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"order by "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|orderSpecs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|dumper
operator|.
name|display
argument_list|(
name|orderSpecs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|dumper
operator|.
name|nl
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|accept
parameter_list|(
name|ExpressionVisitor
name|visitor
parameter_list|)
block|{
name|visitor
operator|.
name|visitOrderByClause
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|orderedResult
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

