begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|ExistPDP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|com
operator|.
name|sun
operator|.
name|xacml
operator|.
name|ctx
operator|.
name|RequestCtx
import|;
end_import

begin_comment
comment|/** * Wrapper for internal modules in order to * perform access control checks on internal * module function calls.  It delegates to * the wrapped<code>Function</code> for * everything, but checks permission before * delegating<code>eval</code> */
end_comment

begin_class
specifier|public
class|class
name|InternalFunctionCall
extends|extends
name|Function
block|{
specifier|private
specifier|final
name|Function
name|function
decl_stmt|;
specifier|public
name|InternalFunctionCall
parameter_list|(
name|Function
name|f
parameter_list|)
block|{
name|super
argument_list|(
name|f
operator|.
name|getContext
argument_list|()
argument_list|,
name|f
operator|.
name|getSignature
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|f
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
name|context
operator|.
name|proceed
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|QName
name|functionName
init|=
name|function
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|//check access to the method
try|try
block|{
specifier|final
name|ExistPDP
name|pdp
init|=
name|getContext
argument_list|()
operator|.
name|getPDP
argument_list|()
decl_stmt|;
if|if
condition|(
name|pdp
operator|!=
literal|null
condition|)
block|{
specifier|final
name|RequestCtx
name|request
init|=
name|pdp
operator|.
name|getRequestHelper
argument_list|()
operator|.
name|createFunctionRequest
argument_list|(
name|context
argument_list|,
literal|null
argument_list|,
name|functionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|!=
literal|null
condition|)
block|{
name|pdp
operator|.
name|evaluate
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|function
argument_list|,
literal|"Access to function '"
operator|+
name|functionName
operator|+
literal|"'  denied."
argument_list|,
name|pde
argument_list|)
throw|;
block|}
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceFunctions
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceFunctionStart
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|stackEnter
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
return|return
name|function
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|e
operator|.
name|setLocation
argument_list|(
name|line
argument_list|,
name|column
argument_list|,
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
finally|finally
block|{
name|context
operator|.
name|stackLeave
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceFunctions
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|traceFunctionEnd
argument_list|(
name|this
argument_list|,
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Function
name|getFunction
parameter_list|()
block|{
return|return
name|function
return|;
block|}
specifier|public
name|int
name|getArgumentCount
parameter_list|()
block|{
return|return
name|function
operator|.
name|getArgumentCount
argument_list|()
return|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|function
operator|.
name|getName
argument_list|()
return|;
block|}
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|function
operator|.
name|returnsType
argument_list|()
return|;
block|}
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
name|function
operator|.
name|getCardinality
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.Function#analyze(org.exist.xquery.AnalyzeContextInfo) 	 */
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|contextInfo
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
try|try
block|{
name|function
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|e
operator|.
name|setLocation
argument_list|(
name|line
argument_list|,
name|column
argument_list|,
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|Expression
name|parent
parameter_list|)
block|{
name|function
operator|.
name|setParent
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Expression
name|getParent
parameter_list|()
block|{
return|return
name|function
operator|.
name|getParent
argument_list|()
return|;
block|}
specifier|public
name|XQueryContext
name|getContext
parameter_list|()
block|{
return|return
name|function
operator|.
name|getContext
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLine
parameter_list|()
block|{
return|return
name|function
operator|.
name|getLine
argument_list|()
return|;
block|}
specifier|public
name|int
name|getColumn
parameter_list|()
block|{
return|return
name|function
operator|.
name|getColumn
argument_list|()
return|;
block|}
specifier|public
name|void
name|setASTNode
parameter_list|(
name|XQueryAST
name|ast
parameter_list|)
block|{
name|function
operator|.
name|setASTNode
argument_list|(
name|ast
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setLocation
parameter_list|(
name|int
name|line
parameter_list|,
name|int
name|column
parameter_list|)
block|{
name|function
operator|.
name|setLocation
argument_list|(
name|line
argument_list|,
name|column
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|Expression
name|s
parameter_list|)
block|{
name|function
operator|.
name|add
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|PathExpr
name|path
parameter_list|)
block|{
name|function
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPath
parameter_list|(
name|PathExpr
name|path
parameter_list|)
block|{
name|function
operator|.
name|addPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addPredicate
parameter_list|(
name|Predicate
name|pred
parameter_list|)
block|{
name|function
operator|.
name|addPredicate
argument_list|(
name|pred
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|function
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dump
parameter_list|(
name|Writer
name|writer
parameter_list|)
block|{
name|function
operator|.
name|dump
argument_list|(
name|writer
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Expression
name|getArgument
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|function
operator|.
name|getArgument
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
name|Sequence
index|[]
name|getArguments
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|function
operator|.
name|getArguments
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
return|;
block|}
specifier|public
name|DocumentSet
name|getContextDocSet
parameter_list|()
block|{
return|return
name|function
operator|.
name|getContextDocSet
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDependencies
parameter_list|()
block|{
return|return
name|function
operator|.
name|getDependencies
argument_list|()
return|;
block|}
specifier|public
name|DocumentSet
name|getDocumentSet
parameter_list|()
block|{
return|return
name|function
operator|.
name|getDocumentSet
argument_list|()
return|;
block|}
specifier|public
name|Expression
name|getExpression
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|function
operator|.
name|getExpression
argument_list|(
name|pos
argument_list|)
return|;
block|}
specifier|public
name|Expression
name|getLastExpression
parameter_list|()
block|{
return|return
name|function
operator|.
name|getLastExpression
argument_list|()
return|;
block|}
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|function
operator|.
name|getLength
argument_list|()
return|;
block|}
specifier|public
name|String
name|getLiteralValue
parameter_list|()
block|{
return|return
name|function
operator|.
name|getLiteralValue
argument_list|()
return|;
block|}
specifier|public
name|FunctionSignature
name|getSignature
parameter_list|()
block|{
return|return
name|function
operator|.
name|getSignature
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isCalledAs
parameter_list|(
name|String
name|localName
parameter_list|)
block|{
return|return
name|function
operator|.
name|isCalledAs
argument_list|(
name|localName
argument_list|)
return|;
block|}
specifier|public
name|void
name|replaceLastExpression
parameter_list|(
name|Expression
name|s
parameter_list|)
block|{
name|function
operator|.
name|replaceLastExpression
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|function
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|function
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setArguments
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|XPathException
block|{
name|function
operator|.
name|setArguments
argument_list|(
name|arguments
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|function
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setContextDocSet
parameter_list|(
name|DocumentSet
name|contextSet
parameter_list|)
block|{
name|function
operator|.
name|setContextDocSet
argument_list|(
name|contextSet
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|function
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|accept
parameter_list|(
name|ExpressionVisitor
name|visitor
parameter_list|)
block|{
name|function
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

