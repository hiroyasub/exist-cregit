begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|VirtualNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|ExtNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NewArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|indexing
operator|.
name|StructuralIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|InMemoryNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|EmbeddedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|ExtendedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|IEmbeddedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|StaXUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|UpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|StreamFilter
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeHandle
import|;
end_import

begin_comment
comment|/**  * Processes all location path steps (like descendant::*, ancestor::XXX).  *   * The results of the first evaluation of the expression are cached for the  * lifetime of the object and only reloaded if the context sequence (as passed  * to the {@link #eval(Sequence, Item)} method) has changed.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|LocationStep
extends|extends
name|Step
block|{
specifier|private
specifier|static
specifier|final
name|int
name|INDEX_SCAN_THRESHOLD
init|=
literal|10000
decl_stmt|;
specifier|protected
name|NodeSet
name|currentSet
init|=
literal|null
decl_stmt|;
specifier|protected
name|DocumentSet
name|currentDocs
init|=
literal|null
decl_stmt|;
specifier|protected
name|UpdateListener
name|listener
init|=
literal|null
decl_stmt|;
specifier|protected
name|Expression
name|parent
init|=
literal|null
decl_stmt|;
comment|// Fields for caching the last result
specifier|protected
name|CachedResult
name|cached
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|parentDeps
init|=
name|Dependency
operator|.
name|UNKNOWN_DEPENDENCY
decl_stmt|;
specifier|protected
name|boolean
name|preloadedData
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|optimized
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|inUpdate
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|useDirectChildSelect
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|applyPredicate
init|=
literal|true
decl_stmt|;
comment|// Cache for the current NodeTest type
specifier|private
name|Integer
name|nodeTestType
init|=
literal|null
decl_stmt|;
comment|/** 	 * Creates a new<code>LocationStep</code> instance. 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param axis 	 *            an<code>int</code> value 	 */
specifier|public
name|LocationStep
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|axis
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|axis
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Creates a new<code>LocationStep</code> instance. 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param axis 	 *            an<code>int</code> value 	 * @param test 	 *            a<code>NodeTest</code> value 	 */
specifier|public
name|LocationStep
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|axis
parameter_list|,
name|NodeTest
name|test
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|axis
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see org.exist.xquery.AbstractExpression#getDependencies() 	 */
specifier|public
name|int
name|getDependencies
parameter_list|()
block|{
name|int
name|deps
init|=
name|Dependency
operator|.
name|CONTEXT_SET
decl_stmt|;
comment|// self axis has an obvious dependency on the context item
comment|// likewise we depend on the context item if this is a single path step (outside a predicate)
if|if
condition|(
operator|!
name|this
operator|.
name|inPredicate
operator|&&
operator|(
name|this
operator|.
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
operator|||
operator|(
name|parent
operator|!=
literal|null
operator|&&
name|parent
operator|.
name|getSubExpressionCount
argument_list|()
operator|>
literal|0
operator|&&
name|parent
operator|.
name|getSubExpression
argument_list|(
literal|0
argument_list|)
operator|==
name|this
operator|)
operator|)
condition|)
block|{
name|deps
operator|=
name|deps
operator||
name|Dependency
operator|.
name|CONTEXT_ITEM
expr_stmt|;
block|}
comment|// TODO : normally, we should call this one...
comment|// int deps = super.getDependencies(); ???
for|for
control|(
specifier|final
name|Predicate
name|pred
range|:
name|predicates
control|)
block|{
name|deps
operator||=
name|pred
operator|.
name|getDependencies
argument_list|()
expr_stmt|;
block|}
comment|// TODO : should we remove the CONTEXT_ITEM dependency returned by the
comment|// predicates ? See the comment above.
comment|// consider nested predicates however...
return|return
name|deps
return|;
block|}
comment|/** 	 * If the current path expression depends on local variables from a for 	 * expression, we can optimize by preloading entire element or attribute 	 * sets. 	 *  	 * @return Whether or not we can optimize 	 */
specifier|protected
name|boolean
name|hasPreloadedData
parameter_list|()
block|{
comment|// TODO : log elsewhere ?
if|if
condition|(
name|preloadedData
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|null
argument_list|,
literal|"Preloaded NodeSets"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|//		if (inUpdate)
comment|//			return false;
comment|//		if ((parentDeps& Dependency.LOCAL_VARS) == Dependency.LOCAL_VARS) {
comment|//			context.getProfiler().message(this, Profiler.OPTIMIZATIONS, null,
comment|//					"Preloaded NodeSets");
comment|//			return true;
comment|//		}
return|return
literal|false
return|;
block|}
comment|/** 	 * The method<code>setPreloadedData</code> 	 *  	 * @param docs 	 *            a<code>DocumentSet</code> value 	 * @param nodes 	 *            a<code>NodeSet</code> value 	 */
specifier|public
name|void
name|setPreloadedData
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|preloadedData
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|currentSet
operator|=
name|nodes
expr_stmt|;
name|this
operator|.
name|optimized
operator|=
literal|true
expr_stmt|;
block|}
comment|/** 	 * The method<code>applyPredicate</code> 	 *  	 * @param outerSequence 	 *            a<code>Sequence</code> value 	 * @param contextSequence 	 *            a<code>Sequence</code> value 	 * @return a<code>Sequence</code> value 	 * @exception XPathException 	 *                if an error occurs 	 */
specifier|protected
name|Sequence
name|applyPredicate
parameter_list|(
name|Sequence
name|outerSequence
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|contextSequence
operator|==
literal|null
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
if|if
condition|(
name|predicates
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|||
operator|!
name|applyPredicate
operator|||
operator|(
operator|!
operator|(
name|contextSequence
operator|instanceof
name|VirtualNodeSet
operator|)
operator|&&
name|contextSequence
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
comment|// Nothing to apply
block|{
return|return
name|contextSequence
return|;
block|}
name|Sequence
name|result
decl_stmt|;
specifier|final
name|Predicate
name|pred
init|=
operator|(
name|Predicate
operator|)
name|predicates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// If the current step is an // abbreviated step, we have to treat the
comment|// predicate
comment|// specially to get the context position right. //a[1] translates to
comment|// /descendant-or-self::node()/a[1],
comment|// so we need to return the 1st a from any parent of a.
comment|//
comment|// If the predicate is known to return a node set, no special treatment
comment|// is required.
if|if
condition|(
name|abbreviatedStep
operator|&&
operator|(
name|pred
operator|.
name|getExecutionMode
argument_list|()
operator|!=
name|Predicate
operator|.
name|NODE
operator|||
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
operator|)
condition|)
block|{
name|result
operator|=
operator|new
name|ValueSequence
argument_list|()
expr_stmt|;
operator|(
operator|(
name|ValueSequence
operator|)
name|result
operator|)
operator|.
name|keepUnOrdered
argument_list|(
name|unordered
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
name|outerSequence
operator|=
name|contextSet
operator|.
name|getParents
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|outerSequence
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NodeValue
name|node
init|=
operator|(
name|NodeValue
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
specifier|final
name|Sequence
name|newContextSeq
init|=
name|contextSet
operator|.
name|selectParentChild
argument_list|(
operator|(
name|NodeSet
operator|)
name|node
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
name|getExpressionId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|temp
init|=
name|processPredicate
argument_list|(
name|outerSequence
argument_list|,
name|newContextSeq
argument_list|)
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
name|outerSequence
operator|=
name|nodes
operator|.
name|getParents
argument_list|(
operator|new
name|AnyNodeTest
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|outerSequence
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NodeValue
name|node
init|=
operator|(
name|NodeValue
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
specifier|final
name|InMemoryNodeSet
name|newSet
init|=
operator|new
name|InMemoryNodeSet
argument_list|()
decl_stmt|;
operator|(
operator|(
name|NodeImpl
operator|)
name|node
operator|)
operator|.
name|selectChildren
argument_list|(
name|test
argument_list|,
name|newSet
argument_list|)
expr_stmt|;
specifier|final
name|Sequence
name|temp
init|=
name|processPredicate
argument_list|(
name|outerSequence
argument_list|,
name|newSet
argument_list|)
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|result
operator|=
name|processPredicate
argument_list|(
name|outerSequence
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Sequence
name|processPredicate
parameter_list|(
name|Sequence
name|outerSequence
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Predicate
name|pred
decl_stmt|;
name|Sequence
name|result
init|=
name|contextSequence
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|Predicate
argument_list|>
name|i
init|=
name|predicates
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|result
operator|instanceof
name|VirtualNodeSet
operator|||
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
operator|)
condition|;
control|)
block|{
comment|// TODO : log and/or profile ?
name|pred
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|pred
operator|.
name|setContextDocSet
argument_list|(
name|getContextDocSet
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|pred
operator|.
name|evalPredicate
argument_list|(
name|outerSequence
argument_list|,
name|result
argument_list|,
name|axis
argument_list|)
expr_stmt|;
comment|// subsequent predicates operate on the result of the previous one
name|outerSequence
operator|=
literal|null
expr_stmt|;
name|context
operator|.
name|setContextSequencePosition
argument_list|(
operator|-
literal|1
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see org.exist.xquery.Step#analyze(org.exist.xquery.Expression) 	 */
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|this
operator|.
name|parent
operator|=
name|contextInfo
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|unordered
operator|=
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|UNORDERED
operator|)
operator|>
literal|0
expr_stmt|;
name|parentDeps
operator|=
name|parent
operator|.
name|getDependencies
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|IN_UPDATE
operator|)
operator|>
literal|0
condition|)
block|{
name|inUpdate
operator|=
literal|true
expr_stmt|;
block|}
comment|//		if ((contextInfo.getFlags()& SINGLE_STEP_EXECUTION)> 0) {
comment|//			preloadedData = true;
comment|//		}
if|if
condition|(
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|USE_TREE_TRAVERSAL
operator|)
operator|>
literal|0
condition|)
block|{
name|useDirectChildSelect
operator|=
literal|true
expr_stmt|;
block|}
comment|// Mark ".", which is expanded as self::node() by the parser
comment|// even though it may *also* be relevant with atomic sequences
if|if
condition|(
name|this
operator|.
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
operator|&&
name|this
operator|.
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
condition|)
block|{
name|contextInfo
operator|.
name|addFlag
argument_list|(
name|DOT_TEST
argument_list|)
expr_stmt|;
block|}
comment|//Change axis from descendant-or-self to descendant for '//'
if|if
condition|(
name|this
operator|.
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
operator|&&
name|isAbbreviated
argument_list|()
condition|)
block|{
name|this
operator|.
name|axis
operator|=
name|Constants
operator|.
name|DESCENDANT_AXIS
expr_stmt|;
block|}
comment|// static analysis for empty-sequence
name|Expression
name|contextStep
decl_stmt|;
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|SELF_AXIS
case|:
if|if
condition|(
name|getTest
argument_list|()
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|NODE
condition|)
block|{
name|contextStep
operator|=
name|contextInfo
operator|.
name|getContextStep
argument_list|()
expr_stmt|;
if|if
condition|(
name|contextStep
operator|instanceof
name|LocationStep
condition|)
block|{
specifier|final
name|LocationStep
name|cStep
init|=
operator|(
name|LocationStep
operator|)
name|contextStep
decl_stmt|;
comment|// WM: the following checks will only work on simple filters like //a[self::b], so we
comment|// have to make sure they are not applied to more complex expression types
if|if
condition|(
name|parent
operator|.
name|getSubExpressionCount
argument_list|()
operator|==
literal|1
operator|&&
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getTest
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|,
name|cStep
operator|.
name|getTest
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPST0005
argument_list|,
literal|"Got nothing from self::"
operator|+
name|getTest
argument_list|()
operator|+
literal|", because parent node kind "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|cStep
operator|.
name|getTest
argument_list|()
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|parent
operator|.
name|getSubExpressionCount
argument_list|()
operator|==
literal|1
operator|&&
operator|!
operator|(
name|cStep
operator|.
name|getTest
argument_list|()
operator|.
name|isWildcardTest
argument_list|()
operator|||
name|getTest
argument_list|()
operator|.
name|isWildcardTest
argument_list|()
operator|)
operator|&&
operator|!
name|cStep
operator|.
name|getTest
argument_list|()
operator|.
name|equals
argument_list|(
name|getTest
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPST0005
argument_list|,
literal|"Self::"
operator|+
name|getTest
argument_list|()
operator|+
literal|" called on set of nodes which do not contain any nodes of this name."
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
comment|//		case Constants.DESCENDANT_AXIS:
case|case
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
case|:
name|contextStep
operator|=
name|contextInfo
operator|.
name|getContextStep
argument_list|()
expr_stmt|;
if|if
condition|(
name|contextStep
operator|instanceof
name|LocationStep
condition|)
block|{
specifier|final
name|LocationStep
name|cStep
init|=
operator|(
name|LocationStep
operator|)
name|contextStep
decl_stmt|;
if|if
condition|(
operator|(
name|cStep
operator|.
name|getTest
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ATTRIBUTE
operator|||
name|cStep
operator|.
name|getTest
argument_list|()
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|TEXT
operator|)
operator|&&
name|cStep
operator|.
name|getTest
argument_list|()
operator|!=
name|getTest
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPST0005
argument_list|,
literal|"Descendant-or-self::"
operator|+
name|getTest
argument_list|()
operator|+
literal|" from an attribute gets nothing."
argument_list|)
throw|;
block|}
block|}
break|break;
comment|//		case Constants.PARENT_AXIS:
comment|//		case Constants.ATTRIBUTE_AXIS:
default|default:
block|}
comment|// TODO : log somewhere ?
name|super
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * The method<code>eval</code> 	 *  	 * @param contextSequence 	 *            a<code>Sequence</code> value 	 * @param contextItem 	 *            an<code>Item</code> value 	 * @return a<code>Sequence</code> value 	 * @exception XPathException 	 *                if an error occurs 	 */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT ITEM"
argument_list|,
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Sequence
name|result
decl_stmt|;
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
block|{
name|contextSequence
operator|=
name|contextItem
operator|.
name|toSequence
argument_list|()
expr_stmt|;
block|}
comment|/* 		 * if(contextSequence == null) //Commented because this the high level 		 * result nodeset is *really* null result = NodeSet.EMPTY_SET; //Try to 		 * return cached results else 		 */
comment|// TODO: disabled cache for now as it may cause concurrency issues
comment|// better use compile-time inspection and maybe a pragma to mark those
comment|// sections in the query that can be safely cached
comment|// if (cached != null&& cached.isValid(contextSequence, contextItem)) {
comment|//
comment|// // WARNING : commented since predicates are *also* applied below !
comment|// // -pb
comment|// /*
comment|// * if (predicates.size()> 0) { applyPredicate(contextSequence,
comment|// * cached.getResult()); } else {
comment|// */
comment|// result = cached.getResult();
comment|// if (context.getProfiler().isEnabled()) {
comment|// LOG.debug("Using cached results");
comment|// }
comment|// context.getProfiler().message(this, Profiler.OPTIMIZATIONS,
comment|// "Using cached results", result);
comment|//
comment|// // }
if|if
condition|(
name|needsComputation
argument_list|()
condition|)
block|{
if|if
condition|(
name|contextSequence
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPDY0002
argument_list|,
literal|"Undefined context sequence for '"
operator|+
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
try|try
block|{
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|DESCENDANT_AXIS
case|:
case|case
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
case|:
name|result
operator|=
name|getDescendants
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|CHILD_AXIS
case|:
comment|// VirtualNodeSets may have modified the axis ; checking the
comment|// type
comment|// TODO : further checks ?
comment|//				if (this.test.getType() == Type.ATTRIBUTE) {
comment|//					this.axis = Constants.ATTRIBUTE_AXIS;
comment|//					result = getAttributes(context, contextSequence);
comment|//				} else {
name|result
operator|=
name|getChildren
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
comment|//				}
break|break;
case|case
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
case|:
case|case
name|Constants
operator|.
name|ANCESTOR_AXIS
case|:
name|result
operator|=
name|getAncestors
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|PARENT_AXIS
case|:
name|result
operator|=
name|getParents
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|SELF_AXIS
case|:
if|if
condition|(
operator|!
operator|(
name|contextSequence
operator|instanceof
name|VirtualNodeSet
operator|)
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|contextSequence
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|)
condition|)
block|{
comment|// This test is copied from the legacy method
comment|// getSelfAtomic()
if|if
condition|(
operator|!
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|test
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be applied to an atomic value."
argument_list|)
throw|;
block|}
name|result
operator|=
name|contextSequence
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|getSelf
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Constants
operator|.
name|ATTRIBUTE_AXIS
case|:
case|case
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
case|:
name|result
operator|=
name|getAttributes
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|PRECEDING_AXIS
case|:
name|result
operator|=
name|getPreceding
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|FOLLOWING_AXIS
case|:
name|result
operator|=
name|getFollowing
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
case|:
case|case
name|Constants
operator|.
name|FOLLOWING_SIBLING_AXIS
case|:
name|result
operator|=
name|getSiblings
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|e
operator|.
name|setLocation
argument_list|(
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|,
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|NodeSet
operator|.
name|EMPTY_SET
expr_stmt|;
block|}
comment|// Caches the result
if|if
condition|(
name|axis
operator|!=
name|Constants
operator|.
name|SELF_AXIS
operator|&&
name|contextSequence
operator|!=
literal|null
operator|&&
name|contextSequence
operator|.
name|isCacheable
argument_list|()
condition|)
block|{
comment|// TODO : cache *after* removing duplicates ? -pb
name|cached
operator|=
operator|new
name|CachedResult
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
comment|// Remove duplicate nodes
name|result
operator|.
name|removeDuplicates
argument_list|()
expr_stmt|;
comment|// Apply the predicate
name|result
operator|=
name|applyPredicate
argument_list|(
name|contextSequence
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|""
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
comment|// actualReturnType = result.getItemType();
return|return
name|result
return|;
block|}
comment|// Avoid unnecessary tests (these should be detected by the parser)
specifier|private
name|boolean
name|needsComputation
parameter_list|()
block|{
comment|// TODO : log this ?
switch|switch
condition|(
name|axis
condition|)
block|{
comment|// Certainly not exhaustive
case|case
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
case|:
case|case
name|Constants
operator|.
name|PARENT_AXIS
case|:
comment|// case Constants.SELF_AXIS:
if|if
condition|(
name|nodeTestType
operator|==
literal|null
condition|)
block|{
name|nodeTestType
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|test
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|nodeTestType
operator|.
name|intValue
argument_list|()
operator|!=
name|Type
operator|.
name|NODE
operator|&&
name|nodeTestType
operator|.
name|intValue
argument_list|()
operator|!=
name|Type
operator|.
name|ELEMENT
operator|&&
name|nodeTestType
operator|.
name|intValue
argument_list|()
operator|!=
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"avoid useless computations"
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/** 	 * The method<code>getSelf</code> 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param contextSequence 	 *            a<code>NodeSet</code> value 	 * @return a<code>Sequence</code> value 	 */
specifier|protected
name|Sequence
name|getSelf
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getSelf
argument_list|(
name|test
argument_list|)
return|;
block|}
if|if
condition|(
name|hasPreloadedData
argument_list|()
operator|&&
operator|!
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
name|NodeSet
name|ns
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|contextSequence
operator|instanceof
name|NodeSet
condition|)
block|{
name|ns
operator|=
operator|(
name|NodeSet
operator|)
name|contextSequence
expr_stmt|;
block|}
name|NodeProxy
name|np
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|NodeProxy
argument_list|>
name|i
init|=
name|currentSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|NodeProxy
name|p
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|ns
operator|!=
literal|null
condition|)
block|{
name|np
operator|=
name|ns
operator|.
name|get
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|np
operator|!=
literal|null
operator|&&
name|np
operator|.
name|getMatches
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|p
operator|.
name|addMatch
argument_list|(
name|np
operator|.
name|getMatches
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|currentSet
return|;
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
if|if
condition|(
name|nodeTestType
operator|==
literal|null
condition|)
block|{
name|nodeTestType
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|test
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|nodeTestType
operator|.
name|intValue
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|contextSet
operator|instanceof
name|VirtualNodeSet
condition|)
block|{
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|setInPredicate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|setContextId
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|setSelfIsContext
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|contextSet
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|NodeProxy
name|p
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|NodeProxy
argument_list|>
name|i
init|=
name|contextSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|contextSet
return|;
block|}
else|else
block|{
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
block|}
else|else
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeSelector
name|selector
init|=
operator|new
name|SelfSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
comment|/** 	 * The method<code>getAttributes</code> 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param contextSequence 	 *            a<code>NodeSet</code> value 	 * @return a<code>NodeSet</code> value 	 */
specifier|protected
name|Sequence
name|getAttributes
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
condition|)
block|{
return|return
name|nodes
operator|.
name|getDescendantAttributes
argument_list|(
name|test
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|nodes
operator|.
name|getAttributes
argument_list|(
name|test
argument_list|)
return|;
block|}
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasPreloadedData
argument_list|()
operator|&&
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|result
operator|)
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|result
return|;
comment|// if there's just a single known node in the context, it is faster
comment|// do directly search for the attribute in the parent node.
block|}
if|if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|(
operator|!
name|optimized
operator|&&
operator|!
operator|(
name|docs
operator|==
name|currentDocs
operator|||
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
comment|// TODO : why a null selector here ? We have one below !
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|ATTRIBUTE_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectParentChild
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
name|contextId
argument_list|)
return|;
case|case
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectAncestorDescendant
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
literal|false
argument_list|,
name|contextId
argument_list|,
literal|true
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contextSet
operator|.
name|getProcessInReverseOrder
argument_list|()
condition|)
block|{
return|return
name|index
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|axis
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|contextId
argument_list|,
name|this
argument_list|)
return|;
block|}
else|else
block|{
name|NodeSelector
name|selector
decl_stmt|;
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|ATTRIBUTE_AXIS
case|:
name|selector
operator|=
operator|new
name|ChildSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
case|:
name|selector
operator|=
operator|new
name|DescendantSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
block|}
comment|/** 	 * The method<code>getChildren</code> 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param contextSequence 	 *            the context sequence 	 * @return a<code>NodeSet</code> value 	 */
specifier|protected
name|Sequence
name|getChildren
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getChildren
argument_list|(
name|test
argument_list|)
return|;
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|// TODO : understand this. I guess comments should be treated in a
comment|// similar way ? -pb
if|if
condition|(
operator|(
operator|!
name|hasPreloadedData
argument_list|()
operator|&&
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|)
operator|||
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
comment|// test is one out of *, text(), node() including
comment|// processing-instruction(targetname)
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
comment|// IndexStatistics stats = (IndexStatistics)
comment|// context.getBroker().getBrokerPool().
comment|// getIndexManager().getIndexById(IndexStatistics.ID);
comment|// int parentDepth = stats.getMaxParentDepth(test.getName());
comment|// LOG.debug("parentDepth for " + test.getName() + ": " + parentDepth);
if|if
condition|(
name|useDirectChildSelect
condition|)
block|{
specifier|final
name|NewArrayNodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NodeProxy
name|p
range|:
name|contextSet
control|)
block|{
name|result
operator|.
name|addAll
argument_list|(
name|p
operator|.
name|directSelectChild
argument_list|(
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|contextId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
if|else if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
comment|// TODO : understand why this one is different from the other
comment|// ones
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|(
operator|!
name|optimized
operator|&&
operator|!
operator|(
name|docs
operator|==
name|currentDocs
operator|||
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
return|return
name|currentSet
operator|.
name|selectParentChild
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
name|contextId
argument_list|)
return|;
block|}
block|}
else|else
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contextSet
operator|.
name|getProcessInReverseOrder
argument_list|()
operator|&&
operator|!
operator|(
name|contextSet
operator|instanceof
name|VirtualNodeSet
operator|)
operator|&&
name|contextSet
operator|.
name|getLength
argument_list|()
operator|<
name|INDEX_SCAN_THRESHOLD
condition|)
block|{
return|return
name|index
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|axis
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|contextId
argument_list|,
name|parent
argument_list|)
return|;
block|}
else|else
block|{
comment|// if (contextSet instanceof VirtualNodeSet)
comment|// ((VirtualNodeSet)contextSet).realize();
specifier|final
name|NodeSelector
name|selector
init|=
operator|new
name|ChildSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
block|}
comment|/** 	 * The method<code>getDescendants</code> 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param contextSequence 	 *            the context sequence 	 * @return a<code>NodeSet</code> value 	 */
specifier|protected
name|Sequence
name|getDescendants
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getDescendants
argument_list|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|,
name|test
argument_list|)
return|;
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|// TODO : understand this. I guess comments should be treated in a
comment|// similar way ? -pb
if|if
condition|(
operator|(
operator|!
name|hasPreloadedData
argument_list|()
operator|&&
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|)
operator|||
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
comment|// test is one out of *, text(), node() including
comment|// processing-instruction(targetname)
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|else if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
comment|// TODO : understand why this one is different from the other
comment|// ones
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|(
operator|!
name|optimized
operator|&&
operator|!
operator|(
name|docs
operator|==
name|currentDocs
operator|||
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
case|:
specifier|final
name|NodeSet
name|tempSet
init|=
name|currentSet
operator|.
name|selectAncestorDescendant
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
literal|true
argument_list|,
name|contextId
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|tempSet
return|;
case|case
name|Constants
operator|.
name|DESCENDANT_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectAncestorDescendant
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
literal|false
argument_list|,
name|contextId
argument_list|,
literal|true
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
decl_stmt|;
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|contextSet
operator|.
name|getProcessInReverseOrder
argument_list|()
operator|&&
operator|(
name|contextSet
operator|instanceof
name|VirtualNodeSet
operator|||
name|contextSet
operator|.
name|getLength
argument_list|()
operator|<
name|INDEX_SCAN_THRESHOLD
operator|)
condition|)
block|{
return|return
name|index
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|axis
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|contextId
argument_list|,
name|this
argument_list|)
return|;
block|}
else|else
block|{
name|NodeSelector
name|selector
decl_stmt|;
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
case|:
name|selector
operator|=
operator|new
name|DescendantOrSelfSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DESCENDANT_AXIS
case|:
name|selector
operator|=
operator|new
name|DescendantSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|,
name|this
argument_list|)
return|;
block|}
block|}
block|}
comment|/** 	 * The method<code>getSiblings</code> 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param contextSequence 	 *            a<code>NodeSet</code> value 	 * @return a<code>NodeSet</code> value 	 */
specifier|protected
name|Sequence
name|getSiblings
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
condition|)
block|{
return|return
name|nodes
operator|.
name|getPrecedingSiblings
argument_list|(
name|test
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|nodes
operator|.
name|getFollowingSiblings
argument_list|(
name|test
argument_list|)
return|;
block|}
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|// TODO : understand this. I guess comments should be treated in a
comment|// similar way ? -pb
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
specifier|final
name|NewArrayNodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
try|try
block|{
for|for
control|(
specifier|final
name|NodeProxy
name|current
range|:
name|contextSet
control|)
block|{
comment|//ignore document elements to avoid NPE at getXMLStreamReader
if|if
condition|(
name|NodeId
operator|.
name|ROOT_NODE
operator|.
name|equals
argument_list|(
name|current
operator|.
name|getNodeId
argument_list|()
argument_list|)
condition|)
block|{
continue|continue;
block|}
specifier|final
name|NodeProxy
name|parent
init|=
operator|new
name|NodeProxy
argument_list|(
name|current
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|current
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
argument_list|)
decl_stmt|;
name|StreamFilter
name|filter
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
condition|)
block|{
name|filter
operator|=
operator|new
name|PrecedingSiblingFilter
argument_list|(
name|test
argument_list|,
name|current
argument_list|,
name|result
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|filter
operator|=
operator|new
name|FollowingSiblingFilter
argument_list|(
name|test
argument_list|,
name|current
argument_list|,
name|result
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
block|}
specifier|final
name|IEmbeddedXMLStreamReader
name|reader
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLStreamReader
argument_list|(
name|parent
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reader
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
comment|// TODO : no test on preloaded data ?
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectPrecedingSiblings
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
case|case
name|Constants
operator|.
name|FOLLOWING_SIBLING_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectFollowingSiblings
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
comment|/** 	 * The method<code>getPreceding</code> 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param contextSequence 	 *            a<code>Sequence</code> value 	 * @return a<code>NodeSet</code> value 	 * @exception XPathException 	 *                if an error occurs 	 */
specifier|protected
name|Sequence
name|getPreceding
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|position
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|hasPositionalPredicate
condition|)
block|{
specifier|final
name|Predicate
name|pred
init|=
operator|(
name|Predicate
operator|)
name|predicates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|seq
init|=
name|pred
operator|.
name|preprocess
argument_list|()
decl_stmt|;
specifier|final
name|NumericValue
name|v
init|=
operator|(
name|NumericValue
operator|)
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Non integers return... nothing, not even an error !
if|if
condition|(
operator|!
name|v
operator|.
name|hasFractionalPart
argument_list|()
operator|&&
operator|!
name|v
operator|.
name|isZero
argument_list|()
condition|)
block|{
name|position
operator|=
name|v
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasPositionalPredicate
operator|&&
name|position
operator|>
operator|-
literal|1
condition|)
block|{
name|applyPredicate
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|nodes
operator|.
name|getPreceding
argument_list|(
name|test
argument_list|,
name|position
argument_list|)
return|;
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|// TODO : understand this. I guess comments should be treated in a
comment|// similar way ? -pb
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NodeProxy
name|next
range|:
name|contextSet
control|)
block|{
specifier|final
name|NodeList
name|cl
init|=
name|next
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|NodeHandle
name|node
init|=
operator|(
name|NodeHandle
operator|)
name|cl
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
specifier|final
name|NodeProxy
name|root
init|=
operator|new
name|NodeProxy
argument_list|(
name|node
argument_list|)
decl_stmt|;
specifier|final
name|PrecedingFilter
name|filter
init|=
operator|new
name|PrecedingFilter
argument_list|(
name|test
argument_list|,
name|next
argument_list|,
name|result
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
specifier|final
name|IEmbeddedXMLStreamReader
name|reader
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLStreamReader
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reader
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// TODO : no test on preloaded data ?
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasPositionalPredicate
condition|)
block|{
try|try
block|{
name|applyPredicate
operator|=
literal|false
expr_stmt|;
return|return
name|currentSet
operator|.
name|selectPreceding
argument_list|(
name|contextSet
argument_list|,
name|position
argument_list|,
name|contextId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return
name|currentSet
operator|.
name|selectPreceding
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|currentSet
operator|.
name|selectPreceding
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|/** 	 * The method<code>getFollowing</code> 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param contextSequence 	 *            a<code>Sequence</code> value 	 * @return a<code>NodeSet</code> value 	 * @exception XPathException 	 *                if an error occurs 	 */
specifier|protected
name|Sequence
name|getFollowing
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|position
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|hasPositionalPredicate
condition|)
block|{
specifier|final
name|Predicate
name|pred
init|=
operator|(
name|Predicate
operator|)
name|predicates
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|seq
init|=
name|pred
operator|.
name|preprocess
argument_list|()
decl_stmt|;
specifier|final
name|NumericValue
name|v
init|=
operator|(
name|NumericValue
operator|)
name|seq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Non integers return... nothing, not even an error !
if|if
condition|(
operator|!
name|v
operator|.
name|hasFractionalPart
argument_list|()
operator|&&
operator|!
name|v
operator|.
name|isZero
argument_list|()
condition|)
block|{
name|position
operator|=
name|v
operator|.
name|getInt
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|hasPositionalPredicate
operator|&&
name|position
operator|>
operator|-
literal|1
condition|)
block|{
name|applyPredicate
operator|=
literal|false
expr_stmt|;
block|}
return|return
name|nodes
operator|.
name|getFollowing
argument_list|(
name|test
argument_list|,
name|position
argument_list|)
return|;
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|// TODO : understand this. I guess comments should be treated in a
comment|// similar way ? -pb
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|&&
name|test
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
comment|// handle wildcard steps like following::node()
try|try
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|NodeProxy
name|next
range|:
name|contextSet
control|)
block|{
specifier|final
name|NodeList
name|cl
init|=
name|next
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
specifier|final
name|NodeHandle
name|node
init|=
operator|(
name|NodeHandle
operator|)
name|cl
operator|.
name|item
argument_list|(
name|j
argument_list|)
decl_stmt|;
specifier|final
name|NodeProxy
name|root
init|=
operator|new
name|NodeProxy
argument_list|(
name|node
argument_list|)
decl_stmt|;
specifier|final
name|FollowingFilter
name|filter
init|=
operator|new
name|FollowingFilter
argument_list|(
name|test
argument_list|,
name|next
argument_list|,
name|result
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
specifier|final
name|IEmbeddedXMLStreamReader
name|reader
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLStreamReader
argument_list|(
name|root
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|reader
operator|.
name|filter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLStreamException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// TODO : no test on preloaded data ?
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
condition|)
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|hasPositionalPredicate
condition|)
block|{
try|try
block|{
name|applyPredicate
operator|=
literal|false
expr_stmt|;
return|return
name|currentSet
operator|.
name|selectFollowing
argument_list|(
name|contextSet
argument_list|,
name|position
argument_list|,
name|contextId
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|UnsupportedOperationException
name|e
parameter_list|)
block|{
return|return
name|currentSet
operator|.
name|selectFollowing
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
block|}
else|else
block|{
return|return
name|currentSet
operator|.
name|selectFollowing
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
block|}
block|}
block|}
comment|/** 	 * The method<code>getAncestors</code> 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param contextSequence 	 *            a<code>Sequence</code> value 	 * @return a<code>NodeSet</code> value 	 */
specifier|protected
name|Sequence
name|getAncestors
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getAncestors
argument_list|(
name|axis
operator|==
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
argument_list|,
name|test
argument_list|)
return|;
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|result
operator|.
name|setProcessInReverseOrder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|NodeProxy
name|current
range|:
name|contextSet
control|)
block|{
name|NodeProxy
name|ancestor
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|ancestor
operator|=
operator|new
name|NodeProxy
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|ancestor
operator|.
name|setNodeType
argument_list|(
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
specifier|final
name|NodeProxy
name|t
init|=
name|result
operator|.
name|get
argument_list|(
name|ancestor
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|ancestor
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ancestor
operator|.
name|copyContext
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|ancestor
operator|.
name|addMatches
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|t
operator|.
name|addMatches
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeId
name|parentID
init|=
name|current
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentID
operator|!=
literal|null
condition|)
block|{
name|ancestor
operator|=
operator|new
name|NodeProxy
argument_list|(
name|current
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|parentID
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
comment|// Filter out the temporary nodes wrapper element
if|if
condition|(
name|parentID
operator|!=
name|NodeId
operator|.
name|DOCUMENT_NODE
operator|&&
operator|!
operator|(
name|parentID
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
operator|&&
name|current
operator|.
name|getOwnerDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|isTempCollection
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|ancestor
argument_list|)
condition|)
block|{
specifier|final
name|NodeProxy
name|t
init|=
name|result
operator|.
name|get
argument_list|(
name|ancestor
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|ancestor
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ancestor
operator|.
name|copyContext
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
name|ancestor
operator|.
name|addMatches
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|t
operator|.
name|addMatches
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|parentID
operator|=
name|parentID
operator|.
name|getParentId
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
if|else if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|(
operator|!
name|optimized
operator|&&
operator|!
operator|(
name|docs
operator|==
name|currentDocs
operator|||
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectAncestors
argument_list|(
name|contextSet
argument_list|,
literal|true
argument_list|,
name|contextId
argument_list|)
return|;
case|case
name|Constants
operator|.
name|ANCESTOR_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectAncestors
argument_list|(
name|contextSet
argument_list|,
literal|false
argument_list|,
name|contextId
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
name|index
operator|.
name|findAncestorsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|axis
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
block|}
comment|/** 	 * The method<code>getParents</code> 	 *  	 * @param context 	 *            a<code>XQueryContext</code> value 	 * @param contextSequence 	 *            a<code>Sequence</code> value 	 * @return a<code>NodeSet</code> value 	 */
specifier|protected
name|Sequence
name|getParents
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getParents
argument_list|(
name|test
argument_list|)
return|;
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
specifier|final
name|NodeSet
name|temp
init|=
name|contextSet
operator|.
name|getParents
argument_list|(
name|contextId
argument_list|)
decl_stmt|;
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|NewArrayNodeSet
argument_list|()
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|NodeProxy
argument_list|>
name|i
init|=
name|temp
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
if|else if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|(
operator|!
name|optimized
operator|&&
operator|!
operator|(
name|docs
operator|==
name|currentDocs
operator|||
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
return|return
name|contextSet
operator|.
name|selectParentChild
argument_list|(
name|currentSet
argument_list|,
name|NodeSet
operator|.
name|ANCESTOR
argument_list|)
return|;
block|}
block|}
else|else
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
name|index
operator|.
name|findAncestorsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|Constants
operator|.
name|PARENT_AXIS
argument_list|,
name|docs
argument_list|,
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
block|}
comment|/** 	 * The method<code>getDocumentSet</code> 	 *  	 * @param contextSet 	 *            a<code>NodeSet</code> value 	 * @return a<code>DocumentSet</code> value 	 */
specifier|protected
name|DocumentSet
name|getDocumentSet
parameter_list|(
name|NodeSet
name|contextSet
parameter_list|)
block|{
name|DocumentSet
name|ds
init|=
name|getContextDocSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ds
operator|==
literal|null
condition|)
block|{
name|ds
operator|=
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
expr_stmt|;
block|}
return|return
name|ds
return|;
block|}
comment|/** 	 * The method<code>getParent</code> 	 *  	 * @return an<code>Expression</code> value 	 */
specifier|public
name|Expression
name|getParentExpression
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
comment|/** 	 * The method<code>registerUpdateListener</code> 	 *  	 */
specifier|protected
name|void
name|registerUpdateListener
parameter_list|()
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
operator|new
name|UpdateListener
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|documentUpdated
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|event
parameter_list|)
block|{
name|cached
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|document
operator|==
literal|null
operator|||
name|event
operator|==
name|UpdateListener
operator|.
name|ADD
operator|||
name|event
operator|==
name|UpdateListener
operator|.
name|REMOVE
condition|)
block|{
comment|// clear all
name|currentDocs
operator|=
literal|null
expr_stmt|;
name|currentSet
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentDocs
operator|!=
literal|null
operator|&&
name|currentDocs
operator|.
name|contains
argument_list|(
name|document
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
name|currentDocs
operator|=
literal|null
expr_stmt|;
name|currentSet
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeMoved
parameter_list|(
name|NodeId
name|oldNodeId
parameter_list|,
name|NodeHandle
name|newNode
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsubscribe
parameter_list|()
block|{
name|LocationStep
operator|.
name|this
operator|.
name|listener
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|debug
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"UpdateListener: Line: "
operator|+
name|LocationStep
operator|.
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|"; id: "
operator|+
name|LocationStep
operator|.
name|this
operator|.
name|getExpressionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|context
operator|.
name|registerUpdateListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * The method<code>accept</code> 	 *  	 * @param visitor 	 *            an<code>ExpressionVisitor</code> value 	 */
specifier|public
name|void
name|accept
parameter_list|(
name|ExpressionVisitor
name|visitor
parameter_list|)
block|{
name|visitor
operator|.
name|visitLocationStep
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setParent
parameter_list|(
name|Expression
name|parent
parameter_list|)
block|{
name|this
operator|.
name|parent
operator|=
name|parent
expr_stmt|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see org.exist.xquery.Step#resetState() 	 */
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|postOptimization
condition|)
block|{
comment|// TODO : preloadedData = false ?
comment|// No : introduces a regression in testMatchCount
comment|// TODO : Investigate...
name|currentSet
operator|=
literal|null
expr_stmt|;
name|currentDocs
operator|=
literal|null
expr_stmt|;
name|optimized
operator|=
literal|false
expr_stmt|;
name|cached
operator|=
literal|null
expr_stmt|;
name|listener
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FollowingSiblingFilter
implements|implements
name|StreamFilter
block|{
specifier|private
name|NodeTest
name|test
decl_stmt|;
specifier|private
name|NodeProxy
name|referenceNode
decl_stmt|;
specifier|private
name|NodeSet
name|result
decl_stmt|;
specifier|private
name|int
name|contextId
decl_stmt|;
specifier|private
name|boolean
name|isAfter
init|=
literal|false
decl_stmt|;
specifier|private
name|FollowingSiblingFilter
parameter_list|(
name|NodeTest
name|test
parameter_list|,
name|NodeProxy
name|referenceNode
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|this
operator|.
name|test
operator|=
name|test
expr_stmt|;
name|this
operator|.
name|referenceNode
operator|=
name|referenceNode
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|NodeId
name|refId
init|=
name|referenceNode
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
specifier|final
name|NodeId
name|currentId
init|=
operator|(
name|NodeId
operator|)
name|reader
operator|.
name|getProperty
argument_list|(
name|ExtendedXMLStreamReader
operator|.
name|PROPERTY_NODE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAfter
condition|)
block|{
name|isAfter
operator|=
name|currentId
operator|.
name|equals
argument_list|(
name|refId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|currentId
operator|.
name|getTreeLevel
argument_list|()
operator|==
name|refId
operator|.
name|getTreeLevel
argument_list|()
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|reader
argument_list|)
condition|)
block|{
name|NodeProxy
name|sibling
init|=
name|result
operator|.
name|get
argument_list|(
name|referenceNode
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|currentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|sibling
operator|==
literal|null
condition|)
block|{
name|sibling
operator|=
operator|new
name|NodeProxy
argument_list|(
name|referenceNode
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|currentId
argument_list|,
name|StaXUtil
operator|.
name|streamType2DOM
argument_list|(
name|reader
operator|.
name|getEventType
argument_list|()
argument_list|)
argument_list|,
operator|(
operator|(
name|EmbeddedXMLStreamReader
operator|)
name|reader
operator|)
operator|.
name|getCurrentPosition
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Expression
operator|.
name|IGNORE_CONTEXT
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|==
name|contextId
condition|)
block|{
name|sibling
operator|.
name|copyContext
argument_list|(
name|referenceNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sibling
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|referenceNode
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|sibling
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|sibling
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|referenceNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PrecedingSiblingFilter
implements|implements
name|StreamFilter
block|{
specifier|private
name|NodeTest
name|test
decl_stmt|;
specifier|private
name|NodeProxy
name|referenceNode
decl_stmt|;
specifier|private
name|NodeSet
name|result
decl_stmt|;
specifier|private
name|int
name|contextId
decl_stmt|;
specifier|private
name|PrecedingSiblingFilter
parameter_list|(
name|NodeTest
name|test
parameter_list|,
name|NodeProxy
name|referenceNode
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|this
operator|.
name|test
operator|=
name|test
expr_stmt|;
name|this
operator|.
name|referenceNode
operator|=
name|referenceNode
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|NodeId
name|refId
init|=
name|referenceNode
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
specifier|final
name|NodeId
name|currentId
init|=
operator|(
name|NodeId
operator|)
name|reader
operator|.
name|getProperty
argument_list|(
name|EmbeddedXMLStreamReader
operator|.
name|PROPERTY_NODE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentId
operator|.
name|equals
argument_list|(
name|refId
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|currentId
operator|.
name|getTreeLevel
argument_list|()
operator|==
name|refId
operator|.
name|getTreeLevel
argument_list|()
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|reader
argument_list|)
condition|)
block|{
name|NodeProxy
name|sibling
init|=
name|result
operator|.
name|get
argument_list|(
name|referenceNode
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|currentId
argument_list|)
decl_stmt|;
if|if
condition|(
name|sibling
operator|==
literal|null
condition|)
block|{
name|sibling
operator|=
operator|new
name|NodeProxy
argument_list|(
name|referenceNode
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|currentId
argument_list|,
name|StaXUtil
operator|.
name|streamType2DOM
argument_list|(
name|reader
operator|.
name|getEventType
argument_list|()
argument_list|)
argument_list|,
operator|(
operator|(
name|EmbeddedXMLStreamReader
operator|)
name|reader
operator|)
operator|.
name|getCurrentPosition
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Expression
operator|.
name|IGNORE_CONTEXT
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|==
name|contextId
condition|)
block|{
name|sibling
operator|.
name|copyContext
argument_list|(
name|referenceNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|sibling
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|referenceNode
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|sibling
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|sibling
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|referenceNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|FollowingFilter
implements|implements
name|StreamFilter
block|{
specifier|private
name|NodeTest
name|test
decl_stmt|;
specifier|private
name|NodeProxy
name|referenceNode
decl_stmt|;
specifier|private
name|NodeSet
name|result
decl_stmt|;
specifier|private
name|int
name|contextId
decl_stmt|;
specifier|private
name|boolean
name|isAfter
init|=
literal|false
decl_stmt|;
specifier|private
name|FollowingFilter
parameter_list|(
name|NodeTest
name|test
parameter_list|,
name|NodeProxy
name|referenceNode
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|this
operator|.
name|test
operator|=
name|test
expr_stmt|;
name|this
operator|.
name|referenceNode
operator|=
name|referenceNode
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|NodeId
name|refId
init|=
name|referenceNode
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
specifier|final
name|NodeId
name|currentId
init|=
operator|(
name|NodeId
operator|)
name|reader
operator|.
name|getProperty
argument_list|(
name|EmbeddedXMLStreamReader
operator|.
name|PROPERTY_NODE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isAfter
condition|)
block|{
name|isAfter
operator|=
name|currentId
operator|.
name|compareTo
argument_list|(
name|refId
argument_list|)
operator|>
literal|0
operator|&&
operator|!
name|currentId
operator|.
name|isDescendantOf
argument_list|(
name|refId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isAfter
operator|&&
operator|!
name|refId
operator|.
name|isDescendantOf
argument_list|(
name|currentId
argument_list|)
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|reader
argument_list|)
condition|)
block|{
specifier|final
name|NodeProxy
name|proxy
init|=
operator|new
name|NodeProxy
argument_list|(
name|referenceNode
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|currentId
argument_list|,
name|StaXUtil
operator|.
name|streamType2DOM
argument_list|(
name|reader
operator|.
name|getEventType
argument_list|()
argument_list|)
argument_list|,
operator|(
operator|(
name|EmbeddedXMLStreamReader
operator|)
name|reader
operator|)
operator|.
name|getCurrentPosition
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Expression
operator|.
name|IGNORE_CONTEXT
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|==
name|contextId
condition|)
block|{
name|proxy
operator|.
name|copyContext
argument_list|(
name|referenceNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|referenceNode
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|PrecedingFilter
implements|implements
name|StreamFilter
block|{
specifier|private
name|NodeTest
name|test
decl_stmt|;
specifier|private
name|NodeProxy
name|referenceNode
decl_stmt|;
specifier|private
name|NodeSet
name|result
decl_stmt|;
specifier|private
name|int
name|contextId
decl_stmt|;
specifier|private
name|PrecedingFilter
parameter_list|(
name|NodeTest
name|test
parameter_list|,
name|NodeProxy
name|referenceNode
parameter_list|,
name|NodeSet
name|result
parameter_list|,
name|int
name|contextId
parameter_list|)
block|{
name|this
operator|.
name|test
operator|=
name|test
expr_stmt|;
name|this
operator|.
name|referenceNode
operator|=
name|referenceNode
expr_stmt|;
name|this
operator|.
name|result
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|contextId
operator|=
name|contextId
expr_stmt|;
block|}
specifier|public
name|boolean
name|accept
parameter_list|(
name|XMLStreamReader
name|reader
parameter_list|)
block|{
if|if
condition|(
name|reader
operator|.
name|getEventType
argument_list|()
operator|==
name|XMLStreamReader
operator|.
name|END_ELEMENT
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|NodeId
name|refId
init|=
name|referenceNode
operator|.
name|getNodeId
argument_list|()
decl_stmt|;
specifier|final
name|NodeId
name|currentId
init|=
operator|(
name|NodeId
operator|)
name|reader
operator|.
name|getProperty
argument_list|(
name|EmbeddedXMLStreamReader
operator|.
name|PROPERTY_NODE_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentId
operator|.
name|compareTo
argument_list|(
name|refId
argument_list|)
operator|>=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|refId
operator|.
name|isDescendantOf
argument_list|(
name|currentId
argument_list|)
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|reader
argument_list|)
condition|)
block|{
specifier|final
name|NodeProxy
name|proxy
init|=
operator|new
name|NodeProxy
argument_list|(
name|referenceNode
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|currentId
argument_list|,
name|StaXUtil
operator|.
name|streamType2DOM
argument_list|(
name|reader
operator|.
name|getEventType
argument_list|()
argument_list|)
argument_list|,
operator|(
operator|(
name|EmbeddedXMLStreamReader
operator|)
name|reader
operator|)
operator|.
name|getCurrentPosition
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Expression
operator|.
name|IGNORE_CONTEXT
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|==
name|contextId
condition|)
block|{
name|proxy
operator|.
name|copyContext
argument_list|(
name|referenceNode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|proxy
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|referenceNode
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|.
name|add
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
block|}
specifier|public
name|Boolean
name|match
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT ITEM"
argument_list|,
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|Boolean
name|result
decl_stmt|;
if|if
condition|(
name|needsComputation
argument_list|()
condition|)
block|{
if|if
condition|(
name|contextSequence
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPDY0002
argument_list|,
literal|"Undefined context sequence for '"
operator|+
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|DESCENDANT_AXIS
case|:
case|case
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
case|:
name|result
operator|=
literal|null
expr_stmt|;
comment|//getDescendants(context, contextSequence);
break|break;
case|case
name|Constants
operator|.
name|CHILD_AXIS
case|:
comment|// VirtualNodeSets may have modified the axis ; checking the
comment|// type
comment|// TODO : further checks ?
if|if
condition|(
name|this
operator|.
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ATTRIBUTE
condition|)
block|{
name|this
operator|.
name|axis
operator|=
name|Constants
operator|.
name|ATTRIBUTE_AXIS
expr_stmt|;
name|result
operator|=
name|matchAttributes
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|matchChildren
argument_list|(
name|context
argument_list|,
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
comment|//matchChildren(context, contextSequence);
block|}
break|break;
case|case
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
case|:
case|case
name|Constants
operator|.
name|ANCESTOR_AXIS
case|:
name|result
operator|=
literal|null
expr_stmt|;
comment|//getAncestors(context, contextSequence);
break|break;
case|case
name|Constants
operator|.
name|PARENT_AXIS
case|:
name|result
operator|=
literal|null
expr_stmt|;
comment|//getParents(context, contextSequence);
break|break;
case|case
name|Constants
operator|.
name|SELF_AXIS
case|:
comment|//				if (!(contextSequence instanceof VirtualNodeSet)
comment|//&& Type.subTypeOf(contextSequence.getItemType(),
comment|//								Type.ATOMIC)) {
comment|//					// This test is copied from the legacy method
comment|//					// getSelfAtomic()
comment|//					if (!test.isWildcardTest())
comment|//						throw new XPathException(this, test.toString()
comment|//								+ " cannot be applied to an atomic value.");
comment|//					result = null;//contextSequence;
comment|//				} else {
name|result
operator|=
name|matchSelf
argument_list|(
name|context
argument_list|,
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
comment|//				}
break|break;
case|case
name|Constants
operator|.
name|ATTRIBUTE_AXIS
case|:
case|case
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
case|:
name|result
operator|=
literal|null
expr_stmt|;
comment|//getAttributes(context, contextSequence);
break|break;
case|case
name|Constants
operator|.
name|PRECEDING_AXIS
case|:
name|result
operator|=
literal|null
expr_stmt|;
comment|//getPreceding(context, contextSequence);
break|break;
case|case
name|Constants
operator|.
name|FOLLOWING_AXIS
case|:
name|result
operator|=
literal|null
expr_stmt|;
comment|//getFollowing(context, contextSequence);
break|break;
case|case
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
case|:
case|case
name|Constants
operator|.
name|FOLLOWING_SIBLING_AXIS
case|:
name|result
operator|=
literal|null
expr_stmt|;
comment|//getSiblings(context, contextSequence);
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|result
operator|=
literal|null
expr_stmt|;
comment|//NodeSet.EMPTY_SET;
block|}
name|result
operator|=
name|matchPredicate
argument_list|(
name|contextSequence
argument_list|,
operator|(
name|Node
operator|)
name|contextItem
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|""
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|// actualReturnType = result.getItemType();
return|return
name|result
return|;
block|}
specifier|private
name|Boolean
name|matchPredicate
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Node
name|contextItem
parameter_list|,
name|Boolean
name|result
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|result
condition|)
block|{
return|return
name|result
return|;
block|}
if|if
condition|(
name|contextSequence
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|predicates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|result
return|;
block|}
name|Predicate
name|pred
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|Predicate
argument_list|>
name|i
init|=
name|predicates
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|//&& (result instanceof VirtualNodeSet || !result.isEmpty());) {
comment|// TODO : log and/or profile ?
name|pred
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|pred
operator|.
name|setContextDocSet
argument_list|(
name|getContextDocSet
argument_list|()
argument_list|)
expr_stmt|;
comment|//result = pred.evalPredicate(outerSequence, result, axis);
name|result
operator|=
name|pred
operator|.
name|matchPredicate
argument_list|(
name|contextSequence
argument_list|,
operator|(
name|Item
operator|)
name|contextItem
argument_list|,
name|axis
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// subsequent predicates operate on the result of the previous one
comment|//			outerSequence = null;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|Boolean
name|matchSelf
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|matchSelf
argument_list|(
name|test
argument_list|)
return|;
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
operator|!
name|vset
operator|.
name|isEmpty
argument_list|()
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
if|if
condition|(
name|nodeTestType
operator|==
literal|null
condition|)
block|{
name|nodeTestType
operator|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|test
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|nodeTestType
operator|.
name|intValue
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|contextSet
operator|instanceof
name|VirtualNodeSet
condition|)
block|{
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|setInPredicate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|setContextId
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|setSelfIsContext
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|contextSet
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
for|for
control|(
specifier|final
name|NodeProxy
name|p
range|:
name|contextSet
control|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
else|else
block|{
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
operator|!
name|vset
operator|.
name|isEmpty
argument_list|()
return|;
block|}
block|}
else|else
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|NodeSelector
name|selector
init|=
operator|new
name|SelfSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
return|return
name|index
operator|.
name|matchElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Boolean
name|matchChildren
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|matchChildren
argument_list|(
name|test
argument_list|)
return|;
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|// TODO : understand this. I guess comments should be treated in a
comment|// similar way ? -pb
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|||
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
comment|// test is one out of *, text(), node() including
comment|// processing-instruction(targetname)
specifier|final
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
operator|!
name|vset
operator|.
name|isEmpty
argument_list|()
return|;
block|}
comment|// IndexStatistics stats = (IndexStatistics)
comment|// context.getBroker().getBrokerPool().
comment|// getIndexManager().getIndexById(IndexStatistics.ID);
comment|// int parentDepth = stats.getMaxParentDepth(test.getName());
comment|// LOG.debug("parentDepth for " + test.getName() + ": " + parentDepth);
if|if
condition|(
name|useDirectChildSelect
condition|)
block|{
comment|//NewArrayNodeSet result = new NewArrayNodeSet();
for|for
control|(
specifier|final
name|NodeProxy
name|p
range|:
name|contextSet
control|)
block|{
if|if
condition|(
name|p
operator|.
name|directMatchChild
argument_list|(
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|contextId
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
if|else if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
comment|// TODO : understand why this one is different from the other
comment|// ones
comment|//				if (currentSet == null
comment|//						|| currentDocs == null
comment|//						|| (!optimized&& !(docs == currentDocs || docs
comment|//								.equalDocs(currentDocs)))) {
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
return|return
name|index
operator|.
name|matchElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
return|;
comment|//					currentDocs = docs;
comment|//UNDERSTAND: TODO:					registerUpdateListener();
block|}
comment|//				return currentSet.selectParentChild(contextSet,
comment|//						NodeSet.DESCENDANT, contextId);
comment|//			}
block|}
else|else
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextSet
operator|instanceof
name|ExtNodeSet
operator|&&
operator|!
name|contextSet
operator|.
name|getProcessInReverseOrder
argument_list|()
condition|)
block|{
return|return
name|index
operator|.
name|matchDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|axis
argument_list|,
name|docs
argument_list|,
operator|(
name|ExtNodeSet
operator|)
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
else|else
block|{
comment|// if (contextSet instanceof VirtualNodeSet)
comment|// ((VirtualNodeSet)contextSet).realize();
specifier|final
name|NodeSelector
name|selector
init|=
operator|new
name|ChildSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
return|return
name|index
operator|.
name|matchElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
return|;
block|}
block|}
block|}
specifier|protected
name|boolean
name|matchAttributes
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
specifier|final
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
condition|)
block|{
return|return
name|nodes
operator|.
name|matchDescendantAttributes
argument_list|(
name|test
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|nodes
operator|.
name|matchAttributes
argument_list|(
name|test
argument_list|)
return|;
block|}
block|}
specifier|final
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
specifier|final
name|NodeSet
name|result
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|result
operator|)
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
return|;
comment|// if there's just a single known node in the context, it is faster
comment|// do directly search for the attribute in the parent node.
block|}
if|if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
synchronized|synchronized
init|(
name|context
init|)
block|{
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|(
operator|!
name|optimized
operator|&&
operator|!
operator|(
name|docs
operator|==
name|currentDocs
operator|||
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
comment|// TODO : why a null selector here ? We have one below !
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|ATTRIBUTE_AXIS
case|:
return|return
name|currentSet
operator|.
name|matchParentChild
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
name|contextId
argument_list|)
return|;
case|case
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
case|:
return|return
name|currentSet
operator|.
name|matchAncestorDescendant
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
literal|false
argument_list|,
name|contextId
argument_list|,
literal|true
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
specifier|final
name|StructuralIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getStructuralIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextSet
operator|instanceof
name|ExtNodeSet
operator|&&
operator|!
name|contextSet
operator|.
name|getProcessInReverseOrder
argument_list|()
condition|)
block|{
return|return
name|index
operator|.
name|matchDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|axis
argument_list|,
name|docs
argument_list|,
operator|(
name|ExtNodeSet
operator|)
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
else|else
block|{
name|NodeSelector
name|selector
decl_stmt|;
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|ATTRIBUTE_AXIS
case|:
name|selector
operator|=
operator|new
name|ChildSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
case|:
name|selector
operator|=
operator|new
name|DescendantSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
return|return
name|index
operator|.
name|matchElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

