begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeVisitor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|VirtualNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementIndex
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|UpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|MemoryNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Processes all location path steps (like descendant::*, ancestor::XXX).  *   * The results of the first evaluation of the expression are cached for the  * lifetime of the object and only reloaded if the context sequence (as passed  * to the {@link #eval(Sequence, Item)} method) has changed.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|LocationStep
extends|extends
name|Step
block|{
specifier|private
specifier|final
name|int
name|ATTR_DIRECT_SELECT_THRESHOLD
init|=
literal|10
decl_stmt|;
specifier|protected
name|NodeSet
name|currentSet
init|=
literal|null
decl_stmt|;
specifier|protected
name|DocumentSet
name|currentDocs
init|=
literal|null
decl_stmt|;
specifier|protected
name|UpdateListener
name|listener
init|=
literal|null
decl_stmt|;
specifier|protected
name|Expression
name|parent
init|=
literal|null
decl_stmt|;
comment|// Fields for caching the last result
specifier|protected
name|CachedResult
name|cached
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|parentDeps
init|=
name|Dependency
operator|.
name|UNKNOWN_DEPENDENCY
decl_stmt|;
specifier|protected
name|boolean
name|preloadedData
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|optimized
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|inUpdate
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|useDirectAttrSelect
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|useDirectChildSelect
init|=
literal|false
decl_stmt|;
comment|// Cache for the current NodeTest type
specifier|private
name|Integer
name|nodeTestType
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a new<code>LocationStep</code> instance.      *      * @param context a<code>XQueryContext</code> value      * @param axis an<code>int</code> value      */
specifier|public
name|LocationStep
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|axis
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|axis
argument_list|)
expr_stmt|;
block|}
comment|/**      * Creates a new<code>LocationStep</code> instance.      *      * @param context a<code>XQueryContext</code> value      * @param axis an<code>int</code> value      * @param test a<code>NodeTest</code> value      */
specifier|public
name|LocationStep
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|axis
parameter_list|,
name|NodeTest
name|test
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|axis
argument_list|,
name|test
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xquery.AbstractExpression#getDependencies()      */
specifier|public
name|int
name|getDependencies
parameter_list|()
block|{
name|int
name|deps
init|=
name|Dependency
operator|.
name|CONTEXT_SET
decl_stmt|;
comment|//self axis has an obvious dependency on the context item
comment|//TODO : I guess every other axis too... so we might consider using Constants.UNKNOWN_AXIS here
comment|//BUT
comment|//in a predicate, the expression can't depend on... itself
if|if
condition|(
operator|!
name|this
operator|.
name|inPredicate
operator|&&
name|this
operator|.
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
condition|)
name|deps
operator|=
name|deps
operator||
name|Dependency
operator|.
name|CONTEXT_ITEM
expr_stmt|;
comment|//TODO : normally, we should call this one...
comment|//int deps = super.getDependencies(); ???
for|for
control|(
name|Iterator
name|i
init|=
name|predicates
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|deps
operator||=
operator|(
operator|(
name|Predicate
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|getDependencies
argument_list|()
expr_stmt|;
block|}
comment|//TODO : should we remove the CONTEXT_ITEM dependency returned by the predicates ? See the comment above.
comment|//consider nested predicates however...
return|return
name|deps
return|;
block|}
comment|/**      * If the current path expression depends on local variables from a for      * expression, we can optimize by preloading entire element or attribute      * sets.      *       * @return Whether or not we can optimize       */
specifier|protected
name|boolean
name|hasPreloadedData
parameter_list|()
block|{
comment|// TODO : log elsewhere ?
if|if
condition|(
name|preloadedData
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|null
argument_list|,
literal|"Preloaded NodeSets"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|inUpdate
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|(
name|parentDeps
operator|&
name|Dependency
operator|.
name|LOCAL_VARS
operator|)
operator|==
name|Dependency
operator|.
name|LOCAL_VARS
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|null
argument_list|,
literal|"Preloaded NodeSets"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * The method<code>setPreloadedData</code>      *      * @param docs a<code>DocumentSet</code> value      * @param nodes a<code>NodeSet</code> value      */
specifier|public
name|void
name|setPreloadedData
parameter_list|(
name|DocumentSet
name|docs
parameter_list|,
name|NodeSet
name|nodes
parameter_list|)
block|{
name|this
operator|.
name|preloadedData
operator|=
literal|true
expr_stmt|;
name|this
operator|.
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|this
operator|.
name|currentSet
operator|=
name|nodes
expr_stmt|;
name|this
operator|.
name|optimized
operator|=
literal|true
expr_stmt|;
block|}
comment|/**      * The method<code>applyPredicate</code>      *      * @param outerSequence a<code>Sequence</code> value      * @param contextSequence a<code>Sequence</code> value      * @return a<code>Sequence</code> value      * @exception XPathException if an error occurs      */
specifier|protected
name|Sequence
name|applyPredicate
parameter_list|(
name|Sequence
name|outerSequence
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|contextSequence
operator|==
literal|null
condition|)
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
if|if
condition|(
name|predicates
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
comment|// Nothing to apply
return|return
name|contextSequence
return|;
name|Predicate
name|pred
decl_stmt|;
name|Sequence
name|result
init|=
name|contextSequence
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|predicates
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|// TODO : log and/or profile ?
name|pred
operator|=
operator|(
name|Predicate
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|pred
operator|.
name|setContextDocSet
argument_list|(
name|getContextDocSet
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|pred
operator|.
name|evalPredicate
argument_list|(
name|outerSequence
argument_list|,
name|result
argument_list|,
name|axis
argument_list|)
expr_stmt|;
comment|//subsequent predicates operate on the result of the previous one
name|outerSequence
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xquery.Step#analyze(org.exist.xquery.Expression)      */
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|this
operator|.
name|parent
operator|=
name|contextInfo
operator|.
name|getParent
argument_list|()
expr_stmt|;
name|parentDeps
operator|=
name|parent
operator|.
name|getDependencies
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|IN_UPDATE
operator|)
operator|>
literal|0
condition|)
name|inUpdate
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|SINGLE_STEP_EXECUTION
operator|)
operator|>
literal|0
condition|)
block|{
name|preloadedData
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|NEED_INDEX_INFO
operator|)
operator|>
literal|0
condition|)
block|{
name|useDirectAttrSelect
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|USE_TREE_TRAVERSAL
operator|)
operator|>
literal|0
condition|)
block|{
name|useDirectChildSelect
operator|=
literal|true
expr_stmt|;
block|}
comment|// Mark ".", which is expanded as self::node() by the parser
comment|//even though it may *also* be relevant with atomic sequences
if|if
condition|(
name|this
operator|.
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
operator|&&
name|this
operator|.
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
condition|)
name|contextInfo
operator|.
name|addFlag
argument_list|(
name|DOT_TEST
argument_list|)
expr_stmt|;
comment|// TODO : log somewhere ?
name|super
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
comment|/**      * The method<code>eval</code>      *      * @param contextSequence a<code>Sequence</code> value      * @param contextItem an<code>Item</code> value      * @return a<code>Sequence</code> value      * @exception XPathException if an error occurs      */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT ITEM"
argument_list|,
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Sequence
name|result
decl_stmt|;
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
block|{
name|contextSequence
operator|=
name|contextItem
operator|.
name|toSequence
argument_list|()
expr_stmt|;
block|}
comment|/*          * if(contextSequence == null) //Commented because this the high level          * result nodeset is *really* null result = NodeSet.EMPTY_SET; //Try to          * return cached results else          */
if|if
condition|(
name|cached
operator|!=
literal|null
operator|&&
name|cached
operator|.
name|isValid
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
condition|)
block|{
comment|// WARNING : commented since predicates are *also* applied below !
comment|// -pb
comment|/*              * if (predicates.size()> 0) { applyPredicate(contextSequence,              * cached.getResult()); } else {              */
name|result
operator|=
name|cached
operator|.
name|getResult
argument_list|()
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using cached results"
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"Using cached results"
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|// }
block|}
if|else if
condition|(
name|needsComputation
argument_list|()
condition|)
block|{
if|if
condition|(
name|contextSequence
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
literal|"XPDY0002 : undefined context sequence for '"
operator|+
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|DESCENDANT_AXIS
case|:
case|case
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
case|:
name|result
operator|=
name|getDescendants
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|CHILD_AXIS
case|:
comment|//VirtualNodeSets may have modified the axis ; checking the type
comment|//TODO : further checks ?
if|if
condition|(
name|this
operator|.
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ATTRIBUTE
condition|)
block|{
name|this
operator|.
name|axis
operator|=
name|Constants
operator|.
name|ATTRIBUTE_AXIS
expr_stmt|;
name|result
operator|=
name|getAttributes
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|getChildren
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
case|:
case|case
name|Constants
operator|.
name|ANCESTOR_AXIS
case|:
name|result
operator|=
name|getAncestors
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|PARENT_AXIS
case|:
name|result
operator|=
name|getParents
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|SELF_AXIS
case|:
if|if
condition|(
operator|!
operator|(
name|contextSequence
operator|instanceof
name|VirtualNodeSet
operator|)
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|contextSequence
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|)
condition|)
block|{
comment|//This test is copied from the legacy method getSelfAtomic()
if|if
condition|(
operator|!
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
name|test
operator|.
name|toString
argument_list|()
operator|+
literal|" cannot be applied to an atomic value."
argument_list|)
throw|;
name|result
operator|=
name|contextSequence
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|getSelf
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|Constants
operator|.
name|ATTRIBUTE_AXIS
case|:
case|case
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
case|:
name|result
operator|=
name|getAttributes
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|PRECEDING_AXIS
case|:
name|result
operator|=
name|getPreceding
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|FOLLOWING_AXIS
case|:
name|result
operator|=
name|getFollowing
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
case|:
case|case
name|Constants
operator|.
name|FOLLOWING_SIBLING_AXIS
case|:
name|result
operator|=
name|getSiblings
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|NodeSet
operator|.
name|EMPTY_SET
expr_stmt|;
block|}
comment|// Caches the result
if|if
condition|(
name|axis
operator|!=
name|Constants
operator|.
name|SELF_AXIS
operator|&&
name|contextSequence
operator|!=
literal|null
operator|&&
name|contextSequence
operator|.
name|isCacheable
argument_list|()
condition|)
block|{
comment|// TODO : cache *after* removing duplicates ? -pb
name|cached
operator|=
operator|new
name|CachedResult
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
comment|// Remove duplicate nodes
name|result
operator|.
name|removeDuplicates
argument_list|()
expr_stmt|;
comment|// Apply the predicate
name|result
operator|=
name|applyPredicate
argument_list|(
name|contextSequence
argument_list|,
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|""
argument_list|,
name|result
argument_list|)
expr_stmt|;
comment|//actualReturnType = result.getItemType();
return|return
name|result
return|;
block|}
comment|// Avoid unnecessary tests (these should be detected by the parser)
specifier|private
name|boolean
name|needsComputation
parameter_list|()
block|{
comment|// TODO : log this ?
switch|switch
condition|(
name|axis
condition|)
block|{
comment|// Certainly not exhaustive
case|case
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
case|:
case|case
name|Constants
operator|.
name|PARENT_AXIS
case|:
case|case
name|Constants
operator|.
name|SELF_AXIS
case|:
if|if
condition|(
name|nodeTestType
operator|==
literal|null
condition|)
name|nodeTestType
operator|=
operator|new
name|Integer
argument_list|(
name|test
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|nodeTestType
operator|.
name|intValue
argument_list|()
operator|!=
name|Type
operator|.
name|NODE
operator|&&
name|nodeTestType
operator|.
name|intValue
argument_list|()
operator|!=
name|Type
operator|.
name|ELEMENT
operator|&&
name|nodeTestType
operator|.
name|intValue
argument_list|()
operator|!=
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"avoid useless computations"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * The method<code>getSelf</code>      *      * @param context a<code>XQueryContext</code> value      * @param contextSequence a<code>NodeSet</code> value      * @return a<code>Sequence</code> value      */
specifier|protected
name|Sequence
name|getSelf
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getSelf
argument_list|(
name|test
argument_list|)
return|;
block|}
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
if|if
condition|(
name|nodeTestType
operator|==
literal|null
condition|)
block|{
name|nodeTestType
operator|=
operator|new
name|Integer
argument_list|(
name|test
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|nodeTestType
operator|.
name|intValue
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
if|if
condition|(
name|contextSet
operator|instanceof
name|VirtualNodeSet
condition|)
block|{
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|setInPredicate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|setSelfIsContext
argument_list|()
expr_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|setContextId
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|contextSet
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|NodeProxy
name|p
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|contextSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
name|p
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|contextSet
return|;
block|}
else|else
block|{
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
block|}
else|else
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|NodeSelector
name|selector
init|=
operator|new
name|SelfSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
return|;
block|}
block|}
comment|/**      * The method<code>getAttributes</code>      *      * @param context a<code>XQueryContext</code> value      * @param contextSequence a<code>NodeSet</code> value      * @return a<code>NodeSet</code> value      */
specifier|protected
name|Sequence
name|getAttributes
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
condition|)
return|return
name|nodes
operator|.
name|getDescendantAttributes
argument_list|(
name|test
argument_list|)
return|;
else|else
return|return
name|nodes
operator|.
name|getAttributes
argument_list|(
name|test
argument_list|)
return|;
block|}
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
name|boolean
name|selectDirect
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|useDirectAttrSelect
operator|&&
name|axis
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
condition|)
block|{
if|if
condition|(
name|contextSet
operator|instanceof
name|VirtualNodeSet
condition|)
name|selectDirect
operator|=
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|contextSet
operator|)
operator|.
name|preferTreeTraversal
argument_list|()
operator|&&
name|contextSet
operator|.
name|getLength
argument_list|()
operator|<
name|ATTR_DIRECT_SELECT_THRESHOLD
expr_stmt|;
else|else
name|selectDirect
operator|=
name|contextSet
operator|.
name|getLength
argument_list|()
operator|<
name|ATTR_DIRECT_SELECT_THRESHOLD
expr_stmt|;
block|}
if|if
condition|(
name|selectDirect
condition|)
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"direct attribute selection"
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSet
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
comment|//TODO : why only the first node ?
name|NodeProxy
name|proxy
init|=
name|contextSet
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxy
operator|!=
literal|null
condition|)
return|return
name|contextSet
operator|.
name|directSelectAttribute
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|)
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
name|NodeSet
name|result
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|result
operator|)
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|result
return|;
comment|// if there's just a single known node in the context, it is faster
comment|// do directly search for the attribute in the parent node.
block|}
if|if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
comment|//TODO : currentDocs can not be null here
comment|//TODO : currentSet can not be null here
if|if
condition|(
operator|!
name|optimized
operator|&&
operator|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
comment|// TODO : why a null selector here ? We have one below !
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|ATTRIBUTE_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectParentChild
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
name|contextId
argument_list|)
return|;
case|case
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectAncestorDescendant
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
literal|false
argument_list|,
name|contextId
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSet
operator|instanceof
name|ExtArrayNodeSet
operator|&&
operator|!
name|contextSet
operator|.
name|getProcessInReverseOrder
argument_list|()
condition|)
block|{
return|return
name|index
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|axis
argument_list|,
name|docs
argument_list|,
operator|(
name|ExtArrayNodeSet
operator|)
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
else|else
block|{
name|NodeSelector
name|selector
decl_stmt|;
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|ATTRIBUTE_AXIS
case|:
name|selector
operator|=
operator|new
name|ChildSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
case|:
name|selector
operator|=
operator|new
name|DescendantSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * The method<code>getChildren</code>      *      * @param context a<code>XQueryContext</code> value      * @param contextSequence the context sequence      * @return a<code>NodeSet</code> value      */
specifier|protected
name|Sequence
name|getChildren
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getChildren
argument_list|(
name|test
argument_list|)
return|;
block|}
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|//TODO : understand this. I guess comments should be treated in a similar way ? -pb
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|||
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
comment|// test is one out of *, text(), node() including processing-instruction(targetname)
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
comment|//        IndexStatistics stats = (IndexStatistics) context.getBroker().getBrokerPool().
comment|//            getIndexManager().getIndexById(IndexStatistics.ID);
comment|//        int parentDepth = stats.getMaxParentDepth(test.getName());
comment|//        LOG.debug("parentDepth for " + test.getName() + ": " + parentDepth);
if|if
condition|(
name|useDirectChildSelect
condition|)
block|{
name|ExtArrayNodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|contextSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|p
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|result
operator|.
name|addAll
argument_list|(
name|p
operator|.
name|directSelectChild
argument_list|(
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|contextId
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
if|else if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
comment|// TODO : understand why this one is different from the other ones
comment|//TODO : currentDocs can not be null here
comment|//TODO : currentSet can not be null here
if|if
condition|(
operator|!
name|optimized
operator|&&
operator|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|==
name|currentDocs
operator|||
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
return|return
name|currentSet
operator|.
name|selectParentChild
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
name|contextId
argument_list|)
return|;
block|}
else|else
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSet
operator|instanceof
name|ExtArrayNodeSet
operator|&&
operator|!
name|contextSet
operator|.
name|getProcessInReverseOrder
argument_list|()
condition|)
block|{
return|return
name|index
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|axis
argument_list|,
name|docs
argument_list|,
operator|(
name|ExtArrayNodeSet
operator|)
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
else|else
block|{
comment|//            	if (contextSet instanceof VirtualNodeSet)
comment|//            		((VirtualNodeSet)contextSet).realize();
name|NodeSelector
name|selector
init|=
operator|new
name|ChildSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * The method<code>getDescendants</code>      *      * @param context a<code>XQueryContext</code> value      * @param contextSequence the context sequence      * @return a<code>NodeSet</code> value      */
specifier|protected
name|Sequence
name|getDescendants
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getDescendants
argument_list|(
name|axis
operator|==
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|,
name|test
argument_list|)
return|;
block|}
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|//TODO : understand this. I guess comments should be treated in a similar way ? -pb
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|||
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
comment|// test is one out of *, text(), node() including processing-instruction(targetname)
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|else if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
comment|// TODO : understand why this one is different from the other ones
comment|//TODO : currentDocs can not be null here
comment|//TODO : currentSet can not be null here
if|if
condition|(
operator|!
name|optimized
operator|&&
operator|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|==
name|currentDocs
operator|||
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectAncestorDescendant
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
literal|true
argument_list|,
name|contextId
argument_list|)
return|;
case|case
name|Constants
operator|.
name|DESCENDANT_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectAncestorDescendant
argument_list|(
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
literal|false
argument_list|,
name|contextId
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|DocumentSet
name|docs
init|=
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
decl_stmt|;
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|contextSet
operator|instanceof
name|ExtArrayNodeSet
condition|)
block|{
return|return
name|index
operator|.
name|findDescendantsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|axis
argument_list|,
name|docs
argument_list|,
operator|(
name|ExtArrayNodeSet
operator|)
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
block|}
else|else
block|{
name|NodeSelector
name|selector
decl_stmt|;
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
case|:
name|selector
operator|=
operator|new
name|DescendantOrSelfSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|DESCENDANT_AXIS
case|:
name|selector
operator|=
operator|new
name|DescendantSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
return|;
block|}
block|}
block|}
comment|/**      * The method<code>getSiblings</code>      *      * @param context a<code>XQueryContext</code> value      * @param contextSequence a<code>NodeSet</code> value      * @return a<code>NodeSet</code> value      */
specifier|protected
name|Sequence
name|getSiblings
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
condition|)
return|return
name|nodes
operator|.
name|getPrecedingSiblings
argument_list|(
name|test
argument_list|)
return|;
else|else
return|return
name|nodes
operator|.
name|getFollowingSiblings
argument_list|(
name|test
argument_list|)
return|;
block|}
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|//TODO : understand this. I guess comments should be treated in a similar way ? -pb
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
name|ExtArrayNodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
name|contextSet
operator|.
name|getLength
argument_list|()
argument_list|)
decl_stmt|;
name|SiblingVisitor
name|visitor
init|=
operator|new
name|SiblingVisitor
argument_list|(
name|result
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|contextSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|current
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeId
name|parentId
init|=
name|current
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentId
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
operator|&&
name|current
operator|.
name|getDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|isTempCollection
argument_list|()
condition|)
continue|continue;
name|StoredNode
name|parentNode
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|objectWith
argument_list|(
name|current
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|parentId
argument_list|)
decl_stmt|;
name|visitor
operator|.
name|setContext
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|parentNode
operator|.
name|accept
argument_list|(
name|visitor
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
else|else
block|{
comment|//TODO : no test on preloaded data ?
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
condition|)
block|{
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectPrecedingSiblings
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
case|case
name|Constants
operator|.
name|FOLLOWING_SIBLING_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectFollowingSiblings
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|private
class|class
name|SiblingVisitor
implements|implements
name|NodeVisitor
block|{
specifier|private
name|ExtArrayNodeSet
name|resultSet
decl_stmt|;
specifier|private
name|NodeProxy
name|contextNode
decl_stmt|;
specifier|public
name|SiblingVisitor
parameter_list|(
name|ExtArrayNodeSet
name|resultSet
parameter_list|)
block|{
name|this
operator|.
name|resultSet
operator|=
name|resultSet
expr_stmt|;
block|}
specifier|public
name|void
name|setContext
parameter_list|(
name|NodeProxy
name|contextNode
parameter_list|)
block|{
name|this
operator|.
name|contextNode
operator|=
name|contextNode
expr_stmt|;
block|}
specifier|public
name|boolean
name|visit
parameter_list|(
name|StoredNode
name|current
parameter_list|)
block|{
if|if
condition|(
name|contextNode
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
operator|==
name|current
operator|.
name|getNodeId
argument_list|()
operator|.
name|getTreeLevel
argument_list|()
condition|)
block|{
name|int
name|cmp
init|=
name|current
operator|.
name|getNodeId
argument_list|()
operator|.
name|compareTo
argument_list|(
name|contextNode
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|axis
operator|==
name|Constants
operator|.
name|FOLLOWING_SIBLING_AXIS
operator|&&
name|cmp
operator|>
literal|0
operator|)
operator|||
operator|(
name|axis
operator|==
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
operator|&&
name|cmp
operator|<
literal|0
operator|)
operator|)
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|NodeProxy
name|sibling
init|=
name|resultSet
operator|.
name|get
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|current
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|current
operator|.
name|getNodeId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sibling
operator|==
literal|null
condition|)
block|{
name|sibling
operator|=
operator|new
name|NodeProxy
argument_list|(
operator|(
name|DocumentImpl
operator|)
name|current
operator|.
name|getOwnerDocument
argument_list|()
argument_list|,
name|current
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|current
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
block|{
name|sibling
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|contextNode
argument_list|)
expr_stmt|;
block|}
else|else
name|sibling
operator|.
name|copyContext
argument_list|(
name|contextNode
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|add
argument_list|(
name|sibling
argument_list|)
expr_stmt|;
name|resultSet
operator|.
name|setSorted
argument_list|(
name|sibling
operator|.
name|getDocument
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|sibling
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|contextNode
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
block|}
comment|/**      * The method<code>getPreceding</code>      *      * @param context a<code>XQueryContext</code> value      * @param contextSequence a<code>Sequence</code> value      * @return a<code>NodeSet</code> value      * @exception XPathException if an error occurs      */
specifier|protected
name|Sequence
name|getPreceding
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getPreceding
argument_list|(
name|test
argument_list|)
return|;
block|}
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|//TODO : understand this. I guess comments should be treated in a similar way ? -pb
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
comment|// TODO : throw an exception here ! Don't let this pass through
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
else|else
block|{
comment|//TODO : no test on preloaded data ?
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
condition|)
block|{
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
return|return
name|currentSet
operator|.
name|selectPreceding
argument_list|(
name|contextSet
argument_list|)
return|;
block|}
block|}
comment|/**      * The method<code>getFollowing</code>      *      * @param context a<code>XQueryContext</code> value      * @param contextSequence a<code>Sequence</code> value      * @return a<code>NodeSet</code> value      * @exception XPathException if an error occurs      */
specifier|protected
name|Sequence
name|getFollowing
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getFollowing
argument_list|(
name|test
argument_list|)
return|;
block|}
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
comment|//TODO : understand this. I guess comments should be treated in a similar way ? -pb
if|if
condition|(
name|test
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
name|VirtualNodeSet
name|vset
init|=
operator|new
name|VirtualNodeSet
argument_list|(
name|axis
argument_list|,
name|test
argument_list|,
name|contextId
argument_list|,
name|contextSet
argument_list|)
decl_stmt|;
name|vset
operator|.
name|setInPredicate
argument_list|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
argument_list|)
expr_stmt|;
return|return
name|vset
return|;
block|}
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|&&
name|test
operator|.
name|getType
argument_list|()
operator|!=
name|Type
operator|.
name|PROCESSING_INSTRUCTION
condition|)
block|{
comment|// TODO : throw an exception here ! Don't let this pass through
return|return
name|NodeSet
operator|.
name|EMPTY_SET
return|;
block|}
else|else
block|{
comment|//TODO : no test on preloaded data ?
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
condition|)
block|{
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
return|return
name|currentSet
operator|.
name|selectFollowing
argument_list|(
name|contextSet
argument_list|)
return|;
block|}
block|}
comment|/**      * The method<code>getAncestors</code>      *      * @param context a<code>XQueryContext</code> value      * @param contextSequence a<code>Sequence</code> value      * @return a<code>NodeSet</code> value      */
specifier|protected
name|Sequence
name|getAncestors
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getAncestors
argument_list|(
name|axis
operator|==
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
argument_list|,
name|test
argument_list|)
return|;
block|}
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|result
operator|.
name|setProcessInReverseOrder
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|contextSet
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|current
init|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|NodeProxy
name|ancestor
decl_stmt|;
if|if
condition|(
name|axis
operator|==
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
operator|&&
name|test
operator|.
name|matches
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|ancestor
operator|=
operator|new
name|NodeProxy
argument_list|(
name|current
operator|.
name|getDocument
argument_list|()
argument_list|,
name|current
operator|.
name|getNodeId
argument_list|()
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
name|current
operator|.
name|getInternalAddress
argument_list|()
argument_list|)
expr_stmt|;
name|NodeProxy
name|t
init|=
name|result
operator|.
name|get
argument_list|(
name|ancestor
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|ancestor
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|current
argument_list|)
expr_stmt|;
else|else
name|ancestor
operator|.
name|copyContext
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|ancestor
operator|.
name|addMatches
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|t
operator|.
name|addMatches
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
name|NodeId
name|parentID
init|=
name|current
operator|.
name|getNodeId
argument_list|()
operator|.
name|getParentId
argument_list|()
decl_stmt|;
while|while
condition|(
name|parentID
operator|!=
literal|null
condition|)
block|{
name|ancestor
operator|=
operator|new
name|NodeProxy
argument_list|(
name|current
operator|.
name|getDocument
argument_list|()
argument_list|,
name|parentID
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
comment|// Filter out the temporary nodes wrapper element
if|if
condition|(
name|parentID
operator|!=
name|NodeId
operator|.
name|DOCUMENT_NODE
operator|&&
operator|!
operator|(
name|parentID
operator|.
name|getTreeLevel
argument_list|()
operator|==
literal|1
operator|&&
name|current
operator|.
name|getDocument
argument_list|()
operator|.
name|getCollection
argument_list|()
operator|.
name|isTempCollection
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|ancestor
argument_list|)
condition|)
block|{
name|NodeProxy
name|t
init|=
name|result
operator|.
name|get
argument_list|(
name|ancestor
argument_list|)
decl_stmt|;
if|if
condition|(
name|t
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|Expression
operator|.
name|NO_CONTEXT_ID
operator|!=
name|contextId
condition|)
name|ancestor
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|current
argument_list|)
expr_stmt|;
else|else
name|ancestor
operator|.
name|copyContext
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|ancestor
operator|.
name|addMatches
argument_list|(
name|current
argument_list|)
expr_stmt|;
name|result
operator|.
name|add
argument_list|(
name|ancestor
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
name|current
argument_list|)
expr_stmt|;
name|t
operator|.
name|addMatches
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|parentID
operator|=
name|parentID
operator|.
name|getParentId
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
if|else if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
comment|//TODO : currentDocs can not be null here
comment|//TODO : currentSet can not be null here
if|if
condition|(
operator|!
name|optimized
operator|&&
operator|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectAncestors
argument_list|(
name|contextSet
argument_list|,
literal|true
argument_list|,
name|contextId
argument_list|)
return|;
case|case
name|Constants
operator|.
name|ANCESTOR_AXIS
case|:
return|return
name|currentSet
operator|.
name|selectAncestors
argument_list|(
name|contextSet
argument_list|,
literal|false
argument_list|,
name|contextId
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|NodeSelector
name|selector
decl_stmt|;
switch|switch
condition|(
name|axis
condition|)
block|{
case|case
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
case|:
name|selector
operator|=
operator|new
name|AncestorSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|,
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|ANCESTOR_AXIS
case|:
name|selector
operator|=
operator|new
name|AncestorSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|,
literal|false
argument_list|)
expr_stmt|;
break|break;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported axis specified"
argument_list|)
throw|;
block|}
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
return|;
block|}
block|}
comment|/**      * The method<code>getParents</code>      *      * @param context a<code>XQueryContext</code> value      * @param contextSequence a<code>Sequence</code> value      * @return a<code>NodeSet</code> value      */
specifier|protected
name|Sequence
name|getParents
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
operator|!
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
condition|)
block|{
name|MemoryNodeSet
name|nodes
init|=
name|contextSequence
operator|.
name|toMemNodeSet
argument_list|()
decl_stmt|;
return|return
name|nodes
operator|.
name|getParents
argument_list|(
name|test
argument_list|)
return|;
block|}
name|NodeSet
name|contextSet
init|=
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|test
operator|.
name|isWildcardTest
argument_list|()
condition|)
block|{
name|NodeSet
name|temp
init|=
name|contextSet
operator|.
name|getParents
argument_list|(
name|contextId
argument_list|)
decl_stmt|;
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|NodeProxy
name|p
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|temp
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|p
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|test
operator|.
name|matches
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
if|else if
condition|(
name|hasPreloadedData
argument_list|()
condition|)
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
comment|//TODO : currentDocs can not be null here
comment|//TODO : currentSet can not be null here
if|if
condition|(
operator|!
name|optimized
operator|&&
operator|(
name|currentSet
operator|==
literal|null
operator|||
name|currentDocs
operator|==
literal|null
operator|||
operator|!
operator|(
name|docs
operator|.
name|equalDocs
argument_list|(
name|currentDocs
argument_list|)
operator|)
operator|)
condition|)
block|{
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|currentSet
operator|=
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|currentDocs
operator|=
name|docs
expr_stmt|;
name|registerUpdateListener
argument_list|()
expr_stmt|;
block|}
return|return
name|contextSet
operator|.
name|selectParentChild
argument_list|(
name|currentSet
argument_list|,
name|NodeSet
operator|.
name|ANCESTOR
argument_list|)
return|;
block|}
else|else
block|{
name|DocumentSet
name|docs
init|=
name|getDocumentSet
argument_list|(
name|contextSet
argument_list|)
decl_stmt|;
name|ElementIndex
name|index
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getElementIndex
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using structural index '"
operator|+
name|index
operator|.
name|toString
argument_list|()
operator|+
literal|"'"
argument_list|)
expr_stmt|;
name|NodeSelector
name|selector
init|=
operator|new
name|ParentSelector
argument_list|(
name|contextSet
argument_list|,
name|contextId
argument_list|)
decl_stmt|;
return|return
name|index
operator|.
name|findElementsByTagName
argument_list|(
name|ElementValue
operator|.
name|ELEMENT
argument_list|,
name|docs
argument_list|,
name|test
operator|.
name|getName
argument_list|()
argument_list|,
name|selector
argument_list|)
return|;
block|}
block|}
comment|/**      * The method<code>getDocumentSet</code>      *      * @param contextSet a<code>NodeSet</code> value      * @return a<code>DocumentSet</code> value      */
specifier|protected
name|DocumentSet
name|getDocumentSet
parameter_list|(
name|NodeSet
name|contextSet
parameter_list|)
block|{
name|DocumentSet
name|ds
init|=
name|getContextDocSet
argument_list|()
decl_stmt|;
if|if
condition|(
name|ds
operator|==
literal|null
condition|)
name|ds
operator|=
name|contextSet
operator|.
name|getDocumentSet
argument_list|()
expr_stmt|;
return|return
name|ds
return|;
block|}
comment|/**      * The method<code>getParent</code>      *      * @return an<code>Expression</code> value      */
specifier|public
name|Expression
name|getParentExpression
parameter_list|()
block|{
return|return
name|this
operator|.
name|parent
return|;
block|}
comment|/**      * The method<code>setUseDirectAttrSelect</code>      *      * @param useDirectAttrSelect a<code>boolean</code> value      */
specifier|public
name|void
name|setUseDirectAttrSelect
parameter_list|(
name|boolean
name|useDirectAttrSelect
parameter_list|)
block|{
name|this
operator|.
name|useDirectAttrSelect
operator|=
name|useDirectAttrSelect
expr_stmt|;
block|}
comment|/**      * The method<code>registerUpdateListener</code>      *      */
specifier|protected
name|void
name|registerUpdateListener
parameter_list|()
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
operator|new
name|UpdateListener
argument_list|()
block|{
specifier|public
name|void
name|documentUpdated
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|event
parameter_list|)
block|{
if|if
condition|(
name|document
operator|==
literal|null
operator|||
name|event
operator|==
name|UpdateListener
operator|.
name|ADD
operator|||
name|event
operator|==
name|UpdateListener
operator|.
name|REMOVE
condition|)
block|{
comment|// clear all
name|currentDocs
operator|=
literal|null
expr_stmt|;
name|currentSet
operator|=
literal|null
expr_stmt|;
name|cached
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentDocs
operator|!=
literal|null
operator|&&
name|currentDocs
operator|.
name|contains
argument_list|(
name|document
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
block|{
name|currentDocs
operator|=
literal|null
expr_stmt|;
name|currentSet
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|cached
operator|!=
literal|null
operator|&&
name|cached
operator|.
name|getResult
argument_list|()
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|contains
argument_list|(
name|document
operator|.
name|getDocId
argument_list|()
argument_list|)
condition|)
name|cached
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|nodeMoved
parameter_list|(
name|NodeId
name|oldNodeId
parameter_list|,
name|StoredNode
name|newNode
parameter_list|)
block|{
block|}
specifier|public
name|void
name|unsubscribe
parameter_list|()
block|{
name|LocationStep
operator|.
name|this
operator|.
name|listener
operator|=
literal|null
expr_stmt|;
block|}
specifier|public
name|void
name|debug
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"UpdateListener: Line: "
operator|+
name|LocationStep
operator|.
name|this
operator|.
name|toString
argument_list|()
operator|+
literal|"; id: "
operator|+
name|LocationStep
operator|.
name|this
operator|.
name|getExpressionId
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
expr_stmt|;
name|context
operator|.
name|registerUpdateListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * The method<code>accept</code>      *      * @param visitor an<code>ExpressionVisitor</code> value      */
specifier|public
name|void
name|accept
parameter_list|(
name|ExpressionVisitor
name|visitor
parameter_list|)
block|{
name|visitor
operator|.
name|visitLocationStep
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *       * @see org.exist.xquery.Step#resetState()      */
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|postOptimization
condition|)
block|{
comment|//TODO : preloadedData = false ?
comment|//No : introduces a regression in testMatchCount
comment|//TODO : Investigate...
name|currentSet
operator|=
literal|null
expr_stmt|;
name|currentDocs
operator|=
literal|null
expr_stmt|;
name|optimized
operator|=
literal|false
expr_stmt|;
name|cached
operator|=
literal|null
expr_stmt|;
name|listener
operator|=
literal|null
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

