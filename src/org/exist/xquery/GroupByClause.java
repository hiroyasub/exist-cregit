begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|GroupByClause
extends|extends
name|AbstractFLWORClause
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|GroupByClause
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
name|FLWORClause
name|rootClause
init|=
literal|null
decl_stmt|;
specifier|private
name|GroupSpec
index|[]
name|groupSpecs
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Tuple
argument_list|>
name|groupedMap
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|QName
argument_list|,
name|LocalVariable
argument_list|>
name|variables
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|LocalVariable
argument_list|>
name|groupingVars
init|=
literal|null
decl_stmt|;
specifier|public
name|GroupByClause
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|boolean
name|collectVars
init|=
name|variables
operator|==
literal|null
decl_stmt|;
if|if
condition|(
name|collectVars
condition|)
block|{
name|variables
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
name|groupingVars
operator|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Sequence
argument_list|>
name|groupingValues
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|ValueSequence
name|keySequence
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
name|GroupSpec
name|spec
range|:
name|groupSpecs
control|)
block|{
specifier|final
name|Sequence
name|groupingSeq
init|=
name|spec
operator|.
name|getGroupExpression
argument_list|()
operator|.
name|eval
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupingSeq
operator|.
name|getItemCount
argument_list|()
operator|>
literal|1
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Grouping variable "
operator|+
name|spec
operator|.
name|getKeyVarName
argument_list|()
operator|+
literal|" "
operator|+
literal|"evaluates to more than one item"
argument_list|)
throw|;
block|}
specifier|final
name|AtomicValue
name|groupingValue
init|=
name|groupingSeq
operator|.
name|isEmpty
argument_list|()
condition|?
name|AtomicValue
operator|.
name|EMPTY_VALUE
else|:
name|groupingSeq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|atomize
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectVars
condition|)
block|{
specifier|final
name|LocalVariable
name|groupingVar
init|=
operator|new
name|LocalVariable
argument_list|(
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|spec
operator|.
name|getKeyVarName
argument_list|()
argument_list|,
literal|null
argument_list|)
argument_list|)
decl_stmt|;
name|groupingVar
operator|.
name|setSequenceType
argument_list|(
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ATOMIC
argument_list|,
name|groupingValue
operator|.
name|isEmpty
argument_list|()
condition|?
name|Cardinality
operator|.
name|EMPTY
else|:
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
argument_list|)
expr_stmt|;
name|groupingVar
operator|.
name|setStaticType
argument_list|(
name|groupingValue
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|groupingVars
operator|.
name|add
argument_list|(
name|groupingVar
argument_list|)
expr_stmt|;
block|}
name|groupingValues
operator|.
name|add
argument_list|(
name|groupingValue
argument_list|)
expr_stmt|;
name|keySequence
operator|.
name|add
argument_list|(
name|groupingValue
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|hashKey
init|=
name|keySequence
operator|.
name|getHashKey
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"hash key: {}"
argument_list|,
name|hashKey
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupedMap
operator|==
literal|null
condition|)
block|{
name|groupedMap
operator|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
expr_stmt|;
block|}
specifier|final
name|Tuple
name|tuple
decl_stmt|;
if|if
condition|(
name|groupedMap
operator|.
name|containsKey
argument_list|(
name|hashKey
argument_list|)
condition|)
block|{
name|tuple
operator|=
name|groupedMap
operator|.
name|get
argument_list|(
name|hashKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tuple
operator|=
operator|new
name|Tuple
argument_list|(
name|groupingValues
argument_list|)
expr_stmt|;
name|groupedMap
operator|.
name|put
argument_list|(
name|hashKey
argument_list|,
name|tuple
argument_list|)
expr_stmt|;
block|}
name|LocalVariable
name|nextVar
init|=
name|rootClause
operator|.
name|getStartVariable
argument_list|()
decl_stmt|;
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|nextVar
argument_list|)
expr_stmt|;
while|while
condition|(
name|nextVar
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"next var: {}: {}"
argument_list|,
name|nextVar
operator|.
name|getQName
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|nextVar
operator|.
name|getValue
argument_list|()
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
name|tuple
operator|.
name|add
argument_list|(
name|nextVar
operator|.
name|getQName
argument_list|()
argument_list|,
name|nextVar
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectVars
condition|)
block|{
specifier|final
name|LocalVariable
name|var
init|=
operator|new
name|LocalVariable
argument_list|(
name|nextVar
operator|.
name|getQName
argument_list|()
argument_list|)
decl_stmt|;
name|var
operator|.
name|setSequenceType
argument_list|(
name|nextVar
operator|.
name|getSequenceType
argument_list|()
argument_list|)
expr_stmt|;
name|var
operator|.
name|setStaticType
argument_list|(
name|nextVar
operator|.
name|getStaticType
argument_list|()
argument_list|)
expr_stmt|;
name|var
operator|.
name|setContextDocs
argument_list|(
name|nextVar
operator|.
name|getContextDocs
argument_list|()
argument_list|)
expr_stmt|;
name|variables
operator|.
name|put
argument_list|(
name|var
operator|.
name|getQName
argument_list|()
argument_list|,
name|var
argument_list|)
expr_stmt|;
block|}
name|nextVar
operator|=
name|nextVar
operator|.
name|after
expr_stmt|;
block|}
return|return
name|contextSequence
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|postEval
parameter_list|(
specifier|final
name|Sequence
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"group by post eval: {}"
argument_list|,
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|groupedMap
operator|!=
literal|null
condition|)
block|{
specifier|final
name|ValueSequence
name|result
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
specifier|final
name|LocalVariable
name|mark
init|=
name|context
operator|.
name|markLocalVariables
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
for|for
control|(
name|LocalVariable
name|var
range|:
name|variables
operator|.
name|values
argument_list|()
control|)
block|{
name|context
operator|.
name|declareVariableBinding
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|LocalVariable
name|var
range|:
name|groupingVars
control|)
block|{
name|context
operator|.
name|declareVariableBinding
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Tuple
name|tuple
range|:
name|groupedMap
operator|.
name|values
argument_list|()
control|)
block|{
name|context
operator|.
name|proceed
argument_list|()
expr_stmt|;
comment|// set grouping variables
specifier|final
name|Iterator
argument_list|<
name|Sequence
argument_list|>
name|siter
init|=
name|tuple
operator|.
name|groupingValues
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|LocalVariable
name|var
range|:
name|groupingVars
control|)
block|{
if|if
condition|(
name|siter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Sequence
name|val
init|=
name|siter
operator|.
name|next
argument_list|()
decl_stmt|;
name|var
operator|.
name|setValue
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
comment|// set values of non-grouping variables
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|QName
argument_list|,
name|Sequence
argument_list|>
name|entry
range|:
name|tuple
operator|.
name|entrySet
argument_list|()
control|)
block|{
specifier|final
name|LocalVariable
name|var
init|=
name|variables
operator|.
name|get
argument_list|(
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
decl_stmt|;
name|var
operator|.
name|setValue
argument_list|(
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|result
operator|.
name|addAll
argument_list|(
name|returnExpr
operator|.
name|eval
argument_list|(
literal|null
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|context
operator|.
name|popLocalVariables
argument_list|(
name|mark
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
return|return
name|seq
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|contextInfo
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|unordered
operator|=
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|UNORDERED
operator|)
operator|>
literal|0
expr_stmt|;
specifier|final
name|LocalVariable
name|mark
init|=
name|context
operator|.
name|markLocalVariables
argument_list|(
literal|false
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|groupSpecs
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|GroupSpec
name|spec
range|:
name|groupSpecs
control|)
block|{
specifier|final
name|LocalVariable
name|groupKeyVar
init|=
operator|new
name|LocalVariable
argument_list|(
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|spec
operator|.
name|getKeyVarName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariableBinding
argument_list|(
name|groupKeyVar
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|AnalyzeContextInfo
name|newContextInfo
init|=
operator|new
name|AnalyzeContextInfo
argument_list|(
name|contextInfo
argument_list|)
decl_stmt|;
name|newContextInfo
operator|.
name|addFlag
argument_list|(
name|SINGLE_STEP_EXECUTION
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|GroupSpec
name|spec
range|:
name|groupSpecs
control|)
block|{
name|spec
operator|.
name|analyze
argument_list|(
name|newContextInfo
argument_list|)
expr_stmt|;
block|}
name|returnExpr
operator|.
name|analyze
argument_list|(
name|newContextInfo
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// restore the local variable stack
name|context
operator|.
name|popLocalVariables
argument_list|(
name|mark
argument_list|)
expr_stmt|;
block|}
name|FLWORClause
name|prevClause
init|=
name|getPreviousClause
argument_list|()
decl_stmt|;
while|while
condition|(
name|prevClause
operator|!=
literal|null
condition|)
block|{
name|rootClause
operator|=
name|prevClause
expr_stmt|;
name|prevClause
operator|=
name|prevClause
operator|.
name|getPreviousClause
argument_list|()
expr_stmt|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"group by root expr: {}"
argument_list|,
name|ExpressionDumper
operator|.
name|dump
argument_list|(
name|rootClause
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|ITEM
return|;
block|}
specifier|public
name|void
name|setGroupSpecs
parameter_list|(
name|GroupSpec
name|specs
index|[]
parameter_list|)
block|{
name|this
operator|.
name|groupSpecs
operator|=
name|specs
expr_stmt|;
block|}
specifier|public
name|GroupSpec
index|[]
name|getGroupSpecs
parameter_list|()
block|{
return|return
name|groupSpecs
operator|==
literal|null
condition|?
operator|new
name|GroupSpec
index|[
literal|0
index|]
else|:
name|groupSpecs
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
if|if
condition|(
name|groupSpecs
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"group by "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groupSpecs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|dumper
operator|.
name|display
argument_list|(
name|groupSpecs
index|[
name|i
index|]
operator|.
name|getGroupExpression
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|" as "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|"$"
argument_list|)
operator|.
name|display
argument_list|(
name|groupSpecs
index|[
name|i
index|]
operator|.
name|getKeyVarName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|dumper
operator|.
name|nl
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|groupedMap
operator|=
literal|null
expr_stmt|;
name|returnExpr
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
for|for
control|(
name|GroupSpec
name|spec
range|:
name|groupSpecs
control|)
block|{
name|spec
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|Tuple
extends|extends
name|HashMap
argument_list|<
name|QName
argument_list|,
name|Sequence
argument_list|>
block|{
specifier|private
specifier|final
name|List
argument_list|<
name|Sequence
argument_list|>
name|groupingValues
decl_stmt|;
specifier|public
name|Tuple
parameter_list|(
specifier|final
name|List
argument_list|<
name|Sequence
argument_list|>
name|groupingValues
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|groupingValues
operator|=
name|groupingValues
expr_stmt|;
block|}
specifier|public
name|void
name|add
parameter_list|(
name|QName
name|name
parameter_list|,
name|Sequence
name|val
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|seq
init|=
name|get
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|seq
operator|==
literal|null
condition|)
block|{
specifier|final
name|ValueSequence
name|temp
init|=
operator|new
name|ValueSequence
argument_list|(
name|val
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
name|temp
operator|.
name|addAll
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|put
argument_list|(
name|name
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|seq
operator|.
name|addAll
argument_list|(
name|val
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_class

end_unit

