begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.4: "XQuery.g" -> "XQueryLexer.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|debug
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamRecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharScanner
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|InputBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CommonToken
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltForCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRHashString
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LexerSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_comment
comment|/**  * The XQuery/XPath lexical analyzer.  */
end_comment

begin_class
specifier|public
class|class
name|XQueryLexer
extends|extends
name|antlr
operator|.
name|CharScanner
implements|implements
name|XQueryTokenTypes
implements|,
name|TokenStream
block|{
specifier|protected
name|boolean
name|wsExplicit
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|parseStringLiterals
init|=
literal|true
decl_stmt|;
specifier|protected
name|boolean
name|inElementContent
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|inAttributeContent
init|=
literal|false
decl_stmt|;
specifier|protected
name|char
name|attrDelimChar
init|=
literal|'"'
decl_stmt|;
specifier|protected
name|boolean
name|inComment
init|=
literal|false
decl_stmt|;
specifier|protected
name|XQueryContext
name|context
init|=
literal|null
decl_stmt|;
specifier|public
name|XQueryLexer
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Reader
name|in
parameter_list|)
block|{
name|this
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|private
name|void
name|parseLinefeeds
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'\n'
condition|)
name|newline
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|XQueryLexer
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ByteBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryLexer
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|CharBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryLexer
parameter_list|(
name|InputBuffer
name|ib
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|LexerSharedInputState
argument_list|(
name|ib
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryLexer
parameter_list|(
name|LexerSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|caseSensitiveLiterals
operator|=
literal|true
expr_stmt|;
name|setCaseSensitive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|literals
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"typeswitch"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|113
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"xpointer"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|47
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"namespace"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|55
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"comment"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|152
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"case"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|114
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"option"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|65
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"delete"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|96
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ne"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|126
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"le"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"greatest"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ancestor-or-self"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|170
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"descendant-or-self"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|166
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"insert"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|95
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"variable"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|67
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"where"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|102
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"construction"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|63
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"then"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|115
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"preceding"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"document-node"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|154
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"collation"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|69
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"xmlspace"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|61
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"to"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|138
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"and"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|118
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"module"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|54
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"strip"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|72
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"return"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|103
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"external"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|78
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"unordered"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|74
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ordered"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|73
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"mod"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|142
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"following"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|101
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"except"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|146
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"text"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|149
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"preserve"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|71
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"function"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|66
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"with"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|98
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"gt"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|129
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"preceding-sibling"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|171
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"intersect"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|145
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"version"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|52
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"at"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|79
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"of"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|120
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"is"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|134
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"or"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|117
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"if"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|91
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"least"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|111
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"as"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"by"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|107
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"union"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|143
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"order"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|106
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"xquery"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|51
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"following-sibling"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|167
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"node"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|150
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"collection"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|184
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"some"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|89
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ge"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|130
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"declare"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|59
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"for"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|87
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ascending"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|108
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"eq"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|125
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"isnot"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|135
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"element"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|70
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"default"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|60
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"descending"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|109
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"castable"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|121
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"idiv"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|141
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ancestor"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|169
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ordering"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|62
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"instance"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|119
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"replace"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|93
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"attribute"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|151
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"empty"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|82
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"cast"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|122
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"value"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|94
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"encoding"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|68
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"into"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|99
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"rename"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|97
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"else"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|116
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"import"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|58
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"lt"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"document"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|155
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"self"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|164
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"in"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|104
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"let"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|88
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"base-uri"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|64
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"processing-instruction"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|153
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"parent"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|168
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"descendant"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|165
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"update"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|92
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"every"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"satisfies"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|112
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"div"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|140
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"item"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|86
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"child"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|163
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Token
name|nextToken
parameter_list|()
throws|throws
name|TokenStreamException
block|{
name|Token
name|theRetToken
init|=
literal|null
decl_stmt|;
name|tryAgain
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_ttype
init|=
name|Token
operator|.
name|INVALID_TYPE
decl_stmt|;
name|resetText
argument_list|()
expr_stmt|;
try|try
block|{
comment|// for char stream error handling
try|try
block|{
comment|// for lexical error handling
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
condition|)
block|{
name|mNEXT_TOKEN
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|EOF_CHAR
condition|)
block|{
name|uponEOF
argument_list|()
expr_stmt|;
name|_returnToken
operator|=
name|makeToken
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_returnToken
operator|==
literal|null
condition|)
continue|continue
name|tryAgain
continue|;
comment|// found SKIP token
name|_ttype
operator|=
name|_returnToken
operator|.
name|getType
argument_list|()
expr_stmt|;
name|_returnToken
operator|.
name|setType
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
return|return
name|_returnToken
return|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStreamRecognitionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CharStreamException
name|cse
parameter_list|)
block|{
if|if
condition|(
name|cse
operator|instanceof
name|CharStreamIOException
condition|)
block|{
throw|throw
operator|new
name|TokenStreamIOException
argument_list|(
operator|(
operator|(
name|CharStreamIOException
operator|)
name|cse
operator|)
operator|.
name|io
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TokenStreamException
argument_list|(
name|cse
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|protected
specifier|final
name|void
name|mSLASH
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SLASH
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mDSLASH
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DSLASH
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mCOLON
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|COLON
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mCOMMA
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|COMMA
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|','
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mSEMICOLON
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SEMICOLON
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mSTAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|STAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mQUESTION
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|QUESTION
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mPLUS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PLUS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mMINUS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|MINUS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mLPPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LPPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mRPPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|RPPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mLPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mRPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|RPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mSELF
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SELF
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mPARENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PARENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mUNION
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|UNION
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mAT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|AT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mDOLLAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DOLLAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mANDEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ANDEQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"&="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mOREQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|OREQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"|="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|EQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mNEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NEQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"!="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mGT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|GT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mGTEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|GTEQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|">="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mQUOT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|QUOT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mAPOS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|APOS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mLTEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LTEQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"<="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mLT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mEND_TAG_START
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|END_TAG_START
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"</"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mLCURLY
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LCURLY
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'{'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mRCURLY
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|RCURLY
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'}'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mXML_COMMENT_END
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XML_COMMENT_END
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"-->"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mXML_PI_START
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XML_PI_START
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"<?"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mXML_PI_END
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XML_PI_END
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"?>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mXML_CDATA_START
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XML_CDATA_START
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"<![CDATA["
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mXML_CDATA_END
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XML_CDATA_END
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"]]>"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mLETTER
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LETTER
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mBASECHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mIDEOGRAPHIC
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mBASECHAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|BASECHAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0041'
argument_list|,
literal|'\u005a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0061'
argument_list|,
literal|'\u007a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u00c0'
case|:
case|case
literal|'\u00c1'
case|:
case|case
literal|'\u00c2'
case|:
case|case
literal|'\u00c3'
case|:
case|case
literal|'\u00c4'
case|:
case|case
literal|'\u00c5'
case|:
case|case
literal|'\u00c6'
case|:
case|case
literal|'\u00c7'
case|:
case|case
literal|'\u00c8'
case|:
case|case
literal|'\u00c9'
case|:
case|case
literal|'\u00ca'
case|:
case|case
literal|'\u00cb'
case|:
case|case
literal|'\u00cc'
case|:
case|case
literal|'\u00cd'
case|:
case|case
literal|'\u00ce'
case|:
case|case
literal|'\u00cf'
case|:
case|case
literal|'\u00d0'
case|:
case|case
literal|'\u00d1'
case|:
case|case
literal|'\u00d2'
case|:
case|case
literal|'\u00d3'
case|:
case|case
literal|'\u00d4'
case|:
case|case
literal|'\u00d5'
case|:
case|case
literal|'\u00d6'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u00c0'
argument_list|,
literal|'\u00d6'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u00d8'
case|:
case|case
literal|'\u00d9'
case|:
case|case
literal|'\u00da'
case|:
case|case
literal|'\u00db'
case|:
case|case
literal|'\u00dc'
case|:
case|case
literal|'\u00dd'
case|:
case|case
literal|'\u00de'
case|:
case|case
literal|'\u00df'
case|:
case|case
literal|'\u00e0'
case|:
case|case
literal|'\u00e1'
case|:
case|case
literal|'\u00e2'
case|:
case|case
literal|'\u00e3'
case|:
case|case
literal|'\u00e4'
case|:
case|case
literal|'\u00e5'
case|:
case|case
literal|'\u00e6'
case|:
case|case
literal|'\u00e7'
case|:
case|case
literal|'\u00e8'
case|:
case|case
literal|'\u00e9'
case|:
case|case
literal|'\u00ea'
case|:
case|case
literal|'\u00eb'
case|:
case|case
literal|'\u00ec'
case|:
case|case
literal|'\u00ed'
case|:
case|case
literal|'\u00ee'
case|:
case|case
literal|'\u00ef'
case|:
case|case
literal|'\u00f0'
case|:
case|case
literal|'\u00f1'
case|:
case|case
literal|'\u00f2'
case|:
case|case
literal|'\u00f3'
case|:
case|case
literal|'\u00f4'
case|:
case|case
literal|'\u00f5'
case|:
case|case
literal|'\u00f6'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u00d8'
argument_list|,
literal|'\u00f6'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u00f8'
case|:
case|case
literal|'\u00f9'
case|:
case|case
literal|'\u00fa'
case|:
case|case
literal|'\u00fb'
case|:
case|case
literal|'\u00fc'
case|:
case|case
literal|'\u00fd'
case|:
case|case
literal|'\u00fe'
case|:
case|case
literal|'\u00ff'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u00f8'
argument_list|,
literal|'\u00ff'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0100'
case|:
case|case
literal|'\u0101'
case|:
case|case
literal|'\u0102'
case|:
case|case
literal|'\u0103'
case|:
case|case
literal|'\u0104'
case|:
case|case
literal|'\u0105'
case|:
case|case
literal|'\u0106'
case|:
case|case
literal|'\u0107'
case|:
case|case
literal|'\u0108'
case|:
case|case
literal|'\u0109'
case|:
case|case
literal|'\u010a'
case|:
case|case
literal|'\u010b'
case|:
case|case
literal|'\u010c'
case|:
case|case
literal|'\u010d'
case|:
case|case
literal|'\u010e'
case|:
case|case
literal|'\u010f'
case|:
case|case
literal|'\u0110'
case|:
case|case
literal|'\u0111'
case|:
case|case
literal|'\u0112'
case|:
case|case
literal|'\u0113'
case|:
case|case
literal|'\u0114'
case|:
case|case
literal|'\u0115'
case|:
case|case
literal|'\u0116'
case|:
case|case
literal|'\u0117'
case|:
case|case
literal|'\u0118'
case|:
case|case
literal|'\u0119'
case|:
case|case
literal|'\u011a'
case|:
case|case
literal|'\u011b'
case|:
case|case
literal|'\u011c'
case|:
case|case
literal|'\u011d'
case|:
case|case
literal|'\u011e'
case|:
case|case
literal|'\u011f'
case|:
case|case
literal|'\u0120'
case|:
case|case
literal|'\u0121'
case|:
case|case
literal|'\u0122'
case|:
case|case
literal|'\u0123'
case|:
case|case
literal|'\u0124'
case|:
case|case
literal|'\u0125'
case|:
case|case
literal|'\u0126'
case|:
case|case
literal|'\u0127'
case|:
case|case
literal|'\u0128'
case|:
case|case
literal|'\u0129'
case|:
case|case
literal|'\u012a'
case|:
case|case
literal|'\u012b'
case|:
case|case
literal|'\u012c'
case|:
case|case
literal|'\u012d'
case|:
case|case
literal|'\u012e'
case|:
case|case
literal|'\u012f'
case|:
case|case
literal|'\u0130'
case|:
case|case
literal|'\u0131'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0100'
argument_list|,
literal|'\u0131'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0134'
case|:
case|case
literal|'\u0135'
case|:
case|case
literal|'\u0136'
case|:
case|case
literal|'\u0137'
case|:
case|case
literal|'\u0138'
case|:
case|case
literal|'\u0139'
case|:
case|case
literal|'\u013a'
case|:
case|case
literal|'\u013b'
case|:
case|case
literal|'\u013c'
case|:
case|case
literal|'\u013d'
case|:
case|case
literal|'\u013e'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0134'
argument_list|,
literal|'\u013e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0141'
case|:
case|case
literal|'\u0142'
case|:
case|case
literal|'\u0143'
case|:
case|case
literal|'\u0144'
case|:
case|case
literal|'\u0145'
case|:
case|case
literal|'\u0146'
case|:
case|case
literal|'\u0147'
case|:
case|case
literal|'\u0148'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0141'
argument_list|,
literal|'\u0148'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u014a'
case|:
case|case
literal|'\u014b'
case|:
case|case
literal|'\u014c'
case|:
case|case
literal|'\u014d'
case|:
case|case
literal|'\u014e'
case|:
case|case
literal|'\u014f'
case|:
case|case
literal|'\u0150'
case|:
case|case
literal|'\u0151'
case|:
case|case
literal|'\u0152'
case|:
case|case
literal|'\u0153'
case|:
case|case
literal|'\u0154'
case|:
case|case
literal|'\u0155'
case|:
case|case
literal|'\u0156'
case|:
case|case
literal|'\u0157'
case|:
case|case
literal|'\u0158'
case|:
case|case
literal|'\u0159'
case|:
case|case
literal|'\u015a'
case|:
case|case
literal|'\u015b'
case|:
case|case
literal|'\u015c'
case|:
case|case
literal|'\u015d'
case|:
case|case
literal|'\u015e'
case|:
case|case
literal|'\u015f'
case|:
case|case
literal|'\u0160'
case|:
case|case
literal|'\u0161'
case|:
case|case
literal|'\u0162'
case|:
case|case
literal|'\u0163'
case|:
case|case
literal|'\u0164'
case|:
case|case
literal|'\u0165'
case|:
case|case
literal|'\u0166'
case|:
case|case
literal|'\u0167'
case|:
case|case
literal|'\u0168'
case|:
case|case
literal|'\u0169'
case|:
case|case
literal|'\u016a'
case|:
case|case
literal|'\u016b'
case|:
case|case
literal|'\u016c'
case|:
case|case
literal|'\u016d'
case|:
case|case
literal|'\u016e'
case|:
case|case
literal|'\u016f'
case|:
case|case
literal|'\u0170'
case|:
case|case
literal|'\u0171'
case|:
case|case
literal|'\u0172'
case|:
case|case
literal|'\u0173'
case|:
case|case
literal|'\u0174'
case|:
case|case
literal|'\u0175'
case|:
case|case
literal|'\u0176'
case|:
case|case
literal|'\u0177'
case|:
case|case
literal|'\u0178'
case|:
case|case
literal|'\u0179'
case|:
case|case
literal|'\u017a'
case|:
case|case
literal|'\u017b'
case|:
case|case
literal|'\u017c'
case|:
case|case
literal|'\u017d'
case|:
case|case
literal|'\u017e'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u014a'
argument_list|,
literal|'\u017e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0180'
case|:
case|case
literal|'\u0181'
case|:
case|case
literal|'\u0182'
case|:
case|case
literal|'\u0183'
case|:
case|case
literal|'\u0184'
case|:
case|case
literal|'\u0185'
case|:
case|case
literal|'\u0186'
case|:
case|case
literal|'\u0187'
case|:
case|case
literal|'\u0188'
case|:
case|case
literal|'\u0189'
case|:
case|case
literal|'\u018a'
case|:
case|case
literal|'\u018b'
case|:
case|case
literal|'\u018c'
case|:
case|case
literal|'\u018d'
case|:
case|case
literal|'\u018e'
case|:
case|case
literal|'\u018f'
case|:
case|case
literal|'\u0190'
case|:
case|case
literal|'\u0191'
case|:
case|case
literal|'\u0192'
case|:
case|case
literal|'\u0193'
case|:
case|case
literal|'\u0194'
case|:
case|case
literal|'\u0195'
case|:
case|case
literal|'\u0196'
case|:
case|case
literal|'\u0197'
case|:
case|case
literal|'\u0198'
case|:
case|case
literal|'\u0199'
case|:
case|case
literal|'\u019a'
case|:
case|case
literal|'\u019b'
case|:
case|case
literal|'\u019c'
case|:
case|case
literal|'\u019d'
case|:
case|case
literal|'\u019e'
case|:
case|case
literal|'\u019f'
case|:
case|case
literal|'\u01a0'
case|:
case|case
literal|'\u01a1'
case|:
case|case
literal|'\u01a2'
case|:
case|case
literal|'\u01a3'
case|:
case|case
literal|'\u01a4'
case|:
case|case
literal|'\u01a5'
case|:
case|case
literal|'\u01a6'
case|:
case|case
literal|'\u01a7'
case|:
case|case
literal|'\u01a8'
case|:
case|case
literal|'\u01a9'
case|:
case|case
literal|'\u01aa'
case|:
case|case
literal|'\u01ab'
case|:
case|case
literal|'\u01ac'
case|:
case|case
literal|'\u01ad'
case|:
case|case
literal|'\u01ae'
case|:
case|case
literal|'\u01af'
case|:
case|case
literal|'\u01b0'
case|:
case|case
literal|'\u01b1'
case|:
case|case
literal|'\u01b2'
case|:
case|case
literal|'\u01b3'
case|:
case|case
literal|'\u01b4'
case|:
case|case
literal|'\u01b5'
case|:
case|case
literal|'\u01b6'
case|:
case|case
literal|'\u01b7'
case|:
case|case
literal|'\u01b8'
case|:
case|case
literal|'\u01b9'
case|:
case|case
literal|'\u01ba'
case|:
case|case
literal|'\u01bb'
case|:
case|case
literal|'\u01bc'
case|:
case|case
literal|'\u01bd'
case|:
case|case
literal|'\u01be'
case|:
case|case
literal|'\u01bf'
case|:
case|case
literal|'\u01c0'
case|:
case|case
literal|'\u01c1'
case|:
case|case
literal|'\u01c2'
case|:
case|case
literal|'\u01c3'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0180'
argument_list|,
literal|'\u01c3'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u01cd'
case|:
case|case
literal|'\u01ce'
case|:
case|case
literal|'\u01cf'
case|:
case|case
literal|'\u01d0'
case|:
case|case
literal|'\u01d1'
case|:
case|case
literal|'\u01d2'
case|:
case|case
literal|'\u01d3'
case|:
case|case
literal|'\u01d4'
case|:
case|case
literal|'\u01d5'
case|:
case|case
literal|'\u01d6'
case|:
case|case
literal|'\u01d7'
case|:
case|case
literal|'\u01d8'
case|:
case|case
literal|'\u01d9'
case|:
case|case
literal|'\u01da'
case|:
case|case
literal|'\u01db'
case|:
case|case
literal|'\u01dc'
case|:
case|case
literal|'\u01dd'
case|:
case|case
literal|'\u01de'
case|:
case|case
literal|'\u01df'
case|:
case|case
literal|'\u01e0'
case|:
case|case
literal|'\u01e1'
case|:
case|case
literal|'\u01e2'
case|:
case|case
literal|'\u01e3'
case|:
case|case
literal|'\u01e4'
case|:
case|case
literal|'\u01e5'
case|:
case|case
literal|'\u01e6'
case|:
case|case
literal|'\u01e7'
case|:
case|case
literal|'\u01e8'
case|:
case|case
literal|'\u01e9'
case|:
case|case
literal|'\u01ea'
case|:
case|case
literal|'\u01eb'
case|:
case|case
literal|'\u01ec'
case|:
case|case
literal|'\u01ed'
case|:
case|case
literal|'\u01ee'
case|:
case|case
literal|'\u01ef'
case|:
case|case
literal|'\u01f0'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u01cd'
argument_list|,
literal|'\u01f0'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u01f4'
case|:
case|case
literal|'\u01f5'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u01f4'
argument_list|,
literal|'\u01f5'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u01fa'
case|:
case|case
literal|'\u01fb'
case|:
case|case
literal|'\u01fc'
case|:
case|case
literal|'\u01fd'
case|:
case|case
literal|'\u01fe'
case|:
case|case
literal|'\u01ff'
case|:
case|case
literal|'\u0200'
case|:
case|case
literal|'\u0201'
case|:
case|case
literal|'\u0202'
case|:
case|case
literal|'\u0203'
case|:
case|case
literal|'\u0204'
case|:
case|case
literal|'\u0205'
case|:
case|case
literal|'\u0206'
case|:
case|case
literal|'\u0207'
case|:
case|case
literal|'\u0208'
case|:
case|case
literal|'\u0209'
case|:
case|case
literal|'\u020a'
case|:
case|case
literal|'\u020b'
case|:
case|case
literal|'\u020c'
case|:
case|case
literal|'\u020d'
case|:
case|case
literal|'\u020e'
case|:
case|case
literal|'\u020f'
case|:
case|case
literal|'\u0210'
case|:
case|case
literal|'\u0211'
case|:
case|case
literal|'\u0212'
case|:
case|case
literal|'\u0213'
case|:
case|case
literal|'\u0214'
case|:
case|case
literal|'\u0215'
case|:
case|case
literal|'\u0216'
case|:
case|case
literal|'\u0217'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u01fa'
argument_list|,
literal|'\u0217'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0250'
case|:
case|case
literal|'\u0251'
case|:
case|case
literal|'\u0252'
case|:
case|case
literal|'\u0253'
case|:
case|case
literal|'\u0254'
case|:
case|case
literal|'\u0255'
case|:
case|case
literal|'\u0256'
case|:
case|case
literal|'\u0257'
case|:
case|case
literal|'\u0258'
case|:
case|case
literal|'\u0259'
case|:
case|case
literal|'\u025a'
case|:
case|case
literal|'\u025b'
case|:
case|case
literal|'\u025c'
case|:
case|case
literal|'\u025d'
case|:
case|case
literal|'\u025e'
case|:
case|case
literal|'\u025f'
case|:
case|case
literal|'\u0260'
case|:
case|case
literal|'\u0261'
case|:
case|case
literal|'\u0262'
case|:
case|case
literal|'\u0263'
case|:
case|case
literal|'\u0264'
case|:
case|case
literal|'\u0265'
case|:
case|case
literal|'\u0266'
case|:
case|case
literal|'\u0267'
case|:
case|case
literal|'\u0268'
case|:
case|case
literal|'\u0269'
case|:
case|case
literal|'\u026a'
case|:
case|case
literal|'\u026b'
case|:
case|case
literal|'\u026c'
case|:
case|case
literal|'\u026d'
case|:
case|case
literal|'\u026e'
case|:
case|case
literal|'\u026f'
case|:
case|case
literal|'\u0270'
case|:
case|case
literal|'\u0271'
case|:
case|case
literal|'\u0272'
case|:
case|case
literal|'\u0273'
case|:
case|case
literal|'\u0274'
case|:
case|case
literal|'\u0275'
case|:
case|case
literal|'\u0276'
case|:
case|case
literal|'\u0277'
case|:
case|case
literal|'\u0278'
case|:
case|case
literal|'\u0279'
case|:
case|case
literal|'\u027a'
case|:
case|case
literal|'\u027b'
case|:
case|case
literal|'\u027c'
case|:
case|case
literal|'\u027d'
case|:
case|case
literal|'\u027e'
case|:
case|case
literal|'\u027f'
case|:
case|case
literal|'\u0280'
case|:
case|case
literal|'\u0281'
case|:
case|case
literal|'\u0282'
case|:
case|case
literal|'\u0283'
case|:
case|case
literal|'\u0284'
case|:
case|case
literal|'\u0285'
case|:
case|case
literal|'\u0286'
case|:
case|case
literal|'\u0287'
case|:
case|case
literal|'\u0288'
case|:
case|case
literal|'\u0289'
case|:
case|case
literal|'\u028a'
case|:
case|case
literal|'\u028b'
case|:
case|case
literal|'\u028c'
case|:
case|case
literal|'\u028d'
case|:
case|case
literal|'\u028e'
case|:
case|case
literal|'\u028f'
case|:
case|case
literal|'\u0290'
case|:
case|case
literal|'\u0291'
case|:
case|case
literal|'\u0292'
case|:
case|case
literal|'\u0293'
case|:
case|case
literal|'\u0294'
case|:
case|case
literal|'\u0295'
case|:
case|case
literal|'\u0296'
case|:
case|case
literal|'\u0297'
case|:
case|case
literal|'\u0298'
case|:
case|case
literal|'\u0299'
case|:
case|case
literal|'\u029a'
case|:
case|case
literal|'\u029b'
case|:
case|case
literal|'\u029c'
case|:
case|case
literal|'\u029d'
case|:
case|case
literal|'\u029e'
case|:
case|case
literal|'\u029f'
case|:
case|case
literal|'\u02a0'
case|:
case|case
literal|'\u02a1'
case|:
case|case
literal|'\u02a2'
case|:
case|case
literal|'\u02a3'
case|:
case|case
literal|'\u02a4'
case|:
case|case
literal|'\u02a5'
case|:
case|case
literal|'\u02a6'
case|:
case|case
literal|'\u02a7'
case|:
case|case
literal|'\u02a8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0250'
argument_list|,
literal|'\u02a8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u02bb'
case|:
case|case
literal|'\u02bc'
case|:
case|case
literal|'\u02bd'
case|:
case|case
literal|'\u02be'
case|:
case|case
literal|'\u02bf'
case|:
case|case
literal|'\u02c0'
case|:
case|case
literal|'\u02c1'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u02bb'
argument_list|,
literal|'\u02c1'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0386'
case|:
block|{
name|match
argument_list|(
literal|'\u0386'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0388'
case|:
case|case
literal|'\u0389'
case|:
case|case
literal|'\u038a'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0388'
argument_list|,
literal|'\u038a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u038c'
case|:
block|{
name|match
argument_list|(
literal|'\u038c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u038e'
case|:
case|case
literal|'\u038f'
case|:
case|case
literal|'\u0390'
case|:
case|case
literal|'\u0391'
case|:
case|case
literal|'\u0392'
case|:
case|case
literal|'\u0393'
case|:
case|case
literal|'\u0394'
case|:
case|case
literal|'\u0395'
case|:
case|case
literal|'\u0396'
case|:
case|case
literal|'\u0397'
case|:
case|case
literal|'\u0398'
case|:
case|case
literal|'\u0399'
case|:
case|case
literal|'\u039a'
case|:
case|case
literal|'\u039b'
case|:
case|case
literal|'\u039c'
case|:
case|case
literal|'\u039d'
case|:
case|case
literal|'\u039e'
case|:
case|case
literal|'\u039f'
case|:
case|case
literal|'\u03a0'
case|:
case|case
literal|'\u03a1'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u038e'
argument_list|,
literal|'\u03a1'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u03a3'
case|:
case|case
literal|'\u03a4'
case|:
case|case
literal|'\u03a5'
case|:
case|case
literal|'\u03a6'
case|:
case|case
literal|'\u03a7'
case|:
case|case
literal|'\u03a8'
case|:
case|case
literal|'\u03a9'
case|:
case|case
literal|'\u03aa'
case|:
case|case
literal|'\u03ab'
case|:
case|case
literal|'\u03ac'
case|:
case|case
literal|'\u03ad'
case|:
case|case
literal|'\u03ae'
case|:
case|case
literal|'\u03af'
case|:
case|case
literal|'\u03b0'
case|:
case|case
literal|'\u03b1'
case|:
case|case
literal|'\u03b2'
case|:
case|case
literal|'\u03b3'
case|:
case|case
literal|'\u03b4'
case|:
case|case
literal|'\u03b5'
case|:
case|case
literal|'\u03b6'
case|:
case|case
literal|'\u03b7'
case|:
case|case
literal|'\u03b8'
case|:
case|case
literal|'\u03b9'
case|:
case|case
literal|'\u03ba'
case|:
case|case
literal|'\u03bb'
case|:
case|case
literal|'\u03bc'
case|:
case|case
literal|'\u03bd'
case|:
case|case
literal|'\u03be'
case|:
case|case
literal|'\u03bf'
case|:
case|case
literal|'\u03c0'
case|:
case|case
literal|'\u03c1'
case|:
case|case
literal|'\u03c2'
case|:
case|case
literal|'\u03c3'
case|:
case|case
literal|'\u03c4'
case|:
case|case
literal|'\u03c5'
case|:
case|case
literal|'\u03c6'
case|:
case|case
literal|'\u03c7'
case|:
case|case
literal|'\u03c8'
case|:
case|case
literal|'\u03c9'
case|:
case|case
literal|'\u03ca'
case|:
case|case
literal|'\u03cb'
case|:
case|case
literal|'\u03cc'
case|:
case|case
literal|'\u03cd'
case|:
case|case
literal|'\u03ce'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u03a3'
argument_list|,
literal|'\u03ce'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u03d0'
case|:
case|case
literal|'\u03d1'
case|:
case|case
literal|'\u03d2'
case|:
case|case
literal|'\u03d3'
case|:
case|case
literal|'\u03d4'
case|:
case|case
literal|'\u03d5'
case|:
case|case
literal|'\u03d6'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u03d0'
argument_list|,
literal|'\u03d6'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u03da'
case|:
block|{
name|match
argument_list|(
literal|'\u03da'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u03dc'
case|:
block|{
name|match
argument_list|(
literal|'\u03dc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u03de'
case|:
block|{
name|match
argument_list|(
literal|'\u03de'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u03e0'
case|:
block|{
name|match
argument_list|(
literal|'\u03e0'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u03e2'
case|:
case|case
literal|'\u03e3'
case|:
case|case
literal|'\u03e4'
case|:
case|case
literal|'\u03e5'
case|:
case|case
literal|'\u03e6'
case|:
case|case
literal|'\u03e7'
case|:
case|case
literal|'\u03e8'
case|:
case|case
literal|'\u03e9'
case|:
case|case
literal|'\u03ea'
case|:
case|case
literal|'\u03eb'
case|:
case|case
literal|'\u03ec'
case|:
case|case
literal|'\u03ed'
case|:
case|case
literal|'\u03ee'
case|:
case|case
literal|'\u03ef'
case|:
case|case
literal|'\u03f0'
case|:
case|case
literal|'\u03f1'
case|:
case|case
literal|'\u03f2'
case|:
case|case
literal|'\u03f3'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u03e2'
argument_list|,
literal|'\u03f3'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0401'
case|:
case|case
literal|'\u0402'
case|:
case|case
literal|'\u0403'
case|:
case|case
literal|'\u0404'
case|:
case|case
literal|'\u0405'
case|:
case|case
literal|'\u0406'
case|:
case|case
literal|'\u0407'
case|:
case|case
literal|'\u0408'
case|:
case|case
literal|'\u0409'
case|:
case|case
literal|'\u040a'
case|:
case|case
literal|'\u040b'
case|:
case|case
literal|'\u040c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0401'
argument_list|,
literal|'\u040c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u040e'
case|:
case|case
literal|'\u040f'
case|:
case|case
literal|'\u0410'
case|:
case|case
literal|'\u0411'
case|:
case|case
literal|'\u0412'
case|:
case|case
literal|'\u0413'
case|:
case|case
literal|'\u0414'
case|:
case|case
literal|'\u0415'
case|:
case|case
literal|'\u0416'
case|:
case|case
literal|'\u0417'
case|:
case|case
literal|'\u0418'
case|:
case|case
literal|'\u0419'
case|:
case|case
literal|'\u041a'
case|:
case|case
literal|'\u041b'
case|:
case|case
literal|'\u041c'
case|:
case|case
literal|'\u041d'
case|:
case|case
literal|'\u041e'
case|:
case|case
literal|'\u041f'
case|:
case|case
literal|'\u0420'
case|:
case|case
literal|'\u0421'
case|:
case|case
literal|'\u0422'
case|:
case|case
literal|'\u0423'
case|:
case|case
literal|'\u0424'
case|:
case|case
literal|'\u0425'
case|:
case|case
literal|'\u0426'
case|:
case|case
literal|'\u0427'
case|:
case|case
literal|'\u0428'
case|:
case|case
literal|'\u0429'
case|:
case|case
literal|'\u042a'
case|:
case|case
literal|'\u042b'
case|:
case|case
literal|'\u042c'
case|:
case|case
literal|'\u042d'
case|:
case|case
literal|'\u042e'
case|:
case|case
literal|'\u042f'
case|:
case|case
literal|'\u0430'
case|:
case|case
literal|'\u0431'
case|:
case|case
literal|'\u0432'
case|:
case|case
literal|'\u0433'
case|:
case|case
literal|'\u0434'
case|:
case|case
literal|'\u0435'
case|:
case|case
literal|'\u0436'
case|:
case|case
literal|'\u0437'
case|:
case|case
literal|'\u0438'
case|:
case|case
literal|'\u0439'
case|:
case|case
literal|'\u043a'
case|:
case|case
literal|'\u043b'
case|:
case|case
literal|'\u043c'
case|:
case|case
literal|'\u043d'
case|:
case|case
literal|'\u043e'
case|:
case|case
literal|'\u043f'
case|:
case|case
literal|'\u0440'
case|:
case|case
literal|'\u0441'
case|:
case|case
literal|'\u0442'
case|:
case|case
literal|'\u0443'
case|:
case|case
literal|'\u0444'
case|:
case|case
literal|'\u0445'
case|:
case|case
literal|'\u0446'
case|:
case|case
literal|'\u0447'
case|:
case|case
literal|'\u0448'
case|:
case|case
literal|'\u0449'
case|:
case|case
literal|'\u044a'
case|:
case|case
literal|'\u044b'
case|:
case|case
literal|'\u044c'
case|:
case|case
literal|'\u044d'
case|:
case|case
literal|'\u044e'
case|:
case|case
literal|'\u044f'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u040e'
argument_list|,
literal|'\u044f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0451'
case|:
case|case
literal|'\u0452'
case|:
case|case
literal|'\u0453'
case|:
case|case
literal|'\u0454'
case|:
case|case
literal|'\u0455'
case|:
case|case
literal|'\u0456'
case|:
case|case
literal|'\u0457'
case|:
case|case
literal|'\u0458'
case|:
case|case
literal|'\u0459'
case|:
case|case
literal|'\u045a'
case|:
case|case
literal|'\u045b'
case|:
case|case
literal|'\u045c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0451'
argument_list|,
literal|'\u045c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u045e'
case|:
case|case
literal|'\u045f'
case|:
case|case
literal|'\u0460'
case|:
case|case
literal|'\u0461'
case|:
case|case
literal|'\u0462'
case|:
case|case
literal|'\u0463'
case|:
case|case
literal|'\u0464'
case|:
case|case
literal|'\u0465'
case|:
case|case
literal|'\u0466'
case|:
case|case
literal|'\u0467'
case|:
case|case
literal|'\u0468'
case|:
case|case
literal|'\u0469'
case|:
case|case
literal|'\u046a'
case|:
case|case
literal|'\u046b'
case|:
case|case
literal|'\u046c'
case|:
case|case
literal|'\u046d'
case|:
case|case
literal|'\u046e'
case|:
case|case
literal|'\u046f'
case|:
case|case
literal|'\u0470'
case|:
case|case
literal|'\u0471'
case|:
case|case
literal|'\u0472'
case|:
case|case
literal|'\u0473'
case|:
case|case
literal|'\u0474'
case|:
case|case
literal|'\u0475'
case|:
case|case
literal|'\u0476'
case|:
case|case
literal|'\u0477'
case|:
case|case
literal|'\u0478'
case|:
case|case
literal|'\u0479'
case|:
case|case
literal|'\u047a'
case|:
case|case
literal|'\u047b'
case|:
case|case
literal|'\u047c'
case|:
case|case
literal|'\u047d'
case|:
case|case
literal|'\u047e'
case|:
case|case
literal|'\u047f'
case|:
case|case
literal|'\u0480'
case|:
case|case
literal|'\u0481'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u045e'
argument_list|,
literal|'\u0481'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0490'
case|:
case|case
literal|'\u0491'
case|:
case|case
literal|'\u0492'
case|:
case|case
literal|'\u0493'
case|:
case|case
literal|'\u0494'
case|:
case|case
literal|'\u0495'
case|:
case|case
literal|'\u0496'
case|:
case|case
literal|'\u0497'
case|:
case|case
literal|'\u0498'
case|:
case|case
literal|'\u0499'
case|:
case|case
literal|'\u049a'
case|:
case|case
literal|'\u049b'
case|:
case|case
literal|'\u049c'
case|:
case|case
literal|'\u049d'
case|:
case|case
literal|'\u049e'
case|:
case|case
literal|'\u049f'
case|:
case|case
literal|'\u04a0'
case|:
case|case
literal|'\u04a1'
case|:
case|case
literal|'\u04a2'
case|:
case|case
literal|'\u04a3'
case|:
case|case
literal|'\u04a4'
case|:
case|case
literal|'\u04a5'
case|:
case|case
literal|'\u04a6'
case|:
case|case
literal|'\u04a7'
case|:
case|case
literal|'\u04a8'
case|:
case|case
literal|'\u04a9'
case|:
case|case
literal|'\u04aa'
case|:
case|case
literal|'\u04ab'
case|:
case|case
literal|'\u04ac'
case|:
case|case
literal|'\u04ad'
case|:
case|case
literal|'\u04ae'
case|:
case|case
literal|'\u04af'
case|:
case|case
literal|'\u04b0'
case|:
case|case
literal|'\u04b1'
case|:
case|case
literal|'\u04b2'
case|:
case|case
literal|'\u04b3'
case|:
case|case
literal|'\u04b4'
case|:
case|case
literal|'\u04b5'
case|:
case|case
literal|'\u04b6'
case|:
case|case
literal|'\u04b7'
case|:
case|case
literal|'\u04b8'
case|:
case|case
literal|'\u04b9'
case|:
case|case
literal|'\u04ba'
case|:
case|case
literal|'\u04bb'
case|:
case|case
literal|'\u04bc'
case|:
case|case
literal|'\u04bd'
case|:
case|case
literal|'\u04be'
case|:
case|case
literal|'\u04bf'
case|:
case|case
literal|'\u04c0'
case|:
case|case
literal|'\u04c1'
case|:
case|case
literal|'\u04c2'
case|:
case|case
literal|'\u04c3'
case|:
case|case
literal|'\u04c4'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0490'
argument_list|,
literal|'\u04c4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u04c7'
case|:
case|case
literal|'\u04c8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u04c7'
argument_list|,
literal|'\u04c8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u04cb'
case|:
case|case
literal|'\u04cc'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u04cb'
argument_list|,
literal|'\u04cc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u04d0'
case|:
case|case
literal|'\u04d1'
case|:
case|case
literal|'\u04d2'
case|:
case|case
literal|'\u04d3'
case|:
case|case
literal|'\u04d4'
case|:
case|case
literal|'\u04d5'
case|:
case|case
literal|'\u04d6'
case|:
case|case
literal|'\u04d7'
case|:
case|case
literal|'\u04d8'
case|:
case|case
literal|'\u04d9'
case|:
case|case
literal|'\u04da'
case|:
case|case
literal|'\u04db'
case|:
case|case
literal|'\u04dc'
case|:
case|case
literal|'\u04dd'
case|:
case|case
literal|'\u04de'
case|:
case|case
literal|'\u04df'
case|:
case|case
literal|'\u04e0'
case|:
case|case
literal|'\u04e1'
case|:
case|case
literal|'\u04e2'
case|:
case|case
literal|'\u04e3'
case|:
case|case
literal|'\u04e4'
case|:
case|case
literal|'\u04e5'
case|:
case|case
literal|'\u04e6'
case|:
case|case
literal|'\u04e7'
case|:
case|case
literal|'\u04e8'
case|:
case|case
literal|'\u04e9'
case|:
case|case
literal|'\u04ea'
case|:
case|case
literal|'\u04eb'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u04d0'
argument_list|,
literal|'\u04eb'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u04ee'
case|:
case|case
literal|'\u04ef'
case|:
case|case
literal|'\u04f0'
case|:
case|case
literal|'\u04f1'
case|:
case|case
literal|'\u04f2'
case|:
case|case
literal|'\u04f3'
case|:
case|case
literal|'\u04f4'
case|:
case|case
literal|'\u04f5'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u04ee'
argument_list|,
literal|'\u04f5'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u04f8'
case|:
case|case
literal|'\u04f9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u04f8'
argument_list|,
literal|'\u04f9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0531'
case|:
case|case
literal|'\u0532'
case|:
case|case
literal|'\u0533'
case|:
case|case
literal|'\u0534'
case|:
case|case
literal|'\u0535'
case|:
case|case
literal|'\u0536'
case|:
case|case
literal|'\u0537'
case|:
case|case
literal|'\u0538'
case|:
case|case
literal|'\u0539'
case|:
case|case
literal|'\u053a'
case|:
case|case
literal|'\u053b'
case|:
case|case
literal|'\u053c'
case|:
case|case
literal|'\u053d'
case|:
case|case
literal|'\u053e'
case|:
case|case
literal|'\u053f'
case|:
case|case
literal|'\u0540'
case|:
case|case
literal|'\u0541'
case|:
case|case
literal|'\u0542'
case|:
case|case
literal|'\u0543'
case|:
case|case
literal|'\u0544'
case|:
case|case
literal|'\u0545'
case|:
case|case
literal|'\u0546'
case|:
case|case
literal|'\u0547'
case|:
case|case
literal|'\u0548'
case|:
case|case
literal|'\u0549'
case|:
case|case
literal|'\u054a'
case|:
case|case
literal|'\u054b'
case|:
case|case
literal|'\u054c'
case|:
case|case
literal|'\u054d'
case|:
case|case
literal|'\u054e'
case|:
case|case
literal|'\u054f'
case|:
case|case
literal|'\u0550'
case|:
case|case
literal|'\u0551'
case|:
case|case
literal|'\u0552'
case|:
case|case
literal|'\u0553'
case|:
case|case
literal|'\u0554'
case|:
case|case
literal|'\u0555'
case|:
case|case
literal|'\u0556'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0531'
argument_list|,
literal|'\u0556'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0559'
case|:
block|{
name|match
argument_list|(
literal|'\u0559'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0561'
case|:
case|case
literal|'\u0562'
case|:
case|case
literal|'\u0563'
case|:
case|case
literal|'\u0564'
case|:
case|case
literal|'\u0565'
case|:
case|case
literal|'\u0566'
case|:
case|case
literal|'\u0567'
case|:
case|case
literal|'\u0568'
case|:
case|case
literal|'\u0569'
case|:
case|case
literal|'\u056a'
case|:
case|case
literal|'\u056b'
case|:
case|case
literal|'\u056c'
case|:
case|case
literal|'\u056d'
case|:
case|case
literal|'\u056e'
case|:
case|case
literal|'\u056f'
case|:
case|case
literal|'\u0570'
case|:
case|case
literal|'\u0571'
case|:
case|case
literal|'\u0572'
case|:
case|case
literal|'\u0573'
case|:
case|case
literal|'\u0574'
case|:
case|case
literal|'\u0575'
case|:
case|case
literal|'\u0576'
case|:
case|case
literal|'\u0577'
case|:
case|case
literal|'\u0578'
case|:
case|case
literal|'\u0579'
case|:
case|case
literal|'\u057a'
case|:
case|case
literal|'\u057b'
case|:
case|case
literal|'\u057c'
case|:
case|case
literal|'\u057d'
case|:
case|case
literal|'\u057e'
case|:
case|case
literal|'\u057f'
case|:
case|case
literal|'\u0580'
case|:
case|case
literal|'\u0581'
case|:
case|case
literal|'\u0582'
case|:
case|case
literal|'\u0583'
case|:
case|case
literal|'\u0584'
case|:
case|case
literal|'\u0585'
case|:
case|case
literal|'\u0586'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0561'
argument_list|,
literal|'\u0586'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u05d0'
case|:
case|case
literal|'\u05d1'
case|:
case|case
literal|'\u05d2'
case|:
case|case
literal|'\u05d3'
case|:
case|case
literal|'\u05d4'
case|:
case|case
literal|'\u05d5'
case|:
case|case
literal|'\u05d6'
case|:
case|case
literal|'\u05d7'
case|:
case|case
literal|'\u05d8'
case|:
case|case
literal|'\u05d9'
case|:
case|case
literal|'\u05da'
case|:
case|case
literal|'\u05db'
case|:
case|case
literal|'\u05dc'
case|:
case|case
literal|'\u05dd'
case|:
case|case
literal|'\u05de'
case|:
case|case
literal|'\u05df'
case|:
case|case
literal|'\u05e0'
case|:
case|case
literal|'\u05e1'
case|:
case|case
literal|'\u05e2'
case|:
case|case
literal|'\u05e3'
case|:
case|case
literal|'\u05e4'
case|:
case|case
literal|'\u05e5'
case|:
case|case
literal|'\u05e6'
case|:
case|case
literal|'\u05e7'
case|:
case|case
literal|'\u05e8'
case|:
case|case
literal|'\u05e9'
case|:
case|case
literal|'\u05ea'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u05d0'
argument_list|,
literal|'\u05ea'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u05f0'
case|:
case|case
literal|'\u05f1'
case|:
case|case
literal|'\u05f2'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u05f0'
argument_list|,
literal|'\u05f2'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0621'
case|:
case|case
literal|'\u0622'
case|:
case|case
literal|'\u0623'
case|:
case|case
literal|'\u0624'
case|:
case|case
literal|'\u0625'
case|:
case|case
literal|'\u0626'
case|:
case|case
literal|'\u0627'
case|:
case|case
literal|'\u0628'
case|:
case|case
literal|'\u0629'
case|:
case|case
literal|'\u062a'
case|:
case|case
literal|'\u062b'
case|:
case|case
literal|'\u062c'
case|:
case|case
literal|'\u062d'
case|:
case|case
literal|'\u062e'
case|:
case|case
literal|'\u062f'
case|:
case|case
literal|'\u0630'
case|:
case|case
literal|'\u0631'
case|:
case|case
literal|'\u0632'
case|:
case|case
literal|'\u0633'
case|:
case|case
literal|'\u0634'
case|:
case|case
literal|'\u0635'
case|:
case|case
literal|'\u0636'
case|:
case|case
literal|'\u0637'
case|:
case|case
literal|'\u0638'
case|:
case|case
literal|'\u0639'
case|:
case|case
literal|'\u063a'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0621'
argument_list|,
literal|'\u063a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0641'
case|:
case|case
literal|'\u0642'
case|:
case|case
literal|'\u0643'
case|:
case|case
literal|'\u0644'
case|:
case|case
literal|'\u0645'
case|:
case|case
literal|'\u0646'
case|:
case|case
literal|'\u0647'
case|:
case|case
literal|'\u0648'
case|:
case|case
literal|'\u0649'
case|:
case|case
literal|'\u064a'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0641'
argument_list|,
literal|'\u064a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0671'
case|:
case|case
literal|'\u0672'
case|:
case|case
literal|'\u0673'
case|:
case|case
literal|'\u0674'
case|:
case|case
literal|'\u0675'
case|:
case|case
literal|'\u0676'
case|:
case|case
literal|'\u0677'
case|:
case|case
literal|'\u0678'
case|:
case|case
literal|'\u0679'
case|:
case|case
literal|'\u067a'
case|:
case|case
literal|'\u067b'
case|:
case|case
literal|'\u067c'
case|:
case|case
literal|'\u067d'
case|:
case|case
literal|'\u067e'
case|:
case|case
literal|'\u067f'
case|:
case|case
literal|'\u0680'
case|:
case|case
literal|'\u0681'
case|:
case|case
literal|'\u0682'
case|:
case|case
literal|'\u0683'
case|:
case|case
literal|'\u0684'
case|:
case|case
literal|'\u0685'
case|:
case|case
literal|'\u0686'
case|:
case|case
literal|'\u0687'
case|:
case|case
literal|'\u0688'
case|:
case|case
literal|'\u0689'
case|:
case|case
literal|'\u068a'
case|:
case|case
literal|'\u068b'
case|:
case|case
literal|'\u068c'
case|:
case|case
literal|'\u068d'
case|:
case|case
literal|'\u068e'
case|:
case|case
literal|'\u068f'
case|:
case|case
literal|'\u0690'
case|:
case|case
literal|'\u0691'
case|:
case|case
literal|'\u0692'
case|:
case|case
literal|'\u0693'
case|:
case|case
literal|'\u0694'
case|:
case|case
literal|'\u0695'
case|:
case|case
literal|'\u0696'
case|:
case|case
literal|'\u0697'
case|:
case|case
literal|'\u0698'
case|:
case|case
literal|'\u0699'
case|:
case|case
literal|'\u069a'
case|:
case|case
literal|'\u069b'
case|:
case|case
literal|'\u069c'
case|:
case|case
literal|'\u069d'
case|:
case|case
literal|'\u069e'
case|:
case|case
literal|'\u069f'
case|:
case|case
literal|'\u06a0'
case|:
case|case
literal|'\u06a1'
case|:
case|case
literal|'\u06a2'
case|:
case|case
literal|'\u06a3'
case|:
case|case
literal|'\u06a4'
case|:
case|case
literal|'\u06a5'
case|:
case|case
literal|'\u06a6'
case|:
case|case
literal|'\u06a7'
case|:
case|case
literal|'\u06a8'
case|:
case|case
literal|'\u06a9'
case|:
case|case
literal|'\u06aa'
case|:
case|case
literal|'\u06ab'
case|:
case|case
literal|'\u06ac'
case|:
case|case
literal|'\u06ad'
case|:
case|case
literal|'\u06ae'
case|:
case|case
literal|'\u06af'
case|:
case|case
literal|'\u06b0'
case|:
case|case
literal|'\u06b1'
case|:
case|case
literal|'\u06b2'
case|:
case|case
literal|'\u06b3'
case|:
case|case
literal|'\u06b4'
case|:
case|case
literal|'\u06b5'
case|:
case|case
literal|'\u06b6'
case|:
case|case
literal|'\u06b7'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0671'
argument_list|,
literal|'\u06b7'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06ba'
case|:
case|case
literal|'\u06bb'
case|:
case|case
literal|'\u06bc'
case|:
case|case
literal|'\u06bd'
case|:
case|case
literal|'\u06be'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06ba'
argument_list|,
literal|'\u06be'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06c0'
case|:
case|case
literal|'\u06c1'
case|:
case|case
literal|'\u06c2'
case|:
case|case
literal|'\u06c3'
case|:
case|case
literal|'\u06c4'
case|:
case|case
literal|'\u06c5'
case|:
case|case
literal|'\u06c6'
case|:
case|case
literal|'\u06c7'
case|:
case|case
literal|'\u06c8'
case|:
case|case
literal|'\u06c9'
case|:
case|case
literal|'\u06ca'
case|:
case|case
literal|'\u06cb'
case|:
case|case
literal|'\u06cc'
case|:
case|case
literal|'\u06cd'
case|:
case|case
literal|'\u06ce'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06c0'
argument_list|,
literal|'\u06ce'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06d0'
case|:
case|case
literal|'\u06d1'
case|:
case|case
literal|'\u06d2'
case|:
case|case
literal|'\u06d3'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06d0'
argument_list|,
literal|'\u06d3'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06d5'
case|:
block|{
name|match
argument_list|(
literal|'\u06d5'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06e5'
case|:
case|case
literal|'\u06e6'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06e5'
argument_list|,
literal|'\u06e6'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0905'
case|:
case|case
literal|'\u0906'
case|:
case|case
literal|'\u0907'
case|:
case|case
literal|'\u0908'
case|:
case|case
literal|'\u0909'
case|:
case|case
literal|'\u090a'
case|:
case|case
literal|'\u090b'
case|:
case|case
literal|'\u090c'
case|:
case|case
literal|'\u090d'
case|:
case|case
literal|'\u090e'
case|:
case|case
literal|'\u090f'
case|:
case|case
literal|'\u0910'
case|:
case|case
literal|'\u0911'
case|:
case|case
literal|'\u0912'
case|:
case|case
literal|'\u0913'
case|:
case|case
literal|'\u0914'
case|:
case|case
literal|'\u0915'
case|:
case|case
literal|'\u0916'
case|:
case|case
literal|'\u0917'
case|:
case|case
literal|'\u0918'
case|:
case|case
literal|'\u0919'
case|:
case|case
literal|'\u091a'
case|:
case|case
literal|'\u091b'
case|:
case|case
literal|'\u091c'
case|:
case|case
literal|'\u091d'
case|:
case|case
literal|'\u091e'
case|:
case|case
literal|'\u091f'
case|:
case|case
literal|'\u0920'
case|:
case|case
literal|'\u0921'
case|:
case|case
literal|'\u0922'
case|:
case|case
literal|'\u0923'
case|:
case|case
literal|'\u0924'
case|:
case|case
literal|'\u0925'
case|:
case|case
literal|'\u0926'
case|:
case|case
literal|'\u0927'
case|:
case|case
literal|'\u0928'
case|:
case|case
literal|'\u0929'
case|:
case|case
literal|'\u092a'
case|:
case|case
literal|'\u092b'
case|:
case|case
literal|'\u092c'
case|:
case|case
literal|'\u092d'
case|:
case|case
literal|'\u092e'
case|:
case|case
literal|'\u092f'
case|:
case|case
literal|'\u0930'
case|:
case|case
literal|'\u0931'
case|:
case|case
literal|'\u0932'
case|:
case|case
literal|'\u0933'
case|:
case|case
literal|'\u0934'
case|:
case|case
literal|'\u0935'
case|:
case|case
literal|'\u0936'
case|:
case|case
literal|'\u0937'
case|:
case|case
literal|'\u0938'
case|:
case|case
literal|'\u0939'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0905'
argument_list|,
literal|'\u0939'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u093d'
case|:
block|{
name|match
argument_list|(
literal|'\u093d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0958'
case|:
case|case
literal|'\u0959'
case|:
case|case
literal|'\u095a'
case|:
case|case
literal|'\u095b'
case|:
case|case
literal|'\u095c'
case|:
case|case
literal|'\u095d'
case|:
case|case
literal|'\u095e'
case|:
case|case
literal|'\u095f'
case|:
case|case
literal|'\u0960'
case|:
case|case
literal|'\u0961'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0958'
argument_list|,
literal|'\u0961'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0985'
case|:
case|case
literal|'\u0986'
case|:
case|case
literal|'\u0987'
case|:
case|case
literal|'\u0988'
case|:
case|case
literal|'\u0989'
case|:
case|case
literal|'\u098a'
case|:
case|case
literal|'\u098b'
case|:
case|case
literal|'\u098c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0985'
argument_list|,
literal|'\u098c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u098f'
case|:
case|case
literal|'\u0990'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u098f'
argument_list|,
literal|'\u0990'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0993'
case|:
case|case
literal|'\u0994'
case|:
case|case
literal|'\u0995'
case|:
case|case
literal|'\u0996'
case|:
case|case
literal|'\u0997'
case|:
case|case
literal|'\u0998'
case|:
case|case
literal|'\u0999'
case|:
case|case
literal|'\u099a'
case|:
case|case
literal|'\u099b'
case|:
case|case
literal|'\u099c'
case|:
case|case
literal|'\u099d'
case|:
case|case
literal|'\u099e'
case|:
case|case
literal|'\u099f'
case|:
case|case
literal|'\u09a0'
case|:
case|case
literal|'\u09a1'
case|:
case|case
literal|'\u09a2'
case|:
case|case
literal|'\u09a3'
case|:
case|case
literal|'\u09a4'
case|:
case|case
literal|'\u09a5'
case|:
case|case
literal|'\u09a6'
case|:
case|case
literal|'\u09a7'
case|:
case|case
literal|'\u09a8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0993'
argument_list|,
literal|'\u09a8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09aa'
case|:
case|case
literal|'\u09ab'
case|:
case|case
literal|'\u09ac'
case|:
case|case
literal|'\u09ad'
case|:
case|case
literal|'\u09ae'
case|:
case|case
literal|'\u09af'
case|:
case|case
literal|'\u09b0'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09aa'
argument_list|,
literal|'\u09b0'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09b2'
case|:
block|{
name|match
argument_list|(
literal|'\u09b2'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09b6'
case|:
case|case
literal|'\u09b7'
case|:
case|case
literal|'\u09b8'
case|:
case|case
literal|'\u09b9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09b6'
argument_list|,
literal|'\u09b9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09dc'
case|:
case|case
literal|'\u09dd'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09dc'
argument_list|,
literal|'\u09dd'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09df'
case|:
case|case
literal|'\u09e0'
case|:
case|case
literal|'\u09e1'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09df'
argument_list|,
literal|'\u09e1'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09f0'
case|:
case|case
literal|'\u09f1'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09f0'
argument_list|,
literal|'\u09f1'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a05'
case|:
case|case
literal|'\u0a06'
case|:
case|case
literal|'\u0a07'
case|:
case|case
literal|'\u0a08'
case|:
case|case
literal|'\u0a09'
case|:
case|case
literal|'\u0a0a'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a05'
argument_list|,
literal|'\u0a0a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a0f'
case|:
case|case
literal|'\u0a10'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a0f'
argument_list|,
literal|'\u0a10'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a13'
case|:
case|case
literal|'\u0a14'
case|:
case|case
literal|'\u0a15'
case|:
case|case
literal|'\u0a16'
case|:
case|case
literal|'\u0a17'
case|:
case|case
literal|'\u0a18'
case|:
case|case
literal|'\u0a19'
case|:
case|case
literal|'\u0a1a'
case|:
case|case
literal|'\u0a1b'
case|:
case|case
literal|'\u0a1c'
case|:
case|case
literal|'\u0a1d'
case|:
case|case
literal|'\u0a1e'
case|:
case|case
literal|'\u0a1f'
case|:
case|case
literal|'\u0a20'
case|:
case|case
literal|'\u0a21'
case|:
case|case
literal|'\u0a22'
case|:
case|case
literal|'\u0a23'
case|:
case|case
literal|'\u0a24'
case|:
case|case
literal|'\u0a25'
case|:
case|case
literal|'\u0a26'
case|:
case|case
literal|'\u0a27'
case|:
case|case
literal|'\u0a28'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a13'
argument_list|,
literal|'\u0a28'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a2a'
case|:
case|case
literal|'\u0a2b'
case|:
case|case
literal|'\u0a2c'
case|:
case|case
literal|'\u0a2d'
case|:
case|case
literal|'\u0a2e'
case|:
case|case
literal|'\u0a2f'
case|:
case|case
literal|'\u0a30'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a2a'
argument_list|,
literal|'\u0a30'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a32'
case|:
case|case
literal|'\u0a33'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a32'
argument_list|,
literal|'\u0a33'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a35'
case|:
case|case
literal|'\u0a36'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a35'
argument_list|,
literal|'\u0a36'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a38'
case|:
case|case
literal|'\u0a39'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a38'
argument_list|,
literal|'\u0a39'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a59'
case|:
case|case
literal|'\u0a5a'
case|:
case|case
literal|'\u0a5b'
case|:
case|case
literal|'\u0a5c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a59'
argument_list|,
literal|'\u0a5c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a5e'
case|:
block|{
name|match
argument_list|(
literal|'\u0a5e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a72'
case|:
case|case
literal|'\u0a73'
case|:
case|case
literal|'\u0a74'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a72'
argument_list|,
literal|'\u0a74'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a85'
case|:
case|case
literal|'\u0a86'
case|:
case|case
literal|'\u0a87'
case|:
case|case
literal|'\u0a88'
case|:
case|case
literal|'\u0a89'
case|:
case|case
literal|'\u0a8a'
case|:
case|case
literal|'\u0a8b'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a85'
argument_list|,
literal|'\u0a8b'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a8d'
case|:
block|{
name|match
argument_list|(
literal|'\u0a8d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a8f'
case|:
case|case
literal|'\u0a90'
case|:
case|case
literal|'\u0a91'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a8f'
argument_list|,
literal|'\u0a91'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a93'
case|:
case|case
literal|'\u0a94'
case|:
case|case
literal|'\u0a95'
case|:
case|case
literal|'\u0a96'
case|:
case|case
literal|'\u0a97'
case|:
case|case
literal|'\u0a98'
case|:
case|case
literal|'\u0a99'
case|:
case|case
literal|'\u0a9a'
case|:
case|case
literal|'\u0a9b'
case|:
case|case
literal|'\u0a9c'
case|:
case|case
literal|'\u0a9d'
case|:
case|case
literal|'\u0a9e'
case|:
case|case
literal|'\u0a9f'
case|:
case|case
literal|'\u0aa0'
case|:
case|case
literal|'\u0aa1'
case|:
case|case
literal|'\u0aa2'
case|:
case|case
literal|'\u0aa3'
case|:
case|case
literal|'\u0aa4'
case|:
case|case
literal|'\u0aa5'
case|:
case|case
literal|'\u0aa6'
case|:
case|case
literal|'\u0aa7'
case|:
case|case
literal|'\u0aa8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a93'
argument_list|,
literal|'\u0aa8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0aaa'
case|:
case|case
literal|'\u0aab'
case|:
case|case
literal|'\u0aac'
case|:
case|case
literal|'\u0aad'
case|:
case|case
literal|'\u0aae'
case|:
case|case
literal|'\u0aaf'
case|:
case|case
literal|'\u0ab0'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0aaa'
argument_list|,
literal|'\u0ab0'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ab2'
case|:
case|case
literal|'\u0ab3'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ab2'
argument_list|,
literal|'\u0ab3'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ab5'
case|:
case|case
literal|'\u0ab6'
case|:
case|case
literal|'\u0ab7'
case|:
case|case
literal|'\u0ab8'
case|:
case|case
literal|'\u0ab9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ab5'
argument_list|,
literal|'\u0ab9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0abd'
case|:
block|{
name|match
argument_list|(
literal|'\u0abd'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ae0'
case|:
block|{
name|match
argument_list|(
literal|'\u0ae0'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b05'
case|:
case|case
literal|'\u0b06'
case|:
case|case
literal|'\u0b07'
case|:
case|case
literal|'\u0b08'
case|:
case|case
literal|'\u0b09'
case|:
case|case
literal|'\u0b0a'
case|:
case|case
literal|'\u0b0b'
case|:
case|case
literal|'\u0b0c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b05'
argument_list|,
literal|'\u0b0c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b0f'
case|:
case|case
literal|'\u0b10'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b0f'
argument_list|,
literal|'\u0b10'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b13'
case|:
case|case
literal|'\u0b14'
case|:
case|case
literal|'\u0b15'
case|:
case|case
literal|'\u0b16'
case|:
case|case
literal|'\u0b17'
case|:
case|case
literal|'\u0b18'
case|:
case|case
literal|'\u0b19'
case|:
case|case
literal|'\u0b1a'
case|:
case|case
literal|'\u0b1b'
case|:
case|case
literal|'\u0b1c'
case|:
case|case
literal|'\u0b1d'
case|:
case|case
literal|'\u0b1e'
case|:
case|case
literal|'\u0b1f'
case|:
case|case
literal|'\u0b20'
case|:
case|case
literal|'\u0b21'
case|:
case|case
literal|'\u0b22'
case|:
case|case
literal|'\u0b23'
case|:
case|case
literal|'\u0b24'
case|:
case|case
literal|'\u0b25'
case|:
case|case
literal|'\u0b26'
case|:
case|case
literal|'\u0b27'
case|:
case|case
literal|'\u0b28'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b13'
argument_list|,
literal|'\u0b28'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b2a'
case|:
case|case
literal|'\u0b2b'
case|:
case|case
literal|'\u0b2c'
case|:
case|case
literal|'\u0b2d'
case|:
case|case
literal|'\u0b2e'
case|:
case|case
literal|'\u0b2f'
case|:
case|case
literal|'\u0b30'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b2a'
argument_list|,
literal|'\u0b30'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b32'
case|:
case|case
literal|'\u0b33'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b32'
argument_list|,
literal|'\u0b33'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b36'
case|:
case|case
literal|'\u0b37'
case|:
case|case
literal|'\u0b38'
case|:
case|case
literal|'\u0b39'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b36'
argument_list|,
literal|'\u0b39'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b3d'
case|:
block|{
name|match
argument_list|(
literal|'\u0b3d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b5c'
case|:
case|case
literal|'\u0b5d'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b5c'
argument_list|,
literal|'\u0b5d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b5f'
case|:
case|case
literal|'\u0b60'
case|:
case|case
literal|'\u0b61'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b5f'
argument_list|,
literal|'\u0b61'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b85'
case|:
case|case
literal|'\u0b86'
case|:
case|case
literal|'\u0b87'
case|:
case|case
literal|'\u0b88'
case|:
case|case
literal|'\u0b89'
case|:
case|case
literal|'\u0b8a'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b85'
argument_list|,
literal|'\u0b8a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b8e'
case|:
case|case
literal|'\u0b8f'
case|:
case|case
literal|'\u0b90'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b8e'
argument_list|,
literal|'\u0b90'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b92'
case|:
case|case
literal|'\u0b93'
case|:
case|case
literal|'\u0b94'
case|:
case|case
literal|'\u0b95'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b92'
argument_list|,
literal|'\u0b95'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b99'
case|:
case|case
literal|'\u0b9a'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b99'
argument_list|,
literal|'\u0b9a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b9c'
case|:
block|{
name|match
argument_list|(
literal|'\u0b9c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b9e'
case|:
case|case
literal|'\u0b9f'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b9e'
argument_list|,
literal|'\u0b9f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ba3'
case|:
case|case
literal|'\u0ba4'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ba3'
argument_list|,
literal|'\u0ba4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ba8'
case|:
case|case
literal|'\u0ba9'
case|:
case|case
literal|'\u0baa'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ba8'
argument_list|,
literal|'\u0baa'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0bae'
case|:
case|case
literal|'\u0baf'
case|:
case|case
literal|'\u0bb0'
case|:
case|case
literal|'\u0bb1'
case|:
case|case
literal|'\u0bb2'
case|:
case|case
literal|'\u0bb3'
case|:
case|case
literal|'\u0bb4'
case|:
case|case
literal|'\u0bb5'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0bae'
argument_list|,
literal|'\u0bb5'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0bb7'
case|:
case|case
literal|'\u0bb8'
case|:
case|case
literal|'\u0bb9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0bb7'
argument_list|,
literal|'\u0bb9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c05'
case|:
case|case
literal|'\u0c06'
case|:
case|case
literal|'\u0c07'
case|:
case|case
literal|'\u0c08'
case|:
case|case
literal|'\u0c09'
case|:
case|case
literal|'\u0c0a'
case|:
case|case
literal|'\u0c0b'
case|:
case|case
literal|'\u0c0c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c05'
argument_list|,
literal|'\u0c0c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c0e'
case|:
case|case
literal|'\u0c0f'
case|:
case|case
literal|'\u0c10'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c0e'
argument_list|,
literal|'\u0c10'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c12'
case|:
case|case
literal|'\u0c13'
case|:
case|case
literal|'\u0c14'
case|:
case|case
literal|'\u0c15'
case|:
case|case
literal|'\u0c16'
case|:
case|case
literal|'\u0c17'
case|:
case|case
literal|'\u0c18'
case|:
case|case
literal|'\u0c19'
case|:
case|case
literal|'\u0c1a'
case|:
case|case
literal|'\u0c1b'
case|:
case|case
literal|'\u0c1c'
case|:
case|case
literal|'\u0c1d'
case|:
case|case
literal|'\u0c1e'
case|:
case|case
literal|'\u0c1f'
case|:
case|case
literal|'\u0c20'
case|:
case|case
literal|'\u0c21'
case|:
case|case
literal|'\u0c22'
case|:
case|case
literal|'\u0c23'
case|:
case|case
literal|'\u0c24'
case|:
case|case
literal|'\u0c25'
case|:
case|case
literal|'\u0c26'
case|:
case|case
literal|'\u0c27'
case|:
case|case
literal|'\u0c28'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c12'
argument_list|,
literal|'\u0c28'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c2a'
case|:
case|case
literal|'\u0c2b'
case|:
case|case
literal|'\u0c2c'
case|:
case|case
literal|'\u0c2d'
case|:
case|case
literal|'\u0c2e'
case|:
case|case
literal|'\u0c2f'
case|:
case|case
literal|'\u0c30'
case|:
case|case
literal|'\u0c31'
case|:
case|case
literal|'\u0c32'
case|:
case|case
literal|'\u0c33'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c2a'
argument_list|,
literal|'\u0c33'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c35'
case|:
case|case
literal|'\u0c36'
case|:
case|case
literal|'\u0c37'
case|:
case|case
literal|'\u0c38'
case|:
case|case
literal|'\u0c39'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c35'
argument_list|,
literal|'\u0c39'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c60'
case|:
case|case
literal|'\u0c61'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c60'
argument_list|,
literal|'\u0c61'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c85'
case|:
case|case
literal|'\u0c86'
case|:
case|case
literal|'\u0c87'
case|:
case|case
literal|'\u0c88'
case|:
case|case
literal|'\u0c89'
case|:
case|case
literal|'\u0c8a'
case|:
case|case
literal|'\u0c8b'
case|:
case|case
literal|'\u0c8c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c85'
argument_list|,
literal|'\u0c8c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c8e'
case|:
case|case
literal|'\u0c8f'
case|:
case|case
literal|'\u0c90'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c8e'
argument_list|,
literal|'\u0c90'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c92'
case|:
case|case
literal|'\u0c93'
case|:
case|case
literal|'\u0c94'
case|:
case|case
literal|'\u0c95'
case|:
case|case
literal|'\u0c96'
case|:
case|case
literal|'\u0c97'
case|:
case|case
literal|'\u0c98'
case|:
case|case
literal|'\u0c99'
case|:
case|case
literal|'\u0c9a'
case|:
case|case
literal|'\u0c9b'
case|:
case|case
literal|'\u0c9c'
case|:
case|case
literal|'\u0c9d'
case|:
case|case
literal|'\u0c9e'
case|:
case|case
literal|'\u0c9f'
case|:
case|case
literal|'\u0ca0'
case|:
case|case
literal|'\u0ca1'
case|:
case|case
literal|'\u0ca2'
case|:
case|case
literal|'\u0ca3'
case|:
case|case
literal|'\u0ca4'
case|:
case|case
literal|'\u0ca5'
case|:
case|case
literal|'\u0ca6'
case|:
case|case
literal|'\u0ca7'
case|:
case|case
literal|'\u0ca8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c92'
argument_list|,
literal|'\u0ca8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0caa'
case|:
case|case
literal|'\u0cab'
case|:
case|case
literal|'\u0cac'
case|:
case|case
literal|'\u0cad'
case|:
case|case
literal|'\u0cae'
case|:
case|case
literal|'\u0caf'
case|:
case|case
literal|'\u0cb0'
case|:
case|case
literal|'\u0cb1'
case|:
case|case
literal|'\u0cb2'
case|:
case|case
literal|'\u0cb3'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0caa'
argument_list|,
literal|'\u0cb3'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0cb5'
case|:
case|case
literal|'\u0cb6'
case|:
case|case
literal|'\u0cb7'
case|:
case|case
literal|'\u0cb8'
case|:
case|case
literal|'\u0cb9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0cb5'
argument_list|,
literal|'\u0cb9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0cde'
case|:
block|{
name|match
argument_list|(
literal|'\u0cde'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ce0'
case|:
case|case
literal|'\u0ce1'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ce0'
argument_list|,
literal|'\u0ce1'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d05'
case|:
case|case
literal|'\u0d06'
case|:
case|case
literal|'\u0d07'
case|:
case|case
literal|'\u0d08'
case|:
case|case
literal|'\u0d09'
case|:
case|case
literal|'\u0d0a'
case|:
case|case
literal|'\u0d0b'
case|:
case|case
literal|'\u0d0c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d05'
argument_list|,
literal|'\u0d0c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d0e'
case|:
case|case
literal|'\u0d0f'
case|:
case|case
literal|'\u0d10'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d0e'
argument_list|,
literal|'\u0d10'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d12'
case|:
case|case
literal|'\u0d13'
case|:
case|case
literal|'\u0d14'
case|:
case|case
literal|'\u0d15'
case|:
case|case
literal|'\u0d16'
case|:
case|case
literal|'\u0d17'
case|:
case|case
literal|'\u0d18'
case|:
case|case
literal|'\u0d19'
case|:
case|case
literal|'\u0d1a'
case|:
case|case
literal|'\u0d1b'
case|:
case|case
literal|'\u0d1c'
case|:
case|case
literal|'\u0d1d'
case|:
case|case
literal|'\u0d1e'
case|:
case|case
literal|'\u0d1f'
case|:
case|case
literal|'\u0d20'
case|:
case|case
literal|'\u0d21'
case|:
case|case
literal|'\u0d22'
case|:
case|case
literal|'\u0d23'
case|:
case|case
literal|'\u0d24'
case|:
case|case
literal|'\u0d25'
case|:
case|case
literal|'\u0d26'
case|:
case|case
literal|'\u0d27'
case|:
case|case
literal|'\u0d28'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d12'
argument_list|,
literal|'\u0d28'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d2a'
case|:
case|case
literal|'\u0d2b'
case|:
case|case
literal|'\u0d2c'
case|:
case|case
literal|'\u0d2d'
case|:
case|case
literal|'\u0d2e'
case|:
case|case
literal|'\u0d2f'
case|:
case|case
literal|'\u0d30'
case|:
case|case
literal|'\u0d31'
case|:
case|case
literal|'\u0d32'
case|:
case|case
literal|'\u0d33'
case|:
case|case
literal|'\u0d34'
case|:
case|case
literal|'\u0d35'
case|:
case|case
literal|'\u0d36'
case|:
case|case
literal|'\u0d37'
case|:
case|case
literal|'\u0d38'
case|:
case|case
literal|'\u0d39'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d2a'
argument_list|,
literal|'\u0d39'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d60'
case|:
case|case
literal|'\u0d61'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d60'
argument_list|,
literal|'\u0d61'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e01'
case|:
case|case
literal|'\u0e02'
case|:
case|case
literal|'\u0e03'
case|:
case|case
literal|'\u0e04'
case|:
case|case
literal|'\u0e05'
case|:
case|case
literal|'\u0e06'
case|:
case|case
literal|'\u0e07'
case|:
case|case
literal|'\u0e08'
case|:
case|case
literal|'\u0e09'
case|:
case|case
literal|'\u0e0a'
case|:
case|case
literal|'\u0e0b'
case|:
case|case
literal|'\u0e0c'
case|:
case|case
literal|'\u0e0d'
case|:
case|case
literal|'\u0e0e'
case|:
case|case
literal|'\u0e0f'
case|:
case|case
literal|'\u0e10'
case|:
case|case
literal|'\u0e11'
case|:
case|case
literal|'\u0e12'
case|:
case|case
literal|'\u0e13'
case|:
case|case
literal|'\u0e14'
case|:
case|case
literal|'\u0e15'
case|:
case|case
literal|'\u0e16'
case|:
case|case
literal|'\u0e17'
case|:
case|case
literal|'\u0e18'
case|:
case|case
literal|'\u0e19'
case|:
case|case
literal|'\u0e1a'
case|:
case|case
literal|'\u0e1b'
case|:
case|case
literal|'\u0e1c'
case|:
case|case
literal|'\u0e1d'
case|:
case|case
literal|'\u0e1e'
case|:
case|case
literal|'\u0e1f'
case|:
case|case
literal|'\u0e20'
case|:
case|case
literal|'\u0e21'
case|:
case|case
literal|'\u0e22'
case|:
case|case
literal|'\u0e23'
case|:
case|case
literal|'\u0e24'
case|:
case|case
literal|'\u0e25'
case|:
case|case
literal|'\u0e26'
case|:
case|case
literal|'\u0e27'
case|:
case|case
literal|'\u0e28'
case|:
case|case
literal|'\u0e29'
case|:
case|case
literal|'\u0e2a'
case|:
case|case
literal|'\u0e2b'
case|:
case|case
literal|'\u0e2c'
case|:
case|case
literal|'\u0e2d'
case|:
case|case
literal|'\u0e2e'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e01'
argument_list|,
literal|'\u0e2e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e30'
case|:
block|{
name|match
argument_list|(
literal|'\u0e30'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e32'
case|:
case|case
literal|'\u0e33'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e32'
argument_list|,
literal|'\u0e33'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e40'
case|:
case|case
literal|'\u0e41'
case|:
case|case
literal|'\u0e42'
case|:
case|case
literal|'\u0e43'
case|:
case|case
literal|'\u0e44'
case|:
case|case
literal|'\u0e45'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e40'
argument_list|,
literal|'\u0e45'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e81'
case|:
case|case
literal|'\u0e82'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e81'
argument_list|,
literal|'\u0e82'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e84'
case|:
block|{
name|match
argument_list|(
literal|'\u0e84'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e87'
case|:
case|case
literal|'\u0e88'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e87'
argument_list|,
literal|'\u0e88'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e8a'
case|:
block|{
name|match
argument_list|(
literal|'\u0e8a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e8d'
case|:
block|{
name|match
argument_list|(
literal|'\u0e8d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e94'
case|:
case|case
literal|'\u0e95'
case|:
case|case
literal|'\u0e96'
case|:
case|case
literal|'\u0e97'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e94'
argument_list|,
literal|'\u0e97'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e99'
case|:
case|case
literal|'\u0e9a'
case|:
case|case
literal|'\u0e9b'
case|:
case|case
literal|'\u0e9c'
case|:
case|case
literal|'\u0e9d'
case|:
case|case
literal|'\u0e9e'
case|:
case|case
literal|'\u0e9f'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e99'
argument_list|,
literal|'\u0e9f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ea1'
case|:
case|case
literal|'\u0ea2'
case|:
case|case
literal|'\u0ea3'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ea1'
argument_list|,
literal|'\u0ea3'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ea5'
case|:
block|{
name|match
argument_list|(
literal|'\u0ea5'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ea7'
case|:
block|{
name|match
argument_list|(
literal|'\u0ea7'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0eaa'
case|:
case|case
literal|'\u0eab'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0eaa'
argument_list|,
literal|'\u0eab'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ead'
case|:
case|case
literal|'\u0eae'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ead'
argument_list|,
literal|'\u0eae'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0eb0'
case|:
block|{
name|match
argument_list|(
literal|'\u0eb0'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0eb2'
case|:
case|case
literal|'\u0eb3'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0eb2'
argument_list|,
literal|'\u0eb3'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ebd'
case|:
block|{
name|match
argument_list|(
literal|'\u0ebd'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ec0'
case|:
case|case
literal|'\u0ec1'
case|:
case|case
literal|'\u0ec2'
case|:
case|case
literal|'\u0ec3'
case|:
case|case
literal|'\u0ec4'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ec0'
argument_list|,
literal|'\u0ec4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f40'
case|:
case|case
literal|'\u0f41'
case|:
case|case
literal|'\u0f42'
case|:
case|case
literal|'\u0f43'
case|:
case|case
literal|'\u0f44'
case|:
case|case
literal|'\u0f45'
case|:
case|case
literal|'\u0f46'
case|:
case|case
literal|'\u0f47'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0f40'
argument_list|,
literal|'\u0f47'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f49'
case|:
case|case
literal|'\u0f4a'
case|:
case|case
literal|'\u0f4b'
case|:
case|case
literal|'\u0f4c'
case|:
case|case
literal|'\u0f4d'
case|:
case|case
literal|'\u0f4e'
case|:
case|case
literal|'\u0f4f'
case|:
case|case
literal|'\u0f50'
case|:
case|case
literal|'\u0f51'
case|:
case|case
literal|'\u0f52'
case|:
case|case
literal|'\u0f53'
case|:
case|case
literal|'\u0f54'
case|:
case|case
literal|'\u0f55'
case|:
case|case
literal|'\u0f56'
case|:
case|case
literal|'\u0f57'
case|:
case|case
literal|'\u0f58'
case|:
case|case
literal|'\u0f59'
case|:
case|case
literal|'\u0f5a'
case|:
case|case
literal|'\u0f5b'
case|:
case|case
literal|'\u0f5c'
case|:
case|case
literal|'\u0f5d'
case|:
case|case
literal|'\u0f5e'
case|:
case|case
literal|'\u0f5f'
case|:
case|case
literal|'\u0f60'
case|:
case|case
literal|'\u0f61'
case|:
case|case
literal|'\u0f62'
case|:
case|case
literal|'\u0f63'
case|:
case|case
literal|'\u0f64'
case|:
case|case
literal|'\u0f65'
case|:
case|case
literal|'\u0f66'
case|:
case|case
literal|'\u0f67'
case|:
case|case
literal|'\u0f68'
case|:
case|case
literal|'\u0f69'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0f49'
argument_list|,
literal|'\u0f69'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u10a0'
case|:
case|case
literal|'\u10a1'
case|:
case|case
literal|'\u10a2'
case|:
case|case
literal|'\u10a3'
case|:
case|case
literal|'\u10a4'
case|:
case|case
literal|'\u10a5'
case|:
case|case
literal|'\u10a6'
case|:
case|case
literal|'\u10a7'
case|:
case|case
literal|'\u10a8'
case|:
case|case
literal|'\u10a9'
case|:
case|case
literal|'\u10aa'
case|:
case|case
literal|'\u10ab'
case|:
case|case
literal|'\u10ac'
case|:
case|case
literal|'\u10ad'
case|:
case|case
literal|'\u10ae'
case|:
case|case
literal|'\u10af'
case|:
case|case
literal|'\u10b0'
case|:
case|case
literal|'\u10b1'
case|:
case|case
literal|'\u10b2'
case|:
case|case
literal|'\u10b3'
case|:
case|case
literal|'\u10b4'
case|:
case|case
literal|'\u10b5'
case|:
case|case
literal|'\u10b6'
case|:
case|case
literal|'\u10b7'
case|:
case|case
literal|'\u10b8'
case|:
case|case
literal|'\u10b9'
case|:
case|case
literal|'\u10ba'
case|:
case|case
literal|'\u10bb'
case|:
case|case
literal|'\u10bc'
case|:
case|case
literal|'\u10bd'
case|:
case|case
literal|'\u10be'
case|:
case|case
literal|'\u10bf'
case|:
case|case
literal|'\u10c0'
case|:
case|case
literal|'\u10c1'
case|:
case|case
literal|'\u10c2'
case|:
case|case
literal|'\u10c3'
case|:
case|case
literal|'\u10c4'
case|:
case|case
literal|'\u10c5'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u10a0'
argument_list|,
literal|'\u10c5'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u10d0'
case|:
case|case
literal|'\u10d1'
case|:
case|case
literal|'\u10d2'
case|:
case|case
literal|'\u10d3'
case|:
case|case
literal|'\u10d4'
case|:
case|case
literal|'\u10d5'
case|:
case|case
literal|'\u10d6'
case|:
case|case
literal|'\u10d7'
case|:
case|case
literal|'\u10d8'
case|:
case|case
literal|'\u10d9'
case|:
case|case
literal|'\u10da'
case|:
case|case
literal|'\u10db'
case|:
case|case
literal|'\u10dc'
case|:
case|case
literal|'\u10dd'
case|:
case|case
literal|'\u10de'
case|:
case|case
literal|'\u10df'
case|:
case|case
literal|'\u10e0'
case|:
case|case
literal|'\u10e1'
case|:
case|case
literal|'\u10e2'
case|:
case|case
literal|'\u10e3'
case|:
case|case
literal|'\u10e4'
case|:
case|case
literal|'\u10e5'
case|:
case|case
literal|'\u10e6'
case|:
case|case
literal|'\u10e7'
case|:
case|case
literal|'\u10e8'
case|:
case|case
literal|'\u10e9'
case|:
case|case
literal|'\u10ea'
case|:
case|case
literal|'\u10eb'
case|:
case|case
literal|'\u10ec'
case|:
case|case
literal|'\u10ed'
case|:
case|case
literal|'\u10ee'
case|:
case|case
literal|'\u10ef'
case|:
case|case
literal|'\u10f0'
case|:
case|case
literal|'\u10f1'
case|:
case|case
literal|'\u10f2'
case|:
case|case
literal|'\u10f3'
case|:
case|case
literal|'\u10f4'
case|:
case|case
literal|'\u10f5'
case|:
case|case
literal|'\u10f6'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u10d0'
argument_list|,
literal|'\u10f6'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1100'
case|:
block|{
name|match
argument_list|(
literal|'\u1100'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1102'
case|:
case|case
literal|'\u1103'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1102'
argument_list|,
literal|'\u1103'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1105'
case|:
case|case
literal|'\u1106'
case|:
case|case
literal|'\u1107'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1105'
argument_list|,
literal|'\u1107'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1109'
case|:
block|{
name|match
argument_list|(
literal|'\u1109'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u110b'
case|:
case|case
literal|'\u110c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u110b'
argument_list|,
literal|'\u110c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u110e'
case|:
case|case
literal|'\u110f'
case|:
case|case
literal|'\u1110'
case|:
case|case
literal|'\u1111'
case|:
case|case
literal|'\u1112'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u110e'
argument_list|,
literal|'\u1112'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u113c'
case|:
block|{
name|match
argument_list|(
literal|'\u113c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u113e'
case|:
block|{
name|match
argument_list|(
literal|'\u113e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1140'
case|:
block|{
name|match
argument_list|(
literal|'\u1140'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u114c'
case|:
block|{
name|match
argument_list|(
literal|'\u114c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u114e'
case|:
block|{
name|match
argument_list|(
literal|'\u114e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1150'
case|:
block|{
name|match
argument_list|(
literal|'\u1150'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1154'
case|:
case|case
literal|'\u1155'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1154'
argument_list|,
literal|'\u1155'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1159'
case|:
block|{
name|match
argument_list|(
literal|'\u1159'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u115f'
case|:
case|case
literal|'\u1160'
case|:
case|case
literal|'\u1161'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u115f'
argument_list|,
literal|'\u1161'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1163'
case|:
block|{
name|match
argument_list|(
literal|'\u1163'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1165'
case|:
block|{
name|match
argument_list|(
literal|'\u1165'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1167'
case|:
block|{
name|match
argument_list|(
literal|'\u1167'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1169'
case|:
block|{
name|match
argument_list|(
literal|'\u1169'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u116d'
case|:
case|case
literal|'\u116e'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u116d'
argument_list|,
literal|'\u116e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1172'
case|:
case|case
literal|'\u1173'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1172'
argument_list|,
literal|'\u1173'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1175'
case|:
block|{
name|match
argument_list|(
literal|'\u1175'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u119e'
case|:
block|{
name|match
argument_list|(
literal|'\u119e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u11a8'
case|:
block|{
name|match
argument_list|(
literal|'\u11a8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u11ab'
case|:
block|{
name|match
argument_list|(
literal|'\u11ab'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u11ae'
case|:
case|case
literal|'\u11af'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u11ae'
argument_list|,
literal|'\u11af'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u11b7'
case|:
case|case
literal|'\u11b8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u11b7'
argument_list|,
literal|'\u11b8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u11ba'
case|:
block|{
name|match
argument_list|(
literal|'\u11ba'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u11bc'
case|:
case|case
literal|'\u11bd'
case|:
case|case
literal|'\u11be'
case|:
case|case
literal|'\u11bf'
case|:
case|case
literal|'\u11c0'
case|:
case|case
literal|'\u11c1'
case|:
case|case
literal|'\u11c2'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u11bc'
argument_list|,
literal|'\u11c2'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u11eb'
case|:
block|{
name|match
argument_list|(
literal|'\u11eb'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u11f0'
case|:
block|{
name|match
argument_list|(
literal|'\u11f0'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u11f9'
case|:
block|{
name|match
argument_list|(
literal|'\u11f9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1ea0'
case|:
case|case
literal|'\u1ea1'
case|:
case|case
literal|'\u1ea2'
case|:
case|case
literal|'\u1ea3'
case|:
case|case
literal|'\u1ea4'
case|:
case|case
literal|'\u1ea5'
case|:
case|case
literal|'\u1ea6'
case|:
case|case
literal|'\u1ea7'
case|:
case|case
literal|'\u1ea8'
case|:
case|case
literal|'\u1ea9'
case|:
case|case
literal|'\u1eaa'
case|:
case|case
literal|'\u1eab'
case|:
case|case
literal|'\u1eac'
case|:
case|case
literal|'\u1ead'
case|:
case|case
literal|'\u1eae'
case|:
case|case
literal|'\u1eaf'
case|:
case|case
literal|'\u1eb0'
case|:
case|case
literal|'\u1eb1'
case|:
case|case
literal|'\u1eb2'
case|:
case|case
literal|'\u1eb3'
case|:
case|case
literal|'\u1eb4'
case|:
case|case
literal|'\u1eb5'
case|:
case|case
literal|'\u1eb6'
case|:
case|case
literal|'\u1eb7'
case|:
case|case
literal|'\u1eb8'
case|:
case|case
literal|'\u1eb9'
case|:
case|case
literal|'\u1eba'
case|:
case|case
literal|'\u1ebb'
case|:
case|case
literal|'\u1ebc'
case|:
case|case
literal|'\u1ebd'
case|:
case|case
literal|'\u1ebe'
case|:
case|case
literal|'\u1ebf'
case|:
case|case
literal|'\u1ec0'
case|:
case|case
literal|'\u1ec1'
case|:
case|case
literal|'\u1ec2'
case|:
case|case
literal|'\u1ec3'
case|:
case|case
literal|'\u1ec4'
case|:
case|case
literal|'\u1ec5'
case|:
case|case
literal|'\u1ec6'
case|:
case|case
literal|'\u1ec7'
case|:
case|case
literal|'\u1ec8'
case|:
case|case
literal|'\u1ec9'
case|:
case|case
literal|'\u1eca'
case|:
case|case
literal|'\u1ecb'
case|:
case|case
literal|'\u1ecc'
case|:
case|case
literal|'\u1ecd'
case|:
case|case
literal|'\u1ece'
case|:
case|case
literal|'\u1ecf'
case|:
case|case
literal|'\u1ed0'
case|:
case|case
literal|'\u1ed1'
case|:
case|case
literal|'\u1ed2'
case|:
case|case
literal|'\u1ed3'
case|:
case|case
literal|'\u1ed4'
case|:
case|case
literal|'\u1ed5'
case|:
case|case
literal|'\u1ed6'
case|:
case|case
literal|'\u1ed7'
case|:
case|case
literal|'\u1ed8'
case|:
case|case
literal|'\u1ed9'
case|:
case|case
literal|'\u1eda'
case|:
case|case
literal|'\u1edb'
case|:
case|case
literal|'\u1edc'
case|:
case|case
literal|'\u1edd'
case|:
case|case
literal|'\u1ede'
case|:
case|case
literal|'\u1edf'
case|:
case|case
literal|'\u1ee0'
case|:
case|case
literal|'\u1ee1'
case|:
case|case
literal|'\u1ee2'
case|:
case|case
literal|'\u1ee3'
case|:
case|case
literal|'\u1ee4'
case|:
case|case
literal|'\u1ee5'
case|:
case|case
literal|'\u1ee6'
case|:
case|case
literal|'\u1ee7'
case|:
case|case
literal|'\u1ee8'
case|:
case|case
literal|'\u1ee9'
case|:
case|case
literal|'\u1eea'
case|:
case|case
literal|'\u1eeb'
case|:
case|case
literal|'\u1eec'
case|:
case|case
literal|'\u1eed'
case|:
case|case
literal|'\u1eee'
case|:
case|case
literal|'\u1eef'
case|:
case|case
literal|'\u1ef0'
case|:
case|case
literal|'\u1ef1'
case|:
case|case
literal|'\u1ef2'
case|:
case|case
literal|'\u1ef3'
case|:
case|case
literal|'\u1ef4'
case|:
case|case
literal|'\u1ef5'
case|:
case|case
literal|'\u1ef6'
case|:
case|case
literal|'\u1ef7'
case|:
case|case
literal|'\u1ef8'
case|:
case|case
literal|'\u1ef9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1ea0'
argument_list|,
literal|'\u1ef9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f00'
case|:
case|case
literal|'\u1f01'
case|:
case|case
literal|'\u1f02'
case|:
case|case
literal|'\u1f03'
case|:
case|case
literal|'\u1f04'
case|:
case|case
literal|'\u1f05'
case|:
case|case
literal|'\u1f06'
case|:
case|case
literal|'\u1f07'
case|:
case|case
literal|'\u1f08'
case|:
case|case
literal|'\u1f09'
case|:
case|case
literal|'\u1f0a'
case|:
case|case
literal|'\u1f0b'
case|:
case|case
literal|'\u1f0c'
case|:
case|case
literal|'\u1f0d'
case|:
case|case
literal|'\u1f0e'
case|:
case|case
literal|'\u1f0f'
case|:
case|case
literal|'\u1f10'
case|:
case|case
literal|'\u1f11'
case|:
case|case
literal|'\u1f12'
case|:
case|case
literal|'\u1f13'
case|:
case|case
literal|'\u1f14'
case|:
case|case
literal|'\u1f15'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1f00'
argument_list|,
literal|'\u1f15'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f18'
case|:
case|case
literal|'\u1f19'
case|:
case|case
literal|'\u1f1a'
case|:
case|case
literal|'\u1f1b'
case|:
case|case
literal|'\u1f1c'
case|:
case|case
literal|'\u1f1d'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1f18'
argument_list|,
literal|'\u1f1d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f20'
case|:
case|case
literal|'\u1f21'
case|:
case|case
literal|'\u1f22'
case|:
case|case
literal|'\u1f23'
case|:
case|case
literal|'\u1f24'
case|:
case|case
literal|'\u1f25'
case|:
case|case
literal|'\u1f26'
case|:
case|case
literal|'\u1f27'
case|:
case|case
literal|'\u1f28'
case|:
case|case
literal|'\u1f29'
case|:
case|case
literal|'\u1f2a'
case|:
case|case
literal|'\u1f2b'
case|:
case|case
literal|'\u1f2c'
case|:
case|case
literal|'\u1f2d'
case|:
case|case
literal|'\u1f2e'
case|:
case|case
literal|'\u1f2f'
case|:
case|case
literal|'\u1f30'
case|:
case|case
literal|'\u1f31'
case|:
case|case
literal|'\u1f32'
case|:
case|case
literal|'\u1f33'
case|:
case|case
literal|'\u1f34'
case|:
case|case
literal|'\u1f35'
case|:
case|case
literal|'\u1f36'
case|:
case|case
literal|'\u1f37'
case|:
case|case
literal|'\u1f38'
case|:
case|case
literal|'\u1f39'
case|:
case|case
literal|'\u1f3a'
case|:
case|case
literal|'\u1f3b'
case|:
case|case
literal|'\u1f3c'
case|:
case|case
literal|'\u1f3d'
case|:
case|case
literal|'\u1f3e'
case|:
case|case
literal|'\u1f3f'
case|:
case|case
literal|'\u1f40'
case|:
case|case
literal|'\u1f41'
case|:
case|case
literal|'\u1f42'
case|:
case|case
literal|'\u1f43'
case|:
case|case
literal|'\u1f44'
case|:
case|case
literal|'\u1f45'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1f20'
argument_list|,
literal|'\u1f45'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f48'
case|:
case|case
literal|'\u1f49'
case|:
case|case
literal|'\u1f4a'
case|:
case|case
literal|'\u1f4b'
case|:
case|case
literal|'\u1f4c'
case|:
case|case
literal|'\u1f4d'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1f48'
argument_list|,
literal|'\u1f4d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f50'
case|:
case|case
literal|'\u1f51'
case|:
case|case
literal|'\u1f52'
case|:
case|case
literal|'\u1f53'
case|:
case|case
literal|'\u1f54'
case|:
case|case
literal|'\u1f55'
case|:
case|case
literal|'\u1f56'
case|:
case|case
literal|'\u1f57'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1f50'
argument_list|,
literal|'\u1f57'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f59'
case|:
block|{
name|match
argument_list|(
literal|'\u1f59'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f5b'
case|:
block|{
name|match
argument_list|(
literal|'\u1f5b'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f5d'
case|:
block|{
name|match
argument_list|(
literal|'\u1f5d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f5f'
case|:
case|case
literal|'\u1f60'
case|:
case|case
literal|'\u1f61'
case|:
case|case
literal|'\u1f62'
case|:
case|case
literal|'\u1f63'
case|:
case|case
literal|'\u1f64'
case|:
case|case
literal|'\u1f65'
case|:
case|case
literal|'\u1f66'
case|:
case|case
literal|'\u1f67'
case|:
case|case
literal|'\u1f68'
case|:
case|case
literal|'\u1f69'
case|:
case|case
literal|'\u1f6a'
case|:
case|case
literal|'\u1f6b'
case|:
case|case
literal|'\u1f6c'
case|:
case|case
literal|'\u1f6d'
case|:
case|case
literal|'\u1f6e'
case|:
case|case
literal|'\u1f6f'
case|:
case|case
literal|'\u1f70'
case|:
case|case
literal|'\u1f71'
case|:
case|case
literal|'\u1f72'
case|:
case|case
literal|'\u1f73'
case|:
case|case
literal|'\u1f74'
case|:
case|case
literal|'\u1f75'
case|:
case|case
literal|'\u1f76'
case|:
case|case
literal|'\u1f77'
case|:
case|case
literal|'\u1f78'
case|:
case|case
literal|'\u1f79'
case|:
case|case
literal|'\u1f7a'
case|:
case|case
literal|'\u1f7b'
case|:
case|case
literal|'\u1f7c'
case|:
case|case
literal|'\u1f7d'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1f5f'
argument_list|,
literal|'\u1f7d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1f80'
case|:
case|case
literal|'\u1f81'
case|:
case|case
literal|'\u1f82'
case|:
case|case
literal|'\u1f83'
case|:
case|case
literal|'\u1f84'
case|:
case|case
literal|'\u1f85'
case|:
case|case
literal|'\u1f86'
case|:
case|case
literal|'\u1f87'
case|:
case|case
literal|'\u1f88'
case|:
case|case
literal|'\u1f89'
case|:
case|case
literal|'\u1f8a'
case|:
case|case
literal|'\u1f8b'
case|:
case|case
literal|'\u1f8c'
case|:
case|case
literal|'\u1f8d'
case|:
case|case
literal|'\u1f8e'
case|:
case|case
literal|'\u1f8f'
case|:
case|case
literal|'\u1f90'
case|:
case|case
literal|'\u1f91'
case|:
case|case
literal|'\u1f92'
case|:
case|case
literal|'\u1f93'
case|:
case|case
literal|'\u1f94'
case|:
case|case
literal|'\u1f95'
case|:
case|case
literal|'\u1f96'
case|:
case|case
literal|'\u1f97'
case|:
case|case
literal|'\u1f98'
case|:
case|case
literal|'\u1f99'
case|:
case|case
literal|'\u1f9a'
case|:
case|case
literal|'\u1f9b'
case|:
case|case
literal|'\u1f9c'
case|:
case|case
literal|'\u1f9d'
case|:
case|case
literal|'\u1f9e'
case|:
case|case
literal|'\u1f9f'
case|:
case|case
literal|'\u1fa0'
case|:
case|case
literal|'\u1fa1'
case|:
case|case
literal|'\u1fa2'
case|:
case|case
literal|'\u1fa3'
case|:
case|case
literal|'\u1fa4'
case|:
case|case
literal|'\u1fa5'
case|:
case|case
literal|'\u1fa6'
case|:
case|case
literal|'\u1fa7'
case|:
case|case
literal|'\u1fa8'
case|:
case|case
literal|'\u1fa9'
case|:
case|case
literal|'\u1faa'
case|:
case|case
literal|'\u1fab'
case|:
case|case
literal|'\u1fac'
case|:
case|case
literal|'\u1fad'
case|:
case|case
literal|'\u1fae'
case|:
case|case
literal|'\u1faf'
case|:
case|case
literal|'\u1fb0'
case|:
case|case
literal|'\u1fb1'
case|:
case|case
literal|'\u1fb2'
case|:
case|case
literal|'\u1fb3'
case|:
case|case
literal|'\u1fb4'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1f80'
argument_list|,
literal|'\u1fb4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1fb6'
case|:
case|case
literal|'\u1fb7'
case|:
case|case
literal|'\u1fb8'
case|:
case|case
literal|'\u1fb9'
case|:
case|case
literal|'\u1fba'
case|:
case|case
literal|'\u1fbb'
case|:
case|case
literal|'\u1fbc'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1fb6'
argument_list|,
literal|'\u1fbc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1fbe'
case|:
block|{
name|match
argument_list|(
literal|'\u1fbe'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1fc2'
case|:
case|case
literal|'\u1fc3'
case|:
case|case
literal|'\u1fc4'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1fc2'
argument_list|,
literal|'\u1fc4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1fc6'
case|:
case|case
literal|'\u1fc7'
case|:
case|case
literal|'\u1fc8'
case|:
case|case
literal|'\u1fc9'
case|:
case|case
literal|'\u1fca'
case|:
case|case
literal|'\u1fcb'
case|:
case|case
literal|'\u1fcc'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1fc6'
argument_list|,
literal|'\u1fcc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1fd0'
case|:
case|case
literal|'\u1fd1'
case|:
case|case
literal|'\u1fd2'
case|:
case|case
literal|'\u1fd3'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1fd0'
argument_list|,
literal|'\u1fd3'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1fd6'
case|:
case|case
literal|'\u1fd7'
case|:
case|case
literal|'\u1fd8'
case|:
case|case
literal|'\u1fd9'
case|:
case|case
literal|'\u1fda'
case|:
case|case
literal|'\u1fdb'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1fd6'
argument_list|,
literal|'\u1fdb'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1fe0'
case|:
case|case
literal|'\u1fe1'
case|:
case|case
literal|'\u1fe2'
case|:
case|case
literal|'\u1fe3'
case|:
case|case
literal|'\u1fe4'
case|:
case|case
literal|'\u1fe5'
case|:
case|case
literal|'\u1fe6'
case|:
case|case
literal|'\u1fe7'
case|:
case|case
literal|'\u1fe8'
case|:
case|case
literal|'\u1fe9'
case|:
case|case
literal|'\u1fea'
case|:
case|case
literal|'\u1feb'
case|:
case|case
literal|'\u1fec'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1fe0'
argument_list|,
literal|'\u1fec'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1ff2'
case|:
case|case
literal|'\u1ff3'
case|:
case|case
literal|'\u1ff4'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1ff2'
argument_list|,
literal|'\u1ff4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u1ff6'
case|:
case|case
literal|'\u1ff7'
case|:
case|case
literal|'\u1ff8'
case|:
case|case
literal|'\u1ff9'
case|:
case|case
literal|'\u1ffa'
case|:
case|case
literal|'\u1ffb'
case|:
case|case
literal|'\u1ffc'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u1ff6'
argument_list|,
literal|'\u1ffc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u2126'
case|:
block|{
name|match
argument_list|(
literal|'\u2126'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u212a'
case|:
case|case
literal|'\u212b'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u212a'
argument_list|,
literal|'\u212b'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u212e'
case|:
block|{
name|match
argument_list|(
literal|'\u212e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u2180'
case|:
case|case
literal|'\u2181'
case|:
case|case
literal|'\u2182'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u2180'
argument_list|,
literal|'\u2182'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u3041'
case|:
case|case
literal|'\u3042'
case|:
case|case
literal|'\u3043'
case|:
case|case
literal|'\u3044'
case|:
case|case
literal|'\u3045'
case|:
case|case
literal|'\u3046'
case|:
case|case
literal|'\u3047'
case|:
case|case
literal|'\u3048'
case|:
case|case
literal|'\u3049'
case|:
case|case
literal|'\u304a'
case|:
case|case
literal|'\u304b'
case|:
case|case
literal|'\u304c'
case|:
case|case
literal|'\u304d'
case|:
case|case
literal|'\u304e'
case|:
case|case
literal|'\u304f'
case|:
case|case
literal|'\u3050'
case|:
case|case
literal|'\u3051'
case|:
case|case
literal|'\u3052'
case|:
case|case
literal|'\u3053'
case|:
case|case
literal|'\u3054'
case|:
case|case
literal|'\u3055'
case|:
case|case
literal|'\u3056'
case|:
case|case
literal|'\u3057'
case|:
case|case
literal|'\u3058'
case|:
case|case
literal|'\u3059'
case|:
case|case
literal|'\u305a'
case|:
case|case
literal|'\u305b'
case|:
case|case
literal|'\u305c'
case|:
case|case
literal|'\u305d'
case|:
case|case
literal|'\u305e'
case|:
case|case
literal|'\u305f'
case|:
case|case
literal|'\u3060'
case|:
case|case
literal|'\u3061'
case|:
case|case
literal|'\u3062'
case|:
case|case
literal|'\u3063'
case|:
case|case
literal|'\u3064'
case|:
case|case
literal|'\u3065'
case|:
case|case
literal|'\u3066'
case|:
case|case
literal|'\u3067'
case|:
case|case
literal|'\u3068'
case|:
case|case
literal|'\u3069'
case|:
case|case
literal|'\u306a'
case|:
case|case
literal|'\u306b'
case|:
case|case
literal|'\u306c'
case|:
case|case
literal|'\u306d'
case|:
case|case
literal|'\u306e'
case|:
case|case
literal|'\u306f'
case|:
case|case
literal|'\u3070'
case|:
case|case
literal|'\u3071'
case|:
case|case
literal|'\u3072'
case|:
case|case
literal|'\u3073'
case|:
case|case
literal|'\u3074'
case|:
case|case
literal|'\u3075'
case|:
case|case
literal|'\u3076'
case|:
case|case
literal|'\u3077'
case|:
case|case
literal|'\u3078'
case|:
case|case
literal|'\u3079'
case|:
case|case
literal|'\u307a'
case|:
case|case
literal|'\u307b'
case|:
case|case
literal|'\u307c'
case|:
case|case
literal|'\u307d'
case|:
case|case
literal|'\u307e'
case|:
case|case
literal|'\u307f'
case|:
case|case
literal|'\u3080'
case|:
case|case
literal|'\u3081'
case|:
case|case
literal|'\u3082'
case|:
case|case
literal|'\u3083'
case|:
case|case
literal|'\u3084'
case|:
case|case
literal|'\u3085'
case|:
case|case
literal|'\u3086'
case|:
case|case
literal|'\u3087'
case|:
case|case
literal|'\u3088'
case|:
case|case
literal|'\u3089'
case|:
case|case
literal|'\u308a'
case|:
case|case
literal|'\u308b'
case|:
case|case
literal|'\u308c'
case|:
case|case
literal|'\u308d'
case|:
case|case
literal|'\u308e'
case|:
case|case
literal|'\u308f'
case|:
case|case
literal|'\u3090'
case|:
case|case
literal|'\u3091'
case|:
case|case
literal|'\u3092'
case|:
case|case
literal|'\u3093'
case|:
case|case
literal|'\u3094'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u3041'
argument_list|,
literal|'\u3094'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u30a1'
case|:
case|case
literal|'\u30a2'
case|:
case|case
literal|'\u30a3'
case|:
case|case
literal|'\u30a4'
case|:
case|case
literal|'\u30a5'
case|:
case|case
literal|'\u30a6'
case|:
case|case
literal|'\u30a7'
case|:
case|case
literal|'\u30a8'
case|:
case|case
literal|'\u30a9'
case|:
case|case
literal|'\u30aa'
case|:
case|case
literal|'\u30ab'
case|:
case|case
literal|'\u30ac'
case|:
case|case
literal|'\u30ad'
case|:
case|case
literal|'\u30ae'
case|:
case|case
literal|'\u30af'
case|:
case|case
literal|'\u30b0'
case|:
case|case
literal|'\u30b1'
case|:
case|case
literal|'\u30b2'
case|:
case|case
literal|'\u30b3'
case|:
case|case
literal|'\u30b4'
case|:
case|case
literal|'\u30b5'
case|:
case|case
literal|'\u30b6'
case|:
case|case
literal|'\u30b7'
case|:
case|case
literal|'\u30b8'
case|:
case|case
literal|'\u30b9'
case|:
case|case
literal|'\u30ba'
case|:
case|case
literal|'\u30bb'
case|:
case|case
literal|'\u30bc'
case|:
case|case
literal|'\u30bd'
case|:
case|case
literal|'\u30be'
case|:
case|case
literal|'\u30bf'
case|:
case|case
literal|'\u30c0'
case|:
case|case
literal|'\u30c1'
case|:
case|case
literal|'\u30c2'
case|:
case|case
literal|'\u30c3'
case|:
case|case
literal|'\u30c4'
case|:
case|case
literal|'\u30c5'
case|:
case|case
literal|'\u30c6'
case|:
case|case
literal|'\u30c7'
case|:
case|case
literal|'\u30c8'
case|:
case|case
literal|'\u30c9'
case|:
case|case
literal|'\u30ca'
case|:
case|case
literal|'\u30cb'
case|:
case|case
literal|'\u30cc'
case|:
case|case
literal|'\u30cd'
case|:
case|case
literal|'\u30ce'
case|:
case|case
literal|'\u30cf'
case|:
case|case
literal|'\u30d0'
case|:
case|case
literal|'\u30d1'
case|:
case|case
literal|'\u30d2'
case|:
case|case
literal|'\u30d3'
case|:
case|case
literal|'\u30d4'
case|:
case|case
literal|'\u30d5'
case|:
case|case
literal|'\u30d6'
case|:
case|case
literal|'\u30d7'
case|:
case|case
literal|'\u30d8'
case|:
case|case
literal|'\u30d9'
case|:
case|case
literal|'\u30da'
case|:
case|case
literal|'\u30db'
case|:
case|case
literal|'\u30dc'
case|:
case|case
literal|'\u30dd'
case|:
case|case
literal|'\u30de'
case|:
case|case
literal|'\u30df'
case|:
case|case
literal|'\u30e0'
case|:
case|case
literal|'\u30e1'
case|:
case|case
literal|'\u30e2'
case|:
case|case
literal|'\u30e3'
case|:
case|case
literal|'\u30e4'
case|:
case|case
literal|'\u30e5'
case|:
case|case
literal|'\u30e6'
case|:
case|case
literal|'\u30e7'
case|:
case|case
literal|'\u30e8'
case|:
case|case
literal|'\u30e9'
case|:
case|case
literal|'\u30ea'
case|:
case|case
literal|'\u30eb'
case|:
case|case
literal|'\u30ec'
case|:
case|case
literal|'\u30ed'
case|:
case|case
literal|'\u30ee'
case|:
case|case
literal|'\u30ef'
case|:
case|case
literal|'\u30f0'
case|:
case|case
literal|'\u30f1'
case|:
case|case
literal|'\u30f2'
case|:
case|case
literal|'\u30f3'
case|:
case|case
literal|'\u30f4'
case|:
case|case
literal|'\u30f5'
case|:
case|case
literal|'\u30f6'
case|:
case|case
literal|'\u30f7'
case|:
case|case
literal|'\u30f8'
case|:
case|case
literal|'\u30f9'
case|:
case|case
literal|'\u30fa'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u30a1'
argument_list|,
literal|'\u30fa'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u3105'
case|:
case|case
literal|'\u3106'
case|:
case|case
literal|'\u3107'
case|:
case|case
literal|'\u3108'
case|:
case|case
literal|'\u3109'
case|:
case|case
literal|'\u310a'
case|:
case|case
literal|'\u310b'
case|:
case|case
literal|'\u310c'
case|:
case|case
literal|'\u310d'
case|:
case|case
literal|'\u310e'
case|:
case|case
literal|'\u310f'
case|:
case|case
literal|'\u3110'
case|:
case|case
literal|'\u3111'
case|:
case|case
literal|'\u3112'
case|:
case|case
literal|'\u3113'
case|:
case|case
literal|'\u3114'
case|:
case|case
literal|'\u3115'
case|:
case|case
literal|'\u3116'
case|:
case|case
literal|'\u3117'
case|:
case|case
literal|'\u3118'
case|:
case|case
literal|'\u3119'
case|:
case|case
literal|'\u311a'
case|:
case|case
literal|'\u311b'
case|:
case|case
literal|'\u311c'
case|:
case|case
literal|'\u311d'
case|:
case|case
literal|'\u311e'
case|:
case|case
literal|'\u311f'
case|:
case|case
literal|'\u3120'
case|:
case|case
literal|'\u3121'
case|:
case|case
literal|'\u3122'
case|:
case|case
literal|'\u3123'
case|:
case|case
literal|'\u3124'
case|:
case|case
literal|'\u3125'
case|:
case|case
literal|'\u3126'
case|:
case|case
literal|'\u3127'
case|:
case|case
literal|'\u3128'
case|:
case|case
literal|'\u3129'
case|:
case|case
literal|'\u312a'
case|:
case|case
literal|'\u312b'
case|:
case|case
literal|'\u312c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u3105'
argument_list|,
literal|'\u312c'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u1e00'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\u1e9b'
operator|)
operator|)
condition|)
block|{
name|matchRange
argument_list|(
literal|'\u1e00'
argument_list|,
literal|'\u1e9b'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\uac00'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ud7a3'
operator|)
operator|)
condition|)
block|{
name|matchRange
argument_list|(
literal|'\uac00'
argument_list|,
literal|'\ud7a3'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mIDEOGRAPHIC
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|IDEOGRAPHIC
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\u3007'
case|:
block|{
name|match
argument_list|(
literal|'\u3007'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u3021'
case|:
case|case
literal|'\u3022'
case|:
case|case
literal|'\u3023'
case|:
case|case
literal|'\u3024'
case|:
case|case
literal|'\u3025'
case|:
case|case
literal|'\u3026'
case|:
case|case
literal|'\u3027'
case|:
case|case
literal|'\u3028'
case|:
case|case
literal|'\u3029'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u3021'
argument_list|,
literal|'\u3029'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u4e00'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\u9fa5'
operator|)
operator|)
condition|)
block|{
name|matchRange
argument_list|(
literal|'\u4e00'
argument_list|,
literal|'\u9fa5'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mDIGITS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DIGITS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt384
init|=
literal|0
decl_stmt|;
name|_loop384
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt384
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop384
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt384
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mDIGIT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DIGIT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0030'
argument_list|,
literal|'\u0039'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0660'
case|:
case|case
literal|'\u0661'
case|:
case|case
literal|'\u0662'
case|:
case|case
literal|'\u0663'
case|:
case|case
literal|'\u0664'
case|:
case|case
literal|'\u0665'
case|:
case|case
literal|'\u0666'
case|:
case|case
literal|'\u0667'
case|:
case|case
literal|'\u0668'
case|:
case|case
literal|'\u0669'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0660'
argument_list|,
literal|'\u0669'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06f0'
case|:
case|case
literal|'\u06f1'
case|:
case|case
literal|'\u06f2'
case|:
case|case
literal|'\u06f3'
case|:
case|case
literal|'\u06f4'
case|:
case|case
literal|'\u06f5'
case|:
case|case
literal|'\u06f6'
case|:
case|case
literal|'\u06f7'
case|:
case|case
literal|'\u06f8'
case|:
case|case
literal|'\u06f9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06f0'
argument_list|,
literal|'\u06f9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0966'
case|:
case|case
literal|'\u0967'
case|:
case|case
literal|'\u0968'
case|:
case|case
literal|'\u0969'
case|:
case|case
literal|'\u096a'
case|:
case|case
literal|'\u096b'
case|:
case|case
literal|'\u096c'
case|:
case|case
literal|'\u096d'
case|:
case|case
literal|'\u096e'
case|:
case|case
literal|'\u096f'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0966'
argument_list|,
literal|'\u096f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09e6'
case|:
case|case
literal|'\u09e7'
case|:
case|case
literal|'\u09e8'
case|:
case|case
literal|'\u09e9'
case|:
case|case
literal|'\u09ea'
case|:
case|case
literal|'\u09eb'
case|:
case|case
literal|'\u09ec'
case|:
case|case
literal|'\u09ed'
case|:
case|case
literal|'\u09ee'
case|:
case|case
literal|'\u09ef'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09e6'
argument_list|,
literal|'\u09ef'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a66'
case|:
case|case
literal|'\u0a67'
case|:
case|case
literal|'\u0a68'
case|:
case|case
literal|'\u0a69'
case|:
case|case
literal|'\u0a6a'
case|:
case|case
literal|'\u0a6b'
case|:
case|case
literal|'\u0a6c'
case|:
case|case
literal|'\u0a6d'
case|:
case|case
literal|'\u0a6e'
case|:
case|case
literal|'\u0a6f'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a66'
argument_list|,
literal|'\u0a6f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ae6'
case|:
case|case
literal|'\u0ae7'
case|:
case|case
literal|'\u0ae8'
case|:
case|case
literal|'\u0ae9'
case|:
case|case
literal|'\u0aea'
case|:
case|case
literal|'\u0aeb'
case|:
case|case
literal|'\u0aec'
case|:
case|case
literal|'\u0aed'
case|:
case|case
literal|'\u0aee'
case|:
case|case
literal|'\u0aef'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ae6'
argument_list|,
literal|'\u0aef'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b66'
case|:
case|case
literal|'\u0b67'
case|:
case|case
literal|'\u0b68'
case|:
case|case
literal|'\u0b69'
case|:
case|case
literal|'\u0b6a'
case|:
case|case
literal|'\u0b6b'
case|:
case|case
literal|'\u0b6c'
case|:
case|case
literal|'\u0b6d'
case|:
case|case
literal|'\u0b6e'
case|:
case|case
literal|'\u0b6f'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b66'
argument_list|,
literal|'\u0b6f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0be7'
case|:
case|case
literal|'\u0be8'
case|:
case|case
literal|'\u0be9'
case|:
case|case
literal|'\u0bea'
case|:
case|case
literal|'\u0beb'
case|:
case|case
literal|'\u0bec'
case|:
case|case
literal|'\u0bed'
case|:
case|case
literal|'\u0bee'
case|:
case|case
literal|'\u0bef'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0be7'
argument_list|,
literal|'\u0bef'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c66'
case|:
case|case
literal|'\u0c67'
case|:
case|case
literal|'\u0c68'
case|:
case|case
literal|'\u0c69'
case|:
case|case
literal|'\u0c6a'
case|:
case|case
literal|'\u0c6b'
case|:
case|case
literal|'\u0c6c'
case|:
case|case
literal|'\u0c6d'
case|:
case|case
literal|'\u0c6e'
case|:
case|case
literal|'\u0c6f'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c66'
argument_list|,
literal|'\u0c6f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ce6'
case|:
case|case
literal|'\u0ce7'
case|:
case|case
literal|'\u0ce8'
case|:
case|case
literal|'\u0ce9'
case|:
case|case
literal|'\u0cea'
case|:
case|case
literal|'\u0ceb'
case|:
case|case
literal|'\u0cec'
case|:
case|case
literal|'\u0ced'
case|:
case|case
literal|'\u0cee'
case|:
case|case
literal|'\u0cef'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ce6'
argument_list|,
literal|'\u0cef'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d66'
case|:
case|case
literal|'\u0d67'
case|:
case|case
literal|'\u0d68'
case|:
case|case
literal|'\u0d69'
case|:
case|case
literal|'\u0d6a'
case|:
case|case
literal|'\u0d6b'
case|:
case|case
literal|'\u0d6c'
case|:
case|case
literal|'\u0d6d'
case|:
case|case
literal|'\u0d6e'
case|:
case|case
literal|'\u0d6f'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d66'
argument_list|,
literal|'\u0d6f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e50'
case|:
case|case
literal|'\u0e51'
case|:
case|case
literal|'\u0e52'
case|:
case|case
literal|'\u0e53'
case|:
case|case
literal|'\u0e54'
case|:
case|case
literal|'\u0e55'
case|:
case|case
literal|'\u0e56'
case|:
case|case
literal|'\u0e57'
case|:
case|case
literal|'\u0e58'
case|:
case|case
literal|'\u0e59'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e50'
argument_list|,
literal|'\u0e59'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ed0'
case|:
case|case
literal|'\u0ed1'
case|:
case|case
literal|'\u0ed2'
case|:
case|case
literal|'\u0ed3'
case|:
case|case
literal|'\u0ed4'
case|:
case|case
literal|'\u0ed5'
case|:
case|case
literal|'\u0ed6'
case|:
case|case
literal|'\u0ed7'
case|:
case|case
literal|'\u0ed8'
case|:
case|case
literal|'\u0ed9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ed0'
argument_list|,
literal|'\u0ed9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f20'
case|:
case|case
literal|'\u0f21'
case|:
case|case
literal|'\u0f22'
case|:
case|case
literal|'\u0f23'
case|:
case|case
literal|'\u0f24'
case|:
case|case
literal|'\u0f25'
case|:
case|case
literal|'\u0f26'
case|:
case|case
literal|'\u0f27'
case|:
case|case
literal|'\u0f28'
case|:
case|case
literal|'\u0f29'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0f20'
argument_list|,
literal|'\u0f29'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mHEX_DIGITS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|HEX_DIGITS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt387
init|=
literal|0
decl_stmt|;
name|_loop387
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
block|{
name|matchRange
argument_list|(
literal|'a'
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
block|{
name|matchRange
argument_list|(
literal|'A'
argument_list|,
literal|'F'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|_cnt387
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop387
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt387
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mNMSTART
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NMSTART
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mLETTER
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'_'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mNMCHAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NMCHAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'.'
case|:
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'_'
case|:
block|{
name|match
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u00b7'
case|:
case|case
literal|'\u02d0'
case|:
case|case
literal|'\u02d1'
case|:
case|case
literal|'\u0387'
case|:
case|case
literal|'\u0640'
case|:
case|case
literal|'\u0e46'
case|:
case|case
literal|'\u0ec6'
case|:
case|case
literal|'\u3005'
case|:
case|case
literal|'\u3031'
case|:
case|case
literal|'\u3032'
case|:
case|case
literal|'\u3033'
case|:
case|case
literal|'\u3034'
case|:
case|case
literal|'\u3035'
case|:
case|case
literal|'\u309d'
case|:
case|case
literal|'\u309e'
case|:
case|case
literal|'\u30fc'
case|:
case|case
literal|'\u30fd'
case|:
case|case
literal|'\u30fe'
case|:
block|{
name|mEXTENDER
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mLETTER
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mCOMBINING_CHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mCOMBINING_CHAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|COMBINING_CHAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\u0300'
case|:
case|case
literal|'\u0301'
case|:
case|case
literal|'\u0302'
case|:
case|case
literal|'\u0303'
case|:
case|case
literal|'\u0304'
case|:
case|case
literal|'\u0305'
case|:
case|case
literal|'\u0306'
case|:
case|case
literal|'\u0307'
case|:
case|case
literal|'\u0308'
case|:
case|case
literal|'\u0309'
case|:
case|case
literal|'\u030a'
case|:
case|case
literal|'\u030b'
case|:
case|case
literal|'\u030c'
case|:
case|case
literal|'\u030d'
case|:
case|case
literal|'\u030e'
case|:
case|case
literal|'\u030f'
case|:
case|case
literal|'\u0310'
case|:
case|case
literal|'\u0311'
case|:
case|case
literal|'\u0312'
case|:
case|case
literal|'\u0313'
case|:
case|case
literal|'\u0314'
case|:
case|case
literal|'\u0315'
case|:
case|case
literal|'\u0316'
case|:
case|case
literal|'\u0317'
case|:
case|case
literal|'\u0318'
case|:
case|case
literal|'\u0319'
case|:
case|case
literal|'\u031a'
case|:
case|case
literal|'\u031b'
case|:
case|case
literal|'\u031c'
case|:
case|case
literal|'\u031d'
case|:
case|case
literal|'\u031e'
case|:
case|case
literal|'\u031f'
case|:
case|case
literal|'\u0320'
case|:
case|case
literal|'\u0321'
case|:
case|case
literal|'\u0322'
case|:
case|case
literal|'\u0323'
case|:
case|case
literal|'\u0324'
case|:
case|case
literal|'\u0325'
case|:
case|case
literal|'\u0326'
case|:
case|case
literal|'\u0327'
case|:
case|case
literal|'\u0328'
case|:
case|case
literal|'\u0329'
case|:
case|case
literal|'\u032a'
case|:
case|case
literal|'\u032b'
case|:
case|case
literal|'\u032c'
case|:
case|case
literal|'\u032d'
case|:
case|case
literal|'\u032e'
case|:
case|case
literal|'\u032f'
case|:
case|case
literal|'\u0330'
case|:
case|case
literal|'\u0331'
case|:
case|case
literal|'\u0332'
case|:
case|case
literal|'\u0333'
case|:
case|case
literal|'\u0334'
case|:
case|case
literal|'\u0335'
case|:
case|case
literal|'\u0336'
case|:
case|case
literal|'\u0337'
case|:
case|case
literal|'\u0338'
case|:
case|case
literal|'\u0339'
case|:
case|case
literal|'\u033a'
case|:
case|case
literal|'\u033b'
case|:
case|case
literal|'\u033c'
case|:
case|case
literal|'\u033d'
case|:
case|case
literal|'\u033e'
case|:
case|case
literal|'\u033f'
case|:
case|case
literal|'\u0340'
case|:
case|case
literal|'\u0341'
case|:
case|case
literal|'\u0342'
case|:
case|case
literal|'\u0343'
case|:
case|case
literal|'\u0344'
case|:
case|case
literal|'\u0345'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0300'
argument_list|,
literal|'\u0345'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0360'
case|:
case|case
literal|'\u0361'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0360'
argument_list|,
literal|'\u0361'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0483'
case|:
case|case
literal|'\u0484'
case|:
case|case
literal|'\u0485'
case|:
case|case
literal|'\u0486'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0483'
argument_list|,
literal|'\u0486'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0591'
case|:
case|case
literal|'\u0592'
case|:
case|case
literal|'\u0593'
case|:
case|case
literal|'\u0594'
case|:
case|case
literal|'\u0595'
case|:
case|case
literal|'\u0596'
case|:
case|case
literal|'\u0597'
case|:
case|case
literal|'\u0598'
case|:
case|case
literal|'\u0599'
case|:
case|case
literal|'\u059a'
case|:
case|case
literal|'\u059b'
case|:
case|case
literal|'\u059c'
case|:
case|case
literal|'\u059d'
case|:
case|case
literal|'\u059e'
case|:
case|case
literal|'\u059f'
case|:
case|case
literal|'\u05a0'
case|:
case|case
literal|'\u05a1'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0591'
argument_list|,
literal|'\u05a1'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u05a3'
case|:
case|case
literal|'\u05a4'
case|:
case|case
literal|'\u05a5'
case|:
case|case
literal|'\u05a6'
case|:
case|case
literal|'\u05a7'
case|:
case|case
literal|'\u05a8'
case|:
case|case
literal|'\u05a9'
case|:
case|case
literal|'\u05aa'
case|:
case|case
literal|'\u05ab'
case|:
case|case
literal|'\u05ac'
case|:
case|case
literal|'\u05ad'
case|:
case|case
literal|'\u05ae'
case|:
case|case
literal|'\u05af'
case|:
case|case
literal|'\u05b0'
case|:
case|case
literal|'\u05b1'
case|:
case|case
literal|'\u05b2'
case|:
case|case
literal|'\u05b3'
case|:
case|case
literal|'\u05b4'
case|:
case|case
literal|'\u05b5'
case|:
case|case
literal|'\u05b6'
case|:
case|case
literal|'\u05b7'
case|:
case|case
literal|'\u05b8'
case|:
case|case
literal|'\u05b9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u05a3'
argument_list|,
literal|'\u05b9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u05bb'
case|:
case|case
literal|'\u05bc'
case|:
case|case
literal|'\u05bd'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u05bb'
argument_list|,
literal|'\u05bd'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u05bf'
case|:
block|{
name|match
argument_list|(
literal|'\u05bf'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u05c1'
case|:
case|case
literal|'\u05c2'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u05c1'
argument_list|,
literal|'\u05c2'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u05c4'
case|:
block|{
name|match
argument_list|(
literal|'\u05c4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u064b'
case|:
case|case
literal|'\u064c'
case|:
case|case
literal|'\u064d'
case|:
case|case
literal|'\u064e'
case|:
case|case
literal|'\u064f'
case|:
case|case
literal|'\u0650'
case|:
case|case
literal|'\u0651'
case|:
case|case
literal|'\u0652'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u064b'
argument_list|,
literal|'\u0652'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0670'
case|:
block|{
name|match
argument_list|(
literal|'\u0670'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06d6'
case|:
case|case
literal|'\u06d7'
case|:
case|case
literal|'\u06d8'
case|:
case|case
literal|'\u06d9'
case|:
case|case
literal|'\u06da'
case|:
case|case
literal|'\u06db'
case|:
case|case
literal|'\u06dc'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06d6'
argument_list|,
literal|'\u06dc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06dd'
case|:
case|case
literal|'\u06de'
case|:
case|case
literal|'\u06df'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06dd'
argument_list|,
literal|'\u06df'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06e0'
case|:
case|case
literal|'\u06e1'
case|:
case|case
literal|'\u06e2'
case|:
case|case
literal|'\u06e3'
case|:
case|case
literal|'\u06e4'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06e0'
argument_list|,
literal|'\u06e4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06e7'
case|:
case|case
literal|'\u06e8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06e7'
argument_list|,
literal|'\u06e8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u06ea'
case|:
case|case
literal|'\u06eb'
case|:
case|case
literal|'\u06ec'
case|:
case|case
literal|'\u06ed'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u06ea'
argument_list|,
literal|'\u06ed'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0901'
case|:
case|case
literal|'\u0902'
case|:
case|case
literal|'\u0903'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0901'
argument_list|,
literal|'\u0903'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u093c'
case|:
block|{
name|match
argument_list|(
literal|'\u093c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u093e'
case|:
case|case
literal|'\u093f'
case|:
case|case
literal|'\u0940'
case|:
case|case
literal|'\u0941'
case|:
case|case
literal|'\u0942'
case|:
case|case
literal|'\u0943'
case|:
case|case
literal|'\u0944'
case|:
case|case
literal|'\u0945'
case|:
case|case
literal|'\u0946'
case|:
case|case
literal|'\u0947'
case|:
case|case
literal|'\u0948'
case|:
case|case
literal|'\u0949'
case|:
case|case
literal|'\u094a'
case|:
case|case
literal|'\u094b'
case|:
case|case
literal|'\u094c'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u093e'
argument_list|,
literal|'\u094c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u094d'
case|:
block|{
name|match
argument_list|(
literal|'\u094d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0951'
case|:
case|case
literal|'\u0952'
case|:
case|case
literal|'\u0953'
case|:
case|case
literal|'\u0954'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0951'
argument_list|,
literal|'\u0954'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0962'
case|:
case|case
literal|'\u0963'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0962'
argument_list|,
literal|'\u0963'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0981'
case|:
case|case
literal|'\u0982'
case|:
case|case
literal|'\u0983'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0981'
argument_list|,
literal|'\u0983'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09bc'
case|:
block|{
name|match
argument_list|(
literal|'\u09bc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09be'
case|:
block|{
name|match
argument_list|(
literal|'\u09be'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09bf'
case|:
block|{
name|match
argument_list|(
literal|'\u09bf'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09c0'
case|:
case|case
literal|'\u09c1'
case|:
case|case
literal|'\u09c2'
case|:
case|case
literal|'\u09c3'
case|:
case|case
literal|'\u09c4'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09c0'
argument_list|,
literal|'\u09c4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09c7'
case|:
case|case
literal|'\u09c8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09c7'
argument_list|,
literal|'\u09c8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09cb'
case|:
case|case
literal|'\u09cc'
case|:
case|case
literal|'\u09cd'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09cb'
argument_list|,
literal|'\u09cd'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09d7'
case|:
block|{
name|match
argument_list|(
literal|'\u09d7'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u09e2'
case|:
case|case
literal|'\u09e3'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u09e2'
argument_list|,
literal|'\u09e3'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a02'
case|:
block|{
name|match
argument_list|(
literal|'\u0a02'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a3c'
case|:
block|{
name|match
argument_list|(
literal|'\u0a3c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a3e'
case|:
block|{
name|match
argument_list|(
literal|'\u0a3e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a3f'
case|:
block|{
name|match
argument_list|(
literal|'\u0a3f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a40'
case|:
case|case
literal|'\u0a41'
case|:
case|case
literal|'\u0a42'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a40'
argument_list|,
literal|'\u0a42'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a47'
case|:
case|case
literal|'\u0a48'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a47'
argument_list|,
literal|'\u0a48'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a4b'
case|:
case|case
literal|'\u0a4c'
case|:
case|case
literal|'\u0a4d'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a4b'
argument_list|,
literal|'\u0a4d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a70'
case|:
case|case
literal|'\u0a71'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a70'
argument_list|,
literal|'\u0a71'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0a81'
case|:
case|case
literal|'\u0a82'
case|:
case|case
literal|'\u0a83'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0a81'
argument_list|,
literal|'\u0a83'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0abc'
case|:
block|{
name|match
argument_list|(
literal|'\u0abc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0abe'
case|:
case|case
literal|'\u0abf'
case|:
case|case
literal|'\u0ac0'
case|:
case|case
literal|'\u0ac1'
case|:
case|case
literal|'\u0ac2'
case|:
case|case
literal|'\u0ac3'
case|:
case|case
literal|'\u0ac4'
case|:
case|case
literal|'\u0ac5'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0abe'
argument_list|,
literal|'\u0ac5'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ac7'
case|:
case|case
literal|'\u0ac8'
case|:
case|case
literal|'\u0ac9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ac7'
argument_list|,
literal|'\u0ac9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0acb'
case|:
case|case
literal|'\u0acc'
case|:
case|case
literal|'\u0acd'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0acb'
argument_list|,
literal|'\u0acd'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b01'
case|:
case|case
literal|'\u0b02'
case|:
case|case
literal|'\u0b03'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b01'
argument_list|,
literal|'\u0b03'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b3c'
case|:
block|{
name|match
argument_list|(
literal|'\u0b3c'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b3e'
case|:
case|case
literal|'\u0b3f'
case|:
case|case
literal|'\u0b40'
case|:
case|case
literal|'\u0b41'
case|:
case|case
literal|'\u0b42'
case|:
case|case
literal|'\u0b43'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b3e'
argument_list|,
literal|'\u0b43'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b47'
case|:
case|case
literal|'\u0b48'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b47'
argument_list|,
literal|'\u0b48'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b4b'
case|:
case|case
literal|'\u0b4c'
case|:
case|case
literal|'\u0b4d'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b4b'
argument_list|,
literal|'\u0b4d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b56'
case|:
case|case
literal|'\u0b57'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b56'
argument_list|,
literal|'\u0b57'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0b82'
case|:
case|case
literal|'\u0b83'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0b82'
argument_list|,
literal|'\u0b83'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0bbe'
case|:
case|case
literal|'\u0bbf'
case|:
case|case
literal|'\u0bc0'
case|:
case|case
literal|'\u0bc1'
case|:
case|case
literal|'\u0bc2'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0bbe'
argument_list|,
literal|'\u0bc2'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0bc6'
case|:
case|case
literal|'\u0bc7'
case|:
case|case
literal|'\u0bc8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0bc6'
argument_list|,
literal|'\u0bc8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0bca'
case|:
case|case
literal|'\u0bcb'
case|:
case|case
literal|'\u0bcc'
case|:
case|case
literal|'\u0bcd'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0bca'
argument_list|,
literal|'\u0bcd'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0bd7'
case|:
block|{
name|match
argument_list|(
literal|'\u0bd7'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c01'
case|:
case|case
literal|'\u0c02'
case|:
case|case
literal|'\u0c03'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c01'
argument_list|,
literal|'\u0c03'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c3e'
case|:
case|case
literal|'\u0c3f'
case|:
case|case
literal|'\u0c40'
case|:
case|case
literal|'\u0c41'
case|:
case|case
literal|'\u0c42'
case|:
case|case
literal|'\u0c43'
case|:
case|case
literal|'\u0c44'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c3e'
argument_list|,
literal|'\u0c44'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c46'
case|:
case|case
literal|'\u0c47'
case|:
case|case
literal|'\u0c48'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c46'
argument_list|,
literal|'\u0c48'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c4a'
case|:
case|case
literal|'\u0c4b'
case|:
case|case
literal|'\u0c4c'
case|:
case|case
literal|'\u0c4d'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c4a'
argument_list|,
literal|'\u0c4d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c55'
case|:
case|case
literal|'\u0c56'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c55'
argument_list|,
literal|'\u0c56'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0c82'
case|:
case|case
literal|'\u0c83'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0c82'
argument_list|,
literal|'\u0c83'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0cbe'
case|:
case|case
literal|'\u0cbf'
case|:
case|case
literal|'\u0cc0'
case|:
case|case
literal|'\u0cc1'
case|:
case|case
literal|'\u0cc2'
case|:
case|case
literal|'\u0cc3'
case|:
case|case
literal|'\u0cc4'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0cbe'
argument_list|,
literal|'\u0cc4'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0cc6'
case|:
case|case
literal|'\u0cc7'
case|:
case|case
literal|'\u0cc8'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0cc6'
argument_list|,
literal|'\u0cc8'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0cca'
case|:
case|case
literal|'\u0ccb'
case|:
case|case
literal|'\u0ccc'
case|:
case|case
literal|'\u0ccd'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0cca'
argument_list|,
literal|'\u0ccd'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0cd5'
case|:
case|case
literal|'\u0cd6'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0cd5'
argument_list|,
literal|'\u0cd6'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d02'
case|:
case|case
literal|'\u0d03'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d02'
argument_list|,
literal|'\u0d03'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d3e'
case|:
case|case
literal|'\u0d3f'
case|:
case|case
literal|'\u0d40'
case|:
case|case
literal|'\u0d41'
case|:
case|case
literal|'\u0d42'
case|:
case|case
literal|'\u0d43'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d3e'
argument_list|,
literal|'\u0d43'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d46'
case|:
case|case
literal|'\u0d47'
case|:
case|case
literal|'\u0d48'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d46'
argument_list|,
literal|'\u0d48'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d4a'
case|:
case|case
literal|'\u0d4b'
case|:
case|case
literal|'\u0d4c'
case|:
case|case
literal|'\u0d4d'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0d4a'
argument_list|,
literal|'\u0d4d'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0d57'
case|:
block|{
name|match
argument_list|(
literal|'\u0d57'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e31'
case|:
block|{
name|match
argument_list|(
literal|'\u0e31'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e34'
case|:
case|case
literal|'\u0e35'
case|:
case|case
literal|'\u0e36'
case|:
case|case
literal|'\u0e37'
case|:
case|case
literal|'\u0e38'
case|:
case|case
literal|'\u0e39'
case|:
case|case
literal|'\u0e3a'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e34'
argument_list|,
literal|'\u0e3a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e47'
case|:
case|case
literal|'\u0e48'
case|:
case|case
literal|'\u0e49'
case|:
case|case
literal|'\u0e4a'
case|:
case|case
literal|'\u0e4b'
case|:
case|case
literal|'\u0e4c'
case|:
case|case
literal|'\u0e4d'
case|:
case|case
literal|'\u0e4e'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0e47'
argument_list|,
literal|'\u0e4e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0eb1'
case|:
block|{
name|match
argument_list|(
literal|'\u0eb1'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0eb4'
case|:
case|case
literal|'\u0eb5'
case|:
case|case
literal|'\u0eb6'
case|:
case|case
literal|'\u0eb7'
case|:
case|case
literal|'\u0eb8'
case|:
case|case
literal|'\u0eb9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0eb4'
argument_list|,
literal|'\u0eb9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ebb'
case|:
case|case
literal|'\u0ebc'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ebb'
argument_list|,
literal|'\u0ebc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ec8'
case|:
case|case
literal|'\u0ec9'
case|:
case|case
literal|'\u0eca'
case|:
case|case
literal|'\u0ecb'
case|:
case|case
literal|'\u0ecc'
case|:
case|case
literal|'\u0ecd'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0ec8'
argument_list|,
literal|'\u0ecd'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f18'
case|:
case|case
literal|'\u0f19'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0f18'
argument_list|,
literal|'\u0f19'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f35'
case|:
block|{
name|match
argument_list|(
literal|'\u0f35'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f37'
case|:
block|{
name|match
argument_list|(
literal|'\u0f37'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f39'
case|:
block|{
name|match
argument_list|(
literal|'\u0f39'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f3e'
case|:
block|{
name|match
argument_list|(
literal|'\u0f3e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f3f'
case|:
block|{
name|match
argument_list|(
literal|'\u0f3f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f71'
case|:
case|case
literal|'\u0f72'
case|:
case|case
literal|'\u0f73'
case|:
case|case
literal|'\u0f74'
case|:
case|case
literal|'\u0f75'
case|:
case|case
literal|'\u0f76'
case|:
case|case
literal|'\u0f77'
case|:
case|case
literal|'\u0f78'
case|:
case|case
literal|'\u0f79'
case|:
case|case
literal|'\u0f7a'
case|:
case|case
literal|'\u0f7b'
case|:
case|case
literal|'\u0f7c'
case|:
case|case
literal|'\u0f7d'
case|:
case|case
literal|'\u0f7e'
case|:
case|case
literal|'\u0f7f'
case|:
case|case
literal|'\u0f80'
case|:
case|case
literal|'\u0f81'
case|:
case|case
literal|'\u0f82'
case|:
case|case
literal|'\u0f83'
case|:
case|case
literal|'\u0f84'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0f71'
argument_list|,
literal|'\u0f84'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f86'
case|:
case|case
literal|'\u0f87'
case|:
case|case
literal|'\u0f88'
case|:
case|case
literal|'\u0f89'
case|:
case|case
literal|'\u0f8a'
case|:
case|case
literal|'\u0f8b'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0f86'
argument_list|,
literal|'\u0f8b'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f90'
case|:
case|case
literal|'\u0f91'
case|:
case|case
literal|'\u0f92'
case|:
case|case
literal|'\u0f93'
case|:
case|case
literal|'\u0f94'
case|:
case|case
literal|'\u0f95'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0f90'
argument_list|,
literal|'\u0f95'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f97'
case|:
block|{
name|match
argument_list|(
literal|'\u0f97'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0f99'
case|:
case|case
literal|'\u0f9a'
case|:
case|case
literal|'\u0f9b'
case|:
case|case
literal|'\u0f9c'
case|:
case|case
literal|'\u0f9d'
case|:
case|case
literal|'\u0f9e'
case|:
case|case
literal|'\u0f9f'
case|:
case|case
literal|'\u0fa0'
case|:
case|case
literal|'\u0fa1'
case|:
case|case
literal|'\u0fa2'
case|:
case|case
literal|'\u0fa3'
case|:
case|case
literal|'\u0fa4'
case|:
case|case
literal|'\u0fa5'
case|:
case|case
literal|'\u0fa6'
case|:
case|case
literal|'\u0fa7'
case|:
case|case
literal|'\u0fa8'
case|:
case|case
literal|'\u0fa9'
case|:
case|case
literal|'\u0faa'
case|:
case|case
literal|'\u0fab'
case|:
case|case
literal|'\u0fac'
case|:
case|case
literal|'\u0fad'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0f99'
argument_list|,
literal|'\u0fad'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0fb1'
case|:
case|case
literal|'\u0fb2'
case|:
case|case
literal|'\u0fb3'
case|:
case|case
literal|'\u0fb4'
case|:
case|case
literal|'\u0fb5'
case|:
case|case
literal|'\u0fb6'
case|:
case|case
literal|'\u0fb7'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0fb1'
argument_list|,
literal|'\u0fb7'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0fb9'
case|:
block|{
name|match
argument_list|(
literal|'\u0fb9'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u20d0'
case|:
case|case
literal|'\u20d1'
case|:
case|case
literal|'\u20d2'
case|:
case|case
literal|'\u20d3'
case|:
case|case
literal|'\u20d4'
case|:
case|case
literal|'\u20d5'
case|:
case|case
literal|'\u20d6'
case|:
case|case
literal|'\u20d7'
case|:
case|case
literal|'\u20d8'
case|:
case|case
literal|'\u20d9'
case|:
case|case
literal|'\u20da'
case|:
case|case
literal|'\u20db'
case|:
case|case
literal|'\u20dc'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u20d0'
argument_list|,
literal|'\u20dc'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u20e1'
case|:
block|{
name|match
argument_list|(
literal|'\u20e1'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u302a'
case|:
case|case
literal|'\u302b'
case|:
case|case
literal|'\u302c'
case|:
case|case
literal|'\u302d'
case|:
case|case
literal|'\u302e'
case|:
case|case
literal|'\u302f'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u302a'
argument_list|,
literal|'\u302f'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u3099'
case|:
block|{
name|match
argument_list|(
literal|'\u3099'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u309a'
case|:
block|{
name|match
argument_list|(
literal|'\u309a'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mEXTENDER
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|EXTENDER
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\u00b7'
case|:
block|{
name|match
argument_list|(
literal|'\u00b7'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u02d0'
case|:
block|{
name|match
argument_list|(
literal|'\u02d0'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u02d1'
case|:
block|{
name|match
argument_list|(
literal|'\u02d1'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0387'
case|:
block|{
name|match
argument_list|(
literal|'\u0387'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0640'
case|:
block|{
name|match
argument_list|(
literal|'\u0640'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0e46'
case|:
block|{
name|match
argument_list|(
literal|'\u0e46'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u0ec6'
case|:
block|{
name|match
argument_list|(
literal|'\u0ec6'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u3005'
case|:
block|{
name|match
argument_list|(
literal|'\u3005'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u3031'
case|:
case|case
literal|'\u3032'
case|:
case|case
literal|'\u3033'
case|:
case|case
literal|'\u3034'
case|:
case|case
literal|'\u3035'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u3031'
argument_list|,
literal|'\u3035'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u309d'
case|:
case|case
literal|'\u309e'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u309d'
argument_list|,
literal|'\u309e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u30fc'
case|:
case|case
literal|'\u30fd'
case|:
case|case
literal|'\u30fe'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u30fc'
argument_list|,
literal|'\u30fe'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mNCNAME
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NCNAME
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|mNMSTART
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
name|_loop394
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mNMCHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop394
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_ttype
operator|=
name|testLiteralsTable
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|,
name|_ttype
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mWS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|WS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt397
init|=
literal|0
decl_stmt|;
name|_loop397
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|' '
case|:
block|{
name|match
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\t'
case|:
block|{
name|match
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\n'
case|:
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|newline
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'\r'
case|:
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|_cnt397
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop397
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt397
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mEXPR_COMMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|EXPR_COMMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"(:"
argument_list|)
expr_stmt|;
block|{
name|_loop403
label|:
do|do
block|{
name|boolean
name|synPredMatched402
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m402
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched402
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|{
name|match
argument_list|(
name|_tokenSet_7
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched402
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m402
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched402
condition|)
block|{
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_8
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mCHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop403
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
literal|":)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mCHAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|CHAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
block|{
name|match
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\n'
case|:
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|newline
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'\r'
case|:
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|' '
case|:
case|case
literal|'!'
case|:
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'$'
case|:
case|case
literal|'%'
case|:
case|case
literal|'&'
case|:
case|case
literal|'\''
case|:
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'*'
case|:
case|case
literal|'+'
case|:
case|case
literal|','
case|:
case|case
literal|'-'
case|:
case|case
literal|'.'
case|:
case|case
literal|'/'
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0020'
argument_list|,
literal|'\u0039'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|';'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ud7ff'
operator|)
operator|)
condition|)
block|{
name|matchRange
argument_list|(
literal|'\u003B'
argument_list|,
literal|'\uD7FF'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\ue000'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ufffd'
operator|)
operator|)
condition|)
block|{
name|matchRange
argument_list|(
literal|'\uE000'
argument_list|,
literal|'\uFFFD'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mPRAGMA
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PRAGMA
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|Token
name|qn
init|=
literal|null
decl_stmt|;
name|Token
name|c
init|=
literal|null
decl_stmt|;
name|String
name|content
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
literal|"(::"
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|"pragma"
argument_list|)
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mPRAGMA_QNAME
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|qn
operator|=
name|_returnToken
expr_stmt|;
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_9
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mPRAGMA_CONTENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|c
operator|=
name|_returnToken
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|content
operator|=
name|c
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
literal|')'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|context
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|context
operator|.
name|addPragma
argument_list|(
name|qn
operator|.
name|getText
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RecognitionException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mPRAGMA_QNAME
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PRAGMA_QNAME
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|mNCNAME
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|':'
case|:
block|{
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|mNCNAME
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mPRAGMA_CONTENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PRAGMA_CONTENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
block|{
name|match
argument_list|(
name|_tokenSet_9
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|int
name|_cnt416
init|=
literal|0
decl_stmt|;
name|_loop416
label|:
do|do
block|{
name|boolean
name|synPredMatched412
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m412
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched412
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|{
name|match
argument_list|(
name|_tokenSet_10
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched412
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m412
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched412
condition|)
block|{
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched415
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m415
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched415
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|{
name|match
argument_list|(
name|_tokenSet_7
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched415
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m415
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched415
condition|)
block|{
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_8
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mCHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt416
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop416
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt416
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mINTEGER_LITERAL
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|INTEGER_LITERAL
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
operator|(
name|inElementContent
operator|||
name|inAttributeContent
operator|)
operator|)
condition|)
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|" !(inElementContent || inAttributeContent) "
argument_list|)
throw|;
name|mDIGITS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mDOUBLE_LITERAL
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DOUBLE_LITERAL
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
if|if
condition|(
operator|!
operator|(
operator|!
operator|(
name|inElementContent
operator|||
name|inAttributeContent
operator|)
operator|)
condition|)
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|" !(inElementContent || inAttributeContent) "
argument_list|)
throw|;
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|mDIGITS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|mDIGITS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'.'
case|:
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|{
name|_loop426
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop426
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
literal|'E'
case|:
case|case
literal|'e'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'e'
case|:
block|{
name|match
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'E'
case|:
block|{
name|match
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'+'
case|:
block|{
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|mDIGITS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mDECIMAL_LITERAL
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DECIMAL_LITERAL
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|inElementContent
operator|||
name|inAttributeContent
operator|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|mDIGITS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|mDIGITS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|{
name|_loop434
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop434
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
else|else
block|{
block|}
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mPREDEFINED_ENTITY_REF
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PREDEFINED_ENTITY_REF
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'l'
case|:
block|{
name|match
argument_list|(
literal|"lt"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'g'
case|:
block|{
name|match
argument_list|(
literal|"gt"
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'q'
case|:
block|{
name|match
argument_list|(
literal|"quot"
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'a'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'m'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"amp"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'a'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'p'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|"apos"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mCHAR_REF
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|CHAR_REF
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mDIGITS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'x'
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
literal|'x'
argument_list|)
expr_stmt|;
name|mHEX_DIGITS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|match
argument_list|(
literal|';'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mSTRING_LITERAL
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|STRING_LITERAL
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'"'
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|_loop444
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'&'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'a'
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'g'
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'l'
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'q'
operator|)
condition|)
block|{
name|mPREDEFINED_ENTITY_REF
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'&'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'#'
operator|)
condition|)
block|{
name|mCHAR_REF
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'"'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'"'
operator|)
condition|)
block|{
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|_tokenSet_11
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_11
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop444
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\''
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|_loop448
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'&'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'a'
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'g'
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'l'
operator|||
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'q'
operator|)
condition|)
block|{
name|mPREDEFINED_ENTITY_REF
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'&'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'#'
operator|)
condition|)
block|{
name|mCHAR_REF
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\''
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'\''
operator|)
condition|)
block|{
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|_tokenSet_12
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_12
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop448
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mQUOT_ATTRIBUTE_CONTENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|QUOT_ATTRIBUTE_CONTENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt452
init|=
literal|0
decl_stmt|;
name|_loop452
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_13
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_13
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|_cnt452
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop452
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt452
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
comment|/**  * The following definition differs from the spec by allowing the  * '&' character, which is handled by the constructor classes.  *  * TODO: Allow escaped quotes in attribute content. Doesn't work.  */
specifier|protected
specifier|final
name|void
name|mAPOS_ATTRIBUTE_CONTENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|APOS_ATTRIBUTE_CONTENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt456
init|=
literal|0
decl_stmt|;
name|_loop456
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_14
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_14
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|_cnt456
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop456
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt456
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
comment|/**  * The following definition differs from the spec by allowing the  * '&' character, which is handled by the constructor classes.  *  * TODO: Allow escaped quotes in attribute content. Doesn't work.  */
specifier|protected
specifier|final
name|void
name|mELEMENT_CONTENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ELEMENT_CONTENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt459
init|=
literal|0
decl_stmt|;
name|_loop459
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
block|{
name|match
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\r'
case|:
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\n'
case|:
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|newline
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|' '
case|:
case|case
literal|'!'
case|:
case|case
literal|'"'
case|:
case|case
literal|'#'
case|:
case|case
literal|'$'
case|:
case|case
literal|'%'
case|:
case|case
literal|'&'
case|:
case|case
literal|'\''
case|:
case|case
literal|'('
case|:
case|case
literal|')'
case|:
case|case
literal|'*'
case|:
case|case
literal|'+'
case|:
case|case
literal|','
case|:
case|case
literal|'-'
case|:
case|case
literal|'.'
case|:
case|case
literal|'/'
case|:
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
case|case
literal|':'
case|:
case|case
literal|';'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0020'
argument_list|,
literal|'\u003b'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'='
case|:
case|case
literal|'>'
case|:
case|case
literal|'?'
case|:
case|case
literal|'@'
case|:
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'['
case|:
case|case
literal|'\\'
case|:
case|case
literal|']'
case|:
case|case
literal|'^'
case|:
case|case
literal|'_'
case|:
case|case
literal|'`'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u003d'
argument_list|,
literal|'\u007a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'|'
case|:
block|{
name|match
argument_list|(
literal|'\u007c'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'~'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\ufffd'
operator|)
operator|)
condition|)
block|{
name|matchRange
argument_list|(
literal|'\u007e'
argument_list|,
literal|'\uFFFD'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt459
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop459
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt459
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mXML_COMMENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XML_COMMENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|"<!--"
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt466
init|=
literal|0
decl_stmt|;
name|_loop466
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_15
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched465
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'-'
operator|)
operator|)
condition|)
block|{
name|int
name|_m465
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched465
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|{
name|match
argument_list|(
name|_tokenSet_15
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched465
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m465
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched465
condition|)
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt466
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop466
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt466
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mXML_PI
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XML_PI
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mXML_PI_START
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mNCNAME
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt473
init|=
literal|0
decl_stmt|;
name|_loop473
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_16
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_16
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched472
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'?'
operator|)
operator|)
condition|)
block|{
name|int
name|_m472
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched472
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|{
name|match
argument_list|(
name|_tokenSet_17
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched472
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m472
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched472
condition|)
block|{
name|match
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt473
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop473
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt473
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mXML_CDATA
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XML_CDATA
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mXML_CDATA_START
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|_loop484
label|:
do|do
block|{
name|boolean
name|synPredMatched479
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|']'
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|4
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|4
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m479
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched479
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|{
name|match
argument_list|(
name|_tokenSet_18
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched479
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m479
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched479
condition|)
block|{
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched482
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|']'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|']'
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|3
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|4
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|4
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m482
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched482
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|{
name|match
argument_list|(
name|_tokenSet_17
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched482
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m482
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched482
condition|)
block|{
block|{
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|_tokenSet_18
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_18
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop484
break|;
block|}
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|mXML_CDATA_END
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
comment|/**  * Main method that decides which token to return next.  * We need this as many things depend on the current  * context.  */
specifier|public
specifier|final
name|void
name|mNEXT_TOKEN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NEXT_TOKEN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|Token
name|ncname
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'{'
case|:
block|{
name|mLCURLY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inElementContent
operator|=
literal|false
expr_stmt|;
name|inAttributeContent
operator|=
literal|false
expr_stmt|;
name|_ttype
operator|=
name|LCURLY
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|'}'
case|:
block|{
name|mRCURLY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|RCURLY
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|boolean
name|synPredMatched489
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'('
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|4
argument_list|)
operator|==
literal|'p'
operator|)
operator|)
condition|)
block|{
name|int
name|_m489
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched489
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|"(::"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched489
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m489
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched489
condition|)
block|{
name|mPRAGMA
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|Token
operator|.
name|SKIP
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'('
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|4
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mEXPR_COMMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|Token
operator|.
name|SKIP
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'!'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
literal|'-'
operator|)
condition|)
block|{
name|mXML_COMMENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|String
name|data
init|=
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
decl_stmt|;
name|parseLinefeeds
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|_ttype
operator|=
name|XML_COMMENT
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'!'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
literal|'['
operator|)
condition|)
block|{
name|mXML_CDATA
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|XML_CDATA
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched503
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_19
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_20
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_21
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|3
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
condition|)
block|{
name|int
name|_m503
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched503
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|mINTEGER_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'.'
case|:
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mINTEGER_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'E'
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'e'
operator|)
condition|)
block|{
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
break|break;
block|}
case|case
literal|'E'
case|:
case|case
literal|'e'
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'e'
case|:
block|{
name|match
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'E'
case|:
block|{
name|match
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched503
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m503
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched503
condition|)
block|{
name|mDOUBLE_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|DOUBLE_LITERAL
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'-'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'-'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
literal|'>'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mXML_COMMENT_END
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|XML_COMMENT_END
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|']'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|']'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|3
argument_list|)
operator|==
literal|'>'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mXML_CDATA_END
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|XML_CDATA_END
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched487
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'?'
operator|)
operator|)
condition|)
block|{
name|int
name|_m487
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched487
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|mXML_PI_START
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched487
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m487
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched487
condition|)
block|{
name|mXML_PI
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|XML_PI
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
name|mEND_TAG_START
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inElementContent
operator|=
literal|false
expr_stmt|;
name|wsExplicit
operator|=
literal|false
expr_stmt|;
name|_ttype
operator|=
name|END_TAG_START
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'='
operator|)
condition|)
block|{
name|mLTEQ
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|LTEQ
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'"'
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\''
operator|)
operator|&&
operator|(
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|>=
literal|'\u0003'
operator|&&
name|LA
argument_list|(
literal|2
argument_list|)
operator|<=
literal|'\ufffe'
operator|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
name|parseStringLiterals
operator|)
condition|)
block|{
name|mSTRING_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|STRING_LITERAL
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched491
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'.'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|inAttributeContent
operator|||
name|inElementContent
operator|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m491
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched491
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched491
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m491
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched491
condition|)
block|{
name|mPARENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|PARENT
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|inAttributeContent
operator|||
name|inElementContent
operator|)
operator|)
condition|)
block|{
name|mDSLASH
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|DSLASH
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'|'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'='
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|inAttributeContent
operator|||
name|inElementContent
operator|)
operator|)
condition|)
block|{
name|mOREQ
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|OREQ
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'&'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'='
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|inAttributeContent
operator|||
name|inElementContent
operator|)
operator|)
condition|)
block|{
name|mANDEQ
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|ANDEQ
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'!'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'='
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|inAttributeContent
operator|||
name|inElementContent
operator|)
operator|)
condition|)
block|{
name|mNEQ
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|NEQ
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'>'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'='
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|inAttributeContent
operator|||
name|inElementContent
operator|)
operator|)
condition|)
block|{
name|mGTEQ
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|GTEQ
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'?'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'>'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mXML_PI_END
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|XML_PI_END
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mLT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inElementContent
operator|=
literal|false
expr_stmt|;
name|_ttype
operator|=
name|LT
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|_tokenSet_13
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
name|inAttributeContent
operator|&&
name|attrDelimChar
operator|==
literal|'"'
operator|)
condition|)
block|{
name|mQUOT_ATTRIBUTE_CONTENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|QUOT_ATTRIBUTE_CONTENT
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|_tokenSet_14
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
name|inAttributeContent
operator|&&
name|attrDelimChar
operator|==
literal|'\''
operator|)
condition|)
block|{
name|mAPOS_ATTRIBUTE_CONTENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|APOS_ATTRIBUTE_CONTENT
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'"'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|parseStringLiterals
operator|||
name|inElementContent
operator|)
operator|)
condition|)
block|{
name|mQUOT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|QUOT
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\''
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
operator|!
operator|(
name|parseStringLiterals
operator|||
name|inElementContent
operator|)
operator|)
condition|)
block|{
name|mAPOS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|APOS
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"APOS"
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
operator|(
name|_tokenSet_22
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
operator|&&
operator|(
name|inElementContent
operator|)
condition|)
block|{
name|mELEMENT_CONTENT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|ELEMENT_CONTENT
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\t'
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\n'
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\r'
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|' '
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mWS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|wsExplicit
condition|)
block|{
name|_ttype
operator|=
name|WS
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_begin
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
literal|"WS"
argument_list|)
expr_stmt|;
block|}
else|else
name|_ttype
operator|=
name|Token
operator|.
name|SKIP
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|_tokenSet_23
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mNCNAME
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|ncname
operator|=
name|_returnToken
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|ncname
operator|.
name|getType
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched494
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_19
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
condition|)
block|{
name|int
name|_m494
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched494
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|mINTEGER_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'e'
case|:
block|{
name|match
argument_list|(
literal|'e'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'E'
case|:
block|{
name|match
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched494
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m494
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched494
condition|)
block|{
name|mDECIMAL_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|DECIMAL_LITERAL
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched496
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_19
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
condition|)
block|{
name|int
name|_m496
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched496
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
name|mINTEGER_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched496
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m496
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched496
condition|)
block|{
name|mDECIMAL_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|DECIMAL_LITERAL
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched498
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
condition|)
block|{
name|int
name|_m498
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched498
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched498
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m498
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched498
condition|)
block|{
name|mSELF
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|SELF
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched505
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_19
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|)
condition|)
block|{
name|int
name|_m505
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched505
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|mINTEGER_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched505
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m505
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched505
condition|)
block|{
name|mDECIMAL_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|DECIMAL_LITERAL
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mINTEGER_LITERAL
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|INTEGER_LITERAL
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mSLASH
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|SLASH
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mCOLON
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|COLON
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|','
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mCOMMA
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|COMMA
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|';'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mSEMICOLON
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|SEMICOLON
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'*'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mSTAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|STAR
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'?'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mQUESTION
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|QUESTION
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'+'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mPLUS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|PLUS
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'-'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mMINUS
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|MINUS
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'['
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mLPPAREN
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|LPPAREN
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|']'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mRPPAREN
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|RPPAREN
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'('
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mLPAREN
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|LPAREN
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|')'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mRPAREN
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|RPAREN
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'|'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mUNION
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|UNION
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'@'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mAT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|AT
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'$'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mDOLLAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|DOLLAR
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'='
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mEQ
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|EQ
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'>'
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mGT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|_ttype
operator|=
name|GT
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2756
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|576460743847706622L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
operator|-
literal|36028797027352577L
expr_stmt|;
name|data
index|[
literal|4
index|]
operator|=
literal|9219994337134247935L
expr_stmt|;
name|data
index|[
literal|5
index|]
operator|=
literal|9223372036854775294L
expr_stmt|;
name|data
index|[
literal|6
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
name|data
index|[
literal|7
index|]
operator|=
operator|-
literal|274156627316187121L
expr_stmt|;
name|data
index|[
literal|8
index|]
operator|=
literal|16777215L
expr_stmt|;
name|data
index|[
literal|9
index|]
operator|=
operator|-
literal|65536L
expr_stmt|;
name|data
index|[
literal|10
index|]
operator|=
operator|-
literal|576458553280167937L
expr_stmt|;
name|data
index|[
literal|11
index|]
operator|=
literal|3L
expr_stmt|;
name|data
index|[
literal|14
index|]
operator|=
operator|-
literal|17179879616L
expr_stmt|;
name|data
index|[
literal|15
index|]
operator|=
literal|4503588160110591L
expr_stmt|;
name|data
index|[
literal|16
index|]
operator|=
operator|-
literal|8194L
expr_stmt|;
name|data
index|[
literal|17
index|]
operator|=
operator|-
literal|536936449L
expr_stmt|;
name|data
index|[
literal|18
index|]
operator|=
operator|-
literal|65533L
expr_stmt|;
name|data
index|[
literal|19
index|]
operator|=
literal|234134404065073567L
expr_stmt|;
name|data
index|[
literal|20
index|]
operator|=
operator|-
literal|562949953421312L
expr_stmt|;
name|data
index|[
literal|21
index|]
operator|=
operator|-
literal|8547991553L
expr_stmt|;
name|data
index|[
literal|22
index|]
operator|=
literal|127L
expr_stmt|;
name|data
index|[
literal|23
index|]
operator|=
literal|1979120929931264L
expr_stmt|;
name|data
index|[
literal|24
index|]
operator|=
literal|576460743713488896L
expr_stmt|;
name|data
index|[
literal|25
index|]
operator|=
operator|-
literal|562949953419266L
expr_stmt|;
name|data
index|[
literal|26
index|]
operator|=
literal|9007199254740991999L
expr_stmt|;
name|data
index|[
literal|27
index|]
operator|=
literal|412319973375L
expr_stmt|;
name|data
index|[
literal|36
index|]
operator|=
literal|2594073385365405664L
expr_stmt|;
name|data
index|[
literal|37
index|]
operator|=
literal|17163091968L
expr_stmt|;
name|data
index|[
literal|38
index|]
operator|=
literal|271902628478820320L
expr_stmt|;
name|data
index|[
literal|39
index|]
operator|=
literal|844440767823872L
expr_stmt|;
name|data
index|[
literal|40
index|]
operator|=
literal|247132830528276448L
expr_stmt|;
name|data
index|[
literal|41
index|]
operator|=
literal|7881300924956672L
expr_stmt|;
name|data
index|[
literal|42
index|]
operator|=
literal|2589004636761075680L
expr_stmt|;
name|data
index|[
literal|43
index|]
operator|=
literal|4294967296L
expr_stmt|;
name|data
index|[
literal|44
index|]
operator|=
literal|2579997437506199520L
expr_stmt|;
name|data
index|[
literal|45
index|]
operator|=
literal|15837691904L
expr_stmt|;
name|data
index|[
literal|46
index|]
operator|=
literal|270153412153034720L
expr_stmt|;
name|data
index|[
literal|48
index|]
operator|=
literal|283724577500946400L
expr_stmt|;
name|data
index|[
literal|49
index|]
operator|=
literal|12884901888L
expr_stmt|;
name|data
index|[
literal|50
index|]
operator|=
literal|283724577500946400L
expr_stmt|;
name|data
index|[
literal|51
index|]
operator|=
literal|13958643712L
expr_stmt|;
name|data
index|[
literal|52
index|]
operator|=
literal|288228177128316896L
expr_stmt|;
name|data
index|[
literal|53
index|]
operator|=
literal|12884901888L
expr_stmt|;
name|data
index|[
literal|56
index|]
operator|=
literal|3799912185593854L
expr_stmt|;
name|data
index|[
literal|57
index|]
operator|=
literal|63L
expr_stmt|;
name|data
index|[
literal|58
index|]
operator|=
literal|2309621682768192918L
expr_stmt|;
name|data
index|[
literal|59
index|]
operator|=
literal|31L
expr_stmt|;
name|data
index|[
literal|61
index|]
operator|=
literal|4398046510847L
expr_stmt|;
name|data
index|[
literal|66
index|]
operator|=
operator|-
literal|4294967296L
expr_stmt|;
name|data
index|[
literal|67
index|]
operator|=
literal|36028797018898495L
expr_stmt|;
name|data
index|[
literal|68
index|]
operator|=
literal|5764607523034749677L
expr_stmt|;
name|data
index|[
literal|69
index|]
operator|=
literal|12493387738468353L
expr_stmt|;
name|data
index|[
literal|70
index|]
operator|=
operator|-
literal|756383734487318528L
expr_stmt|;
name|data
index|[
literal|71
index|]
operator|=
literal|144405459145588743L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|120
init|;
name|i
operator|<=
literal|121
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|122
index|]
operator|=
operator|-
literal|4026531841L
expr_stmt|;
name|data
index|[
literal|123
index|]
operator|=
literal|288230376151711743L
expr_stmt|;
name|data
index|[
literal|124
index|]
operator|=
operator|-
literal|3233808385L
expr_stmt|;
name|data
index|[
literal|125
index|]
operator|=
literal|4611686017001275199L
expr_stmt|;
name|data
index|[
literal|126
index|]
operator|=
literal|6908521828386340863L
expr_stmt|;
name|data
index|[
literal|127
index|]
operator|=
literal|2295745090394464220L
expr_stmt|;
name|data
index|[
literal|132
index|]
operator|=
literal|83837761617920L
expr_stmt|;
name|data
index|[
literal|134
index|]
operator|=
literal|7L
expr_stmt|;
name|data
index|[
literal|193
index|]
operator|=
operator|-
literal|2L
expr_stmt|;
name|data
index|[
literal|194
index|]
operator|=
operator|-
literal|8587837441L
expr_stmt|;
name|data
index|[
literal|195
index|]
operator|=
literal|576460752303423487L
expr_stmt|;
name|data
index|[
literal|196
index|]
operator|=
literal|35184372088800L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|688
init|;
name|i
operator|<=
literal|861
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|862
index|]
operator|=
literal|68719476735L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2504
index|]
decl_stmt|;
name|data
index|[
literal|192
index|]
operator|=
literal|4389456576640L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|312
init|;
name|i
operator|<=
literal|637
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|638
index|]
operator|=
literal|274877906943L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1025
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|287948901175001088L
expr_stmt|;
name|data
index|[
literal|25
index|]
operator|=
literal|4393751543808L
expr_stmt|;
name|data
index|[
literal|27
index|]
operator|=
literal|287948901175001088L
expr_stmt|;
name|data
index|[
literal|37
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|39
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|41
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|43
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|45
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|47
index|]
operator|=
literal|280925220896768L
expr_stmt|;
name|data
index|[
literal|49
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|51
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|53
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|57
index|]
operator|=
literal|67043328L
expr_stmt|;
name|data
index|[
literal|59
index|]
operator|=
literal|67043328L
expr_stmt|;
name|data
index|[
literal|60
index|]
operator|=
literal|4393751543808L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_3
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2756
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|576460743847706622L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
operator|-
literal|36028797027352577L
expr_stmt|;
name|data
index|[
literal|4
index|]
operator|=
literal|9219994337134247935L
expr_stmt|;
name|data
index|[
literal|5
index|]
operator|=
literal|9223372036854775294L
expr_stmt|;
name|data
index|[
literal|6
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
name|data
index|[
literal|7
index|]
operator|=
operator|-
literal|274156627316187121L
expr_stmt|;
name|data
index|[
literal|8
index|]
operator|=
literal|16777215L
expr_stmt|;
name|data
index|[
literal|9
index|]
operator|=
operator|-
literal|65536L
expr_stmt|;
name|data
index|[
literal|10
index|]
operator|=
operator|-
literal|576458553280167937L
expr_stmt|;
name|data
index|[
literal|11
index|]
operator|=
literal|3L
expr_stmt|;
name|data
index|[
literal|14
index|]
operator|=
operator|-
literal|17179879616L
expr_stmt|;
name|data
index|[
literal|15
index|]
operator|=
literal|4503588160110591L
expr_stmt|;
name|data
index|[
literal|16
index|]
operator|=
operator|-
literal|8194L
expr_stmt|;
name|data
index|[
literal|17
index|]
operator|=
operator|-
literal|536936449L
expr_stmt|;
name|data
index|[
literal|18
index|]
operator|=
operator|-
literal|65533L
expr_stmt|;
name|data
index|[
literal|19
index|]
operator|=
literal|234134404065073567L
expr_stmt|;
name|data
index|[
literal|20
index|]
operator|=
operator|-
literal|562949953421312L
expr_stmt|;
name|data
index|[
literal|21
index|]
operator|=
operator|-
literal|8547991553L
expr_stmt|;
name|data
index|[
literal|22
index|]
operator|=
literal|127L
expr_stmt|;
name|data
index|[
literal|23
index|]
operator|=
literal|1979120929931264L
expr_stmt|;
name|data
index|[
literal|24
index|]
operator|=
literal|576460743713488896L
expr_stmt|;
name|data
index|[
literal|25
index|]
operator|=
operator|-
literal|562949953419266L
expr_stmt|;
name|data
index|[
literal|26
index|]
operator|=
literal|9007199254740991999L
expr_stmt|;
name|data
index|[
literal|27
index|]
operator|=
literal|412319973375L
expr_stmt|;
name|data
index|[
literal|36
index|]
operator|=
literal|2594073385365405664L
expr_stmt|;
name|data
index|[
literal|37
index|]
operator|=
literal|17163091968L
expr_stmt|;
name|data
index|[
literal|38
index|]
operator|=
literal|271902628478820320L
expr_stmt|;
name|data
index|[
literal|39
index|]
operator|=
literal|844440767823872L
expr_stmt|;
name|data
index|[
literal|40
index|]
operator|=
literal|247132830528276448L
expr_stmt|;
name|data
index|[
literal|41
index|]
operator|=
literal|7881300924956672L
expr_stmt|;
name|data
index|[
literal|42
index|]
operator|=
literal|2589004636761075680L
expr_stmt|;
name|data
index|[
literal|43
index|]
operator|=
literal|4294967296L
expr_stmt|;
name|data
index|[
literal|44
index|]
operator|=
literal|2579997437506199520L
expr_stmt|;
name|data
index|[
literal|45
index|]
operator|=
literal|15837691904L
expr_stmt|;
name|data
index|[
literal|46
index|]
operator|=
literal|270153412153034720L
expr_stmt|;
name|data
index|[
literal|48
index|]
operator|=
literal|283724577500946400L
expr_stmt|;
name|data
index|[
literal|49
index|]
operator|=
literal|12884901888L
expr_stmt|;
name|data
index|[
literal|50
index|]
operator|=
literal|283724577500946400L
expr_stmt|;
name|data
index|[
literal|51
index|]
operator|=
literal|13958643712L
expr_stmt|;
name|data
index|[
literal|52
index|]
operator|=
literal|288228177128316896L
expr_stmt|;
name|data
index|[
literal|53
index|]
operator|=
literal|12884901888L
expr_stmt|;
name|data
index|[
literal|56
index|]
operator|=
literal|3799912185593854L
expr_stmt|;
name|data
index|[
literal|57
index|]
operator|=
literal|63L
expr_stmt|;
name|data
index|[
literal|58
index|]
operator|=
literal|2309621682768192918L
expr_stmt|;
name|data
index|[
literal|59
index|]
operator|=
literal|31L
expr_stmt|;
name|data
index|[
literal|61
index|]
operator|=
literal|4398046510847L
expr_stmt|;
name|data
index|[
literal|66
index|]
operator|=
operator|-
literal|4294967296L
expr_stmt|;
name|data
index|[
literal|67
index|]
operator|=
literal|36028797018898495L
expr_stmt|;
name|data
index|[
literal|68
index|]
operator|=
literal|5764607523034749677L
expr_stmt|;
name|data
index|[
literal|69
index|]
operator|=
literal|12493387738468353L
expr_stmt|;
name|data
index|[
literal|70
index|]
operator|=
operator|-
literal|756383734487318528L
expr_stmt|;
name|data
index|[
literal|71
index|]
operator|=
literal|144405459145588743L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|120
init|;
name|i
operator|<=
literal|121
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|122
index|]
operator|=
operator|-
literal|4026531841L
expr_stmt|;
name|data
index|[
literal|123
index|]
operator|=
literal|288230376151711743L
expr_stmt|;
name|data
index|[
literal|124
index|]
operator|=
operator|-
literal|3233808385L
expr_stmt|;
name|data
index|[
literal|125
index|]
operator|=
literal|4611686017001275199L
expr_stmt|;
name|data
index|[
literal|126
index|]
operator|=
literal|6908521828386340863L
expr_stmt|;
name|data
index|[
literal|127
index|]
operator|=
literal|2295745090394464220L
expr_stmt|;
name|data
index|[
literal|132
index|]
operator|=
literal|83837761617920L
expr_stmt|;
name|data
index|[
literal|134
index|]
operator|=
literal|7L
expr_stmt|;
name|data
index|[
literal|192
index|]
operator|=
literal|4389456576640L
expr_stmt|;
name|data
index|[
literal|193
index|]
operator|=
operator|-
literal|2L
expr_stmt|;
name|data
index|[
literal|194
index|]
operator|=
operator|-
literal|8587837441L
expr_stmt|;
name|data
index|[
literal|195
index|]
operator|=
literal|576460752303423487L
expr_stmt|;
name|data
index|[
literal|196
index|]
operator|=
literal|35184372088800L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|312
init|;
name|i
operator|<=
literal|637
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|638
index|]
operator|=
literal|274877906943L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|688
init|;
name|i
operator|<=
literal|861
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|862
index|]
operator|=
literal|68719476735L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_3
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_4
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1025
index|]
decl_stmt|;
name|data
index|[
literal|12
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
name|data
index|[
literal|13
index|]
operator|=
literal|12884901951L
expr_stmt|;
name|data
index|[
literal|18
index|]
operator|=
literal|120L
expr_stmt|;
name|data
index|[
literal|22
index|]
operator|=
operator|-
literal|4899916411759099904L
expr_stmt|;
name|data
index|[
literal|23
index|]
operator|=
literal|22L
expr_stmt|;
name|data
index|[
literal|25
index|]
operator|=
literal|281474977232896L
expr_stmt|;
name|data
index|[
literal|27
index|]
operator|=
literal|67757399867392L
expr_stmt|;
name|data
index|[
literal|36
index|]
operator|=
operator|-
literal|3458764513820540914L
expr_stmt|;
name|data
index|[
literal|37
index|]
operator|=
literal|51541590015L
expr_stmt|;
name|data
index|[
literal|38
index|]
operator|=
operator|-
literal|3458764513820540914L
expr_stmt|;
name|data
index|[
literal|39
index|]
operator|=
literal|51548010911L
expr_stmt|;
name|data
index|[
literal|40
index|]
operator|=
operator|-
literal|3458764513820540924L
expr_stmt|;
name|data
index|[
literal|41
index|]
operator|=
literal|844424930146695L
expr_stmt|;
name|data
index|[
literal|42
index|]
operator|=
operator|-
literal|3458764513820540914L
expr_stmt|;
name|data
index|[
literal|43
index|]
operator|=
literal|15295L
expr_stmt|;
name|data
index|[
literal|44
index|]
operator|=
operator|-
literal|3458764513820540914L
expr_stmt|;
name|data
index|[
literal|45
index|]
operator|=
literal|12597647L
expr_stmt|;
name|data
index|[
literal|46
index|]
operator|=
operator|-
literal|4611686018427387892L
expr_stmt|;
name|data
index|[
literal|47
index|]
operator|=
literal|8404423L
expr_stmt|;
name|data
index|[
literal|48
index|]
operator|=
operator|-
literal|4611686018427387890L
expr_stmt|;
name|data
index|[
literal|49
index|]
operator|=
literal|6307295L
expr_stmt|;
name|data
index|[
literal|50
index|]
operator|=
operator|-
literal|4611686018427387892L
expr_stmt|;
name|data
index|[
literal|51
index|]
operator|=
literal|6307295L
expr_stmt|;
name|data
index|[
literal|52
index|]
operator|=
operator|-
literal|4611686018427387892L
expr_stmt|;
name|data
index|[
literal|53
index|]
operator|=
literal|8404431L
expr_stmt|;
name|data
index|[
literal|56
index|]
operator|=
literal|572520102629474304L
expr_stmt|;
name|data
index|[
literal|57
index|]
operator|=
literal|32640L
expr_stmt|;
name|data
index|[
literal|58
index|]
operator|=
literal|2013671983388033024L
expr_stmt|;
name|data
index|[
literal|59
index|]
operator|=
literal|16128L
expr_stmt|;
name|data
index|[
literal|60
index|]
operator|=
operator|-
literal|4422534834027495424L
expr_stmt|;
name|data
index|[
literal|61
index|]
operator|=
operator|-
literal|562949953421312L
expr_stmt|;
name|data
index|[
literal|62
index|]
operator|=
literal|215680200883507167L
expr_stmt|;
name|data
index|[
literal|131
index|]
operator|=
literal|9126739968L
expr_stmt|;
name|data
index|[
literal|192
index|]
operator|=
literal|277076930199552L
expr_stmt|;
name|data
index|[
literal|194
index|]
operator|=
literal|100663296L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_4
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_4
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_5
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2756
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|288054454291267584L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|576460745995190270L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|36028797018963968L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
operator|-
literal|36028797027352577L
expr_stmt|;
name|data
index|[
literal|4
index|]
operator|=
literal|9219994337134247935L
expr_stmt|;
name|data
index|[
literal|5
index|]
operator|=
literal|9223372036854775294L
expr_stmt|;
name|data
index|[
literal|6
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
name|data
index|[
literal|7
index|]
operator|=
operator|-
literal|274156627316187121L
expr_stmt|;
name|data
index|[
literal|8
index|]
operator|=
literal|16777215L
expr_stmt|;
name|data
index|[
literal|9
index|]
operator|=
operator|-
literal|65536L
expr_stmt|;
name|data
index|[
literal|10
index|]
operator|=
operator|-
literal|576458553280167937L
expr_stmt|;
name|data
index|[
literal|11
index|]
operator|=
literal|196611L
expr_stmt|;
name|data
index|[
literal|12
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
name|data
index|[
literal|13
index|]
operator|=
literal|12884901951L
expr_stmt|;
name|data
index|[
literal|14
index|]
operator|=
operator|-
literal|17179879488L
expr_stmt|;
name|data
index|[
literal|15
index|]
operator|=
literal|4503588160110591L
expr_stmt|;
name|data
index|[
literal|16
index|]
operator|=
operator|-
literal|8194L
expr_stmt|;
name|data
index|[
literal|17
index|]
operator|=
operator|-
literal|536936449L
expr_stmt|;
name|data
index|[
literal|18
index|]
operator|=
operator|-
literal|65413L
expr_stmt|;
name|data
index|[
literal|19
index|]
operator|=
literal|234134404065073567L
expr_stmt|;
name|data
index|[
literal|20
index|]
operator|=
operator|-
literal|562949953421312L
expr_stmt|;
name|data
index|[
literal|21
index|]
operator|=
operator|-
literal|8547991553L
expr_stmt|;
name|data
index|[
literal|22
index|]
operator|=
operator|-
literal|4899916411759099777L
expr_stmt|;
name|data
index|[
literal|23
index|]
operator|=
literal|1979120929931286L
expr_stmt|;
name|data
index|[
literal|24
index|]
operator|=
literal|576460743713488896L
expr_stmt|;
name|data
index|[
literal|25
index|]
operator|=
operator|-
literal|277081224642561L
expr_stmt|;
name|data
index|[
literal|26
index|]
operator|=
literal|9007199254740991999L
expr_stmt|;
name|data
index|[
literal|27
index|]
operator|=
literal|288017070894841855L
expr_stmt|;
name|data
index|[
literal|36
index|]
operator|=
operator|-
literal|864691128455135250L
expr_stmt|;
name|data
index|[
literal|37
index|]
operator|=
literal|281268803485695L
expr_stmt|;
name|data
index|[
literal|38
index|]
operator|=
operator|-
literal|3186861885341720594L
expr_stmt|;
name|data
index|[
literal|39
index|]
operator|=
literal|1125692414638495L
expr_stmt|;
name|data
index|[
literal|40
index|]
operator|=
operator|-
literal|3211631683292264476L
expr_stmt|;
name|data
index|[
literal|41
index|]
operator|=
literal|9006925953907079L
expr_stmt|;
name|data
index|[
literal|42
index|]
operator|=
operator|-
literal|869759877059465234L
expr_stmt|;
name|data
index|[
literal|43
index|]
operator|=
literal|281204393786303L
expr_stmt|;
name|data
index|[
literal|44
index|]
operator|=
operator|-
literal|878767076314341394L
expr_stmt|;
name|data
index|[
literal|45
index|]
operator|=
literal|281215949093263L
expr_stmt|;
name|data
index|[
literal|46
index|]
operator|=
operator|-
literal|4341532606274353172L
expr_stmt|;
name|data
index|[
literal|47
index|]
operator|=
literal|280925229301191L
expr_stmt|;
name|data
index|[
literal|48
index|]
operator|=
operator|-
literal|4327961440926441490L
expr_stmt|;
name|data
index|[
literal|49
index|]
operator|=
literal|281212990012895L
expr_stmt|;
name|data
index|[
literal|50
index|]
operator|=
operator|-
literal|4327961440926441492L
expr_stmt|;
name|data
index|[
literal|51
index|]
operator|=
literal|281214063754719L
expr_stmt|;
name|data
index|[
literal|52
index|]
operator|=
operator|-
literal|4323457841299070996L
expr_stmt|;
name|data
index|[
literal|53
index|]
operator|=
literal|281212992110031L
expr_stmt|;
name|data
index|[
literal|56
index|]
operator|=
literal|576320014815068158L
expr_stmt|;
name|data
index|[
literal|57
index|]
operator|=
literal|67076095L
expr_stmt|;
name|data
index|[
literal|58
index|]
operator|=
literal|4323293666156225942L
expr_stmt|;
name|data
index|[
literal|59
index|]
operator|=
literal|67059551L
expr_stmt|;
name|data
index|[
literal|60
index|]
operator|=
operator|-
literal|4422530440275951616L
expr_stmt|;
name|data
index|[
literal|61
index|]
operator|=
operator|-
literal|558551906910465L
expr_stmt|;
name|data
index|[
literal|62
index|]
operator|=
literal|215680200883507167L
expr_stmt|;
name|data
index|[
literal|66
index|]
operator|=
operator|-
literal|4294967296L
expr_stmt|;
name|data
index|[
literal|67
index|]
operator|=
literal|36028797018898495L
expr_stmt|;
name|data
index|[
literal|68
index|]
operator|=
literal|5764607523034749677L
expr_stmt|;
name|data
index|[
literal|69
index|]
operator|=
literal|12493387738468353L
expr_stmt|;
name|data
index|[
literal|70
index|]
operator|=
operator|-
literal|756383734487318528L
expr_stmt|;
name|data
index|[
literal|71
index|]
operator|=
literal|144405459145588743L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|120
init|;
name|i
operator|<=
literal|121
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|122
index|]
operator|=
operator|-
literal|4026531841L
expr_stmt|;
name|data
index|[
literal|123
index|]
operator|=
literal|288230376151711743L
expr_stmt|;
name|data
index|[
literal|124
index|]
operator|=
operator|-
literal|3233808385L
expr_stmt|;
name|data
index|[
literal|125
index|]
operator|=
literal|4611686017001275199L
expr_stmt|;
name|data
index|[
literal|126
index|]
operator|=
literal|6908521828386340863L
expr_stmt|;
name|data
index|[
literal|127
index|]
operator|=
literal|2295745090394464220L
expr_stmt|;
name|data
index|[
literal|131
index|]
operator|=
literal|9126739968L
expr_stmt|;
name|data
index|[
literal|132
index|]
operator|=
literal|83837761617920L
expr_stmt|;
name|data
index|[
literal|134
index|]
operator|=
literal|7L
expr_stmt|;
name|data
index|[
literal|192
index|]
operator|=
literal|17732914942836896L
expr_stmt|;
name|data
index|[
literal|193
index|]
operator|=
operator|-
literal|2L
expr_stmt|;
name|data
index|[
literal|194
index|]
operator|=
operator|-
literal|6876561409L
expr_stmt|;
name|data
index|[
literal|195
index|]
operator|=
literal|8646911284551352319L
expr_stmt|;
name|data
index|[
literal|196
index|]
operator|=
literal|35184372088800L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|312
init|;
name|i
operator|<=
literal|637
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|638
index|]
operator|=
literal|274877906943L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|688
init|;
name|i
operator|<=
literal|861
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|862
index|]
operator|=
literal|68719476735L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_5
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_5
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_6
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|3588
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|4294957568L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|863
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|896
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|4611686018427387903L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_6
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_6
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_7
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|2199023255560L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_7
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_7
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_8
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|3588
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|288230380446669312L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|863
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|896
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|4611686018427387903L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_8
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_8
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_9
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|4294977032L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_9
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_9
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_10
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|288230376151711752L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_10
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_10
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_11
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|292057776136L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_11
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_11
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_12
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|824633720840L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_12
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_12
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_13
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|1152921521786716168L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|2882303761517117441L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_13
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_13
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_14
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|1152922054362660872L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|2882303761517117441L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_14
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_14
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_15
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|35184372088840L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_15
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_15
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_16
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|9223372036854775800L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_16
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_16
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_17
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|4611686018427387912L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_17
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_17
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_18
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|8L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|536870913L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_18
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_18
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_19
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1025
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|288019269919178752L
expr_stmt|;
name|data
index|[
literal|25
index|]
operator|=
literal|4393751543808L
expr_stmt|;
name|data
index|[
literal|27
index|]
operator|=
literal|287948901175001088L
expr_stmt|;
name|data
index|[
literal|37
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|39
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|41
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|43
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|45
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|47
index|]
operator|=
literal|280925220896768L
expr_stmt|;
name|data
index|[
literal|49
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|51
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|53
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|57
index|]
operator|=
literal|67043328L
expr_stmt|;
name|data
index|[
literal|59
index|]
operator|=
literal|67043328L
expr_stmt|;
name|data
index|[
literal|60
index|]
operator|=
literal|4393751543808L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_19
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_19
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_20
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1025
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|288019269919178752L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|137438953504L
expr_stmt|;
name|data
index|[
literal|25
index|]
operator|=
literal|4393751543808L
expr_stmt|;
name|data
index|[
literal|27
index|]
operator|=
literal|287948901175001088L
expr_stmt|;
name|data
index|[
literal|37
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|39
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|41
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|43
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|45
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|47
index|]
operator|=
literal|280925220896768L
expr_stmt|;
name|data
index|[
literal|49
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|51
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|53
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|57
index|]
operator|=
literal|67043328L
expr_stmt|;
name|data
index|[
literal|59
index|]
operator|=
literal|67043328L
expr_stmt|;
name|data
index|[
literal|60
index|]
operator|=
literal|4393751543808L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_20
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_20
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_21
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1025
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|288063250384289792L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|137438953504L
expr_stmt|;
name|data
index|[
literal|25
index|]
operator|=
literal|4393751543808L
expr_stmt|;
name|data
index|[
literal|27
index|]
operator|=
literal|287948901175001088L
expr_stmt|;
name|data
index|[
literal|37
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|39
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|41
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|43
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|45
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|47
index|]
operator|=
literal|280925220896768L
expr_stmt|;
name|data
index|[
literal|49
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|51
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|53
index|]
operator|=
literal|281200098803712L
expr_stmt|;
name|data
index|[
literal|57
index|]
operator|=
literal|67043328L
expr_stmt|;
name|data
index|[
literal|59
index|]
operator|=
literal|67043328L
expr_stmt|;
name|data
index|[
literal|60
index|]
operator|=
literal|4393751543808L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_21
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_21
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_22
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|1152921508901804544L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|2882303761517117441L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|4611686018427387903L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_22
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_22
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_23
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2756
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|576460745995190270L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
operator|-
literal|36028797027352577L
expr_stmt|;
name|data
index|[
literal|4
index|]
operator|=
literal|9219994337134247935L
expr_stmt|;
name|data
index|[
literal|5
index|]
operator|=
literal|9223372036854775294L
expr_stmt|;
name|data
index|[
literal|6
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
name|data
index|[
literal|7
index|]
operator|=
operator|-
literal|274156627316187121L
expr_stmt|;
name|data
index|[
literal|8
index|]
operator|=
literal|16777215L
expr_stmt|;
name|data
index|[
literal|9
index|]
operator|=
operator|-
literal|65536L
expr_stmt|;
name|data
index|[
literal|10
index|]
operator|=
operator|-
literal|576458553280167937L
expr_stmt|;
name|data
index|[
literal|11
index|]
operator|=
literal|3L
expr_stmt|;
name|data
index|[
literal|14
index|]
operator|=
operator|-
literal|17179879616L
expr_stmt|;
name|data
index|[
literal|15
index|]
operator|=
literal|4503588160110591L
expr_stmt|;
name|data
index|[
literal|16
index|]
operator|=
operator|-
literal|8194L
expr_stmt|;
name|data
index|[
literal|17
index|]
operator|=
operator|-
literal|536936449L
expr_stmt|;
name|data
index|[
literal|18
index|]
operator|=
operator|-
literal|65533L
expr_stmt|;
name|data
index|[
literal|19
index|]
operator|=
literal|234134404065073567L
expr_stmt|;
name|data
index|[
literal|20
index|]
operator|=
operator|-
literal|562949953421312L
expr_stmt|;
name|data
index|[
literal|21
index|]
operator|=
operator|-
literal|8547991553L
expr_stmt|;
name|data
index|[
literal|22
index|]
operator|=
literal|127L
expr_stmt|;
name|data
index|[
literal|23
index|]
operator|=
literal|1979120929931264L
expr_stmt|;
name|data
index|[
literal|24
index|]
operator|=
literal|576460743713488896L
expr_stmt|;
name|data
index|[
literal|25
index|]
operator|=
operator|-
literal|562949953419266L
expr_stmt|;
name|data
index|[
literal|26
index|]
operator|=
literal|9007199254740991999L
expr_stmt|;
name|data
index|[
literal|27
index|]
operator|=
literal|412319973375L
expr_stmt|;
name|data
index|[
literal|36
index|]
operator|=
literal|2594073385365405664L
expr_stmt|;
name|data
index|[
literal|37
index|]
operator|=
literal|17163091968L
expr_stmt|;
name|data
index|[
literal|38
index|]
operator|=
literal|271902628478820320L
expr_stmt|;
name|data
index|[
literal|39
index|]
operator|=
literal|844440767823872L
expr_stmt|;
name|data
index|[
literal|40
index|]
operator|=
literal|247132830528276448L
expr_stmt|;
name|data
index|[
literal|41
index|]
operator|=
literal|7881300924956672L
expr_stmt|;
name|data
index|[
literal|42
index|]
operator|=
literal|2589004636761075680L
expr_stmt|;
name|data
index|[
literal|43
index|]
operator|=
literal|4294967296L
expr_stmt|;
name|data
index|[
literal|44
index|]
operator|=
literal|2579997437506199520L
expr_stmt|;
name|data
index|[
literal|45
index|]
operator|=
literal|15837691904L
expr_stmt|;
name|data
index|[
literal|46
index|]
operator|=
literal|270153412153034720L
expr_stmt|;
name|data
index|[
literal|48
index|]
operator|=
literal|283724577500946400L
expr_stmt|;
name|data
index|[
literal|49
index|]
operator|=
literal|12884901888L
expr_stmt|;
name|data
index|[
literal|50
index|]
operator|=
literal|283724577500946400L
expr_stmt|;
name|data
index|[
literal|51
index|]
operator|=
literal|13958643712L
expr_stmt|;
name|data
index|[
literal|52
index|]
operator|=
literal|288228177128316896L
expr_stmt|;
name|data
index|[
literal|53
index|]
operator|=
literal|12884901888L
expr_stmt|;
name|data
index|[
literal|56
index|]
operator|=
literal|3799912185593854L
expr_stmt|;
name|data
index|[
literal|57
index|]
operator|=
literal|63L
expr_stmt|;
name|data
index|[
literal|58
index|]
operator|=
literal|2309621682768192918L
expr_stmt|;
name|data
index|[
literal|59
index|]
operator|=
literal|31L
expr_stmt|;
name|data
index|[
literal|61
index|]
operator|=
literal|4398046510847L
expr_stmt|;
name|data
index|[
literal|66
index|]
operator|=
operator|-
literal|4294967296L
expr_stmt|;
name|data
index|[
literal|67
index|]
operator|=
literal|36028797018898495L
expr_stmt|;
name|data
index|[
literal|68
index|]
operator|=
literal|5764607523034749677L
expr_stmt|;
name|data
index|[
literal|69
index|]
operator|=
literal|12493387738468353L
expr_stmt|;
name|data
index|[
literal|70
index|]
operator|=
operator|-
literal|756383734487318528L
expr_stmt|;
name|data
index|[
literal|71
index|]
operator|=
literal|144405459145588743L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|120
init|;
name|i
operator|<=
literal|121
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|122
index|]
operator|=
operator|-
literal|4026531841L
expr_stmt|;
name|data
index|[
literal|123
index|]
operator|=
literal|288230376151711743L
expr_stmt|;
name|data
index|[
literal|124
index|]
operator|=
operator|-
literal|3233808385L
expr_stmt|;
name|data
index|[
literal|125
index|]
operator|=
literal|4611686017001275199L
expr_stmt|;
name|data
index|[
literal|126
index|]
operator|=
literal|6908521828386340863L
expr_stmt|;
name|data
index|[
literal|127
index|]
operator|=
literal|2295745090394464220L
expr_stmt|;
name|data
index|[
literal|132
index|]
operator|=
literal|83837761617920L
expr_stmt|;
name|data
index|[
literal|134
index|]
operator|=
literal|7L
expr_stmt|;
name|data
index|[
literal|192
index|]
operator|=
literal|4389456576640L
expr_stmt|;
name|data
index|[
literal|193
index|]
operator|=
operator|-
literal|2L
expr_stmt|;
name|data
index|[
literal|194
index|]
operator|=
operator|-
literal|8587837441L
expr_stmt|;
name|data
index|[
literal|195
index|]
operator|=
literal|576460752303423487L
expr_stmt|;
name|data
index|[
literal|196
index|]
operator|=
literal|35184372088800L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|312
init|;
name|i
operator|<=
literal|637
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|638
index|]
operator|=
literal|274877906943L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|688
init|;
name|i
operator|<=
literal|861
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|862
index|]
operator|=
literal|68719476735L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_23
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_23
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

