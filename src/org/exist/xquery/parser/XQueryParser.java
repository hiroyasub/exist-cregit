begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.7 (2006-11-01): "XQuery.g" -> "XQueryParser.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|debug
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
operator|.
name|*
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LLkParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ParserSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTFactory
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTPair
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|ASTArray
import|;
end_import

begin_comment
comment|/** eXist parses an XQuery expression in (currently) 4 phases:  1) lexical analysis in XQueryLexer 2) syntax analysis and construction of an intermediate AST (abstract 	syntax tree) in XQueryParser 3) analysis of the intermediate AST, and construction of the executable XQuery  	expression tree from the intermediate AST in {@link XQueryTreeParser} 4) static analysis of the final expression tree  The grammar in XQuery.g corresponds to phase 2. It generates an intermediate AST which will then be parsed a second time by XQueryTree.g.  ANTLR provides a special syntax for tree parsers. Every action returns an AST node and the # references these nodes. #[VARIABLE_BINDING, varName] constructs a new AST node of type VARIABLE_BINDING, which is prepended to the default AST generated by the production.  ANTLR's meta language for tree construction is described in the ANTLR reference manual: http://www.antlr.org/doc/index.html .    */
end_comment

begin_class
specifier|public
class|class
name|XQueryParser
extends|extends
name|antlr
operator|.
name|LLkParser
implements|implements
name|XQueryTokenTypes
block|{
specifier|protected
name|ArrayList
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|foundError
init|=
literal|false
decl_stmt|;
specifier|protected
name|Stack
name|globalStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
name|Stack
name|elementStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
name|XQueryLexer
name|lexer
decl_stmt|;
specifier|public
name|XQueryParser
parameter_list|(
name|XQueryLexer
name|lexer
parameter_list|)
block|{
name|this
argument_list|(
operator|(
name|TokenStream
operator|)
name|lexer
argument_list|)
expr_stmt|;
name|this
operator|.
name|lexer
operator|=
name|lexer
expr_stmt|;
name|setASTNodeClass
argument_list|(
literal|"org.exist.xquery.parser.XQueryAST"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|foundErrors
parameter_list|()
block|{
return|return
name|foundError
return|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exceptions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Exception
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|foundError
operator|=
literal|true
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XQueryParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|tokenBuf
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|)
block|{
name|this
argument_list|(
name|tokenBuf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XQueryParser
parameter_list|(
name|TokenStream
name|lexer
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|lexer
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryParser
parameter_list|(
name|TokenStream
name|lexer
parameter_list|)
block|{
name|this
argument_list|(
name|lexer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQueryParser
parameter_list|(
name|ParserSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|imaginaryTokenDefinitions
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|imaginaryTokenDefinitions_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp1_AST
init|=
literal|null
decl_stmt|;
name|tmp1_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp1_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QNAME
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp2_AST
init|=
literal|null
decl_stmt|;
name|tmp2_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp2_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PREDICATE
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp3_AST
init|=
literal|null
decl_stmt|;
name|tmp3_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp3_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FLWOR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp4_AST
init|=
literal|null
decl_stmt|;
name|tmp4_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp4_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PARENTHESIZED
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp5_AST
init|=
literal|null
decl_stmt|;
name|tmp5_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp5_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ABSOLUTE_SLASH
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp6_AST
init|=
literal|null
decl_stmt|;
name|tmp6_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp6_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ABSOLUTE_DSLASH
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp7_AST
init|=
literal|null
decl_stmt|;
name|tmp7_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp7_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WILDCARD
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp8_AST
init|=
literal|null
decl_stmt|;
name|tmp8_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp8_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PREFIX_WILDCARD
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp9_AST
init|=
literal|null
decl_stmt|;
name|tmp9_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp9_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FUNCTION
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp10_AST
init|=
literal|null
decl_stmt|;
name|tmp10_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp10_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DYNAMIC_FCALL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp11_AST
init|=
literal|null
decl_stmt|;
name|tmp11_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp11_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|UNARY_MINUS
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp12_AST
init|=
literal|null
decl_stmt|;
name|tmp12_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp12_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|UNARY_PLUS
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp13_AST
init|=
literal|null
decl_stmt|;
name|tmp13_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp13_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XPOINTER
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp14_AST
init|=
literal|null
decl_stmt|;
name|tmp14_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp14_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XPOINTER_ID
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp15_AST
init|=
literal|null
decl_stmt|;
name|tmp15_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp15_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|VARIABLE_REF
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp16_AST
init|=
literal|null
decl_stmt|;
name|tmp16_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp16_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|VARIABLE_BINDING
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp17_AST
init|=
literal|null
decl_stmt|;
name|tmp17_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp17_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ELEMENT
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp18_AST
init|=
literal|null
decl_stmt|;
name|tmp18_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp18_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp19_AST
init|=
literal|null
decl_stmt|;
name|tmp19_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp19_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ATTRIBUTE_CONTENT
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp20_AST
init|=
literal|null
decl_stmt|;
name|tmp20_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp20_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TEXT
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp21_AST
init|=
literal|null
decl_stmt|;
name|tmp21_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp21_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|VERSION_DECL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp22_AST
init|=
literal|null
decl_stmt|;
name|tmp22_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp22_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NAMESPACE_DECL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp23_AST
init|=
literal|null
decl_stmt|;
name|tmp23_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp23_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DEF_NAMESPACE_DECL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp24_AST
init|=
literal|null
decl_stmt|;
name|tmp24_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp24_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DEF_COLLATION_DECL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp25_AST
init|=
literal|null
decl_stmt|;
name|tmp25_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp25_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DEF_FUNCTION_NS_DECL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp26_AST
init|=
literal|null
decl_stmt|;
name|tmp26_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp26_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ANNOT_DECL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp27_AST
init|=
literal|null
decl_stmt|;
name|tmp27_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp27_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GLOBAL_VAR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp28_AST
init|=
literal|null
decl_stmt|;
name|tmp28_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp28_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FUNCTION_DECL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp29_AST
init|=
literal|null
decl_stmt|;
name|tmp29_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp29_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FUNCTION_INLINE
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp30_AST
init|=
literal|null
decl_stmt|;
name|tmp30_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp30_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FUNCTION_TEST
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp31_AST
init|=
literal|null
decl_stmt|;
name|tmp31_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp31_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PROLOG
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp32_AST
init|=
literal|null
decl_stmt|;
name|tmp32_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp32_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|OPTION
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp33_AST
init|=
literal|null
decl_stmt|;
name|tmp33_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp33_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ATOMIC_TYPE
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp34_AST
init|=
literal|null
decl_stmt|;
name|tmp34_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp34_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MODULE
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp35_AST
init|=
literal|null
decl_stmt|;
name|tmp35_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp35_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ORDER_BY
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp36_AST
init|=
literal|null
decl_stmt|;
name|tmp36_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp36_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GROUP_BY
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp37_AST
init|=
literal|null
decl_stmt|;
name|tmp37_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp37_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|POSITIONAL_VAR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp38_AST
init|=
literal|null
decl_stmt|;
name|tmp38_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp38_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CATCH_ERROR_CODE
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp39_AST
init|=
literal|null
decl_stmt|;
name|tmp39_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp39_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CATCH_ERROR_DESC
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp40_AST
init|=
literal|null
decl_stmt|;
name|tmp40_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp40_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CATCH_ERROR_VAL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp41_AST
init|=
literal|null
decl_stmt|;
name|tmp41_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp41_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MODULE_DECL
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp42_AST
init|=
literal|null
decl_stmt|;
name|tmp42_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp42_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MODULE_IMPORT
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp43_AST
init|=
literal|null
decl_stmt|;
name|tmp43_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp43_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SCHEMA_IMPORT
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp44_AST
init|=
literal|null
decl_stmt|;
name|tmp44_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp44_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ATTRIBUTE_TEST
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp45_AST
init|=
literal|null
decl_stmt|;
name|tmp45_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp45_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMP_ELEM_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp46_AST
init|=
literal|null
decl_stmt|;
name|tmp46_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp46_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMP_ATTR_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp47_AST
init|=
literal|null
decl_stmt|;
name|tmp47_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp47_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMP_TEXT_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp48_AST
init|=
literal|null
decl_stmt|;
name|tmp48_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp48_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMP_COMMENT_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp49_AST
init|=
literal|null
decl_stmt|;
name|tmp49_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp49_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMP_PI_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp50_AST
init|=
literal|null
decl_stmt|;
name|tmp50_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp50_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMP_NS_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp51_AST
init|=
literal|null
decl_stmt|;
name|tmp51_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp51_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMP_DOC_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp52_AST
init|=
literal|null
decl_stmt|;
name|tmp52_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp52_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PRAGMA
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp53_AST
init|=
literal|null
decl_stmt|;
name|tmp53_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp53_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GTEQ
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp54_AST
init|=
literal|null
decl_stmt|;
name|tmp54_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp54_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEQUENCE
argument_list|)
expr_stmt|;
name|imaginaryTokenDefinitions_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|imaginaryTokenDefinitions_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpointer
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|xpointer_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|ex_AST
init|=
literal|null
decl_stmt|;
name|Token
name|nc
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nc_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp55_AST
init|=
literal|null
decl_stmt|;
name|tmp55_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp55_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_xpointer
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|ex_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|xpointer_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|xpointer_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|XPOINTER
argument_list|,
literal|"xpointer"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|ex_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|xpointer_AST
operator|!=
literal|null
operator|&&
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|xpointer_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
block|{
name|nc
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nc_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|nc_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|xpointer_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|xpointer_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|XPOINTER_ID
argument_list|,
literal|"id"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|nc_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|xpointer_AST
operator|!=
literal|null
operator|&&
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|xpointer_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|xpointer_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|expr_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|isSequence
init|=
literal|false
decl_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop137
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|isSequence
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop137
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|expr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
if|if
condition|(
name|isSequence
condition|)
name|expr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|SEQUENCE
argument_list|,
literal|"sequence"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|expr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|expr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|expr_AST
operator|!=
literal|null
operator|&&
name|expr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|expr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|expr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|expr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|expr_AST
expr_stmt|;
block|}
comment|/** top-rule */
specifier|public
specifier|final
name|void
name|xpath
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|xpath_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|module
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|EOF
operator|)
condition|)
block|{
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp59_AST
init|=
literal|null
decl_stmt|;
name|tmp59_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp59_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
name|xpath_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
comment|// TODO: WM: not sure if we need handleException anymore.
comment|// we could just throw the exception.
name|handleException
argument_list|(
operator|new
name|XPathException
argument_list|(
literal|"err:XPST0003 in line "
operator|+
name|e
operator|.
name|getLine
argument_list|()
operator|+
literal|", column "
operator|+
name|e
operator|.
name|getColumn
argument_list|()
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|returnAST
operator|=
name|xpath_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|module
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|module_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v_AST
init|=
literal|null
decl_stmt|;
block|{
name|boolean
name|synPredMatched8
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_xquery
operator|)
operator|)
condition|)
block|{
name|int
name|_m8
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched8
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_xquery
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_version
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched8
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m8
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched8
condition|)
block|{
name|versionDecl
argument_list|()
expr_stmt|;
name|v_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
name|boolean
name|synPredMatched11
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_module
operator|)
operator|)
condition|)
block|{
name|int
name|_m11
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched11
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_module
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched11
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m11
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched11
condition|)
block|{
name|libraryModule
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mainModule
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|module_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|module_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|versionDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|versionDecl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|v
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v_AST
init|=
literal|null
decl_stmt|;
name|Token
name|enc
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|enc_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp61_AST
init|=
literal|null
decl_stmt|;
name|tmp61_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp61_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_xquery
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp62_AST
init|=
literal|null
decl_stmt|;
name|tmp62_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp62_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_version
argument_list|)
expr_stmt|;
name|v
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|v_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|v_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_encoding
case|:
block|{
name|match
argument_list|(
name|LITERAL_encoding
argument_list|)
expr_stmt|;
name|enc
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|enc_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|enc
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|enc_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMICOLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|versionDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|versionDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VERSION_DECL
argument_list|,
name|v
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|enc_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|versionDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|versionDecl_AST
operator|!=
literal|null
operator|&&
name|versionDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|versionDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|versionDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|versionDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|versionDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|libraryModule
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|libraryModule_AST
init|=
literal|null
decl_stmt|;
name|moduleDecl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|prolog
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|libraryModule_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|libraryModule_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mainModule
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|mainModule_AST
init|=
literal|null
decl_stmt|;
name|prolog
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|PRAGMA_START
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|queryBody
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|mainModule_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|mainModule_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|prolog
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|prolog_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|s_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|inSetters
init|=
literal|true
decl_stmt|;
block|{
name|_loop30
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_import
operator|)
condition|)
block|{
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_import
operator|)
condition|)
block|{
name|importDecl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched21
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m21
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched21
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_default
case|:
block|{
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|71
case|:
block|{
name|match
argument_list|(
literal|71
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ordering
case|:
block|{
name|match
argument_list|(
name|LITERAL_ordering
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_construction
case|:
block|{
name|match
argument_list|(
name|LITERAL_construction
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|74
case|:
block|{
name|match
argument_list|(
literal|74
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|75
case|:
block|{
name|match
argument_list|(
literal|75
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_namespace
case|:
block|{
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched21
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m21
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched21
condition|)
block|{
name|setter
argument_list|()
expr_stmt|;
name|s_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|inSetters
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|s_AST
argument_list|,
literal|"Default declarations have to come first"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched23
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m23
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched23
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_option
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched23
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m23
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched23
condition|)
block|{
name|optionDecl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inSetters
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched25
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m25
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched25
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched25
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m25
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched25
condition|)
block|{
name|functionDeclUp
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inSetters
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched27
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m27
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched27
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_variable
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched27
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m27
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched27
condition|)
block|{
name|varDeclUp
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inSetters
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched29
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m29
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched29
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MOD
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched29
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m29
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched29
condition|)
block|{
name|annotateDecl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inSetters
operator|=
literal|false
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop30
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|prolog_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|prolog_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|queryBody
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|queryBody_AST
init|=
literal|null
decl_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|queryBody_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|queryBody_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|moduleDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|moduleDecl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|prefix
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|prefix_AST
init|=
literal|null
decl_stmt|;
name|Token
name|uri
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uri_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_module
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|prefix_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|prefix_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|uri
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|uri_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|uri_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|moduleDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|moduleDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|MODULE_DECL
argument_list|,
name|prefix
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|uri_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|moduleDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|moduleDecl_AST
operator|!=
literal|null
operator|&&
name|moduleDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|moduleDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|moduleDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|moduleDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|moduleDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|importDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|importDecl_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched33
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_import
operator|)
operator|)
condition|)
block|{
name|int
name|_m33
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched33
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_import
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_module
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched33
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m33
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched33
condition|)
block|{
name|moduleImport
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|importDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_import
operator|)
condition|)
block|{
name|schemaImport
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|importDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|importDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|setter
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|setter_AST
init|=
literal|null
decl_stmt|;
name|Token
name|defc
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|defc_AST
init|=
literal|null
decl_stmt|;
name|Token
name|defu
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|defu_AST
init|=
literal|null
decl_stmt|;
name|Token
name|deff
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|deff_AST
init|=
literal|null
decl_stmt|;
block|{
name|boolean
name|synPredMatched39
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m39
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched39
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched39
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m39
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched39
condition|)
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_collation
case|:
block|{
name|match
argument_list|(
name|LITERAL_collation
argument_list|)
expr_stmt|;
name|defc
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|defc_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|defc
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|defc_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|setter_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|setter_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|DEF_COLLATION_DECL
argument_list|,
literal|"defaultCollationDecl"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|defc_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|setter_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|setter_AST
operator|!=
literal|null
operator|&&
name|setter_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|setter_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|setter_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_element
case|:
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|defu
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|defu_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|defu
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|defu_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|setter_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|setter_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|DEF_NAMESPACE_DECL
argument_list|,
literal|"defaultNamespaceDecl"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|defu_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|setter_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|setter_AST
operator|!=
literal|null
operator|&&
name|setter_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|setter_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|setter_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_function
case|:
block|{
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|deff
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|deff_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|deff
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|deff_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|setter_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|setter_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|DEF_FUNCTION_NS_DECL
argument_list|,
literal|"defaultFunctionNSDecl"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|deff_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|setter_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|setter_AST
operator|!=
literal|null
operator|&&
name|setter_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|setter_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|setter_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_order
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp76_AST
init|=
literal|null
decl_stmt|;
name|tmp76_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp76_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_order
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_empty
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_greatest
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp78_AST
init|=
literal|null
decl_stmt|;
name|tmp78_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp78_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_greatest
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_least
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp79_AST
init|=
literal|null
decl_stmt|;
name|tmp79_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp79_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_least
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched43
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m43
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched43
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|71
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched43
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m43
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched43
condition|)
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp81_AST
init|=
literal|null
decl_stmt|;
name|tmp81_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp81_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|71
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_preserve
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp82_AST
init|=
literal|null
decl_stmt|;
name|tmp82_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp82_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_preserve
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_strip
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp83_AST
init|=
literal|null
decl_stmt|;
name|tmp83_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp83_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_strip
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched46
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m46
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched46
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|74
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched46
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m46
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched46
condition|)
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp85_AST
init|=
literal|null
decl_stmt|;
name|tmp85_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp85_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|74
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp86_AST
init|=
literal|null
decl_stmt|;
name|tmp86_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp86_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched48
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m48
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched48
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ordering
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched48
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m48
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched48
condition|)
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp88_AST
init|=
literal|null
decl_stmt|;
name|tmp88_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp88_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ordering
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_ordered
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp89_AST
init|=
literal|null
decl_stmt|;
name|tmp89_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp89_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ordered
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_unordered
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp90_AST
init|=
literal|null
decl_stmt|;
name|tmp90_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp90_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_unordered
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched51
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m51
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched51
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_construction
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched51
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m51
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched51
condition|)
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp92_AST
init|=
literal|null
decl_stmt|;
name|tmp92_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp92_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_construction
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_preserve
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp93_AST
init|=
literal|null
decl_stmt|;
name|tmp93_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp93_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_preserve
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_strip
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp94_AST
init|=
literal|null
decl_stmt|;
name|tmp94_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp94_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_strip
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched54
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m54
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched54
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|75
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched54
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m54
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched54
condition|)
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp96_AST
init|=
literal|null
decl_stmt|;
name|tmp96_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp96_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|75
argument_list|)
expr_stmt|;
name|preserveMode
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|inheritMode
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched56
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m56
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched56
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched56
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m56
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched56
condition|)
block|{
name|namespaceDecl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|setter_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|setter_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|optionDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|optionDecl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|decl
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|decl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|opt
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|opt_AST
init|=
literal|null
decl_stmt|;
name|String
name|qn
init|=
literal|null
decl_stmt|;
name|decl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|decl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|decl
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|opt
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|opt_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|opt
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_option
argument_list|)
expr_stmt|;
name|qn
operator|=
name|qName
argument_list|()
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp98_AST
init|=
literal|null
decl_stmt|;
name|tmp98_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp98_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|optionDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|optionDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|OPTION
argument_list|,
name|qn
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|optionDecl_AST
argument_list|)
argument_list|)
expr_stmt|;
name|optionDecl_AST
operator|.
name|copyLexInfo
argument_list|(
name|decl_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|optionDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|optionDecl_AST
operator|!=
literal|null
operator|&&
name|optionDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|optionDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|optionDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|optionDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|optionDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionDeclUp
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|functionDeclUp_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|f_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|functionDecl
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|f_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionDeclUp_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionDeclUp_AST
operator|=
name|f_AST
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|functionDeclUp_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|functionDeclUp_AST
operator|!=
literal|null
operator|&&
name|functionDeclUp_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|functionDeclUp_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|functionDeclUp_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|returnAST
operator|=
name|functionDeclUp_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|varDeclUp
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|varDeclUp_AST
init|=
literal|null
decl_stmt|;
name|Token
name|decl
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|decl_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v_AST
init|=
literal|null
decl_stmt|;
name|decl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|decl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|decl
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|varDecl
argument_list|(
name|decl_AST
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|v_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|varDeclUp_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|varDeclUp_AST
operator|=
name|v_AST
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|varDeclUp_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|varDeclUp_AST
operator|!=
literal|null
operator|&&
name|varDeclUp_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|varDeclUp_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|varDeclUp_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|returnAST
operator|=
name|varDeclUp_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|annotateDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|annotateDecl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|decl
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|decl_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|ann_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|f_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v_AST
init|=
literal|null
decl_stmt|;
name|decl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|decl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|decl
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|annotations
argument_list|()
expr_stmt|;
name|ann_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_function
case|:
block|{
name|functionDecl
argument_list|(
name|ann_AST
argument_list|)
expr_stmt|;
name|f_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|annotateDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|annotateDecl_AST
operator|=
name|f_AST
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|annotateDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|annotateDecl_AST
operator|!=
literal|null
operator|&&
name|annotateDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|annotateDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|annotateDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_variable
case|:
block|{
name|varDecl
argument_list|(
name|decl_AST
argument_list|,
name|ann_AST
argument_list|)
expr_stmt|;
name|v_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|annotateDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|annotateDecl_AST
operator|=
name|v_AST
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|annotateDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|annotateDecl_AST
operator|!=
literal|null
operator|&&
name|annotateDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|annotateDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|annotateDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|returnAST
operator|=
name|annotateDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|moduleImport
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|moduleImport_AST
init|=
literal|null
decl_stmt|;
name|Token
name|i
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|i_AST
init|=
literal|null
decl_stmt|;
name|i
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|i_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_import
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_module
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_namespace
case|:
block|{
name|moduleNamespace
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp101_AST
init|=
literal|null
decl_stmt|;
name|tmp101_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp101_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_at
case|:
block|{
name|uriList
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMICOLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|moduleImport_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|moduleImport_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|MODULE_IMPORT
argument_list|,
literal|"module"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|moduleImport_AST
argument_list|)
argument_list|)
expr_stmt|;
name|moduleImport_AST
operator|.
name|copyLexInfo
argument_list|(
name|i_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|moduleImport_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|moduleImport_AST
operator|!=
literal|null
operator|&&
name|moduleImport_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|moduleImport_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|moduleImport_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|moduleImport_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|moduleImport_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|schemaImport
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|schemaImport_AST
init|=
literal|null
decl_stmt|;
name|Token
name|i
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|i_AST
init|=
literal|null
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
name|i
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|i_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_import
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_schema
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
block|{
name|schemaPrefix
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp103_AST
init|=
literal|null
decl_stmt|;
name|tmp103_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp103_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_at
case|:
block|{
name|uriList
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|SEMICOLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|schemaImport_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|schemaImport_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|SCHEMA_IMPORT
argument_list|,
literal|"schema"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|schemaImport_AST
argument_list|)
argument_list|)
expr_stmt|;
name|schemaImport_AST
operator|.
name|copyLexInfo
argument_list|(
name|i_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|schemaImport_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|schemaImport_AST
operator|!=
literal|null
operator|&&
name|schemaImport_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|schemaImport_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|schemaImport_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|schemaImport_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|schemaImport_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|preserveMode
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|preserveMode_AST
init|=
literal|null
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_preserve
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp104_AST
init|=
literal|null
decl_stmt|;
name|tmp104_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp104_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_preserve
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|93
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp105_AST
init|=
literal|null
decl_stmt|;
name|tmp105_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp105_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|93
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|preserveMode_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|preserveMode_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|inheritMode
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|inheritMode_AST
init|=
literal|null
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_inherit
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp106_AST
init|=
literal|null
decl_stmt|;
name|tmp106_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp106_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_inherit
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|95
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp107_AST
init|=
literal|null
decl_stmt|;
name|tmp107_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp107_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|95
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|inheritMode_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|inheritMode_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|namespaceDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|namespaceDecl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|decl
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|decl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|uri
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uri_AST
init|=
literal|null
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
name|decl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|decl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|decl
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|decl_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp108_AST
init|=
literal|null
decl_stmt|;
name|tmp108_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp108_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|uri
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|uri_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|uri_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|namespaceDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|namespaceDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|NAMESPACE_DECL
argument_list|,
name|prefix
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|uri_AST
argument_list|)
argument_list|)
expr_stmt|;
name|namespaceDecl_AST
operator|.
name|copyLexInfo
argument_list|(
name|decl_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|namespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|namespaceDecl_AST
operator|!=
literal|null
operator|&&
name|namespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|namespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|namespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|namespaceDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|namespaceDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|ncnameOrKeyword
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|ncnameOrKeyword_AST
init|=
literal|null
decl_stmt|;
name|Token
name|n1
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|n1_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
block|{
name|n1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|n1_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|n1_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|n1
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
name|ncnameOrKeyword_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_xpointer
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|name
operator|=
name|reservedKeywords
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|ncnameOrKeyword_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|ncnameOrKeyword_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|void
name|varDecl
parameter_list|(
name|XQueryAST
name|decl
parameter_list|,
name|XQueryAST
name|ann
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|varDecl_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e1_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e2_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_variable
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|typeDeclaration
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
case|case
name|COLON
case|:
case|case
name|LITERAL_external
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LCURLY
case|:
block|{
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e1_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COLON
case|:
block|{
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e2_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_external
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp116_AST
init|=
literal|null
decl_stmt|;
name|tmp116_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp116_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_external
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|varDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|varDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|GLOBAL_VAR
argument_list|,
name|varName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|ann
argument_list|)
operator|.
name|add
argument_list|(
name|varDecl_AST
argument_list|)
argument_list|)
expr_stmt|;
name|varDecl_AST
operator|.
name|copyLexInfo
argument_list|(
name|decl
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|varDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|varDecl_AST
operator|!=
literal|null
operator|&&
name|varDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|varDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|varDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|varDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|varDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|qName
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|qName_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nc1_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
name|String
name|name2
decl_stmt|;
name|boolean
name|synPredMatched415
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m415
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched415
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched415
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m415
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched415
condition|)
block|{
name|name
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|nc1_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp117_AST
init|=
literal|null
decl_stmt|;
name|tmp117_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp117_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|name2
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|qName_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|name
operator|=
name|name
operator|+
literal|':'
operator|+
name|name2
expr_stmt|;
name|qName_AST
operator|.
name|copyLexInfo
argument_list|(
name|nc1_AST
argument_list|)
expr_stmt|;
block|}
name|qName_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|name
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|qName_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|qName_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|void
name|typeDeclaration
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|typeDeclaration_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp118_AST
init|=
literal|null
decl_stmt|;
name|tmp118_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp118_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|typeDeclaration_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|typeDeclaration_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|moduleNamespace
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|moduleNamespace_AST
init|=
literal|null
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|moduleNamespace_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|moduleNamespace_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|NCNAME
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|moduleNamespace_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|moduleNamespace_AST
operator|!=
literal|null
operator|&&
name|moduleNamespace_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|moduleNamespace_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|moduleNamespace_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|moduleNamespace_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|moduleNamespace_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|uriList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uriList_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_at
argument_list|)
expr_stmt|;
name|uri
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop105
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|uri
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop105
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|uriList_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|uriList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|schemaPrefix
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|schemaPrefix_AST
init|=
literal|null
decl_stmt|;
name|String
name|prefix
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_namespace
case|:
block|{
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|schemaPrefix_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|schemaPrefix_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|NCNAME
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|schemaPrefix_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|schemaPrefix_AST
operator|!=
literal|null
operator|&&
name|schemaPrefix_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|schemaPrefix_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|schemaPrefix_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|schemaPrefix_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_default
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp125_AST
init|=
literal|null
decl_stmt|;
name|tmp125_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp125_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp126_AST
init|=
literal|null
decl_stmt|;
name|tmp126_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp126_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp127_AST
init|=
literal|null
decl_stmt|;
name|tmp127_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp127_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|schemaPrefix_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|schemaPrefix_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|annotations
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|annotations_AST
init|=
literal|null
decl_stmt|;
block|{
name|_loop83
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|MOD
operator|)
condition|)
block|{
name|annotation
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop83
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|annotations_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|annotations_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionDecl
parameter_list|(
name|XQueryAST
name|ann
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|functionDecl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|lp
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|lp_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|lp
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lp_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|lp
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOLLAR
case|:
block|{
name|paramList
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|returnType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
case|case
name|LITERAL_external
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LCURLY
case|:
block|{
name|functionBody
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_external
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp130_AST
init|=
literal|null
decl_stmt|;
name|tmp130_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp130_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_external
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION_DECL
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|ann
argument_list|)
operator|.
name|add
argument_list|(
name|functionDecl_AST
argument_list|)
argument_list|)
expr_stmt|;
name|functionDecl_AST
operator|.
name|copyLexInfo
argument_list|(
name|lp_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|functionDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|functionDecl_AST
operator|!=
literal|null
operator|&&
name|functionDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|functionDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|functionDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|functionDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|lp_AST
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
operator|.
name|getLine
argument_list|()
argument_list|,
name|e
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|"Syntax error within user defined function "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|lp_AST
operator|.
name|setLine
argument_list|(
name|e
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|lp_AST
operator|.
name|setColumn
argument_list|(
name|e
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|lp_AST
argument_list|,
literal|"Syntax error within user defined function "
operator|+
name|name
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|returnAST
operator|=
name|functionDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|annotation
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|annotation_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|MOD
argument_list|)
expr_stmt|;
name|name
operator|=
name|eqName
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
block|{
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop87
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop87
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|annotation_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|annotation_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ANNOT_DECL
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|annotation_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|annotation_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|annotation_AST
operator|!=
literal|null
operator|&&
name|annotation_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|annotation_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|annotation_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|annotation_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|annotation_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|eqName
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|eqName_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
name|name
operator|=
name|uriQualifiedName
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|returnAST
operator|=
name|eqName_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|void
name|literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|literal_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp135_AST
init|=
literal|null
decl_stmt|;
name|tmp135_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp135_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|numericLiteral
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|uriQualifiedName
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uriQualifiedName_AST
init|=
literal|null
decl_stmt|;
name|Token
name|sl
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|sl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|nc
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nc_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
name|sl
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|sl
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|102
argument_list|)
expr_stmt|;
name|nc
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nc_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|sl
operator|.
name|getText
argument_list|()
operator|+
literal|":"
operator|+
name|nc
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
name|returnAST
operator|=
name|uriQualifiedName_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|void
name|paramList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|paramList_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|p1_AST
init|=
literal|null
decl_stmt|;
name|param
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop100
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|param
argument_list|()
expr_stmt|;
name|p1_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop100
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|paramList_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|paramList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|returnType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|returnType_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp138_AST
init|=
literal|null
decl_stmt|;
name|tmp138_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp138_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|returnType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|returnType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionBody
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|functionBody_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp139_AST
init|=
literal|null
decl_stmt|;
name|tmp139_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp139_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|functionBody_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|functionBody_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|sequenceType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|sequenceType_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched110
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_empty
operator|)
operator|)
condition|)
block|{
name|int
name|_m110
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched110
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_empty
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched110
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m110
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched110
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp141_AST
init|=
literal|null
decl_stmt|;
name|tmp141_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp141_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_empty
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|sequenceType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched112
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|105
operator|)
operator|)
condition|)
block|{
name|int
name|_m112
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched112
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|105
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched112
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m112
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched112
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp144_AST
init|=
literal|null
decl_stmt|;
name|tmp144_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp144_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|105
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|sequenceType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|itemType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|QUESTION
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|PLUS
operator|)
operator|)
condition|)
block|{
name|occurrenceIndicator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|sequenceType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|sequenceType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|param
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|param_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|t_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|typeDeclaration
argument_list|()
expr_stmt|;
name|t_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
case|case
name|COMMA
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|param_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|param_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|varName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|t_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|param_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|param_AST
operator|!=
literal|null
operator|&&
name|param_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|param_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|param_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|param_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|param_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|uri
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uri_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp148_AST
init|=
literal|null
decl_stmt|;
name|tmp148_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp148_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|uri_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|uri_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|itemType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|itemType_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched118
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_item
operator|)
operator|)
condition|)
block|{
name|int
name|_m118
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched118
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_item
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched118
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m118
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched118
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp149_AST
init|=
literal|null
decl_stmt|;
name|tmp149_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp149_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_item
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|itemType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched120
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_function
operator|)
operator|)
condition|)
block|{
name|int
name|_m120
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched120
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched120
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m120
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched120
condition|)
block|{
name|functionTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|itemType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched122
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m122
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched122
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|matchNot
argument_list|(
name|EOF
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched122
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m122
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched122
condition|)
block|{
name|kindTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|itemType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|atomicType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|itemType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|returnAST
operator|=
name|itemType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|occurrenceIndicator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|occurrenceIndicator_AST
init|=
literal|null
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUESTION
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp152_AST
init|=
literal|null
decl_stmt|;
name|tmp152_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp152_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QUESTION
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STAR
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp153_AST
init|=
literal|null
decl_stmt|;
name|tmp153_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp153_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PLUS
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp154_AST
init|=
literal|null
decl_stmt|;
name|tmp154_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp154_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|occurrenceIndicator_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|occurrenceIndicator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|functionTest_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched128
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_function
operator|)
operator|)
condition|)
block|{
name|int
name|_m128
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched128
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched128
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m128
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched128
condition|)
block|{
name|anyFunctionTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|functionTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_function
operator|)
condition|)
block|{
name|typedFunctionTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|functionTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|functionTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|kindTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|kindTest_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_text
case|:
block|{
name|textTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|anyKindTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_element
case|:
block|{
name|elementTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|attributeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|commentTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|182
case|:
block|{
name|piTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|183
case|:
block|{
name|documentTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|kindTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|atomicType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|atomicType_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|atomicType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|atomicType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ATOMIC_TYPE
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|atomicType_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|atomicType_AST
operator|!=
literal|null
operator|&&
name|atomicType_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|atomicType_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|atomicType_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|atomicType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|atomicType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|singleType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|singleType_AST
init|=
literal|null
decl_stmt|;
name|atomicType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUESTION
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp155_AST
init|=
literal|null
decl_stmt|;
name|tmp155_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp155_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QUESTION
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|SEMICOLON
case|:
case|case
name|EQ
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|COMMA
case|:
case|case
name|RCURLY
case|:
case|case
name|LITERAL_as
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_satisfies
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_castable
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|GT
case|:
case|case
name|NEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|CONCAT
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|singleType_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|singleType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|anyFunctionTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|anyFunctionTest_AST
init|=
literal|null
decl_stmt|;
name|Token
name|s
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|s_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|s
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|s_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|s_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|anyFunctionTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|anyFunctionTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION_TEST
argument_list|,
literal|"anyFunction"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|s_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|anyFunctionTest_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|anyFunctionTest_AST
operator|!=
literal|null
operator|&&
name|anyFunctionTest_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|anyFunctionTest_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|anyFunctionTest_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|anyFunctionTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|anyFunctionTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|typedFunctionTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|typedFunctionTest_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop133
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop133
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp163_AST
init|=
literal|null
decl_stmt|;
name|tmp163_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp163_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|typedFunctionTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|typedFunctionTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION_TEST
argument_list|,
literal|"anyFunction"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|typedFunctionTest_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|typedFunctionTest_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|typedFunctionTest_AST
operator|!=
literal|null
operator|&&
name|typedFunctionTest_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|typedFunctionTest_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|typedFunctionTest_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|typedFunctionTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|typedFunctionTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|exprSingle
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|exprSingle_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched141
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_for
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_let
operator|)
operator|)
condition|)
block|{
name|int
name|_m141
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched141
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_for
case|:
block|{
name|match
argument_list|(
name|LITERAL_for
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_let
case|:
block|{
name|match
argument_list|(
name|LITERAL_let
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched141
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m141
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched141
condition|)
block|{
name|flworExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched143
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_try
operator|)
operator|)
condition|)
block|{
name|int
name|_m143
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched143
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_try
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched143
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m143
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched143
condition|)
block|{
name|tryCatchExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched146
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_some
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_every
operator|)
operator|)
condition|)
block|{
name|int
name|_m146
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched146
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_some
case|:
block|{
name|match
argument_list|(
name|LITERAL_some
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_every
case|:
block|{
name|match
argument_list|(
name|LITERAL_every
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched146
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m146
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched146
condition|)
block|{
name|quantifiedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched148
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_if
operator|)
operator|)
condition|)
block|{
name|int
name|_m148
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched148
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_if
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched148
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m148
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched148
condition|)
block|{
name|ifExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched150
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_switch
operator|)
operator|)
condition|)
block|{
name|int
name|_m150
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched150
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_switch
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched150
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m150
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched150
condition|)
block|{
name|switchExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched152
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_typeswitch
operator|)
operator|)
condition|)
block|{
name|int
name|_m152
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched152
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_typeswitch
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched152
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m152
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched152
condition|)
block|{
name|typeswitchExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched155
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_update
operator|)
operator|)
condition|)
block|{
name|int
name|_m155
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched155
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_update
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_replace
case|:
block|{
name|match
argument_list|(
name|LITERAL_replace
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_value
case|:
block|{
name|match
argument_list|(
name|LITERAL_value
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_insert
case|:
block|{
name|match
argument_list|(
name|LITERAL_insert
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_delete
case|:
block|{
name|match
argument_list|(
name|LITERAL_delete
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_rename
case|:
block|{
name|match
argument_list|(
name|LITERAL_rename
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched155
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m155
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched155
condition|)
block|{
name|updateExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|orExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|returnAST
operator|=
name|exprSingle_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|flworExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|flworExpr_AST
init|=
literal|null
decl_stmt|;
block|{
name|int
name|_cnt183
init|=
literal|0
decl_stmt|;
name|_loop183
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_for
case|:
block|{
name|forClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_let
case|:
block|{
name|letClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|_cnt183
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop183
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt183
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_where
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp164_AST
init|=
literal|null
decl_stmt|;
name|tmp164_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp164_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_where
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
case|case
name|LITERAL_group
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_group
case|:
block|{
name|groupByClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_stable
case|:
block|{
name|orderByClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_return
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp165_AST
init|=
literal|null
decl_stmt|;
name|tmp165_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp165_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_return
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|flworExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|flworExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|tryCatchExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tryCatchExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp166_AST
init|=
literal|null
decl_stmt|;
name|tmp166_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp166_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_try
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|tryTargetExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt168
init|=
literal|0
decl_stmt|;
name|_loop168
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_catch
operator|)
condition|)
block|{
name|catchClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt168
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop168
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt168
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|tryCatchExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|tryCatchExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|quantifiedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|quantifiedExpr_AST
init|=
literal|null
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_some
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp169_AST
init|=
literal|null
decl_stmt|;
name|tmp169_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp169_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_some
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_every
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp170_AST
init|=
literal|null
decl_stmt|;
name|tmp170_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp170_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_every
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|quantifiedInVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop222
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|quantifiedInVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop222
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|LITERAL_satisfies
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|quantifiedExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|quantifiedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|ifExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|ifExpr_AST
init|=
literal|null
decl_stmt|;
name|Token
name|t
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|t_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|thenExpr_AST
init|=
literal|null
decl_stmt|;
name|Token
name|e
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|elseExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp173_AST
init|=
literal|null
decl_stmt|;
name|tmp173_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp173_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_if
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|t
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|t_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_then
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|thenExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|e
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|e_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_else
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|elseExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|thenExpr_AST
operator|.
name|copyLexInfo
argument_list|(
name|t_AST
argument_list|)
expr_stmt|;
name|elseExpr_AST
operator|.
name|copyLexInfo
argument_list|(
name|e_AST
argument_list|)
expr_stmt|;
block|}
name|ifExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|ifExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|switchExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|switchExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp176_AST
init|=
literal|null
decl_stmt|;
name|tmp176_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp176_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_switch
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt227
init|=
literal|0
decl_stmt|;
name|_loop227
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_case
operator|)
condition|)
block|{
name|switchCaseClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt227
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop227
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt227
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp179_AST
init|=
literal|null
decl_stmt|;
name|tmp179_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp179_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_return
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|switchExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|switchExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|typeswitchExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|typeswitchExpr_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp181_AST
init|=
literal|null
decl_stmt|;
name|tmp181_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp181_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_typeswitch
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt233
init|=
literal|0
decl_stmt|;
name|_loop233
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_case
operator|)
condition|)
block|{
name|caseClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt233
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop233
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt233
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp184_AST
init|=
literal|null
decl_stmt|;
name|tmp184_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp184_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOLLAR
case|:
block|{
name|defaultVar
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_return
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LITERAL_return
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|typeswitchExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|typeswitchExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|updateExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|updateExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp186_AST
init|=
literal|null
decl_stmt|;
name|tmp186_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp186_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_update
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_replace
case|:
block|{
name|replaceExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_value
case|:
block|{
name|updateValueExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_insert
case|:
block|{
name|insertExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_delete
case|:
block|{
name|deleteExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_rename
case|:
block|{
name|renameExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|updateExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|updateExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|orExpr_AST
init|=
literal|null
decl_stmt|;
name|andExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop243
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_or
operator|)
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp187_AST
init|=
literal|null
decl_stmt|;
name|tmp187_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp187_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_or
argument_list|)
expr_stmt|;
name|andExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop243
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|orExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|replaceExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|replaceExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp188_AST
init|=
literal|null
decl_stmt|;
name|tmp188_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp188_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_replace
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_with
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|replaceExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|replaceExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|updateValueExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|updateValueExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp190_AST
init|=
literal|null
decl_stmt|;
name|tmp190_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp190_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_value
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_with
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|updateValueExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|updateValueExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|insertExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|insertExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp192_AST
init|=
literal|null
decl_stmt|;
name|tmp192_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp192_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_insert
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_into
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp193_AST
init|=
literal|null
decl_stmt|;
name|tmp193_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp193_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_into
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_preceding
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp194_AST
init|=
literal|null
decl_stmt|;
name|tmp194_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp194_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_preceding
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_following
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp195_AST
init|=
literal|null
decl_stmt|;
name|tmp195_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp195_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_following
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|insertExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|insertExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|deleteExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|deleteExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp196_AST
init|=
literal|null
decl_stmt|;
name|tmp196_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp196_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_delete
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|deleteExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|deleteExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|renameExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|renameExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp197_AST
init|=
literal|null
decl_stmt|;
name|tmp197_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp197_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_rename
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|renameExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|renameExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|tryTargetExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tryTargetExpr_AST
init|=
literal|null
decl_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|tryTargetExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|tryTargetExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|catchClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|catchClause_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp199_AST
init|=
literal|null
decl_stmt|;
name|tmp199_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp199_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_catch
argument_list|)
expr_stmt|;
name|catchErrorList
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
block|{
name|catchVars
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|catchClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|catchClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|catchErrorList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|catchErrorList_AST
init|=
literal|null
decl_stmt|;
name|nameTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop174
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|UNION
operator|)
condition|)
block|{
name|match
argument_list|(
name|UNION
argument_list|)
expr_stmt|;
name|nameTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop174
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|catchErrorList_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|catchErrorList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|catchVars
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|catchVars_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|catchErrorCode
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COMMA
case|:
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|catchErrorDesc
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COMMA
case|:
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|catchErrorVal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|catchVars_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|catchVars_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|nameTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nameTest_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched343
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m343
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched343
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
block|{
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STAR
case|:
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched343
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m343
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched343
condition|)
block|{
name|wildcard
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nameTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|nameTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|nameTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|QNAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|nameTest_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|nameTest_AST
operator|!=
literal|null
operator|&&
name|nameTest_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|nameTest_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|nameTest_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|nameTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|nameTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|catchErrorCode
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|catchErrorCode_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|catchErrorCode_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|catchErrorCode_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|CATCH_ERROR_CODE
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|catchErrorCode_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|catchErrorCode_AST
operator|!=
literal|null
operator|&&
name|catchErrorCode_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|catchErrorCode_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|catchErrorCode_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|catchErrorCode_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|catchErrorCode_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|catchErrorDesc
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|catchErrorDesc_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|catchErrorDesc_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|catchErrorDesc_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|CATCH_ERROR_DESC
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|catchErrorDesc_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|catchErrorDesc_AST
operator|!=
literal|null
operator|&&
name|catchErrorDesc_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|catchErrorDesc_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|catchErrorDesc_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|catchErrorDesc_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|catchErrorDesc_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|catchErrorVal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|catchErrorVal_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|catchErrorVal_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|catchErrorVal_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|CATCH_ERROR_VAL
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|catchErrorVal_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|catchErrorVal_AST
operator|!=
literal|null
operator|&&
name|catchErrorVal_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|catchErrorVal_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|catchErrorVal_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|catchErrorVal_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|catchErrorVal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|forClause_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp210_AST
init|=
literal|null
decl_stmt|;
name|tmp210_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp210_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_for
argument_list|)
expr_stmt|;
name|inVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop189
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|inVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop189
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|forClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|forClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|letClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|letClause_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp212_AST
init|=
literal|null
decl_stmt|;
name|tmp212_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp212_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_let
argument_list|)
expr_stmt|;
name|letVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop192
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|letVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop192
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|letClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|letClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|groupByClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|groupByClause_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_group
argument_list|)
expr_stmt|;
name|toGroupVarRef
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|groupVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_by
argument_list|)
expr_stmt|;
name|groupSpecList
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|groupByClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|groupByClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|GROUP_BY
argument_list|,
literal|"group by"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|groupByClause_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|groupByClause_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|groupByClause_AST
operator|!=
literal|null
operator|&&
name|groupByClause_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|groupByClause_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|groupByClause_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|groupByClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|groupByClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orderByClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|orderByClause_AST
init|=
literal|null
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_order
case|:
block|{
name|match
argument_list|(
name|LITERAL_order
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_by
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_stable
case|:
block|{
name|match
argument_list|(
name|LITERAL_stable
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_order
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_by
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|orderSpecList
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|orderByClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|orderByClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ORDER_BY
argument_list|,
literal|"order by"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|orderByClause_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|orderByClause_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|orderByClause_AST
operator|!=
literal|null
operator|&&
name|orderByClause_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|orderByClause_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|orderByClause_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|orderByClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orderByClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|inVarBinding
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|inVarBinding_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|v_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|typeDeclaration
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_at
case|:
case|case
name|LITERAL_in
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_at
case|:
block|{
name|positionalVar
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_in
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LITERAL_in
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|inVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|varName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|inVarBinding_AST
argument_list|)
argument_list|)
expr_stmt|;
name|inVarBinding_AST
operator|.
name|copyLexInfo
argument_list|(
name|v_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|inVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|inVarBinding_AST
operator|!=
literal|null
operator|&&
name|inVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|inVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|inVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|inVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|inVarBinding_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|letVarBinding
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|letVarBinding_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|v_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|typeDeclaration
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|letVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|letVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|varName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|letVarBinding_AST
argument_list|)
argument_list|)
expr_stmt|;
name|letVarBinding_AST
operator|.
name|copyLexInfo
argument_list|(
name|v_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|letVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|letVarBinding_AST
operator|!=
literal|null
operator|&&
name|letVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|letVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|letVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|letVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|letVarBinding_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|positionalVar
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|positionalVar_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp227_AST
init|=
literal|null
decl_stmt|;
name|tmp227_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp227_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_at
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|positionalVar_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|positionalVar_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|POSITIONAL_VAR
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|positionalVar_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|positionalVar_AST
operator|!=
literal|null
operator|&&
name|positionalVar_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|positionalVar_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|positionalVar_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|positionalVar_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|positionalVar_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orderSpecList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|orderSpecList_AST
init|=
literal|null
decl_stmt|;
name|orderSpec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop203
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|orderSpec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop203
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|orderSpecList_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orderSpecList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orderSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|orderSpec_AST
init|=
literal|null
decl_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|orderModifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|orderSpec_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orderSpec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orderModifier
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|orderModifier_AST
init|=
literal|null
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_ascending
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp230_AST
init|=
literal|null
decl_stmt|;
name|tmp230_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp230_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ascending
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descending
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp231_AST
init|=
literal|null
decl_stmt|;
name|tmp231_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp231_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_descending
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|COMMA
case|:
case|case
name|LITERAL_return
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_empty
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp232_AST
init|=
literal|null
decl_stmt|;
name|tmp232_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp232_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_empty
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_greatest
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp233_AST
init|=
literal|null
decl_stmt|;
name|tmp233_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp233_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_greatest
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_least
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp234_AST
init|=
literal|null
decl_stmt|;
name|tmp234_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp234_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_least
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|LITERAL_collation
case|:
case|case
name|COMMA
case|:
case|case
name|LITERAL_return
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_collation
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp235_AST
init|=
literal|null
decl_stmt|;
name|tmp235_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp235_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_collation
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp236_AST
init|=
literal|null
decl_stmt|;
name|tmp236_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp236_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COMMA
case|:
case|case
name|LITERAL_return
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|orderModifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orderModifier_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|toGroupVarRef
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|toGroupVarRef_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v_AST
init|=
literal|null
decl_stmt|;
name|String
name|toGroupVarName
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|toGroupVarName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|v_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|toGroupVarRef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|toGroupVarRef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_REF
argument_list|,
name|toGroupVarName
argument_list|)
expr_stmt|;
name|toGroupVarRef_AST
operator|.
name|copyLexInfo
argument_list|(
name|v_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|toGroupVarRef_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|toGroupVarRef_AST
operator|!=
literal|null
operator|&&
name|toGroupVarRef_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|toGroupVarRef_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|toGroupVarRef_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|toGroupVarRef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|toGroupVarRef_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|groupVarBinding
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|groupVarBinding_AST
init|=
literal|null
decl_stmt|;
name|String
name|groupVarName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|groupVarName
operator|=
name|qName
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|groupVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|groupVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|groupVarName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|groupVarBinding_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|groupVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|groupVarBinding_AST
operator|!=
literal|null
operator|&&
name|groupVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|groupVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|groupVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|groupVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|groupVarBinding_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|groupSpecList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|groupSpecList_AST
init|=
literal|null
decl_stmt|;
name|groupSpec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop215
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|groupSpec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop215
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|groupSpecList_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|groupSpecList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|groupSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|groupSpec_AST
init|=
literal|null
decl_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
block|{
name|groupKeyVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
name|groupSpec_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|groupSpec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|groupKeyVarBinding
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|groupKeyVarBinding_AST
init|=
literal|null
decl_stmt|;
name|String
name|groupKeyVarName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|groupKeyVarName
operator|=
name|qName
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|groupKeyVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|groupKeyVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|groupKeyVarName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|groupKeyVarBinding_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|groupKeyVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|groupKeyVarBinding_AST
operator|!=
literal|null
operator|&&
name|groupKeyVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|groupKeyVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|groupKeyVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|groupKeyVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|groupKeyVarBinding_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|quantifiedInVarBinding
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|quantifiedInVarBinding_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|typeDeclaration
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_in
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LITERAL_in
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|quantifiedInVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|quantifiedInVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|varName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|quantifiedInVarBinding_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|quantifiedInVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|quantifiedInVarBinding_AST
operator|!=
literal|null
operator|&&
name|quantifiedInVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|quantifiedInVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|quantifiedInVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|quantifiedInVarBinding_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|quantifiedInVarBinding_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|switchCaseClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|switchCaseClause_AST
init|=
literal|null
decl_stmt|;
block|{
name|int
name|_cnt230
init|=
literal|0
decl_stmt|;
name|_loop230
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_case
operator|)
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp244_AST
init|=
literal|null
decl_stmt|;
name|tmp244_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp244_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_case
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt230
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop230
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt230
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|caseReturn
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|switchCaseClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|switchCaseClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|caseReturn
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|caseReturn_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp245_AST
init|=
literal|null
decl_stmt|;
name|tmp245_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp245_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_return
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|caseReturn_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|caseReturn_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|caseClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|caseClause_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp246_AST
init|=
literal|null
decl_stmt|;
name|tmp246_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp246_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_case
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOLLAR
case|:
block|{
name|caseVar
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|caseReturn
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|caseClause_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|caseClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|defaultVar
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|defaultVar_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|defaultVar_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|defaultVar_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|defaultVar_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|defaultVar_AST
operator|!=
literal|null
operator|&&
name|defaultVar_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|defaultVar_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|defaultVar_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|defaultVar_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|defaultVar_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|caseVar
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|caseVar_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp249_AST
init|=
literal|null
decl_stmt|;
name|tmp249_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp249_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|caseVar_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|caseVar_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|caseVar_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|caseVar_AST
operator|!=
literal|null
operator|&&
name|caseVar_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|caseVar_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|caseVar_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|caseVar_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|caseVar_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|andExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|andExpr_AST
init|=
literal|null
decl_stmt|;
name|comparisonExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop246
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_and
operator|)
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp250_AST
init|=
literal|null
decl_stmt|;
name|tmp250_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp250_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_and
argument_list|)
expr_stmt|;
name|comparisonExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop246
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|andExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|andExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|comparisonExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|comparisonExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|r1_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|r2_AST
init|=
literal|null
decl_stmt|;
name|stringConcatExpr
argument_list|()
expr_stmt|;
name|r1_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|BEFORE
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp251_AST
init|=
literal|null
decl_stmt|;
name|tmp251_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp251_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|BEFORE
argument_list|)
expr_stmt|;
name|stringConcatExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|AFTER
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp252_AST
init|=
literal|null
decl_stmt|;
name|tmp252_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp252_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|AFTER
argument_list|)
expr_stmt|;
name|stringConcatExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_eq
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp253_AST
init|=
literal|null
decl_stmt|;
name|tmp253_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp253_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_eq
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ne
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp254_AST
init|=
literal|null
decl_stmt|;
name|tmp254_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp254_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ne
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_lt
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp255_AST
init|=
literal|null
decl_stmt|;
name|tmp255_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp255_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_lt
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_le
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp256_AST
init|=
literal|null
decl_stmt|;
name|tmp256_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp256_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_le
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_gt
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp257_AST
init|=
literal|null
decl_stmt|;
name|tmp257_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp257_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_gt
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ge
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp258_AST
init|=
literal|null
decl_stmt|;
name|tmp258_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp258_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ge
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|stringConcatExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_is
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp259_AST
init|=
literal|null
decl_stmt|;
name|tmp259_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp259_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_is
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_isnot
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp260_AST
init|=
literal|null
decl_stmt|;
name|tmp260_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp260_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_isnot
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|stringConcatExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ANDEQ
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp261_AST
init|=
literal|null
decl_stmt|;
name|tmp261_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp261_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ANDEQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OREQ
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp262_AST
init|=
literal|null
decl_stmt|;
name|tmp262_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp262_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|OREQ
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|stringConcatExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|SEMICOLON
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|COMMA
case|:
case|case
name|RCURLY
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_satisfies
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
name|boolean
name|synPredMatched264
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|GT
operator|)
operator|)
condition|)
block|{
name|int
name|_m264
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched264
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched264
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m264
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched264
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp263_AST
init|=
literal|null
decl_stmt|;
name|tmp263_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp263_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp264_AST
init|=
literal|null
decl_stmt|;
name|tmp264_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp264_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|rangeExpr
argument_list|()
expr_stmt|;
name|r2_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|comparisonExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|comparisonExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|GTEQ
argument_list|,
literal|">="
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|r1_AST
argument_list|)
operator|.
name|add
argument_list|(
name|r2_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|comparisonExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|comparisonExpr_AST
operator|!=
literal|null
operator|&&
name|comparisonExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|comparisonExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|comparisonExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|_tokenSet_7
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|EQ
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp265_AST
init|=
literal|null
decl_stmt|;
name|tmp265_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp265_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NEQ
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp266_AST
init|=
literal|null
decl_stmt|;
name|tmp266_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp266_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NEQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|GT
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp267_AST
init|=
literal|null
decl_stmt|;
name|tmp267_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp267_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LT
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp268_AST
init|=
literal|null
decl_stmt|;
name|tmp268_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp268_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LTEQ
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp269_AST
init|=
literal|null
decl_stmt|;
name|tmp269_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp269_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LTEQ
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|stringConcatExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|comparisonExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|comparisonExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|instanceofExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|instanceofExpr_AST
init|=
literal|null
decl_stmt|;
name|treatExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_instance
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp270_AST
init|=
literal|null
decl_stmt|;
name|tmp270_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp270_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_instance
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_of
argument_list|)
expr_stmt|;
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|SEMICOLON
case|:
case|case
name|EQ
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|COMMA
case|:
case|case
name|RCURLY
case|:
case|case
name|LITERAL_as
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_satisfies
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|GT
case|:
case|case
name|NEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|CONCAT
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|instanceofExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|instanceofExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|treatExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|treatExpr_AST
init|=
literal|null
decl_stmt|;
name|castableExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_treat
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp272_AST
init|=
literal|null
decl_stmt|;
name|tmp272_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp272_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_treat
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|SEMICOLON
case|:
case|case
name|EQ
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|COMMA
case|:
case|case
name|RCURLY
case|:
case|case
name|LITERAL_as
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_satisfies
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|GT
case|:
case|case
name|NEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|CONCAT
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|treatExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|treatExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|castableExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|castableExpr_AST
init|=
literal|null
decl_stmt|;
name|castExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_castable
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp274_AST
init|=
literal|null
decl_stmt|;
name|tmp274_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp274_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_castable
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|singleType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|SEMICOLON
case|:
case|case
name|EQ
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|COMMA
case|:
case|case
name|RCURLY
case|:
case|case
name|LITERAL_as
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_satisfies
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|GT
case|:
case|case
name|NEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|CONCAT
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|castableExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|castableExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|castExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|castExpr_AST
init|=
literal|null
decl_stmt|;
name|unaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_cast
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp276_AST
init|=
literal|null
decl_stmt|;
name|tmp276_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp276_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_cast
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|singleType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|SEMICOLON
case|:
case|case
name|EQ
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|COMMA
case|:
case|case
name|RCURLY
case|:
case|case
name|LITERAL_as
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_satisfies
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_castable
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|GT
case|:
case|case
name|NEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|CONCAT
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|castExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|castExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unaryExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|unaryExpr_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|MINUS
case|:
block|{
name|match
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
block|{
name|unaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|unaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|unaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|UNARY_MINUS
argument_list|,
literal|"-"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|unaryExpr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|unaryExpr_AST
operator|!=
literal|null
operator|&&
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|unaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|PLUS
case|:
block|{
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
block|{
name|unaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|unaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|unaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|UNARY_PLUS
argument_list|,
literal|"+"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|unaryExpr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|unaryExpr_AST
operator|!=
literal|null
operator|&&
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|unaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|PRAGMA_START
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|valueExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|unaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|unaryExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|stringConcatExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|stringConcatExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|r1_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|isConcat
init|=
literal|false
decl_stmt|;
name|rangeExpr
argument_list|()
expr_stmt|;
name|r1_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop273
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|CONCAT
operator|)
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp280_AST
init|=
literal|null
decl_stmt|;
name|tmp280_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp280_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONCAT
argument_list|)
expr_stmt|;
name|rangeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|isConcat
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop273
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|stringConcatExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
if|if
condition|(
name|isConcat
condition|)
name|stringConcatExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|CONCAT
argument_list|,
literal|"||"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|stringConcatExpr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|stringConcatExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|stringConcatExpr_AST
operator|!=
literal|null
operator|&&
name|stringConcatExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|stringConcatExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|stringConcatExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|stringConcatExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|stringConcatExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|rangeExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|rangeExpr_AST
init|=
literal|null
decl_stmt|;
name|additiveExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_to
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp281_AST
init|=
literal|null
decl_stmt|;
name|tmp281_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp281_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_to
argument_list|)
expr_stmt|;
name|additiveExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|SEMICOLON
case|:
case|case
name|EQ
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|COMMA
case|:
case|case
name|RCURLY
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_satisfies
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|GT
case|:
case|case
name|NEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|CONCAT
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|rangeExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|rangeExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|additiveExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|additiveExpr_AST
init|=
literal|null
decl_stmt|;
name|multiplicativeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop279
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|PLUS
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|MINUS
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|PLUS
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp282_AST
init|=
literal|null
decl_stmt|;
name|tmp282_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp282_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MINUS
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp283_AST
init|=
literal|null
decl_stmt|;
name|tmp283_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp283_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|multiplicativeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop279
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|additiveExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|additiveExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|multiplicativeExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|multiplicativeExpr_AST
init|=
literal|null
decl_stmt|;
name|unionExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop283
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_8
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STAR
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp284_AST
init|=
literal|null
decl_stmt|;
name|tmp284_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp284_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_div
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp285_AST
init|=
literal|null
decl_stmt|;
name|tmp285_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp285_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_div
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_idiv
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp286_AST
init|=
literal|null
decl_stmt|;
name|tmp286_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp286_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_idiv
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_mod
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp287_AST
init|=
literal|null
decl_stmt|;
name|tmp287_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp287_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_mod
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|unionExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop283
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|multiplicativeExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|multiplicativeExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unionExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|unionExpr_AST
init|=
literal|null
decl_stmt|;
name|intersectExceptExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|UNION
case|:
case|case
name|LITERAL_union
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_union
case|:
block|{
name|match
argument_list|(
name|LITERAL_union
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|match
argument_list|(
name|UNION
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|unionExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|unionExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|unionExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|UNION
argument_list|,
literal|"union"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|unionExpr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|unionExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|unionExpr_AST
operator|!=
literal|null
operator|&&
name|unionExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|unionExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|unionExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|SEMICOLON
case|:
case|case
name|EQ
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|COMMA
case|:
case|case
name|RCURLY
case|:
case|case
name|LITERAL_as
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_stable
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_satisfies
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|GT
case|:
case|case
name|NEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|CONCAT
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|unionExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|unionExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|valueExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|valueExpr_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|pathExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|valueExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|PRAGMA_START
case|:
block|{
name|extensionExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|valueExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|valueExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|pathExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|pathExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|relPath_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|relPath2_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|relativePathExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DSLASH
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp290_AST
init|=
literal|null
decl_stmt|;
name|tmp290_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp290_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DSLASH
argument_list|)
expr_stmt|;
name|relativePathExpr
argument_list|()
expr_stmt|;
name|relPath2_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ABSOLUTE_DSLASH
argument_list|,
literal|"AbsoluteSlashSlash"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|relPath2_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pathExpr_AST
operator|!=
literal|null
operator|&&
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
name|boolean
name|synPredMatched301
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SLASH
operator|)
operator|)
condition|)
block|{
name|int
name|_m301
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched301
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|relativePathExpr
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched301
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m301
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched301
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp291_AST
init|=
literal|null
decl_stmt|;
name|tmp291_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp291_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|relativePathExpr
argument_list|()
expr_stmt|;
name|relPath_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ABSOLUTE_SLASH
argument_list|,
literal|"AbsoluteSlash"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|relPath_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pathExpr_AST
operator|!=
literal|null
operator|&&
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SLASH
operator|)
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp292_AST
init|=
literal|null
decl_stmt|;
name|tmp292_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp292_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ABSOLUTE_SLASH
argument_list|,
literal|"AbsoluteSlash"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pathExpr_AST
operator|!=
literal|null
operator|&&
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|pathExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|extensionExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|extensionExpr_AST
init|=
literal|null
decl_stmt|;
block|{
name|int
name|_cnt290
init|=
literal|0
decl_stmt|;
name|_loop290
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|PRAGMA_START
operator|)
condition|)
block|{
name|pragma
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt290
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop290
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt290
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|extensionExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|extensionExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|pragma
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|pragma_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|PRAGMA_START
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp296_AST
init|=
literal|null
decl_stmt|;
name|tmp296_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp296_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PRAGMA_END
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pragma_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
name|pragma_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|PRAGMA
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|pragma_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pragma_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pragma_AST
operator|!=
literal|null
operator|&&
name|pragma_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pragma_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pragma_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pragma_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"err:XPST0003: Parse error: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" at line: "
operator|+
name|e
operator|.
name|getLine
argument_list|()
operator|+
literal|" column: "
operator|+
name|e
operator|.
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|returnAST
operator|=
name|pragma_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|intersectExceptExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|intersectExceptExpr_AST
init|=
literal|null
decl_stmt|;
name|instanceofExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop298
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_intersect
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_except
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_intersect
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp297_AST
init|=
literal|null
decl_stmt|;
name|tmp297_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp297_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_intersect
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_except
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp298_AST
init|=
literal|null
decl_stmt|;
name|tmp298_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp298_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_except
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|instanceofExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop298
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|intersectExceptExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|intersectExceptExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|relativePathExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|relativePathExpr_AST
init|=
literal|null
decl_stmt|;
name|stepExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop305
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SLASH
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|DSLASH
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SLASH
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp299_AST
init|=
literal|null
decl_stmt|;
name|tmp299_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp299_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DSLASH
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp300_AST
init|=
literal|null
decl_stmt|;
name|tmp300_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp300_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DSLASH
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|stepExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop305
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|relativePathExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|relativePathExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|stepExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|stepExpr_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched309
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_9
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m309
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched309
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_text
case|:
block|{
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_element
case|:
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|match
argument_list|(
name|LITERAL_comment
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|182
case|:
block|{
name|match
argument_list|(
literal|182
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|183
case|:
block|{
name|match
argument_list|(
literal|183
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched309
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m309
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched309
condition|)
block|{
name|axisStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched312
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_10
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m312
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched312
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_element
case|:
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_document
case|:
block|{
name|match
argument_list|(
name|LITERAL_document
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|182
case|:
block|{
name|match
argument_list|(
literal|182
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|match
argument_list|(
name|LITERAL_comment
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ordered
case|:
block|{
name|match
argument_list|(
name|LITERAL_ordered
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_unordered
case|:
block|{
name|match
argument_list|(
name|LITERAL_unordered
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched312
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m312
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched312
condition|)
block|{
name|postfixExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched315
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_10
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m315
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched315
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_element
case|:
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|182
case|:
block|{
name|match
argument_list|(
literal|182
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_namespace
case|:
block|{
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|qName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched315
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m315
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched315
condition|)
block|{
name|postfixExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched319
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_10
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m319
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched319
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|MOD
case|:
block|{
name|match
argument_list|(
name|MOD
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DOLLAR
case|:
block|{
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
block|{
name|qName
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
block|{
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|HASH
case|:
block|{
name|match
argument_list|(
name|HASH
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
break|break;
block|}
case|case
name|SELF
case|:
block|{
name|match
argument_list|(
name|SELF
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|literal
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|XML_COMMENT
case|:
block|{
name|match
argument_list|(
name|XML_COMMENT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LT
case|:
block|{
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|XML_PI
case|:
block|{
name|match
argument_list|(
name|XML_PI
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched319
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m319
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched319
condition|)
block|{
name|postfixExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_9
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|axisStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
name|returnAST
operator|=
name|stepExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|axisStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|axisStep_AST
init|=
literal|null
decl_stmt|;
block|{
name|forwardOrReverseStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
name|predicates
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|axisStep_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|axisStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|postfixExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|postfixExpr_AST
init|=
literal|null
decl_stmt|;
name|primaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop353
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPPAREN
case|:
block|{
name|predicate
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|dynamicFunCall
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
break|break
name|_loop353
break|;
block|}
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|postfixExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|postfixExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forwardOrReverseStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|forwardOrReverseStep_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched328
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_11
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m328
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched328
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|forwardAxisSpecifier
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched328
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m328
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched328
condition|)
block|{
name|forwardAxis
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forwardOrReverseStep_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched330
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_12
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m330
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched330
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|reverseAxisSpecifier
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched330
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m330
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched330
condition|)
block|{
name|reverseAxis
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forwardOrReverseStep_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_9
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|abbrevStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forwardOrReverseStep_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|forwardOrReverseStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|predicates
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|predicates_AST
init|=
literal|null
decl_stmt|;
block|{
name|_loop324
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LPPAREN
operator|)
condition|)
block|{
name|predicate
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop324
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|predicates_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|predicates_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|predicate
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|predicate_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|predExpr_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LPPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|predExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|predicate_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|predicate_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|PREDICATE
argument_list|,
literal|"Pred"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|predExpr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|predicate_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|predicate_AST
operator|!=
literal|null
operator|&&
name|predicate_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|predicate_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|predicate_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|predicate_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|predicate_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forwardAxisSpecifier
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|forwardAxisSpecifier_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_child
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp303_AST
init|=
literal|null
decl_stmt|;
name|tmp303_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp303_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_child
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_self
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp304_AST
init|=
literal|null
decl_stmt|;
name|tmp304_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp304_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_self
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp305_AST
init|=
literal|null
decl_stmt|;
name|tmp305_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp305_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descendant
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp306_AST
init|=
literal|null
decl_stmt|;
name|tmp306_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp306_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_descendant
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|196
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp307_AST
init|=
literal|null
decl_stmt|;
name|tmp307_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp307_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|196
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|197
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp308_AST
init|=
literal|null
decl_stmt|;
name|tmp308_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp308_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|197
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_following
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp309_AST
init|=
literal|null
decl_stmt|;
name|tmp309_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp309_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_following
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|forwardAxisSpecifier_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forwardAxis
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|forwardAxis_AST
init|=
literal|null
decl_stmt|;
name|forwardAxisSpecifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|forwardAxis_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|forwardAxis_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|nodeTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nodeTest_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched339
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m339
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched339
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|matchNot
argument_list|(
name|EOF
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched339
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m339
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched339
condition|)
block|{
name|kindTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|nameTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|nodeTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|reverseAxisSpecifier
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|reverseAxisSpecifier_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_parent
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp312_AST
init|=
literal|null
decl_stmt|;
name|tmp312_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp312_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_parent
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ancestor
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp313_AST
init|=
literal|null
decl_stmt|;
name|tmp313_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp313_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ancestor
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|200
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp314_AST
init|=
literal|null
decl_stmt|;
name|tmp314_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp314_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|201
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp315_AST
init|=
literal|null
decl_stmt|;
name|tmp315_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp315_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|201
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_preceding
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp316_AST
init|=
literal|null
decl_stmt|;
name|tmp316_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp316_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_preceding
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|reverseAxisSpecifier_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|reverseAxis
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|reverseAxis_AST
init|=
literal|null
decl_stmt|;
name|reverseAxisSpecifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|reverseAxis_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|reverseAxis_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|abbrevStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|abbrevStep_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|AT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|AT
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp319_AST
init|=
literal|null
decl_stmt|;
name|tmp319_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp319_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|AT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|nodeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|abbrevStep_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|PARENT
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp320_AST
init|=
literal|null
decl_stmt|;
name|tmp320_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp320_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PARENT
argument_list|)
expr_stmt|;
name|abbrevStep_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|abbrevStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|wildcard
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|wildcard_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched346
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STAR
operator|)
operator|)
condition|)
block|{
name|int
name|_m346
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched346
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched346
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m346
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched346
condition|)
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|name
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|wildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|wildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|PREFIX_WILDCARD
argument_list|,
literal|"*"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|NCNAME
argument_list|,
name|name
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|wildcard_AST
operator|!=
literal|null
operator|&&
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|wildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|name
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|wildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|wildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|NCNAME
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|WILDCARD
argument_list|,
literal|"*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|wildcard_AST
operator|!=
literal|null
operator|&&
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|wildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STAR
operator|)
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp325_AST
init|=
literal|null
decl_stmt|;
name|tmp325_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp325_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|wildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
comment|// make this distinct from multiplication
name|wildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|WILDCARD
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|wildcard_AST
operator|!=
literal|null
operator|&&
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|wildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|wildcard_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|primaryExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|primaryExpr_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LT
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
block|{
name|directConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|SELF
case|:
block|{
name|contextItemExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|parenthesizedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DOLLAR
case|:
block|{
name|varRef
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
name|boolean
name|synPredMatched358
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_13
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m358
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched358
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_element
case|:
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_document
case|:
block|{
name|match
argument_list|(
name|LITERAL_document
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|182
case|:
block|{
name|match
argument_list|(
literal|182
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|match
argument_list|(
name|LITERAL_comment
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched358
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m358
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched358
condition|)
block|{
name|computedConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched361
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_13
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m361
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched361
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_element
case|:
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|182
case|:
block|{
name|match
argument_list|(
literal|182
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_namespace
case|:
block|{
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|qName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched361
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m361
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched361
condition|)
block|{
name|computedConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched363
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_ordered
operator|)
operator|)
condition|)
block|{
name|int
name|_m363
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched363
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_ordered
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched363
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m363
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched363
condition|)
block|{
name|orderedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched365
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_unordered
operator|)
operator|)
condition|)
block|{
name|int
name|_m365
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched365
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_unordered
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched365
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m365
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched365
condition|)
block|{
name|unorderedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched367
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_14
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m367
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched367
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|MOD
operator|)
condition|)
block|{
name|match
argument_list|(
name|MOD
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_function
operator|)
condition|)
block|{
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_15
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|eqName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|HASH
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched367
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m367
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched367
condition|)
block|{
name|functionItemExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched369
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m369
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched369
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|eqName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched369
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m369
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched369
condition|)
block|{
name|functionCall
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_16
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
name|returnAST
operator|=
name|primaryExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|dynamicFunCall
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|dynamicFunCall_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|args_AST
init|=
literal|null
decl_stmt|;
name|argumentList
argument_list|()
expr_stmt|;
name|args_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|dynamicFunCall_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|dynamicFunCall_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|DYNAMIC_FCALL
argument_list|,
literal|"DynamicFunction"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|args_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|dynamicFunCall_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|dynamicFunCall_AST
operator|!=
literal|null
operator|&&
name|dynamicFunCall_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|dynamicFunCall_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|dynamicFunCall_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|dynamicFunCall_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|dynamicFunCall_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|argumentList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|argumentList_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|QUESTION
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|PRAGMA_START
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|argument
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop389
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|argument
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop389
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|argumentList_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|argumentList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|computedConstructor
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|computedConstructor_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_element
case|:
block|{
name|compElemConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|computedConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|compAttrConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|computedConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|compTextConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|computedConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_document
case|:
block|{
name|compDocumentConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|computedConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|182
case|:
block|{
name|compXmlPI
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|computedConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|compXmlComment
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|computedConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|computedConstructor_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orderedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|orderedExpr_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_ordered
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|orderedExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orderedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unorderedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|unorderedExpr_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_unordered
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|unorderedExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|unorderedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|directConstructor
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|directConstructor_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LT
case|:
block|{
name|elementConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|directConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XML_COMMENT
case|:
block|{
name|xmlComment
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|directConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XML_PI
case|:
block|{
name|xmlPI
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|directConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|directConstructor_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionItemExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|functionItemExpr_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched379
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_function
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|MOD
operator|)
operator|)
condition|)
block|{
name|int
name|_m379
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched379
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|MOD
case|:
block|{
name|match
argument_list|(
name|MOD
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_function
case|:
block|{
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched379
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m379
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched379
condition|)
block|{
name|inlineFunctionExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|functionItemExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_15
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|namedFunctionRef
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|functionItemExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|functionItemExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionCall
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|functionCall_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|q_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|params_AST
init|=
literal|null
decl_stmt|;
name|String
name|fnName
init|=
literal|null
decl_stmt|;
name|fnName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|q_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionCall_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionCall_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION
argument_list|,
name|fnName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|functionCall_AST
operator|!=
literal|null
operator|&&
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LPAREN
operator|)
condition|)
block|{
name|argumentList
argument_list|()
expr_stmt|;
name|params_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionCall_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionCall_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION
argument_list|,
name|fnName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|params_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|functionCall_AST
operator|!=
literal|null
operator|&&
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
if|else if
condition|(
operator|(
name|_tokenSet_17
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionCall_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionCall_AST
operator|.
name|copyLexInfo
argument_list|(
name|q_AST
argument_list|)
expr_stmt|;
block|}
name|functionCall_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|functionCall_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|contextItemExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|contextItemExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp335_AST
init|=
literal|null
decl_stmt|;
name|tmp335_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp335_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SELF
argument_list|)
expr_stmt|;
name|contextItemExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|contextItemExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|parenthesizedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|parenthesizedExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|PRAGMA_START
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|expr
argument_list|()
expr_stmt|;
name|e_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|parenthesizedExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|parenthesizedExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|PARENTHESIZED
argument_list|,
literal|"Parenthesized"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|e_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|parenthesizedExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|parenthesizedExpr_AST
operator|!=
literal|null
operator|&&
name|parenthesizedExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|parenthesizedExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|parenthesizedExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|parenthesizedExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|parenthesizedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|varRef
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|varRef_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|v_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|varRef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|varRef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_REF
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|varRef_AST
operator|.
name|copyLexInfo
argument_list|(
name|v_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|varRef_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|varRef_AST
operator|!=
literal|null
operator|&&
name|varRef_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|varRef_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|varRef_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|varRef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|varRef_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|numericLiteral
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|numericLiteral_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOUBLE_LITERAL
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp339_AST
init|=
literal|null
decl_stmt|;
name|tmp339_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp339_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOUBLE_LITERAL
argument_list|)
expr_stmt|;
name|numericLiteral_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DECIMAL_LITERAL
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp340_AST
init|=
literal|null
decl_stmt|;
name|tmp340_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp340_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DECIMAL_LITERAL
argument_list|)
expr_stmt|;
name|numericLiteral_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|INTEGER_LITERAL
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp341_AST
init|=
literal|null
decl_stmt|;
name|tmp341_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp341_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
name|numericLiteral_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|numericLiteral_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|inlineFunctionExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|inlineFunctionExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|ann_AST
init|=
literal|null
decl_stmt|;
name|Token
name|lp
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|lp_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|annotations
argument_list|()
expr_stmt|;
name|ann_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|lp
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|lp_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|lp
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOLLAR
case|:
block|{
name|paramList
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|returnType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|functionBody
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inlineFunctionExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|inlineFunctionExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION_DECL
argument_list|,
literal|null
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
literal|null
argument_list|)
operator|.
name|add
argument_list|(
name|inlineFunctionExpr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|inlineFunctionExpr_AST
operator|.
name|copyLexInfo
argument_list|(
name|lp_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|inlineFunctionExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|inlineFunctionExpr_AST
operator|!=
literal|null
operator|&&
name|inlineFunctionExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|inlineFunctionExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|inlineFunctionExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|inlineFunctionExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|lp_AST
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
operator|.
name|getLine
argument_list|()
argument_list|,
name|e
operator|.
name|getColumn
argument_list|()
argument_list|,
literal|"Syntax error within inline function: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
else|else
block|{
name|lp_AST
operator|.
name|setLine
argument_list|(
name|e
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|lp_AST
operator|.
name|setColumn
argument_list|(
name|e
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|lp_AST
argument_list|,
literal|"Syntax error within user defined function: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|returnAST
operator|=
name|inlineFunctionExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|namedFunctionRef
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|namedFunctionRef_AST
init|=
literal|null
decl_stmt|;
name|Token
name|h
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|h_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|name
operator|=
name|eqName
argument_list|()
expr_stmt|;
name|h
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|h_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|h
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|HASH
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp344_AST
init|=
literal|null
decl_stmt|;
name|tmp344_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp344_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|namedFunctionRef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|namedFunctionRef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|HASH
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|namedFunctionRef_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|namedFunctionRef_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|namedFunctionRef_AST
operator|!=
literal|null
operator|&&
name|namedFunctionRef_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|namedFunctionRef_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|namedFunctionRef_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|namedFunctionRef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|namedFunctionRef_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|argument
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|argument_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|PRAGMA_START
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|argument_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|QUESTION
case|:
block|{
name|argumentPlaceholder
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|argument_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|argument_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|argumentPlaceholder
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|argumentPlaceholder_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp345_AST
init|=
literal|null
decl_stmt|;
name|tmp345_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp345_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QUESTION
argument_list|)
expr_stmt|;
name|argumentPlaceholder_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|argumentPlaceholder_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|textTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|textTest_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp346_AST
init|=
literal|null
decl_stmt|;
name|tmp346_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp346_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|textTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|textTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|anyKindTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|anyKindTest_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp349_AST
init|=
literal|null
decl_stmt|;
name|tmp349_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp349_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|anyKindTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|anyKindTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|elementTest_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp352_AST
init|=
literal|null
decl_stmt|;
name|tmp352_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp352_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|elementNameOrWildcard
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COMMA
case|:
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|typeName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUESTION
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp355_AST
init|=
literal|null
decl_stmt|;
name|tmp355_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp355_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QUESTION
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|elementTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|elementTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attributeTest_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|attributeNameOrWildcard
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COMMA
case|:
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|typeName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUESTION
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp360_AST
init|=
literal|null
decl_stmt|;
name|tmp360_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp360_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QUESTION
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|attributeTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|attributeTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ATTRIBUTE_TEST
argument_list|,
literal|"attribute()"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|attributeTest_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|attributeTest_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|attributeTest_AST
operator|!=
literal|null
operator|&&
name|attributeTest_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|attributeTest_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|attributeTest_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|attributeTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|attributeTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|commentTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|commentTest_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp362_AST
init|=
literal|null
decl_stmt|;
name|tmp362_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp362_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_comment
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|commentTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|commentTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|piTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|piTest_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp365_AST
init|=
literal|null
decl_stmt|;
name|tmp365_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp365_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|182
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp367_AST
init|=
literal|null
decl_stmt|;
name|tmp367_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp367_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp368_AST
init|=
literal|null
decl_stmt|;
name|tmp368_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp368_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|piTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|piTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|documentTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|documentTest_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp370_AST
init|=
literal|null
decl_stmt|;
name|tmp370_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp370_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|183
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_element
case|:
block|{
name|elementTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|205
case|:
block|{
name|schemaElementTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|documentTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|documentTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementNameOrWildcard
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|elementNameOrWildcard_AST
init|=
literal|null
decl_stmt|;
name|String
name|qn
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STAR
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp373_AST
init|=
literal|null
decl_stmt|;
name|tmp373_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp373_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|elementNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|WILDCARD
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementNameOrWildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementNameOrWildcard_AST
operator|!=
literal|null
operator|&&
name|elementNameOrWildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementNameOrWildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementNameOrWildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|elementNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|qn
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|elementNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|QNAME
argument_list|,
name|qn
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementNameOrWildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementNameOrWildcard_AST
operator|!=
literal|null
operator|&&
name|elementNameOrWildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementNameOrWildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementNameOrWildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|elementNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|elementNameOrWildcard_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|typeName
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|typeName_AST
init|=
literal|null
decl_stmt|;
name|String
name|qn
init|=
literal|null
decl_stmt|;
name|qn
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|typeName_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|typeName_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|QNAME
argument_list|,
name|qn
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|typeName_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|typeName_AST
operator|!=
literal|null
operator|&&
name|typeName_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|typeName_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|typeName_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|typeName_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|typeName_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeNameOrWildcard
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attributeNameOrWildcard_AST
init|=
literal|null
decl_stmt|;
name|String
name|qn
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STAR
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp374_AST
init|=
literal|null
decl_stmt|;
name|tmp374_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp374_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|attributeNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|attributeNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|WILDCARD
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|attributeNameOrWildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|attributeNameOrWildcard_AST
operator|!=
literal|null
operator|&&
name|attributeNameOrWildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|attributeNameOrWildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|attributeNameOrWildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|attributeNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_xpointer
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|qn
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|attributeNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|attributeNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|QNAME
argument_list|,
name|qn
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|attributeNameOrWildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|attributeNameOrWildcard_AST
operator|!=
literal|null
operator|&&
name|attributeNameOrWildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|attributeNameOrWildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|attributeNameOrWildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|attributeNameOrWildcard_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|attributeNameOrWildcard_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|schemaElementTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|schemaElementTest_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp375_AST
init|=
literal|null
decl_stmt|;
name|tmp375_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp375_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|205
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|schemaElementTest_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|schemaElementTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementConstructor
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|elementConstructor_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
comment|//lexer.wsExplicit = true;
name|boolean
name|synPredMatched447
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LT
operator|)
operator|)
condition|)
block|{
name|int
name|_m447
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched447
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|qName
argument_list|()
expr_stmt|;
block|{
name|match
argument_list|(
name|_tokenSet_18
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched447
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m447
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched447
condition|)
block|{
name|elementWithAttributes
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LT
operator|)
condition|)
block|{
name|elementWithoutAttributes
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|elementConstructor_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xmlComment
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|xmlComment_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp378_AST
init|=
literal|null
decl_stmt|;
name|tmp378_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp378_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XML_COMMENT
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XML_COMMENT_END
argument_list|)
expr_stmt|;
name|xmlComment_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|xmlComment_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xmlPI
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|xmlPI_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp380_AST
init|=
literal|null
decl_stmt|;
name|tmp380_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp380_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XML_PI
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XML_PI_END
argument_list|)
expr_stmt|;
name|xmlPI_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|xmlPI_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|compElemConstructor
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|compElemConstructor_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e3_AST
init|=
literal|null
decl_stmt|;
name|String
name|qn
decl_stmt|;
name|boolean
name|synPredMatched420
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_element
operator|)
operator|)
condition|)
block|{
name|int
name|_m420
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched420
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched420
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m420
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched420
condition|)
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|PRAGMA_START
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|compElemBody
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|compElemConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|compElemConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_ELEM_CONSTRUCTOR
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|compElemConstructor_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|compElemConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|compElemConstructor_AST
operator|!=
literal|null
operator|&&
name|compElemConstructor_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|compElemConstructor_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|compElemConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|compElemConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_element
operator|)
condition|)
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
name|qn
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|PRAGMA_START
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|compElemBody
argument_list|()
expr_stmt|;
name|e3_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|compElemConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|compElemConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_ELEM_CONSTRUCTOR
argument_list|,
name|qn
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|STRING_LITERAL
argument_list|,
name|qn
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|e3_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|compElemConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|compElemConstructor_AST
operator|!=
literal|null
operator|&&
name|compElemConstructor_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|compElemConstructor_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|compElemConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|compElemConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|compElemConstructor_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|compAttrConstructor
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|compAttrConstructor_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e1_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e2_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e3_AST
init|=
literal|null
decl_stmt|;
name|String
name|qn
decl_stmt|;
name|boolean
name|synPredMatched434
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_attribute
operator|)
operator|)
condition|)
block|{
name|int
name|_m434
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched434
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched434
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m434
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched434
condition|)
block|{
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e1_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|compConstructorValue
argument_list|()
expr_stmt|;
name|e2_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|compAttrConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|compAttrConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_ATTR_CONSTRUCTOR
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|compAttrConstructor_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|compAttrConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|compAttrConstructor_AST
operator|!=
literal|null
operator|&&
name|compAttrConstructor_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|compAttrConstructor_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|compAttrConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|compAttrConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_attribute
operator|)
condition|)
block|{
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|qn
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|compConstructorValue
argument_list|()
expr_stmt|;
name|e3_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|compAttrConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|compAttrConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_ATTR_CONSTRUCTOR
argument_list|,
name|qn
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|STRING_LITERAL
argument_list|,
name|qn
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|e3_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|compAttrConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|compAttrConstructor_AST
operator|!=
literal|null
operator|&&
name|compAttrConstructor_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|compAttrConstructor_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|compAttrConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|compAttrConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|compAttrConstructor_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|compTextConstructor
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|compTextConstructor_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp394_AST
init|=
literal|null
decl_stmt|;
name|tmp394_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp394_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|compTextConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|compTextConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_TEXT_CONSTRUCTOR
argument_list|,
literal|"text"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|e_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|compTextConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|compTextConstructor_AST
operator|!=
literal|null
operator|&&
name|compTextConstructor_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|compTextConstructor_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|compTextConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|compTextConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|compTextConstructor_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|compDocumentConstructor
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|compDocumentConstructor_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp397_AST
init|=
literal|null
decl_stmt|;
name|tmp397_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp397_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_document
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|compDocumentConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|compDocumentConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_DOC_CONSTRUCTOR
argument_list|,
literal|"document"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|e_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|compDocumentConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|compDocumentConstructor_AST
operator|!=
literal|null
operator|&&
name|compDocumentConstructor_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|compDocumentConstructor_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|compDocumentConstructor_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|compDocumentConstructor_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|compDocumentConstructor_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|compXmlPI
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|compXmlPI_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e1_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e2_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e3_AST
init|=
literal|null
decl_stmt|;
name|String
name|qn
decl_stmt|;
name|boolean
name|synPredMatched441
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|182
operator|)
operator|)
condition|)
block|{
name|int
name|_m441
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched441
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
literal|182
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched441
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m441
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched441
condition|)
block|{
name|match
argument_list|(
literal|182
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e1_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|compConstructorValue
argument_list|()
expr_stmt|;
name|e2_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|compXmlPI_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|compXmlPI_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_PI_CONSTRUCTOR
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|compXmlPI_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|compXmlPI_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|compXmlPI_AST
operator|!=
literal|null
operator|&&
name|compXmlPI_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|compXmlPI_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|compXmlPI_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|compXmlPI_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|182
operator|)
condition|)
block|{
name|match
argument_list|(
literal|182
argument_list|)
expr_stmt|;
name|qn
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|compConstructorValue
argument_list|()
expr_stmt|;
name|e3_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|compXmlPI_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|compXmlPI_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|3
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_PI_CONSTRUCTOR
argument_list|,
name|qn
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|STRING_LITERAL
argument_list|,
name|qn
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|e3_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|compXmlPI_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|compXmlPI_AST
operator|!=
literal|null
operator|&&
name|compXmlPI_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|compXmlPI_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|compXmlPI_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|compXmlPI_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|compXmlPI_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|compXmlComment
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|compXmlComment_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp404_AST
init|=
literal|null
decl_stmt|;
name|tmp404_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp404_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_comment
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|compXmlComment_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|compXmlComment_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_COMMENT_CONSTRUCTOR
argument_list|,
literal|"comment"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|e_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|compXmlComment_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|compXmlComment_AST
operator|!=
literal|null
operator|&&
name|compXmlComment_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|compXmlComment_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|compXmlComment_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|compXmlComment_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|compXmlComment_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|compElemBody
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|compElemBody_AST
init|=
literal|null
decl_stmt|;
block|{
name|boolean
name|synPredMatched426
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_namespace
operator|)
operator|)
condition|)
block|{
name|int
name|_m426
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched426
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched426
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m426
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched426
condition|)
block|{
name|localNamespaceDecl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
name|_loop431
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
block|{
name|boolean
name|synPredMatched430
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_namespace
operator|)
operator|)
condition|)
block|{
name|int
name|_m430
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched430
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched430
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m430
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched430
condition|)
block|{
name|localNamespaceDecl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
break|break
name|_loop431
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|compElemBody_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|compElemBody_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|localNamespaceDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|localNamespaceDecl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|l
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|l_AST
init|=
literal|null
decl_stmt|;
name|String
name|nc
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|nc
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|l
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|l_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|l_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|localNamespaceDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|localNamespaceDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|COMP_NS_CONSTRUCTOR
argument_list|,
name|nc
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|l_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|localNamespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|localNamespaceDecl_AST
operator|!=
literal|null
operator|&&
name|localNamespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|localNamespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|localNamespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|localNamespaceDecl_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|localNamespaceDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|compConstructorValue
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|compConstructorValue_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e2_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp411_AST
init|=
literal|null
decl_stmt|;
name|tmp411_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp411_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_xquery
case|:
case|case
name|LITERAL_version
case|:
case|case
name|LITERAL_module
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_default
case|:
case|case
literal|71
case|:
case|case
name|LITERAL_ordering
case|:
case|case
name|LITERAL_construction
case|:
case|case
literal|74
case|:
case|case
name|LITERAL_option
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|MOD
case|:
case|case
name|LITERAL_import
case|:
case|case
name|LITERAL_encoding
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_preserve
case|:
case|case
name|LITERAL_strip
case|:
case|case
name|LITERAL_ordered
case|:
case|case
name|LITERAL_unordered
case|:
case|case
literal|93
case|:
case|case
name|LITERAL_inherit
case|:
case|case
literal|95
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_external
case|:
case|case
name|LITERAL_schema
case|:
case|case
name|LITERAL_as
case|:
case|case
name|LITERAL_at
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_try
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_switch
case|:
case|case
name|LITERAL_typeswitch
case|:
case|case
name|LITERAL_update
case|:
case|case
name|LITERAL_replace
case|:
case|case
name|LITERAL_value
case|:
case|case
name|LITERAL_insert
case|:
case|case
name|LITERAL_delete
case|:
case|case
name|LITERAL_rename
case|:
case|case
name|LITERAL_with
case|:
case|case
name|LITERAL_into
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_catch
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_by
case|:
case|case
name|LITERAL_group
case|:
case|case
name|LITERAL_case
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_of
case|:
case|case
name|LITERAL_treat
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|PRAGMA_START
case|:
case|case
name|LITERAL_union
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|182
case|:
case|case
literal|183
case|:
case|case
name|LITERAL_document
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|196
case|:
case|case
literal|197
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|200
case|:
case|case
literal|201
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_validate
case|:
block|{
name|expr
argument_list|()
expr_stmt|;
name|e2_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|compConstructorValue_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|compConstructorValue_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementWithAttributes
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|elementWithAttributes_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|q_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attrs_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|content_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|qn_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|,
name|cname
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|q_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|attributeList
argument_list|()
expr_stmt|;
name|attrs_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SLASH
case|:
block|{
block|{
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
if|if
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|elementWithAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ELEMENT
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|attrs_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementWithAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementWithAttributes_AST
operator|!=
literal|null
operator|&&
name|elementWithAttributes_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementWithAttributes_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementWithAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|GT
case|:
block|{
block|{
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementStack
operator|.
name|push
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
block|}
name|mixedElementContent
argument_list|()
expr_stmt|;
name|content_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|END_TAG_START
argument_list|)
expr_stmt|;
name|cname
operator|=
name|qName
argument_list|()
expr_stmt|;
name|qn_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
if|if
condition|(
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|qn_AST
argument_list|,
literal|"err:XPST0003: Found closing tag without opening tag: "
operator|+
name|cname
argument_list|)
throw|;
name|String
name|prev
init|=
operator|(
name|String
operator|)
name|elementStack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prev
operator|.
name|equals
argument_list|(
name|cname
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|qn_AST
argument_list|,
literal|"err:XPST0003: Found closing tag: "
operator|+
name|cname
operator|+
literal|"; expected: "
operator|+
name|prev
argument_list|)
throw|;
name|elementWithAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ELEMENT
argument_list|,
name|cname
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|attrs_AST
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
block|}
name|currentAST
operator|.
name|root
operator|=
name|elementWithAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementWithAttributes_AST
operator|!=
literal|null
operator|&&
name|elementWithAttributes_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementWithAttributes_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementWithAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|elementWithAttributes_AST
operator|.
name|copyLexInfo
argument_list|(
name|q_AST
argument_list|)
expr_stmt|;
block|}
name|elementWithAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|q_AST
argument_list|,
literal|"err:XPST0003: Static error: no closing end tag found for element constructor: "
operator|+
name|name
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|returnAST
operator|=
name|elementWithAttributes_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementWithoutAttributes
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|elementWithoutAttributes_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|q_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|content_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|qn_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|,
name|cname
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp419_AST
init|=
literal|null
decl_stmt|;
name|tmp419_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp419_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|q_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SLASH
case|:
block|{
block|{
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithoutAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|elementWithoutAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ELEMENT
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementWithoutAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementWithoutAttributes_AST
operator|!=
literal|null
operator|&&
name|elementWithoutAttributes_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementWithoutAttributes_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementWithoutAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|GT
case|:
block|{
block|{
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementStack
operator|.
name|push
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
block|}
name|mixedElementContent
argument_list|()
expr_stmt|;
name|content_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|END_TAG_START
argument_list|)
expr_stmt|;
name|cname
operator|=
name|qName
argument_list|()
expr_stmt|;
name|qn_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithoutAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
if|if
condition|(
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|qn_AST
argument_list|,
literal|"found additional closing tag: "
operator|+
name|cname
argument_list|)
throw|;
name|String
name|prev
init|=
operator|(
name|String
operator|)
name|elementStack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prev
operator|.
name|equals
argument_list|(
name|cname
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|qn_AST
argument_list|,
literal|"found closing tag: "
operator|+
name|cname
operator|+
literal|"; expected: "
operator|+
name|prev
argument_list|)
throw|;
name|elementWithoutAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ELEMENT
argument_list|,
name|cname
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|content_AST
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
comment|//lexer.wsExplicit= false;
block|}
name|currentAST
operator|.
name|root
operator|=
name|elementWithoutAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementWithoutAttributes_AST
operator|!=
literal|null
operator|&&
name|elementWithoutAttributes_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementWithoutAttributes_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementWithoutAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithoutAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|elementWithoutAttributes_AST
operator|.
name|copyLexInfo
argument_list|(
name|q_AST
argument_list|)
expr_stmt|;
block|}
name|elementWithoutAttributes_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|q_AST
argument_list|,
literal|"err:XPST0003: No closing end tag found for element constructor: "
operator|+
name|name
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|returnAST
operator|=
name|elementWithoutAttributes_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mixedElementContent
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|mixedElementContent_AST
init|=
literal|null
decl_stmt|;
block|{
name|_loop472
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_19
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|elementContent
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop472
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|mixedElementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|mixedElementContent_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attributeList_AST
init|=
literal|null
decl_stmt|;
block|{
name|int
name|_cnt458
init|=
literal|0
decl_stmt|;
name|_loop458
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|attributeDef
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt458
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop458
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt458
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|attributeList_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|attributeList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeDef
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attributeDef_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|q_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|lexer
operator|.
name|parseStringLiterals
operator|=
literal|false
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|q_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|returnAST
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|attributeValue
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|attributeDef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|attributeDef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ATTRIBUTE
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|attributeDef_AST
argument_list|)
argument_list|)
expr_stmt|;
name|attributeDef_AST
operator|.
name|copyLexInfo
argument_list|(
name|q_AST
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|attributeDef_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|attributeDef_AST
operator|!=
literal|null
operator|&&
name|attributeDef_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|attributeDef_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|attributeDef_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|attributeDef_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|attributeDef_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeValue
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attributeValue_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUOT
case|:
block|{
name|match
argument_list|(
name|QUOT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|attrDelimChar
operator|=
literal|'"'
expr_stmt|;
block|}
block|{
name|_loop462
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_20
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|quotAttrValueContent
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop462
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|QUOT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|parseStringLiterals
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|false
expr_stmt|;
block|}
name|attributeValue_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|APOS
case|:
block|{
name|match
argument_list|(
name|APOS
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|attrDelimChar
operator|=
literal|'\''
expr_stmt|;
block|}
block|{
name|_loop464
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_21
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|aposAttrValueContent
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop464
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|APOS
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|parseStringLiterals
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|false
expr_stmt|;
block|}
name|attributeValue_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|attributeValue_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|quotAttrValueContent
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|quotAttrValueContent_AST
init|=
literal|null
decl_stmt|;
name|Token
name|c
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|c_AST
init|=
literal|null
decl_stmt|;
name|Token
name|e
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUOT_ATTRIBUTE_CONTENT
case|:
block|{
name|c
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|c_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|c_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QUOT_ATTRIBUTE_CONTENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|quotAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|quotAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ATTRIBUTE_CONTENT
argument_list|,
name|c
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|quotAttrValueContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|quotAttrValueContent_AST
operator|!=
literal|null
operator|&&
name|quotAttrValueContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|quotAttrValueContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|quotAttrValueContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|quotAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|ESCAPE_QUOT
case|:
block|{
name|e
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|e_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|e_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ESCAPE_QUOT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|quotAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|quotAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ATTRIBUTE_CONTENT
argument_list|,
literal|"\""
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|quotAttrValueContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|quotAttrValueContent_AST
operator|!=
literal|null
operator|&&
name|quotAttrValueContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|quotAttrValueContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|quotAttrValueContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|quotAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
case|case
name|RCURLY
case|:
block|{
name|attrCommonContent
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|quotAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|quotAttrValueContent_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|aposAttrValueContent
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|aposAttrValueContent_AST
init|=
literal|null
decl_stmt|;
name|Token
name|c
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|c_AST
init|=
literal|null
decl_stmt|;
name|Token
name|e
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|APOS_ATTRIBUTE_CONTENT
case|:
block|{
name|c
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|c_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|c_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|APOS_ATTRIBUTE_CONTENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|aposAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|aposAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ATTRIBUTE_CONTENT
argument_list|,
name|c
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|aposAttrValueContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|aposAttrValueContent_AST
operator|!=
literal|null
operator|&&
name|aposAttrValueContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|aposAttrValueContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|aposAttrValueContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|aposAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|ESCAPE_APOS
case|:
block|{
name|e
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|e_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|e_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ESCAPE_APOS
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|aposAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|aposAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ATTRIBUTE_CONTENT
argument_list|,
literal|"'"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|aposAttrValueContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|aposAttrValueContent_AST
operator|!=
literal|null
operator|&&
name|aposAttrValueContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|aposAttrValueContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|aposAttrValueContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|aposAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
case|case
name|RCURLY
case|:
block|{
name|attrCommonContent
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|aposAttrValueContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|aposAttrValueContent_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attrCommonContent
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attrCommonContent_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched469
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LCURLY
operator|)
operator|)
condition|)
block|{
name|int
name|_m469
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched469
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched469
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m469
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched469
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp430_AST
init|=
literal|null
decl_stmt|;
name|tmp430_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp430_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp431_AST
init|=
literal|null
decl_stmt|;
name|tmp431_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp431_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|attrCommonContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|parseStringLiterals
operator|=
literal|false
expr_stmt|;
name|attrCommonContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ATTRIBUTE_CONTENT
argument_list|,
literal|"{"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|attrCommonContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|attrCommonContent_AST
operator|!=
literal|null
operator|&&
name|attrCommonContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|attrCommonContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|attrCommonContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|attrCommonContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|RCURLY
operator|)
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp432_AST
init|=
literal|null
decl_stmt|;
name|tmp432_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp432_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp433_AST
init|=
literal|null
decl_stmt|;
name|tmp433_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp433_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|attrCommonContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|attrCommonContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|ATTRIBUTE_CONTENT
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|attrCommonContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|attrCommonContent_AST
operator|!=
literal|null
operator|&&
name|attrCommonContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|attrCommonContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|attrCommonContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|attrCommonContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LCURLY
operator|)
condition|)
block|{
name|attributeEnclosedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|attrCommonContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|attrCommonContent_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeEnclosedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attributeEnclosedExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp434_AST
init|=
literal|null
decl_stmt|;
name|tmp434_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp434_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|false
expr_stmt|;
name|lexer
operator|.
name|parseStringLiterals
operator|=
literal|true
expr_stmt|;
block|}
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|parseStringLiterals
operator|=
literal|false
expr_stmt|;
block|}
name|attributeEnclosedExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|attributeEnclosedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementContent
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|elementContent_AST
init|=
literal|null
decl_stmt|;
name|Token
name|content
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|content_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LT
case|:
block|{
name|elementConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|RCURLY
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp436_AST
init|=
literal|null
decl_stmt|;
name|tmp436_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp436_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp437_AST
init|=
literal|null
decl_stmt|;
name|tmp437_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp437_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|TEXT
argument_list|,
literal|"}"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementContent_AST
operator|!=
literal|null
operator|&&
name|elementContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|ELEMENT_CONTENT
case|:
block|{
name|content
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|content_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|content_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ELEMENT_CONTENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|TEXT
argument_list|,
name|content
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementContent_AST
operator|!=
literal|null
operator|&&
name|elementContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XML_COMMENT
case|:
block|{
name|xmlComment
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XML_CDATA
case|:
block|{
name|cdataSection
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XML_PI
case|:
block|{
name|xmlPI
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
name|boolean
name|synPredMatched475
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LCURLY
operator|)
operator|)
condition|)
block|{
name|int
name|_m475
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched475
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched475
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m475
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched475
condition|)
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp438_AST
init|=
literal|null
decl_stmt|;
name|tmp438_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp438_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp439_AST
init|=
literal|null
decl_stmt|;
name|tmp439_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp439_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|TEXT
argument_list|,
literal|"{"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementContent_AST
operator|!=
literal|null
operator|&&
name|elementContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LCURLY
operator|)
condition|)
block|{
name|enclosedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|elementContent_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|cdataSection
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|cdataSection_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp440_AST
init|=
literal|null
decl_stmt|;
name|tmp440_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp440_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XML_CDATA
argument_list|)
expr_stmt|;
name|cdataSection_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|cdataSection_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|enclosedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|XPathException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|enclosedExpr_AST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp441_AST
init|=
literal|null
decl_stmt|;
name|tmp441_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp441_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|globalStack
operator|.
name|push
argument_list|(
name|elementStack
argument_list|)
expr_stmt|;
name|elementStack
operator|=
operator|new
name|Stack
argument_list|()
expr_stmt|;
name|lexer
operator|.
name|inElementContent
operator|=
literal|false
expr_stmt|;
block|}
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementStack
operator|=
operator|(
name|Stack
operator|)
name|globalStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
block|}
name|enclosedExpr_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|enclosedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|reservedKeywords
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|reservedKeywords_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_element
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp443_AST
init|=
literal|null
decl_stmt|;
name|tmp443_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp443_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"element"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_to
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp444_AST
init|=
literal|null
decl_stmt|;
name|tmp444_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp444_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_to
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"to"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_div
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp445_AST
init|=
literal|null
decl_stmt|;
name|tmp445_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp445_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_div
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"div"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_mod
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp446_AST
init|=
literal|null
decl_stmt|;
name|tmp446_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp446_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_mod
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"mod"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp447_AST
init|=
literal|null
decl_stmt|;
name|tmp447_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp447_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"text"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp448_AST
init|=
literal|null
decl_stmt|;
name|tmp448_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp448_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"node"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_or
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp449_AST
init|=
literal|null
decl_stmt|;
name|tmp449_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp449_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_or
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"or"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_and
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp450_AST
init|=
literal|null
decl_stmt|;
name|tmp450_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp450_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_and
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"and"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_child
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp451_AST
init|=
literal|null
decl_stmt|;
name|tmp451_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp451_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_child
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"child"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_parent
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp452_AST
init|=
literal|null
decl_stmt|;
name|tmp452_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp452_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"parent"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_self
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp453_AST
init|=
literal|null
decl_stmt|;
name|tmp453_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp453_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_self
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"self"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp454_AST
init|=
literal|null
decl_stmt|;
name|tmp454_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp454_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"attribute"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp455_AST
init|=
literal|null
decl_stmt|;
name|tmp455_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp455_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_comment
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"comment"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_document
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp456_AST
init|=
literal|null
decl_stmt|;
name|tmp456_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp456_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_document
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"document"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|183
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp457_AST
init|=
literal|null
decl_stmt|;
name|tmp457_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp457_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|183
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"document-node"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_collection
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp458_AST
init|=
literal|null
decl_stmt|;
name|tmp458_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp458_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"collection"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ancestor
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp459_AST
init|=
literal|null
decl_stmt|;
name|tmp459_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp459_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ancestor
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ancestor"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descendant
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp460_AST
init|=
literal|null
decl_stmt|;
name|tmp460_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp460_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_descendant
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"descendant"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|196
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp461_AST
init|=
literal|null
decl_stmt|;
name|tmp461_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp461_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|196
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"descendant-or-self"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|200
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp462_AST
init|=
literal|null
decl_stmt|;
name|tmp462_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp462_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|200
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ancestor-or-self"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|201
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp463_AST
init|=
literal|null
decl_stmt|;
name|tmp463_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp463_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|201
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"preceding-sibling"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|197
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp464_AST
init|=
literal|null
decl_stmt|;
name|tmp464_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp464_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|197
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"following-sibling"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_following
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp465_AST
init|=
literal|null
decl_stmt|;
name|tmp465_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp465_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_following
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"following"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_preceding
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp466_AST
init|=
literal|null
decl_stmt|;
name|tmp466_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp466_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_preceding
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"preceding"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_item
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp467_AST
init|=
literal|null
decl_stmt|;
name|tmp467_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp467_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_item
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"item"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_empty
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp468_AST
init|=
literal|null
decl_stmt|;
name|tmp468_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp468_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_empty
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"empty"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_version
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp469_AST
init|=
literal|null
decl_stmt|;
name|tmp469_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp469_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_version
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"version"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_xquery
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp470_AST
init|=
literal|null
decl_stmt|;
name|tmp470_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp470_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_xquery
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"xquery"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_variable
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp471_AST
init|=
literal|null
decl_stmt|;
name|tmp471_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp471_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_variable
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"variable"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_namespace
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp472_AST
init|=
literal|null
decl_stmt|;
name|tmp472_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp472_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"namespace"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_if
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp473_AST
init|=
literal|null
decl_stmt|;
name|tmp473_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp473_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_if
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"if"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_then
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp474_AST
init|=
literal|null
decl_stmt|;
name|tmp474_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp474_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_then
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"then"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_else
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp475_AST
init|=
literal|null
decl_stmt|;
name|tmp475_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp475_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_else
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"else"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_for
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp476_AST
init|=
literal|null
decl_stmt|;
name|tmp476_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp476_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_for
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"for"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_where
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp477_AST
init|=
literal|null
decl_stmt|;
name|tmp477_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp477_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_where
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"where"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_in
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp478_AST
init|=
literal|null
decl_stmt|;
name|tmp478_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp478_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_in
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"in"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_let
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp479_AST
init|=
literal|null
decl_stmt|;
name|tmp479_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp479_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_let
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"let"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_try
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp480_AST
init|=
literal|null
decl_stmt|;
name|tmp480_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp480_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_try
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"try"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_catch
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp481_AST
init|=
literal|null
decl_stmt|;
name|tmp481_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp481_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_catch
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"catch"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_default
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp482_AST
init|=
literal|null
decl_stmt|;
name|tmp482_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp482_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"default"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_function
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp483_AST
init|=
literal|null
decl_stmt|;
name|tmp483_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp483_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"function"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_external
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp484_AST
init|=
literal|null
decl_stmt|;
name|tmp484_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp484_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_external
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"external"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_as
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp485_AST
init|=
literal|null
decl_stmt|;
name|tmp485_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp485_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"as"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_union
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp486_AST
init|=
literal|null
decl_stmt|;
name|tmp486_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp486_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_union
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"union"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_intersect
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp487_AST
init|=
literal|null
decl_stmt|;
name|tmp487_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp487_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_intersect
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"intersect"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_except
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp488_AST
init|=
literal|null
decl_stmt|;
name|tmp488_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp488_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_except
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"except"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_order
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp489_AST
init|=
literal|null
decl_stmt|;
name|tmp489_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp489_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_order
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"order"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_by
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp490_AST
init|=
literal|null
decl_stmt|;
name|tmp490_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp490_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_by
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"by"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_group
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp491_AST
init|=
literal|null
decl_stmt|;
name|tmp491_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp491_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_group
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"group"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_some
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp492_AST
init|=
literal|null
decl_stmt|;
name|tmp492_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp492_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_some
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"some"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_every
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp493_AST
init|=
literal|null
decl_stmt|;
name|tmp493_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp493_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_every
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"every"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_is
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp494_AST
init|=
literal|null
decl_stmt|;
name|tmp494_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp494_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_is
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"is"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_isnot
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp495_AST
init|=
literal|null
decl_stmt|;
name|tmp495_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp495_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_isnot
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"isnot"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_module
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp496_AST
init|=
literal|null
decl_stmt|;
name|tmp496_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp496_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_module
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"module"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_import
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp497_AST
init|=
literal|null
decl_stmt|;
name|tmp497_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp497_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_import
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"import"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_at
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp498_AST
init|=
literal|null
decl_stmt|;
name|tmp498_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp498_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_at
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"at"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_cast
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp499_AST
init|=
literal|null
decl_stmt|;
name|tmp499_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp499_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_cast
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"cast"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_return
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp500_AST
init|=
literal|null
decl_stmt|;
name|tmp500_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp500_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_return
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"return"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_instance
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp501_AST
init|=
literal|null
decl_stmt|;
name|tmp501_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp501_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_instance
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"instance"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_of
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp502_AST
init|=
literal|null
decl_stmt|;
name|tmp502_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp502_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_of
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"of"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_declare
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp503_AST
init|=
literal|null
decl_stmt|;
name|tmp503_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp503_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"declare"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_collation
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp504_AST
init|=
literal|null
decl_stmt|;
name|tmp504_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp504_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_collation
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"collation"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|71
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp505_AST
init|=
literal|null
decl_stmt|;
name|tmp505_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp505_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|71
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"boundary-space"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_preserve
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp506_AST
init|=
literal|null
decl_stmt|;
name|tmp506_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp506_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_preserve
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"preserve"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_strip
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp507_AST
init|=
literal|null
decl_stmt|;
name|tmp507_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp507_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_strip
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"strip"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ordering
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp508_AST
init|=
literal|null
decl_stmt|;
name|tmp508_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp508_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ordering
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ordering"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_construction
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp509_AST
init|=
literal|null
decl_stmt|;
name|tmp509_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp509_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_construction
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"construction"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ordered
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp510_AST
init|=
literal|null
decl_stmt|;
name|tmp510_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp510_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ordered
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ordered"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_unordered
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp511_AST
init|=
literal|null
decl_stmt|;
name|tmp511_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp511_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_unordered
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"unordered"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_typeswitch
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp512_AST
init|=
literal|null
decl_stmt|;
name|tmp512_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp512_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_typeswitch
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"typeswitch"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_switch
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp513_AST
init|=
literal|null
decl_stmt|;
name|tmp513_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp513_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_switch
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"switch"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_encoding
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp514_AST
init|=
literal|null
decl_stmt|;
name|tmp514_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp514_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"encoding"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|74
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp515_AST
init|=
literal|null
decl_stmt|;
name|tmp515_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp515_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|74
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"base-uri"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_update
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp516_AST
init|=
literal|null
decl_stmt|;
name|tmp516_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp516_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_update
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"update"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_replace
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp517_AST
init|=
literal|null
decl_stmt|;
name|tmp517_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp517_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_replace
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"replace"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_delete
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp518_AST
init|=
literal|null
decl_stmt|;
name|tmp518_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp518_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_delete
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"delete"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_value
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp519_AST
init|=
literal|null
decl_stmt|;
name|tmp519_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp519_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_value
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"value"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_insert
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp520_AST
init|=
literal|null
decl_stmt|;
name|tmp520_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp520_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_insert
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"insert"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_with
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp521_AST
init|=
literal|null
decl_stmt|;
name|tmp521_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp521_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_with
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"with"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_into
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp522_AST
init|=
literal|null
decl_stmt|;
name|tmp522_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp522_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_into
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"into"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_rename
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp523_AST
init|=
literal|null
decl_stmt|;
name|tmp523_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp523_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_rename
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"rename"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_option
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp524_AST
init|=
literal|null
decl_stmt|;
name|tmp524_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp524_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_option
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"option"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_case
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp525_AST
init|=
literal|null
decl_stmt|;
name|tmp525_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp525_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_case
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"case"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_validate
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp526_AST
init|=
literal|null
decl_stmt|;
name|tmp526_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp526_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_validate
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"validate"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_schema
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp527_AST
init|=
literal|null
decl_stmt|;
name|tmp527_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp527_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_schema
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"schema"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_treat
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp528_AST
init|=
literal|null
decl_stmt|;
name|tmp528_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp528_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_treat
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"treat"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|93
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp529_AST
init|=
literal|null
decl_stmt|;
name|tmp529_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp529_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|93
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"no-preserve"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_inherit
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp530_AST
init|=
literal|null
decl_stmt|;
name|tmp530_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp530_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_inherit
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"inherit"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|95
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp531_AST
init|=
literal|null
decl_stmt|;
name|tmp531_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp531_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|95
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"no-inherit"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_eq
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp532_AST
init|=
literal|null
decl_stmt|;
name|tmp532_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp532_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_eq
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"eq"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ne
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp533_AST
init|=
literal|null
decl_stmt|;
name|tmp533_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp533_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ne
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ne"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_lt
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp534_AST
init|=
literal|null
decl_stmt|;
name|tmp534_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp534_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_lt
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"lt"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_le
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp535_AST
init|=
literal|null
decl_stmt|;
name|tmp535_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp535_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_le
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"le"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_gt
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp536_AST
init|=
literal|null
decl_stmt|;
name|tmp536_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp536_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_gt
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"gt"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ge
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp537_AST
init|=
literal|null
decl_stmt|;
name|tmp537_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp537_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ge
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ge"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_xpointer
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp538_AST
init|=
literal|null
decl_stmt|;
name|tmp538_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp538_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_xpointer
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"xpointer"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|reservedKeywords_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|_tokenNames
init|=
block|{
literal|"<0>"
block|,
literal|"EOF"
block|,
literal|"<2>"
block|,
literal|"NULL_TREE_LOOKAHEAD"
block|,
literal|"QNAME"
block|,
literal|"PREDICATE"
block|,
literal|"FLWOR"
block|,
literal|"PARENTHESIZED"
block|,
literal|"ABSOLUTE_SLASH"
block|,
literal|"ABSOLUTE_DSLASH"
block|,
literal|"WILDCARD"
block|,
literal|"PREFIX_WILDCARD"
block|,
literal|"FUNCTION"
block|,
literal|"DYNAMIC_FCALL"
block|,
literal|"UNARY_MINUS"
block|,
literal|"UNARY_PLUS"
block|,
literal|"XPOINTER"
block|,
literal|"XPOINTER_ID"
block|,
literal|"VARIABLE_REF"
block|,
literal|"VARIABLE_BINDING"
block|,
literal|"ELEMENT"
block|,
literal|"ATTRIBUTE"
block|,
literal|"ATTRIBUTE_CONTENT"
block|,
literal|"TEXT"
block|,
literal|"VERSION_DECL"
block|,
literal|"NAMESPACE_DECL"
block|,
literal|"DEF_NAMESPACE_DECL"
block|,
literal|"DEF_COLLATION_DECL"
block|,
literal|"DEF_FUNCTION_NS_DECL"
block|,
literal|"ANNOT_DECL"
block|,
literal|"GLOBAL_VAR"
block|,
literal|"FUNCTION_DECL"
block|,
literal|"FUNCTION_INLINE"
block|,
literal|"FUNCTION_TEST"
block|,
literal|"PROLOG"
block|,
literal|"OPTION"
block|,
literal|"ATOMIC_TYPE"
block|,
literal|"MODULE"
block|,
literal|"ORDER_BY"
block|,
literal|"GROUP_BY"
block|,
literal|"POSITIONAL_VAR"
block|,
literal|"CATCH_ERROR_CODE"
block|,
literal|"CATCH_ERROR_DESC"
block|,
literal|"CATCH_ERROR_VAL"
block|,
literal|"MODULE_DECL"
block|,
literal|"MODULE_IMPORT"
block|,
literal|"SCHEMA_IMPORT"
block|,
literal|"ATTRIBUTE_TEST"
block|,
literal|"COMP_ELEM_CONSTRUCTOR"
block|,
literal|"COMP_ATTR_CONSTRUCTOR"
block|,
literal|"COMP_TEXT_CONSTRUCTOR"
block|,
literal|"COMP_COMMENT_CONSTRUCTOR"
block|,
literal|"COMP_PI_CONSTRUCTOR"
block|,
literal|"COMP_NS_CONSTRUCTOR"
block|,
literal|"COMP_DOC_CONSTRUCTOR"
block|,
literal|"PRAGMA"
block|,
literal|"GTEQ"
block|,
literal|"SEQUENCE"
block|,
literal|"\"xpointer\""
block|,
literal|"opening parenthesis '('"
block|,
literal|"closing parenthesis ')'"
block|,
literal|"name"
block|,
literal|"\"xquery\""
block|,
literal|"\"version\""
block|,
literal|"semicolon ';'"
block|,
literal|"\"module\""
block|,
literal|"\"namespace\""
block|,
literal|"="
block|,
literal|"string literal"
block|,
literal|"\"declare\""
block|,
literal|"\"default\""
block|,
literal|"\"boundary-space\""
block|,
literal|"\"ordering\""
block|,
literal|"\"construction\""
block|,
literal|"\"base-uri\""
block|,
literal|"\"copy-namespaces\""
block|,
literal|"\"option\""
block|,
literal|"\"function\""
block|,
literal|"\"variable\""
block|,
literal|"MOD"
block|,
literal|"\"import\""
block|,
literal|"\"encoding\""
block|,
literal|"\"collation\""
block|,
literal|"\"element\""
block|,
literal|"\"order\""
block|,
literal|"\"empty\""
block|,
literal|"\"greatest\""
block|,
literal|"\"least\""
block|,
literal|"\"preserve\""
block|,
literal|"\"strip\""
block|,
literal|"\"ordered\""
block|,
literal|"\"unordered\""
block|,
literal|"COMMA"
block|,
literal|"\"no-preserve\""
block|,
literal|"\"inherit\""
block|,
literal|"\"no-inherit\""
block|,
literal|"dollar sign '$'"
block|,
literal|"opening curly brace '{'"
block|,
literal|"closing curly brace '}'"
block|,
literal|"COLON"
block|,
literal|"\"external\""
block|,
literal|"\"schema\""
block|,
literal|"\":\""
block|,
literal|"\"as\""
block|,
literal|"\"at\""
block|,
literal|"\"empty-sequence\""
block|,
literal|"question mark '?'"
block|,
literal|"wildcard '*'"
block|,
literal|"+"
block|,
literal|"\"item\""
block|,
literal|"\"for\""
block|,
literal|"\"let\""
block|,
literal|"\"try\""
block|,
literal|"\"some\""
block|,
literal|"\"every\""
block|,
literal|"\"if\""
block|,
literal|"\"switch\""
block|,
literal|"\"typeswitch\""
block|,
literal|"\"update\""
block|,
literal|"\"replace\""
block|,
literal|"\"value\""
block|,
literal|"\"insert\""
block|,
literal|"\"delete\""
block|,
literal|"\"rename\""
block|,
literal|"\"with\""
block|,
literal|"\"into\""
block|,
literal|"\"preceding\""
block|,
literal|"\"following\""
block|,
literal|"\"catch\""
block|,
literal|"union"
block|,
literal|"\"where\""
block|,
literal|"\"return\""
block|,
literal|"\"in\""
block|,
literal|"\"by\""
block|,
literal|"\"stable\""
block|,
literal|"\"ascending\""
block|,
literal|"\"descending\""
block|,
literal|"\"group\""
block|,
literal|"\"satisfies\""
block|,
literal|"\"case\""
block|,
literal|"\"then\""
block|,
literal|"\"else\""
block|,
literal|"\"or\""
block|,
literal|"\"and\""
block|,
literal|"\"instance\""
block|,
literal|"\"of\""
block|,
literal|"\"treat\""
block|,
literal|"\"castable\""
block|,
literal|"\"cast\""
block|,
literal|"BEFORE"
block|,
literal|"AFTER"
block|,
literal|"\"eq\""
block|,
literal|"\"ne\""
block|,
literal|"\"lt\""
block|,
literal|"\"le\""
block|,
literal|"\"gt\""
block|,
literal|"\"ge\""
block|,
literal|">"
block|,
literal|"!="
block|,
literal|"<"
block|,
literal|"<="
block|,
literal|"\"is\""
block|,
literal|"\"isnot\""
block|,
literal|"fulltext operator '&='"
block|,
literal|"fulltext operator '|='"
block|,
literal|"||"
block|,
literal|"\"to\""
block|,
literal|"-"
block|,
literal|"\"div\""
block|,
literal|"\"idiv\""
block|,
literal|"\"mod\""
block|,
literal|"PRAGMA_START"
block|,
literal|"pragma expression"
block|,
literal|"\"union\""
block|,
literal|"\"intersect\""
block|,
literal|"\"except\""
block|,
literal|"single slash '/'"
block|,
literal|"double slash '//'"
block|,
literal|"\"text\""
block|,
literal|"\"node\""
block|,
literal|"\"attribute\""
block|,
literal|"\"comment\""
block|,
literal|"\"processing-instruction\""
block|,
literal|"\"document-node\""
block|,
literal|"\"document\""
block|,
literal|"HASH"
block|,
literal|"."
block|,
literal|"XML comment"
block|,
literal|"processing instruction"
block|,
literal|"opening brace '['"
block|,
literal|"closing brace ']'"
block|,
literal|"@ char"
block|,
literal|".."
block|,
literal|"\"child\""
block|,
literal|"\"self\""
block|,
literal|"\"descendant\""
block|,
literal|"\"descendant-or-self\""
block|,
literal|"\"following-sibling\""
block|,
literal|"\"parent\""
block|,
literal|"\"ancestor\""
block|,
literal|"\"ancestor-or-self\""
block|,
literal|"\"preceding-sibling\""
block|,
literal|"DOUBLE_LITERAL"
block|,
literal|"DECIMAL_LITERAL"
block|,
literal|"INTEGER_LITERAL"
block|,
literal|"\"schema-element\""
block|,
literal|"XML end tag"
block|,
literal|"double quote '\\\"'"
block|,
literal|"single quote '"
block|,
literal|"QUOT_ATTRIBUTE_CONTENT"
block|,
literal|"ESCAPE_QUOT"
block|,
literal|"APOS_ATTRIBUTE_CONTENT"
block|,
literal|"ESCAPE_APOS"
block|,
literal|"ELEMENT_CONTENT"
block|,
literal|"end of XML comment"
block|,
literal|"end of processing instruction"
block|,
literal|"CDATA section"
block|,
literal|"\"collection\""
block|,
literal|"\"validate\""
block|,
literal|"start of processing instruction"
block|,
literal|"CDATA section start"
block|,
literal|"end of CDATA section"
block|,
literal|"LETTER"
block|,
literal|"DIGITS"
block|,
literal|"HEX_DIGITS"
block|,
literal|"NMSTART"
block|,
literal|"NMCHAR"
block|,
literal|"WS"
block|,
literal|"XQuery comment"
block|,
literal|"PREDEFINED_ENTITY_REF"
block|,
literal|"CHAR_REF"
block|,
literal|"S"
block|,
literal|"NEXT_TOKEN"
block|,
literal|"CHAR"
block|,
literal|"BASECHAR"
block|,
literal|"IDEOGRAPHIC"
block|,
literal|"COMBINING_CHAR"
block|,
literal|"DIGIT"
block|,
literal|"EXTENDER"
block|}
decl_stmt|;
specifier|protected
name|void
name|buildTokenTypeASTClassMap
parameter_list|()
block|{
name|tokenTypeToASTClassMap
operator|=
literal|null
expr_stmt|;
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|1441151880758558718L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|6932358236170L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
operator|-
literal|7061664253356803523L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|100671487L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|2017612633061982208L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|33324932302874L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|125226979000056381L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|100664318L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|2017612633061982208L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|33324932302874L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|143241377509538365L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|100664318L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_3
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|1152921504606846978L
block|,
operator|-
literal|1152677833660432311L
block|,
literal|4611941105123061726L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_3
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_4
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|0L
block|,
literal|524288L
block|,
literal|70931694131085312L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_4
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_4
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_5
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|1441151880758558720L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|6932358236170L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
operator|-
literal|7061664253356803523L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|100671487L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_5
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_5
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_6
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|2017612633061982208L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|24528839280666L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|125226979000056381L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|100664318L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_6
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_6
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_7
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|0L
block|,
literal|8L
block|,
literal|8053063680L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_7
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_7
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_8
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|0L
block|,
literal|8796093022208L
block|,
literal|7696581394432L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_8
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_8
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_9
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|2017612633061982208L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|24528839280666L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
operator|-
literal|9080130659345237443L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|100664319L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_9
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_9
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_10
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|1441151880758558720L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|33320637302794L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|2160854012719004221L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|100671486L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_10
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_10
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_11
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|9223372036854775808L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|4503599627370496L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|62L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_11
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_11
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_12
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|4611686018427387904L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|960L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_12
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_12
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_13
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|0L
block|,
literal|524288L
block|,
literal|104708691336364032L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_13
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_13
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_14
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|2017612633061982208L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|33324932270090L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|125226979000056381L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|100664318L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_14
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_14
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_15
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|2017612633061982208L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|33324932302858L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|125226979000056381L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|100664318L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_15
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_15
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_16
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|16L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|7168L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_16
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_16
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_17
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|1729382256910270466L
block|,
operator|-
literal|1152683442887720887L
block|,
literal|6918628539268722638L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_17
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_17
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_18
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|12
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|16L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
operator|-
literal|281475513581569L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|140737488355327L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_18
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_18
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_19
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|25769803776L
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
literal|1729382259057754112L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|18874368L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_19
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_19
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_20
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|25769803776L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|393216L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_20
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_20
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_21
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|25769803776L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
literal|1572864L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_21
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_21
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

