begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.4: "XQuery.g" -> "XQueryTreeParser.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|debug
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TreeParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTPair
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|ASTArray
import|;
end_import

begin_comment
comment|/**  * The tree parser: walks the AST created by the parser to generate  * XQuery expression objects.  */
end_comment

begin_class
specifier|public
class|class
name|XQueryTreeParser
extends|extends
name|antlr
operator|.
name|TreeParser
implements|implements
name|XQueryParserTokenTypes
block|{
specifier|private
name|XQueryContext
name|context
decl_stmt|;
specifier|private
name|ExternalModule
name|myModule
init|=
literal|null
decl_stmt|;
specifier|protected
name|ArrayList
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|foundError
init|=
literal|false
decl_stmt|;
specifier|public
name|XQueryTreeParser
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|ExternalModule
name|getModule
parameter_list|()
block|{
return|return
name|myModule
return|;
block|}
specifier|public
name|boolean
name|foundErrors
parameter_list|()
block|{
return|return
name|foundError
return|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exceptions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Exception
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Exception
name|getLastException
parameter_list|()
block|{
return|return
operator|(
name|Exception
operator|)
name|exceptions
operator|.
name|get
argument_list|(
name|exceptions
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|protected
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|foundError
operator|=
literal|true
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
class|class
name|ForLetClause
block|{
name|String
name|varName
decl_stmt|;
name|SequenceType
name|sequenceType
init|=
literal|null
decl_stmt|;
name|String
name|posVar
init|=
literal|null
decl_stmt|;
name|Expression
name|inputSequence
decl_stmt|;
name|Expression
name|action
decl_stmt|;
name|boolean
name|isForClause
init|=
literal|true
decl_stmt|;
block|}
specifier|private
specifier|static
class|class
name|FunctionParameter
block|{
name|String
name|varName
decl_stmt|;
name|SequenceType
name|type
init|=
name|FunctionSignature
operator|.
name|DEFAULT_TYPE
decl_stmt|;
specifier|public
name|FunctionParameter
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|this
operator|.
name|varName
operator|=
name|name
expr_stmt|;
block|}
block|}
specifier|public
name|XQueryTreeParser
parameter_list|()
block|{
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpointer
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|xpointer_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nc
init|=
literal|null
decl_stmt|;
name|Expression
name|step
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|XPOINTER
case|:
block|{
name|AST
name|__t279
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp1_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|XPOINTER
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t279
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|XPOINTER_ID
case|:
block|{
name|AST
name|__t280
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp2_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|XPOINTER_ID
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|nc
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t280
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|Function
name|fun
init|=
operator|new
name|FunId
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|List
name|params
init|=
operator|new
name|ArrayList
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|params
operator|.
name|add
argument_list|(
operator|new
name|LiteralValue
argument_list|(
name|context
argument_list|,
operator|new
name|StringValue
argument_list|(
name|nc
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|fun
operator|.
name|setArguments
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|fun
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|Expression
name|expr
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|expr_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|castAST
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|t
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|someVarName
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|everyVarName
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|varName
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|posVar
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|letVarName
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|collURI
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_cast
case|:
block|{
name|AST
name|__t326
init|=
name|_t
decl_stmt|;
name|castAST
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_cast
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|int
name|cardinality
init|=
name|Cardinality
operator|.
name|EXACTLY_ONE
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|t
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ATOMIC_TYPE
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QUESTION
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp3_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|QUESTION
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|cardinality
operator|=
name|Cardinality
operator|.
name|ZERO_OR_ONE
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|t
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|Type
operator|.
name|getType
argument_list|(
name|qn
argument_list|)
decl_stmt|;
name|CastExpression
name|castExpr
init|=
operator|new
name|CastExpression
argument_list|(
name|context
argument_list|,
name|expr
argument_list|,
name|code
argument_list|,
name|cardinality
argument_list|)
decl_stmt|;
name|castExpr
operator|.
name|setASTNode
argument_list|(
name|castAST
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|castExpr
argument_list|)
expr_stmt|;
name|step
operator|=
name|castExpr
expr_stmt|;
name|_t
operator|=
name|__t326
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|COMMA
case|:
block|{
name|AST
name|__t328
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp4_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|COMMA
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|SequenceConstructor
name|sc
init|=
operator|new
name|SequenceConstructor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|sc
operator|.
name|addPath
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|sc
operator|.
name|addPath
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|sc
argument_list|)
expr_stmt|;
name|step
operator|=
name|sc
expr_stmt|;
name|_t
operator|=
name|__t328
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_if
case|:
block|{
name|AST
name|__t329
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp5_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_if
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|testExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|thenExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|elseExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|testExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|thenExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|elseExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|ConditionalExpression
name|cond
init|=
operator|new
name|ConditionalExpression
argument_list|(
name|context
argument_list|,
name|testExpr
argument_list|,
name|thenExpr
argument_list|,
name|elseExpr
argument_list|)
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|cond
argument_list|)
expr_stmt|;
name|step
operator|=
name|cond
expr_stmt|;
name|_t
operator|=
name|__t329
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_some
case|:
block|{
name|AST
name|__t330
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp6_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_some
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|List
name|clauses
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|PathExpr
name|satisfiesExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
block|{
name|_loop335
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|VARIABLE_BINDING
operator|)
condition|)
block|{
name|AST
name|__t332
init|=
name|_t
decl_stmt|;
name|someVarName
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|VARIABLE_BINDING
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|ForLetClause
name|clause
init|=
operator|new
name|ForLetClause
argument_list|()
decl_stmt|;
name|PathExpr
name|inputSequence
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|AST
name|__t334
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp7_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_as
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|sequenceType
argument_list|(
name|_t
argument_list|,
name|clause
operator|.
name|sequenceType
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t334
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|inputSequence
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|clause
operator|.
name|varName
operator|=
name|someVarName
operator|.
name|getText
argument_list|()
expr_stmt|;
name|clause
operator|.
name|inputSequence
operator|=
name|inputSequence
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t332
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop335
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|satisfiesExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|Expression
name|action
init|=
name|satisfiesExpr
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|clauses
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|ForLetClause
name|clause
init|=
operator|(
name|ForLetClause
operator|)
name|clauses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BindingExpression
name|expr
init|=
operator|new
name|QuantifiedExpression
argument_list|(
name|context
argument_list|,
name|QuantifiedExpression
operator|.
name|SOME
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setVariable
argument_list|(
name|clause
operator|.
name|varName
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setSequenceType
argument_list|(
name|clause
operator|.
name|sequenceType
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setInputSequence
argument_list|(
name|clause
operator|.
name|inputSequence
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setReturnExpression
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|satisfiesExpr
operator|=
literal|null
expr_stmt|;
name|action
operator|=
name|expr
expr_stmt|;
block|}
name|path
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|step
operator|=
name|action
expr_stmt|;
name|_t
operator|=
name|__t330
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_every
case|:
block|{
name|AST
name|__t336
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp8_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_every
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|List
name|clauses
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|PathExpr
name|satisfiesExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
block|{
name|_loop341
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|VARIABLE_BINDING
operator|)
condition|)
block|{
name|AST
name|__t338
init|=
name|_t
decl_stmt|;
name|everyVarName
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|VARIABLE_BINDING
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|ForLetClause
name|clause
init|=
operator|new
name|ForLetClause
argument_list|()
decl_stmt|;
name|PathExpr
name|inputSequence
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|AST
name|__t340
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp9_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_as
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|sequenceType
argument_list|(
name|_t
argument_list|,
name|clause
operator|.
name|sequenceType
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t340
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|inputSequence
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|clause
operator|.
name|varName
operator|=
name|everyVarName
operator|.
name|getText
argument_list|()
expr_stmt|;
name|clause
operator|.
name|inputSequence
operator|=
name|inputSequence
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t338
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop341
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|satisfiesExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|Expression
name|action
init|=
name|satisfiesExpr
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|clauses
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|ForLetClause
name|clause
init|=
operator|(
name|ForLetClause
operator|)
name|clauses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BindingExpression
name|expr
init|=
operator|new
name|QuantifiedExpression
argument_list|(
name|context
argument_list|,
name|QuantifiedExpression
operator|.
name|EVERY
argument_list|)
decl_stmt|;
name|expr
operator|.
name|setVariable
argument_list|(
name|clause
operator|.
name|varName
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setSequenceType
argument_list|(
name|clause
operator|.
name|sequenceType
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setInputSequence
argument_list|(
name|clause
operator|.
name|inputSequence
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setReturnExpression
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|satisfiesExpr
operator|=
literal|null
expr_stmt|;
name|action
operator|=
name|expr
expr_stmt|;
block|}
name|path
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|step
operator|=
name|action
expr_stmt|;
name|_t
operator|=
name|__t336
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_return
case|:
block|{
name|AST
name|__t342
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp10_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_return
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|List
name|clauses
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|Expression
name|action
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|whereExpr
init|=
literal|null
decl_stmt|;
name|List
name|orderBy
init|=
literal|null
decl_stmt|;
block|{
name|int
name|_cnt357
init|=
literal|0
decl_stmt|;
name|_loop357
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_for
case|:
block|{
name|AST
name|__t344
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp11_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_for
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|{
name|int
name|_cnt350
init|=
literal|0
decl_stmt|;
name|_loop350
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|VARIABLE_BINDING
operator|)
condition|)
block|{
name|AST
name|__t346
init|=
name|_t
decl_stmt|;
name|varName
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|VARIABLE_BINDING
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|ForLetClause
name|clause
init|=
operator|new
name|ForLetClause
argument_list|()
decl_stmt|;
name|PathExpr
name|inputSequence
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|AST
name|__t348
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp12_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_as
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|clause
operator|.
name|sequenceType
operator|=
operator|new
name|SequenceType
argument_list|()
expr_stmt|;
name|sequenceType
argument_list|(
name|_t
argument_list|,
name|clause
operator|.
name|sequenceType
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t348
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|POSITIONAL_VAR
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|POSITIONAL_VAR
case|:
block|{
name|posVar
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|POSITIONAL_VAR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|clause
operator|.
name|posVar
operator|=
name|posVar
operator|.
name|getText
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|inputSequence
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|clause
operator|.
name|varName
operator|=
name|varName
operator|.
name|getText
argument_list|()
expr_stmt|;
name|clause
operator|.
name|inputSequence
operator|=
name|inputSequence
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t346
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt350
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop350
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_cnt350
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_t
operator|=
name|__t344
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_let
case|:
block|{
name|AST
name|__t351
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp13_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_let
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
block|{
name|int
name|_cnt356
init|=
literal|0
decl_stmt|;
name|_loop356
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|VARIABLE_BINDING
operator|)
condition|)
block|{
name|AST
name|__t353
init|=
name|_t
decl_stmt|;
name|letVarName
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|VARIABLE_BINDING
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|ForLetClause
name|clause
init|=
operator|new
name|ForLetClause
argument_list|()
decl_stmt|;
name|clause
operator|.
name|isForClause
operator|=
literal|false
expr_stmt|;
name|PathExpr
name|inputSequence
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|AST
name|__t355
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp14_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_as
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|clause
operator|.
name|sequenceType
operator|=
operator|new
name|SequenceType
argument_list|()
expr_stmt|;
name|sequenceType
argument_list|(
name|_t
argument_list|,
name|clause
operator|.
name|sequenceType
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t355
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|inputSequence
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|clause
operator|.
name|varName
operator|=
name|letVarName
operator|.
name|getText
argument_list|()
expr_stmt|;
name|clause
operator|.
name|inputSequence
operator|=
name|inputSequence
expr_stmt|;
name|clauses
operator|.
name|add
argument_list|(
name|clause
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t353
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt356
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop356
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_cnt356
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_t
operator|=
name|__t351
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|_cnt357
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop357
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt357
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_where
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp15_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_where
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|whereExpr
operator|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|whereExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|ORDER_BY
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ORDER_BY
case|:
block|{
name|AST
name|__t360
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp16_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ORDER_BY
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|orderBy
operator|=
operator|new
name|ArrayList
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt367
init|=
literal|0
decl_stmt|;
name|_loop367
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|_t
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|PathExpr
name|orderSpecExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|orderSpecExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|OrderSpec
name|orderSpec
init|=
operator|new
name|OrderSpec
argument_list|(
name|context
argument_list|,
name|orderSpecExpr
argument_list|)
decl_stmt|;
name|int
name|modifiers
init|=
literal|0
decl_stmt|;
name|orderBy
operator|.
name|add
argument_list|(
name|orderSpec
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
block|{
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_ascending
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp17_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_ascending
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descending
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp18_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_descending
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|modifiers
operator|=
name|OrderSpec
operator|.
name|DESCENDING_ORDER
expr_stmt|;
name|orderSpec
operator|.
name|setModifiers
argument_list|(
name|modifiers
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
literal|3
case|:
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_empty
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp19_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_empty
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_greatest
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp20_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_greatest
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_least
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp21_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_least
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|modifiers
operator||=
name|OrderSpec
operator|.
name|EMPTY_LEAST
expr_stmt|;
name|orderSpec
operator|.
name|setModifiers
argument_list|(
name|modifiers
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
literal|3
case|:
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_collation
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_collation
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp22_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_collation
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|collURI
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|orderSpec
operator|.
name|setCollation
argument_list|(
name|collURI
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|_cnt367
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop367
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_cnt367
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_t
operator|=
name|__t360
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
operator|(
name|PathExpr
operator|)
name|action
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|clauses
operator|.
name|size
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
name|ForLetClause
name|clause
init|=
operator|(
name|ForLetClause
operator|)
name|clauses
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|BindingExpression
name|expr
decl_stmt|;
if|if
condition|(
name|clause
operator|.
name|isForClause
condition|)
name|expr
operator|=
operator|new
name|ForExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
else|else
name|expr
operator|=
operator|new
name|LetExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setVariable
argument_list|(
name|clause
operator|.
name|varName
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setSequenceType
argument_list|(
name|clause
operator|.
name|sequenceType
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setInputSequence
argument_list|(
name|clause
operator|.
name|inputSequence
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setReturnExpression
argument_list|(
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
name|clause
operator|.
name|isForClause
condition|)
operator|(
operator|(
name|ForExpr
operator|)
name|expr
operator|)
operator|.
name|setPositionalVariable
argument_list|(
name|clause
operator|.
name|posVar
argument_list|)
expr_stmt|;
if|if
condition|(
name|whereExpr
operator|!=
literal|null
condition|)
block|{
name|expr
operator|.
name|setWhereExpression
argument_list|(
name|whereExpr
argument_list|)
expr_stmt|;
name|whereExpr
operator|=
literal|null
expr_stmt|;
block|}
name|action
operator|=
name|expr
expr_stmt|;
block|}
if|if
condition|(
name|orderBy
operator|!=
literal|null
condition|)
block|{
name|OrderSpec
name|orderSpecs
index|[]
init|=
operator|new
name|OrderSpec
index|[
name|orderBy
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|k
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|j
init|=
name|orderBy
operator|.
name|iterator
argument_list|()
init|;
name|j
operator|.
name|hasNext
argument_list|()
condition|;
name|k
operator|++
control|)
block|{
name|OrderSpec
name|orderSpec
init|=
operator|(
name|OrderSpec
operator|)
name|j
operator|.
name|next
argument_list|()
decl_stmt|;
name|orderSpecs
index|[
name|k
index|]
operator|=
name|orderSpec
expr_stmt|;
block|}
operator|(
operator|(
name|BindingExpression
operator|)
name|action
operator|)
operator|.
name|setOrderSpecs
argument_list|(
name|orderSpecs
argument_list|)
expr_stmt|;
block|}
name|path
operator|.
name|add
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|step
operator|=
name|action
expr_stmt|;
name|_t
operator|=
name|__t342
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_instance
case|:
block|{
name|AST
name|__t368
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp23_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_instance
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SequenceType
name|type
init|=
operator|new
name|SequenceType
argument_list|()
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|sequenceType
argument_list|(
name|_t
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|InstanceOfExpression
argument_list|(
name|context
argument_list|,
name|expr
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t368
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_or
case|:
block|{
name|AST
name|__t369
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp24_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_or
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t369
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpOr
name|or
init|=
operator|new
name|OpOr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|or
operator|.
name|addPath
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|or
operator|.
name|addPath
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|or
argument_list|)
expr_stmt|;
name|step
operator|=
name|or
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_and
case|:
block|{
name|AST
name|__t370
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp25_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_and
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t370
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpAnd
name|and
init|=
operator|new
name|OpAnd
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|and
operator|.
name|addPath
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|and
operator|.
name|addPath
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|and
argument_list|)
expr_stmt|;
name|step
operator|=
name|and
expr_stmt|;
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|AST
name|__t371
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp26_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|UNION
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t371
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|Union
name|union
init|=
operator|new
name|Union
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|union
argument_list|)
expr_stmt|;
name|step
operator|=
name|union
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_intersect
case|:
block|{
name|AST
name|__t372
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp27_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_intersect
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t372
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|Intersection
name|intersect
init|=
operator|new
name|Intersection
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|intersect
argument_list|)
expr_stmt|;
name|step
operator|=
name|intersect
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_except
case|:
block|{
name|AST
name|__t373
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp28_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_except
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t373
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|Except
name|intersect
init|=
operator|new
name|Except
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|intersect
argument_list|)
expr_stmt|;
name|step
operator|=
name|intersect
expr_stmt|;
break|break;
block|}
case|case
name|ABSOLUTE_SLASH
case|:
block|{
name|AST
name|__t374
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp29_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ABSOLUTE_SLASH
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|RootNode
name|root
init|=
operator|new
name|RootNode
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t374
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ABSOLUTE_DSLASH
case|:
block|{
name|AST
name|__t376
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp30_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ABSOLUTE_DSLASH
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|RootNode
name|root
init|=
operator|new
name|RootNode
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
if|if
condition|(
name|step
operator|instanceof
name|LocationStep
condition|)
block|{
name|LocationStep
name|s
init|=
operator|(
name|LocationStep
operator|)
name|step
decl_stmt|;
if|if
condition|(
name|s
operator|.
name|getAxis
argument_list|()
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
condition|)
comment|// combines descendant-or-self::node()/attribute:*
name|s
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
argument_list|)
expr_stmt|;
else|else
name|s
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|)
expr_stmt|;
block|}
else|else
name|step
operator|.
name|setPrimaryAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t376
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_to
case|:
block|{
name|AST
name|__t378
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp31_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_to
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|start
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|end
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|List
name|args
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|args
operator|.
name|add
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|args
operator|.
name|add
argument_list|(
name|end
argument_list|)
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|start
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|end
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|RangeExpression
name|range
init|=
operator|new
name|RangeExpression
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|range
operator|.
name|setArguments
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|range
argument_list|)
expr_stmt|;
name|step
operator|=
name|range
expr_stmt|;
name|_t
operator|=
name|__t378
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|EQ
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
block|{
name|step
operator|=
name|generalComp
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
block|{
name|step
operator|=
name|valueComp
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
block|{
name|step
operator|=
name|nodeComp
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
block|{
name|step
operator|=
name|fulltextComp
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|PARENTHESIZED
case|:
case|case
name|FUNCTION
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LCURLY
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|step
operator|=
name|primaryExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_element
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|LITERAL_preceding
case|:
block|{
name|step
operator|=
name|pathExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
block|{
name|step
operator|=
name|numericExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|void
name|xpath
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|xpath_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|context
operator|.
name|setRootExpression
argument_list|(
name|path
argument_list|)
expr_stmt|;
try|try
block|{
comment|// for error handling
name|module
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|context
operator|.
name|resolveForwardReferences
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|module
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|module_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|m
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uri
init|=
literal|null
decl_stmt|;
name|Expression
name|step
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|MODULE_DECL
case|:
block|{
name|AST
name|__t283
init|=
name|_t
decl_stmt|;
name|m
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|MODULE_DECL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|uri
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|myModule
operator|=
operator|new
name|ExternalModuleImpl
argument_list|(
name|uri
operator|.
name|getText
argument_list|()
argument_list|,
name|m
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareNamespace
argument_list|(
name|m
operator|.
name|getText
argument_list|()
argument_list|,
name|uri
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t283
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|prolog
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|VERSION_DECL
case|:
case|case
name|NAMESPACE_DECL
case|:
case|case
name|DEF_NAMESPACE_DECL
case|:
case|case
name|DEF_COLLATION_DECL
case|:
case|case
name|DEF_FUNCTION_NS_DECL
case|:
case|case
name|GLOBAL_VAR
case|:
case|case
name|FUNCTION_DECL
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|LITERAL_import
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|prolog
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|prolog
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|prolog_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|prefix
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uri
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|defu
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|deff
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|defc
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|qname
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|i
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|pfx
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|moduleURI
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|at
init|=
literal|null
decl_stmt|;
name|Expression
name|step
init|=
literal|null
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|VERSION_DECL
case|:
block|{
name|AST
name|__t286
init|=
name|_t
decl_stmt|;
name|v
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|VERSION_DECL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|getText
argument_list|()
operator|.
name|equals
argument_list|(
literal|"1.0"
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|v
argument_list|,
literal|"Wrong XQuery version: require 1.0"
argument_list|)
throw|;
name|_t
operator|=
name|__t286
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|NAMESPACE_DECL
case|:
case|case
name|DEF_NAMESPACE_DECL
case|:
case|case
name|DEF_COLLATION_DECL
case|:
case|case
name|DEF_FUNCTION_NS_DECL
case|:
case|case
name|GLOBAL_VAR
case|:
case|case
name|FUNCTION_DECL
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|LITERAL_import
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
block|{
name|_loop298
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NAMESPACE_DECL
case|:
block|{
name|AST
name|__t288
init|=
name|_t
decl_stmt|;
name|prefix
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NAMESPACE_DECL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|uri
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|context
operator|.
name|declareNamespace
argument_list|(
name|prefix
operator|.
name|getText
argument_list|()
argument_list|,
name|uri
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t288
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|DEF_NAMESPACE_DECL
case|:
block|{
name|AST
name|__t289
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp32_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|DEF_NAMESPACE_DECL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|defu
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|context
operator|.
name|declareNamespace
argument_list|(
literal|""
argument_list|,
name|defu
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t289
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|DEF_FUNCTION_NS_DECL
case|:
block|{
name|AST
name|__t290
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp33_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|DEF_FUNCTION_NS_DECL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|deff
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|context
operator|.
name|setDefaultFunctionNamespace
argument_list|(
name|deff
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t290
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|DEF_COLLATION_DECL
case|:
block|{
name|AST
name|__t291
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp34_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|DEF_COLLATION_DECL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|defc
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|context
operator|.
name|setDefaultCollation
argument_list|(
name|defc
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t291
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GLOBAL_VAR
case|:
block|{
name|AST
name|__t292
init|=
name|_t
decl_stmt|;
name|qname
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|GLOBAL_VAR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|enclosed
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|SequenceType
name|type
init|=
literal|null
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|AST
name|__t294
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp35_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_as
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|=
operator|new
name|SequenceType
argument_list|()
expr_stmt|;
name|sequenceType
argument_list|(
name|_t
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t294
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|e
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|enclosed
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|VariableDeclaration
name|decl
init|=
operator|new
name|VariableDeclaration
argument_list|(
name|context
argument_list|,
name|qname
operator|.
name|getText
argument_list|()
argument_list|,
name|enclosed
argument_list|)
decl_stmt|;
name|decl
operator|.
name|setSequenceType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|decl
operator|.
name|setASTNode
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|decl
argument_list|)
expr_stmt|;
if|if
condition|(
name|myModule
operator|!=
literal|null
condition|)
block|{
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|qname
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|myModule
operator|.
name|declareVariable
argument_list|(
name|qn
argument_list|,
name|decl
argument_list|)
expr_stmt|;
block|}
name|_t
operator|=
name|__t292
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|FUNCTION_DECL
case|:
block|{
name|functionDecl
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_import
case|:
block|{
name|AST
name|__t295
init|=
name|_t
decl_stmt|;
name|i
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_import
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|String
name|modulePrefix
init|=
literal|null
decl_stmt|;
name|String
name|location
init|=
literal|null
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|NCNAME
case|:
block|{
name|pfx
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|modulePrefix
operator|=
name|pfx
operator|.
name|getText
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|moduleURI
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
block|{
name|at
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|location
operator|=
name|at
operator|.
name|getText
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
try|try
block|{
name|context
operator|.
name|importModule
argument_list|(
name|moduleURI
operator|.
name|getText
argument_list|()
argument_list|,
name|modulePrefix
argument_list|,
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|xpe
parameter_list|)
block|{
name|xpe
operator|.
name|setASTNode
argument_list|(
name|i
argument_list|)
expr_stmt|;
throw|throw
name|xpe
throw|;
block|}
name|_t
operator|=
name|__t295
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
break|break
name|_loop298
break|;
block|}
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|sequenceType
parameter_list|(
name|AST
name|_t
parameter_list|,
name|SequenceType
name|type
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|XPathException
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|sequenceType_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|t
init|=
literal|null
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ATOMIC_TYPE
case|:
block|{
name|AST
name|__t314
init|=
name|_t
decl_stmt|;
name|t
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ATOMIC_TYPE
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|t
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|code
init|=
name|Type
operator|.
name|getType
argument_list|(
name|qn
argument_list|)
decl_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|code
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t314
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_empty
case|:
block|{
name|AST
name|__t315
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp36_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_empty
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|type
operator|.
name|setCardinality
argument_list|(
name|Cardinality
operator|.
name|EMPTY
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t315
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_item
case|:
block|{
name|AST
name|__t316
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp37_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_item
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t316
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|AST
name|__t317
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp38_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_node
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t317
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_element
case|:
block|{
name|AST
name|__t318
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp39_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_element
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t318
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|AST
name|__t319
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp40_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|Type
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t319
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|AST
name|__t320
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp41_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_text
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t320
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|126
case|:
block|{
name|AST
name|__t321
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp42_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|126
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|Type
operator|.
name|PROCESSING_INSTRUCTION
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t321
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|AST
name|__t322
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp43_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_comment
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|Type
operator|.
name|COMMENT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t322
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
literal|127
case|:
block|{
name|AST
name|__t323
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp44_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|127
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|type
operator|.
name|setPrimaryType
argument_list|(
name|Type
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t323
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|STAR
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp45_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STAR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|type
operator|.
name|setCardinality
argument_list|(
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PLUS
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp46_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PLUS
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|type
operator|.
name|setCardinality
argument_list|(
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QUESTION
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp47_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|QUESTION
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|type
operator|.
name|setCardinality
argument_list|(
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionDecl
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|functionDecl_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|name
init|=
literal|null
decl_stmt|;
name|Expression
name|step
init|=
literal|null
decl_stmt|;
name|AST
name|__t300
init|=
name|_t
decl_stmt|;
name|name
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|FUNCTION_DECL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|body
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|QName
name|qn
init|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|name
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|FunctionSignature
name|signature
init|=
operator|new
name|FunctionSignature
argument_list|(
name|qn
argument_list|)
decl_stmt|;
name|UserDefinedFunction
name|func
init|=
operator|new
name|UserDefinedFunction
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
decl_stmt|;
name|func
operator|.
name|setASTNode
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|List
name|varList
init|=
operator|new
name|ArrayList
argument_list|(
literal|3
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|VARIABLE_BINDING
case|:
block|{
name|paramList
argument_list|(
name|_t
argument_list|,
name|varList
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
case|case
name|LITERAL_as
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|SequenceType
index|[]
name|types
init|=
operator|new
name|SequenceType
index|[
name|varList
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|varList
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|FunctionParameter
name|param
init|=
operator|(
name|FunctionParameter
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|types
index|[
name|j
index|]
operator|=
name|param
operator|.
name|type
expr_stmt|;
name|func
operator|.
name|addVariable
argument_list|(
name|param
operator|.
name|varName
argument_list|)
expr_stmt|;
block|}
name|signature
operator|.
name|setArgumentTypes
argument_list|(
name|types
argument_list|)
expr_stmt|;
name|context
operator|.
name|declareFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
if|if
condition|(
name|myModule
operator|!=
literal|null
condition|)
name|myModule
operator|.
name|declareFunction
argument_list|(
name|func
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|AST
name|__t303
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp48_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_as
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|SequenceType
name|type
init|=
operator|new
name|SequenceType
argument_list|()
decl_stmt|;
name|sequenceType
argument_list|(
name|_t
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|signature
operator|.
name|setReturnType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t303
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|AST
name|__t304
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp49_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LCURLY
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|body
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|func
operator|.
name|setFunctionBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t304
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t300
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|paramList
parameter_list|(
name|AST
name|_t
parameter_list|,
name|List
name|vars
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|XPathException
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|paramList_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|param
argument_list|(
name|_t
argument_list|,
name|vars
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|{
name|_loop307
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|VARIABLE_BINDING
operator|)
condition|)
block|{
name|param
argument_list|(
name|_t
argument_list|,
name|vars
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop307
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|param
parameter_list|(
name|AST
name|_t
parameter_list|,
name|List
name|vars
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|XPathException
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|param_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|varname
init|=
literal|null
decl_stmt|;
name|AST
name|__t309
init|=
name|_t
decl_stmt|;
name|varname
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|VARIABLE_BINDING
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|FunctionParameter
name|var
init|=
operator|new
name|FunctionParameter
argument_list|(
name|varname
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|vars
operator|.
name|add
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|AST
name|__t311
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp50_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_as
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|SequenceType
name|type
init|=
operator|new
name|SequenceType
argument_list|()
decl_stmt|;
name|sequenceType
argument_list|(
name|_t
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t311
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|var
operator|.
name|type
operator|=
name|type
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t309
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|Expression
name|generalComp
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|generalComp_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|eq
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|neq
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|lt
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|lteq
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|gt
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|gteq
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|EQ
case|:
block|{
name|AST
name|__t435
init|=
name|_t
decl_stmt|;
name|eq
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|EQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|eq
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t435
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|NEQ
case|:
block|{
name|AST
name|__t436
init|=
name|_t
decl_stmt|;
name|neq
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NEQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|NEQ
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|neq
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t436
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LT
case|:
block|{
name|AST
name|__t437
init|=
name|_t
decl_stmt|;
name|lt
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|LT
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|lt
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t437
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LTEQ
case|:
block|{
name|AST
name|__t438
init|=
name|_t
decl_stmt|;
name|lteq
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LTEQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|LTEQ
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|lteq
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t438
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GT
case|:
block|{
name|AST
name|__t439
init|=
name|_t
decl_stmt|;
name|gt
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|GT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|GT
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|gt
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t439
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GTEQ
case|:
block|{
name|AST
name|__t440
init|=
name|_t
decl_stmt|;
name|gteq
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|GTEQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|GTEQ
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|gteq
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t440
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|valueComp
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|valueComp_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|eq
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|ne
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|lt
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|le
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|gt
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|ge
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_eq
case|:
block|{
name|AST
name|__t428
init|=
name|_t
decl_stmt|;
name|eq
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_eq
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|ValueComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|eq
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t428
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ne
case|:
block|{
name|AST
name|__t429
init|=
name|_t
decl_stmt|;
name|ne
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_ne
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|ValueComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|NEQ
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|ne
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t429
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_lt
case|:
block|{
name|AST
name|__t430
init|=
name|_t
decl_stmt|;
name|lt
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_lt
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|ValueComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|LT
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|lt
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t430
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_le
case|:
block|{
name|AST
name|__t431
init|=
name|_t
decl_stmt|;
name|le
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_le
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|ValueComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|LTEQ
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|le
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t431
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_gt
case|:
block|{
name|AST
name|__t432
init|=
name|_t
decl_stmt|;
name|gt
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_gt
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|ValueComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|GT
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|gt
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t432
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ge
case|:
block|{
name|AST
name|__t433
init|=
name|_t
decl_stmt|;
name|ge
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_ge
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|ValueComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|GTEQ
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|ge
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t433
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|nodeComp
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nodeComp_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|is
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|isnot
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|before
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|after
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_is
case|:
block|{
name|AST
name|__t442
init|=
name|_t
decl_stmt|;
name|is
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_is
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|NodeComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|IS
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|is
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t442
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_isnot
case|:
block|{
name|AST
name|__t443
init|=
name|_t
decl_stmt|;
name|isnot
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_isnot
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|NodeComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|ISNOT
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|isnot
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t443
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|BEFORE
case|:
block|{
name|AST
name|__t444
init|=
name|_t
decl_stmt|;
name|before
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|BEFORE
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|NodeComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|BEFORE
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|before
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t444
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|AFTER
case|:
block|{
name|AST
name|__t445
init|=
name|_t
decl_stmt|;
name|after
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|AFTER
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|NodeComparison
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|AFTER
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|after
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t445
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|fulltextComp
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|fulltextComp_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|nodes
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|query
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ANDEQ
case|:
block|{
name|AST
name|__t425
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp51_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ANDEQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t425
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|ExtFulltext
name|exprCont
init|=
operator|new
name|ExtFulltext
argument_list|(
name|context
argument_list|,
name|Constants
operator|.
name|FULLTEXT_AND
argument_list|)
decl_stmt|;
name|exprCont
operator|.
name|setPath
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|exprCont
operator|.
name|addTerm
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|exprCont
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OREQ
case|:
block|{
name|AST
name|__t426
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp52_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|OREQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|nodes
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t426
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|ExtFulltext
name|exprCont
init|=
operator|new
name|ExtFulltext
argument_list|(
name|context
argument_list|,
name|Constants
operator|.
name|FULLTEXT_OR
argument_list|)
decl_stmt|;
name|exprCont
operator|.
name|setPath
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
name|exprCont
operator|.
name|addTerm
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|exprCont
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|primaryExpr
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|primaryExpr_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|v
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|LCURLY
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|step
operator|=
name|constructor
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|predicates
argument_list|(
name|_t
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PARENTHESIZED
case|:
block|{
name|AST
name|__t380
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp53_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PARENTHESIZED
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|pathExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|pathExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t380
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
name|predicates
argument_list|(
name|_t
argument_list|,
name|pathExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|step
operator|=
name|literalExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|predicates
argument_list|(
name|_t
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|VARIABLE_REF
case|:
block|{
name|v
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|VARIABLE_REF
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|VariableReference
argument_list|(
name|context
argument_list|,
name|v
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|step
operator|=
name|predicates
argument_list|(
name|_t
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FUNCTION
case|:
block|{
name|step
operator|=
name|functionCall
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|predicates
argument_list|(
name|_t
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|pathExpr
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|pathExpr_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|qn
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nc1
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nc
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attr
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nc2
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|nc3
init|=
literal|null
decl_stmt|;
name|Expression
name|rightStep
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|int
name|axis
init|=
name|Constants
operator|.
name|CHILD_AXIS
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|LITERAL_preceding
case|:
block|{
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|LITERAL_preceding
case|:
block|{
name|axis
operator|=
name|forwardAxis
argument_list|(
name|_t
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|NodeTest
name|test
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
block|{
name|qn
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|QNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|QName
name|qname
init|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|qn
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|qname
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PREFIX_WILDCARD
case|:
block|{
name|AST
name|__t385
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp54_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PREFIX_WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|nc1
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t385
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|nc1
operator|.
name|getText
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|test
operator|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|qname
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
block|{
name|AST
name|__t386
init|=
name|_t
decl_stmt|;
name|nc
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp55_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t386
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|String
name|namespaceURI
init|=
name|context
operator|.
name|getURIForPrefix
argument_list|(
name|nc
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
literal|null
argument_list|,
name|namespaceURI
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|test
operator|=
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|qname
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|WILDCARD
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp56_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp57_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_node
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|AnyNodeTest
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp58_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_text
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|TEXT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_element
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp59_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_element
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp60_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_comment
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|COMMENT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ATTRIBUTE_TEST
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp61_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ATTRIBUTE_TEST
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|127
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp62_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|127
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|DOCUMENT
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|context
argument_list|,
name|axis
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|{
name|_loop388
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|PREDICATE
operator|)
condition|)
block|{
name|predicate
argument_list|(
name|_t
argument_list|,
operator|(
name|LocationStep
operator|)
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop388
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|AT
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp63_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|AT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|QName
name|qname
init|=
literal|null
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
block|{
name|attr
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|QNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|qname
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|attr
operator|.
name|getText
argument_list|()
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|WILDCARD
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp64_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|PREFIX_WILDCARD
case|:
block|{
name|AST
name|__t390
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp65_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PREFIX_WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|nc2
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t390
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|nc2
operator|.
name|getText
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
block|{
name|AST
name|__t391
init|=
name|_t
decl_stmt|;
name|nc3
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp66_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t391
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|String
name|namespaceURI
init|=
name|context
operator|.
name|getURIForPrefix
argument_list|(
name|nc3
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespaceURI
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"No namespace defined for prefix "
operator|+
name|nc3
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
name|qname
operator|=
operator|new
name|QName
argument_list|(
literal|null
argument_list|,
name|namespaceURI
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|NodeTest
name|test
init|=
name|qname
operator|==
literal|null
condition|?
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|ATTRIBUTE
argument_list|)
else|:
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ATTRIBUTE
argument_list|,
name|qname
argument_list|)
decl_stmt|;
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|context
argument_list|,
name|Constants
operator|.
name|ATTRIBUTE_AXIS
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|{
name|_loop393
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|PREDICATE
operator|)
condition|)
block|{
name|predicate
argument_list|(
name|_t
argument_list|,
operator|(
name|LocationStep
operator|)
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop393
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|SELF
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp67_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|SELF
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|context
argument_list|,
name|Constants
operator|.
name|SELF_AXIS
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|NODE
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|{
name|_loop395
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|PREDICATE
operator|)
condition|)
block|{
name|predicate
argument_list|(
name|_t
argument_list|,
operator|(
name|LocationStep
operator|)
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop395
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|PARENT
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp68_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PARENT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|context
argument_list|,
name|Constants
operator|.
name|PARENT_AXIS
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Type
operator|.
name|NODE
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|{
name|_loop397
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|PREDICATE
operator|)
condition|)
block|{
name|predicate
argument_list|(
name|_t
argument_list|,
operator|(
name|LocationStep
operator|)
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop397
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|SLASH
case|:
block|{
name|AST
name|__t398
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp69_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|SLASH
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|rightStep
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
if|if
condition|(
name|rightStep
operator|instanceof
name|LocationStep
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|LocationStep
operator|)
name|rightStep
operator|)
operator|.
name|getAxis
argument_list|()
operator|==
operator|-
literal|1
condition|)
operator|(
operator|(
name|LocationStep
operator|)
name|rightStep
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|CHILD_AXIS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//rightStep = new SimpleStep(context, Constants.CHILD_AXIS, rightStep);
name|rightStep
operator|.
name|setPrimaryAxis
argument_list|(
name|Constants
operator|.
name|CHILD_AXIS
argument_list|)
expr_stmt|;
comment|//path.replaceLastExpression(rightStep);
block|}
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t398
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
if|if
condition|(
name|step
operator|instanceof
name|LocationStep
operator|&&
operator|(
operator|(
name|LocationStep
operator|)
name|step
operator|)
operator|.
name|getAxis
argument_list|()
operator|==
operator|-
literal|1
condition|)
operator|(
operator|(
name|LocationStep
operator|)
name|step
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|CHILD_AXIS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DSLASH
case|:
block|{
name|AST
name|__t400
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp70_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|DSLASH
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|rightStep
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
if|if
condition|(
name|rightStep
operator|instanceof
name|LocationStep
condition|)
block|{
name|LocationStep
name|rs
init|=
operator|(
name|LocationStep
operator|)
name|rightStep
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|getAxis
argument_list|()
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
condition|)
name|rs
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
argument_list|)
expr_stmt|;
else|else
name|rs
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|rightStep
operator|.
name|setPrimaryAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t400
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
if|if
condition|(
name|step
operator|instanceof
name|LocationStep
operator|&&
operator|(
operator|(
name|LocationStep
operator|)
name|step
operator|)
operator|.
name|getAxis
argument_list|()
operator|==
operator|-
literal|1
condition|)
operator|(
operator|(
name|LocationStep
operator|)
name|step
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|numericExpr
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|numericExpr_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|plus
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|minus
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uminus
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uplus
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|div
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|idiv
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|mod
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|mult
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|PLUS
case|:
block|{
name|AST
name|__t405
init|=
name|_t
decl_stmt|;
name|plus
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PLUS
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t405
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|PLUS
argument_list|)
decl_stmt|;
name|op
operator|.
name|setASTNode
argument_list|(
name|plus
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
case|case
name|MINUS
case|:
block|{
name|AST
name|__t406
init|=
name|_t
decl_stmt|;
name|minus
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|MINUS
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t406
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|MINUS
argument_list|)
decl_stmt|;
name|op
operator|.
name|setASTNode
argument_list|(
name|minus
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
case|case
name|UNARY_MINUS
case|:
block|{
name|AST
name|__t407
init|=
name|_t
decl_stmt|;
name|uminus
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|UNARY_MINUS
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t407
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|UnaryExpr
name|unary
init|=
operator|new
name|UnaryExpr
argument_list|(
name|context
argument_list|,
name|Constants
operator|.
name|MINUS
argument_list|)
decl_stmt|;
name|unary
operator|.
name|setASTNode
argument_list|(
name|uminus
argument_list|)
expr_stmt|;
name|unary
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|unary
argument_list|)
expr_stmt|;
name|step
operator|=
name|unary
expr_stmt|;
break|break;
block|}
case|case
name|UNARY_PLUS
case|:
block|{
name|AST
name|__t408
init|=
name|_t
decl_stmt|;
name|uplus
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|UNARY_PLUS
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t408
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|UnaryExpr
name|unary
init|=
operator|new
name|UnaryExpr
argument_list|(
name|context
argument_list|,
name|Constants
operator|.
name|PLUS
argument_list|)
decl_stmt|;
name|unary
operator|.
name|setASTNode
argument_list|(
name|uplus
argument_list|)
expr_stmt|;
name|unary
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|unary
argument_list|)
expr_stmt|;
name|step
operator|=
name|unary
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_div
case|:
block|{
name|AST
name|__t409
init|=
name|_t
decl_stmt|;
name|div
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_div
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t409
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|DIV
argument_list|)
decl_stmt|;
name|op
operator|.
name|setASTNode
argument_list|(
name|div
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_idiv
case|:
block|{
name|AST
name|__t410
init|=
name|_t
decl_stmt|;
name|idiv
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_idiv
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t410
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|IDIV
argument_list|)
decl_stmt|;
name|op
operator|.
name|setASTNode
argument_list|(
name|idiv
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_mod
case|:
block|{
name|AST
name|__t411
init|=
name|_t
decl_stmt|;
name|mod
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_mod
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t411
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|MOD
argument_list|)
decl_stmt|;
name|op
operator|.
name|setASTNode
argument_list|(
name|mod
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
case|case
name|STAR
case|:
block|{
name|AST
name|__t412
init|=
name|_t
decl_stmt|;
name|mult
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STAR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t412
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|MULT
argument_list|)
decl_stmt|;
name|op
operator|.
name|setASTNode
argument_list|(
name|mult
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|constructor
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|constructor_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|qn
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|prefix
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|uri
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attr
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|pid
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|e
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attrName
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|attrVal
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|pcdata
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|t
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tc
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|d
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|cdata
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|p
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|l
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|elementContent
init|=
literal|null
decl_stmt|;
name|Expression
name|contentExpr
init|=
literal|null
decl_stmt|;
name|Expression
name|qnameExpr
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
block|{
name|AST
name|__t447
init|=
name|_t
decl_stmt|;
name|qn
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|COMP_ELEM_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|ElementConstructor
name|c
init|=
operator|new
name|ElementConstructor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|c
operator|.
name|setASTNode
argument_list|(
name|qn
argument_list|)
expr_stmt|;
name|step
operator|=
name|c
expr_stmt|;
name|SequenceConstructor
name|construct
init|=
operator|new
name|SequenceConstructor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|EnclosedExpr
name|enclosed
init|=
operator|new
name|EnclosedExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|enclosed
operator|.
name|addPath
argument_list|(
name|construct
argument_list|)
expr_stmt|;
name|c
operator|.
name|setContent
argument_list|(
name|enclosed
argument_list|)
expr_stmt|;
name|PathExpr
name|qnamePathExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|c
operator|.
name|setNameExpr
argument_list|(
name|qnamePathExpr
argument_list|)
expr_stmt|;
name|qnameExpr
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|qnamePathExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|{
name|_loop450
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|COMP_NS_CONSTRUCTOR
case|:
block|{
name|AST
name|__t449
init|=
name|_t
decl_stmt|;
name|prefix
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|COMP_NS_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|uri
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t449
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|c
operator|.
name|addNamespaceDecl
argument_list|(
name|prefix
operator|.
name|getText
argument_list|()
argument_list|,
name|uri
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|VARIABLE_REF
case|:
case|case
name|ELEMENT
case|:
case|case
name|TEXT
case|:
case|case
name|BEFORE
case|:
case|case
name|AFTER
case|:
case|case
name|ATTRIBUTE_TEST
case|:
case|case
name|COMP_ELEM_CONSTRUCTOR
case|:
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
case|case
name|COMP_PI_CONSTRUCTOR
case|:
case|case
name|NCNAME
case|:
case|case
name|EQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_some
case|:
case|case
name|LITERAL_every
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_instance
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LITERAL_eq
case|:
case|case
name|LITERAL_ne
case|:
case|case
name|LITERAL_lt
case|:
case|case
name|LITERAL_le
case|:
case|case
name|LITERAL_gt
case|:
case|case
name|LITERAL_ge
case|:
case|case
name|NEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|LTEQ
case|:
case|case
name|LITERAL_is
case|:
case|case
name|LITERAL_isnot
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|LITERAL_intersect
case|:
case|case
name|LITERAL_except
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|127
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|139
case|:
case|case
literal|140
case|:
case|case
name|LITERAL_following
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|144
case|:
case|case
literal|145
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_preceding
case|:
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|elementContent
operator|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|contentExpr
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|elementContent
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|construct
operator|.
name|addPath
argument_list|(
name|elementContent
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
break|break
name|_loop450
break|;
block|}
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_t
operator|=
name|__t447
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|COMP_ATTR_CONSTRUCTOR
case|:
block|{
name|AST
name|__t451
init|=
name|_t
decl_stmt|;
name|attr
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|COMP_ATTR_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|DynamicAttributeConstructor
name|a
init|=
operator|new
name|DynamicAttributeConstructor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|a
operator|.
name|setASTNode
argument_list|(
name|attr
argument_list|)
expr_stmt|;
name|step
operator|=
name|a
expr_stmt|;
name|PathExpr
name|qnamePathExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|a
operator|.
name|setNameExpr
argument_list|(
name|qnamePathExpr
argument_list|)
expr_stmt|;
name|elementContent
operator|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|a
operator|.
name|setContentExpr
argument_list|(
name|elementContent
argument_list|)
expr_stmt|;
name|qnameExpr
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|qnamePathExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|contentExpr
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|elementContent
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t451
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|COMP_PI_CONSTRUCTOR
case|:
block|{
name|AST
name|__t452
init|=
name|_t
decl_stmt|;
name|pid
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|COMP_PI_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|DynamicPIConstructor
name|pd
init|=
operator|new
name|DynamicPIConstructor
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|pd
operator|.
name|setASTNode
argument_list|(
name|pid
argument_list|)
expr_stmt|;
name|step
operator|=
name|pd
expr_stmt|;
name|PathExpr
name|qnamePathExpr
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|pd
operator|.
name|setNameExpr
argument_list|(
name|qnamePathExpr
argument_list|)
expr_stmt|;
name|elementContent
operator|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|pd
operator|.
name|setContentExpr
argument_list|(
name|elementContent
argument_list|)
expr_stmt|;
name|qnameExpr
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|qnamePathExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|contentExpr
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|elementContent
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t452
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ELEMENT
case|:
block|{
name|AST
name|__t453
init|=
name|_t
decl_stmt|;
name|e
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ELEMENT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|ElementConstructor
name|c
init|=
operator|new
name|ElementConstructor
argument_list|(
name|context
argument_list|,
name|e
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|c
operator|.
name|setASTNode
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|step
operator|=
name|c
expr_stmt|;
block|{
name|_loop459
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|ATTRIBUTE
operator|)
condition|)
block|{
name|AST
name|__t455
init|=
name|_t
decl_stmt|;
name|attrName
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|AttributeConstructor
name|attrib
init|=
operator|new
name|AttributeConstructor
argument_list|(
name|context
argument_list|,
name|attrName
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|attrib
operator|.
name|setASTNode
argument_list|(
name|attrName
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt458
init|=
literal|0
decl_stmt|;
name|_loop458
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ATTRIBUTE_CONTENT
case|:
block|{
name|attrVal
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ATTRIBUTE_CONTENT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|attrib
operator|.
name|addValue
argument_list|(
name|attrVal
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
name|AST
name|__t457
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp71_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LCURLY
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|enclosed
init|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|enclosed
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|attrib
operator|.
name|addEnclosedExpr
argument_list|(
name|enclosed
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t457
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|_cnt458
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop458
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt458
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|c
operator|.
name|addAttribute
argument_list|(
name|attrib
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t455
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop459
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
name|_loop461
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|_t
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|elementContent
operator|==
literal|null
condition|)
block|{
name|elementContent
operator|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|c
operator|.
name|setContent
argument_list|(
name|elementContent
argument_list|)
expr_stmt|;
block|}
name|contentExpr
operator|=
name|constructor
argument_list|(
name|_t
argument_list|,
name|elementContent
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|elementContent
operator|.
name|add
argument_list|(
name|contentExpr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop461
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_t
operator|=
name|__t453
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|TEXT
case|:
block|{
name|AST
name|__t462
init|=
name|_t
decl_stmt|;
name|pcdata
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|TEXT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|TextConstructor
name|text
init|=
operator|new
name|TextConstructor
argument_list|(
name|context
argument_list|,
name|pcdata
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|text
operator|.
name|setASTNode
argument_list|(
name|pcdata
argument_list|)
expr_stmt|;
name|step
operator|=
name|text
expr_stmt|;
name|_t
operator|=
name|__t462
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|COMP_TEXT_CONSTRUCTOR
case|:
block|{
name|AST
name|__t463
init|=
name|_t
decl_stmt|;
name|t
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|COMP_TEXT_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|elementContent
operator|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|DynamicTextConstructor
name|text
init|=
operator|new
name|DynamicTextConstructor
argument_list|(
name|context
argument_list|,
name|elementContent
argument_list|)
decl_stmt|;
name|text
operator|.
name|setASTNode
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|step
operator|=
name|text
expr_stmt|;
name|contentExpr
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|elementContent
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t463
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|COMP_COMMENT_CONSTRUCTOR
case|:
block|{
name|AST
name|__t464
init|=
name|_t
decl_stmt|;
name|tc
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|COMP_COMMENT_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|elementContent
operator|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|DynamicCommentConstructor
name|comment
init|=
operator|new
name|DynamicCommentConstructor
argument_list|(
name|context
argument_list|,
name|elementContent
argument_list|)
decl_stmt|;
name|comment
operator|.
name|setASTNode
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|step
operator|=
name|comment
expr_stmt|;
name|contentExpr
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|elementContent
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t464
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|COMP_DOC_CONSTRUCTOR
case|:
block|{
name|AST
name|__t465
init|=
name|_t
decl_stmt|;
name|d
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|COMP_DOC_CONSTRUCTOR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|elementContent
operator|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|DocumentConstructor
name|doc
init|=
operator|new
name|DocumentConstructor
argument_list|(
name|context
argument_list|,
name|elementContent
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setASTNode
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|step
operator|=
name|doc
expr_stmt|;
name|contentExpr
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|elementContent
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t465
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|XML_COMMENT
case|:
block|{
name|AST
name|__t466
init|=
name|_t
decl_stmt|;
name|cdata
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|XML_COMMENT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|CommentConstructor
name|comment
init|=
operator|new
name|CommentConstructor
argument_list|(
name|context
argument_list|,
name|cdata
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|comment
operator|.
name|setASTNode
argument_list|(
name|cdata
argument_list|)
expr_stmt|;
name|step
operator|=
name|comment
expr_stmt|;
name|_t
operator|=
name|__t466
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|XML_PI
case|:
block|{
name|AST
name|__t467
init|=
name|_t
decl_stmt|;
name|p
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|XML_PI
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PIConstructor
name|pi
init|=
operator|new
name|PIConstructor
argument_list|(
name|context
argument_list|,
name|p
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|pi
operator|.
name|setASTNode
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|step
operator|=
name|pi
expr_stmt|;
name|_t
operator|=
name|__t467
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
name|AST
name|__t468
init|=
name|_t
decl_stmt|;
name|l
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LCURLY
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|EnclosedExpr
name|subexpr
init|=
operator|new
name|EnclosedExpr
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|subexpr
operator|.
name|setASTNode
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|step
operator|=
name|expr
argument_list|(
name|_t
argument_list|,
name|subexpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
name|subexpr
expr_stmt|;
name|_t
operator|=
name|__t468
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|predicates
parameter_list|(
name|AST
name|_t
parameter_list|,
name|Expression
name|expression
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|predicates_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|FilteredExpression
name|filter
init|=
literal|null
decl_stmt|;
name|step
operator|=
name|expression
expr_stmt|;
block|{
name|_loop416
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|PREDICATE
operator|)
condition|)
block|{
name|AST
name|__t415
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp72_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PREDICATE
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
if|if
condition|(
name|filter
operator|==
literal|null
condition|)
block|{
name|filter
operator|=
operator|new
name|FilteredExpression
argument_list|(
name|context
argument_list|,
name|step
argument_list|)
expr_stmt|;
name|step
operator|=
name|filter
expr_stmt|;
block|}
name|Predicate
name|predicateExpr
init|=
operator|new
name|Predicate
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|predicateExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|filter
operator|.
name|addPredicate
argument_list|(
name|predicateExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t415
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop416
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|literalExpr
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|literalExpr_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|c
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|i
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|dec
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|dbl
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
block|{
name|c
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|StringValue
name|val
init|=
operator|new
name|StringValue
argument_list|(
name|c
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|val
operator|.
name|expand
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|LiteralValue
argument_list|(
name|context
argument_list|,
name|val
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INTEGER_LITERAL
case|:
block|{
name|i
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|LiteralValue
argument_list|(
name|context
argument_list|,
operator|new
name|IntegerValue
argument_list|(
name|i
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
block|{
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DECIMAL_LITERAL
case|:
block|{
name|dec
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|DECIMAL_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|LiteralValue
argument_list|(
name|context
argument_list|,
operator|new
name|DecimalValue
argument_list|(
name|dec
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|dec
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE_LITERAL
case|:
block|{
name|dbl
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|DOUBLE_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|LiteralValue
argument_list|(
name|context
argument_list|,
operator|new
name|DoubleValue
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|dbl
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|step
operator|.
name|setASTNode
argument_list|(
name|dbl
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|functionCall
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|Expression
name|step
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|functionCall_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|fn
init|=
literal|null
decl_stmt|;
name|PathExpr
name|pathExpr
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|AST
name|__t420
init|=
name|_t
decl_stmt|;
name|fn
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|FUNCTION
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|List
name|params
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
block|{
name|_loop422
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|_t
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|pathExpr
operator|=
operator|new
name|PathExpr
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|pathExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|params
operator|.
name|add
argument_list|(
name|pathExpr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop422
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_t
operator|=
name|__t420
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
name|FunctionFactory
operator|.
name|createFunction
argument_list|(
name|context
argument_list|,
name|fn
argument_list|,
name|path
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|int
name|forwardAxis
parameter_list|(
name|AST
name|_t
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|int
name|axis
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|forwardAxis_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|axis
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_child
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp73_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_child
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|CHILD_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp74_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|ATTRIBUTE_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_self
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp75_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_self
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|SELF_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_parent
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp76_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_parent
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|PARENT_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descendant
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp77_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_descendant
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|DESCENDANT_AXIS
expr_stmt|;
break|break;
block|}
case|case
literal|139
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp78_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|139
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
expr_stmt|;
break|break;
block|}
case|case
literal|140
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp79_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|140
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|FOLLOWING_SIBLING_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_following
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp80_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_following
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|FOLLOWING_AXIS
expr_stmt|;
break|break;
block|}
case|case
literal|145
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp81_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|145
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_preceding
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp82_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_preceding
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|PRECEDING_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ancestor
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp83_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_ancestor
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|ANCESTOR_AXIS
expr_stmt|;
break|break;
block|}
case|case
literal|144
case|:
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp84_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|144
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|axis
return|;
block|}
specifier|public
specifier|final
name|void
name|predicate
parameter_list|(
name|AST
name|_t
parameter_list|,
name|LocationStep
name|step
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
throws|,
name|XPathException
block|{
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|predicate_AST_in
init|=
operator|(
name|_t
operator|==
name|ASTNULL
operator|)
condition|?
literal|null
else|:
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|AST
name|__t418
init|=
name|_t
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
name|tmp85_AST_in
init|=
operator|(
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PREDICATE
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|Predicate
name|predicateExpr
init|=
operator|new
name|Predicate
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|predicateExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|.
name|addPredicate
argument_list|(
name|predicateExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t418
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|_tokenNames
init|=
block|{
literal|"<0>"
block|,
literal|"EOF"
block|,
literal|"<2>"
block|,
literal|"NULL_TREE_LOOKAHEAD"
block|,
literal|"QNAME"
block|,
literal|"PREDICATE"
block|,
literal|"FLWOR"
block|,
literal|"PARENTHESIZED"
block|,
literal|"ABSOLUTE_SLASH"
block|,
literal|"ABSOLUTE_DSLASH"
block|,
literal|"WILDCARD"
block|,
literal|"PREFIX_WILDCARD"
block|,
literal|"FUNCTION"
block|,
literal|"UNARY_MINUS"
block|,
literal|"UNARY_PLUS"
block|,
literal|"XPOINTER"
block|,
literal|"XPOINTER_ID"
block|,
literal|"VARIABLE_REF"
block|,
literal|"VARIABLE_BINDING"
block|,
literal|"ELEMENT"
block|,
literal|"ATTRIBUTE"
block|,
literal|"TEXT"
block|,
literal|"VERSION_DECL"
block|,
literal|"NAMESPACE_DECL"
block|,
literal|"DEF_NAMESPACE_DECL"
block|,
literal|"DEF_COLLATION_DECL"
block|,
literal|"DEF_FUNCTION_NS_DECL"
block|,
literal|"GLOBAL_VAR"
block|,
literal|"FUNCTION_DECL"
block|,
literal|"PROLOG"
block|,
literal|"ATOMIC_TYPE"
block|,
literal|"MODULE"
block|,
literal|"ORDER_BY"
block|,
literal|"POSITIONAL_VAR"
block|,
literal|"BEFORE"
block|,
literal|"AFTER"
block|,
literal|"MODULE_DECL"
block|,
literal|"ATTRIBUTE_TEST"
block|,
literal|"COMP_ELEM_CONSTRUCTOR"
block|,
literal|"COMP_ATTR_CONSTRUCTOR"
block|,
literal|"COMP_TEXT_CONSTRUCTOR"
block|,
literal|"COMP_COMMENT_CONSTRUCTOR"
block|,
literal|"COMP_PI_CONSTRUCTOR"
block|,
literal|"COMP_NS_CONSTRUCTOR"
block|,
literal|"\"xpointer\""
block|,
literal|"'('"
block|,
literal|"')'"
block|,
literal|"NCNAME"
block|,
literal|"\"module\""
block|,
literal|"\"namespace\""
block|,
literal|"EQ"
block|,
literal|"STRING_LITERAL"
block|,
literal|"SEMICOLON"
block|,
literal|"\"xquery\""
block|,
literal|"\"version\""
block|,
literal|"\"declare\""
block|,
literal|"\"default\""
block|,
literal|"\"function\""
block|,
literal|"\"variable\""
block|,
literal|"\"element\""
block|,
literal|"\"collation\""
block|,
literal|"DOLLAR"
block|,
literal|"LCURLY"
block|,
literal|"RCURLY"
block|,
literal|"\"import\""
block|,
literal|"\"at\""
block|,
literal|"\"as\""
block|,
literal|"COMMA"
block|,
literal|"\"empty\""
block|,
literal|"QUESTION"
block|,
literal|"STAR"
block|,
literal|"PLUS"
block|,
literal|"\"item\""
block|,
literal|"\"for\""
block|,
literal|"\"let\""
block|,
literal|"\"some\""
block|,
literal|"\"every\""
block|,
literal|"\"if\""
block|,
literal|"\"where\""
block|,
literal|"\"return\""
block|,
literal|"\"in\""
block|,
literal|"COLON"
block|,
literal|"\"order\""
block|,
literal|"\"by\""
block|,
literal|"\"ascending\""
block|,
literal|"\"descending\""
block|,
literal|"\"greatest\""
block|,
literal|"\"least\""
block|,
literal|"\"satisfies\""
block|,
literal|"\"then\""
block|,
literal|"\"else\""
block|,
literal|"\"or\""
block|,
literal|"\"and\""
block|,
literal|"\"instance\""
block|,
literal|"\"of\""
block|,
literal|"\"cast\""
block|,
literal|"LT"
block|,
literal|"GT"
block|,
literal|"\"eq\""
block|,
literal|"\"ne\""
block|,
literal|"\"lt\""
block|,
literal|"\"le\""
block|,
literal|"\"gt\""
block|,
literal|"\"ge\""
block|,
literal|"NEQ"
block|,
literal|"GTEQ"
block|,
literal|"LTEQ"
block|,
literal|"\"is\""
block|,
literal|"\"isnot\""
block|,
literal|"ANDEQ"
block|,
literal|"OREQ"
block|,
literal|"\"to\""
block|,
literal|"MINUS"
block|,
literal|"\"div\""
block|,
literal|"\"idiv\""
block|,
literal|"\"mod\""
block|,
literal|"\"union\""
block|,
literal|"UNION"
block|,
literal|"\"intersect\""
block|,
literal|"\"except\""
block|,
literal|"SLASH"
block|,
literal|"DSLASH"
block|,
literal|"\"text\""
block|,
literal|"\"node\""
block|,
literal|"\"attribute\""
block|,
literal|"\"comment\""
block|,
literal|"\"processing-instruction\""
block|,
literal|"\"document-node\""
block|,
literal|"\"document\""
block|,
literal|"SELF"
block|,
literal|"XML_COMMENT"
block|,
literal|"XML_PI"
block|,
literal|"LPPAREN"
block|,
literal|"RPPAREN"
block|,
literal|"AT"
block|,
literal|"PARENT"
block|,
literal|"\"child\""
block|,
literal|"\"self\""
block|,
literal|"\"descendant\""
block|,
literal|"\"descendant-or-self\""
block|,
literal|"\"following-sibling\""
block|,
literal|"\"following\""
block|,
literal|"\"parent\""
block|,
literal|"\"ancestor\""
block|,
literal|"\"ancestor-or-self\""
block|,
literal|"\"preceding-sibling\""
block|,
literal|"DOUBLE_LITERAL"
block|,
literal|"DECIMAL_LITERAL"
block|,
literal|"INTEGER_LITERAL"
block|,
literal|"END_TAG_START"
block|,
literal|"QUOT"
block|,
literal|"APOS"
block|,
literal|"ATTRIBUTE_CONTENT"
block|,
literal|"ELEMENT_CONTENT"
block|,
literal|"XML_COMMENT_END"
block|,
literal|"XML_PI_END"
block|,
literal|"\"collection\""
block|,
literal|"\"preceding\""
block|,
literal|"COMP_DOC_CONSTRUCTOR"
block|,
literal|"XML_PI_START"
block|,
literal|"LETTER"
block|,
literal|"DIGITS"
block|,
literal|"HEX_DIGITS"
block|,
literal|"NMSTART"
block|,
literal|"NMCHAR"
block|,
literal|"WS"
block|,
literal|"EXPR_COMMENT"
block|,
literal|"PRAGMA"
block|,
literal|"PRAGMA_CONTENT"
block|,
literal|"PRAGMA_QNAME"
block|,
literal|"PREDEFINED_ENTITY_REF"
block|,
literal|"CHAR_REF"
block|,
literal|"NEXT_TOKEN"
block|,
literal|"CHAR"
block|,
literal|"BASECHAR"
block|,
literal|"IDEOGRAPHIC"
block|,
literal|"COMBINING_CHAR"
block|,
literal|"DIGIT"
block|,
literal|"EXTENDER"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|5191673918136156048L
block|,
operator|-
literal|4616189619262670648L
block|,
literal|1612709838L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4611694539645124608L
block|,
literal|0L
block|,
literal|1073741836L
block|,
literal|0L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

