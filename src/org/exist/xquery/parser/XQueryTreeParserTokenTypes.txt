// $ANTLR 2.7.4: XQueryTree.g -> XQueryTreeParserTokenTypes.txt$
XQueryTreeParser    // output token vocab name
QNAME=4
PREDICATE=5
FLWOR=6
PARENTHESIZED=7
ABSOLUTE_SLASH=8
ABSOLUTE_DSLASH=9
WILDCARD=10
PREFIX_WILDCARD=11
FUNCTION=12
UNARY_MINUS=13
UNARY_PLUS=14
XPOINTER=15
XPOINTER_ID=16
VARIABLE_REF=17
VARIABLE_BINDING=18
ELEMENT=19
ATTRIBUTE=20
ATTRIBUTE_CONTENT=21
TEXT=22
VERSION_DECL=23
NAMESPACE_DECL=24
DEF_NAMESPACE_DECL=25
DEF_COLLATION_DECL=26
DEF_FUNCTION_NS_DECL=27
GLOBAL_VAR=28
FUNCTION_DECL=29
PROLOG=30
OPTION=31
ATOMIC_TYPE=32
MODULE=33
ORDER_BY=34
POSITIONAL_VAR=35
BEFORE=36
AFTER=37
MODULE_DECL=38
MODULE_IMPORT=39
SCHEMA_IMPORT=40
ATTRIBUTE_TEST=41
COMP_ELEM_CONSTRUCTOR=42
COMP_ATTR_CONSTRUCTOR=43
COMP_TEXT_CONSTRUCTOR=44
COMP_COMMENT_CONSTRUCTOR=45
COMP_PI_CONSTRUCTOR=46
COMP_NS_CONSTRUCTOR=47
COMP_DOC_CONSTRUCTOR=48
LITERAL_xpointer="xpointer"=49
LPAREN("opening parenthesis '('")=50
RPAREN("closing parenthesis ')'")=51
NCNAME("name")=52
LITERAL_xquery="xquery"=53
LITERAL_version="version"=54
SEMICOLON("semicolon ';'")=55
LITERAL_module="module"=56
LITERAL_namespace="namespace"=57
EQ("=")=58
STRING_LITERAL("string literal")=59
LITERAL_declare="declare"=60
LITERAL_default="default"=61
"boundary-space"=62
LITERAL_ordering="ordering"=63
LITERAL_construction="construction"=64
"base-uri"=65
"copy-namespaces"=66
LITERAL_option="option"=67
LITERAL_function="function"=68
LITERAL_variable="variable"=69
LITERAL_import="import"=70
LITERAL_encoding="encoding"=71
LITERAL_collation="collation"=72
LITERAL_element="element"=73
LITERAL_order="order"=74
LITERAL_empty="empty"=75
LITERAL_greatest="greatest"=76
LITERAL_least="least"=77
LITERAL_preserve="preserve"=78
LITERAL_strip="strip"=79
LITERAL_ordered="ordered"=80
LITERAL_unordered="unordered"=81
COMMA=82
"no-preserve"=83
LITERAL_inherit="inherit"=84
"no-inherit"=85
DOLLAR("dollar sign '$'")=86
LCURLY("opening curly brace '{'")=87
RCURLY("closing curly brace '{'")=88
COLON=89
LITERAL_external="external"=90
LITERAL_at="at"=91
LITERAL_schema="schema"=92
LITERAL_as="as"=93
"empty-sequence"=94
QUESTION("question mark '?'")=95
STAR("wildcard '*'")=96
PLUS("+")=97
LITERAL_item="item"=98
LITERAL_for="for"=99
LITERAL_let="let"=100
LITERAL_some="some"=101
LITERAL_every="every"=102
LITERAL_if="if"=103
LITERAL_typeswitch="typeswitch"=104
LITERAL_update="update"=105
LITERAL_replace="replace"=106
LITERAL_value="value"=107
LITERAL_insert="insert"=108
LITERAL_delete="delete"=109
LITERAL_rename="rename"=110
LITERAL_with="with"=111
LITERAL_into="into"=112
LITERAL_preceding="preceding"=113
LITERAL_following="following"=114
LITERAL_where="where"=115
LITERAL_return="return"=116
LITERAL_in="in"=117
LITERAL_by="by"=118
LITERAL_ascending="ascending"=119
LITERAL_descending="descending"=120
LITERAL_satisfies="satisfies"=121
LITERAL_case="case"=122
LITERAL_then="then"=123
LITERAL_else="else"=124
LITERAL_or="or"=125
LITERAL_and="and"=126
LITERAL_instance="instance"=127
LITERAL_of="of"=128
LITERAL_treat="treat"=129
LITERAL_castable="castable"=130
LITERAL_cast="cast"=131
LT("<")=132
GT(">")=133
LITERAL_eq="eq"=134
LITERAL_ne="ne"=135
LITERAL_lt="lt"=136
LITERAL_le="le"=137
LITERAL_gt="gt"=138
LITERAL_ge="ge"=139
NEQ("!=")=140
GTEQ(">=")=141
LTEQ("<=")=142
LITERAL_is="is"=143
LITERAL_isnot="isnot"=144
ANDEQ("fulltext operator '&='")=145
OREQ("fulltext operator '|='")=146
LITERAL_to="to"=147
MINUS("-")=148
LITERAL_div="div"=149
LITERAL_idiv="idiv"=150
LITERAL_mod="mod"=151
LITERAL_union="union"=152
UNION("union")=153
LITERAL_intersect="intersect"=154
LITERAL_except="except"=155
SLASH("single slash '/'")=156
DSLASH("double slash '//'")=157
LITERAL_text="text"=158
LITERAL_node="node"=159
LITERAL_attribute="attribute"=160
LITERAL_comment="comment"=161
"processing-instruction"=162
"document-node"=163
LITERAL_document="document"=164
SELF(".")=165
XML_COMMENT("XML comment")=166
XML_PI("processing instruction")=167
LPPAREN("opening brace '['")=168
RPPAREN("closing brace ']'")=169
AT("@ char")=170
PARENT("..")=171
LITERAL_child="child"=172
LITERAL_self="self"=173
LITERAL_descendant="descendant"=174
"descendant-or-self"=175
"following-sibling"=176
LITERAL_parent="parent"=177
LITERAL_ancestor="ancestor"=178
"ancestor-or-self"=179
"preceding-sibling"=180
DOUBLE_LITERAL=181
DECIMAL_LITERAL=182
INTEGER_LITERAL=183
END_TAG_START("XML end tag")=184
QUOT("double quote '\"'")=185
APOS("single quote '")=186
QUOT_ATTRIBUTE_CONTENT=187
ESCAPE_QUOT=188
APOS_ATTRIBUTE_CONTENT=189
ESCAPE_APOS=190
ELEMENT_CONTENT=191
XML_COMMENT_END("end of XML comment")=192
XML_PI_END("end of processing instruction")=193
XML_CDATA("CDATA section")=194
LITERAL_collection="collection"=195
LITERAL_validate="validate"=196
XML_PI_START("start of processing instruction")=197
XML_CDATA_START("CDATA section start")=198
XML_CDATA_END("end of CDATA section")=199
LETTER=200
DIGITS=201
HEX_DIGITS=202
NMSTART=203
NMCHAR=204
WS=205
EXPR_COMMENT("XQuery comment")=206
PRAGMA("XQuery pragma")=207
PRAGMA_CONTENT=208
PRAGMA_QNAME=209
PREDEFINED_ENTITY_REF=210
CHAR_REF=211
NEXT_TOKEN=212
CHAR=213
BASECHAR=214
IDEOGRAPHIC=215
COMBINING_CHAR=216
DIGIT=217
EXTENDER=218
