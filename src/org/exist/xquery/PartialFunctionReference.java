begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_class
specifier|public
class|class
name|PartialFunctionReference
extends|extends
name|FunctionReference
block|{
name|Sequence
index|[]
name|argValues
decl_stmt|;
name|List
argument_list|<
name|Expression
argument_list|>
name|unfixedArgs
init|=
literal|null
decl_stmt|;
specifier|public
name|PartialFunctionReference
parameter_list|(
name|FunctionCall
name|fcall
parameter_list|,
name|Sequence
index|[]
name|arguments
parameter_list|)
block|{
name|super
argument_list|(
name|fcall
argument_list|)
expr_stmt|;
name|this
operator|.
name|argValues
operator|=
name|arguments
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
index|[]
name|arguments
init|=
operator|new
name|Sequence
index|[
name|argValues
operator|.
name|length
index|]
decl_stmt|;
name|Iterator
argument_list|<
name|Expression
argument_list|>
name|iter
init|=
name|unfixedArgs
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argValues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|argValues
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|functionCall
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Wrong number of arguments to partially applied "
operator|+
literal|"function."
argument_list|)
throw|;
name|Expression
name|nextArg
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|arguments
index|[
name|i
index|]
operator|=
name|nextArg
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
expr_stmt|;
block|}
else|else
name|arguments
index|[
name|i
index|]
operator|=
name|argValues
index|[
name|i
index|]
expr_stmt|;
block|}
if|if
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|functionCall
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Wrong number of arguments to partially applied "
operator|+
literal|"function."
argument_list|)
throw|;
return|return
name|functionCall
operator|.
name|evalFunction
argument_list|(
name|contextSequence
argument_list|,
literal|null
argument_list|,
name|arguments
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|evalFunction
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|,
name|Sequence
index|[]
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// merge argument sequence with fixed arguments
name|Sequence
index|[]
name|arguments
init|=
operator|new
name|Sequence
index|[
name|argValues
operator|.
name|length
index|]
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|argValues
index|[
name|i
index|]
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|j
operator|==
name|seq
operator|.
name|length
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|functionCall
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Wrong number of arguments to partially applied "
operator|+
literal|"function."
argument_list|)
throw|;
name|arguments
index|[
name|i
index|]
operator|=
name|seq
index|[
name|j
operator|++
index|]
expr_stmt|;
block|}
else|else
block|{
name|arguments
index|[
name|i
index|]
operator|=
name|argValues
index|[
name|i
index|]
expr_stmt|;
block|}
block|}
return|return
name|super
operator|.
name|evalFunction
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|,
name|arguments
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|unfixedArgs
operator|!=
literal|null
condition|)
block|{
comment|// merge arguments before calling analyze on the function
name|List
argument_list|<
name|Expression
argument_list|>
name|updatedArgs
init|=
operator|new
name|ArrayList
argument_list|<
name|Expression
argument_list|>
argument_list|(
name|functionCall
operator|.
name|getArgumentCount
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|functionCall
operator|.
name|getArgumentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|arg
init|=
name|functionCall
operator|.
name|getArgument
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|instanceof
name|Function
operator|.
name|Placeholder
condition|)
block|{
if|if
condition|(
name|j
operator|==
name|unfixedArgs
operator|.
name|size
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|functionCall
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Wrong number of arguments to partially applied "
operator|+
literal|"function."
argument_list|)
throw|;
name|arg
operator|=
name|unfixedArgs
operator|.
name|get
argument_list|(
name|j
operator|++
argument_list|)
expr_stmt|;
block|}
name|updatedArgs
operator|.
name|add
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
name|functionCall
operator|.
name|setArguments
argument_list|(
name|updatedArgs
argument_list|)
expr_stmt|;
block|}
name|functionCall
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setArguments
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|arguments
parameter_list|)
throws|throws
name|XPathException
block|{
name|unfixedArgs
operator|=
name|arguments
expr_stmt|;
block|}
block|}
end_class

end_unit

