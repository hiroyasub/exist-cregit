begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Describes the signature of a built-in or user-defined function, i.e.  * its name, the type and cardinality of its arguments and its return type.  *    * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|FunctionSignature
block|{
comment|/** 	 * Default sequence type for function parameters. 	 */
specifier|public
specifier|final
specifier|static
name|SequenceType
name|DEFAULT_TYPE
init|=
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
decl_stmt|;
specifier|private
name|QName
name|name
decl_stmt|;
specifier|private
name|SequenceType
index|[]
name|arguments
decl_stmt|;
specifier|private
name|SequenceType
name|returnType
decl_stmt|;
specifier|private
name|boolean
name|isOverloaded
init|=
literal|false
decl_stmt|;
specifier|private
name|String
name|description
init|=
literal|null
decl_stmt|;
specifier|public
name|FunctionSignature
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|DEFAULT_TYPE
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
name|QName
name|name
parameter_list|,
name|SequenceType
index|[]
name|arguments
parameter_list|,
name|SequenceType
name|returnType
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
name|QName
name|name
parameter_list|,
name|SequenceType
index|[]
name|arguments
parameter_list|,
name|SequenceType
name|returnType
parameter_list|,
name|boolean
name|overloaded
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
literal|null
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|,
name|overloaded
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FunctionSignature
parameter_list|(
name|QName
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|SequenceType
index|[]
name|arguments
parameter_list|,
name|SequenceType
name|returnType
parameter_list|)
block|{
name|this
argument_list|(
name|name
argument_list|,
name|description
argument_list|,
name|arguments
argument_list|,
name|returnType
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Create a new function signature. 	 *  	 * @param name the QName of the function. 	 * @param arguments the sequence types of all expected arguments 	 * @param returnType the sequence type returned by the function 	 * @param overloaded set to true if the function may expect additional parameters 	 */
specifier|public
name|FunctionSignature
parameter_list|(
name|QName
name|name
parameter_list|,
name|String
name|description
parameter_list|,
name|SequenceType
index|[]
name|arguments
parameter_list|,
name|SequenceType
name|returnType
parameter_list|,
name|boolean
name|overloaded
parameter_list|)
block|{
name|this
operator|.
name|name
operator|=
name|name
expr_stmt|;
name|this
operator|.
name|arguments
operator|=
name|arguments
expr_stmt|;
name|this
operator|.
name|returnType
operator|=
name|returnType
expr_stmt|;
name|this
operator|.
name|isOverloaded
operator|=
name|overloaded
expr_stmt|;
name|this
operator|.
name|description
operator|=
name|description
expr_stmt|;
block|}
specifier|public
name|QName
name|getName
parameter_list|()
block|{
return|return
name|name
return|;
block|}
specifier|public
name|int
name|getArgumentCount
parameter_list|()
block|{
return|return
name|arguments
operator|!=
literal|null
condition|?
name|arguments
operator|.
name|length
else|:
literal|0
return|;
block|}
specifier|public
name|SequenceType
name|getReturnType
parameter_list|()
block|{
return|return
name|returnType
return|;
block|}
specifier|public
name|void
name|setReturnType
parameter_list|(
name|SequenceType
name|type
parameter_list|)
block|{
name|returnType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|SequenceType
index|[]
name|getArgumentTypes
parameter_list|()
block|{
return|return
name|arguments
return|;
block|}
specifier|public
name|void
name|setArgumentTypes
parameter_list|(
name|SequenceType
index|[]
name|types
parameter_list|)
block|{
name|this
operator|.
name|arguments
operator|=
name|types
expr_stmt|;
block|}
specifier|public
name|String
name|getDescription
parameter_list|()
block|{
return|return
name|description
return|;
block|}
specifier|public
name|boolean
name|isOverloaded
parameter_list|()
block|{
return|return
name|isOverloaded
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
if|if
condition|(
name|arguments
operator|!=
literal|null
condition|)
block|{
name|char
name|var
init|=
literal|'a'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|arguments
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
name|var
operator|+
name|i
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" as "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|arguments
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isOverloaded
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|", ..."
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|") "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|returnType
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

