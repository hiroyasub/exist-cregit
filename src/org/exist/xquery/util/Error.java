begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Class used to pass an error context to subordinate expressions.  * Most XQuery classes delegate dynamic type and cardinality checks   * to classes like {@link org.exist.xquery.DynamicCardinalityCheck} or  * {@link org.exist.xquery.DynamicTypeCheck}. Those classes don't know  * the context in which they were called and thus can't produce meaningful  * error messages. Class Error can be used to pass runtime error descriptions   * from the top-level object to the lower-level objects.  *   * This class also defines some static constants for various error messages.  * The final formatting of the message is done by class   * {@link org.exist.xquery.util.Messages}.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|Error
block|{
specifier|public
specifier|final
specifier|static
name|String
name|FUNC_RETURN_CARDINALITY
init|=
literal|"D01"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FUNC_PARAM_CARDINALITY
init|=
literal|"D02"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FUNC_RETURN_TYPE
init|=
literal|"D03"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|TYPE_MISMATCH
init|=
literal|"D04"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|NODE_COMP_TYPE_MISMATCH
init|=
literal|"D05"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FUNC_PARAM_TYPE
init|=
literal|"D06"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|VAR_TYPE_MISMATCH
init|=
literal|"D07"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FUNC_EMPTY_SEQ_DISALLOWED
init|=
literal|"S01"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FUNC_PARAM_TYPE_STATIC
init|=
literal|"S02"
decl_stmt|;
specifier|private
name|String
name|errCode
decl_stmt|;
specifier|private
name|Object
index|[]
name|args
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a new error with the specified message id.      *       * @param errCode the message id for this error.      */
specifier|public
name|Error
parameter_list|(
name|String
name|errCode
parameter_list|)
block|{
name|this
operator|.
name|errCode
operator|=
name|errCode
expr_stmt|;
block|}
comment|/**      * Creates a new error with the specified message id      * and adds a single argument to the argument list for the      * error message.      *       * @param errCode      * @param arg1      */
specifier|public
name|Error
parameter_list|(
name|String
name|errCode
parameter_list|,
name|Object
name|arg1
parameter_list|)
block|{
name|this
operator|.
name|errCode
operator|=
name|errCode
expr_stmt|;
name|args
operator|=
operator|new
name|Object
index|[]
block|{
name|arg1
block|}
expr_stmt|;
block|}
specifier|public
name|Error
parameter_list|(
name|String
name|errCode
parameter_list|,
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|)
block|{
name|this
operator|.
name|errCode
operator|=
name|errCode
expr_stmt|;
name|args
operator|=
operator|new
name|Object
index|[]
block|{
name|arg1
block|,
name|arg2
block|}
expr_stmt|;
block|}
comment|/**      * Add an argument to the argument list for the error message.      *       * @param arg      */
specifier|public
name|void
name|addArg
parameter_list|(
name|Object
name|arg
parameter_list|)
block|{
name|addArgs
argument_list|(
operator|new
name|Object
index|[]
block|{
name|arg
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addArgs
parameter_list|(
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|)
block|{
name|addArgs
argument_list|(
operator|new
name|Object
index|[]
block|{
name|arg1
block|,
name|arg2
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addArgs
parameter_list|(
name|Object
name|arg1
parameter_list|,
name|Object
name|arg2
parameter_list|,
name|Object
name|arg3
parameter_list|)
block|{
name|addArgs
argument_list|(
operator|new
name|Object
index|[]
block|{
name|arg1
block|,
name|arg2
block|,
name|arg3
block|}
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|addArgs
parameter_list|(
name|Object
index|[]
name|nargs
parameter_list|)
block|{
if|if
condition|(
name|args
operator|==
literal|null
condition|)
block|{
name|args
operator|=
name|nargs
expr_stmt|;
block|}
else|else
block|{
name|Object
index|[]
name|a
init|=
operator|new
name|Object
index|[
name|args
operator|.
name|length
operator|+
name|nargs
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|args
argument_list|,
literal|0
argument_list|,
name|a
argument_list|,
literal|0
argument_list|,
name|args
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|nargs
argument_list|,
literal|0
argument_list|,
name|a
argument_list|,
name|args
operator|.
name|length
argument_list|,
name|nargs
operator|.
name|length
argument_list|)
expr_stmt|;
name|args
operator|=
name|a
expr_stmt|;
block|}
block|}
comment|/* (non-Javadoc)      * @see java.lang.Object#toString()      */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|Messages
operator|.
name|formatMessage
argument_list|(
name|errCode
argument_list|,
name|args
argument_list|)
return|;
block|}
specifier|public
name|String
name|getErrorCode
parameter_list|()
block|{
return|return
name|errCode
return|;
block|}
specifier|public
name|Object
index|[]
name|getArgs
parameter_list|()
block|{
return|return
name|args
return|;
block|}
block|}
end_class

end_unit

