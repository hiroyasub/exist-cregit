begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2005-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|ConnectException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|HttpURLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|SourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|URLSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * Utilities for XPath doc related functions  *  * @author wolf  * @author Pierrick Brihaye<pierrick.brihaye@free.fr>  */
end_comment

begin_comment
comment|//TODO : many more improvements to handle efficiently any URI
end_comment

begin_class
specifier|public
class|class
name|DocUtils
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|DocUtils
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
name|Sequence
name|getDocument
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
block|{
return|return
name|getDocumentByPath
argument_list|(
name|context
argument_list|,
name|path
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|boolean
name|isDocumentAvailable
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
specifier|final
name|Sequence
name|seq
init|=
name|getDocumentByPath
argument_list|(
name|context
argument_list|,
name|path
argument_list|)
decl_stmt|;
return|return
operator|(
name|seq
operator|!=
literal|null
operator|&&
name|seq
operator|.
name|effectiveBooleanValue
argument_list|()
operator|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|static
name|Sequence
name|getDocumentByPath
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
block|{
if|if
condition|(
name|path
operator|.
name|matches
argument_list|(
literal|"^[a-z]+:.*"
argument_list|)
operator|&&
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"xmldb:"
argument_list|)
condition|)
block|{
comment|/* URL */
return|return
name|getDocumentByPathFromURL
argument_list|(
name|context
argument_list|,
name|path
argument_list|)
return|;
block|}
else|else
block|{
comment|/* Database documents */
return|return
name|getDocumentByPathFromDB
argument_list|(
name|context
argument_list|,
name|path
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|Sequence
name|getDocumentByPathFromURL
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
block|{
name|XMLReader
name|reader
init|=
literal|null
decl_stmt|;
comment|/* URL */
try|try
block|{
specifier|final
name|Source
name|source
init|=
name|SourceFactory
operator|.
name|getSource
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
literal|""
argument_list|,
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|source
operator|.
name|getInputStream
argument_list|()
init|)
block|{
if|if
condition|(
name|source
operator|instanceof
name|URLSource
condition|)
block|{
specifier|final
name|int
name|responseCode
init|=
operator|(
operator|(
name|URLSource
operator|)
name|source
operator|)
operator|.
name|getResponseCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|responseCode
operator|==
name|HttpURLConnection
operator|.
name|HTTP_NOT_FOUND
condition|)
block|{
comment|// Special case: '404'
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
if|else if
condition|(
name|responseCode
operator|!=
name|HttpURLConnection
operator|.
name|HTTP_OK
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Server returned code "
operator|+
name|responseCode
argument_list|)
throw|;
block|}
block|}
comment|//TODO : process pseudo-protocols URLs more efficiently.
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
name|memtreeDoc
init|=
literal|null
decl_stmt|;
comment|// we use eXist's in-memory DOM implementation
name|reader
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
operator|.
name|borrowXMLReader
argument_list|()
expr_stmt|;
comment|//TODO : we should be able to cope with context.getBaseURI()
specifier|final
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
specifier|final
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
name|adapter
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|memtreeDoc
operator|=
operator|(
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
operator|)
name|doc
expr_stmt|;
name|memtreeDoc
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|memtreeDoc
operator|.
name|setDocumentURI
argument_list|(
name|path
argument_list|)
expr_stmt|;
return|return
name|memtreeDoc
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|ConnectException
name|e
parameter_list|)
block|{
comment|// prevent long stack traces
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|" ("
operator|+
name|path
operator|+
literal|")"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"An error occurred while parsing "
operator|+
name|path
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
comment|// Special case: FileNotFoundException
if|if
condition|(
name|e
operator|instanceof
name|FileNotFoundException
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"An error occurred while parsing "
operator|+
name|path
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
operator|.
name|returnXMLReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|Sequence
name|getDocumentByPathFromDB
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|String
name|path
parameter_list|)
throws|throws
name|XPathException
throws|,
name|PermissionDeniedException
block|{
comment|// check if the loaded documents should remain locked
specifier|final
name|LockMode
name|lockType
init|=
name|context
operator|.
name|lockDocumentsOnLoad
argument_list|()
condition|?
name|LockMode
operator|.
name|WRITE_LOCK
else|:
name|LockMode
operator|.
name|READ_LOCK
decl_stmt|;
try|try
block|{
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|,
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|baseURI
init|=
name|context
operator|.
name|getBaseURI
argument_list|()
operator|.
name|toXmldbURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseURI
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|baseURI
operator|.
name|equals
argument_list|(
literal|""
argument_list|)
operator|||
name|baseURI
operator|.
name|equals
argument_list|(
literal|"/db"
argument_list|)
operator|)
condition|)
block|{
comment|// relative collection Path: add the current base URI
name|pathUri
operator|=
name|baseURI
operator|.
name|resolveCollectionPath
argument_list|(
name|pathUri
argument_list|)
expr_stmt|;
block|}
comment|// relative collection Path: add the current module call URI
try|try
block|{
name|pathUri
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|context
operator|.
name|getModuleLoadPath
argument_list|()
argument_list|)
operator|.
name|resolveCollectionPath
argument_list|(
name|pathUri
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
comment|//workaround: ignore Windows issue
name|LOG
operator|.
name|error
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// try to open the document and acquire a lock
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDoc
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|lockType
argument_list|)
init|)
block|{
if|if
condition|(
name|lockedDoc
operator|==
literal|null
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
else|else
block|{
specifier|final
name|DocumentImpl
name|doc
init|=
name|lockedDoc
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|context
operator|.
name|getSubject
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Insufficient privileges to read resource "
operator|+
name|path
argument_list|)
throw|;
block|}
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Document "
operator|+
name|path
operator|+
literal|" is a binary resource, not an XML document. Please consider using the function util:binary-doc() to retrieve a reference to it."
argument_list|)
throw|;
block|}
return|return
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Utility function to parse an input stream into an in-memory DOM document.      *      * @param context The XQuery context      * @param is      The input stream to parse from      * @return document The document that was parsed      * @throws XPathException      */
specifier|public
specifier|static
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
name|parse
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|parse
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|context
argument_list|,
name|is
argument_list|)
return|;
block|}
comment|/**      * Utility function to parse an input stream into an in-memory DOM document.      *      * @param pool    The broker pool      * @param context The XQuery context      * @param is      The input stream to parse from      * @return document The document that was parsed      * @throws XPathException      */
specifier|public
specifier|static
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
name|parse
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|,
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|InputStream
name|is
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// we use eXist's in-memory DOM implementation
specifier|final
name|XMLReader
name|reader
init|=
name|pool
operator|.
name|getParserPool
argument_list|()
operator|.
name|borrowXMLReader
argument_list|()
decl_stmt|;
specifier|final
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
decl_stmt|;
specifier|final
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
try|try
block|{
name|reader
operator|.
name|setProperty
argument_list|(
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXNotRecognizedException
decl||
name|SAXNotSupportedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Error creating XML parser: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Error while parsing XML: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|adapter
operator|.
name|getDocument
argument_list|()
return|;
block|}
block|}
end_class

end_unit

