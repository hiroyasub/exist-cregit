begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* *  eXist Open Source Native XML Database *  Copyright (C) 2001-04 Wolfgang M. Meier (wolfgang@exist-db.org)  *  and others (see http://exist-db.org) * *  This program is free software; you can redistribute it and/or *  modify it under the terms of the GNU Lesser General Public License *  as published by the Free Software Foundation; either version 2 *  of the License, or (at your option) any later version. * *  This program is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU Lesser General Public License for more details. * *  You should have received a copy of the GNU Lesser General Public License *  along with this program; if not, write to the Free Software *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA. *  *  $Id$ */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_comment
comment|/**  * Represents an XQuery option declared via "declare option".  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|Option
block|{
specifier|public
specifier|final
specifier|static
name|QName
name|TIMEOUT_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"timeout"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|OUTPUT_SIZE_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"output-size-limit"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|SERIALIZE_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"serialize"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|PROFILE_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"profiling"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|OPTIMIZE_QNAME
init|=
operator|new
name|QName
argument_list|(
literal|"optimize"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|OPTIMIZE_IMPLICIT_TIMEZONE
init|=
operator|new
name|QName
argument_list|(
literal|"implicit-timezone"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|CURRENT_DATETIME
init|=
operator|new
name|QName
argument_list|(
literal|"current-dateTime"
argument_list|,
name|Namespaces
operator|.
name|EXIST_NS
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|paramPattern
init|=
literal|"\\s*([\\w\\.-]+)\\s*=\\s*('[^']*'|\"[^\"]*\"|[^\"\'\\s][^\\s]*)"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|paramPattern
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|QName
name|qname
decl_stmt|;
specifier|private
specifier|final
name|String
name|contents
decl_stmt|;
specifier|public
name|Option
parameter_list|(
name|QName
name|qname
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|qname
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
operator|||
literal|""
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPST0081: options must have a prefix"
argument_list|)
throw|;
block|}
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
name|this
operator|.
name|contents
operator|=
name|contents
expr_stmt|;
block|}
specifier|public
name|QName
name|getQName
parameter_list|()
block|{
return|return
name|qname
return|;
block|}
specifier|public
name|String
name|getContents
parameter_list|()
block|{
return|return
name|contents
return|;
block|}
specifier|public
name|String
index|[]
name|tokenizeContents
parameter_list|()
block|{
return|return
name|tokenize
argument_list|(
name|contents
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
index|[]
name|tokenize
parameter_list|(
name|String
name|contents
parameter_list|)
block|{
if|if
condition|(
name|contents
operator|==
literal|null
condition|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
specifier|final
name|StringTokenizer
name|tok
init|=
operator|new
name|StringTokenizer
argument_list|(
name|contents
argument_list|,
literal|" \r\t\n"
argument_list|)
decl_stmt|;
specifier|final
name|String
index|[]
name|items
init|=
operator|new
name|String
index|[
name|tok
operator|.
name|countTokens
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|tok
operator|.
name|hasMoreTokens
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|items
index|[
name|i
index|]
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
expr_stmt|;
block|}
return|return
name|items
return|;
block|}
specifier|public
specifier|static
specifier|synchronized
name|String
index|[]
name|parseKeyValuePair
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|matcher
operator|.
name|reset
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|()
condition|)
block|{
name|String
name|value
init|=
name|matcher
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\''
operator|||
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'"'
condition|)
block|{
name|value
operator|=
name|value
operator|.
name|substring
argument_list|(
literal|1
argument_list|,
name|value
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|String
index|[]
block|{
name|matcher
operator|.
name|group
argument_list|(
literal|1
argument_list|)
block|,
name|value
block|}
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|instanceof
name|Option
condition|)
block|{
return|return
name|qname
operator|.
name|equalsSimple
argument_list|(
operator|(
operator|(
name|Option
operator|)
name|other
operator|)
operator|.
name|qname
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

