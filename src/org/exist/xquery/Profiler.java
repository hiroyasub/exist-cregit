begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|parser
operator|.
name|XQueryAST
import|;
end_import

begin_comment
comment|/**  * XQuery profiling output. Profiling information is written to a  * logger. The profiler can be enabled/disabled and configured  * via an XQuery pragma or "declare option" expression. Example:  *   *<pre>declare option exist:profiling "enabled=yes verbosity=10 logger=profiler";</pre>  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|Profiler
block|{
comment|/**      * The logger where all output goes.      */
specifier|private
name|Logger
name|log
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
literal|"xquery.profiling"
argument_list|)
decl_stmt|;
specifier|private
name|Stack
name|stack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|(
literal|64
argument_list|)
decl_stmt|;
specifier|private
name|long
name|profilingThreshold
init|=
literal|5
decl_stmt|;
specifier|private
name|boolean
name|enabled
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|verbosity
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|queryStarted
init|=
literal|false
decl_stmt|;
comment|/**      * Configure the profiler from an XQuery pragma.      * Parameters are:      *       *<ul>      *<li><strong>enabled</strong>: yes|no.</li>      *<li><strong>logger</strong>: name of the logger to use.</li>      *<li><strong>verbosity</strong>: integer value&gt; 0. 1 does only output function calls.</li>      *</ul>      * @param pragma      */
specifier|public
specifier|final
name|void
name|configure
parameter_list|(
name|Pragma
name|pragma
parameter_list|)
block|{
name|String
name|options
index|[]
init|=
name|pragma
operator|.
name|tokenizeContents
argument_list|()
decl_stmt|;
name|String
name|params
index|[]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|options
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|params
operator|=
name|Pragma
operator|.
name|parseKeyValuePair
argument_list|(
name|options
index|[
name|i
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|params
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"logger"
argument_list|)
condition|)
name|log
operator|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|params
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|else if
condition|(
name|params
index|[
literal|0
index|]
operator|.
name|equals
argument_list|(
literal|"enabled"
argument_list|)
condition|)
name|enabled
operator|=
name|params
index|[
literal|1
index|]
operator|.
name|equals
argument_list|(
literal|"yes"
argument_list|)
expr_stmt|;
if|else if
condition|(
literal|"verbosity"
operator|.
name|equals
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
try|try
block|{
name|verbosity
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
if|else if
condition|(
literal|"threshold"
operator|.
name|equals
argument_list|(
name|params
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
try|try
block|{
name|profilingThreshold
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|params
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
block|}
comment|/**      * Is profiling enabled?      *       * @return      */
specifier|public
specifier|final
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
comment|/**      * @return the verbosity of the profiler.      */
specifier|public
specifier|final
name|int
name|verbosity
parameter_list|()
block|{
return|return
name|verbosity
return|;
block|}
comment|/**      * Called by an expression to indicate the start of an operation.      * The profiler registers the start time.      *       * @param expr the expression.      */
specifier|public
specifier|final
name|void
name|start
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
name|start
argument_list|(
name|expr
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
comment|/**      * Called by an expression to indicate the start of an operation.      * The profiler registers the start time.      *       * @param expr the expression.      * @param message if not null, contains an optional message to print in the log.      */
specifier|public
specifier|final
name|void
name|start
parameter_list|(
name|Expression
name|expr
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
name|ProfiledExpr
name|e
init|=
operator|new
name|ProfiledExpr
argument_list|(
name|expr
argument_list|)
decl_stmt|;
name|stack
operator|.
name|push
argument_list|(
name|e
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|queryStarted
condition|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"QUERY START"
argument_list|)
expr_stmt|;
name|queryStarted
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|printPosition
argument_list|(
name|e
operator|.
name|expr
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"START\t\t- "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Called by an expression to indicate the end of an operation.      * The profiler computes the elapsed time.      *       * @param expr the expression.      * @param message required: a message to be printed to the log.      */
specifier|public
specifier|final
name|void
name|end
parameter_list|(
name|Expression
name|expr
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
return|return;
try|try
block|{
name|ProfiledExpr
name|e
init|=
operator|(
name|ProfiledExpr
operator|)
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|expr
operator|!=
name|expr
condition|)
block|{
name|log
operator|.
name|warn
argument_list|(
literal|"Error: the object passed to end() does not correspond to the expression on top of the stack."
argument_list|)
expr_stmt|;
name|stack
operator|.
name|clear
argument_list|()
expr_stmt|;
return|return;
block|}
name|long
name|elapsed
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|e
operator|.
name|start
decl_stmt|;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|printPosition
argument_list|(
name|e
operator|.
name|expr
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\tEND\t"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|elapsed
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"ms - "
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RuntimeException
name|e
parameter_list|)
block|{
name|log
operator|.
name|debug
argument_list|(
literal|"Profiler: could not pop from expression stack - "
operator|+
name|expr
operator|+
literal|" - "
operator|+
name|message
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Print out a single profiling message for the given       * expression object.      *       * @param expr      * @param message      */
specifier|public
specifier|final
name|void
name|message
parameter_list|(
name|Expression
name|expr
parameter_list|,
name|String
name|message
parameter_list|)
block|{
if|if
condition|(
operator|!
name|enabled
condition|)
return|return;
name|buf
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|printPosition
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\tMSG\t"
argument_list|)
expr_stmt|;
if|if
condition|(
name|message
operator|!=
literal|null
condition|)
name|buf
operator|.
name|append
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|log
operator|.
name|debug
argument_list|(
name|buf
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
block|{
name|queryStarted
operator|=
literal|false
expr_stmt|;
block|}
comment|/**      * @param e      */
specifier|private
name|void
name|printPosition
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
name|XQueryAST
name|ast
init|=
name|expr
operator|.
name|getASTNode
argument_list|()
decl_stmt|;
if|if
condition|(
name|ast
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|ast
operator|.
name|getColumn
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|ast
operator|.
name|getLine
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"] "
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
class|class
name|ProfiledExpr
block|{
name|long
name|start
decl_stmt|;
name|Expression
name|expr
decl_stmt|;
specifier|private
name|ProfiledExpr
parameter_list|(
name|Expression
name|expression
parameter_list|)
block|{
name|this
operator|.
name|expr
operator|=
name|expression
expr_stmt|;
name|this
operator|.
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setEnabled
parameter_list|(
name|boolean
name|enabled
parameter_list|)
block|{
name|this
operator|.
name|enabled
operator|=
name|enabled
expr_stmt|;
block|}
specifier|public
name|void
name|setVerbosity
parameter_list|(
name|int
name|verbosity
parameter_list|)
block|{
name|this
operator|.
name|verbosity
operator|=
name|verbosity
expr_stmt|;
block|}
block|}
end_class

end_unit

