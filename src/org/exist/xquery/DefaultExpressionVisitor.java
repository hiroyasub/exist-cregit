begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * An {@link org.exist.xquery.ExpressionVisitor} which traverses the entire  * expression tree. Methods may be overwritten by subclasses to filter out the  * events they need.  */
end_comment

begin_class
specifier|public
class|class
name|DefaultExpressionVisitor
extends|extends
name|BasicExpressionVisitor
block|{
specifier|public
name|void
name|visitPathExpr
parameter_list|(
name|PathExpr
name|expression
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expression
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Expression
name|next
init|=
name|expression
operator|.
name|getExpression
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|next
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|visitUserFunction
parameter_list|(
name|UserDefinedFunction
name|function
parameter_list|)
block|{
name|function
operator|.
name|getFunctionBody
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitBuiltinFunction
parameter_list|(
name|Function
name|function
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|function
operator|.
name|getArgumentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|Expression
name|arg
init|=
name|function
operator|.
name|getArgument
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|arg
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitFunctionCall
parameter_list|(
name|FunctionCall
name|call
parameter_list|)
block|{
comment|// forward to the called function
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|call
operator|.
name|getArgumentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|call
operator|.
name|getArgument
argument_list|(
name|i
argument_list|)
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|call
operator|.
name|getFunction
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitForExpression
parameter_list|(
name|ForExpr
name|forExpr
parameter_list|)
block|{
name|forExpr
operator|.
name|getInputSequence
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|where
init|=
name|forExpr
operator|.
name|getWhereExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|where
operator|!=
literal|null
condition|)
block|{
name|where
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OrderSpec
name|orderSpec
range|:
name|forExpr
operator|.
name|getOrderSpecs
argument_list|()
control|)
block|{
name|orderSpec
operator|.
name|getSortExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GroupSpec
name|groupSpec
range|:
name|forExpr
operator|.
name|getGroupSpecs
argument_list|()
control|)
block|{
name|groupSpec
operator|.
name|getGroupExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|forExpr
operator|.
name|getReturnExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitLetExpression
parameter_list|(
name|LetExpr
name|letExpr
parameter_list|)
block|{
name|letExpr
operator|.
name|getInputSequence
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
specifier|final
name|Expression
name|where
init|=
name|letExpr
operator|.
name|getWhereExpression
argument_list|()
decl_stmt|;
if|if
condition|(
name|where
operator|!=
literal|null
condition|)
block|{
name|where
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|OrderSpec
name|orderSpec
range|:
name|letExpr
operator|.
name|getOrderSpecs
argument_list|()
control|)
block|{
name|orderSpec
operator|.
name|getSortExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|GroupSpec
name|groupSpec
range|:
name|letExpr
operator|.
name|getGroupSpecs
argument_list|()
control|)
block|{
name|groupSpec
operator|.
name|getGroupExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|letExpr
operator|.
name|getReturnExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitConditional
parameter_list|(
name|ConditionalExpression
name|conditional
parameter_list|)
block|{
name|conditional
operator|.
name|getTestExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|conditional
operator|.
name|getThenExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|conditional
operator|.
name|getElseExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitLocationStep
parameter_list|(
name|LocationStep
name|locationStep
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Predicate
argument_list|>
name|predicates
init|=
name|locationStep
operator|.
name|getPredicates
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Predicate
name|pred
range|:
name|predicates
control|)
block|{
name|pred
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|visitPredicate
parameter_list|(
name|Predicate
name|predicate
parameter_list|)
block|{
name|predicate
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitDocumentConstructor
parameter_list|(
name|DocumentConstructor
name|constructor
parameter_list|)
block|{
name|constructor
operator|.
name|getContent
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitElementConstructor
parameter_list|(
name|ElementConstructor
name|constructor
parameter_list|)
block|{
name|constructor
operator|.
name|getNameExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|constructor
operator|.
name|getAttributes
argument_list|()
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|AttributeConstructor
name|attrConstr
range|:
name|constructor
operator|.
name|getAttributes
argument_list|()
control|)
block|{
name|attrConstr
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|constructor
operator|.
name|getContent
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|constructor
operator|.
name|getContent
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|visitTextConstructor
parameter_list|(
name|DynamicTextConstructor
name|constructor
parameter_list|)
block|{
name|constructor
operator|.
name|getContent
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitAttribConstructor
parameter_list|(
name|AttributeConstructor
name|constructor
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|Object
argument_list|>
name|i
init|=
name|constructor
operator|.
name|contentIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Object
name|next
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|Expression
condition|)
block|{
operator|(
operator|(
name|Expression
operator|)
name|next
operator|)
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|void
name|visitAttribConstructor
parameter_list|(
name|DynamicAttributeConstructor
name|constructor
parameter_list|)
block|{
name|constructor
operator|.
name|getNameExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|constructor
operator|.
name|getContentExpr
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|constructor
operator|.
name|getContentExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|visitUnionExpr
parameter_list|(
name|Union
name|union
parameter_list|)
block|{
name|union
operator|.
name|left
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|union
operator|.
name|right
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|visitIntersectionExpr
parameter_list|(
name|Intersect
name|intersect
parameter_list|)
block|{
name|intersect
operator|.
name|left
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|intersect
operator|.
name|right
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitVariableDeclaration
parameter_list|(
name|VariableDeclaration
name|decl
parameter_list|)
block|{
name|decl
operator|.
name|getExpression
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|visitTryCatch
parameter_list|(
name|TryCatchExpression
name|tryCatch
parameter_list|)
block|{
name|tryCatch
operator|.
name|getTryTargetExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
for|for
control|(
name|TryCatchExpression
operator|.
name|CatchClause
name|clause
range|:
name|tryCatch
operator|.
name|getCatchClauses
argument_list|()
control|)
block|{
name|clause
operator|.
name|getCatchExpr
argument_list|()
operator|.
name|accept
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

