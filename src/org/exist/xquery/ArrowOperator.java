begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2017 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public  * License along with this library; if not, write to the Free Software  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Implements the XQuery 3.1 arrow operator.  *  * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|ArrowOperator
extends|extends
name|AbstractExpression
block|{
specifier|private
name|Expression
name|leftExpr
decl_stmt|;
specifier|private
name|FunctionCall
name|fcall
init|=
literal|null
decl_stmt|;
specifier|private
name|Expression
name|funcSpec
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Expression
argument_list|>
name|parameters
decl_stmt|;
specifier|private
name|AnalyzeContextInfo
name|cachedContextInfo
decl_stmt|;
specifier|public
name|ArrowOperator
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Expression
name|leftExpr
parameter_list|)
throws|throws
name|XPathException
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|leftExpr
operator|=
name|leftExpr
expr_stmt|;
block|}
specifier|public
name|void
name|setArrowFunction
parameter_list|(
specifier|final
name|String
name|fname
parameter_list|,
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|QName
name|name
init|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|fname
argument_list|,
name|context
operator|.
name|getDefaultFunctionNamespace
argument_list|()
argument_list|)
decl_stmt|;
name|this
operator|.
name|fcall
operator|=
name|NamedFunctionReference
operator|.
name|lookupFunction
argument_list|(
name|this
argument_list|,
name|context
argument_list|,
name|name
argument_list|,
name|params
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|params
expr_stmt|;
block|}
specifier|public
name|void
name|setArrowFunction
parameter_list|(
specifier|final
name|PathExpr
name|funcSpec
parameter_list|,
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|params
parameter_list|)
block|{
name|this
operator|.
name|funcSpec
operator|=
name|funcSpec
operator|.
name|simplify
argument_list|()
expr_stmt|;
name|this
operator|.
name|parameters
operator|=
name|params
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
specifier|final
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|getContext
argument_list|()
operator|.
name|getXQueryVersion
argument_list|()
operator|<
literal|31
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|EXXQDY0003
argument_list|,
literal|"arrow operator is not available before XQuery 3.1"
argument_list|)
throw|;
block|}
name|this
operator|.
name|cachedContextInfo
operator|=
name|contextInfo
expr_stmt|;
name|leftExpr
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
if|if
condition|(
name|fcall
operator|!=
literal|null
condition|)
block|{
name|fcall
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcSpec
operator|!=
literal|null
condition|)
block|{
name|funcSpec
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
specifier|final
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
block|{
name|contextSequence
operator|=
name|contextItem
operator|.
name|toSequence
argument_list|()
expr_stmt|;
block|}
name|contextSequence
operator|=
name|leftExpr
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
expr_stmt|;
specifier|final
name|FunctionReference
name|fref
decl_stmt|;
if|if
condition|(
name|fcall
operator|!=
literal|null
condition|)
block|{
name|fref
operator|=
operator|new
name|FunctionReference
argument_list|(
name|fcall
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|Sequence
name|funcSeq
init|=
name|funcSpec
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
if|if
condition|(
name|funcSeq
operator|.
name|getCardinality
argument_list|()
operator|!=
name|Cardinality
operator|.
name|EXACTLY_ONE
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Expected exactly one item for the function to be called, got "
operator|+
name|funcSeq
operator|.
name|getItemCount
argument_list|()
operator|+
literal|". Expression: "
operator|+
name|ExpressionDumper
operator|.
name|dump
argument_list|(
name|funcSpec
argument_list|)
argument_list|)
throw|;
block|}
specifier|final
name|Item
name|item0
init|=
name|funcSeq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|item0
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Type error: expected function, got "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|item0
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
name|fref
operator|=
operator|(
name|FunctionReference
operator|)
name|item0
expr_stmt|;
block|}
specifier|final
name|List
argument_list|<
name|Expression
argument_list|>
name|fparams
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|(
name|parameters
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
decl_stmt|;
name|fparams
operator|.
name|add
argument_list|(
operator|new
name|ContextParam
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|)
argument_list|)
expr_stmt|;
name|fparams
operator|.
name|addAll
argument_list|(
name|parameters
argument_list|)
expr_stmt|;
name|fref
operator|.
name|setArguments
argument_list|(
name|fparams
argument_list|)
expr_stmt|;
comment|// need to create a new AnalyzeContextInfo to avoid memory leak
comment|// cachedContextInfo will stay in memory
name|fref
operator|.
name|analyze
argument_list|(
operator|new
name|AnalyzeContextInfo
argument_list|(
name|cachedContextInfo
argument_list|)
argument_list|)
expr_stmt|;
comment|// Evaluate the function
specifier|final
name|Sequence
name|result
init|=
name|fref
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
name|fref
operator|.
name|resetState
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|fcall
operator|==
literal|null
condition|?
name|Type
operator|.
name|ITEM
else|:
name|fcall
operator|.
name|returnsType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
name|fcall
operator|==
literal|null
condition|?
name|super
operator|.
name|getCardinality
argument_list|()
else|:
name|fcall
operator|.
name|getCardinality
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
specifier|final
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|leftExpr
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|" => "
argument_list|)
expr_stmt|;
if|if
condition|(
name|fcall
operator|!=
literal|null
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
name|fcall
operator|.
name|getFunction
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|.
name|display
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|funcSpec
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|parameters
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
block|}
block|}
name|dumper
operator|.
name|display
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|leftExpr
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
if|if
condition|(
name|fcall
operator|!=
literal|null
condition|)
block|{
name|fcall
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|funcSpec
operator|!=
literal|null
condition|)
block|{
name|funcSpec
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Expression
name|param
range|:
name|parameters
control|)
block|{
name|param
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ContextParam
extends|extends
name|AbstractExpression
block|{
specifier|private
name|Sequence
name|sequence
decl_stmt|;
name|ContextParam
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|sequence
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|sequence
operator|=
name|sequence
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|sequence
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|sequence
operator|.
name|getItemType
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
block|}
block|}
block|}
end_class

end_unit

