begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-08 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|modules
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
operator|.
name|Entry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentBuilderReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|HtmlToXmlParser
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Utility Functions for XQuery Extension Modules  *   * @author Adam Retter<adam@exist-db.org>  * @serial 200805202059  * @version 1.1  */
end_comment

begin_class
specifier|public
class|class
name|ModuleUtils
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ModuleUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/** 	 * Takes a String of XML and Creates an XML Node from it using SAX in the 	 * context of the query 	 *  	 * @param context 	 *            The Context of the calling XQuery 	 * @param str 	 *            The String of XML 	 *  	 * @return The NodeValue of XML 	 */
specifier|public
specifier|static
name|NodeValue
name|stringToXML
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|String
name|str
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
try|try
init|(
specifier|final
name|Reader
name|reader
init|=
operator|new
name|StringReader
argument_list|(
name|str
argument_list|)
init|)
block|{
return|return
name|inputSourceToXML
argument_list|(
name|context
argument_list|,
operator|new
name|InputSource
argument_list|(
name|reader
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/** 	 * Takes an InputStream of XML and Creates an XML Node from it using SAX in the 	 * context of the query 	 *  	 * @param context 	 *            The Context of the calling XQuery 	 * @param is 	 *            The InputStream of XML 	 *  	 * @return The NodeValue of XML 	 */
specifier|public
specifier|static
name|NodeValue
name|streamToXML
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|InputStream
name|is
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
return|return
name|inputSourceToXML
argument_list|(
name|context
argument_list|,
operator|new
name|InputSource
argument_list|(
name|is
argument_list|)
argument_list|)
return|;
block|}
comment|/** 	 * Takes a Source of XML and Creates an XML Node from it using SAX in the 	 * context of the query 	 *  	 * @param context 	 *            The Context of the calling XQuery 	 * @param src 	 *            The Source of XML 	 *  	 * @return The NodeValue of XML 	 */
specifier|public
specifier|static
name|NodeValue
name|sourceToXML
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Source
name|src
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|src
operator|instanceof
name|SAXSource
operator|&&
operator|(
operator|(
name|SAXSource
operator|)
name|src
operator|)
operator|.
name|getXMLReader
argument_list|()
operator|!=
literal|null
condition|)
block|{
comment|//Handles the case where a SAXSource may already have an
comment|//XMLReader allocated, for example EXPath httpclient
comment|//where it wants to tidy html using TagSoup
return|return
name|inputSourceToXML
argument_list|(
name|context
argument_list|,
operator|(
name|SAXSource
operator|)
name|src
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|InputSource
name|inputSource
init|=
name|SAXSource
operator|.
name|sourceToInputSource
argument_list|(
name|src
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputSource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|src
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is unsupported."
argument_list|)
throw|;
block|}
return|return
name|inputSourceToXML
argument_list|(
name|context
argument_list|,
name|inputSource
argument_list|)
return|;
block|}
block|}
comment|/** 	 * Takes a InputSource of XML and Creates an XML Node from it using SAX in the 	 * context of the query 	 *  	 * @param context 	 *            The Context of the calling XQuery 	 * @param inputSource 	 *            The InputSource of XML 	 *  	 * @return The NodeValue of XML 	 */
specifier|public
specifier|static
name|NodeValue
name|inputSourceToXML
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|InputSource
name|inputSource
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|context
operator|.
name|pushDocumentContext
argument_list|()
expr_stmt|;
name|XMLReader
name|reader
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// try and construct xml document from input stream, we use eXist's
comment|// in-memory DOM implementation
name|reader
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
operator|.
name|borrowXMLReader
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Parsing XML response ..."
argument_list|)
expr_stmt|;
comment|// TODO : we should be able to cope with context.getBaseURI()
specifier|final
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
specifier|final
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setProperty
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|inputSource
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
name|receiver
operator|.
name|getDocument
argument_list|()
decl_stmt|;
comment|// return (NodeValue)doc.getDocumentElement();
return|return
operator|(
operator|(
name|NodeValue
operator|)
name|doc
operator|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|popDocumentContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getParserPool
argument_list|()
operator|.
name|returnXMLReader
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Takes a InputSource of XML and Creates an XML Node from it using SAX in the 	 * context of the query 	 *  	 * @param context 	 *            The Context of the calling XQuery 	 * @param src 	 *            The InputSource of XML 	 *  	 * @return The NodeValue of XML 	 */
specifier|private
specifier|static
name|NodeValue
name|inputSourceToXML
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|SAXSource
name|src
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
if|if
condition|(
name|src
operator|.
name|getXMLReader
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"No XML Reader specified."
argument_list|)
throw|;
block|}
specifier|final
name|XMLReader
name|reader
init|=
name|src
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|context
operator|.
name|pushDocumentContext
argument_list|()
expr_stmt|;
try|try
block|{
comment|// try and construct xml document from input stream, we use eXist's
comment|// in-memory DOM implementation
comment|// TODO : we should be able to cope with context.getBaseURI()
specifier|final
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
specifier|final
name|DocumentBuilderReceiver
name|receiver
init|=
operator|new
name|DocumentBuilderReceiver
argument_list|(
name|builder
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|src
operator|.
name|getInputSource
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
name|receiver
operator|.
name|getDocument
argument_list|()
decl_stmt|;
return|return
operator|(
operator|(
name|NodeValue
operator|)
name|doc
operator|)
return|;
block|}
finally|finally
block|{
name|context
operator|.
name|popDocumentContext
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * Takes a HTML InputSource and creates an XML representation of the HTML by 	 * tidying it (uses NekoHTML) 	 *  	 * @param context 	 *            The Context of the calling XQuery 	 * @param srcHtml 	 *            The Source for the HTML      * @param parserFeatures      *            The features to set on the Parser      * @param parserProperties      *            The properties to set on the Parser 	 *  	 * @return An in-memory Document representing the XML'ised HTML 	 */
specifier|public
specifier|static
name|DocumentImpl
name|htmlToXHtml
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|Source
name|srcHtml
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|parserFeatures
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parserProperties
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
specifier|final
name|InputSource
name|inputSource
init|=
name|SAXSource
operator|.
name|sourceToInputSource
argument_list|(
name|srcHtml
argument_list|)
decl_stmt|;
if|if
condition|(
name|inputSource
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|srcHtml
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" is unsupported."
argument_list|)
throw|;
block|}
return|return
name|htmlToXHtml
argument_list|(
name|context
argument_list|,
name|inputSource
argument_list|,
name|parserFeatures
argument_list|,
name|parserProperties
argument_list|)
return|;
block|}
comment|/**      * Takes a HTML InputSource and creates an XML representation of the HTML by      * tidying it      *      * @param context      *            The Context of the calling XQuery      * @param srcHtml      *            The InputSource for the HTML      * @param parserFeatures      *            The features to set on the Parser      * @param parserProperties      *            The properties to set on the Parser      *      * @return An in-memory Document representing the XML'ised HTML      */
specifier|public
specifier|static
name|DocumentImpl
name|htmlToXHtml
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|InputSource
name|srcHtml
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|parserFeatures
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parserProperties
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
comment|// use the configures HTML parser to parse the HTML content to XML
specifier|final
name|Optional
argument_list|<
name|Either
argument_list|<
name|Throwable
argument_list|,
name|XMLReader
argument_list|>
argument_list|>
name|maybeReaderInst
init|=
name|HtmlToXmlParser
operator|.
name|getHtmlToXmlParser
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getConfiguration
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|maybeReaderInst
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|Either
argument_list|<
name|Throwable
argument_list|,
name|XMLReader
argument_list|>
name|readerInst
init|=
name|maybeReaderInst
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|readerInst
operator|.
name|isLeft
argument_list|()
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Unable to parse HTML to XML please ensure the parser is configured in conf.xml and is present on the classpath"
decl_stmt|;
specifier|final
name|Throwable
name|t
init|=
name|readerInst
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|error
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|msg
argument_list|,
name|t
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|XMLReader
name|reader
init|=
name|readerInst
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
decl_stmt|;
if|if
condition|(
name|parserFeatures
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|parserFeature
range|:
name|parserFeatures
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|reader
operator|.
name|setFeature
argument_list|(
name|parserFeature
operator|.
name|getKey
argument_list|()
argument_list|,
name|parserFeature
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|parserProperties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parserProperty
range|:
name|parserProperties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|reader
operator|.
name|setProperty
argument_list|(
name|parserProperty
operator|.
name|getKey
argument_list|()
argument_list|,
name|parserProperty
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Converting HTML to XML using: "
operator|+
name|reader
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|()
decl_stmt|;
comment|// allow multiple attributes of the same name attached to the same element
comment|// to enhance resilience against bad HTML. The last attribute value wins.
name|adapter
operator|.
name|setReplaceAttributeFlag
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|reader
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|reader
operator|.
name|parse
argument_list|(
name|srcHtml
argument_list|)
expr_stmt|;
specifier|final
name|Document
name|doc
init|=
name|adapter
operator|.
name|getDocument
argument_list|()
decl_stmt|;
comment|// we use eXist's in-memory DOM implementation
specifier|final
name|DocumentImpl
name|memtreeDoc
init|=
operator|(
name|DocumentImpl
operator|)
name|doc
decl_stmt|;
name|memtreeDoc
operator|.
name|setContext
argument_list|(
name|context
argument_list|)
expr_stmt|;
return|return
name|memtreeDoc
return|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"There is no HTML to XML parser configured in conf.xml"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
class|class
name|ContextMapLocks
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
name|locks
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|synchronized
name|ReentrantReadWriteLock
name|getLock
parameter_list|(
name|String
name|contextMapName
parameter_list|)
block|{
name|ReentrantReadWriteLock
name|lock
init|=
name|locks
operator|.
name|get
argument_list|(
name|contextMapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|lock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
name|locks
operator|.
name|put
argument_list|(
name|contextMapName
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
specifier|public
name|ReadLock
name|getReadLock
parameter_list|(
name|String
name|contextMapName
parameter_list|)
block|{
return|return
name|getLock
argument_list|(
name|contextMapName
argument_list|)
operator|.
name|readLock
argument_list|()
return|;
block|}
specifier|public
name|WriteLock
name|getWriteLock
parameter_list|(
name|String
name|contextMapName
parameter_list|)
block|{
return|return
name|getLock
argument_list|(
name|contextMapName
argument_list|)
operator|.
name|writeLock
argument_list|()
return|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|ContextMapLocks
name|contextMapLocks
init|=
operator|new
name|ContextMapLocks
argument_list|()
decl_stmt|;
comment|/**      * Retrieves a previously stored Object from the Context of an XQuery.      *      * @param   context         The Context of the XQuery containing the Object      * @param   contextMapName  DOCUMENT ME!      * @param   objectUID       The UID of the Object to retrieve from the Context of the XQuery      *      * @return  DOCUMENT ME!      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|T
name|retrieveObjectFromContextMap
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|String
name|contextMapName
parameter_list|,
name|long
name|objectUID
parameter_list|)
block|{
name|contextMapLocks
operator|.
name|getReadLock
argument_list|(
name|contextMapName
argument_list|)
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// get the existing object map from the context
specifier|final
name|Map
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|map
init|=
operator|(
name|HashMap
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|contextMapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
comment|// get the connection
return|return
name|map
operator|.
name|get
argument_list|(
name|objectUID
argument_list|)
return|;
block|}
finally|finally
block|{
name|contextMapLocks
operator|.
name|getReadLock
argument_list|(
name|contextMapName
argument_list|)
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|void
name|modifyContextMap
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|String
name|contextMapName
parameter_list|,
name|ContextMapModifier
argument_list|<
name|T
argument_list|>
name|modifier
parameter_list|)
block|{
name|contextMapLocks
operator|.
name|getWriteLock
argument_list|(
name|contextMapName
argument_list|)
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// get the existing map from the context
name|Map
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|contextMapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
comment|//create a new map if it doesnt exist
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
argument_list|()
expr_stmt|;
name|context
operator|.
name|setXQueryContextVar
argument_list|(
name|contextMapName
argument_list|,
name|map
argument_list|)
expr_stmt|;
block|}
comment|//modify the map
name|modifier
operator|.
name|modify
argument_list|(
name|map
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|contextMapLocks
operator|.
name|getWriteLock
argument_list|(
name|contextMapName
argument_list|)
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
interface|interface
name|ContextMapModifier
parameter_list|<
name|T
parameter_list|>
block|{
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|map
parameter_list|)
function_decl|;
block|}
specifier|public
specifier|static
specifier|abstract
class|class
name|ContextMapEntryModifier
parameter_list|<
name|T
parameter_list|>
implements|implements
name|ContextMapModifier
argument_list|<
name|T
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Map
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|map
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Entry
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|entry
range|:
name|map
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|modify
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|abstract
name|void
name|modify
parameter_list|(
name|Entry
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|entry
parameter_list|)
function_decl|;
block|}
comment|/**      * Stores an Object in the Context of an XQuery.      *      * @param   context         The Context of the XQuery to store the Object in      * @param   contextMapName  The name of the context map      * @param   o               The Object to store      *      * @return  A unique ID representing the Object      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|long
name|storeObjectInContextMap
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|String
name|contextMapName
parameter_list|,
name|T
name|o
parameter_list|)
block|{
name|contextMapLocks
operator|.
name|getWriteLock
argument_list|(
name|contextMapName
argument_list|)
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
comment|// get the existing map from the context
name|Map
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
name|map
init|=
operator|(
name|Map
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
operator|)
name|context
operator|.
name|getXQueryContextVar
argument_list|(
name|contextMapName
argument_list|)
decl_stmt|;
if|if
condition|(
name|map
operator|==
literal|null
condition|)
block|{
comment|// if there is no map, create a new one
name|map
operator|=
operator|new
name|HashMap
argument_list|<
name|Long
argument_list|,
name|T
argument_list|>
argument_list|()
expr_stmt|;
block|}
comment|// get an id for the map
name|long
name|uid
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|uid
operator|==
literal|0
operator|||
name|map
operator|.
name|keySet
argument_list|()
operator|.
name|contains
argument_list|(
name|uid
argument_list|)
condition|)
block|{
name|uid
operator|=
name|getUID
argument_list|()
expr_stmt|;
block|}
comment|// place the object in the map
name|map
operator|.
name|put
argument_list|(
name|uid
argument_list|,
name|o
argument_list|)
expr_stmt|;
comment|// store the map back in the context
name|context
operator|.
name|setXQueryContextVar
argument_list|(
name|contextMapName
argument_list|,
name|map
argument_list|)
expr_stmt|;
return|return
operator|(
name|uid
operator|)
return|;
block|}
finally|finally
block|{
name|contextMapLocks
operator|.
name|getWriteLock
argument_list|(
name|contextMapName
argument_list|)
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|Random
name|random
init|=
operator|new
name|Random
argument_list|()
decl_stmt|;
specifier|private
specifier|static
name|long
name|getUID
parameter_list|()
block|{
specifier|final
name|BigInteger
name|bi
init|=
operator|new
name|BigInteger
argument_list|(
literal|64
argument_list|,
name|random
argument_list|)
decl_stmt|;
return|return
name|bi
operator|.
name|longValue
argument_list|()
return|;
block|}
block|}
end_class

end_unit

