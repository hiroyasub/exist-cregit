begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2004-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|UpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Subclass of {@link org.exist.xquery.XQueryContext} for  * imported modules.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|ModuleContext
extends|extends
name|XQueryContext
block|{
specifier|private
specifier|final
name|XQueryContext
name|parentContext
decl_stmt|;
specifier|private
name|String
name|modulePrefix
decl_stmt|;
specifier|private
name|String
name|moduleNamespace
decl_stmt|;
specifier|private
name|boolean
name|initializing
init|=
literal|true
decl_stmt|;
comment|/** 	 * @param parentContext 	 */
specifier|public
name|ModuleContext
parameter_list|(
name|XQueryContext
name|parentContext
parameter_list|,
name|String
name|modulePrefix
parameter_list|,
name|String
name|moduleNamespace
parameter_list|)
block|{
name|super
argument_list|(
name|parentContext
operator|.
name|getAccessContext
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|moduleNamespace
operator|=
name|moduleNamespace
expr_stmt|;
name|this
operator|.
name|modulePrefix
operator|=
name|modulePrefix
expr_stmt|;
name|this
operator|.
name|parentContext
operator|=
name|parentContext
expr_stmt|;
name|this
operator|.
name|broker
operator|=
name|parentContext
operator|.
name|broker
expr_stmt|;
name|baseURI
operator|=
name|parentContext
operator|.
name|baseURI
expr_stmt|;
name|moduleLoadPath
operator|=
name|parentContext
operator|.
name|moduleLoadPath
expr_stmt|;
name|loadDefaults
argument_list|(
name|broker
operator|.
name|getConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|initializing
operator|=
literal|false
expr_stmt|;
block|}
specifier|public
name|XQueryContext
name|copyContext
parameter_list|()
block|{
name|ModuleContext
name|ctx
init|=
operator|new
name|ModuleContext
argument_list|(
name|parentContext
argument_list|,
name|modulePrefix
argument_list|,
name|moduleNamespace
argument_list|)
decl_stmt|;
name|copyFields
argument_list|(
name|ctx
argument_list|)
expr_stmt|;
try|try
block|{
name|ctx
operator|.
name|declareNamespace
argument_list|(
name|modulePrefix
argument_list|,
name|moduleNamespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
return|return
name|ctx
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.XQueryContext#getStaticallyKnownDocuments() 	 */
specifier|public
name|DocumentSet
name|getStaticallyKnownDocuments
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|parentContext
operator|.
name|getStaticallyKnownDocuments
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.XQueryContext#getModule(java.lang.String) 	 */
specifier|public
name|Module
name|getModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
block|{
name|Module
name|module
init|=
name|super
operator|.
name|getModule
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|==
literal|null
condition|)
name|module
operator|=
name|parentContext
operator|.
name|getModule
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
return|return
name|module
return|;
block|}
comment|/**      * Overwritten method: the module will be loaded by the parent context, but      * we need to declare its namespace in the module context.       */
specifier|public
name|Module
name|loadBuiltInModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|moduleClass
parameter_list|)
block|{
name|Module
name|module
init|=
name|getModule
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|module
operator|==
literal|null
condition|)
name|module
operator|=
name|initBuiltInModule
argument_list|(
name|namespaceURI
argument_list|,
name|moduleClass
argument_list|)
expr_stmt|;
if|if
condition|(
name|module
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|defaultPrefix
init|=
name|module
operator|.
name|getDefaultPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|defaultPrefix
argument_list|)
condition|)
name|declareNamespace
argument_list|(
name|defaultPrefix
argument_list|,
name|module
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"error while loading builtin module class "
operator|+
name|moduleClass
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|module
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.XQueryContext#getModules() 	 */
specifier|public
name|Iterator
name|getModules
parameter_list|()
block|{
return|return
name|parentContext
operator|.
name|getModules
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.XQueryContext#getWatchDog() 	 */
specifier|public
name|XQueryWatchDog
name|getWatchDog
parameter_list|()
block|{
return|return
name|parentContext
operator|.
name|getWatchDog
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.XQueryContext#getBaseURI() 	 */
specifier|public
name|AnyURIValue
name|getBaseURI
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|parentContext
operator|.
name|getBaseURI
argument_list|()
return|;
block|}
specifier|public
name|void
name|setBaseURI
parameter_list|(
name|AnyURIValue
name|uri
parameter_list|)
block|{
name|parentContext
operator|.
name|setBaseURI
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delegate to parent context      *       * @see org.exist.xquery.XQueryContext#setXQueryContextVar(String, Object)      */
specifier|public
name|void
name|setXQueryContextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|XQvar
parameter_list|)
block|{
name|parentContext
operator|.
name|setXQueryContextVar
argument_list|(
name|name
argument_list|,
name|XQvar
argument_list|)
expr_stmt|;
block|}
comment|/**      * Delegate to parent context      *       * @see org.exist.xquery.XQueryContext#getXQueryContextVar(String)      */
specifier|public
name|Object
name|getXQueryContextVar
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
operator|(
name|parentContext
operator|.
name|getXQueryContextVar
argument_list|(
name|name
argument_list|)
operator|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.XQueryContext#getBroker()      */
specifier|public
name|DBBroker
name|getBroker
parameter_list|()
block|{
return|return
name|parentContext
operator|.
name|getBroker
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.XQueryContext#getDocumentBuilder() 	 */
specifier|public
name|MemTreeBuilder
name|getDocumentBuilder
parameter_list|()
block|{
return|return
name|parentContext
operator|.
name|getDocumentBuilder
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.XQueryContext#pushDocumentContext() 	 */
specifier|public
name|void
name|pushDocumentContext
parameter_list|()
block|{
name|parentContext
operator|.
name|pushDocumentContext
argument_list|()
expr_stmt|;
block|}
specifier|public
name|LocalVariable
name|markLocalVariables
parameter_list|(
name|boolean
name|newContext
parameter_list|)
block|{
return|return
name|parentContext
operator|.
name|markLocalVariables
argument_list|(
name|newContext
argument_list|)
return|;
block|}
specifier|public
name|void
name|popLocalVariables
parameter_list|(
name|LocalVariable
name|var
parameter_list|)
block|{
name|parentContext
operator|.
name|popLocalVariables
argument_list|(
name|var
argument_list|)
expr_stmt|;
block|}
specifier|public
name|LocalVariable
name|declareVariableBinding
parameter_list|(
name|LocalVariable
name|var
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|parentContext
operator|.
name|declareVariableBinding
argument_list|(
name|var
argument_list|)
return|;
block|}
specifier|protected
name|Variable
name|resolveLocalVariable
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|parentContext
operator|.
name|resolveLocalVariable
argument_list|(
name|qname
argument_list|)
return|;
block|}
specifier|public
name|int
name|getCurrentStackSize
parameter_list|()
block|{
return|return
name|parentContext
operator|.
name|getCurrentStackSize
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.XQueryContext#popDocumentContext() 	 */
specifier|public
name|void
name|popDocumentContext
parameter_list|()
block|{
name|parentContext
operator|.
name|popDocumentContext
argument_list|()
expr_stmt|;
block|}
comment|/**      * First checks the parent context for in-scope namespaces,      * then the module's static context.      *      * @param prefix the prefix to look up      * @return the namespace currently mapped to that prefix      */
specifier|public
name|String
name|getURIForPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
name|String
name|uri
init|=
name|getInScopeNamespace
argument_list|(
name|prefix
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
return|return
name|uri
return|;
comment|//TODO : test NS inheritance
name|uri
operator|=
name|getInheritedNamespace
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
return|return
name|uri
return|;
comment|// Check global declarations
return|return
operator|(
name|String
operator|)
name|staticNamespaces
operator|.
name|get
argument_list|(
name|prefix
argument_list|)
return|;
block|}
comment|/**      * First checks the parent context for in-scope namespaces,      * then the module's static context.      *      * @param uri the URI to look up      * @return a prefix for the URI      */
specifier|public
name|String
name|getPrefixForURI
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|String
name|prefix
init|=
name|getInScopePrefix
argument_list|(
name|uri
argument_list|)
decl_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
return|return
name|prefix
return|;
comment|//TODO : test the NS inheritance
name|prefix
operator|=
name|getInheritedPrefix
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|prefix
operator|!=
literal|null
condition|)
return|return
name|prefix
return|;
return|return
operator|(
name|String
operator|)
name|staticPrefixes
operator|.
name|get
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInScopeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|parentContext
operator|.
name|getInScopeNamespace
argument_list|(
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInScopePrefix
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|parentContext
operator|.
name|getInScopePrefix
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInheritedNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
block|{
return|return
name|parentContext
operator|.
name|getInheritedNamespace
argument_list|(
name|prefix
argument_list|)
return|;
block|}
specifier|public
name|String
name|getInheritedPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
return|return
name|parentContext
operator|.
name|getInheritedPrefix
argument_list|(
name|uri
argument_list|)
return|;
block|}
specifier|public
name|void
name|declareInScopeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
block|{
name|parentContext
operator|.
name|declareInScopeNamespace
argument_list|(
name|prefix
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|pushInScopeNamespaces
parameter_list|()
block|{
name|parentContext
operator|.
name|pushInScopeNamespaces
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|popInScopeNamespaces
parameter_list|()
block|{
name|parentContext
operator|.
name|popInScopeNamespaces
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|registerUpdateListener
parameter_list|(
name|UpdateListener
name|listener
parameter_list|)
block|{
name|parentContext
operator|.
name|registerUpdateListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|clearUpdateListeners
parameter_list|()
block|{
comment|// will be cleared by the parent context
block|}
block|}
end_class

end_unit

