begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *   *  Copyright (C) 2000-03, Wolfgang M. Meier (meier@ifs. tu- darmstadt. de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ContextItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|VirtualNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ElementValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|Indexable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * A general XQuery/XPath2 comparison expression.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|GeneralComparison
extends|extends
name|BinaryOp
implements|implements
name|Optimizable
implements|,
name|IndexUseReporter
block|{
comment|/** 	 * The type of operator used for the comparison, i.e. =, !=,&lt;,&gt; ... 	 * One of the constants declared in class {@link Constants}. 	 */
specifier|protected
name|int
name|relation
init|=
name|Constants
operator|.
name|EQ
decl_stmt|;
comment|/** 	 * Truncation flags: when comparing with a string value, the search 	 * string may be truncated with a single * wildcard. See the constants declared 	 * in class {@link Constants}. 	 *  	 * The standard functions starts-with, ends-with and contains are 	 * transformed into a general comparison with wildcard. Hence the need 	 * to consider wildcards here. 	 */
specifier|protected
name|int
name|truncation
init|=
name|Constants
operator|.
name|TRUNC_NONE
decl_stmt|;
comment|/** 	 * The class might cache the entire results of a previous execution. 	 */
specifier|protected
name|CachedResult
name|cached
init|=
literal|null
decl_stmt|;
comment|/** 	 * Extra argument (to standard functions starts-with/contains etc.) 	 * to indicate the collation to be used for string comparisons. 	 */
specifier|protected
name|Expression
name|collationArg
init|=
literal|null
decl_stmt|;
comment|/** 	 * Set to true if this expression is called within the where clause 	 * of a FLWOR expression. 	 */
specifier|protected
name|boolean
name|inWhereClause
init|=
literal|false
decl_stmt|;
specifier|protected
name|boolean
name|invalidNodeEvaluation
init|=
literal|false
decl_stmt|;
specifier|protected
name|int
name|rightOpDeps
decl_stmt|;
specifier|private
name|boolean
name|hasUsedIndex
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|actualReturnType
init|=
name|Type
operator|.
name|ITEM
decl_stmt|;
specifier|private
name|LocationStep
name|contextStep
init|=
literal|null
decl_stmt|;
specifier|private
name|QName
name|contextQName
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|optimizeSelf
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|axis
init|=
name|Constants
operator|.
name|UNKNOWN_AXIS
decl_stmt|;
specifier|private
name|NodeSet
name|preselectResult
init|=
literal|null
decl_stmt|;
specifier|public
name|GeneralComparison
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|relation
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
name|relation
argument_list|,
name|Constants
operator|.
name|TRUNC_NONE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|GeneralComparison
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|relation
parameter_list|,
name|int
name|truncation
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|relation
operator|=
name|relation
expr_stmt|;
block|}
specifier|public
name|GeneralComparison
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|,
name|int
name|relation
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|relation
argument_list|,
name|Constants
operator|.
name|TRUNC_NONE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|GeneralComparison
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|,
name|int
name|relation
parameter_list|,
name|int
name|truncation
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|boolean
name|didLeftSimplification
init|=
literal|false
decl_stmt|;
name|boolean
name|didRightSimplification
init|=
literal|false
decl_stmt|;
name|this
operator|.
name|relation
operator|=
name|relation
expr_stmt|;
name|this
operator|.
name|truncation
operator|=
name|truncation
expr_stmt|;
if|if
condition|(
name|left
operator|instanceof
name|PathExpr
operator|&&
operator|(
operator|(
name|PathExpr
operator|)
name|left
operator|)
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
name|left
operator|=
operator|(
operator|(
name|PathExpr
operator|)
name|left
operator|)
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|didLeftSimplification
operator|=
literal|true
expr_stmt|;
block|}
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
operator|instanceof
name|PathExpr
operator|&&
operator|(
operator|(
name|PathExpr
operator|)
name|right
operator|)
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
name|right
operator|=
operator|(
operator|(
name|PathExpr
operator|)
name|right
operator|)
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|didRightSimplification
operator|=
literal|true
expr_stmt|;
block|}
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
comment|//TODO : should we also use simplify() here ? -pb
if|if
condition|(
name|didLeftSimplification
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Marked left argument as a child expression"
argument_list|)
expr_stmt|;
if|if
condition|(
name|didRightSimplification
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Marked right argument as a child expression"
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.BinaryOp#analyze(org.exist.xquery.AnalyzeContextInfo)      */
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|contextInfo
operator|.
name|addFlag
argument_list|(
name|NEED_INDEX_INFO
argument_list|)
expr_stmt|;
name|contextInfo
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|super
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
name|inWhereClause
operator|=
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|IN_WHERE_CLAUSE
operator|)
operator|!=
literal|0
expr_stmt|;
comment|//Ugly workaround for the polysemy of "." which is expanded as self::node() even when it is not relevant
comment|// (1)[.= 1] works...
name|invalidNodeEvaluation
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|contextInfo
operator|.
name|getStaticType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
name|invalidNodeEvaluation
operator|=
name|getLeft
argument_list|()
operator|instanceof
name|LocationStep
operator|&&
operator|(
operator|(
name|LocationStep
operator|)
name|getLeft
argument_list|()
operator|)
operator|.
name|axis
operator|==
name|Constants
operator|.
name|SELF_AXIS
expr_stmt|;
comment|//Unfortunately, we lose the possibility to make a nodeset optimization
comment|//(we still don't know anything about the contextSequence that will be processed)
comment|// check if the right-hand operand is a simple cast expression
comment|// if yes, use the dependencies of the casted expression to compute
comment|// optimizations
name|rightOpDeps
operator|=
name|getRight
argument_list|()
operator|.
name|getDependencies
argument_list|()
expr_stmt|;
name|getRight
argument_list|()
operator|.
name|accept
argument_list|(
operator|new
name|BasicExpressionVisitor
argument_list|()
block|{
specifier|public
name|void
name|visitCastExpr
parameter_list|(
name|CastExpression
name|expression
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Right operand is a cast expression"
argument_list|)
expr_stmt|;
name|rightOpDeps
operator|=
name|expression
operator|.
name|getInnerExpression
argument_list|()
operator|.
name|getDependencies
argument_list|()
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextInfo
operator|.
name|getContextStep
argument_list|()
operator|!=
literal|null
operator|&&
name|contextInfo
operator|.
name|getContextStep
argument_list|()
operator|instanceof
name|LocationStep
condition|)
block|{
operator|(
operator|(
name|LocationStep
operator|)
name|contextInfo
operator|.
name|getContextStep
argument_list|()
operator|)
operator|.
name|setUseDirectAttrSelect
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|contextInfo
operator|.
name|removeFlag
argument_list|(
name|NEED_INDEX_INFO
argument_list|)
expr_stmt|;
name|List
name|steps
init|=
name|BasicExpressionVisitor
operator|.
name|findLocationSteps
argument_list|(
name|getLeft
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|steps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LocationStep
name|firstStep
init|=
operator|(
name|LocationStep
operator|)
name|steps
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|LocationStep
name|lastStep
init|=
operator|(
name|LocationStep
operator|)
name|steps
operator|.
name|get
argument_list|(
name|steps
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|steps
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
name|firstStep
operator|.
name|getAxis
argument_list|()
operator|==
name|Constants
operator|.
name|SELF_AXIS
condition|)
block|{
name|Expression
name|outerExpr
init|=
name|contextInfo
operator|.
name|getContextStep
argument_list|()
decl_stmt|;
if|if
condition|(
name|outerExpr
operator|!=
literal|null
operator|&&
name|outerExpr
operator|instanceof
name|LocationStep
condition|)
block|{
name|LocationStep
name|outerStep
init|=
operator|(
name|LocationStep
operator|)
name|outerExpr
decl_stmt|;
name|NodeTest
name|test
init|=
name|outerStep
operator|.
name|getTest
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|&&
name|test
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|contextQName
operator|=
operator|new
name|QName
argument_list|(
name|test
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|outerStep
operator|.
name|getAxis
argument_list|()
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
operator|||
name|outerStep
operator|.
name|getAxis
argument_list|()
operator|==
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
condition|)
name|contextQName
operator|.
name|setNameType
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|contextStep
operator|=
name|firstStep
expr_stmt|;
name|axis
operator|=
name|outerStep
operator|.
name|getAxis
argument_list|()
expr_stmt|;
name|optimizeSelf
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|NodeTest
name|test
init|=
name|lastStep
operator|.
name|getTest
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|test
operator|.
name|isWildcardTest
argument_list|()
operator|&&
name|test
operator|.
name|getName
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|contextQName
operator|=
operator|new
name|QName
argument_list|(
name|test
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastStep
operator|.
name|getAxis
argument_list|()
operator|==
name|Constants
operator|.
name|ATTRIBUTE_AXIS
operator|||
name|lastStep
operator|.
name|getAxis
argument_list|()
operator|==
name|Constants
operator|.
name|DESCENDANT_ATTRIBUTE_AXIS
condition|)
name|contextQName
operator|.
name|setNameType
argument_list|(
name|ElementValue
operator|.
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|axis
operator|=
name|firstStep
operator|.
name|getAxis
argument_list|()
expr_stmt|;
name|contextStep
operator|=
name|lastStep
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|canOptimize
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|)
block|{
if|if
condition|(
name|contextQName
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|Optimize
operator|.
name|getQNameIndexType
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|,
name|contextQName
argument_list|)
operator|!=
name|Type
operator|.
name|ITEM
return|;
block|}
specifier|public
name|boolean
name|optimizeOnSelf
parameter_list|()
block|{
return|return
name|optimizeSelf
return|;
block|}
specifier|public
name|int
name|getOptimizeAxis
parameter_list|()
block|{
return|return
name|axis
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.BinaryOp#returnsType() 	 */
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
if|if
condition|(
name|inPredicate
operator|&&
operator|(
operator|!
name|Dependency
operator|.
name|dependsOn
argument_list|(
name|this
argument_list|,
name|Dependency
operator|.
name|CONTEXT_ITEM
argument_list|)
operator|)
condition|)
block|{
return|return
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
return|;
block|}
comment|// In all other cases, we return boolean
return|return
name|Type
operator|.
name|BOOLEAN
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.AbstractExpression#getDependencies() 	 */
specifier|public
name|int
name|getDependencies
parameter_list|()
block|{
comment|// left expression returns node set
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
operator|&&
comment|//	and does not depend on the context item
operator|!
name|Dependency
operator|.
name|dependsOn
argument_list|(
name|getLeft
argument_list|()
argument_list|,
name|Dependency
operator|.
name|CONTEXT_ITEM
argument_list|)
operator|&&
operator|(
operator|!
name|inWhereClause
operator|||
operator|!
name|Dependency
operator|.
name|dependsOn
argument_list|(
name|getLeft
argument_list|()
argument_list|,
name|Dependency
operator|.
name|CONTEXT_VARS
argument_list|)
operator|)
condition|)
block|{
return|return
name|Dependency
operator|.
name|CONTEXT_SET
return|;
block|}
else|else
block|{
return|return
name|Dependency
operator|.
name|CONTEXT_SET
operator|+
name|Dependency
operator|.
name|CONTEXT_ITEM
return|;
block|}
block|}
specifier|public
name|int
name|getRelation
parameter_list|()
block|{
return|return
name|this
operator|.
name|relation
return|;
block|}
specifier|public
name|NodeSet
name|preSelect
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|boolean
name|useContext
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// the expression can be called multiple times, so we need to clear the previous preselectResult
name|preselectResult
operator|=
literal|null
expr_stmt|;
name|int
name|indexType
init|=
name|Optimize
operator|.
name|getQNameIndexType
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|,
name|contextQName
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using QName index on type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|indexType
argument_list|)
argument_list|)
expr_stmt|;
name|Sequence
name|rightSeq
init|=
name|getRight
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|itRightSeq
init|=
name|rightSeq
operator|.
name|iterate
argument_list|()
init|;
name|itRightSeq
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|//Get the index key
name|Item
name|key
init|=
name|itRightSeq
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
decl_stmt|;
comment|//if key has truncation, convert it to string
if|if
condition|(
name|truncation
operator|!=
name|Constants
operator|.
name|TRUNC_NONE
condition|)
block|{
if|if
condition|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Truncated key. Converted from "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to xs:string"
argument_list|)
expr_stmt|;
comment|//truncation is only possible on strings
name|key
operator|=
name|key
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else if key is not the same type as the index
comment|//TODO : use Type.isSubType() ??? -pb
if|else if
condition|(
name|key
operator|.
name|getType
argument_list|()
operator|!=
name|indexType
condition|)
block|{
comment|//try to convert the key to the index type
try|try
block|{
name|key
operator|=
name|key
operator|.
name|convertTo
argument_list|(
name|indexType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|xpe
parameter_list|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot convert key: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to required index type: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|indexType
argument_list|)
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
literal|"Cannot convert key to required index type"
argument_list|)
throw|;
block|}
block|}
comment|// If key implements org.exist.storage.Indexable, we can use the index
if|if
condition|(
name|key
operator|instanceof
name|Indexable
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using QName range index for key: "
operator|+
name|key
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|NodeSet
name|temp
decl_stmt|;
name|NodeSet
name|contextSet
init|=
name|useContext
condition|?
name|contextSequence
operator|.
name|toNodeSet
argument_list|()
else|:
literal|null
decl_stmt|;
if|if
condition|(
name|truncation
operator|==
name|Constants
operator|.
name|TRUNC_NONE
condition|)
block|{
name|temp
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getValueIndex
argument_list|()
operator|.
name|find
argument_list|(
name|relation
argument_list|,
name|contextSequence
operator|.
name|getDocumentSet
argument_list|()
argument_list|,
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
name|contextQName
argument_list|,
operator|(
name|Indexable
operator|)
name|key
argument_list|)
expr_stmt|;
name|hasUsedIndex
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
name|temp
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getValueIndex
argument_list|()
operator|.
name|match
argument_list|(
name|contextSequence
operator|.
name|getDocumentSet
argument_list|()
argument_list|,
name|contextSet
argument_list|,
name|NodeSet
operator|.
name|DESCENDANT
argument_list|,
name|getRegexp
argument_list|(
name|key
operator|.
name|getStringValue
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|contextQName
argument_list|,
name|DBBroker
operator|.
name|MATCH_REGEXP
argument_list|)
expr_stmt|;
name|hasUsedIndex
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
literal|"Error during index lookup: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|preselectResult
operator|==
literal|null
condition|)
name|preselectResult
operator|=
name|temp
expr_stmt|;
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Union: "
operator|+
name|preselectResult
operator|.
name|getLength
argument_list|()
operator|+
literal|" -> "
operator|+
name|temp
operator|.
name|getLength
argument_list|()
argument_list|)
expr_stmt|;
name|preselectResult
operator|=
name|preselectResult
operator|.
name|union
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|preselectResult
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.Expression#eval(org.exist.xquery.StaticContext, org.exist.dom.DocumentSet, org.exist.xquery.value.Sequence, org.exist.xquery.value.Item) 	 */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT ITEM"
argument_list|,
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Sequence
name|result
decl_stmt|;
comment|// if the context sequence hasn't changed we can return a cached result
if|if
condition|(
name|cached
operator|!=
literal|null
operator|&&
name|cached
operator|.
name|isValid
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using cached results"
argument_list|)
expr_stmt|;
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Returned cached result"
argument_list|)
expr_stmt|;
name|result
operator|=
name|cached
operator|.
name|getResult
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// if we were optimizing and the preselect did not return anything,
comment|// we won't have any matches and can return
if|if
condition|(
name|preselectResult
operator|!=
literal|null
operator|&&
name|preselectResult
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
expr_stmt|;
else|else
block|{
if|if
condition|(
name|contextStep
operator|==
literal|null
operator|||
name|preselectResult
operator|==
literal|null
condition|)
block|{
comment|/* 		             * If we are inside a predicate and one of the arguments is a node set, 		             * we try to speed up the query by returning nodes from the context set. 		             * This works only inside a predicate. The node set will always be the left 		             * operand. 		             */
if|if
condition|(
name|inPredicate
operator|&&
operator|!
name|invalidNodeEvaluation
operator|&&
operator|!
name|Dependency
operator|.
name|dependsOn
argument_list|(
name|this
argument_list|,
name|Dependency
operator|.
name|CONTEXT_ITEM
argument_list|)
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
operator|&&
operator|(
name|contextSequence
operator|==
literal|null
operator|||
name|contextSequence
operator|.
name|isPersistentSet
argument_list|()
operator|)
condition|)
block|{
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
name|contextSequence
operator|=
name|contextItem
operator|.
name|toSequence
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|Dependency
operator|.
name|dependsOn
argument_list|(
name|rightOpDeps
argument_list|,
name|Dependency
operator|.
name|CONTEXT_ITEM
argument_list|)
operator|)
condition|)
block|{
name|result
operator|=
name|quickNodeSetCompare
argument_list|(
name|contextSequence
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|NodeSet
name|nodes
init|=
operator|(
name|NodeSet
operator|)
name|getLeft
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
name|result
operator|=
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|result
operator|=
name|genericCompare
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|contextStep
operator|.
name|setPreloadedData
argument_list|(
name|preselectResult
operator|.
name|getDocumentSet
argument_list|()
argument_list|,
name|preselectResult
argument_list|)
expr_stmt|;
name|result
operator|=
name|getLeft
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
operator|.
name|toNodeSet
argument_list|()
expr_stmt|;
block|}
block|}
comment|// can this result be cached? Don't cache if the result depends on local variables.
name|boolean
name|canCache
init|=
name|contextSequence
operator|!=
literal|null
operator|&&
name|contextSequence
operator|.
name|isCacheable
argument_list|()
operator|&&
operator|!
name|Dependency
operator|.
name|dependsOn
argument_list|(
name|getLeft
argument_list|()
argument_list|,
name|Dependency
operator|.
name|CONTEXT_ITEM
argument_list|)
operator|&&
operator|!
name|Dependency
operator|.
name|dependsOn
argument_list|(
name|getRight
argument_list|()
argument_list|,
name|Dependency
operator|.
name|CONTEXT_ITEM
argument_list|)
operator|&&
operator|!
name|Dependency
operator|.
name|dependsOnVar
argument_list|(
name|getLeft
argument_list|()
argument_list|)
operator|&&
operator|!
name|Dependency
operator|.
name|dependsOnVar
argument_list|(
name|getRight
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|canCache
condition|)
name|cached
operator|=
operator|new
name|CachedResult
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|""
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|actualReturnType
operator|=
name|result
operator|.
name|getItemType
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/** 	 * Generic, slow implementation. Applied if none of the possible 	 * optimizations can be used. 	 * 	 * @param contextSequence 	 * @param contextItem 	 * @return The Sequence resulting from the comparison 	 * @throws XPathException 	 */
specifier|protected
name|Sequence
name|genericCompare
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATION_FLAGS
argument_list|,
literal|"OPTIMIZATION CHOICE"
argument_list|,
literal|"genericCompare"
argument_list|)
expr_stmt|;
specifier|final
name|Sequence
name|ls
init|=
name|getLeft
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
return|return
name|genericCompare
argument_list|(
name|ls
argument_list|,
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
return|;
block|}
specifier|protected
name|Sequence
name|genericCompare
parameter_list|(
name|Sequence
name|ls
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Sequence
name|rs
init|=
name|getRight
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
specifier|final
name|Collator
name|collator
init|=
name|getCollator
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|ls
operator|.
name|isEmpty
argument_list|()
operator|&&
name|rs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|BooleanValue
operator|.
name|valueOf
argument_list|(
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|AtomicValue
operator|.
name|EMPTY_VALUE
argument_list|,
name|AtomicValue
operator|.
name|EMPTY_VALUE
argument_list|)
argument_list|)
return|;
block|}
if|else if
condition|(
name|ls
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|rs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SequenceIterator
name|i2
init|=
name|rs
operator|.
name|iterate
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|AtomicValue
operator|.
name|EMPTY_VALUE
argument_list|,
name|i2
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
argument_list|)
condition|)
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
block|}
if|else if
condition|(
operator|!
name|ls
operator|.
name|isEmpty
argument_list|()
operator|&&
name|rs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|SequenceIterator
name|i1
init|=
name|ls
operator|.
name|iterate
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AtomicValue
name|lv
init|=
name|i1
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|AtomicValue
operator|.
name|EMPTY_VALUE
argument_list|)
condition|)
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
block|}
if|else if
condition|(
name|ls
operator|.
name|hasOne
argument_list|()
operator|&&
name|rs
operator|.
name|hasOne
argument_list|()
condition|)
block|{
return|return
name|BooleanValue
operator|.
name|valueOf
argument_list|(
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|ls
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|atomize
argument_list|()
argument_list|,
name|rs
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|atomize
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
for|for
control|(
name|SequenceIterator
name|i1
init|=
name|ls
operator|.
name|iterate
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AtomicValue
name|lv
init|=
name|i1
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
decl_stmt|;
if|if
condition|(
name|rs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|AtomicValue
operator|.
name|EMPTY_VALUE
argument_list|)
condition|)
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
if|else if
condition|(
name|rs
operator|.
name|hasOne
argument_list|()
condition|)
block|{
if|if
condition|(
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|rs
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|atomize
argument_list|()
argument_list|)
condition|)
comment|//return early if we are successful, continue otherwise
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
else|else
block|{
for|for
control|(
name|SequenceIterator
name|i2
init|=
name|rs
operator|.
name|iterate
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|i2
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
argument_list|)
condition|)
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
block|}
block|}
block|}
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
comment|/** 	 * Optimized implementation, which can be applied if the left operand 	 * returns a node set. In this case, the left expression is executed first. 	 * All matching context nodes are then passed to the right expression. 	 */
specifier|protected
name|Sequence
name|nodeSetCompare
parameter_list|(
name|NodeSet
name|nodes
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATION_FLAGS
argument_list|,
literal|"OPTIMIZATION CHOICE"
argument_list|,
literal|"nodeSetCompare"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"No index: fall back to nodeSetCompare"
argument_list|)
expr_stmt|;
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
specifier|final
name|Collator
name|collator
init|=
name|getCollator
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
operator|&&
operator|!
name|contextSequence
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|contextSequence
operator|.
name|getDocumentSet
argument_list|()
operator|.
name|contains
argument_list|(
name|nodes
operator|.
name|getDocumentSet
argument_list|()
argument_list|)
condition|)
block|{
for|for
control|(
name|Iterator
name|i1
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|item
init|=
operator|(
name|NodeProxy
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|ContextItem
name|context
init|=
name|item
operator|.
name|getContext
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
literal|"Internal error: context node missing"
argument_list|)
throw|;
name|AtomicValue
name|lv
init|=
name|item
operator|.
name|atomize
argument_list|()
decl_stmt|;
do|do
block|{
name|Sequence
name|rs
init|=
name|getRight
argument_list|()
operator|.
name|eval
argument_list|(
name|context
operator|.
name|getNode
argument_list|()
operator|.
name|toSequence
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i2
init|=
name|rs
operator|.
name|iterate
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AtomicValue
name|rv
init|=
name|i2
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|rv
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
operator|(
name|context
operator|=
name|context
operator|.
name|getNextDirect
argument_list|()
operator|)
operator|!=
literal|null
condition|)
do|;
block|}
block|}
else|else
block|{
for|for
control|(
name|Iterator
name|i1
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|NodeProxy
name|item
init|=
operator|(
name|NodeProxy
operator|)
name|i1
operator|.
name|next
argument_list|()
decl_stmt|;
name|AtomicValue
name|lv
init|=
name|item
operator|.
name|atomize
argument_list|()
decl_stmt|;
name|Sequence
name|rs
init|=
name|getRight
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i2
init|=
name|rs
operator|.
name|iterate
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|AtomicValue
name|rv
init|=
name|i2
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
decl_stmt|;
if|if
condition|(
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|rv
argument_list|)
condition|)
name|result
operator|.
name|add
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Optimized implementation: first checks if a range index is defined 	 * on the nodes in the left argument. If that fails, check if we can use 	 * the fulltext index to speed up the search. Otherwise, fall back to 	 * {@link #nodeSetCompare(NodeSet, Sequence)}. 	 */
specifier|protected
name|Sequence
name|quickNodeSetCompare
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
comment|/* TODO think about optimising fallback to NodeSetCompare() in the for loop!!! 		 * At the moment when we fallback to NodeSetCompare() we are in effect throwing away any nodes 		 * we have already processed in quickNodeSetCompare() and reprocessing all the nodes in NodeSetCompare(). 		 * Instead - Could we create a NodeCompare() (based on NodeSetCompare() code) to only compare a single node and then union the result? 		 * - deliriumsky 		 */
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATION_FLAGS
argument_list|,
literal|"OPTIMIZATION CHOICE"
argument_list|,
literal|"quickNodeSetCompare"
argument_list|)
expr_stmt|;
comment|//get the NodeSet on the left
name|Sequence
name|leftSeq
init|=
name|getLeft
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|leftSeq
operator|.
name|isPersistentSet
argument_list|()
condition|)
return|return
name|genericCompare
argument_list|(
name|leftSeq
argument_list|,
name|contextSequence
argument_list|,
literal|null
argument_list|)
return|;
name|NodeSet
name|nodes
init|=
name|leftSeq
operator|.
name|isEmpty
argument_list|()
condition|?
name|NodeSet
operator|.
name|EMPTY_SET
else|:
operator|(
name|NodeSet
operator|)
name|leftSeq
decl_stmt|;
comment|//nothing on the left, so nothing to do
if|if
condition|(
operator|!
operator|(
name|nodes
operator|instanceof
name|VirtualNodeSet
operator|)
operator|&&
name|nodes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Well, we might discuss this one ;-)
name|hasUsedIndex
operator|=
literal|true
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
comment|//get the Sequence on the right
name|Sequence
name|rightSeq
init|=
name|getRight
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
comment|//nothing on the right, so nothing to do
if|if
condition|(
name|rightSeq
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//Well, we might discuss this one ;-)
name|hasUsedIndex
operator|=
literal|true
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
comment|//get the type of a possible index
name|int
name|indexType
init|=
name|nodes
operator|.
name|getIndexType
argument_list|()
decl_stmt|;
comment|//See if we have a range index defined on the nodes in this sequence
comment|//remember that Type.ITEM means... no index ;-)
if|if
condition|(
name|indexType
operator|!=
name|Type
operator|.
name|ITEM
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"found an index of type: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|indexType
argument_list|)
argument_list|)
expr_stmt|;
comment|//Get the documents from the node set
specifier|final
name|DocumentSet
name|docs
init|=
name|nodes
operator|.
name|getDocumentSet
argument_list|()
decl_stmt|;
comment|//Holds the result
name|NodeSet
name|result
init|=
literal|null
decl_stmt|;
comment|//Iterate through the right hand sequence
for|for
control|(
name|SequenceIterator
name|itRightSeq
init|=
name|rightSeq
operator|.
name|iterate
argument_list|()
init|;
name|itRightSeq
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
comment|//Get the index key
name|Item
name|key
init|=
name|itRightSeq
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
decl_stmt|;
comment|//if key has truncation, convert it to string
if|if
condition|(
name|truncation
operator|!=
name|Constants
operator|.
name|TRUNC_NONE
condition|)
block|{
if|if
condition|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Truncated key. Converted from "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to xs:string"
argument_list|)
expr_stmt|;
comment|//truncation is only possible on strings
name|key
operator|=
name|key
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
block|}
comment|//else if key is not the same type as the index
comment|//TODO : use Type.isSubType() ??? -pb
if|else if
condition|(
name|key
operator|.
name|getType
argument_list|()
operator|!=
name|indexType
condition|)
block|{
comment|//try to convert the key to the index type
try|try
block|{
name|key
operator|=
name|key
operator|.
name|convertTo
argument_list|(
name|indexType
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|xpe
parameter_list|)
block|{
comment|//TODO : rethrow the exception ? -pb
comment|//Could not convert the key to a suitable type for the index, fallback to nodeSetCompare()
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATION_FLAGS
argument_list|,
literal|"OPTIMIZATION FALLBACK"
argument_list|,
literal|"Falling back to nodeSetCompare ("
operator|+
name|xpe
operator|.
name|getMessage
argument_list|()
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot convert key: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to required index type: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|indexType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
block|}
comment|// If key implements org.exist.storage.Indexable, we can use the index
if|if
condition|(
name|key
operator|instanceof
name|Indexable
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Checking if range index can be used for key: "
operator|+
name|key
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|,
name|indexType
argument_list|)
condition|)
block|{
if|if
condition|(
name|truncation
operator|==
name|Constants
operator|.
name|TRUNC_NONE
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using range index for key: "
operator|+
name|key
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//key without truncation, find key
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using value index '"
operator|+
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getValueIndex
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"' to find key '"
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|"("
operator|+
name|key
operator|.
name|getStringValue
argument_list|()
operator|+
literal|")'"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkForQNameIndex
argument_list|(
name|contextSequence
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot use QName index"
argument_list|)
expr_stmt|;
name|contextQName
operator|=
literal|null
expr_stmt|;
block|}
name|NodeSet
name|ns
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getValueIndex
argument_list|()
operator|.
name|find
argument_list|(
name|relation
argument_list|,
name|docs
argument_list|,
name|nodes
argument_list|,
name|NodeSet
operator|.
name|ANCESTOR
argument_list|,
name|contextQName
argument_list|,
operator|(
name|Indexable
operator|)
name|key
argument_list|)
decl_stmt|;
name|hasUsedIndex
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
name|result
operator|=
name|ns
expr_stmt|;
else|else
name|result
operator|=
name|result
operator|.
name|union
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//key with truncation, match key
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Using value index '"
operator|+
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getValueIndex
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|"' to match key '"
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|"("
operator|+
name|key
operator|.
name|getStringValue
argument_list|()
operator|+
literal|")'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Using range index for key: "
operator|+
name|key
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|checkForQNameIndex
argument_list|(
name|contextSequence
argument_list|)
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot use QName index"
argument_list|)
expr_stmt|;
name|contextQName
operator|=
literal|null
expr_stmt|;
block|}
try|try
block|{
name|NodeSet
name|ns
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getValueIndex
argument_list|()
operator|.
name|match
argument_list|(
name|docs
argument_list|,
name|nodes
argument_list|,
name|NodeSet
operator|.
name|ANCESTOR
argument_list|,
name|getRegexp
argument_list|(
name|key
operator|.
name|getStringValue
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|contextQName
argument_list|,
name|DBBroker
operator|.
name|MATCH_REGEXP
argument_list|)
decl_stmt|;
name|hasUsedIndex
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
name|result
operator|=
name|ns
expr_stmt|;
else|else
name|result
operator|=
name|result
operator|.
name|union
argument_list|(
name|ns
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
comment|//our key does is not of the correct type
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATION_FLAGS
argument_list|,
literal|"OPTIMIZATION FALLBACK"
argument_list|,
literal|"Falling back to nodeSetCompare (key is of type: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|") whereas index is of type '"
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|indexType
argument_list|)
operator|+
literal|"'"
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot use range index: key is of type: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|") whereas index is of type '"
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|indexType
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|//our key does not implement org.exist.storage.Indexable
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATION_FLAGS
argument_list|,
literal|"OPTIMIZATION FALLBACK"
argument_list|,
literal|"Falling back to nodeSetCompare (key is not an indexable type: "
operator|+
name|key
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"Cannot use key which is of type '"
operator|+
name|key
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
block|}
return|return
name|result
return|;
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"No suitable index found for key: "
operator|+
name|rightSeq
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
comment|//no range index defined on the nodes in this sequence, so fallback to nodeSetCompare
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATION_FLAGS
argument_list|,
literal|"OPTIMIZATION FALLBACK"
argument_list|,
literal|"falling back to nodeSetCompare (no index available)"
argument_list|)
expr_stmt|;
return|return
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
block|}
specifier|private
name|CharSequence
name|getRegexp
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
switch|switch
condition|(
name|truncation
condition|)
block|{
case|case
name|Constants
operator|.
name|TRUNC_LEFT
case|:
return|return
operator|new
name|StringBuffer
argument_list|()
operator|.
name|append
argument_list|(
name|expr
argument_list|)
operator|.
name|append
argument_list|(
literal|'$'
argument_list|)
return|;
case|case
name|Constants
operator|.
name|TRUNC_RIGHT
case|:
return|return
operator|new
name|StringBuffer
argument_list|()
operator|.
name|append
argument_list|(
literal|'^'
argument_list|)
operator|.
name|append
argument_list|(
name|expr
argument_list|)
return|;
default|default :
return|return
name|expr
return|;
block|}
block|}
comment|/** 	 * Cast the atomic operands into a comparable type 	 * and compare them. 	 */
specifier|private
name|boolean
name|compareAtomic
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|lv
parameter_list|,
name|AtomicValue
name|rv
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
name|int
name|ltype
init|=
name|lv
operator|.
name|getType
argument_list|()
decl_stmt|;
name|int
name|rtype
init|=
name|rv
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|ltype
operator|==
name|Type
operator|.
name|UNTYPED_ATOMIC
condition|)
block|{
comment|//If one of the atomic values is an instance of xdt:untypedAtomic
comment|//and the other is an instance of a numeric type,
comment|//then the xdt:untypedAtomic value is cast to the type xs:double.
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|rtype
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
comment|//if(isEmptyString(lv))
comment|//    return false;
name|lv
operator|=
name|lv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
comment|//If one of the atomic values is an instance of xdt:untypedAtomic
comment|//and the other is an instance of xdt:untypedAtomic or xs:string,
comment|//then the xdt:untypedAtomic value (or values) is (are) cast to the type xs:string.
block|}
if|else if
condition|(
name|rtype
operator|==
name|Type
operator|.
name|UNTYPED_ATOMIC
operator|||
name|rtype
operator|==
name|Type
operator|.
name|STRING
condition|)
block|{
name|lv
operator|=
name|lv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
comment|//if (rtype == Type.UNTYPED_ATOMIC)
comment|//rv = rv.convertTo(Type.STRING);
comment|//If one of the atomic values is an instance of xdt:untypedAtomic
comment|//and the other is not an instance of xs:string, xdt:untypedAtomic, or any numeric type,
comment|//then the xdt:untypedAtomic value is cast to the dynamic type of the other value.
block|}
else|else
name|lv
operator|=
name|lv
operator|.
name|convertTo
argument_list|(
name|rtype
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rtype
operator|==
name|Type
operator|.
name|UNTYPED_ATOMIC
condition|)
block|{
comment|//If one of the atomic values is an instance of xdt:untypedAtomic
comment|//and the other is an instance of a numeric type,
comment|//then the xdt:untypedAtomic value is cast to the type xs:double.
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|ltype
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
comment|//if(isEmptyString(lv))
comment|//    return false;
name|rv
operator|=
name|rv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
comment|//If one of the atomic values is an instance of xdt:untypedAtomic
comment|//and the other is an instance of xdt:untypedAtomic or xs:string,
comment|//then the xdt:untypedAtomic value (or values) is (are) cast to the type xs:string.
block|}
if|else if
condition|(
name|ltype
operator|==
name|Type
operator|.
name|UNTYPED_ATOMIC
operator|||
name|ltype
operator|==
name|Type
operator|.
name|STRING
condition|)
block|{
name|rv
operator|=
name|rv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
comment|//if (ltype == Type.UNTYPED_ATOMIC)
comment|//	lv = lv.convertTo(Type.STRING);
comment|//If one of the atomic values is an instance of xdt:untypedAtomic
comment|//and the other is not an instance of xs:string, xdt:untypedAtomic, or any numeric type,
comment|//then the xdt:untypedAtomic value is cast to the dynamic type of the other value.
block|}
else|else
name|rv
operator|=
name|rv
operator|.
name|convertTo
argument_list|(
name|ltype
argument_list|)
expr_stmt|;
block|}
comment|/* 			if (backwardsCompatible) { 				if (!"".equals(lv.getStringValue())&& !"".equals(rv.getStringValue())) { 					// in XPath 1.0 compatible mode, if one of the operands is a number, cast 					// both operands to xs:double 					if (Type.subTypeOf(ltype, Type.NUMBER) 						|| Type.subTypeOf(rtype, Type.NUMBER)) { 							lv = lv.convertTo(Type.DOUBLE); 							rv = rv.convertTo(Type.DOUBLE); 					} 				} 			} 			*/
comment|// if truncation is set, we always do a string comparison
if|if
condition|(
name|truncation
operator|!=
name|Constants
operator|.
name|TRUNC_NONE
condition|)
block|{
comment|//TODO : log this ?
name|lv
operator|=
name|lv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
comment|//				System.out.println(
comment|//					lv.getStringValue() + Constants.OPS[relation] + rv.getStringValue());
switch|switch
condition|(
name|truncation
condition|)
block|{
case|case
name|Constants
operator|.
name|TRUNC_RIGHT
case|:
return|return
name|lv
operator|.
name|startsWith
argument_list|(
name|collator
argument_list|,
name|rv
argument_list|)
return|;
case|case
name|Constants
operator|.
name|TRUNC_LEFT
case|:
return|return
name|lv
operator|.
name|endsWith
argument_list|(
name|collator
argument_list|,
name|rv
argument_list|)
return|;
case|case
name|Constants
operator|.
name|TRUNC_BOTH
case|:
return|return
name|lv
operator|.
name|contains
argument_list|(
name|collator
argument_list|,
name|rv
argument_list|)
return|;
default|default:
return|return
name|lv
operator|.
name|compareTo
argument_list|(
name|collator
argument_list|,
name|relation
argument_list|,
name|rv
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|setASTNode
argument_list|(
name|getASTNode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/**      * @param lv      * @return Whether or not<code>lv</code> is an empty string 	 * @throws XPathException      */
specifier|private
specifier|static
name|boolean
name|isEmptyString
parameter_list|(
name|AtomicValue
name|lv
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|lv
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
operator|||
name|lv
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ATOMIC
condition|)
block|{
if|if
condition|(
name|lv
operator|.
name|getStringValue
argument_list|()
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasUsedIndex
parameter_list|()
block|{
return|return
name|hasUsedIndex
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.PathExpr#dump(org.exist.xquery.util.ExpressionDumper)      */
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
if|if
condition|(
name|truncation
operator|==
name|Constants
operator|.
name|TRUNC_BOTH
condition|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"contains"
argument_list|)
operator|.
name|display
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|getLeft
argument_list|()
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|getRight
argument_list|()
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getLeft
argument_list|()
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|' '
argument_list|)
operator|.
name|display
argument_list|(
name|Constants
operator|.
name|OPS
index|[
name|relation
index|]
argument_list|)
operator|.
name|display
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|getRight
argument_list|()
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|result
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
if|if
condition|(
name|truncation
operator|==
name|Constants
operator|.
name|TRUNC_BOTH
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
literal|"contains"
argument_list|)
operator|.
name|append
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getLeft
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getRight
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|")"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|.
name|append
argument_list|(
name|getLeft
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
operator|.
name|append
argument_list|(
name|Constants
operator|.
name|OPS
index|[
name|relation
index|]
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|result
operator|.
name|append
argument_list|(
name|getRight
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|switchOperands
parameter_list|()
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|OPTIMIZATIONS
argument_list|,
literal|"OPTIMIZATION"
argument_list|,
literal|"Switching operands"
argument_list|)
expr_stmt|;
comment|//Invert relation
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Constants
operator|.
name|GT
case|:
name|relation
operator|=
name|Constants
operator|.
name|LT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|LT
case|:
name|relation
operator|=
name|Constants
operator|.
name|GT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|LTEQ
case|:
name|relation
operator|=
name|Constants
operator|.
name|GTEQ
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|GTEQ
case|:
name|relation
operator|=
name|Constants
operator|.
name|LTEQ
expr_stmt|;
break|break;
comment|//What about Constants.EQ and Constants.NEQ ? Well, it seems to never be called
block|}
name|Expression
name|right
init|=
name|getRight
argument_list|()
decl_stmt|;
name|setRight
argument_list|(
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|setLeft
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Possibly switch operands to simplify execution 	 */
specifier|protected
name|void
name|simplify
parameter_list|()
block|{
comment|//Prefer nodes at the left hand
if|if
condition|(
operator|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
operator|)
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getRight
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
name|switchOperands
argument_list|()
expr_stmt|;
comment|//Prefer fewer items at the left hand
if|else if
condition|(
operator|(
name|Cardinality
operator|.
name|checkCardinality
argument_list|(
name|Cardinality
operator|.
name|MANY
argument_list|,
name|getLeft
argument_list|()
operator|.
name|getCardinality
argument_list|()
argument_list|)
operator|)
operator|&&
operator|!
operator|(
name|Cardinality
operator|.
name|checkCardinality
argument_list|(
name|Cardinality
operator|.
name|MANY
argument_list|,
name|getRight
argument_list|()
operator|.
name|getCardinality
argument_list|()
argument_list|)
operator|)
condition|)
name|switchOperands
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Collator
name|getCollator
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|collationArg
operator|==
literal|null
condition|)
return|return
name|context
operator|.
name|getDefaultCollator
argument_list|()
return|;
name|String
name|collationURI
init|=
name|collationArg
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
return|return
name|context
operator|.
name|getCollator
argument_list|(
name|collationURI
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCollation
parameter_list|(
name|Expression
name|collationArg
parameter_list|)
block|{
name|this
operator|.
name|collationArg
operator|=
name|collationArg
expr_stmt|;
block|}
specifier|private
name|boolean
name|checkForQNameIndex
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|)
block|{
if|if
condition|(
name|contextSequence
operator|==
literal|null
operator|||
name|contextQName
operator|==
literal|null
condition|)
return|return
literal|false
return|;
name|boolean
name|hasQNameIndex
init|=
literal|true
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|contextSequence
operator|.
name|getCollectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|Collection
name|collection
init|=
operator|(
name|Collection
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|equalsInternal
argument_list|(
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION_URI
argument_list|)
condition|)
continue|continue;
name|hasQNameIndex
operator|=
name|collection
operator|.
name|getIndexByQNameConfiguration
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|contextQName
argument_list|)
operator|!=
literal|null
expr_stmt|;
if|if
condition|(
operator|!
name|hasQNameIndex
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isTraceEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|trace
argument_list|(
literal|"cannot use index on QName: "
operator|+
name|contextQName
operator|+
literal|". Collection "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
operator|+
literal|" does not define an index"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|hasQNameIndex
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.PathExpr#resetState() 	 */
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|getLeft
argument_list|()
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|getRight
argument_list|()
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|postOptimization
condition|)
block|{
name|cached
operator|=
literal|null
expr_stmt|;
name|preselectResult
operator|=
literal|null
expr_stmt|;
name|hasUsedIndex
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|accept
parameter_list|(
name|ExpressionVisitor
name|visitor
parameter_list|)
block|{
name|visitor
operator|.
name|visitGeneralComparison
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

