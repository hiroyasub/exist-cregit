begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *   *  Copyright (C) 2000-03, Wolfgang M. Meier (meier@ifs. tu- darmstadt. de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ContextItem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|FulltextIndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|IndexSpec
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|Indexable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeTextEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|SimpleTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|TextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|ExtFulltext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * A general XQuery/XPath2 comparison expression.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|GeneralComparison
extends|extends
name|BinaryOp
block|{
specifier|protected
name|int
name|relation
init|=
name|Constants
operator|.
name|EQ
decl_stmt|;
specifier|protected
name|int
name|truncation
init|=
name|Constants
operator|.
name|TRUNC_NONE
decl_stmt|;
specifier|protected
name|CachedResult
name|cached
init|=
literal|null
decl_stmt|;
specifier|protected
name|Expression
name|collationArg
init|=
literal|null
decl_stmt|;
specifier|public
name|GeneralComparison
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|relation
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
name|relation
argument_list|,
name|Constants
operator|.
name|TRUNC_NONE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|GeneralComparison
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|relation
parameter_list|,
name|int
name|truncation
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|relation
operator|=
name|relation
expr_stmt|;
block|}
specifier|public
name|GeneralComparison
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|,
name|int
name|relation
parameter_list|)
block|{
name|this
argument_list|(
name|context
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|relation
argument_list|,
name|Constants
operator|.
name|TRUNC_NONE
argument_list|)
expr_stmt|;
block|}
specifier|public
name|GeneralComparison
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Expression
name|left
parameter_list|,
name|Expression
name|right
parameter_list|,
name|int
name|relation
parameter_list|,
name|int
name|truncation
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|relation
operator|=
name|relation
expr_stmt|;
name|this
operator|.
name|truncation
operator|=
name|truncation
expr_stmt|;
comment|// simplify arguments
if|if
condition|(
name|left
operator|instanceof
name|PathExpr
operator|&&
operator|(
operator|(
name|PathExpr
operator|)
name|left
operator|)
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
name|left
operator|=
operator|(
operator|(
name|PathExpr
operator|)
name|left
operator|)
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
if|if
condition|(
name|right
operator|instanceof
name|PathExpr
operator|&&
operator|(
operator|(
name|PathExpr
operator|)
name|right
operator|)
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
name|right
operator|=
operator|(
operator|(
name|PathExpr
operator|)
name|right
operator|)
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.BinaryOp#returnsType() 	 */
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
comment|// TODO: Assumes that context sequence is a node set
if|if
condition|(
name|inPredicate
operator|&&
operator|(
name|getDependencies
argument_list|()
operator|&
name|Dependency
operator|.
name|CONTEXT_ITEM
operator|)
operator|==
literal|0
condition|)
block|{
comment|/* If one argument is a node set we directly 			 * return the matching nodes from the context set. This works 			 * only inside predicates. 			 */
return|return
name|Type
operator|.
name|NODE
return|;
block|}
comment|// In all other cases, we return boolean
return|return
name|Type
operator|.
name|BOOLEAN
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.AbstractExpression#getDependencies() 	 */
specifier|public
name|int
name|getDependencies
parameter_list|()
block|{
name|int
name|leftDeps
init|=
name|getLeft
argument_list|()
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
name|int
name|rightDeps
init|=
name|getRight
argument_list|()
operator|.
name|getDependencies
argument_list|()
decl_stmt|;
comment|// left expression returns node set
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
comment|//	and does not depend on the context item
operator|&&
operator|(
name|leftDeps
operator|&
name|Dependency
operator|.
name|CONTEXT_ITEM
operator|)
operator|==
literal|0
condition|)
comment|//&& (rightDeps& Dependency.LOCAL_VARS) == 0)
block|{
return|return
name|Dependency
operator|.
name|CONTEXT_SET
return|;
block|}
else|else
block|{
return|return
name|Dependency
operator|.
name|CONTEXT_SET
operator|+
name|Dependency
operator|.
name|CONTEXT_ITEM
return|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.Expression#eval(org.exist.xquery.StaticContext, org.exist.dom.DocumentSet, org.exist.xquery.value.Sequence, org.exist.xquery.value.Item) 	 */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//        long start = System.currentTimeMillis();
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
name|contextSequence
operator|=
name|contextItem
operator|.
name|toSequence
argument_list|()
expr_stmt|;
name|Sequence
name|result
init|=
literal|null
decl_stmt|;
comment|/*  		 * If we are inside a predicate and one of the arguments is a node set,  		 * we try to speed up the query by returning nodes from the context set. 		 * This works only inside a predicate. The node set will always be the left  		 * operand. 		 */
if|if
condition|(
name|inPredicate
condition|)
block|{
if|if
condition|(
operator|(
name|getDependencies
argument_list|()
operator|&
name|Dependency
operator|.
name|CONTEXT_ITEM
operator|)
operator|==
literal|0
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
comment|// if the right operand is static, we can use the fulltext index
if|if
condition|(
operator|(
name|getRight
argument_list|()
operator|.
name|getDependencies
argument_list|()
operator|&
name|Dependency
operator|.
name|CONTEXT_ITEM
operator|)
operator|==
literal|0
operator|&&
operator|(
name|getRight
argument_list|()
operator|.
name|getCardinality
argument_list|()
operator|&
name|Cardinality
operator|.
name|MANY
operator|)
operator|==
literal|0
condition|)
block|{
comment|// lookup search terms in the fulltext index
name|result
operator|=
name|quickNodeSetCompare
argument_list|(
name|contextSequence
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|nodeSetCompare
argument_list|(
name|contextSequence
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
comment|// Fall back to the generic compare process
name|result
operator|=
name|genericCompare
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
expr_stmt|;
comment|//        LOG.debug("comparison took " + (System.currentTimeMillis() - start));
return|return
name|result
return|;
block|}
comment|/** 	 * Generic, slow implementation. Applied if none of the possible  	 * optimizations can be used. 	 *  	 * @param contextSequence 	 * @param contextItem 	 * @return 	 * @throws XPathException 	 */
specifier|protected
name|Sequence
name|genericCompare
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|ls
init|=
name|getLeft
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
name|Sequence
name|rs
init|=
name|getRight
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
name|Collator
name|collator
init|=
name|getCollator
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
name|AtomicValue
name|lv
decl_stmt|,
name|rv
decl_stmt|;
if|if
condition|(
name|ls
operator|.
name|getLength
argument_list|()
operator|==
literal|1
operator|&&
name|rs
operator|.
name|getLength
argument_list|()
operator|==
literal|1
condition|)
block|{
name|lv
operator|=
name|ls
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|atomize
argument_list|()
expr_stmt|;
name|rv
operator|=
name|rs
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|atomize
argument_list|()
expr_stmt|;
return|return
name|BooleanValue
operator|.
name|valueOf
argument_list|(
name|compareValues
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|rv
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
for|for
control|(
name|SequenceIterator
name|i1
init|=
name|ls
operator|.
name|iterate
argument_list|()
init|;
name|i1
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|lv
operator|=
name|i1
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
expr_stmt|;
if|if
condition|(
name|rs
operator|.
name|getLength
argument_list|()
operator|==
literal|1
operator|&&
name|compareValues
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|rs
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|atomize
argument_list|()
argument_list|)
condition|)
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
else|else
block|{
for|for
control|(
name|SequenceIterator
name|i2
init|=
name|rs
operator|.
name|iterate
argument_list|()
init|;
name|i2
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|rv
operator|=
name|i2
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
expr_stmt|;
if|if
condition|(
name|compareValues
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|rv
argument_list|)
condition|)
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
block|}
block|}
block|}
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
comment|/** 	 * Optimized implementation, which can be applied if the left operand 	 * returns a node set. In this case, the left expression is executed first. 	 * All matching context nodes are then passed to the right expression. 	 */
specifier|protected
name|Sequence
name|nodeSetCompare
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// evaluate left expression (returning node set)
name|NodeSet
name|nodes
init|=
operator|(
name|NodeSet
operator|)
name|getLeft
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
return|return
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
specifier|protected
name|Sequence
name|nodeSetCompare
parameter_list|(
name|NodeSet
name|nodes
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|NodeSet
name|result
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|NodeProxy
name|current
decl_stmt|;
name|ContextItem
name|c
decl_stmt|;
name|Sequence
name|rs
decl_stmt|;
name|AtomicValue
name|lv
decl_stmt|,
name|rv
decl_stmt|;
name|Collator
name|collator
init|=
name|getCollator
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|nodes
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|current
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|c
operator|=
name|current
operator|.
name|getContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
literal|"Internal error: context node missing"
argument_list|)
throw|;
do|do
block|{
name|lv
operator|=
name|current
operator|.
name|atomize
argument_list|()
expr_stmt|;
name|rs
operator|=
name|getRight
argument_list|()
operator|.
name|eval
argument_list|(
name|c
operator|.
name|getNode
argument_list|()
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|SequenceIterator
name|si
init|=
name|rs
operator|.
name|iterate
argument_list|()
init|;
name|si
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|compareValues
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|si
operator|.
name|nextItem
argument_list|()
operator|.
name|atomize
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
operator|(
name|c
operator|=
name|c
operator|.
name|getNextItem
argument_list|()
operator|)
operator|!=
literal|null
condition|)
do|;
block|}
return|return
name|result
return|;
block|}
comment|/** 	 * Optimized implementation: first checks if a range index is defined 	 * on the nodes in the left argument. If that fails, check if we can use 	 * the fulltext index to speed up the search. Otherwise, fall back to 	 * {@link #nodeSetCompare(NodeSet, Sequence)}. 	 */
specifier|protected
name|Sequence
name|quickNodeSetCompare
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// if the context sequence hasn't changed we can return a cached result
if|if
condition|(
name|cached
operator|!=
literal|null
operator|&&
name|cached
operator|.
name|isValid
argument_list|(
name|contextSequence
argument_list|)
condition|)
block|{
comment|//			LOG.debug("Returning cached result for " + pprint());
return|return
name|cached
operator|.
name|getResult
argument_list|()
return|;
block|}
comment|//	evaluate left expression
name|NodeSet
name|nodes
init|=
operator|(
name|NodeSet
operator|)
name|getLeft
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|nodes
operator|.
name|getLength
argument_list|()
operator|<
literal|2
condition|)
comment|// fall back to nodeSetCompare if we just have to check a single node
return|return
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
return|;
comment|// evaluate right expression
name|Sequence
name|rightSeq
init|=
name|getRight
argument_list|()
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
if|if
condition|(
name|rightSeq
operator|.
name|getLength
argument_list|()
operator|>
literal|1
condition|)
comment|// fall back to nodeSetCompare
return|return
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
return|;
comment|// get the type of a possible index
name|int
name|indexType
init|=
name|nodes
operator|.
name|getIndexType
argument_list|()
decl_stmt|;
name|DocumentSet
name|docs
init|=
name|nodes
operator|.
name|getDocumentSet
argument_list|()
decl_stmt|;
name|NodeSet
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|indexType
operator|!=
name|Type
operator|.
name|ITEM
condition|)
block|{
comment|// we have a range index defined on the nodes in this sequence
name|Item
name|key
init|=
name|rightSeq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|truncation
operator|!=
name|Constants
operator|.
name|TRUNC_NONE
condition|)
block|{
comment|// truncation is only possible on strings
name|key
operator|=
name|key
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|key
operator|.
name|getType
argument_list|()
operator|!=
name|indexType
condition|)
block|{
comment|// index type doesn't match. If index and argument have a numeric type,
comment|// we convert to the type of the index
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|indexType
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
name|key
operator|=
name|key
operator|.
name|convertTo
argument_list|(
name|indexType
argument_list|)
expr_stmt|;
block|}
comment|// if key does not implement Indexable, we can't use the index
if|if
condition|(
name|key
operator|instanceof
name|Indexable
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|key
operator|.
name|getType
argument_list|()
argument_list|,
name|indexType
argument_list|)
condition|)
block|{
if|if
condition|(
name|truncation
operator|!=
name|Constants
operator|.
name|TRUNC_NONE
condition|)
block|{
try|try
block|{
name|result
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getValueIndex
argument_list|()
operator|.
name|match
argument_list|(
name|docs
argument_list|,
name|nodes
argument_list|,
name|getComparisonString
argument_list|(
name|rightSeq
argument_list|)
operator|.
name|replace
argument_list|(
literal|'%'
argument_list|,
literal|'*'
argument_list|)
argument_list|,
name|DBBroker
operator|.
name|MATCH_WILDCARDS
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|getASTNode
argument_list|()
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using value index for key: "
operator|+
name|key
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getValueIndex
argument_list|()
operator|.
name|find
argument_list|(
name|relation
argument_list|,
name|docs
argument_list|,
name|nodes
argument_list|,
operator|(
name|Indexable
operator|)
name|key
argument_list|)
expr_stmt|;
block|}
block|}
else|else
return|return
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
if|else if
condition|(
name|relation
operator|==
name|Constants
operator|.
name|EQ
operator|&&
name|nodes
operator|.
name|hasTextIndex
argument_list|()
condition|)
block|{
comment|// we can use the fulltext index
name|String
name|cmp
init|=
name|getComparisonString
argument_list|(
name|rightSeq
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|.
name|length
argument_list|()
operator|<
name|NativeTextEngine
operator|.
name|MAX_WORD_LENGTH
condition|)
name|nodes
operator|=
name|useFulltextIndex
argument_list|(
name|cmp
argument_list|,
name|nodes
argument_list|,
name|docs
argument_list|)
expr_stmt|;
comment|// now compare the input node set to the search expression
name|result
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getNodesEqualTo
argument_list|(
name|nodes
argument_list|,
name|docs
argument_list|,
name|relation
argument_list|,
name|cmp
argument_list|,
name|getCollator
argument_list|(
name|contextSequence
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|rightSeq
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
operator|||
name|rightSeq
operator|.
name|getItemType
argument_list|()
operator|==
name|Type
operator|.
name|ATOMIC
condition|)
block|{
comment|// no usable index found. Fall back to a sequential scan of the nodes
name|result
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getNodesEqualTo
argument_list|(
name|nodes
argument_list|,
name|docs
argument_list|,
name|relation
argument_list|,
name|getComparisonString
argument_list|(
name|rightSeq
argument_list|)
argument_list|,
name|getCollator
argument_list|(
name|contextSequence
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// no usable index found. Fall back to nodeSetCompare
return|return
name|nodeSetCompare
argument_list|(
name|nodes
argument_list|,
name|contextSequence
argument_list|)
return|;
block|}
comment|// can this result be cached? Don't cache if the result depends on local variables.
name|boolean
name|canCache
init|=
name|contextSequence
operator|instanceof
name|NodeSet
operator|&&
operator|(
name|getRight
argument_list|()
operator|.
name|getDependencies
argument_list|()
operator|&
name|Dependency
operator|.
name|LOCAL_VARS
operator|)
operator|==
literal|0
operator|&&
operator|(
name|getLeft
argument_list|()
operator|.
name|getDependencies
argument_list|()
operator|&
name|Dependency
operator|.
name|LOCAL_VARS
operator|)
operator|==
literal|0
decl_stmt|;
if|if
condition|(
name|canCache
condition|)
name|cached
operator|=
operator|new
name|CachedResult
argument_list|(
operator|(
name|NodeSet
operator|)
name|contextSequence
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
comment|/**      * @param rightSeq      * @return      * @throws XPathException      */
specifier|private
name|String
name|getComparisonString
parameter_list|(
name|Sequence
name|rightSeq
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|cmp
init|=
name|rightSeq
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|truncation
condition|)
block|{
case|case
name|Constants
operator|.
name|TRUNC_RIGHT
case|:
name|cmp
operator|=
name|cmp
operator|+
literal|'%'
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|TRUNC_LEFT
case|:
name|cmp
operator|=
literal|'%'
operator|+
name|cmp
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|TRUNC_BOTH
case|:
name|cmp
operator|=
literal|'%'
operator|+
name|cmp
operator|+
literal|'%'
expr_stmt|;
block|}
return|return
name|cmp
return|;
block|}
specifier|protected
name|NodeSet
name|useFulltextIndex
parameter_list|(
name|String
name|cmp
parameter_list|,
name|NodeSet
name|nodes
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
throws|throws
name|XPathException
block|{
comment|//	    LOG.debug("Using fulltext index for expression " + ExpressionDumper.dump(this));
name|String
name|cmpCopy
init|=
name|cmp
decl_stmt|;
name|cmp
operator|=
name|maskWildcards
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
comment|// try to use a fulltext search expression to reduce the number
comment|// of potential nodes to scan through
name|SimpleTokenizer
name|tokenizer
init|=
operator|new
name|SimpleTokenizer
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setText
argument_list|(
name|cmp
argument_list|)
expr_stmt|;
name|TextToken
name|token
decl_stmt|;
name|String
name|term
decl_stmt|;
name|boolean
name|foundNumeric
init|=
literal|false
decl_stmt|;
comment|// setup up an&= expression using the fulltext index
name|ExtFulltext
name|containsExpr
init|=
operator|new
name|ExtFulltext
argument_list|(
name|context
argument_list|,
name|Constants
operator|.
name|FULLTEXT_AND
argument_list|)
decl_stmt|;
name|containsExpr
operator|.
name|setASTNode
argument_list|(
name|getASTNode
argument_list|()
argument_list|)
expr_stmt|;
comment|// disable default match highlighting
name|int
name|oldFlags
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getTextEngine
argument_list|()
operator|.
name|getTrackMatches
argument_list|()
decl_stmt|;
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getTextEngine
argument_list|()
operator|.
name|setTrackMatches
argument_list|(
name|Serializer
operator|.
name|TAG_NONE
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
literal|5
operator|&&
operator|(
name|token
operator|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|true
argument_list|)
operator|)
operator|!=
literal|null
condition|;
name|i
operator|++
control|)
block|{
comment|// remember if we find an alphanumeric token
if|if
condition|(
name|token
operator|.
name|getType
argument_list|()
operator|==
name|TextToken
operator|.
name|ALPHANUM
condition|)
name|foundNumeric
operator|=
literal|true
expr_stmt|;
block|}
comment|// check if all elements are indexed. If not, we can't use the
comment|// fulltext index.
if|if
condition|(
name|foundNumeric
condition|)
name|foundNumeric
operator|=
name|checkArgumentTypes
argument_list|(
name|context
argument_list|,
name|docs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|foundNumeric
operator|)
operator|&&
name|i
operator|>
literal|0
condition|)
block|{
comment|// all elements are indexed: use the fulltext index
name|containsExpr
operator|.
name|addTerm
argument_list|(
operator|new
name|LiteralValue
argument_list|(
name|context
argument_list|,
operator|new
name|StringValue
argument_list|(
name|cmp
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|nodes
operator|=
operator|(
name|NodeSet
operator|)
name|containsExpr
operator|.
name|eval
argument_list|(
name|nodes
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getTextEngine
argument_list|()
operator|.
name|setTrackMatches
argument_list|(
name|oldFlags
argument_list|)
expr_stmt|;
name|cmp
operator|=
name|cmpCopy
expr_stmt|;
return|return
name|nodes
return|;
block|}
comment|/** 	 * Cast the atomic operands into a comparable type 	 * and compare them. 	 */
specifier|protected
name|boolean
name|compareValues
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|lv
parameter_list|,
name|AtomicValue
name|rv
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
return|return
name|compareAtomic
argument_list|(
name|collator
argument_list|,
name|lv
argument_list|,
name|rv
argument_list|,
name|context
operator|.
name|isBackwardsCompatible
argument_list|()
argument_list|,
name|truncation
argument_list|,
name|relation
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|setASTNode
argument_list|(
name|getASTNode
argument_list|()
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|public
specifier|static
name|boolean
name|compareAtomic
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|lv
parameter_list|,
name|AtomicValue
name|rv
parameter_list|,
name|boolean
name|backwardsCompatible
parameter_list|,
name|int
name|truncation
parameter_list|,
name|int
name|relation
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|ltype
init|=
name|lv
operator|.
name|getType
argument_list|()
decl_stmt|;
name|int
name|rtype
init|=
name|rv
operator|.
name|getType
argument_list|()
decl_stmt|;
if|if
condition|(
name|ltype
operator|==
name|Type
operator|.
name|ITEM
operator|||
name|ltype
operator|==
name|Type
operator|.
name|ATOMIC
condition|)
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|rtype
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
if|if
condition|(
name|isEmptyString
argument_list|(
name|lv
argument_list|)
condition|)
return|return
literal|false
return|;
name|lv
operator|=
name|lv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rtype
operator|==
name|Type
operator|.
name|ITEM
operator|||
name|rtype
operator|==
name|Type
operator|.
name|ATOMIC
condition|)
block|{
name|lv
operator|=
name|lv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|rv
operator|=
name|rv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
else|else
name|lv
operator|=
name|lv
operator|.
name|convertTo
argument_list|(
name|rv
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rtype
operator|==
name|Type
operator|.
name|ITEM
operator|||
name|rtype
operator|==
name|Type
operator|.
name|ATOMIC
condition|)
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|ltype
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
if|if
condition|(
name|isEmptyString
argument_list|(
name|lv
argument_list|)
condition|)
return|return
literal|false
return|;
name|rv
operator|=
name|rv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|rtype
operator|==
name|Type
operator|.
name|ITEM
operator|||
name|rtype
operator|==
name|Type
operator|.
name|ATOMIC
condition|)
block|{
name|lv
operator|=
name|lv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
name|rv
operator|=
name|rv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
block|}
else|else
name|rv
operator|=
name|rv
operator|.
name|convertTo
argument_list|(
name|lv
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|backwardsCompatible
condition|)
block|{
comment|// in XPath 1.0 compatible mode, if one of the operands is a number, cast
comment|// both operands to xs:double
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|ltype
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
operator|||
name|Type
operator|.
name|subTypeOf
argument_list|(
name|rtype
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
name|lv
operator|=
name|lv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
name|rv
operator|=
name|rv
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
expr_stmt|;
block|}
block|}
comment|//			System.out.println(
comment|//				lv.getStringValue() + Constants.OPS[relation] + rv.getStringValue());
switch|switch
condition|(
name|truncation
condition|)
block|{
case|case
name|Constants
operator|.
name|TRUNC_RIGHT
case|:
return|return
name|lv
operator|.
name|startsWith
argument_list|(
name|collator
argument_list|,
name|rv
argument_list|)
return|;
case|case
name|Constants
operator|.
name|TRUNC_LEFT
case|:
return|return
name|lv
operator|.
name|endsWith
argument_list|(
name|collator
argument_list|,
name|rv
argument_list|)
return|;
case|case
name|Constants
operator|.
name|TRUNC_BOTH
case|:
return|return
name|lv
operator|.
name|contains
argument_list|(
name|collator
argument_list|,
name|rv
argument_list|)
return|;
default|default:
return|return
name|lv
operator|.
name|compareTo
argument_list|(
name|collator
argument_list|,
name|relation
argument_list|,
name|rv
argument_list|)
return|;
block|}
block|}
comment|/**      * @param lv      * @return 	 * @throws XPathException      */
specifier|private
specifier|static
name|boolean
name|isEmptyString
parameter_list|(
name|AtomicValue
name|lv
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|lv
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
operator|||
name|lv
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|ATOMIC
condition|)
block|{
name|String
name|str
init|=
name|lv
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|str
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|boolean
name|checkArgumentTypes
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
throws|throws
name|XPathException
block|{
name|DocumentImpl
name|doc
decl_stmt|;
name|IndexSpec
name|idxSpec
decl_stmt|;
name|FulltextIndexSpec
name|idx
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|docs
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|idxSpec
operator|=
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getIdxConf
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|idxSpec
operator|!=
literal|null
condition|)
block|{
name|idx
operator|=
name|idxSpec
operator|.
name|getFulltextIndexSpec
argument_list|()
expr_stmt|;
if|if
condition|(
name|idx
operator|.
name|isSelective
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|!
name|idx
operator|.
name|getIncludeAlphaNum
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|private
name|String
name|maskWildcards
parameter_list|(
name|String
name|expr
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|expr
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|expr
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'*'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"\\*"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'%'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
break|break;
default|default :
name|buf
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.PathExpr#dump(org.exist.xquery.util.ExpressionDumper)      */
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|getLeft
argument_list|()
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|' '
argument_list|)
operator|.
name|display
argument_list|(
name|Constants
operator|.
name|OPS
index|[
name|relation
index|]
argument_list|)
operator|.
name|display
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|getRight
argument_list|()
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|switchOperands
parameter_list|()
block|{
switch|switch
condition|(
name|relation
condition|)
block|{
case|case
name|Constants
operator|.
name|GT
case|:
name|relation
operator|=
name|Constants
operator|.
name|LT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|LT
case|:
name|relation
operator|=
name|Constants
operator|.
name|GT
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|LTEQ
case|:
name|relation
operator|=
name|Constants
operator|.
name|GTEQ
expr_stmt|;
break|break;
case|case
name|Constants
operator|.
name|GTEQ
case|:
name|relation
operator|=
name|Constants
operator|.
name|LTEQ
expr_stmt|;
break|break;
block|}
name|Expression
name|right
init|=
name|getRight
argument_list|()
decl_stmt|;
name|setRight
argument_list|(
name|getLeft
argument_list|()
argument_list|)
expr_stmt|;
name|setLeft
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|simplify
parameter_list|()
block|{
comment|// switch operands to simplify execution
if|if
condition|(
operator|(
operator|!
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getLeft
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
operator|)
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getRight
argument_list|()
operator|.
name|returnsType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
name|switchOperands
argument_list|()
expr_stmt|;
if|else if
condition|(
operator|(
name|getLeft
argument_list|()
operator|.
name|getCardinality
argument_list|()
operator|&
name|Cardinality
operator|.
name|MANY
operator|)
operator|!=
literal|0
operator|&&
operator|(
name|getRight
argument_list|()
operator|.
name|getCardinality
argument_list|()
operator|&
name|Cardinality
operator|.
name|MANY
operator|)
operator|==
literal|0
condition|)
name|switchOperands
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|Collator
name|getCollator
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|collationArg
operator|==
literal|null
condition|)
return|return
name|context
operator|.
name|getDefaultCollator
argument_list|()
return|;
name|String
name|collationURI
init|=
name|collationArg
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
return|return
name|context
operator|.
name|getCollator
argument_list|(
name|collationURI
argument_list|)
return|;
block|}
specifier|public
name|void
name|setCollation
parameter_list|(
name|Expression
name|collationArg
parameter_list|)
block|{
name|this
operator|.
name|collationArg
operator|=
name|collationArg
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.PathExpr#resetState() 	 */
specifier|public
name|void
name|resetState
parameter_list|()
block|{
name|getLeft
argument_list|()
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|getRight
argument_list|()
operator|.
name|resetState
argument_list|()
expr_stmt|;
name|cached
operator|=
literal|null
expr_stmt|;
block|}
block|}
end_class

end_unit

