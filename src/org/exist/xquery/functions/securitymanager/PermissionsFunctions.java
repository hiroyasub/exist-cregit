begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist-db Permissions Functions  *  Copyright (C) 2011 Adam Retter<adam@existsolutions.com>  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|securitymanager
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SimpleACLPermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
operator|.
name|ACE_ACCESS_TYPE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|ACLPermission
operator|.
name|ACE_TARGET
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionFactory
operator|.
name|PermissionModifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
class|class
name|PermissionsFunctions
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|final
specifier|static
name|QName
name|qnGetPermissions
init|=
operator|new
name|QName
argument_list|(
literal|"get-permissions"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnAddUserACE
init|=
operator|new
name|QName
argument_list|(
literal|"add-user-ace"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnAddGroupACE
init|=
operator|new
name|QName
argument_list|(
literal|"add-group-ace"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnInsertUserACE
init|=
operator|new
name|QName
argument_list|(
literal|"insert-user-ace"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnInsertGroupACE
init|=
operator|new
name|QName
argument_list|(
literal|"insert-group-ace"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnModifyACE
init|=
operator|new
name|QName
argument_list|(
literal|"modify-ace"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnRemoveACE
init|=
operator|new
name|QName
argument_list|(
literal|"remove-ace"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnClearACL
init|=
operator|new
name|QName
argument_list|(
literal|"clear-acl"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnChMod
init|=
operator|new
name|QName
argument_list|(
literal|"chmod"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnChOwn
init|=
operator|new
name|QName
argument_list|(
literal|"chown"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnChGrp
init|=
operator|new
name|QName
argument_list|(
literal|"chgrp"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnHasAccess
init|=
operator|new
name|QName
argument_list|(
literal|"has-access"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
name|qnGetPermissions
argument_list|,
literal|"Gets the permissions of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection to get permissions of."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|DOCUMENT
argument_list|,
name|Cardinality
operator|.
name|ONE
argument_list|,
literal|"The permissions of the resource or collection"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnAddUserACE
argument_list|,
literal|"Adds a User ACE to the ACL of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose ACL you wish to add the ACE to."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"user-name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the user to create an ACE for."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"allowed"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() if the ACE is allowing the permission mode, or false() if we are denying the permission mode"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mode"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The mode to set on the ACE e.g. 'rwx'"
argument_list|)
block|,             }
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnAddGroupACE
argument_list|,
literal|"Adds a Group ACE to the ACL of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose ACL you wish to add the ACE to."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group-name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the group to create an ACE for."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"allowed"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() if the ACE is allowing the permission mode, or false() if we are denying the permission mode"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mode"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The mode to set on the ACE e.g. 'rwx'"
argument_list|)
block|,             }
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnInsertUserACE
argument_list|,
literal|"Inserts a User ACE into the ACL of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose ACL you wish to add the ACE to."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"index"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The index in the ACL to insert the ACE before, subsequent entries will be renumbered"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"user-name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the user to create an ACE for."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"allowed"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() if the ACE is allowing the permission mode, or false() if we are denying the permission mode"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mode"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The mode to set on the ACE e.g. 'rwx'"
argument_list|)
block|,             }
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnInsertGroupACE
argument_list|,
literal|"Inserts a Group ACE into the ACL of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose ACL you wish to add the ACE to."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"index"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The index in the ACL to insert the ACE before, subsequent entries will be renumbered"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group-name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the group to create an ACE for."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"allowed"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() if the ACE is allowing the permission mode, or false() if we are denying the permission mode"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mode"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The mode to set on the ACE e.g. 'rwx'"
argument_list|)
block|,             }
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnModifyACE
argument_list|,
literal|"Modified an ACE of an ACL of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose ACL you wish to modify the ACE of."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"index"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The index of the ACE in the ACL to modify"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"allowed"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() if the ACE is allowing the permission mode, or false() if we are denying the permission mode"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mode"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The mode to set on the ACE e.g. 'rwx'"
argument_list|)
block|,             }
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnRemoveACE
argument_list|,
literal|"Removes an ACE from the ACL of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose ACL you wish to remove the ACE from."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"index"
argument_list|,
name|Type
operator|.
name|INT
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The index of the ACE in the ACL to remove, subsequent entries will be renumbered"
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnClearACL
argument_list|,
literal|"Removes all ACEs from the ACL of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose ACL you wish to clear."
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnChMod
argument_list|,
literal|"Changes the mode of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose mode you wish to set"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mode"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The mode to set on the resource or collection e.g. 'rwxrwxrwx'"
argument_list|)
block|,             }
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnChOwn
argument_list|,
literal|"Changes the owner of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose owner you wish to set"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"user-name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the user owner to set on the resource or collection e.g. 'guest'"
argument_list|)
block|,             }
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnChGrp
argument_list|,
literal|"Changes the group owner of a resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose group owner you wish to set"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group-name"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the user group owner to set on the resource or collection e.g. 'guest'"
argument_list|)
block|,             }
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|ZERO
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
name|qnHasAccess
argument_list|,
literal|"Checks whether the current user has access to the resource or collection."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"path"
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The path to the resource or collection whoose acess of which you wish to check"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"mode"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The mode to check against the resource or collection e.g. 'rwx'"
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|final
specifier|static
name|char
name|OWNER_GROUP_SEPARATOR
init|=
literal|':'
decl_stmt|;
specifier|public
name|PermissionsFunctions
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|result
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
name|XmldbURI
name|pathUri
init|=
operator|(
operator|(
name|AnyURIValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|toXmldbURI
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isCalledAs
argument_list|(
name|qnGetPermissions
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
name|functionGetPermissions
argument_list|(
name|pathUri
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnAddUserACE
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|||
name|isCalledAs
argument_list|(
name|qnAddGroupACE
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|ACE_TARGET
name|target
init|=
name|isCalledAs
argument_list|(
name|qnAddUserACE
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|?
name|ACE_TARGET
operator|.
name|USER
else|:
name|ACE_TARGET
operator|.
name|GROUP
decl_stmt|;
name|String
name|name
init|=
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|ACE_ACCESS_TYPE
name|access_type
init|=
name|args
index|[
literal|2
index|]
operator|.
name|effectiveBooleanValue
argument_list|()
condition|?
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
else|:
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
decl_stmt|;
name|String
name|mode
init|=
name|args
index|[
literal|3
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|result
operator|=
name|functionAddACE
argument_list|(
name|pathUri
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|access_type
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnInsertUserACE
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|||
name|isCalledAs
argument_list|(
name|qnInsertGroupACE
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|ACE_TARGET
name|target
init|=
name|isCalledAs
argument_list|(
name|qnInsertUserACE
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|?
name|ACE_TARGET
operator|.
name|USER
else|:
name|ACE_TARGET
operator|.
name|GROUP
decl_stmt|;
name|int
name|index
init|=
operator|(
operator|(
name|Integer
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|)
decl_stmt|;
name|String
name|name
init|=
name|args
index|[
literal|2
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|ACE_ACCESS_TYPE
name|access_type
init|=
name|args
index|[
literal|3
index|]
operator|.
name|effectiveBooleanValue
argument_list|()
condition|?
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
else|:
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
decl_stmt|;
name|String
name|mode
init|=
name|args
index|[
literal|4
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|result
operator|=
name|functionInsertACE
argument_list|(
name|pathUri
argument_list|,
name|index
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|access_type
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnModifyACE
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|index
init|=
operator|(
operator|(
name|Integer
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|)
decl_stmt|;
name|ACE_ACCESS_TYPE
name|access_type
init|=
name|args
index|[
literal|2
index|]
operator|.
name|effectiveBooleanValue
argument_list|()
condition|?
name|ACE_ACCESS_TYPE
operator|.
name|ALLOWED
else|:
name|ACE_ACCESS_TYPE
operator|.
name|DENIED
decl_stmt|;
name|String
name|mode
init|=
name|args
index|[
literal|3
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|result
operator|=
name|functionModifyACE
argument_list|(
name|pathUri
argument_list|,
name|index
argument_list|,
name|access_type
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnRemoveACE
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|int
name|index
init|=
operator|(
operator|(
name|Integer
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|toJavaObject
argument_list|(
name|Integer
operator|.
name|class
argument_list|)
operator|)
decl_stmt|;
name|result
operator|=
name|functionRemoveACE
argument_list|(
name|pathUri
argument_list|,
name|index
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnClearACL
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|result
operator|=
name|functionClearACE
argument_list|(
name|pathUri
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnChMod
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|mode
init|=
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|result
operator|=
name|functionChMod
argument_list|(
name|pathUri
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnChOwn
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|username
init|=
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|result
operator|=
name|functionChOwn
argument_list|(
name|pathUri
argument_list|,
name|username
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnChGrp
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|String
name|groupname
init|=
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|result
operator|=
name|functionChGrp
argument_list|(
name|pathUri
argument_list|,
name|groupname
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentImpl
name|functionGetPermissions
parameter_list|(
name|XmldbURI
name|pathUri
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|permissionsToXml
argument_list|(
name|getPermissions
argument_list|(
name|pathUri
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|functionAddACE
parameter_list|(
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|String
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|pathUri
argument_list|,
operator|new
name|PermissionModifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|permission
operator|instanceof
name|SimpleACLPermission
condition|)
block|{
comment|//add the ace
name|SimpleACLPermission
name|aclPermission
init|=
operator|(
operator|(
name|SimpleACLPermission
operator|)
name|permission
operator|)
decl_stmt|;
name|aclPermission
operator|.
name|addACE
argument_list|(
name|access_type
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"ACL like permissions have not been enabled"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
name|Sequence
name|functionInsertACE
parameter_list|(
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_TARGET
name|target
parameter_list|,
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|String
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|pathUri
argument_list|,
operator|new
name|PermissionModifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|permission
operator|instanceof
name|SimpleACLPermission
condition|)
block|{
comment|//insert the ace
name|SimpleACLPermission
name|aclPermission
init|=
operator|(
operator|(
name|SimpleACLPermission
operator|)
name|permission
operator|)
decl_stmt|;
name|aclPermission
operator|.
name|insertACE
argument_list|(
name|index
argument_list|,
name|access_type
argument_list|,
name|target
argument_list|,
name|name
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"ACL like permissions have not been enabled"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
name|Sequence
name|functionModifyACE
parameter_list|(
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|int
name|index
parameter_list|,
specifier|final
name|ACE_ACCESS_TYPE
name|access_type
parameter_list|,
specifier|final
name|String
name|mode
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|pathUri
argument_list|,
operator|new
name|PermissionModifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|permission
operator|instanceof
name|SimpleACLPermission
condition|)
block|{
comment|//insert the ace
name|SimpleACLPermission
name|aclPermission
init|=
operator|(
operator|(
name|SimpleACLPermission
operator|)
name|permission
operator|)
decl_stmt|;
name|aclPermission
operator|.
name|modifyACE
argument_list|(
name|index
argument_list|,
name|access_type
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"ACL like permissions have not been enabled"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
name|Sequence
name|functionRemoveACE
parameter_list|(
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|int
name|index
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|pathUri
argument_list|,
operator|new
name|PermissionModifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|permission
operator|instanceof
name|SimpleACLPermission
condition|)
block|{
comment|//remove the ace
name|SimpleACLPermission
name|aclPermission
init|=
operator|(
operator|(
name|SimpleACLPermission
operator|)
name|permission
operator|)
decl_stmt|;
name|aclPermission
operator|.
name|removeACE
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"ACL like permissions have not been enabled"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
name|Sequence
name|functionClearACE
parameter_list|(
specifier|final
name|XmldbURI
name|pathUri
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|pathUri
argument_list|,
operator|new
name|PermissionModifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|permission
operator|instanceof
name|SimpleACLPermission
condition|)
block|{
comment|//clear the acl
name|SimpleACLPermission
name|aclPermission
init|=
operator|(
operator|(
name|SimpleACLPermission
operator|)
name|permission
operator|)
decl_stmt|;
name|aclPermission
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"ACL like permissions have not been enabled"
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
name|Sequence
name|functionChMod
parameter_list|(
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|String
name|modeStr
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|pathUri
argument_list|,
operator|new
name|PermissionModifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
try|try
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|modeStr
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SyntaxException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Unrecognised mode syntax: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
name|Sequence
name|functionChOwn
parameter_list|(
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|String
name|username
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|pathUri
argument_list|,
operator|new
name|PermissionModifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|username
operator|.
name|indexOf
argument_list|(
name|OWNER_GROUP_SEPARATOR
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
name|permission
operator|.
name|setOwner
argument_list|(
name|username
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|username
operator|.
name|indexOf
argument_list|(
operator|(
name|OWNER_GROUP_SEPARATOR
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|permission
operator|.
name|setGroup
argument_list|(
name|username
operator|.
name|substring
argument_list|(
name|username
operator|.
name|indexOf
argument_list|(
name|OWNER_GROUP_SEPARATOR
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permission
operator|.
name|setOwner
argument_list|(
name|username
argument_list|)
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
name|Sequence
name|functionChGrp
parameter_list|(
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|String
name|groupname
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|PermissionFactory
operator|.
name|updatePermissions
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|pathUri
argument_list|,
operator|new
name|PermissionModifier
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Permission
name|permission
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|permission
operator|.
name|setGroup
argument_list|(
name|groupname
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|private
name|Permission
name|getPermissions
parameter_list|(
name|XmldbURI
name|pathUri
parameter_list|)
throws|throws
name|XPathException
block|{
name|Permission
name|permissions
decl_stmt|;
try|try
block|{
name|Collection
name|col
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getCollection
argument_list|(
name|pathUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|col
operator|!=
literal|null
condition|)
block|{
name|permissions
operator|=
name|col
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|DocumentImpl
name|doc
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getResource
argument_list|(
name|pathUri
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|permissions
operator|=
name|doc
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Resource or collection '"
operator|+
name|pathUri
operator|.
name|toString
argument_list|()
operator|+
literal|"' does not exist."
argument_list|)
throw|;
block|}
block|}
return|return
name|permissions
return|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Permission to retrieve permissions is denied for user '"
operator|+
name|context
operator|.
name|getSubject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' on '"
operator|+
name|pathUri
operator|.
name|toString
argument_list|()
operator|+
literal|"': "
operator|+
name|pde
operator|.
name|getMessage
argument_list|()
argument_list|,
name|pde
argument_list|)
throw|;
block|}
block|}
specifier|private
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentImpl
name|permissionsToXml
parameter_list|(
name|Permission
name|permission
parameter_list|)
block|{
name|MemTreeBuilder
name|builder
init|=
name|context
operator|.
name|getDocumentBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"permission"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"owner"
argument_list|)
argument_list|,
name|permission
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"group"
argument_list|)
argument_list|,
name|permission
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"mode"
argument_list|)
argument_list|,
name|permission
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|permission
operator|instanceof
name|SimpleACLPermission
condition|)
block|{
name|SimpleACLPermission
name|aclPermission
init|=
operator|(
name|SimpleACLPermission
operator|)
name|permission
decl_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"acl"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"entries"
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|aclPermission
operator|.
name|getACECount
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|aclPermission
operator|.
name|getACECount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
operator|new
name|QName
argument_list|(
literal|"ace"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"index"
argument_list|)
argument_list|,
name|String
operator|.
name|valueOf
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"target"
argument_list|)
argument_list|,
name|aclPermission
operator|.
name|getACETarget
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"who"
argument_list|)
argument_list|,
name|aclPermission
operator|.
name|getACEWho
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"access_type"
argument_list|)
argument_list|,
name|aclPermission
operator|.
name|getACEAccessType
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"mode"
argument_list|)
argument_list|,
name|aclPermission
operator|.
name|getACEModeString
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
return|return
name|builder
operator|.
name|getDocument
argument_list|()
return|;
block|}
block|}
end_class

end_unit

