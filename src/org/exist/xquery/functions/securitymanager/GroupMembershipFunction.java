begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|securitymanager
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
class|class
name|GroupMembershipFunction
extends|extends
name|BasicFunction
block|{
specifier|private
specifier|final
specifier|static
name|QName
name|qnAddGroupMember
init|=
operator|new
name|QName
argument_list|(
literal|"add-group-member"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnRemoveGroupMember
init|=
operator|new
name|QName
argument_list|(
literal|"remove-group-member"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnGetGroupMembers
init|=
operator|new
name|QName
argument_list|(
literal|"get-group-members"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnAddGroupManager
init|=
operator|new
name|QName
argument_list|(
literal|"add-group-manager"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnRemoveGroupManager
init|=
operator|new
name|QName
argument_list|(
literal|"remove-group-manager"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnGetGroupManagers
init|=
operator|new
name|QName
argument_list|(
literal|"get-group-managers"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnIsDba
init|=
operator|new
name|QName
argument_list|(
literal|"is-dba"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|qnSetPrimaryGroup
init|=
operator|new
name|QName
argument_list|(
literal|"set-user-primary-group"
argument_list|,
name|SecurityManagerModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|SecurityManagerModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_ADD_GROUP_MEMBER
init|=
operator|new
name|FunctionSignature
argument_list|(
name|qnAddGroupMember
argument_list|,
literal|"Adds a user to a group. Can only be called by a group manager or DBA."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the group whoose membership you wish to modify."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"member"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The user(s) to add to the group membership."
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_REMOVE_GROUP_MEMBER
init|=
operator|new
name|FunctionSignature
argument_list|(
name|qnRemoveGroupMember
argument_list|,
literal|"Removes a user from a group. Can only be called by a group manager of DBA."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the group whoose membership you wish to modify."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"member"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The user(s) to remove from the group membership."
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_GET_GROUP_MEMBERS
init|=
operator|new
name|FunctionSignature
argument_list|(
name|qnGetGroupMembers
argument_list|,
literal|"Gets a list of the group members."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The group name to retrieve the list of members for."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The list of group members for the group $group"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_ADD_GROUP_MANAGER
init|=
operator|new
name|FunctionSignature
argument_list|(
name|qnAddGroupManager
argument_list|,
literal|"Adds a manager to a groups managers. Can only be called by a group manager or DBA."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the group to which you wish to add a manager(s)."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"manager"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The user(s) to add to the group managers."
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_REMOVE_GROUP_MANAGER
init|=
operator|new
name|FunctionSignature
argument_list|(
name|qnRemoveGroupManager
argument_list|,
literal|"Removes a manager from a groups managers. Can only be called by a group manager of DBA."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the group from which you wish to remove a manager(s)"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"manager"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The user(s) to remove from the group managers."
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_GET_GROUP_MANAGERS
init|=
operator|new
name|FunctionSignature
argument_list|(
name|qnGetGroupManagers
argument_list|,
literal|"Gets a list of the group managers. Can only be called by a group manager."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The group name to retrieve the list of managers for."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The list of group managers for the group $group"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_IS_DBA
init|=
operator|new
name|FunctionSignature
argument_list|(
name|qnIsDba
argument_list|,
literal|"Determines if the user is a DBA."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"username"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The username of the user account to check if they are a member of the DBA group."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true of the user is a DBA, false otherwise."
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|FNS_SET_USER_PRIMARY_GROUP
init|=
operator|new
name|FunctionSignature
argument_list|(
name|qnSetPrimaryGroup
argument_list|,
literal|"Sets the primary group of a user account. If the user is not yet in the group, then they are added to the group first."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"username"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The name of the user account to set the primary group for."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The group to set as the primary group for the user."
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|EMPTY
argument_list|,
name|Cardinality
operator|.
name|EMPTY
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|GroupMembershipFunction
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|result
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
specifier|final
name|DBBroker
name|broker
init|=
name|getContext
argument_list|()
operator|.
name|getBroker
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|currentUser
init|=
name|broker
operator|.
name|getSubject
argument_list|()
decl_stmt|;
specifier|final
name|SecurityManager
name|securityManager
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|isCalledAs
argument_list|(
name|qnIsDba
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|username
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|securityManager
operator|.
name|hasAccount
argument_list|(
name|username
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"The user account with username "
operator|+
name|username
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
else|else
block|{
specifier|final
name|Account
name|account
init|=
name|securityManager
operator|.
name|getAccount
argument_list|(
name|username
argument_list|)
decl_stmt|;
name|result
operator|=
name|BooleanValue
operator|.
name|valueOf
argument_list|(
name|securityManager
operator|.
name|hasAdminPrivileges
argument_list|(
name|account
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnSetPrimaryGroup
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|String
name|username
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|groupName
init|=
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|securityManager
operator|.
name|hasAccount
argument_list|(
name|username
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"The user account with username "
operator|+
name|username
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|securityManager
operator|.
name|hasGroup
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"The user group with name "
operator|+
name|groupName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
specifier|final
name|Group
name|group
init|=
name|securityManager
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isCalledAs
argument_list|(
name|qnGetGroupMembers
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
operator|(
name|group
operator|.
name|isManager
argument_list|(
name|currentUser
argument_list|)
operator|||
name|currentUser
operator|.
name|hasDbaRole
argument_list|()
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Only a Group Manager or DBA may modify the group or retrieve sensitive group information."
argument_list|)
throw|;
block|}
specifier|final
name|Account
name|account
init|=
name|securityManager
operator|.
name|getAccount
argument_list|(
name|username
argument_list|)
decl_stmt|;
comment|//set the primary group
name|account
operator|.
name|setPrimaryGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|securityManager
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|final
name|String
name|groupName
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|securityManager
operator|.
name|hasGroup
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"The user group with name "
operator|+
name|groupName
operator|+
literal|" does not exist."
argument_list|)
throw|;
block|}
specifier|final
name|Group
name|group
init|=
name|securityManager
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isCalledAs
argument_list|(
name|qnGetGroupMembers
operator|.
name|getLocalName
argument_list|()
argument_list|)
operator|&&
operator|(
operator|!
operator|(
name|group
operator|.
name|isManager
argument_list|(
name|currentUser
argument_list|)
operator|||
name|currentUser
operator|.
name|hasDbaRole
argument_list|()
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Only a Group Manager or DBA may modify the group or retrieve sensitive group information."
argument_list|)
throw|;
block|}
if|if
condition|(
name|isCalledAs
argument_list|(
name|qnAddGroupMember
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|users
init|=
name|getUsers
argument_list|(
name|securityManager
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|addGroupMembers
argument_list|(
name|securityManager
argument_list|,
name|group
argument_list|,
name|users
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnRemoveGroupMember
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|users
init|=
name|getUsers
argument_list|(
name|securityManager
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|removeGroupMembers
argument_list|(
name|securityManager
argument_list|,
name|group
argument_list|,
name|users
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnGetGroupMembers
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupMembers
init|=
name|securityManager
operator|.
name|findAllGroupMembers
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
specifier|final
name|ValueSequence
name|seq
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|groupMember
range|:
name|groupMembers
control|)
block|{
name|seq
operator|.
name|add
argument_list|(
operator|new
name|StringValue
argument_list|(
name|groupMember
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|seq
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnAddGroupManager
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|users
init|=
name|getUsers
argument_list|(
name|securityManager
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|addGroupManagers
argument_list|(
name|securityManager
argument_list|,
name|group
argument_list|,
name|users
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnRemoveGroupManager
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|users
init|=
name|getUsers
argument_list|(
name|securityManager
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|removeGroupManagers
argument_list|(
name|securityManager
argument_list|,
name|group
argument_list|,
name|users
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|qnGetGroupManagers
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
specifier|final
name|ValueSequence
name|seq
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Account
name|groupManager
range|:
name|group
operator|.
name|getManagers
argument_list|()
control|)
block|{
name|seq
operator|.
name|add
argument_list|(
operator|new
name|StringValue
argument_list|(
name|groupManager
operator|.
name|getName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|result
operator|=
name|seq
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown function call: "
operator|+
name|getSignature
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|pde
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|ee
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ee
argument_list|)
throw|;
block|}
return|return
name|result
return|;
block|}
specifier|private
name|void
name|addGroupMembers
parameter_list|(
specifier|final
name|SecurityManager
name|securityManager
parameter_list|,
specifier|final
name|Group
name|group
parameter_list|,
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|accounts
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
for|for
control|(
specifier|final
name|Account
name|account
range|:
name|accounts
control|)
block|{
comment|//TEMP - ESCALATE TO DBA :-(
comment|/**              * Security Manager has a fundamental flaw              * Group Membership is stored in the Account XML: so you cannot              * add a user to a group without modifying the users XML              * this is a security issue as if you are not that user              * you have to escalate to DBA - must redesign              * Consider Unix /etc/groups design!              * See XMLDBCreateGroup and XMLDRemoveUserFromGroup              */
specifier|final
name|Subject
name|currentSubject
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
try|try
block|{
comment|//escalate
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|setSubject
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|//perform action
name|account
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|securityManager
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|setSubject
argument_list|(
name|currentSubject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|removeGroupMembers
parameter_list|(
specifier|final
name|SecurityManager
name|securityManager
parameter_list|,
specifier|final
name|Group
name|group
parameter_list|,
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|accounts
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
for|for
control|(
specifier|final
name|Account
name|account
range|:
name|accounts
control|)
block|{
comment|//TEMP - ESCALATE TO DBA :-(
comment|/**              * Security Manager has a fundamental flaw              * Group Membership is stored in the Account XML: so you cannot              * add a user to a group without modifying the users XML              * this is a security issue as if you are not that user              * you have to escalate to DBA - must redesign              * Consider Unix /etc/groups design!              * See XMLDBCreateGroup and XMLDRemoveUserFromGroup              */
specifier|final
name|Subject
name|currentSubject
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
try|try
block|{
comment|//escalate
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|setSubject
argument_list|(
name|securityManager
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|//perform action
name|account
operator|.
name|remGroup
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|securityManager
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|setSubject
argument_list|(
name|currentSubject
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|addGroupManagers
parameter_list|(
specifier|final
name|SecurityManager
name|securityManager
parameter_list|,
specifier|final
name|Group
name|group
parameter_list|,
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|accounts
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|group
operator|.
name|addManagers
argument_list|(
name|accounts
argument_list|)
expr_stmt|;
name|securityManager
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|removeGroupManagers
parameter_list|(
specifier|final
name|SecurityManager
name|securityManager
parameter_list|,
specifier|final
name|Group
name|group
parameter_list|,
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|accounts
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
for|for
control|(
specifier|final
name|Account
name|account
range|:
name|accounts
control|)
block|{
name|group
operator|.
name|removeManager
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
name|securityManager
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
specifier|private
name|List
argument_list|<
name|Account
argument_list|>
name|getUsers
parameter_list|(
specifier|final
name|SecurityManager
name|securityManager
parameter_list|,
specifier|final
name|Sequence
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|accounts
init|=
operator|new
name|ArrayList
argument_list|<
name|Account
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seq
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|String
name|user
init|=
name|seq
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|account
init|=
name|securityManager
operator|.
name|getAccount
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"The user account '"
operator|+
name|user
operator|+
literal|"' does not exist!"
argument_list|)
throw|;
block|}
else|else
block|{
name|accounts
operator|.
name|add
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|accounts
return|;
block|}
block|}
end_class

end_unit

