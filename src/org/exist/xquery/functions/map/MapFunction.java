begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|map
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Implements all functions of the map module.  */
end_comment

begin_class
specifier|public
class|class
name|MapFunction
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|static
specifier|final
name|FunctionSignature
index|[]
name|signatures
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"new"
argument_list|,
name|MapModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MapModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Constructs and returns an empty map whose collation is the default collation in the static context."
argument_list|,
literal|null
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"new"
argument_list|,
name|MapModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MapModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Constructs and returns an empty map whose collation is the default collation in the static context."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"maps"
argument_list|,
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"Existing maps to combine into the new map."
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"new"
argument_list|,
name|MapModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MapModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Constructs and returns an empty map whose collation is given in the second argument."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"maps"
argument_list|,
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"Existing maps to combine into the new map."
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"collation"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The collation to use for the new map."
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"entry"
argument_list|,
name|MapModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MapModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Creates a map that contains a single entry (a key-value pair)."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"key"
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The key"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"value"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The associated value"
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"get"
argument_list|,
name|MapModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MapModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the value associated with a supplied key in a given map."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
name|MapModule
operator|.
name|PREFIX
argument_list|,
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The map"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"key"
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The key to look up"
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"contains"
argument_list|,
name|MapModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MapModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Tests whether a supplied map contains an entry for a given key."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
name|MapModule
operator|.
name|PREFIX
argument_list|,
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The map"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"key"
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The key to look up"
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"keys"
argument_list|,
name|MapModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MapModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns a sequence containing all the key values present in a map."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
name|MapModule
operator|.
name|PREFIX
argument_list|,
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The map"
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ATOMIC
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"remove"
argument_list|,
name|MapModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|MapModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Constructs a new map by removing an entry from an existing map."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
name|MapModule
operator|.
name|PREFIX
argument_list|,
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The map"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"key"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The key to remove"
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|MAP
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|MapFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"new"
argument_list|)
condition|)
block|{
return|return
name|newMap
argument_list|(
name|args
argument_list|)
return|;
block|}
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"entry"
argument_list|)
condition|)
block|{
return|return
name|entry
argument_list|(
name|args
argument_list|)
return|;
block|}
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
return|return
name|get
argument_list|(
name|args
argument_list|)
return|;
block|}
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"contains"
argument_list|)
condition|)
block|{
return|return
name|contains
argument_list|(
name|args
argument_list|)
return|;
block|}
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"keys"
argument_list|)
condition|)
block|{
return|return
name|keys
argument_list|(
name|args
argument_list|)
return|;
block|}
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"remove"
argument_list|)
condition|)
block|{
return|return
name|remove
argument_list|(
name|args
argument_list|)
return|;
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|Sequence
name|remove
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|AbstractMapType
name|map
init|=
operator|(
name|AbstractMapType
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|map
operator|.
name|remove
argument_list|(
operator|(
name|AtomicValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|keys
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|AbstractMapType
name|map
init|=
operator|(
name|AbstractMapType
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|map
operator|.
name|keys
argument_list|()
return|;
block|}
specifier|private
name|Sequence
name|contains
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|AbstractMapType
name|map
init|=
operator|(
name|AbstractMapType
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|BooleanValue
operator|.
name|valueOf
argument_list|(
name|map
operator|.
name|contains
argument_list|(
operator|(
name|AtomicValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|get
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|AbstractMapType
name|map
init|=
operator|(
name|AbstractMapType
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|map
operator|.
name|get
argument_list|(
operator|(
name|AtomicValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|entry
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|AtomicValue
name|key
init|=
operator|(
name|AtomicValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
operator|new
name|SingleKeyMapType
argument_list|(
name|this
operator|.
name|context
argument_list|,
literal|null
argument_list|,
name|key
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|newMap
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
return|return
operator|new
name|MapType
argument_list|(
name|this
operator|.
name|context
argument_list|)
return|;
block|}
name|String
name|collation
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|collation
operator|=
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
block|}
specifier|final
name|MapType
name|map
init|=
operator|new
name|MapType
argument_list|(
name|this
operator|.
name|context
argument_list|,
name|collation
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|args
index|[
literal|0
index|]
operator|.
name|unorderedIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|AbstractMapType
name|m
init|=
operator|(
name|AbstractMapType
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
name|map
operator|.
name|add
argument_list|(
name|m
argument_list|)
expr_stmt|;
block|}
return|return
name|map
return|;
block|}
block|}
end_class

end_unit

