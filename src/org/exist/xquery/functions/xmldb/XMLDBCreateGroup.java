begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2010 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|securitymanager
operator|.
name|GroupManagementFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@existsolutions.com>  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  */
end_comment

begin_class
annotation|@
name|Deprecated
specifier|public
class|class
name|XMLDBCreateGroup
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|XMLDBCreateUser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"create-group"
argument_list|,
name|XMLDBModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XMLDBModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Create a new user group. $group is the group name. The current user will be the groups manager."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The group name"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() or false() indicating the outcome of the operation"
argument_list|)
argument_list|,
name|GroupManagementFunction
operator|.
name|FNS_CREATE_GROUP
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"create-group"
argument_list|,
name|XMLDBModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XMLDBModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Create a new user group, with an initial member. $group is the group name, $group-manager-username are the groups managers in addition to the current user."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The group name"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group-manager-username"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The name of the user(s) who will be the groups manager"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() or false() indicating the outcome of the operation"
argument_list|)
argument_list|,
name|GroupManagementFunction
operator|.
name|FNS_CREATE_GROUP_WITH_MANAGERS_WITH_METADATA
argument_list|)
block|, }
decl_stmt|;
comment|/** 	 * @param context 	 */
specifier|public
name|XMLDBCreateGroup
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * (non-Javadoc) 	 *  	 * @see org.exist.xquery.Expression#eval(org.exist.dom.persistent.DocumentSet, 	 * org.exist.xquery.value.Sequence, org.exist.xquery.value.Item) 	 */
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|args
index|[]
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|String
name|groupName
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"guest"
operator|.
name|equals
argument_list|(
name|context
operator|.
name|getSubject
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
literal|"dba"
operator|.
name|equals
argument_list|(
name|groupName
argument_list|)
condition|)
block|{
specifier|final
name|XPathException
name|xPathException
init|=
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Permission denied, calling account '"
operator|+
name|context
operator|.
name|getSubject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' must be an authenticated account to call this function."
argument_list|)
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"Invalid user"
argument_list|,
name|xPathException
argument_list|)
expr_stmt|;
throw|throw
name|xPathException
throw|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Attempting to create group "
operator|+
name|groupName
argument_list|)
expr_stmt|;
name|Group
name|group
init|=
operator|new
name|GroupAider
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
specifier|final
name|DBBroker
name|broker
init|=
name|context
operator|.
name|getBroker
argument_list|()
decl_stmt|;
specifier|final
name|Subject
name|currentUser
init|=
name|broker
operator|.
name|getSubject
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
comment|// add the current user as a group manager
name|group
operator|.
name|addManager
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|// add the additional group managers, this also makes sure they
comment|// all exist first!
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|args
index|[
literal|1
index|]
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|String
name|groupManager
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
specifier|final
name|Account
name|groupManagerAccount
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|groupManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupManagerAccount
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Could not find the user: "
operator|+
name|groupManager
argument_list|)
expr_stmt|;
comment|// throw exception is better -shabanovd
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
name|group
operator|.
name|addManager
argument_list|(
name|groupManagerAccount
argument_list|)
expr_stmt|;
block|}
block|}
comment|// create the group
name|group
operator|=
name|sm
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
comment|//TEMP - ESCALATE TO DBA :-(
comment|//START TEMP - we also need to make every manager a member of the group otherwise
comment|//they do not show up as group members automatically - this is a design problem because group
comment|//membership is managed on the user and not the group, this needs to be fixed!
comment|//see XMLDBAddUserToGroup and XMLDBRemoveUserFromGroup also
specifier|final
name|Subject
name|currentSubject
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getSubject
argument_list|()
decl_stmt|;
try|try
block|{
comment|//escalate
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|setSubject
argument_list|(
name|sm
operator|.
name|getSystemSubject
argument_list|()
argument_list|)
expr_stmt|;
comment|//perform action
for|for
control|(
specifier|final
name|Account
name|manager
range|:
name|group
operator|.
name|getManagers
argument_list|()
control|)
block|{
name|manager
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateAccount
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|setSubject
argument_list|(
name|currentSubject
argument_list|)
expr_stmt|;
block|}
comment|//END TEMP
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Permission denied, calling account '"
operator|+
name|context
operator|.
name|getSubject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' do not authorize to call this function."
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|exe
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to create group: "
operator|+
name|group
argument_list|,
name|exe
argument_list|)
expr_stmt|;
block|}
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
block|}
end_class

end_unit

