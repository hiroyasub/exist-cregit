begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2010 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
class|class
name|XMLDBCreateGroup
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XMLDBCreateUser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"create-group"
argument_list|,
name|XMLDBModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XMLDBModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Create a new user group. $group is the group name."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The group name"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() or false() indicating the outcome of the operation"
argument_list|)
argument_list|,
literal|"Use xmldb:create-group($group, $group-manager) instead."
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"create-group"
argument_list|,
name|XMLDBModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XMLDBModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Create a new user group, with an initial member. $group is the group name, $group-manager-username is the groups manager."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The group name"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"group-manager-username"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ONE_OR_MORE
argument_list|,
literal|"The name of the user who will be the groups manager"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() or false() indicating the outcome of the operation"
argument_list|)
argument_list|)
block|,     }
decl_stmt|;
comment|/**      * @param context      */
specifier|public
name|XMLDBCreateGroup
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/*      * (non-Javadoc)      *      * @see org.exist.xquery.Expression#eval(org.exist.dom.DocumentSet,      *         org.exist.xquery.value.Sequence, org.exist.xquery.value.Item)      */
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|args
index|[]
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|String
name|groupName
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getUsername
argument_list|()
operator|.
name|equals
argument_list|(
literal|"guest"
argument_list|)
operator|||
name|groupName
operator|.
name|equals
argument_list|(
literal|"dba"
argument_list|)
condition|)
block|{
name|XPathException
name|xPathException
init|=
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Permission denied, calling user '"
operator|+
name|context
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' must be an authenticated user to call this function."
argument_list|)
decl_stmt|;
name|logger
operator|.
name|error
argument_list|(
literal|"Invalid user"
argument_list|,
name|xPathException
argument_list|)
expr_stmt|;
throw|throw
name|xPathException
throw|;
block|}
name|logger
operator|.
name|info
argument_list|(
literal|"Attempting to create group "
operator|+
name|groupName
argument_list|)
expr_stmt|;
name|Group
name|group
init|=
operator|new
name|GroupAider
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
name|DBBroker
name|broker
init|=
name|context
operator|.
name|getBroker
argument_list|()
decl_stmt|;
name|Subject
name|currentUser
init|=
name|broker
operator|.
name|getUser
argument_list|()
decl_stmt|;
try|try
block|{
name|SecurityManager
name|sm
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|2
condition|)
block|{
comment|//find the group managers, this makes sure they all exist first!
name|List
argument_list|<
name|Account
argument_list|>
name|groupManagerAccounts
init|=
operator|new
name|ArrayList
argument_list|<
name|Account
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|args
index|[
literal|1
index|]
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|groupManager
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|Account
name|groupManagerAccount
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|groupManager
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupManagerAccount
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Could not find the user: "
operator|+
name|groupManager
argument_list|)
expr_stmt|;
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
name|groupManagerAccounts
operator|.
name|add
argument_list|(
name|groupManagerAccount
argument_list|)
expr_stmt|;
block|}
comment|//TODO remove this once the security implementation supports group managers
comment|//elevate to system user, so we can add groups to the user
name|Subject
name|systemUser
init|=
name|sm
operator|.
name|authenticate
argument_list|(
name|SecurityManager
operator|.
name|SYSTEM
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|broker
operator|.
name|setUser
argument_list|(
name|systemUser
argument_list|)
expr_stmt|;
comment|//create the group
name|group
operator|=
name|sm
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
comment|//add the managers to the group
for|for
control|(
name|Account
name|groupManagerAccount
range|:
name|groupManagerAccounts
control|)
block|{
name|groupManagerAccount
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|sm
operator|.
name|updateAccount
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|groupManagerAccount
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//deprecated, create the group
name|group
operator|=
name|sm
operator|.
name|addGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to create group: "
operator|+
name|group
argument_list|,
name|pde
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|exe
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to create group: "
operator|+
name|group
argument_list|,
name|exe
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|AuthenticationException
name|ae
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Failed to create group: "
operator|+
name|group
argument_list|,
name|ae
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//restore the original user
name|broker
operator|.
name|setUser
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
block|}
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
block|}
end_class

end_unit

