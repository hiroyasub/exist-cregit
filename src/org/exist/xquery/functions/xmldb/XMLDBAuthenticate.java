begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2010 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|xmldb
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|RequestWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|http
operator|.
name|servlets
operator|.
name|SessionWrapper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|request
operator|.
name|RequestModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|session
operator|.
name|SessionModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|JavaObjectValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|/**  * @author Wolfgang Meier (wolfgang@exist-db.org)  * @author Andrzej Taramina (andrzej@chaeron.com)  * @author ljo  */
end_comment

begin_class
specifier|public
class|class
name|XMLDBAuthenticate
extends|extends
name|UserSwitchingBasicFunction
block|{
specifier|private
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|XMLDBAuthenticate
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|authenticateSignature
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"authenticate"
argument_list|,
name|XMLDBModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XMLDBModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Check if the user, $user-id, can authenticate against the database collection $collection-uri. The function simply tries to "
operator|+
literal|"read the collection $collection-uri, using the credentials "
operator|+
literal|"$user-id and $password. "
operator|+
name|XMLDBModule
operator|.
name|COLLECTION_URI
operator|+
literal|" "
operator|+
literal|"It returns true if the authentication succeeds, false otherwise."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"collection-uri"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The collection URI"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"user-id"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The user-id"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"password"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The password"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() on successful authentication, false() otherwise"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|loginSignatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"login"
argument_list|,
name|XMLDBModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XMLDBModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Login the user, $user-id, and set it as the owner "
operator|+
literal|"of the currently executing XQuery. "
operator|+
name|XMLDBModule
operator|.
name|COLLECTION_URI
operator|+
literal|" "
operator|+
literal|"It returns true if the authentication succeeds, false otherwise. "
operator|+
literal|"If called from a HTTP context the login is cached for the "
operator|+
literal|"lifetime of the HTTP session and may be used for any XQuery "
operator|+
literal|"run in that session. "
operator|+
literal|"If an HTTP session does not already exist, none will be created."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"collection-uri"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The collection URI"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"user-id"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The user-id"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"password"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The password"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() on successful authentication and owner elevation, false() otherwise"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"login"
argument_list|,
name|XMLDBModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|XMLDBModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Login the user, $user-id, and set it as the owner "
operator|+
literal|"of the currently executing XQuery. "
operator|+
name|XMLDBModule
operator|.
name|COLLECTION_URI
operator|+
literal|" "
operator|+
literal|"It returns true() if the authentication succeeds, "
operator|+
literal|"false() otherwise. "
operator|+
literal|"If called from a HTTP context the login is cached for the "
operator|+
literal|"lifetime of the HTTP session and may be used for any XQuery"
operator|+
literal|"run in that session. "
operator|+
literal|"$create-session specifies whether to create an HTTP session on "
operator|+
literal|"successful authentication or not. "
operator|+
literal|"If $create-session is false() or the empty sequence no session "
operator|+
literal|"will be created if one does not already exist."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"collection-uri"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The collection URI"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"user-id"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The user-id"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"password"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The password"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"create-session"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"whether to create the session or not on successful authentication, default false()"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"true() on successful authentication and owner elevation, false() otherwise"
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|public
name|XMLDBAuthenticate
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
specifier|final
name|String
name|uri
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
specifier|final
name|String
name|userName
init|=
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
name|userName
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to authenticate username == NULL"
argument_list|)
expr_stmt|;
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
specifier|final
name|String
name|password
init|=
name|args
index|[
literal|2
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|createSession
init|=
name|args
operator|.
name|length
operator|>
literal|3
operator|&&
name|args
index|[
literal|3
index|]
operator|.
name|effectiveBooleanValue
argument_list|()
decl_stmt|;
specifier|final
name|XmldbURI
name|targetColl
decl_stmt|;
if|if
condition|(
operator|!
name|uri
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_SCHEME
operator|+
literal|':'
argument_list|)
condition|)
block|{
name|targetColl
operator|=
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|resolveCollectionPath
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|targetColl
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
try|try
block|{
specifier|final
name|Subject
name|user
decl_stmt|;
try|try
block|{
specifier|final
name|SecurityManager
name|sm
init|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|user
operator|=
name|sm
operator|.
name|authenticate
argument_list|(
name|userName
argument_list|,
name|password
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthenticationException
decl||
name|EXistException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to authenticate user: "
operator|+
name|userName
operator|+
literal|" "
operator|+
name|getLocation
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
specifier|final
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|targetColl
operator|.
name|toString
argument_list|()
argument_list|,
name|userName
argument_list|,
name|password
argument_list|)
decl_stmt|;
if|if
condition|(
name|root
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unable to authenticate user: target collection "
operator|+
name|targetColl
operator|+
literal|" does not exist "
operator|+
name|getLocation
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"login"
argument_list|)
condition|)
block|{
comment|//switch the user of the current broker
name|switchUser
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|//if there is a http session cache the user in the http session
name|cacheUserInHttpSession
argument_list|(
name|user
argument_list|,
name|createSession
argument_list|)
expr_stmt|;
block|}
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XMLDBException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|getLocation
argument_list|()
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
block|}
specifier|private
name|String
name|getLocation
parameter_list|()
block|{
return|return
literal|"@ "
operator|+
name|getContext
argument_list|()
operator|.
name|getXacmlSource
argument_list|()
operator|.
name|getKey
argument_list|()
operator|+
literal|" ["
operator|+
name|getLine
argument_list|()
operator|+
literal|":"
operator|+
name|getColumn
argument_list|()
operator|+
literal|"]"
return|;
block|}
comment|/**      * If there is a HTTP Session, then this will store the user object in the session under the key      * defined by XQueryContext.HTTP_SESSIONVAR_XMLDB_USER      *      * @param user          The User to cache in the session      * @param createSession Create session?      */
specifier|private
name|void
name|cacheUserInHttpSession
parameter_list|(
specifier|final
name|Subject
name|user
parameter_list|,
specifier|final
name|boolean
name|createSession
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Variable
name|var
init|=
name|getSessionVar
argument_list|(
name|createSession
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|!=
literal|null
operator|&&
name|var
operator|.
name|getValue
argument_list|()
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|getValue
argument_list|()
operator|.
name|getItemType
argument_list|()
operator|==
name|Type
operator|.
name|JAVA_OBJECT
condition|)
block|{
specifier|final
name|JavaObjectValue
name|session
init|=
operator|(
name|JavaObjectValue
operator|)
name|var
operator|.
name|getValue
argument_list|()
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|.
name|getObject
argument_list|()
operator|instanceof
name|SessionWrapper
condition|)
block|{
operator|(
operator|(
name|SessionWrapper
operator|)
name|session
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|setAttribute
argument_list|(
name|XQueryContext
operator|.
name|HTTP_SESSIONVAR_XMLDB_USER
argument_list|,
name|user
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * Get the HTTP Session variable. Create it if requested and it doesn't exist.      *      * @param createSession Create session?      */
specifier|private
name|Variable
name|getSessionVar
parameter_list|(
specifier|final
name|boolean
name|createSession
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|SessionModule
name|sessionModule
init|=
operator|(
name|SessionModule
operator|)
name|context
operator|.
name|getModule
argument_list|(
name|SessionModule
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
name|Variable
name|var
init|=
name|sessionModule
operator|.
name|resolveVariable
argument_list|(
name|SessionModule
operator|.
name|SESSION_VAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|createSession
operator|&&
operator|(
name|var
operator|==
literal|null
operator|||
name|var
operator|.
name|getValue
argument_list|()
operator|==
literal|null
operator|)
condition|)
block|{
specifier|final
name|RequestModule
name|reqModule
init|=
operator|(
name|RequestModule
operator|)
name|context
operator|.
name|getModule
argument_list|(
name|RequestModule
operator|.
name|NAMESPACE_URI
argument_list|)
decl_stmt|;
comment|// request object is read from global variable $request
specifier|final
name|Variable
name|reqVar
init|=
name|reqModule
operator|.
name|resolveVariable
argument_list|(
name|RequestModule
operator|.
name|REQUEST_VAR
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqVar
operator|==
literal|null
operator|||
name|reqVar
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"No request object found in the current XQuery context."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPDY0002
argument_list|,
literal|"No request object found in the current XQuery context."
argument_list|)
throw|;
block|}
if|if
condition|(
name|reqVar
operator|.
name|getValue
argument_list|()
operator|.
name|getItemType
argument_list|()
operator|!=
name|Type
operator|.
name|JAVA_OBJECT
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Variable $request is not bound to an Java object."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPDY0002
argument_list|,
literal|"Variable $request is not bound to an Java object."
argument_list|)
throw|;
block|}
specifier|final
name|JavaObjectValue
name|reqValue
init|=
operator|(
name|JavaObjectValue
operator|)
name|reqVar
operator|.
name|getValue
argument_list|()
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|reqValue
operator|.
name|getObject
argument_list|()
operator|instanceof
name|RequestWrapper
condition|)
block|{
specifier|final
name|SessionWrapper
name|session
init|=
operator|(
operator|(
name|RequestWrapper
operator|)
name|reqValue
operator|.
name|getObject
argument_list|()
operator|)
operator|.
name|getSession
argument_list|(
literal|true
argument_list|)
decl_stmt|;
name|var
operator|=
name|sessionModule
operator|.
name|declareVariable
argument_list|(
name|SessionModule
operator|.
name|SESSION_VAR
argument_list|,
name|session
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|var
return|;
block|}
block|}
end_class

end_unit

