begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2018 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|LockedDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|DigestType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|crypto
operator|.
name|digest
operator|.
name|MessageDigest
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
operator|.
name|FastByteArrayInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionDSL
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|util
operator|.
name|UtilModule
operator|.
name|functionSignature
import|;
end_import

begin_class
specifier|public
class|class
name|BinaryDoc
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|BinaryDoc
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|FS_PARAM_BINARY_RESOURCE
init|=
name|optParam
argument_list|(
literal|"binary-resource"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The path to the binary resource"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_BINARY_DOC_NAME
init|=
literal|"binary-doc"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_BINARY_DOC
init|=
name|functionSignature
argument_list|(
name|FS_BINARY_DOC_NAME
argument_list|,
literal|"Retrieves the binary resource and returns its contents as a "
operator|+
literal|"value of type xs:base64Binary. An empty sequence is returned if the resource "
operator|+
literal|"could not be found or $binary-resource was empty."
argument_list|,
name|returnsOpt
argument_list|(
name|Type
operator|.
name|BASE64_BINARY
argument_list|,
literal|"the binary document"
argument_list|)
argument_list|,
name|FS_PARAM_BINARY_RESOURCE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_BINARY_DOC_AVAILABLE_NAME
init|=
literal|"binary-doc-available"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_BINARY_DOC_AVAILABLE
init|=
name|functionSignature
argument_list|(
name|FS_BINARY_DOC_AVAILABLE_NAME
argument_list|,
literal|"Checks if the binary resource identified by $binary-resource is available."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|"true if the binary document is available"
argument_list|)
argument_list|,
name|FS_PARAM_BINARY_RESOURCE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_IS_BINARY_DOC_NAME
init|=
literal|"is-binary-doc"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_IS_BINARY_DOC
init|=
name|functionSignature
argument_list|(
name|FS_IS_BINARY_DOC_NAME
argument_list|,
literal|"Checks if the resource identified by $binary-resource is a binary resource."
argument_list|,
name|returns
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
literal|"true if the resource is a binary document"
argument_list|)
argument_list|,
name|FS_PARAM_BINARY_RESOURCE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|FS_BINARY_DOC_CONTENT_DIGEST_NAME
init|=
literal|"binary-doc-content-digest"
decl_stmt|;
specifier|static
specifier|final
name|FunctionSignature
name|FS_BINARY_DOC_CONTENT_DIGEST
init|=
name|functionSignature
argument_list|(
name|FS_BINARY_DOC_CONTENT_DIGEST_NAME
argument_list|,
literal|"Gets the digest of the content of the resource identified by $binary-resource."
argument_list|,
name|returnsOpt
argument_list|(
name|Type
operator|.
name|HEX_BINARY
argument_list|,
literal|"the digest of the content of the Binary Resource"
argument_list|)
argument_list|,
name|FS_PARAM_BINARY_RESOURCE
argument_list|,
name|param
argument_list|(
literal|"algorithm"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
literal|"The name of the algorithm to use for calculating the digest. Supports: "
operator|+
name|supportedAlgorithms
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|String
name|supportedAlgorithms
parameter_list|()
block|{
specifier|final
name|StringBuilder
name|builder
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|DigestType
name|digestType
range|:
name|DigestType
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|builder
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
name|builder
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|append
argument_list|(
name|digestType
operator|.
name|getCommonNames
argument_list|()
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|builder
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|BinaryDoc
parameter_list|(
specifier|final
name|XQueryContext
name|context
parameter_list|,
specifier|final
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
specifier|final
name|Sequence
index|[]
name|args
parameter_list|,
specifier|final
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Sequence
name|emptyParamReturnValue
init|=
operator|(
name|isCalledAs
argument_list|(
name|FS_BINARY_DOC_NAME
argument_list|)
operator|||
name|isCalledAs
argument_list|(
name|FS_BINARY_DOC_CONTENT_DIGEST_NAME
argument_list|)
operator|)
condition|?
name|Sequence
operator|.
name|EMPTY_SEQUENCE
else|:
name|BooleanValue
operator|.
name|FALSE
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|emptyParamReturnValue
return|;
block|}
specifier|final
name|String
name|path
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|LockedDocument
name|lockedDoc
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
init|;
init|)
block|{
if|if
condition|(
name|lockedDoc
operator|==
literal|null
condition|)
block|{
return|return
name|emptyParamReturnValue
return|;
block|}
specifier|final
name|DocumentImpl
name|doc
init|=
name|lockedDoc
operator|.
name|getDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
return|return
name|emptyParamReturnValue
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|FS_BINARY_DOC_NAME
argument_list|)
condition|)
block|{
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|continueOrBeginTransaction
argument_list|()
init|)
block|{
specifier|final
name|BinaryDocument
name|bin
init|=
operator|(
name|BinaryDocument
operator|)
name|doc
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBinaryResource
argument_list|(
name|transaction
argument_list|,
name|bin
argument_list|)
decl_stmt|;
specifier|final
name|Base64BinaryDocument
name|b64doc
init|=
name|Base64BinaryDocument
operator|.
name|getInstance
argument_list|(
name|context
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|b64doc
operator|.
name|setUrl
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|b64doc
return|;
block|}
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
name|FS_BINARY_DOC_CONTENT_DIGEST_NAME
argument_list|)
condition|)
block|{
specifier|final
name|String
name|algorithm
init|=
name|args
index|[
literal|1
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
specifier|final
name|DigestType
name|digestType
decl_stmt|;
try|try
block|{
name|digestType
operator|=
name|DigestType
operator|.
name|forCommonName
argument_list|(
name|algorithm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid algorithm: "
operator|+
name|algorithm
argument_list|,
name|e
argument_list|)
throw|;
block|}
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|BinaryDocument
name|bin
init|=
operator|(
name|BinaryDocument
operator|)
name|doc
decl_stmt|;
specifier|final
name|MessageDigest
name|messageDigest
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBinaryResourceContentDigest
argument_list|(
name|transaction
argument_list|,
name|bin
argument_list|,
name|digestType
argument_list|)
decl_stmt|;
specifier|final
name|InputStream
name|is
init|=
operator|new
name|FastByteArrayInputStream
argument_list|(
name|messageDigest
operator|.
name|getValue
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Sequence
name|result
init|=
name|BinaryValueFromInputStream
operator|.
name|getInstance
argument_list|(
name|context
argument_list|,
operator|new
name|HexBinaryValueType
argument_list|()
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|transaction
operator|.
name|commit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
else|else
block|{
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Invalid resource URI"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid resource uri"
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|path
operator|+
literal|": permission denied to read resource"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|path
operator|+
literal|": permission denied to read resource"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|TransactionException
name|e
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|path
operator|+
literal|": I/O error while reading resource"
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|path
operator|+
literal|": I/O error while reading resource"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

