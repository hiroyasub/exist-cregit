begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2009 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Converts the supplied number in given base to other base.  *  * @author ljo  */
end_comment

begin_class
specifier|public
class|class
name|BaseConverter
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|BaseConverter
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|number_param
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"number"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The number to convert"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|int_param
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"number"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The number to convert"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|base_param
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"base"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The base of $number"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionReturnSequenceType
name|int_result
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the xs:integer representation of $number in base $base"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|FunctionReturnSequenceType
name|string_result
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"the xs:string representation of $number in base $base"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"base-to-integer"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Converts the number $number from base $base to xs:integer."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|number_param
block|,
name|base_param
block|}
argument_list|,
name|int_result
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"integer-to-base"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Converts the xs:integer $number (unsigned) into base $base as xs:string. Bases 2, 8, and 16 are supported."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|int_param
block|,
name|base_param
block|}
argument_list|,
name|string_result
argument_list|)
block|}
decl_stmt|;
specifier|public
enum|enum
name|Base
block|{
name|BINARY
argument_list|(
literal|2
argument_list|)
block|,
name|OCTAL
argument_list|(
literal|8
argument_list|)
block|,
name|DECIMAL
argument_list|(
literal|10
argument_list|)
block|,
name|HEXADECIMAL
argument_list|(
literal|16
argument_list|)
block|;
specifier|public
specifier|final
name|int
name|base
decl_stmt|;
name|Base
parameter_list|(
name|int
name|base
parameter_list|)
block|{
name|this
operator|.
name|base
operator|=
name|base
expr_stmt|;
block|}
specifier|static
specifier|public
name|Base
name|getBase
parameter_list|(
name|int
name|otherBase
parameter_list|)
block|{
for|for
control|(
name|Base
name|b
range|:
name|Base
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
name|otherBase
operator|==
name|b
operator|.
name|base
condition|)
block|{
return|return
name|b
return|;
block|}
block|}
return|return
name|DECIMAL
return|;
block|}
block|}
specifier|public
name|BaseConverter
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)       * @see org.exist.xquery.Expression#eval(org.exist.dom.DocumentSet, org.exist.xquery.value.Sequence, org.exist.xquery.value.Item)       */
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|intValue
decl_stmt|;
name|String
name|stringValue
decl_stmt|;
name|String
name|number
init|=
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|int
name|intBase
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"base-to-integer"
argument_list|)
condition|)
block|{
name|intValue
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|,
name|intBase
argument_list|)
expr_stmt|;
return|return
operator|new
name|IntegerValue
argument_list|(
name|intValue
argument_list|)
return|;
block|}
else|else
block|{
switch|switch
condition|(
name|Base
operator|.
name|getBase
argument_list|(
name|intBase
argument_list|)
condition|)
block|{
case|case
name|BINARY
case|:
name|stringValue
operator|=
name|Integer
operator|.
name|toBinaryString
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|OCTAL
case|:
name|stringValue
operator|=
name|Integer
operator|.
name|toOctalString
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
break|break;
comment|//case DECIMAL:
comment|//stringValue = number;
comment|//break;
case|case
name|HEXADECIMAL
case|:
name|stringValue
operator|=
name|Integer
operator|.
name|toHexString
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|number
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Unhandled base for conversion target in integer-to-base()."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unhandled base for conversion target in integer-to-base()."
argument_list|)
throw|;
block|}
block|}
return|return
operator|new
name|StringValue
argument_list|(
name|stringValue
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

