begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-09 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Base64BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * @author Wolfgang Meier (wolfgang@exist-db.org)  *  */
end_comment

begin_class
specifier|public
class|class
name|DocumentNameOrId
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DocumentNameOrId
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|QN_DOCUMENT_NAME
init|=
operator|new
name|QName
argument_list|(
literal|"document-name"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|QN_DOCUMENT_ID
init|=
operator|new
name|QName
argument_list|(
literal|"document-id"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|QN_ABSOLUTE_RESOURCE_ID
init|=
operator|new
name|QName
argument_list|(
literal|"absolute-resource-id"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|QN_GET_RESOURCE_BY_ABSOLUTE_ID
init|=
operator|new
name|QName
argument_list|(
literal|"get-resource-by-absolute-id"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|SequenceType
index|[]
name|PARAMS
init|=
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"node-or-path"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The node or a string path pointing to a resource in the database."
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|docNameSignature
init|=
operator|new
name|FunctionSignature
argument_list|(
name|QN_DOCUMENT_NAME
argument_list|,
literal|"Returns the name of a document (excluding the collection path). The argument can either be "
operator|+
literal|"a node or a string path pointing to a resource in the database. If the resource does not exist or the node "
operator|+
literal|"does not belong to a stored document, the empty sequence is returned."
argument_list|,
name|PARAMS
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the name of the document"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|docIdSignature
init|=
operator|new
name|FunctionSignature
argument_list|(
name|QN_DOCUMENT_ID
argument_list|,
literal|"Returns the internal integer id of a document. The argument can either be "
operator|+
literal|"a node or a string path pointing to a resource in the database. If the resource does not exist or the node "
operator|+
literal|"does not belong to a stored document, the empty sequence is returned."
argument_list|,
name|PARAMS
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|INT
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the ID of the document"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|absoluteResourceIdSignature
init|=
operator|new
name|FunctionSignature
argument_list|(
name|QN_ABSOLUTE_RESOURCE_ID
argument_list|,
literal|"Returns the absolute internal id of a resource as a 65 bit number. The first 32 bits are the collection id, the next 32 bits are the document id, the last bit is the document type. The argument can either be "
operator|+
literal|"a node or a string path pointing to a resource in the database. If the resource does not exist or the node "
operator|+
literal|"does not belong to a stored document, the empty sequence is returned."
argument_list|,
name|PARAMS
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the absolute ID of the resource"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|resourceByAbsoluteIdSignature
init|=
operator|new
name|FunctionSignature
argument_list|(
name|QN_GET_RESOURCE_BY_ABSOLUTE_ID
argument_list|,
literal|"Returns the resource indicated by its absolute internal id. The first 32 bits are the collection id, the next 32 bits are the document id, the last bit is the document type. If the resource does not exist, the empty sequence is returned."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"absolute-id"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The absolute id of a resource in the database."
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The resource from the database. A document() if its an XML resource, or an xs:base64binary otherwise"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|DocumentNameOrId
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.BasicFunction#eval(org.exist.xquery.value.Sequence[], org.exist.xquery.value.Sequence) 	 */
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
name|result
init|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
condition|)
block|{
name|NodeValue
name|node
init|=
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|node
operator|.
name|getImplementationType
argument_list|()
operator|==
name|NodeValue
operator|.
name|PERSISTENT_NODE
condition|)
block|{
name|NodeProxy
name|proxy
init|=
operator|(
name|NodeProxy
operator|)
name|node
decl_stmt|;
name|doc
operator|=
name|proxy
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|String
name|path
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|doc
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLResource
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
specifier|final
name|QName
name|fnName
init|=
name|getSignature
argument_list|()
operator|.
name|getName
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|fnName
operator|.
name|equals
argument_list|(
name|QN_DOCUMENT_NAME
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|StringValue
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fnName
operator|.
name|equals
argument_list|(
name|QN_DOCUMENT_ID
argument_list|)
condition|)
block|{
name|result
operator|=
operator|new
name|IntegerValue
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|,
name|Type
operator|.
name|INT
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|fnName
operator|.
name|equals
argument_list|(
name|QN_ABSOLUTE_RESOURCE_ID
argument_list|)
condition|)
block|{
name|BigInteger
name|absoluteId
init|=
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|doc
operator|.
name|getCollection
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|shiftLeft
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|or
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|doc
operator|.
name|getDocId
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|shiftLeft
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|or
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|&
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
operator|new
name|IntegerValue
argument_list|(
name|absoluteId
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|fnName
operator|.
name|equals
argument_list|(
name|QN_GET_RESOURCE_BY_ABSOLUTE_ID
argument_list|)
condition|)
block|{
name|IntegerValue
name|absoluteIdParam
init|=
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|BigInteger
name|absoluteId
init|=
operator|(
name|BigInteger
operator|)
name|absoluteIdParam
operator|.
name|toJavaObject
argument_list|(
name|BigInteger
operator|.
name|class
argument_list|)
decl_stmt|;
name|byte
name|resourceType
init|=
name|absoluteId
operator|.
name|testBit
argument_list|(
literal|0
argument_list|)
condition|?
name|DocumentImpl
operator|.
name|BINARY_FILE
else|:
name|DocumentImpl
operator|.
name|XML_FILE
decl_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|shiftRight
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|documentId
init|=
name|absoluteId
operator|.
name|and
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|0xFFFFFFFF
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|absoluteId
operator|=
name|absoluteId
operator|.
name|shiftRight
argument_list|(
literal|32
argument_list|)
expr_stmt|;
name|int
name|collectionId
init|=
name|absoluteId
operator|.
name|and
argument_list|(
name|BigInteger
operator|.
name|valueOf
argument_list|(
literal|0xFFFFFFFF
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|doc
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getResourceById
argument_list|(
name|collectionId
argument_list|,
name|resourceType
argument_list|,
name|documentId
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|instanceof
name|BinaryDocument
condition|)
block|{
name|BinaryDocument
name|bin
init|=
operator|(
name|BinaryDocument
operator|)
name|doc
decl_stmt|;
name|InputStream
name|is
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getBinaryResource
argument_list|(
name|bin
argument_list|)
decl_stmt|;
name|Base64BinaryDocument
name|b64doc
init|=
name|Base64BinaryDocument
operator|.
name|getInstance
argument_list|(
name|context
argument_list|,
name|is
argument_list|)
decl_stmt|;
return|return
name|b64doc
return|;
block|}
else|else
block|{
return|return
operator|new
name|NodeProxy
argument_list|(
name|doc
argument_list|)
return|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|LockException
name|le
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Unable to lock resource"
argument_list|,
name|le
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Unable to read binary resource"
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Invalid resource uri: "
operator|+
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
operator|+
literal|": permission denied to read resource"
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

