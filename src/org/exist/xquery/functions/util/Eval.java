begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2009 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|SimpleTimeZone
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Callable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ExecutorService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Executors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|Future
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ThreadFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|SAXParserFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Namespaces
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|ReferenceNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|SAXAdapter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|UUIDGenerator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|FileSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|SourceFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|StringSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|LocalVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Profiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|EmptySequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|QNameValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|TimeUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_comment
comment|/**  * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|Eval
extends|extends
name|BasicFunction
block|{
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|EVAL_CONTEXT_ITEM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"eval-context-item"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the context item against which the expression will be evaluated"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|evalArgumentText
init|=
literal|"The expression to be evaluated.  If it is of type xs:string, the function "
operator|+
literal|"tries to execute this string as the query. If the first argument is of type xs:anyURI, "
operator|+
literal|"the function will try to load the query from the resource to which the URI resolves. "
operator|+
literal|"If the URI has no scheme, it is assumed that the query is stored in the db and the "
operator|+
literal|"URI is interpreted as a database path. This is the same as calling "
operator|+
literal|"util:eval(xs:anyURI('xmldb:exist:///db/test/test.xq')). "
operator|+
comment|//TODO : to be discussed ; until now, it's been used with a null context
literal|"The query inherits the current execution context, i.e. all "
operator|+
literal|"namespace declarations and variable declarations are visible from within the "
operator|+
literal|"inner expression. "
operator|+
literal|"The function returns an empty sequence if a whitespace string is passed."
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|contextArgumentText
init|=
literal|"The query inherits the context described by the XML fragment in this parameter. "
operator|+
literal|"It should have the format:\n"
operator|+
literal|"<static-context>\n"
operator|+
literal|"\t<output-size-limit value=\"-1\">\n"
operator|+
literal|"\t<unbind-namespace uri=\"http://exist.sourceforge.net/NS/exist\"/>\n"
operator|+
literal|"\t<current-dateTime value=\"dateTime\"/>\n"
operator|+
literal|"\t<implicit-timezone value=\"duration\"/>\n"
operator|+
literal|"\t<variable name=\"qname\">variable value</variable>\n"
operator|+
literal|"\t<default-context>explicitly provide default context here</default-context>\n"
operator|+
literal|"\t<mapModule namespace=\"uri\" uri=\"uri_to_module\"/>\n"
operator|+
literal|"</static-context>.\n"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|EVAL_ARGUMENT
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"expression"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
name|evalArgumentText
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|INLINE_CONTEXT
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"inline-context"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The inline context"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|CONTEXT_ARGUMENT
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"context"
argument_list|,
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
name|contextArgumentText
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|CACHE_FLAG
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"cache-flag"
argument_list|,
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The flag for whether the compiled query should be cached.  The cached query will be globally available within the db instance."
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionParameterSequenceType
name|EXTERNAL_VARIABLE
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"external-variable"
argument_list|,
name|Type
operator|.
name|ANY_TYPE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"External variables to be bound for the query that is being evaluated. Should be alternating variable QName and value."
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionReturnSequenceType
name|RETURN_NODE_TYPE
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|NODE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"the results of the evaluated XPath/XQuery expression"
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionReturnSequenceType
name|RETURN_THREADID_TYPE
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The ID of the asynchronously executing thread."
argument_list|)
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|FunctionReturnSequenceType
name|RETURN_ITEM_TYPE
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"the results of the evaluated XPath/XQuery expression"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|ExecutorService
name|asyncExecutorService
init|=
name|Executors
operator|.
name|newCachedThreadPool
argument_list|(
operator|new
name|AsyncQueryThreadFactory
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
class|class
name|AsyncQueryThreadFactory
implements|implements
name|ThreadFactory
block|{
specifier|private
name|int
name|id
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Thread
name|newThread
parameter_list|(
name|Runnable
name|r
parameter_list|)
block|{
return|return
operator|new
name|Thread
argument_list|(
name|r
argument_list|,
literal|"AsynchronousEval-"
operator|+
name|getId
argument_list|()
argument_list|)
return|;
block|}
specifier|private
specifier|synchronized
name|int
name|getId
parameter_list|()
block|{
return|return
name|id
operator|++
return|;
block|}
block|}
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signatures
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"eval"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Dynamically evaluates an XPath/XQuery expression. "
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|EVAL_ARGUMENT
block|}
argument_list|,
name|RETURN_NODE_TYPE
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"eval-async"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Dynamically evaluates an XPath/XQuery expression asynchronously. The ID of the executing thread is returned."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|EVAL_ARGUMENT
block|}
argument_list|,
name|RETURN_NODE_TYPE
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"eval"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Dynamically evaluates an XPath/XQuery expression. "
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|EVAL_ARGUMENT
block|,
name|CACHE_FLAG
block|}
argument_list|,
name|RETURN_NODE_TYPE
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"eval"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Dynamically evaluates an XPath/XQuery expression. "
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|EVAL_ARGUMENT
block|,
name|CACHE_FLAG
block|,
name|EXTERNAL_VARIABLE
block|}
argument_list|,
name|RETURN_NODE_TYPE
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"eval-with-context"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Dynamically evaluates an XPath/XQuery expression. "
operator|+
literal|""
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|EVAL_ARGUMENT
block|,
name|CONTEXT_ARGUMENT
block|,
name|CACHE_FLAG
block|}
argument_list|,
name|RETURN_NODE_TYPE
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"eval-with-context"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Dynamically evaluates an XPath/XQuery expression."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|EVAL_ARGUMENT
block|,
name|CONTEXT_ARGUMENT
block|,
name|CACHE_FLAG
block|,
name|EVAL_CONTEXT_ITEM
block|}
argument_list|,
name|RETURN_NODE_TYPE
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"eval-inline"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Dynamically evaluates an XPath/XQuery expression."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|INLINE_CONTEXT
block|,
name|EVAL_ARGUMENT
block|}
argument_list|,
name|RETURN_ITEM_TYPE
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"eval-inline"
argument_list|,
name|UtilModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|UtilModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Dynamically evaluates an XPath/XQuery expression."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|INLINE_CONTEXT
block|,
name|EVAL_ARGUMENT
block|,
name|CACHE_FLAG
block|}
argument_list|,
name|RETURN_ITEM_TYPE
argument_list|)
block|}
decl_stmt|;
comment|/**      * @param context      * @param signature      */
specifier|public
name|Eval
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.BasicFunction#eval(org.exist.xquery.value.Sequence[], org.exist.xquery.value.Sequence)      */
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"eval-async"
argument_list|)
condition|)
block|{
name|String
name|uuid
init|=
name|UUIDGenerator
operator|.
name|getUUID
argument_list|()
decl_stmt|;
name|CallableEval
name|asyncEval
init|=
operator|new
name|CallableEval
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|,
name|args
argument_list|)
decl_stmt|;
name|Future
argument_list|<
name|Sequence
argument_list|>
name|f
init|=
name|asyncExecutorService
operator|.
name|submit
argument_list|(
name|asyncEval
argument_list|)
decl_stmt|;
comment|//context.addAsyncQueryReference(f); //TODO keep a reference, so threads can be interogated/cancelled - perhaps a WeakReference?
return|return
operator|new
name|StringValue
argument_list|(
name|uuid
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|doEval
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|,
name|args
argument_list|)
return|;
block|}
block|}
specifier|private
class|class
name|CallableEval
implements|implements
name|Callable
argument_list|<
name|Sequence
argument_list|>
block|{
specifier|private
specifier|final
name|XQueryContext
name|callersContext
decl_stmt|;
specifier|private
specifier|final
name|Sequence
name|contextSequence
decl_stmt|;
specifier|private
specifier|final
name|Sequence
name|args
index|[]
decl_stmt|;
specifier|public
name|CallableEval
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|,
name|Sequence
name|args
index|[]
parameter_list|)
block|{
name|this
operator|.
name|callersContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|contextSequence
operator|=
name|contextSequence
expr_stmt|;
name|this
operator|.
name|args
operator|=
name|args
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|call
parameter_list|()
throws|throws
name|XPathException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|XQueryContext
name|context
init|=
name|callersContext
operator|.
name|copyContext
argument_list|()
decl_stmt|;
comment|//make a copy
name|broker
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|callersContext
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
comment|//get a new broker
name|context
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
return|return
name|doEval
argument_list|(
name|context
argument_list|,
name|contextSequence
argument_list|,
name|args
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unable to get new broker: "
operator|+
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|//release the broker
block|}
catch|catch
parameter_list|(
name|EXistException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|private
name|Sequence
name|doEval
parameter_list|(
name|XQueryContext
name|evalContext
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|,
name|Sequence
name|args
index|[]
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|evalContext
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|evalContext
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|evalContext
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
block|{
name|evalContext
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
block|}
name|int
name|argCount
init|=
literal|0
decl_stmt|;
name|Sequence
name|exprContext
init|=
literal|null
decl_stmt|;
name|Sequence
name|initContextSequence
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"eval-inline"
argument_list|)
condition|)
block|{
comment|// the current expression context
name|exprContext
operator|=
name|args
index|[
name|argCount
operator|++
index|]
expr_stmt|;
block|}
comment|// get the query expression
name|Item
name|expr
init|=
name|args
index|[
name|argCount
operator|++
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|Source
name|querySource
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|)
condition|)
block|{
name|querySource
operator|=
name|loadQueryFromURI
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
name|queryStr
init|=
name|expr
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
if|if
condition|(
literal|""
operator|.
name|equals
argument_list|(
name|queryStr
operator|.
name|trim
argument_list|()
argument_list|)
condition|)
block|{
return|return
operator|new
name|EmptySequence
argument_list|()
return|;
block|}
name|querySource
operator|=
operator|new
name|StringSource
argument_list|(
name|queryStr
argument_list|)
expr_stmt|;
block|}
name|NodeValue
name|contextInit
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"eval-with-context"
argument_list|)
condition|)
block|{
comment|// set the context initialization param for later use
name|contextInit
operator|=
operator|(
name|NodeValue
operator|)
name|args
index|[
name|argCount
operator|++
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// should the compiled query be cached?
name|boolean
name|cache
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|argCount
operator|<
name|getArgumentCount
argument_list|()
condition|)
block|{
name|cache
operator|=
operator|(
operator|(
name|BooleanValue
operator|)
name|args
index|[
name|argCount
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|effectiveBooleanValue
argument_list|()
expr_stmt|;
block|}
comment|// save some context properties
name|evalContext
operator|.
name|pushNamespaceContext
argument_list|()
expr_stmt|;
name|LocalVariable
name|mark
init|=
name|evalContext
operator|.
name|markLocalVariables
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|DocumentSet
name|oldDocs
init|=
name|evalContext
operator|.
name|getStaticallyKnownDocuments
argument_list|()
decl_stmt|;
if|if
condition|(
name|exprContext
operator|!=
literal|null
condition|)
block|{
name|evalContext
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|exprContext
operator|.
name|getDocumentSet
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|evalContext
operator|.
name|isProfilingEnabled
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|evalContext
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|,
literal|"eval: "
operator|+
name|expr
argument_list|)
expr_stmt|;
block|}
comment|// fixme! - hook for debugger here /ljo
name|Sequence
name|sequence
init|=
literal|null
decl_stmt|;
name|XQuery
name|xqueryService
init|=
name|evalContext
operator|.
name|getBroker
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryContext
name|innerContext
decl_stmt|;
if|if
condition|(
name|contextInit
operator|!=
literal|null
condition|)
block|{
comment|// eval-with-context: initialize a new context
name|innerContext
operator|=
name|xqueryService
operator|.
name|newContext
argument_list|(
name|evalContext
operator|.
name|getAccessContext
argument_list|()
argument_list|)
expr_stmt|;
name|initContextSequence
operator|=
name|initContext
argument_list|(
name|contextInit
operator|.
name|getNode
argument_list|()
argument_list|,
name|innerContext
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// use the existing outer context
comment|// TODO: check if copying the static context would be sufficient???
name|innerContext
operator|=
name|evalContext
operator|.
name|copyContext
argument_list|()
expr_stmt|;
name|innerContext
operator|.
name|setShared
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//innerContext = context;
block|}
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|expr
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|)
condition|)
block|{
name|String
name|uri
init|=
literal|null
decl_stmt|;
name|Object
name|key
init|=
name|querySource
operator|.
name|getKey
argument_list|()
decl_stmt|;
if|if
condition|(
name|key
operator|instanceof
name|XmldbURI
condition|)
block|{
name|uri
operator|=
operator|(
operator|(
name|XmldbURI
operator|)
name|key
operator|)
operator|.
name|removeLastSegment
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
comment|//			} else if (key instanceof URL) {
comment|//        		TODO: uri = ((URL) key).getParent()
block|}
if|else if
condition|(
name|key
operator|instanceof
name|String
operator|&&
name|querySource
operator|instanceof
name|FileSource
condition|)
block|{
name|uri
operator|=
operator|(
operator|(
name|FileSource
operator|)
name|querySource
operator|)
operator|.
name|getFile
argument_list|()
operator|.
name|getParent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|uri
operator|!=
literal|null
condition|)
name|innerContext
operator|.
name|setModuleLoadPath
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
comment|//bind external vars?
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"eval"
argument_list|)
operator|&&
name|getArgumentCount
argument_list|()
operator|==
literal|3
condition|)
block|{
if|if
condition|(
operator|!
name|args
index|[
literal|2
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Sequence
name|externalVars
init|=
name|args
index|[
literal|2
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|externalVars
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Item
name|varName
init|=
name|externalVars
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|varName
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|QNAME
condition|)
block|{
name|Item
name|varValue
init|=
name|externalVars
operator|.
name|itemAt
argument_list|(
operator|++
name|i
argument_list|)
decl_stmt|;
name|innerContext
operator|.
name|declareVariable
argument_list|(
operator|(
operator|(
name|QNameValue
operator|)
name|varName
operator|)
operator|.
name|getQName
argument_list|()
argument_list|,
name|varValue
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
comment|// fixme! - hook for debugger here /ljo
try|try
block|{
if|if
condition|(
name|this
operator|.
name|getArgumentCount
argument_list|()
operator|==
literal|4
condition|)
block|{
name|NodeValue
name|contextItem
init|=
operator|(
name|NodeValue
operator|)
name|args
index|[
literal|3
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
block|{
comment|//TODO : sort this out
if|if
condition|(
name|exprContext
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"exprContext and contextItem are not null"
argument_list|)
expr_stmt|;
block|}
name|exprContext
operator|=
name|contextItem
operator|.
name|toSequence
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|initContextSequence
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"there now"
argument_list|)
expr_stmt|;
name|exprContext
operator|=
name|initContextSequence
expr_stmt|;
block|}
try|try
block|{
return|return
name|execute
argument_list|(
name|evalContext
operator|.
name|getBroker
argument_list|()
argument_list|,
name|xqueryService
argument_list|,
name|querySource
argument_list|,
name|innerContext
argument_list|,
name|exprContext
argument_list|,
name|cache
argument_list|)
return|;
block|}
finally|finally
block|{
name|cleanup
argument_list|(
name|evalContext
argument_list|,
name|innerContext
argument_list|,
name|oldDocs
argument_list|,
name|mark
argument_list|,
name|expr
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
try|try
block|{
name|e
operator|.
name|prependMessage
argument_list|(
literal|"Error while evaluating expression: "
operator|+
name|querySource
operator|.
name|getContent
argument_list|()
operator|+
literal|". "
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
block|}
name|e
operator|.
name|setLocation
argument_list|(
name|line
argument_list|,
name|column
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
specifier|private
name|void
name|cleanup
parameter_list|(
name|XQueryContext
name|evalContext
parameter_list|,
name|XQueryContext
name|innerContext
parameter_list|,
name|DocumentSet
name|oldDocs
parameter_list|,
name|LocalVariable
name|mark
parameter_list|,
name|Item
name|expr
parameter_list|,
name|Sequence
name|sequence
parameter_list|)
block|{
if|if
condition|(
name|innerContext
operator|!=
name|evalContext
condition|)
block|{
name|innerContext
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|oldDocs
operator|!=
literal|null
condition|)
block|{
name|evalContext
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|oldDocs
argument_list|)
expr_stmt|;
block|}
name|evalContext
operator|.
name|popLocalVariables
argument_list|(
name|mark
argument_list|)
expr_stmt|;
name|evalContext
operator|.
name|popNamespaceContext
argument_list|()
expr_stmt|;
if|if
condition|(
name|evalContext
operator|.
name|isProfilingEnabled
argument_list|(
literal|2
argument_list|)
condition|)
block|{
name|evalContext
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|"eval: "
operator|+
name|expr
argument_list|,
name|sequence
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Sequence
name|execute
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|XQuery
name|xqueryService
parameter_list|,
name|Source
name|querySource
parameter_list|,
name|XQueryContext
name|innerContext
parameter_list|,
name|Sequence
name|exprContext
parameter_list|,
name|boolean
name|cache
parameter_list|)
throws|throws
name|XPathException
block|{
name|CompiledXQuery
name|compiled
init|=
literal|null
decl_stmt|;
name|XQueryPool
name|pool
init|=
name|xqueryService
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
try|try
block|{
name|compiled
operator|=
name|cache
condition|?
name|pool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|querySource
argument_list|)
else|:
literal|null
expr_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|compiled
operator|=
name|xqueryService
operator|.
name|compile
argument_list|(
name|innerContext
argument_list|,
name|querySource
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compiled
operator|.
name|getContext
argument_list|()
operator|.
name|updateContext
argument_list|(
name|innerContext
argument_list|)
expr_stmt|;
name|compiled
operator|.
name|getContext
argument_list|()
operator|.
name|setBroker
argument_list|(
name|broker
argument_list|)
expr_stmt|;
comment|//will then use a new broker for the new thread if this is eval-async
block|}
name|Sequence
name|sequence
init|=
name|xqueryService
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
name|exprContext
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|ValueSequence
name|newSeq
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
name|newSeq
operator|.
name|keepUnOrdered
argument_list|(
name|unordered
argument_list|)
expr_stmt|;
name|boolean
name|hasSupplements
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sequence
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
comment|//if (sequence.itemAt(i) instanceof StringValue) {
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|sequence
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|newSeq
operator|.
name|add
argument_list|(
operator|new
name|StringValue
argument_list|(
operator|(
operator|(
name|StringValue
operator|)
name|sequence
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getStringValue
argument_list|(
literal|true
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|hasSupplements
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|newSeq
operator|.
name|add
argument_list|(
name|sequence
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|hasSupplements
condition|)
block|{
name|sequence
operator|=
name|newSeq
expr_stmt|;
block|}
return|return
name|sequence
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|compiled
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|cache
condition|)
block|{
name|pool
operator|.
name|returnCompiledXQuery
argument_list|(
name|querySource
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|compiled
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
comment|/**      * @param expr      * @return      * @throws XPathException      * @throws NullPointerException      * @throws IllegalArgumentException      */
specifier|private
name|Source
name|loadQueryFromURI
parameter_list|(
name|Item
name|expr
parameter_list|)
throws|throws
name|XPathException
throws|,
name|NullPointerException
throws|,
name|IllegalArgumentException
block|{
name|String
name|location
init|=
name|expr
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|Source
name|querySource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|location
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
operator|<
literal|0
operator|||
name|location
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
condition|)
block|{
try|try
block|{
name|XmldbURI
name|locationUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|location
argument_list|)
decl_stmt|;
comment|// If location is relative (does not contain any / and does
comment|// not start with . or .. then the path of the module need to
comment|// be added.
if|if
condition|(
name|location
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
operator|<
literal|0
operator|||
name|location
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|XmldbURI
name|moduleLoadPathUri
init|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|context
operator|.
name|getModuleLoadPath
argument_list|()
argument_list|)
decl_stmt|;
name|locationUri
operator|=
name|moduleLoadPathUri
operator|.
name|resolveCollectionPath
argument_list|(
name|locationUri
argument_list|)
expr_stmt|;
block|}
name|DocumentImpl
name|sourceDoc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|sourceDoc
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getXMLResource
argument_list|(
name|locationUri
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceDoc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"source for module "
operator|+
name|location
operator|+
literal|" not found in database"
argument_list|)
throw|;
if|if
condition|(
name|sourceDoc
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
operator|||
operator|!
name|sourceDoc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
operator|.
name|equals
argument_list|(
literal|"application/xquery"
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"source for module "
operator|+
name|location
operator|+
literal|" is not an XQuery or "
operator|+
literal|"declares a wrong mime-type"
argument_list|)
throw|;
name|querySource
operator|=
operator|new
name|DBSource
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|sourceDoc
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"permission denied to read module source from "
operator|+
name|location
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|sourceDoc
operator|!=
literal|null
condition|)
name|sourceDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// No. Load from file or URL
try|try
block|{
comment|//TODO: use URIs to ensure proper resolution of relative locations
name|querySource
operator|=
name|SourceFactory
operator|.
name|getSource
argument_list|(
name|context
operator|.
name|getBroker
argument_list|()
argument_list|,
name|context
operator|.
name|getModuleLoadPath
argument_list|()
argument_list|,
name|location
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"source location for query at "
operator|+
name|location
operator|+
literal|" should be a valid URL: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"source for query at "
operator|+
name|location
operator|+
literal|" not found: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Permission denied to access query at "
operator|+
name|location
operator|+
literal|" : "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|querySource
return|;
block|}
comment|/** 	 * Read to optional static-context fragment to initialize 	 * the context. 	 * 	 * @param root 	 * @param innerContext 	 * @throws XPathException 	 */
specifier|private
name|Sequence
name|initContext
parameter_list|(
name|Node
name|root
parameter_list|,
name|XQueryContext
name|innerContext
parameter_list|)
throws|throws
name|XPathException
block|{
name|NodeList
name|cl
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Sequence
name|result
init|=
literal|null
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|child
init|=
name|cl
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//TODO : more check on attributes existence and on their values
if|if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
literal|"variable"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|String
name|qname
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
name|String
name|source
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
name|NodeValue
name|value
decl_stmt|;
if|if
condition|(
name|source
operator|!=
literal|null
operator|&&
name|source
operator|.
name|length
argument_list|()
operator|>
literal|0
condition|)
block|{
comment|// load variable contents from URI
name|value
operator|=
name|loadVarFromURI
argument_list|(
name|source
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|value
operator|=
operator|(
name|NodeValue
operator|)
name|elem
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|ReferenceNode
condition|)
name|value
operator|=
operator|(
operator|(
name|ReferenceNode
operator|)
name|value
operator|)
operator|.
name|getReference
argument_list|()
expr_stmt|;
block|}
name|String
name|type
init|=
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"type"
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|!=
literal|null
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
name|type
argument_list|)
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|)
condition|)
block|{
name|innerContext
operator|.
name|declareVariable
argument_list|(
name|qname
argument_list|,
name|value
operator|.
name|atomize
argument_list|()
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|getType
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|innerContext
operator|.
name|declareVariable
argument_list|(
name|qname
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
literal|"output-size-limit"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
comment|//TODO : error check
name|innerContext
operator|.
name|getWatchDog
argument_list|()
operator|.
name|setMaxNodes
argument_list|(
name|Integer
operator|.
name|valueOf
argument_list|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
literal|"current-dateTime"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
comment|//TODO : error check
name|DateTimeValue
name|dtv
init|=
operator|new
name|DateTimeValue
argument_list|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|innerContext
operator|.
name|setCalendar
argument_list|(
name|dtv
operator|.
name|calendar
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
literal|"implicit-timezone"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
comment|//TODO : error check
name|Duration
name|duration
init|=
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|newDuration
argument_list|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"value"
argument_list|)
argument_list|)
decl_stmt|;
name|innerContext
operator|.
name|setTimeZone
argument_list|(
operator|new
name|SimpleTimeZone
argument_list|(
operator|(
name|int
operator|)
name|duration
operator|.
name|getTimeInMillis
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
argument_list|,
literal|"XQuery context"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
literal|"unbind-namespace"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
comment|//TODO : error check
if|if
condition|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"uri"
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|innerContext
operator|.
name|removeNamespace
argument_list|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"uri"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
literal|"staticallyKnownDocuments"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
comment|//TODO : iterate over the children
name|NodeValue
name|value
init|=
operator|(
name|NodeValue
operator|)
name|elem
operator|.
name|getFirstChild
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|instanceof
name|ReferenceNode
condition|)
name|value
operator|=
operator|(
operator|(
name|ReferenceNode
operator|)
name|value
operator|)
operator|.
name|getReference
argument_list|()
expr_stmt|;
name|XmldbURI
index|[]
name|pathes
init|=
operator|new
name|XmldbURI
index|[
literal|1
index|]
decl_stmt|;
comment|//TODO : aggregate !
comment|//TODO : cleanly seperate the statically know docollection and documents
name|pathes
index|[
literal|0
index|]
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|value
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
name|innerContext
operator|.
name|setStaticallyKnownDocuments
argument_list|(
name|pathes
argument_list|)
expr_stmt|;
block|}
comment|/*else if (child.getNodeType() == Node.ELEMENT_NODE&&	"mapModule".equals(child.getLocalName())) { 				Element elem = (Element) child; 				//TODO : error check 				if (elem.getAttribute("namespace") != null&& elem.getAttribute("uri") != null) { 					innerContext.mapModule(elem.getAttribute("namespace"), 							XmldbURI.create(elem.getAttribute("uri"))); 				} 			} */
if|else if
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
literal|"default-context"
operator|.
name|equals
argument_list|(
name|child
operator|.
name|getLocalName
argument_list|()
argument_list|)
condition|)
block|{
name|Element
name|elem
init|=
operator|(
name|Element
operator|)
name|child
decl_stmt|;
name|NodeValue
name|nodevalue
init|=
operator|(
name|NodeValue
operator|)
name|elem
decl_stmt|;
name|result
operator|=
name|nodevalue
operator|.
name|toSequence
argument_list|()
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|private
name|NodeImpl
name|loadVarFromURI
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|uri
argument_list|)
decl_stmt|;
name|InputStreamReader
name|isr
init|=
operator|new
name|InputStreamReader
argument_list|(
name|url
operator|.
name|openStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|SAXParserFactory
name|factory
init|=
name|SAXParserFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|InputSource
name|src
init|=
operator|new
name|InputSource
argument_list|(
name|isr
argument_list|)
decl_stmt|;
name|SAXParser
name|parser
init|=
name|factory
operator|.
name|newSAXParser
argument_list|()
decl_stmt|;
name|XMLReader
name|xr
init|=
name|parser
operator|.
name|getXMLReader
argument_list|()
decl_stmt|;
name|SAXAdapter
name|adapter
init|=
operator|new
name|SAXAdapter
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|xr
operator|.
name|setContentHandler
argument_list|(
name|adapter
argument_list|)
expr_stmt|;
name|xr
operator|.
name|setProperty
argument_list|(
name|Namespaces
operator|.
name|SAX_LEXICAL_HANDLER
argument_list|,
name|adapter
argument_list|)
expr_stmt|;
name|xr
operator|.
name|parse
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|isr
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
operator|(
name|NodeImpl
operator|)
name|adapter
operator|.
name|getDocument
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

