begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2005-2009 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Profiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AbstractDateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DayTimeDurationValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Implements the xpath-functions for timezone adjustment   *  */
end_comment

begin_class
specifier|public
class|class
name|FunAdjustTimezone
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionParameterSequenceType
name|DATE_TIME_01_PARAM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"date-time"
argument_list|,
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the date-time"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionParameterSequenceType
name|DATE_01_PARAM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"date"
argument_list|,
name|Type
operator|.
name|DATE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the date"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionParameterSequenceType
name|TIME_01_PARAM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"time"
argument_list|,
name|Type
operator|.
name|TIME
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the time"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionParameterSequenceType
name|DURATION_01_PARAM
init|=
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"duration"
argument_list|,
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the duration"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionReturnSequenceType
name|DATE_TIME_01_RETURN
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the adjusted date-time"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionReturnSequenceType
name|DATE_01_RETURN
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the adjusted date"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionReturnSequenceType
name|TIME_01_RETURN
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|TIME
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"the adjusted time"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|fnAdjustDateTimeToTimezone
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"adjust-dateTime-to-timezone"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Adjusts an xs:dateTime value to the implicit timezone of the current locale."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|DATE_TIME_01_PARAM
block|}
argument_list|,
name|DATE_TIME_01_RETURN
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"adjust-dateTime-to-timezone"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Adjusts an xs:dateTime value to a specific timezone, or to no timezone at all. "
operator|+
literal|"If $duration is the empty sequence, returns an xs:dateTime without a timezone."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|DATE_TIME_01_PARAM
block|,
name|DURATION_01_PARAM
block|}
argument_list|,
name|DATE_TIME_01_RETURN
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|fnAdjustDateToTimezone
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"adjust-date-to-timezone"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Adjusts an xs:date value to the implicit timezone of the current locale."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|DATE_01_PARAM
block|}
argument_list|,
name|DATE_01_RETURN
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"adjust-date-to-timezone"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Adjusts an xs:date value to a specific timezone, or to no timezone at all. "
operator|+
literal|"If $duration is the empty sequence, returns an xs:date without a timezone."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|DATE_01_PARAM
block|,
name|DURATION_01_PARAM
block|}
argument_list|,
name|DATE_01_RETURN
argument_list|)
block|}
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|fnAdjustTimeToTimezone
index|[]
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"adjust-time-to-timezone"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Adjusts an xs:time value to the implicit timezone of the current locale."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|TIME_01_PARAM
block|}
argument_list|,
name|TIME_01_RETURN
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"adjust-time-to-timezone"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Adjusts an xs:time value to a specific timezone, or to no timezone at all. "
operator|+
literal|"If $duration is the empty sequence, returns an xs:time without a timezone."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
name|TIME_01_PARAM
block|,
name|DURATION_01_PARAM
block|}
argument_list|,
name|TIME_01_RETURN
argument_list|)
block|}
decl_stmt|;
specifier|public
name|FunAdjustTimezone
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
name|Sequence
name|result
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
expr_stmt|;
else|else
block|{
name|AbstractDateTimeValue
name|time
init|=
operator|(
name|AbstractDateTimeValue
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|getSignature
argument_list|()
operator|.
name|getArgumentCount
argument_list|()
operator|==
literal|2
condition|)
block|{
if|if
condition|(
name|args
index|[
literal|1
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|=
name|time
operator|.
name|withoutTimezone
argument_list|()
expr_stmt|;
else|else
block|{
name|DayTimeDurationValue
name|offset
init|=
operator|(
name|DayTimeDurationValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|result
operator|=
name|time
operator|.
name|adjustedToTimezone
argument_list|(
name|offset
argument_list|)
expr_stmt|;
block|}
block|}
else|else
name|result
operator|=
name|time
operator|.
name|adjustedToTimezone
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|""
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

