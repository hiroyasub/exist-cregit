begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|GlobCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|MalformedPatternException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternCompiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|PatternMatcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|oro
operator|.
name|text
operator|.
name|regex
operator|.
name|Perl5Matcher
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|ExtArrayNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|NativeTextEngine
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|TextToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  *  near() function.  *  *@author     Wolfgang Meier<wolfgang@exist-db.org>  *@created    July 31, 2002  */
end_comment

begin_class
specifier|public
class|class
name|ExtNear
extends|extends
name|ExtFulltext
block|{
specifier|private
name|int
name|max_distance
init|=
literal|1
decl_stmt|;
specifier|private
name|PatternCompiler
name|globCompiler
init|=
operator|new
name|GlobCompiler
argument_list|()
decl_stmt|;
specifier|private
name|Expression
name|distance
init|=
literal|null
decl_stmt|;
specifier|public
name|ExtNear
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|Constants
operator|.
name|FULLTEXT_AND
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|evalQuery
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|String
name|searchArg
parameter_list|,
name|NodeSet
name|nodes
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|distance
operator|!=
literal|null
condition|)
name|max_distance
operator|=
operator|(
operator|(
name|IntegerValue
operator|)
name|distance
operator|.
name|eval
argument_list|(
name|nodes
argument_list|)
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|)
operator|)
operator|.
name|getInt
argument_list|()
expr_stmt|;
try|try
block|{
name|getSearchTerms
argument_list|(
name|context
argument_list|,
name|searchArg
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|NodeSet
name|hits
init|=
name|processQuery
argument_list|(
name|context
argument_list|,
name|nodes
argument_list|)
decl_stmt|;
if|if
condition|(
name|hits
operator|==
literal|null
condition|)
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
comment|//LOG.debug("scanning " + hits.getLength() + " matches ...");
name|boolean
name|hasWildcards
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|terms
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|hasWildcards
operator||=
name|NativeTextEngine
operator|.
name|containsWildcards
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
name|hasWildcards
condition|?
name|patternMatch
argument_list|(
name|context
argument_list|,
name|hits
argument_list|)
else|:
name|exactMatch
argument_list|(
name|context
argument_list|,
name|hits
argument_list|)
return|;
block|}
specifier|private
name|Sequence
name|exactMatch
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|NodeSet
name|result
parameter_list|)
block|{
comment|// walk through hits and calculate term-distances
name|String
name|value
decl_stmt|;
name|String
name|term
decl_stmt|;
name|String
name|word
decl_stmt|;
name|TextToken
name|token
decl_stmt|;
name|NodeProxy
name|current
decl_stmt|;
name|NodeSet
name|r
init|=
operator|new
name|ExtArrayNodeSet
argument_list|()
decl_stmt|;
name|Tokenizer
name|tok
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getTextEngine
argument_list|()
operator|.
name|getTokenizer
argument_list|()
decl_stmt|;
name|int
name|j
decl_stmt|;
name|int
name|distance
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|result
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|current
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|value
operator|=
name|current
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
name|tok
operator|.
name|setText
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|j
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|j
operator|<
name|terms
operator|.
name|length
condition|)
name|term
operator|=
name|terms
index|[
name|j
index|]
expr_stmt|;
else|else
break|break;
name|distance
operator|=
operator|-
literal|1
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|word
operator|=
name|token
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|distance
operator|>
name|max_distance
condition|)
block|{
comment|// reset
name|j
operator|=
literal|0
expr_stmt|;
name|term
operator|=
name|terms
index|[
name|j
index|]
expr_stmt|;
name|distance
operator|=
operator|-
literal|1
expr_stmt|;
block|}
comment|// that else would cause some words to be ignored in the matching
if|if
condition|(
name|word
operator|.
name|equalsIgnoreCase
argument_list|(
name|term
argument_list|)
condition|)
block|{
name|distance
operator|=
literal|0
expr_stmt|;
name|j
operator|++
expr_stmt|;
if|if
condition|(
name|j
operator|==
name|terms
operator|.
name|length
condition|)
block|{
comment|// all terms found
name|r
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
name|term
operator|=
name|terms
index|[
name|j
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|j
operator|>
literal|0
operator|&&
name|word
operator|.
name|equalsIgnoreCase
argument_list|(
name|terms
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// first search term found: start again
name|j
operator|=
literal|1
expr_stmt|;
name|term
operator|=
name|terms
index|[
name|j
index|]
expr_stmt|;
name|distance
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
comment|// that else MAY cause the distance count to be off by one but i'm not sure
if|if
condition|(
operator|-
literal|1
operator|<
name|distance
condition|)
operator|++
name|distance
expr_stmt|;
block|}
block|}
comment|//LOG.debug("found " + r.getLength());
return|return
name|r
return|;
block|}
specifier|private
name|Sequence
name|patternMatch
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|NodeSet
name|result
parameter_list|)
block|{
comment|// generate list of search term patterns
name|Pattern
name|patterns
index|[]
init|=
operator|new
name|Pattern
index|[
name|terms
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|patterns
operator|.
name|length
condition|;
name|i
operator|++
control|)
try|try
block|{
name|patterns
index|[
name|i
index|]
operator|=
name|globCompiler
operator|.
name|compile
argument_list|(
name|terms
index|[
name|i
index|]
argument_list|,
name|GlobCompiler
operator|.
name|CASE_INSENSITIVE_MASK
operator||
name|GlobCompiler
operator|.
name|QUESTION_MATCHES_ZERO_OR_ONE_MASK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedPatternException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"malformed pattern"
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
comment|// walk through hits and calculate term-distances
name|String
name|value
decl_stmt|;
name|Pattern
name|term
decl_stmt|;
name|String
name|word
decl_stmt|;
name|TextToken
name|token
decl_stmt|;
name|NodeProxy
name|current
decl_stmt|;
name|ExtArrayNodeSet
name|r
init|=
operator|new
name|ExtArrayNodeSet
argument_list|(
literal|100
argument_list|)
decl_stmt|;
name|PatternMatcher
name|matcher
init|=
operator|new
name|Perl5Matcher
argument_list|()
decl_stmt|;
name|Tokenizer
name|tok
init|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getTextEngine
argument_list|()
operator|.
name|getTokenizer
argument_list|()
decl_stmt|;
name|int
name|j
decl_stmt|;
name|int
name|distance
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|result
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|current
operator|=
operator|(
name|NodeProxy
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|value
operator|=
name|current
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
name|tok
operator|.
name|setText
argument_list|(
name|value
argument_list|)
expr_stmt|;
name|j
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|j
operator|<
name|patterns
operator|.
name|length
condition|)
name|term
operator|=
name|patterns
index|[
name|j
index|]
expr_stmt|;
else|else
break|break;
name|distance
operator|=
operator|-
literal|1
expr_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|tok
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|word
operator|=
name|token
operator|.
name|getText
argument_list|()
operator|.
name|toLowerCase
argument_list|()
expr_stmt|;
if|if
condition|(
name|distance
operator|>
name|max_distance
condition|)
block|{
comment|// reset
name|j
operator|=
literal|0
expr_stmt|;
name|term
operator|=
name|patterns
index|[
name|j
index|]
expr_stmt|;
name|distance
operator|=
operator|-
literal|1
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|matcher
operator|.
name|matches
argument_list|(
name|word
argument_list|,
name|term
argument_list|)
condition|)
block|{
name|distance
operator|=
literal|0
expr_stmt|;
name|j
operator|++
expr_stmt|;
if|if
condition|(
name|j
operator|==
name|patterns
operator|.
name|length
condition|)
block|{
comment|// all terms found
name|r
operator|.
name|add
argument_list|(
name|current
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
name|term
operator|=
name|patterns
index|[
name|j
index|]
expr_stmt|;
block|}
if|else if
condition|(
name|j
operator|>
literal|0
operator|&&
name|matcher
operator|.
name|matches
argument_list|(
name|word
argument_list|,
name|patterns
index|[
literal|0
index|]
argument_list|)
condition|)
block|{
comment|// first search term found: start again
name|j
operator|=
literal|1
expr_stmt|;
name|term
operator|=
name|patterns
index|[
name|j
index|]
expr_stmt|;
name|distance
operator|=
literal|0
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
operator|-
literal|1
operator|<
name|distance
condition|)
operator|++
name|distance
expr_stmt|;
block|}
block|}
return|return
name|r
return|;
block|}
specifier|public
name|String
name|pprint
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"near("
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|path
operator|.
name|pprint
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|", "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|searchTerm
operator|.
name|pprint
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|setDistance
parameter_list|(
name|Expression
name|expr
parameter_list|)
block|{
name|distance
operator|=
name|expr
expr_stmt|;
block|}
block|}
end_class

end_unit

