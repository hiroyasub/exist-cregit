begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|text
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|TermMatcher
import|;
end_import

begin_comment
comment|/**  * A fuzzy implementation of {@link org.exist.storage.TermMatcher}. It calculates  * the  Levenshtein distance between the index and the search term.  *   * @author Wolfgang Meier (wolfgang@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|FuzzyMatcher
implements|implements
name|TermMatcher
block|{
specifier|private
name|String
name|searchTerm
decl_stmt|;
specifier|private
name|int
name|termLength
decl_stmt|;
specifier|private
name|double
name|threshold
init|=
literal|0.5
decl_stmt|;
specifier|public
name|FuzzyMatcher
parameter_list|(
name|String
name|searchTerm
parameter_list|,
name|double
name|threshold
parameter_list|)
block|{
name|this
operator|.
name|searchTerm
operator|=
name|searchTerm
expr_stmt|;
name|this
operator|.
name|termLength
operator|=
name|searchTerm
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|threshold
operator|=
name|threshold
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.storage.TermMatcher#matches(java.lang.String) 	 */
specifier|public
name|boolean
name|matches
parameter_list|(
name|CharSequence
name|text
parameter_list|)
block|{
if|if
condition|(
name|searchTerm
operator|.
name|equals
argument_list|(
name|text
argument_list|)
condition|)
return|return
literal|true
return|;
name|int
name|textlen
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|dist
init|=
name|editDistance
argument_list|(
name|text
argument_list|,
name|searchTerm
argument_list|,
name|textlen
argument_list|,
name|termLength
argument_list|)
decl_stmt|;
name|double
name|distance
init|=
literal|1
operator|-
operator|(
operator|(
name|double
operator|)
name|dist
operator|/
operator|(
name|double
operator|)
name|Math
operator|.
name|min
argument_list|(
name|textlen
argument_list|,
name|termLength
argument_list|)
operator|)
decl_stmt|;
return|return
name|distance
operator|>
name|threshold
return|;
block|}
comment|/**      Finds and returns the smallest of three integers       */
specifier|private
specifier|static
specifier|final
name|int
name|min
parameter_list|(
name|int
name|a
parameter_list|,
name|int
name|b
parameter_list|,
name|int
name|c
parameter_list|)
block|{
name|int
name|t
init|=
operator|(
name|a
operator|<
name|b
operator|)
condition|?
name|a
else|:
name|b
decl_stmt|;
return|return
operator|(
name|t
operator|<
name|c
operator|)
condition|?
name|t
else|:
name|c
return|;
block|}
comment|/**      * This static array saves us from the time required to create a new array      * everytime editDistance is called.      */
specifier|private
name|int
name|e
index|[]
index|[]
init|=
operator|new
name|int
index|[
literal|1
index|]
index|[
literal|1
index|]
decl_stmt|;
comment|/**      Levenshtein distance also known as edit distance is a measure of similiarity      between two strings where the distance is measured as the number of character       deletions, insertions or substitutions required to transform one string to       the other string.<p>This method takes in four parameters; two strings and their respective       lengths to compute the Levenshtein distance between the two strings.      The result is returned as an integer.      */
specifier|private
specifier|final
name|int
name|editDistance
parameter_list|(
name|CharSequence
name|s
parameter_list|,
name|String
name|t
parameter_list|,
name|int
name|n
parameter_list|,
name|int
name|m
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|length
operator|<=
name|n
operator|||
name|e
index|[
literal|0
index|]
operator|.
name|length
operator|<=
name|m
condition|)
block|{
name|e
operator|=
operator|new
name|int
index|[
name|Math
operator|.
name|max
argument_list|(
name|e
operator|.
name|length
argument_list|,
name|n
operator|+
literal|1
argument_list|)
index|]
index|[
name|Math
operator|.
name|max
argument_list|(
name|e
index|[
literal|0
index|]
operator|.
name|length
argument_list|,
name|m
operator|+
literal|1
argument_list|)
index|]
expr_stmt|;
block|}
name|int
name|d
index|[]
index|[]
init|=
name|e
decl_stmt|;
comment|// matrix
name|int
name|i
decl_stmt|;
comment|// iterates through s
name|int
name|j
decl_stmt|;
comment|// iterates through t
name|char
name|s_i
decl_stmt|;
comment|// ith character of s
if|if
condition|(
name|n
operator|==
literal|0
condition|)
return|return
name|m
return|;
if|if
condition|(
name|m
operator|==
literal|0
condition|)
return|return
name|n
return|;
comment|// init matrix d
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
name|d
index|[
name|i
index|]
index|[
literal|0
index|]
operator|=
name|i
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<=
name|m
condition|;
name|j
operator|++
control|)
name|d
index|[
literal|0
index|]
index|[
name|j
index|]
operator|=
name|j
expr_stmt|;
comment|// start computing edit distance
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<=
name|n
condition|;
name|i
operator|++
control|)
block|{
name|s_i
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|1
init|;
name|j
operator|<=
name|m
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|s_i
operator|!=
name|t
operator|.
name|charAt
argument_list|(
name|j
operator|-
literal|1
argument_list|)
condition|)
name|d
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|min
argument_list|(
name|d
index|[
name|i
operator|-
literal|1
index|]
index|[
name|j
index|]
argument_list|,
name|d
index|[
name|i
index|]
index|[
name|j
operator|-
literal|1
index|]
argument_list|,
name|d
index|[
name|i
operator|-
literal|1
index|]
index|[
name|j
operator|-
literal|1
index|]
argument_list|)
operator|+
literal|1
expr_stmt|;
else|else
name|d
index|[
name|i
index|]
index|[
name|j
index|]
operator|=
name|min
argument_list|(
name|d
index|[
name|i
operator|-
literal|1
index|]
index|[
name|j
index|]
operator|+
literal|1
argument_list|,
name|d
index|[
name|i
index|]
index|[
name|j
operator|-
literal|1
index|]
operator|+
literal|1
argument_list|,
name|d
index|[
name|i
operator|-
literal|1
index|]
index|[
name|j
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|// we got the result!
return|return
name|d
index|[
name|n
index|]
index|[
name|m
index|]
return|;
block|}
block|}
end_class

end_unit

