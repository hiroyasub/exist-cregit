begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|NodeImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|ReferenceNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|GeneralComparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Profiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NamedNodeMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_comment
comment|/**  * Implements the fn:deep-equal library function.  *  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
specifier|public
class|class
name|FunDeepEqual
extends|extends
name|Function
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signature
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"deep-equal"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|)
block|}
argument_list|,
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|BOOLEAN
argument_list|,
name|Cardinality
operator|.
name|ONE
argument_list|)
argument_list|)
decl_stmt|;
comment|//	TODO: collation as argument
specifier|public
name|FunDeepEqual
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|getDependencies
parameter_list|()
block|{
return|return
name|Dependency
operator|.
name|CONTEXT_SET
operator||
name|Dependency
operator|.
name|CONTEXT_ITEM
return|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT ITEM"
argument_list|,
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Sequence
name|result
decl_stmt|;
name|Sequence
index|[]
name|args
init|=
name|getArguments
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
decl_stmt|;
name|int
name|length
init|=
name|args
index|[
literal|0
index|]
operator|.
name|getLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|length
operator|!=
name|args
index|[
literal|1
index|]
operator|.
name|getLength
argument_list|()
condition|)
name|result
operator|=
name|BooleanValue
operator|.
name|FALSE
expr_stmt|;
else|else
block|{
name|result
operator|=
name|BooleanValue
operator|.
name|TRUE
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|deepEquals
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|,
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|result
operator|=
name|BooleanValue
operator|.
name|FALSE
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|""
argument_list|,
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|private
name|boolean
name|deepEquals
parameter_list|(
name|Item
name|a
parameter_list|,
name|Item
name|b
parameter_list|)
block|{
try|try
block|{
specifier|final
name|boolean
name|aAtomic
init|=
name|Type
operator|.
name|subTypeOf
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|bAtomic
init|=
name|Type
operator|.
name|subTypeOf
argument_list|(
name|b
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|ATOMIC
argument_list|)
decl_stmt|;
if|if
condition|(
name|aAtomic
operator|||
name|bAtomic
condition|)
block|{
if|if
condition|(
operator|!
name|aAtomic
operator|||
operator|!
name|bAtomic
condition|)
return|return
literal|false
return|;
try|try
block|{
return|return
name|GeneralComparison
operator|.
name|compareAtomic
argument_list|(
name|context
operator|.
name|getDefaultCollator
argument_list|()
argument_list|,
operator|(
name|AtomicValue
operator|)
name|a
argument_list|,
operator|(
name|AtomicValue
operator|)
name|b
argument_list|,
name|context
operator|.
name|isBackwardsCompatible
argument_list|()
argument_list|,
name|Constants
operator|.
name|TRUNC_NONE
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|//		assert Type.subTypeOf(a.getType(), Type.NODE);
comment|//		assert Type.subTypeOf(b.getType(), Type.NODE);
if|if
condition|(
name|a
operator|.
name|getType
argument_list|()
operator|!=
name|b
operator|.
name|getType
argument_list|()
condition|)
return|return
literal|false
return|;
name|NodeValue
name|nva
init|=
operator|(
name|NodeValue
operator|)
name|a
decl_stmt|,
name|nvb
init|=
operator|(
name|NodeValue
operator|)
name|b
decl_stmt|;
if|if
condition|(
name|nva
operator|==
name|nvb
condition|)
return|return
literal|true
return|;
try|try
block|{
if|if
condition|(
name|nva
operator|.
name|equals
argument_list|(
name|nvb
argument_list|)
condition|)
return|return
literal|true
return|;
comment|// shortcut!
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
comment|// apparently incompatible values, do manual comparison
block|}
name|Node
name|na
decl_stmt|,
name|nb
decl_stmt|;
switch|switch
condition|(
name|a
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|DOCUMENT
case|:
comment|// NodeValue.getNode() doesn't seem to work for document nodes
name|na
operator|=
name|nva
operator|instanceof
name|Node
condition|?
operator|(
name|Node
operator|)
name|nva
else|:
operator|(
operator|(
name|NodeProxy
operator|)
name|nva
operator|)
operator|.
name|getDocument
argument_list|()
expr_stmt|;
name|nb
operator|=
name|nvb
operator|instanceof
name|Node
condition|?
operator|(
name|Node
operator|)
name|nvb
else|:
operator|(
operator|(
name|NodeProxy
operator|)
name|nvb
operator|)
operator|.
name|getDocument
argument_list|()
expr_stmt|;
return|return
name|compareContents
argument_list|(
name|na
argument_list|,
name|nb
argument_list|)
return|;
case|case
name|Type
operator|.
name|ELEMENT
case|:
name|na
operator|=
name|nva
operator|.
name|getNode
argument_list|()
expr_stmt|;
name|nb
operator|=
name|nvb
operator|.
name|getNode
argument_list|()
expr_stmt|;
return|return
name|compareElements
argument_list|(
name|na
argument_list|,
name|nb
argument_list|)
return|;
case|case
name|Type
operator|.
name|ATTRIBUTE
case|:
name|na
operator|=
name|nva
operator|.
name|getNode
argument_list|()
expr_stmt|;
name|nb
operator|=
name|nvb
operator|.
name|getNode
argument_list|()
expr_stmt|;
return|return
name|compareNames
argument_list|(
name|na
argument_list|,
name|nb
argument_list|)
operator|&&
name|safeEquals
argument_list|(
name|na
operator|.
name|getNodeValue
argument_list|()
argument_list|,
name|nb
operator|.
name|getNodeValue
argument_list|()
argument_list|)
return|;
case|case
name|Type
operator|.
name|PROCESSING_INSTRUCTION
case|:
case|case
name|Type
operator|.
name|NAMESPACE
case|:
name|na
operator|=
name|nva
operator|.
name|getNode
argument_list|()
expr_stmt|;
name|nb
operator|=
name|nvb
operator|.
name|getNode
argument_list|()
expr_stmt|;
return|return
name|safeEquals
argument_list|(
name|na
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|nb
operator|.
name|getNodeName
argument_list|()
argument_list|)
operator|&&
name|safeEquals
argument_list|(
name|nva
operator|.
name|getStringValue
argument_list|()
argument_list|,
name|nvb
operator|.
name|getStringValue
argument_list|()
argument_list|)
return|;
case|case
name|Type
operator|.
name|TEXT
case|:
case|case
name|Type
operator|.
name|COMMENT
case|:
return|return
name|safeEquals
argument_list|(
name|nva
operator|.
name|getStringValue
argument_list|()
argument_list|,
name|nvb
operator|.
name|getStringValue
argument_list|()
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected item type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|a
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
name|boolean
name|compareElements
parameter_list|(
name|Node
name|a
parameter_list|,
name|Node
name|b
parameter_list|)
block|{
if|if
condition|(
operator|!
name|compareNames
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|compareAttributes
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|compareContents
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|compareContents
parameter_list|(
name|Node
name|a
parameter_list|,
name|Node
name|b
parameter_list|)
block|{
name|a
operator|=
name|findNextTextOrElementNode
argument_list|(
name|a
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|=
name|findNextTextOrElementNode
argument_list|(
name|b
operator|.
name|getFirstChild
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
operator|(
name|a
operator|==
literal|null
operator|||
name|b
operator|==
literal|null
operator|)
condition|)
block|{
name|int
name|nodeTypeA
init|=
name|a
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeTypeA
operator|==
name|NodeImpl
operator|.
name|REFERENCE_NODE
condition|)
block|{
comment|//Retrieve the actual node type
name|NodeProxy
name|p
init|=
operator|(
operator|(
name|ReferenceNode
operator|)
name|a
operator|)
operator|.
name|getReference
argument_list|()
decl_stmt|;
name|nodeTypeA
operator|=
name|p
operator|.
name|getNodeType
argument_list|()
expr_stmt|;
block|}
name|int
name|nodeTypeB
init|=
name|b
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeTypeB
operator|==
name|NodeImpl
operator|.
name|REFERENCE_NODE
condition|)
block|{
comment|//Retrieve the actual node type
name|NodeProxy
name|p
init|=
operator|(
operator|(
name|ReferenceNode
operator|)
name|b
operator|)
operator|.
name|getReference
argument_list|()
decl_stmt|;
name|nodeTypeB
operator|=
name|p
operator|.
name|getNodeType
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|nodeTypeA
operator|!=
name|nodeTypeB
condition|)
return|return
literal|false
return|;
switch|switch
condition|(
name|nodeTypeA
condition|)
block|{
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
if|if
condition|(
operator|!
name|safeEquals
argument_list|(
name|a
operator|.
name|getNodeValue
argument_list|()
argument_list|,
name|b
operator|.
name|getNodeValue
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
break|break;
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
if|if
condition|(
operator|!
name|compareElements
argument_list|(
name|a
argument_list|,
name|b
argument_list|)
condition|)
return|return
literal|false
return|;
break|break;
default|default:
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"unexpected node type "
operator|+
name|a
operator|.
name|getNodeType
argument_list|()
argument_list|)
throw|;
block|}
name|a
operator|=
name|findNextTextOrElementNode
argument_list|(
name|a
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
name|b
operator|=
name|findNextTextOrElementNode
argument_list|(
name|b
operator|.
name|getNextSibling
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|a
operator|==
name|b
return|;
comment|// both null
block|}
specifier|private
name|Node
name|findNextTextOrElementNode
parameter_list|(
name|Node
name|n
parameter_list|)
block|{
if|if
condition|(
name|n
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|int
name|nodeType
init|=
name|n
operator|.
name|getNodeType
argument_list|()
decl_stmt|;
if|if
condition|(
name|nodeType
operator|==
name|NodeImpl
operator|.
name|REFERENCE_NODE
condition|)
block|{
comment|//Retrieve the actual node type
name|NodeProxy
name|p
init|=
operator|(
operator|(
name|ReferenceNode
operator|)
name|n
operator|)
operator|.
name|getReference
argument_list|()
decl_stmt|;
name|nodeType
operator|=
name|p
operator|.
name|getNodeType
argument_list|()
expr_stmt|;
block|}
while|while
condition|(
operator|!
operator|(
name|nodeType
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|||
name|nodeType
operator|==
name|Node
operator|.
name|TEXT_NODE
operator|)
condition|)
block|{
name|n
operator|=
name|n
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
if|if
condition|(
name|n
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|nodeType
operator|=
name|n
operator|.
name|getNodeType
argument_list|()
expr_stmt|;
block|}
return|return
name|n
return|;
block|}
specifier|private
name|boolean
name|compareAttributes
parameter_list|(
name|Node
name|a
parameter_list|,
name|Node
name|b
parameter_list|)
block|{
name|NamedNodeMap
name|nnma
init|=
name|a
operator|.
name|getAttributes
argument_list|()
decl_stmt|,
name|nnmb
init|=
name|b
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|nnma
operator|.
name|getLength
argument_list|()
operator|!=
name|nnmb
operator|.
name|getLength
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nnma
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|ta
init|=
name|nnma
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Node
name|tb
init|=
name|ta
operator|.
name|getLocalName
argument_list|()
operator|==
literal|null
condition|?
name|nnmb
operator|.
name|getNamedItem
argument_list|(
name|ta
operator|.
name|getNodeName
argument_list|()
argument_list|)
else|:
name|nnmb
operator|.
name|getNamedItemNS
argument_list|(
name|ta
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|ta
operator|.
name|getLocalName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tb
operator|==
literal|null
operator|||
operator|!
name|safeEquals
argument_list|(
name|ta
operator|.
name|getNodeValue
argument_list|()
argument_list|,
name|tb
operator|.
name|getNodeValue
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|private
name|boolean
name|compareNames
parameter_list|(
name|Node
name|a
parameter_list|,
name|Node
name|b
parameter_list|)
block|{
if|if
condition|(
name|a
operator|.
name|getLocalName
argument_list|()
operator|!=
literal|null
operator|||
name|b
operator|.
name|getLocalName
argument_list|()
operator|!=
literal|null
condition|)
block|{
return|return
name|safeEquals
argument_list|(
name|a
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|b
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|&&
name|safeEquals
argument_list|(
name|a
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|b
operator|.
name|getLocalName
argument_list|()
argument_list|)
return|;
block|}
return|return
name|safeEquals
argument_list|(
name|a
operator|.
name|getNodeName
argument_list|()
argument_list|,
name|b
operator|.
name|getNodeName
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|safeEquals
parameter_list|(
name|Object
name|a
parameter_list|,
name|Object
name|b
parameter_list|)
block|{
return|return
name|a
operator|==
literal|null
condition|?
name|b
operator|==
literal|null
else|:
name|a
operator|.
name|equals
argument_list|(
name|b
argument_list|)
return|;
block|}
block|}
end_class

end_unit

