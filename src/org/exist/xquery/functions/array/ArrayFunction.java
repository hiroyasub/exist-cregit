begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|array
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|map
operator|.
name|MapModule
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_comment
comment|/**  * Functions on arrays {@link http://www.w3.org/TR/xpath-functions-31/#array-functions}.  *  * @author Wolf  */
end_comment

begin_class
specifier|public
class|class
name|ArrayFunction
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|static
specifier|final
name|FunctionSignature
index|[]
name|signatures
init|=
block|{
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"size"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the number of members in the supplied array."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The number of members in the supplied array"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"get"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Gets the value at the specified position in the supplied array (counting from 1). This is the same "
operator|+
literal|"as calling $array($index)."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"index"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The index"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The value at $index"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"append"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns an array containing all the members of the supplied array, plus one additional"
operator|+
literal|"member at the end."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"appendage"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The items to append"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"A copy of $array with the new member attached"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"head"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns the first member of an array, i.e. $array(1)"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The first member of the array"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"tail"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns an array containing all members except the first from a supplied array."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"A new array containing all members except the first"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"subarray"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Gets an array containing all members from a supplied array starting at a supplied position, up to the end of the array"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"start"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The start index"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"A new array containing all members from $start"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"subarray"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Gets an array containing all members from a supplied array starting at a supplied position, up to a specified length."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"start"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The start index"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"length"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"Length of the subarray"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"A new array containing all members from $start up to the specified length"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"remove"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns an array containing all members from $array except the member whose position is $position."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"position"
argument_list|,
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"Position of the member to remove"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"A new array containing all members except the one at $position"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"reverse"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns an array containing all the members of the supplied array, but in reverse order."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The array in reverse order"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"join"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Concatenates the contents of several arrays into a single array"
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"arrays"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The arrays to join"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The resulting array"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"for-each"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns an array whose size is the same as array:size($array), in which each member is computed by applying "
operator|+
literal|"$function to the corresponding member of $array."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The array to process"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"function"
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The function called on each member of the array"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The resulting array"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"filter"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Returns an array containing those members of the $array for which $function returns true."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The array to process"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"function"
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The function called on each member of the array"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The resulting array"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"fold-left"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Evaluates the supplied function cumulatively on successive values of the supplied array."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The array to process"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"zero"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"Start value"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"function"
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The function to call"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The result of the cumulative function call"
argument_list|)
argument_list|)
block|,
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"fold-right"
argument_list|,
name|ArrayModule
operator|.
name|NAMESPACE_URI
argument_list|,
name|ArrayModule
operator|.
name|PREFIX
argument_list|)
argument_list|,
literal|"Evaluates the supplied function cumulatively on successive values of the supplied array."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"array"
argument_list|,
name|Type
operator|.
name|ARRAY
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The array to process"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"zero"
argument_list|,
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"Start value"
argument_list|)
block|,
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"function"
argument_list|,
name|Type
operator|.
name|FUNCTION_REFERENCE
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|,
literal|"The function to call"
argument_list|)
block|}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|ITEM
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"The result of the cumulative function call"
argument_list|)
argument_list|)
block|}
decl_stmt|;
specifier|private
name|AnalyzeContextInfo
name|cachedContextInfo
decl_stmt|;
specifier|public
name|ArrayFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|cachedContextInfo
operator|=
operator|new
name|AnalyzeContextInfo
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
name|super
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"join"
argument_list|)
condition|)
block|{
specifier|final
name|List
argument_list|<
name|ArrayType
argument_list|>
name|arrays
init|=
operator|new
name|ArrayList
argument_list|<
name|ArrayType
argument_list|>
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|args
index|[
literal|0
index|]
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|arrays
operator|.
name|add
argument_list|(
operator|(
name|ArrayType
operator|)
name|i
operator|.
name|nextItem
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ArrayType
operator|.
name|join
argument_list|(
name|context
argument_list|,
name|arrays
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|ArrayType
name|array
init|=
operator|(
name|ArrayType
operator|)
name|args
index|[
literal|0
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|isCalledAs
argument_list|(
literal|"size"
argument_list|)
condition|)
block|{
return|return
operator|new
name|IntegerValue
argument_list|(
name|array
operator|.
name|getSize
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"get"
argument_list|)
condition|)
block|{
specifier|final
name|IntegerValue
name|index
init|=
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
return|return
name|array
operator|.
name|get
argument_list|(
name|index
operator|.
name|getInt
argument_list|()
operator|-
literal|1
argument_list|)
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"append"
argument_list|)
condition|)
block|{
return|return
name|array
operator|.
name|append
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"head"
argument_list|)
condition|)
block|{
if|if
condition|(
name|array
operator|.
name|getSize
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FOAY0001
argument_list|,
literal|"Array is empty"
argument_list|)
throw|;
block|}
return|return
name|array
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"tail"
argument_list|)
condition|)
block|{
if|if
condition|(
name|array
operator|.
name|getSize
argument_list|()
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FOAY0001
argument_list|,
literal|"Array is empty"
argument_list|)
throw|;
block|}
return|return
name|array
operator|.
name|tail
argument_list|()
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"subarray"
argument_list|)
condition|)
block|{
specifier|final
name|int
name|start
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getInt
argument_list|()
decl_stmt|;
name|int
name|end
init|=
name|array
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|getArgumentCount
argument_list|()
operator|==
literal|3
condition|)
block|{
specifier|final
name|int
name|length
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|2
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|start
operator|+
name|length
operator|>
name|array
operator|.
name|getSize
argument_list|()
operator|+
literal|1
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FOAY0001
argument_list|,
literal|"Array index out of bounds: "
operator|+
operator|(
name|start
operator|+
name|length
operator|-
literal|1
operator|)
argument_list|)
throw|;
block|}
if|if
condition|(
name|length
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FOAY0002
argument_list|,
literal|"Specified length< 0"
argument_list|)
throw|;
block|}
name|end
operator|=
name|start
operator|+
name|length
operator|-
literal|1
expr_stmt|;
block|}
if|if
condition|(
name|start
operator|<
literal|1
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FOAY0001
argument_list|,
literal|"Start index into array is< 1"
argument_list|)
throw|;
block|}
return|return
name|array
operator|.
name|subarray
argument_list|(
name|start
operator|-
literal|1
argument_list|,
name|end
argument_list|)
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"remove"
argument_list|)
condition|)
block|{
specifier|final
name|int
name|position
init|=
operator|(
operator|(
name|IntegerValue
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|position
operator|<
literal|1
operator|||
name|position
operator|>
name|array
operator|.
name|getSize
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|FOAY0001
argument_list|,
literal|"Index of item to remove ("
operator|+
name|position
operator|+
literal|") is out of bounds"
argument_list|)
throw|;
block|}
return|return
name|array
operator|.
name|remove
argument_list|(
name|position
operator|-
literal|1
argument_list|)
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"reverse"
argument_list|)
condition|)
block|{
return|return
name|array
operator|.
name|reverse
argument_list|()
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"for-each"
argument_list|)
condition|)
block|{
specifier|final
name|FunctionReference
name|ref
init|=
operator|(
name|FunctionReference
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ref
operator|.
name|analyze
argument_list|(
name|cachedContextInfo
argument_list|)
expr_stmt|;
return|return
name|array
operator|.
name|forEach
argument_list|(
name|ref
argument_list|)
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"filter"
argument_list|)
condition|)
block|{
specifier|final
name|FunctionReference
name|ref
init|=
operator|(
name|FunctionReference
operator|)
name|args
index|[
literal|1
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ref
operator|.
name|analyze
argument_list|(
name|cachedContextInfo
argument_list|)
expr_stmt|;
return|return
name|array
operator|.
name|filter
argument_list|(
name|ref
argument_list|)
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"fold-left"
argument_list|)
condition|)
block|{
specifier|final
name|FunctionReference
name|ref
init|=
operator|(
name|FunctionReference
operator|)
name|args
index|[
literal|2
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ref
operator|.
name|analyze
argument_list|(
name|cachedContextInfo
argument_list|)
expr_stmt|;
return|return
name|array
operator|.
name|foldLeft
argument_list|(
name|ref
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
return|;
block|}
if|else if
condition|(
name|isCalledAs
argument_list|(
literal|"fold-right"
argument_list|)
condition|)
block|{
specifier|final
name|FunctionReference
name|ref
init|=
operator|(
name|FunctionReference
operator|)
name|args
index|[
literal|2
index|]
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ref
operator|.
name|analyze
argument_list|(
name|cachedContextInfo
argument_list|)
expr_stmt|;
return|return
name|array
operator|.
name|foldRight
argument_list|(
name|ref
argument_list|,
name|args
index|[
literal|1
index|]
argument_list|)
return|;
block|}
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
literal|"Unknown function: "
operator|+
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
end_class

end_unit

