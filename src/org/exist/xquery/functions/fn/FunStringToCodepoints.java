begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-09 The eXist Team  *  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|BasicFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Dependency
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Profiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|IntegerValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|ValueSequence
import|;
end_import

begin_class
specifier|public
class|class
name|FunStringToCodepoints
extends|extends
name|BasicFunction
block|{
specifier|public
specifier|final
specifier|static
name|FunctionSignature
name|signature
init|=
operator|new
name|FunctionSignature
argument_list|(
operator|new
name|QName
argument_list|(
literal|"string-to-codepoints"
argument_list|,
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
argument_list|,
literal|"Returns the sequence of unicode code points that constitute an xs:string. If $arg is a zero-length "
operator|+
literal|"string or the empty sequence, the empty sequence is returned."
argument_list|,
operator|new
name|SequenceType
index|[]
block|{
operator|new
name|FunctionParameterSequenceType
argument_list|(
literal|"arg"
argument_list|,
name|Type
operator|.
name|STRING
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_ONE
argument_list|,
literal|"The input string"
argument_list|)
block|, 				}
argument_list|,
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|ZERO_OR_MORE
argument_list|,
literal|"the sequence of code points"
argument_list|)
argument_list|)
decl_stmt|;
specifier|public
name|FunStringToCodepoints
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
index|[]
name|args
parameter_list|,
name|Sequence
name|contextSequence
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|DEPENDENCIES
argument_list|,
literal|"DEPENDENCIES"
argument_list|,
name|Dependency
operator|.
name|getDependenciesName
argument_list|(
name|this
operator|.
name|getDependencies
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|contextSequence
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|message
argument_list|(
name|this
argument_list|,
name|Profiler
operator|.
name|START_SEQUENCES
argument_list|,
literal|"CONTEXT SEQUENCE"
argument_list|,
name|contextSequence
argument_list|)
expr_stmt|;
block|}
block|}
name|Sequence
name|result
decl_stmt|;
if|if
condition|(
name|args
index|[
literal|0
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
name|Sequence
operator|.
name|EMPTY_SEQUENCE
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|getCodePoints
argument_list|(
name|args
index|[
literal|0
index|]
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|isEnabled
argument_list|()
condition|)
block|{
name|context
operator|.
name|getProfiler
argument_list|()
operator|.
name|end
argument_list|(
name|this
argument_list|,
literal|""
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      * The method<code>getCodePoints</code>      *      * @param s a<code>String</code> value      * @return a<code>ValueSequence</code> value      */
specifier|public
specifier|static
name|ValueSequence
name|getCodePoints
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
specifier|final
name|ValueSequence
name|codepoints
init|=
operator|new
name|ValueSequence
argument_list|()
decl_stmt|;
name|char
name|ch
decl_stmt|;
name|IntegerValue
name|next
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|XMLChar
operator|.
name|isSurrogate
argument_list|(
name|ch
argument_list|)
condition|)
block|{
specifier|final
name|int
name|supp
init|=
name|XMLChar
operator|.
name|supplemental
argument_list|(
name|ch
argument_list|,
name|s
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|next
operator|=
operator|new
name|IntegerValue
argument_list|(
name|supp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|next
operator|=
operator|new
name|IntegerValue
argument_list|(
operator|(
name|int
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
name|codepoints
operator|.
name|add
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
return|return
name|codepoints
return|;
block|}
comment|/** The method<code>getCodePointCount</code>      *      * @param s a<code>String</code> value      * @return a<code>ValueSequence</code> value      */
specifier|public
specifier|static
name|int
name|getCodePointCount
parameter_list|(
specifier|final
name|String
name|s
parameter_list|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|XMLChar
operator|.
name|isSurrogate
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|i
operator|++
expr_stmt|;
block|}
name|count
operator|++
expr_stmt|;
block|}
return|return
name|count
return|;
block|}
comment|/**      * The method<code>subSequence</code>      *      * @param seq a<code>ValueSequence</code> value      * @param start an<code>int</code> value      * @return a<code>ValueSequence</code> value      * @exception XPathException if an error occurs      */
specifier|public
specifier|static
name|String
name|subSequence
parameter_list|(
specifier|final
name|ValueSequence
name|seq
parameter_list|,
specifier|final
name|int
name|start
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|StringBuilder
name|substring
init|=
operator|new
name|StringBuilder
argument_list|(
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ch
decl_stmt|;
try|try
block|{
for|for
control|(
name|int
name|i
init|=
name|start
operator|>=
literal|0
condition|?
name|start
else|:
literal|0
init|;
name|i
operator|<
name|seq
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
operator|(
operator|(
name|IntegerValue
operator|)
name|seq
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|XMLChar
operator|.
name|isSupplemental
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|substring
operator|.
name|append
argument_list|(
name|XMLChar
operator|.
name|highSurrogate
argument_list|(
name|ch
argument_list|)
argument_list|)
expr_stmt|;
name|substring
operator|.
name|append
argument_list|(
name|XMLChar
operator|.
name|lowSurrogate
argument_list|(
name|ch
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|substring
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"FunStringCodepoints.subSequence()/2 failure"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|substring
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The method<code>subSequence</code>      *      * @param seq a<code>ValueSequence</code> value      * @param start an<code>int</code> value      * @param end an<code>int</code> value      * @return a<code>ValueSequence</code> value      * @exception XPathException if an error occurs      */
specifier|public
specifier|static
name|String
name|subSequence
parameter_list|(
specifier|final
name|ValueSequence
name|seq
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|int
name|end
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|StringBuilder
name|substring
init|=
operator|new
name|StringBuilder
argument_list|(
name|seq
operator|.
name|getItemCount
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|ch
decl_stmt|;
specifier|final
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|IntegerValue
name|next
decl_stmt|;
if|if
condition|(
name|seq
operator|.
name|getItemCount
argument_list|()
operator|<
name|end
condition|)
block|{
return|return
name|subSequence
argument_list|(
name|seq
argument_list|,
name|start
argument_list|)
return|;
block|}
try|try
block|{
for|for
control|(
name|int
name|i
init|=
name|start
operator|>=
literal|0
condition|?
name|start
else|:
literal|0
init|;
name|i
operator|<
name|end
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
operator|(
operator|(
name|IntegerValue
operator|)
name|seq
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|XMLChar
operator|.
name|isSupplemental
argument_list|(
name|ch
argument_list|)
condition|)
block|{
name|substring
operator|.
name|append
argument_list|(
name|XMLChar
operator|.
name|highSurrogate
argument_list|(
name|ch
argument_list|)
argument_list|)
expr_stmt|;
name|substring
operator|.
name|append
argument_list|(
name|XMLChar
operator|.
name|lowSurrogate
argument_list|(
name|ch
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|substring
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"FunStringCodepoints.subSequence()/3 failure"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|substring
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The method<code>codePointToString</code>      *      * @param value an<code>IntegerValue</code> value      * @return a<code>String</code> value      * @exception XPathException if an error occurs      */
specifier|public
specifier|static
name|String
name|codePointToString
parameter_list|(
specifier|final
name|IntegerValue
name|value
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|StringBuilder
name|string
init|=
operator|new
name|StringBuilder
argument_list|(
literal|2
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|int
name|intValue
init|=
name|value
operator|.
name|getInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|XMLChar
operator|.
name|isSupplemental
argument_list|(
name|intValue
argument_list|)
condition|)
block|{
name|string
operator|.
name|append
argument_list|(
name|XMLChar
operator|.
name|highSurrogate
argument_list|(
name|intValue
argument_list|)
argument_list|)
expr_stmt|;
name|string
operator|.
name|append
argument_list|(
name|XMLChar
operator|.
name|lowSurrogate
argument_list|(
name|intValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|string
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|intValue
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"FunStringCodepoints.codePointToString()/1 failure"
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|string
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The method<code>indexOf</code>      *      * @param seq a<code>ValueSequence</code> value      * @param value an<code>IntegerValue</code> value      * @return a<code>int</code> value      */
specifier|public
specifier|static
name|int
name|indexOf
parameter_list|(
specifier|final
name|ValueSequence
name|seq
parameter_list|,
specifier|final
name|IntegerValue
name|value
parameter_list|)
block|{
specifier|final
name|int
name|index
init|=
name|Constants
operator|.
name|STRING_NOT_FOUND
decl_stmt|;
specifier|final
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unused"
argument_list|)
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seq
operator|.
name|getItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|value
operator|.
name|compareTo
argument_list|(
name|seq
operator|.
name|itemAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
name|Constants
operator|.
name|EQUAL
condition|)
block|{
return|return
name|i
return|;
block|}
block|}
return|return
name|index
return|;
block|}
block|}
end_class

end_unit

