begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2004-2009 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_comment
comment|/**  * Base class for functions accepting an optional collation argument.   * @author wolf  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|CollatingFunction
extends|extends
name|Function
block|{
specifier|public
specifier|final
specifier|static
name|String
name|THIRD_REL_COLLATION_ARG_EXAMPLE
init|=
literal|"The third argument $collation-uri is relative so you only need to "
operator|+
literal|"specify the last part of a valid full collation-uri, e.g. "
operator|+
literal|"'?lang=sv-SE', "
operator|+
literal|"'lang=sv-SE;strength=primary;decomposition=standard' "
operator|+
literal|"or 'swedish'."
decl_stmt|;
comment|/**      * @param context      * @param signature      */
specifier|public
name|CollatingFunction
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|,
name|signature
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|Collator
name|getCollator
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|,
name|int
name|arg
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|getSignature
argument_list|()
operator|.
name|getArgumentCount
argument_list|()
operator|==
name|arg
condition|)
block|{
specifier|final
name|String
name|collationURI
init|=
name|getArgument
argument_list|(
name|arg
operator|-
literal|1
argument_list|)
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
return|return
name|context
operator|.
name|getCollator
argument_list|(
name|collationURI
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|context
operator|.
name|getDefaultCollator
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

