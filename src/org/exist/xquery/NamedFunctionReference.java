begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReference
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_class
specifier|public
class|class
name|NamedFunctionReference
extends|extends
name|AbstractExpression
block|{
specifier|private
name|QName
name|qname
decl_stmt|;
specifier|private
name|int
name|arity
decl_stmt|;
specifier|private
name|FunctionCall
name|resolvedFunction
init|=
literal|null
decl_stmt|;
specifier|public
name|NamedFunctionReference
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|QName
name|qname
parameter_list|,
name|int
name|arity
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
name|this
operator|.
name|arity
operator|=
name|arity
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|resolvedFunction
operator|=
name|lookupFunction
argument_list|(
name|qname
argument_list|,
name|arity
argument_list|)
expr_stmt|;
name|contextInfo
operator|.
name|addFlag
argument_list|(
name|SINGLE_STEP_EXECUTION
argument_list|)
expr_stmt|;
name|resolvedFunction
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
specifier|private
name|FunctionCall
name|lookupFunction
parameter_list|(
name|QName
name|funcName
parameter_list|,
name|int
name|arity
parameter_list|)
throws|throws
name|XPathException
block|{
comment|// check if the function is from a module
name|Module
name|module
init|=
name|context
operator|.
name|getModule
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|UserDefinedFunction
name|func
decl_stmt|;
if|if
condition|(
name|module
operator|==
literal|null
condition|)
block|{
name|func
operator|=
name|context
operator|.
name|resolveFunction
argument_list|(
name|qname
argument_list|,
name|arity
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|module
operator|.
name|isInternalModule
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Cannot create a reference to an internal Java function"
argument_list|)
throw|;
block|}
name|func
operator|=
operator|(
operator|(
name|ExternalModule
operator|)
name|module
operator|)
operator|.
name|getFunction
argument_list|(
name|qname
argument_list|,
name|arity
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|func
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPST0017
argument_list|,
literal|"Function not found: "
operator|+
name|qname
argument_list|)
throw|;
name|FunctionCall
name|funcCall
init|=
operator|new
name|FunctionCall
argument_list|(
name|context
argument_list|,
name|func
argument_list|)
decl_stmt|;
name|funcCall
operator|.
name|setLocation
argument_list|(
name|line
argument_list|,
name|column
argument_list|)
expr_stmt|;
return|return
name|funcCall
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
name|qname
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|'#'
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|arity
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
operator|new
name|FunctionReference
argument_list|(
name|resolvedFunction
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|FUNCTION_REFERENCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
if|if
condition|(
name|resolvedFunction
operator|!=
literal|null
condition|)
name|resolvedFunction
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

