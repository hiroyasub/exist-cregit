begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  * BinaryValueFromBinaryString is a special case of BinaryValue  * where the value is already encoded  *   * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
class|class
name|BinaryValueFromBinaryString
extends|extends
name|BinaryValue
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|BinaryValueFromBinaryString
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|public
name|BinaryValueFromBinaryString
parameter_list|(
name|BinaryValueType
name|binaryValueType
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|super
argument_list|(
name|binaryValueType
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|streamBinaryTo
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
comment|//we need to create a safe output stream that cannot be closed
name|OutputStream
name|safeOutputStream
init|=
name|makeSafeOutputStream
argument_list|(
name|os
argument_list|)
decl_stmt|;
comment|//get the decoder
name|FilterOutputStream
name|fos
init|=
name|getBinaryValueType
argument_list|()
operator|.
name|getDecoder
argument_list|(
name|safeOutputStream
argument_list|)
decl_stmt|;
comment|//write with the decoder
name|byte
name|data
index|[]
init|=
name|value
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|fos
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|//we do have to close the decoders output stream though
comment|//to ensure that all bytes have been written, this is
comment|//particularly nessecary for Apache Commons Codec stream encoders
try|try
block|{
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to close stream: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|streamTo
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
comment|//write
name|byte
name|data
index|[]
init|=
name|value
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|ByteBuffer
name|getReadOnlyBuffer
parameter_list|()
block|{
name|ByteArrayOutputStream
name|baos
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
try|try
block|{
name|streamBinaryTo
argument_list|(
name|baos
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to get read only buffer: "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
name|byte
name|data
index|[]
init|=
name|baos
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|ByteBuffer
name|buf
init|=
name|ByteBuffer
operator|.
name|allocate
argument_list|(
name|data
operator|.
name|length
argument_list|)
decl_stmt|;
name|buf
operator|.
name|put
argument_list|(
name|data
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
block|{
block|}
block|}
end_class

end_unit

