begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU Library General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|StoredNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|EmptyNodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentBuilderReceiver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|Indexable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ValueIndexFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Cardinality
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Represents an atomic value. All simple values that are not nodes extend AtomicValue.  * As every single item is also a sequence, this class implements both: Item and Sequence.  *   * @author wolf  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AtomicValue
implements|implements
name|Item
implements|,
name|Sequence
implements|,
name|Indexable
block|{
comment|/** An empty atomic value */
specifier|public
specifier|final
specifier|static
name|AtomicValue
name|EMPTY_VALUE
init|=
operator|new
name|EmptyValue
argument_list|()
decl_stmt|;
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#getType() 	 */
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|ATOMIC
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#getStringValue() 	 */
specifier|public
specifier|abstract
name|String
name|getStringValue
parameter_list|()
throws|throws
name|XPathException
function_decl|;
specifier|public
specifier|abstract
name|AtomicValue
name|convertTo
parameter_list|(
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
specifier|abstract
name|boolean
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|int
name|operator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
specifier|abstract
name|int
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
specifier|abstract
name|AtomicValue
name|max
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
specifier|abstract
name|AtomicValue
name|min
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/**      * Compares this atomic value to another. Returns true if the current value is of type string      * and its value starts with the string value of the other value.      *       * @param collator Collator used for string comparison.      * @param other      * @throws XPathException if this is not a string.      */
specifier|public
name|boolean
name|startsWith
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot call starts-with on value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Compares this atomic value to another. Returns true if the current value is of type string      * and its value ends with the string value of the other value.      *       * @param collator Collator used for string comparison.      * @param other      * @throws XPathException if this is not a string.      */
specifier|public
name|boolean
name|endsWith
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot call ends-with on value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|/**      * Compares this atomic value to another. Returns true if the current value is of type string      * and its value contains the string value of the other value.      *       * @param collator Collator used for string comparison.      * @param other      * @throws XPathException if this is not a string.      */
specifier|public
name|boolean
name|contains
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot call contains on value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#getLength() 	 */
specifier|public
name|int
name|getItemCount
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
name|Cardinality
operator|.
name|EXACTLY_ONE
return|;
block|}
specifier|public
name|void
name|removeDuplicates
parameter_list|()
block|{
comment|// this is a single value, so there are no duplicates to remove
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#iterate() 	 */
specifier|public
name|SequenceIterator
name|iterate
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
operator|new
name|SingleItemIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
name|SequenceIterator
name|unorderedIterator
parameter_list|()
block|{
return|return
operator|new
name|SingleItemIterator
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#getItemType() 	 */
specifier|public
name|int
name|getItemType
parameter_list|()
block|{
return|return
name|getType
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#itemAt(int) 	 */
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|>
literal|0
condition|?
literal|null
else|:
name|this
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#toSequence() 	 */
specifier|public
name|Sequence
name|toSequence
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#toSAX(org.exist.storage.DBBroker, org.xml.sax.ContentHandler) 	 */
specifier|public
name|void
name|toSAX
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|ContentHandler
name|handler
parameter_list|,
name|Properties
name|properties
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
specifier|final
name|String
name|s
init|=
name|getStringValue
argument_list|()
decl_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|s
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|s
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#copyTo(org.exist.storage.DBBroker, org.exist.memtree.DocumentBuilderReceiver) 	 */
specifier|public
name|void
name|copyTo
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentBuilderReceiver
name|receiver
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
specifier|final
name|String
name|s
init|=
name|getStringValue
argument_list|()
decl_stmt|;
name|receiver
operator|.
name|characters
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|boolean
name|hasOne
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|hasMany
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#add(org.exist.xquery.value.Item) 	 */
specifier|public
name|void
name|add
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#addAll(org.exist.xquery.value.Sequence) 	 */
specifier|public
name|void
name|addAll
parameter_list|(
name|Sequence
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#atomize() 	 */
specifier|public
name|AtomicValue
name|atomize
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
name|this
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#effectiveBooleanValue() 	 */
specifier|public
name|boolean
name|effectiveBooleanValue
parameter_list|()
throws|throws
name|XPathException
block|{
return|return
literal|false
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#toNodeSet() 	 */
specifier|public
name|NodeSet
name|toNodeSet
parameter_list|()
throws|throws
name|XPathException
block|{
comment|//TODO : solution that may be worth to investigate
comment|/* 		if (!effectiveBooleanValue()) 			return NodeSet.EMPTY_SET; 		*/
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to a node set"
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.value.Sequence#getDocumentSet()      */
specifier|public
name|DocumentSet
name|getDocumentSet
parameter_list|()
block|{
return|return
name|DocumentSet
operator|.
name|EMPTY_DOCUMENT_SET
return|;
block|}
specifier|public
name|Iterator
name|getCollectionIterator
parameter_list|()
block|{
return|return
name|EmptyNodeSet
operator|.
name|EMPTY_ITERATOR
return|;
block|}
specifier|public
name|AtomicValue
name|promote
parameter_list|(
name|AtomicValue
name|otherValue
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|getType
argument_list|()
operator|!=
name|otherValue
operator|.
name|getType
argument_list|()
condition|)
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DECIMAL
argument_list|)
operator|&&
operator|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|otherValue
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
operator|||
name|Type
operator|.
name|subTypeOf
argument_list|(
name|otherValue
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
operator|)
condition|)
return|return
name|convertTo
argument_list|(
name|otherValue
operator|.
name|getType
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|FLOAT
argument_list|)
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|otherValue
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DOUBLE
argument_list|)
condition|)
return|return
name|convertTo
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
return|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|)
operator|&&
name|Type
operator|.
name|subTypeOf
argument_list|(
name|otherValue
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
return|return
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
return|;
block|}
return|return
name|this
return|;
block|}
comment|/**      * Dump a string representation of this value to the given       * ExpressionDumper.      *  	 * @param dumper 	 */
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
try|try
block|{
name|dumper
operator|.
name|display
argument_list|(
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#conversionPreference(java.lang.Class) 	 */
specifier|public
name|int
name|conversionPreference
parameter_list|(
name|Class
name|javaClass
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#toJavaObject(java.lang.Class) 	 */
specifier|public
name|Object
name|toJavaObject
parameter_list|(
name|Class
name|target
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to Java object of type "
operator|+
name|target
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
try|try
block|{
return|return
name|getStringValue
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
return|return
name|super
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#isCached() 	 */
specifier|public
name|boolean
name|isCached
parameter_list|()
block|{
comment|// always returns false by default
return|return
literal|false
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#setIsCached(boolean) 	 */
specifier|public
name|void
name|setIsCached
parameter_list|(
name|boolean
name|cached
parameter_list|)
block|{
comment|// ignore
block|}
specifier|public
name|void
name|clearContext
parameter_list|(
name|int
name|contextId
parameter_list|)
block|{
comment|// ignore
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Sequence#setSelfAsContext() 	 */
specifier|public
name|void
name|setSelfAsContext
parameter_list|(
name|int
name|contextId
parameter_list|)
block|{
block|}
comment|/* (non-Javadoc)      * @see org.exist.xquery.value.Sequence#isPersistentSet()      */
specifier|public
name|boolean
name|isPersistentSet
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
specifier|public
name|void
name|nodeMoved
parameter_list|(
name|NodeId
name|oldNodeId
parameter_list|,
name|StoredNode
name|newNode
parameter_list|)
block|{
block|}
comment|/* 	public byte[] serialize(short collectionId)	throws EXistException {	 		//TODO : pass the factory as an argument 		return ValueIndexFactory.serialize(this, collectionId); 	} 	*/
comment|/* (non-Javadoc) 	 * @deprecated 	 * @see org.exist.storage.Indexable#serialize(short, boolean) 	 */
comment|/* 	public byte[] serialize(short collectionId, boolean caseSensitive)	throws EXistException {	 		//TODO : pass the factory as an argument 		return ValueIndexFactory.serialize(this, collectionId, caseSensitive); 	}	 	*/
specifier|public
name|byte
index|[]
name|serializeValue
parameter_list|(
name|int
name|offset
parameter_list|)
throws|throws
name|EXistException
block|{
comment|//TODO : pass the factory as an argument
return|return
name|ValueIndexFactory
operator|.
name|serialize
argument_list|(
name|this
argument_list|,
name|offset
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @deprecated 	 * @see org.exist.storage.Indexable#serializeValue(int, boolean) 	 */
comment|/* 	public byte[] serializeValue(int offset, boolean caseSensitive)	throws EXistException {		 		//TODO : pass the factory as an argument 		return ValueIndexFactory.serialize(this, offset, caseSensitive); 	} 	*/
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|other
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid call to compareTo by "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|this
operator|.
name|getItemType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|EmptyValue
extends|extends
name|AtomicValue
block|{
specifier|public
name|boolean
name|isEmpty
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.AtomicValue#getStringValue() 		 */
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
return|return
literal|""
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.AtomicValue#convertTo(int) 		 */
specifier|public
name|AtomicValue
name|convertTo
parameter_list|(
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
block|{
switch|switch
condition|(
name|requiredType
condition|)
block|{
case|case
name|Type
operator|.
name|ATOMIC
case|:
case|case
name|Type
operator|.
name|ITEM
case|:
case|case
name|Type
operator|.
name|STRING
case|:
return|return
name|StringValue
operator|.
name|EMPTY_STRING
return|;
case|case
name|Type
operator|.
name|NORMALIZED_STRING
case|:
case|case
name|Type
operator|.
name|TOKEN
case|:
case|case
name|Type
operator|.
name|LANGUAGE
case|:
case|case
name|Type
operator|.
name|NMTOKEN
case|:
case|case
name|Type
operator|.
name|NAME
case|:
case|case
name|Type
operator|.
name|NCNAME
case|:
case|case
name|Type
operator|.
name|ID
case|:
case|case
name|Type
operator|.
name|IDREF
case|:
case|case
name|Type
operator|.
name|ENTITY
case|:
return|return
operator|new
name|StringValue
argument_list|(
literal|""
argument_list|,
name|requiredType
argument_list|)
return|;
case|case
name|Type
operator|.
name|ANY_URI
case|:
return|return
name|AnyURIValue
operator|.
name|EMPTY_URI
return|;
case|case
name|Type
operator|.
name|BOOLEAN
case|:
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
comment|//case Type.FLOAT :
comment|//return new FloatValue(value);
comment|//case Type.DOUBLE :
comment|//case Type.NUMBER :
comment|//return new DoubleValue(this);
comment|//case Type.DECIMAL :
comment|//return new DecimalValue(value);
comment|//case Type.INTEGER :
comment|//case Type.NON_POSITIVE_INTEGER :
comment|//case Type.NEGATIVE_INTEGER :
comment|//case Type.POSITIVE_INTEGER :
comment|//case Type.LONG :
comment|//case Type.INT :
comment|//case Type.SHORT :
comment|//case Type.BYTE :
comment|//case Type.NON_NEGATIVE_INTEGER :
comment|//case Type.UNSIGNED_LONG :
comment|//case Type.UNSIGNED_INT :
comment|//case Type.UNSIGNED_SHORT :
comment|//case Type.UNSIGNED_BYTE :
comment|//return new IntegerValue(value, requiredType);
comment|//case Type.BASE64_BINARY :
comment|//return new Base64Binary(value);
comment|//case Type.HEX_BINARY :
comment|//return new HexBinary(value);
comment|//case Type.DATE_TIME :
comment|//return new DateTimeValue(value);
comment|//case Type.TIME :
comment|//return new TimeValue(value);
comment|//case Type.DATE :
comment|//return new DateValue(value);
comment|//case Type.DURATION :
comment|//return new DurationValue(value);
comment|//case Type.YEAR_MONTH_DURATION :
comment|//return new YearMonthDurationValue(value);
comment|//case Type.DAY_TIME_DURATION :
comment|//return new DayTimeDurationValue(value);
comment|//case Type.GYEAR :
comment|//return new GYearValue(value);
comment|//case Type.GMONTH :
comment|//return new GMonthValue(value);
comment|//case Type.GDAY :
comment|//return new GDayValue(value);
comment|//case Type.GYEARMONTH :
comment|//return new GYearMonthValue(value);
comment|//case Type.GMONTHDAY :
comment|//return new GMonthDayValue(value);
comment|//case Type.UNTYPED_ATOMIC :
comment|//return new UntypedAtomicValue(getStringValue());
default|default :
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert empty value to "
operator|+
name|requiredType
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.AtomicValue#compareTo(java.lang.Object) 		 */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|instanceof
name|EmptyValue
condition|)
return|return
name|Constants
operator|.
name|EQUAL
return|;
else|else
return|return
name|Constants
operator|.
name|INFERIOR
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.AtomicValue#compareTo(int, org.exist.xquery.value.AtomicValue) 		 */
specifier|public
name|boolean
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|int
name|operator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
literal|false
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.AtomicValue#itemAt(int) 		 */
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.Item#toSequence() 		 */
specifier|public
name|Sequence
name|toSequence
parameter_list|()
block|{
return|return
name|this
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.AtomicValue#max(org.exist.xquery.value.AtomicValue) 		 */
specifier|public
name|AtomicValue
name|max
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|this
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.Sequence#add(org.exist.xquery.value.Item) 		 */
specifier|public
name|void
name|add
parameter_list|(
name|Item
name|item
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.AtomicValue#min(org.exist.xquery.value.AtomicValue) 		 */
specifier|public
name|AtomicValue
name|min
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|this
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.Item#conversionPreference(java.lang.Class) 		 */
specifier|public
name|int
name|conversionPreference
parameter_list|(
name|Class
name|javaClass
parameter_list|)
block|{
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.xquery.value.Item#toJavaObject(java.lang.Class) 		 */
specifier|public
name|Object
name|toJavaObject
parameter_list|(
name|Class
name|target
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to Java object of type "
operator|+
name|target
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

