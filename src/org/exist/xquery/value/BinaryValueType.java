begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Constructor
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|InvocationTargetException
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BinaryValueType
parameter_list|<
name|T
extends|extends
name|FilterOutputStream
parameter_list|>
block|{
specifier|private
specifier|final
name|int
name|xqueryType
decl_stmt|;
specifier|private
specifier|final
name|Class
argument_list|<
name|T
argument_list|>
name|encoder
decl_stmt|;
specifier|public
name|BinaryValueType
parameter_list|(
name|int
name|xqueryType
parameter_list|,
name|Class
argument_list|<
name|T
argument_list|>
name|encoder
parameter_list|)
block|{
name|this
operator|.
name|xqueryType
operator|=
name|xqueryType
expr_stmt|;
name|this
operator|.
name|encoder
operator|=
name|encoder
expr_stmt|;
block|}
specifier|public
name|int
name|getXQueryType
parameter_list|()
block|{
return|return
name|xqueryType
return|;
block|}
specifier|public
name|T
name|getEncoder
parameter_list|(
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
try|try
block|{
name|Constructor
argument_list|<
name|T
argument_list|>
name|c
init|=
name|encoder
operator|.
name|getConstructor
argument_list|(
name|OutputStream
operator|.
name|class
argument_list|)
decl_stmt|;
name|T
name|fos
init|=
name|c
operator|.
name|newInstance
argument_list|(
name|os
argument_list|)
decl_stmt|;
return|return
name|fos
return|;
block|}
catch|catch
parameter_list|(
name|NoSuchMethodException
name|nsme
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to get binary encoder '"
operator|+
name|encoder
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|nsme
operator|.
name|getMessage
argument_list|()
argument_list|,
name|nsme
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ie
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to get binary encoder '"
operator|+
name|encoder
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|ie
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ie
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to get binary encoder '"
operator|+
name|encoder
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|iae
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to get binary encoder '"
operator|+
name|encoder
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|iae
operator|.
name|getMessage
argument_list|()
argument_list|,
name|iae
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|InvocationTargetException
name|ite
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Unable to get binary encoder '"
operator|+
name|encoder
operator|.
name|getName
argument_list|()
operator|+
literal|"': "
operator|+
name|ite
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ite
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

