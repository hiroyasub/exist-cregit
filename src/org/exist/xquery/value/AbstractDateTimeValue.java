begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigInteger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|DatatypeMessageFormatter
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
operator|.
name|Comparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_comment
comment|/**  * @author wolf  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  * @author ljo  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDateTimeValue
extends|extends
name|ComputableValue
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|AbstractDateTimeValue
operator|.
name|class
argument_list|)
decl_stmt|;
comment|//Provisionally public
specifier|public
specifier|final
name|XMLGregorianCalendar
name|calendar
decl_stmt|;
specifier|private
name|XMLGregorianCalendar
name|implicitCalendar
decl_stmt|,
name|canonicalCalendar
decl_stmt|,
name|trimmedCalendar
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|Pattern
name|negativeDateStart
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\d\\d?-(\\d+)-(.*)"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|YEAR
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MONTH
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DAY
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|HOUR
init|=
literal|3
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MINUTE
init|=
literal|4
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|SECOND
init|=
literal|5
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MILLISECOND
init|=
literal|6
decl_stmt|;
specifier|protected
specifier|static
name|byte
index|[]
name|daysPerMonth
init|=
block|{
literal|31
block|,
literal|28
block|,
literal|31
block|,
literal|30
block|,
literal|31
block|,
literal|30
block|,
literal|31
block|,
literal|31
block|,
literal|30
block|,
literal|31
block|,
literal|30
block|,
literal|31
block|}
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|short
index|[]
name|monthData
init|=
block|{
literal|306
block|,
literal|337
block|,
literal|0
block|,
literal|31
block|,
literal|61
block|,
literal|92
block|,
literal|122
block|,
literal|153
block|,
literal|184
block|,
literal|214
block|,
literal|245
block|,
literal|275
block|}
decl_stmt|;
comment|/** 	 * Create a new date time value based on the given calendar.  The calendar is 	 *<em>not</em> cloned, so it is the subclass's responsibility to make sure there are 	 * no external references to it that would allow for mutation. 	 * 	 * @param calendar the calendar to wrap into an XPath value 	 */
specifier|protected
name|AbstractDateTimeValue
parameter_list|(
name|XMLGregorianCalendar
name|calendar
parameter_list|)
block|{
name|this
operator|.
name|calendar
operator|=
name|calendar
expr_stmt|;
block|}
specifier|protected
name|AbstractDateTimeValue
parameter_list|(
name|String
name|lexicalValue
parameter_list|)
throws|throws
name|XPathException
block|{
name|lexicalValue
operator|=
name|StringValue
operator|.
name|trimWhitespace
argument_list|(
name|lexicalValue
argument_list|)
expr_stmt|;
comment|//lexicalValue = normalizeDate(lexicalValue);
comment|//lexicalValue = normalizeTime(getType(), lexicalValue);
try|try
block|{
name|calendar
operator|=
name|parse
argument_list|(
name|lexicalValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FORG0001
argument_list|,
literal|"illegal lexical form for date-time-like value '"
operator|+
name|lexicalValue
operator|+
literal|"' "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return a calendar with the timezone field set, to be used for order comparison. 	 * If the original calendar did not specify a timezone, set the local timezone (unadjusted 	 * for daylight savings).  The returned calendars will be totally ordered between themselves. 	 * We also set any missing fields to ensure that normalization doesn't discard important data! 	 * (This is probably a bug in the JAXP implementation, but the workaround doesn't hurt us, 	 * so it's faster to just fix it here.) 	 * 	 * @return the calendar represented by this object, with the timezone field filled in with an implicit value if necessary 	 */
specifier|protected
name|XMLGregorianCalendar
name|getImplicitCalendar
parameter_list|()
block|{
if|if
condition|(
name|implicitCalendar
operator|==
literal|null
condition|)
block|{
name|implicitCalendar
operator|=
operator|(
name|XMLGregorianCalendar
operator|)
name|calendar
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|calendar
operator|.
name|getTimezone
argument_list|()
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
block|{
name|implicitCalendar
operator|.
name|setTimezone
argument_list|(
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|getLocalTimezoneOffsetMinutes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// fill in fields from default reference; don't have to worry about weird combinations of fields being set, since we control that on creation
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|DATE
case|:
name|implicitCalendar
operator|.
name|setTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|TIME
case|:
name|implicitCalendar
operator|.
name|setYear
argument_list|(
literal|1972
argument_list|)
expr_stmt|;
name|implicitCalendar
operator|.
name|setMonth
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|implicitCalendar
operator|.
name|setDay
argument_list|(
literal|31
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
name|implicitCalendar
operator|=
name|implicitCalendar
operator|.
name|normalize
argument_list|()
expr_stmt|;
comment|// the comparison routines will normalize it anyway, just do it once here
block|}
return|return
name|implicitCalendar
return|;
block|}
comment|// TODO: method not currently used, apparently the XPath spec never needs to canonicalize
comment|// date/times after all (see section 17.1.2 on casting)
specifier|protected
name|XMLGregorianCalendar
name|getCanonicalCalendar
parameter_list|()
block|{
if|if
condition|(
name|canonicalCalendar
operator|==
literal|null
condition|)
block|{
name|canonicalCalendar
operator|=
name|getTrimmedCalendar
argument_list|()
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
return|return
name|canonicalCalendar
return|;
block|}
specifier|public
name|XMLGregorianCalendar
name|getTrimmedCalendar
parameter_list|()
block|{
if|if
condition|(
name|trimmedCalendar
operator|==
literal|null
condition|)
block|{
name|trimmedCalendar
operator|=
name|cloneXMLGregorianCalendar
argument_list|(
name|calendar
argument_list|)
expr_stmt|;
specifier|final
name|BigDecimal
name|fract
init|=
name|trimmedCalendar
operator|.
name|getFractionalSecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|fract
operator|!=
literal|null
condition|)
block|{
comment|// TODO: replace following algorithm in JDK 1.5 with fract.stripTrailingZeros();
specifier|final
name|String
name|s
init|=
name|fract
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
operator|&&
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|==
literal|'0'
condition|)
name|i
operator|--
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|trimmedCalendar
operator|.
name|setFractionalSecond
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|i
operator|!=
name|s
operator|.
name|length
argument_list|()
condition|)
block|{
name|trimmedCalendar
operator|.
name|setFractionalSecond
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|trimmedCalendar
return|;
block|}
specifier|protected
name|XMLGregorianCalendar
name|getCanonicalOrTrimmedCalendar
parameter_list|()
block|{
try|try
block|{
return|return
name|getCanonicalCalendar
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
name|getTrimmedCalendar
argument_list|()
return|;
block|}
block|}
specifier|protected
specifier|abstract
name|AbstractDateTimeValue
name|createSameKind
parameter_list|(
name|XMLGregorianCalendar
name|cal
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|long
name|getTimeInMillis
parameter_list|()
block|{
comment|// use getImplicitCalendar() rather than relying on toGregorianCalendar timezone defaulting
comment|// to maintain consistency
return|return
name|getImplicitCalendar
argument_list|()
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|QName
name|getXMLSchemaType
parameter_list|()
function_decl|;
specifier|public
name|String
name|getStringValue
parameter_list|()
throws|throws
name|XPathException
block|{
name|String
name|r
init|=
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
decl_stmt|;
comment|// hacked to match the format mandated in XPath 2 17.1.2, which is different from the XML Schema canonical format
comment|//if (r.charAt(r.length()-1) == 'Z') r = r.substring(0, r.length()-1) + "+00:00";
comment|//Let's try these lexical transformations...
specifier|final
name|boolean
name|startsWithDashDash
init|=
name|r
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
decl_stmt|;
name|r
operator|=
name|r
operator|.
name|replaceAll
argument_list|(
literal|"--"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|startsWithDashDash
condition|)
block|{
name|r
operator|=
literal|"--"
operator|+
name|r
expr_stmt|;
block|}
specifier|final
name|Matcher
name|m
init|=
name|negativeDateStart
operator|.
name|matcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
specifier|final
name|int
name|year
init|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0000"
argument_list|)
decl_stmt|;
name|r
operator|=
literal|"-"
operator|+
name|df
operator|.
name|format
argument_list|(
name|year
argument_list|)
operator|+
literal|"-"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
name|boolean
name|effectiveBooleanValue
parameter_list|()
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FORG0006
argument_list|,
literal|"effective boolean value invalid operand type: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
specifier|abstract
name|AtomicValue
name|convertTo
parameter_list|(
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|int
name|getPart
parameter_list|(
name|int
name|part
parameter_list|)
block|{
switch|switch
condition|(
name|part
condition|)
block|{
case|case
name|YEAR
case|:
return|return
name|calendar
operator|.
name|getYear
argument_list|()
return|;
case|case
name|MONTH
case|:
return|return
name|calendar
operator|.
name|getMonth
argument_list|()
return|;
case|case
name|DAY
case|:
return|return
name|calendar
operator|.
name|getDay
argument_list|()
return|;
case|case
name|HOUR
case|:
return|return
name|calendar
operator|.
name|getHour
argument_list|()
return|;
case|case
name|MINUTE
case|:
return|return
name|calendar
operator|.
name|getMinute
argument_list|()
return|;
case|case
name|SECOND
case|:
return|return
name|calendar
operator|.
name|getSecond
argument_list|()
return|;
case|case
name|MILLISECOND
case|:
specifier|final
name|int
name|mSec
init|=
name|calendar
operator|.
name|getMillisecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|mSec
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
block|{
return|return
literal|0
return|;
block|}
else|else
block|{
return|return
name|calendar
operator|.
name|getMillisecond
argument_list|()
return|;
block|}
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid argument to method getPart"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Duration
name|tzLowerBound
init|=
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|newDurationDayTime
argument_list|(
literal|"-PT14H"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Duration
name|tzUpperBound
init|=
name|tzLowerBound
operator|.
name|negate
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|validateTimezone
parameter_list|(
name|DayTimeDurationValue
name|offset
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|Duration
name|tz
init|=
name|offset
operator|.
name|duration
decl_stmt|;
specifier|final
name|Number
name|secs
init|=
name|tz
operator|.
name|getField
argument_list|(
name|DatatypeConstants
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|secs
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|BigDecimal
operator|)
name|secs
operator|)
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FODT0003
argument_list|,
literal|"duration "
operator|+
name|offset
operator|+
literal|" has fractional minutes so cannot be used as a timezone offset"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
operator|(
name|tz
operator|.
name|equals
argument_list|(
name|tzLowerBound
argument_list|)
operator|||
name|tz
operator|.
name|equals
argument_list|(
name|tzUpperBound
argument_list|)
operator|||
operator|(
name|tz
operator|.
name|isLongerThan
argument_list|(
name|tzLowerBound
argument_list|)
operator|&&
name|tz
operator|.
name|isShorterThan
argument_list|(
name|tzUpperBound
argument_list|)
operator|)
operator|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FODT0003
argument_list|,
literal|"duration "
operator|+
name|offset
operator|+
literal|" outside valid timezone offset range"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|AbstractDateTimeValue
name|adjustedToTimezone
parameter_list|(
name|DayTimeDurationValue
name|offset
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|offset
operator|==
literal|null
condition|)
block|{
name|offset
operator|=
operator|new
name|DayTimeDurationValue
argument_list|(
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|getLocalTimezoneOffsetMillis
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|validateTimezone
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|XMLGregorianCalendar
name|xgc
init|=
operator|(
name|XMLGregorianCalendar
operator|)
name|calendar
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|xgc
operator|.
name|getTimezone
argument_list|()
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
block|{
if|if
condition|(
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|DATE
condition|)
block|{
name|xgc
operator|.
name|setTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// set the fields so we don't lose precision when shifting timezones
name|xgc
operator|=
name|xgc
operator|.
name|normalize
argument_list|()
expr_stmt|;
name|xgc
operator|.
name|add
argument_list|(
name|offset
operator|.
name|duration
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|xgc
operator|.
name|setTimezone
argument_list|(
operator|(
name|int
operator|)
operator|(
name|offset
operator|.
name|getValue
argument_list|()
operator|/
literal|60
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|ErrorCodes
operator|.
name|FORG0001
argument_list|,
literal|"illegal timezone offset "
operator|+
name|offset
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|createSameKind
argument_list|(
name|xgc
argument_list|)
return|;
block|}
specifier|public
name|AbstractDateTimeValue
name|withoutTimezone
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|XMLGregorianCalendar
name|xgc
init|=
operator|(
name|XMLGregorianCalendar
operator|)
name|calendar
operator|.
name|clone
argument_list|()
decl_stmt|;
name|xgc
operator|.
name|setTimezone
argument_list|(
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|)
expr_stmt|;
return|return
name|createSameKind
argument_list|(
name|xgc
argument_list|)
return|;
block|}
specifier|public
name|Sequence
name|getTimezone
parameter_list|()
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|tz
init|=
name|calendar
operator|.
name|getTimezone
argument_list|()
decl_stmt|;
if|if
condition|(
name|tz
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
block|{
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
return|return
operator|new
name|DayTimeDurationValue
argument_list|(
name|tz
operator|*
literal|60000L
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|Comparison
name|operator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|int
name|cmp
init|=
name|compareTo
argument_list|(
name|collator
argument_list|,
name|other
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|EQ
case|:
return|return
name|cmp
operator|==
literal|0
return|;
case|case
name|NEQ
case|:
return|return
name|cmp
operator|!=
literal|0
return|;
case|case
name|LT
case|:
return|return
name|cmp
operator|<
literal|0
return|;
case|case
name|LTEQ
case|:
return|return
name|cmp
operator|<=
literal|0
return|;
case|case
name|GT
case|:
return|return
name|cmp
operator|>
literal|0
return|;
case|case
name|GTEQ
case|:
return|return
name|cmp
operator|>=
literal|0
return|;
default|default :
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown operator type in comparison"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getType
argument_list|()
operator|==
name|getType
argument_list|()
condition|)
block|{
comment|// filling in missing timezones with local timezone, should be total order as per XPath 2.0 10.4
specifier|final
name|int
name|r
init|=
name|getImplicitCalendar
argument_list|()
operator|.
name|compare
argument_list|(
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|other
operator|)
operator|.
name|getImplicitCalendar
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|DatatypeConstants
operator|.
name|INDETERMINATE
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"indeterminate order between "
operator|+
name|this
operator|+
literal|" and "
operator|+
name|other
argument_list|)
throw|;
block|}
return|return
name|r
return|;
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: cannot compare "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|AtomicValue
name|max
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|otherDate
init|=
name|other
operator|.
name|getType
argument_list|()
operator|==
name|getType
argument_list|()
condition|?
operator|(
name|AbstractDateTimeValue
operator|)
name|other
else|:
operator|(
name|AbstractDateTimeValue
operator|)
name|other
operator|.
name|convertTo
argument_list|(
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getImplicitCalendar
argument_list|()
operator|.
name|compare
argument_list|(
name|otherDate
operator|.
name|getImplicitCalendar
argument_list|()
argument_list|)
operator|>
literal|0
condition|?
name|this
else|:
name|other
return|;
block|}
specifier|public
name|AtomicValue
name|min
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|AbstractDateTimeValue
name|otherDate
init|=
name|other
operator|.
name|getType
argument_list|()
operator|==
name|getType
argument_list|()
condition|?
operator|(
name|AbstractDateTimeValue
operator|)
name|other
else|:
operator|(
name|AbstractDateTimeValue
operator|)
name|other
operator|.
name|convertTo
argument_list|(
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getImplicitCalendar
argument_list|()
operator|.
name|compare
argument_list|(
name|otherDate
operator|.
name|getImplicitCalendar
argument_list|()
argument_list|)
operator|<
literal|0
condition|?
name|this
else|:
name|other
return|;
block|}
comment|// override for xs:time
specifier|public
name|ComputableValue
name|plus
parameter_list|(
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
switch|switch
condition|(
name|other
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|YEAR_MONTH_DURATION
case|:
case|case
name|Type
operator|.
name|DAY_TIME_DURATION
case|:
return|return
name|other
operator|.
name|plus
argument_list|(
name|this
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Operand to plus should be of type xdt:dayTimeDuration or xdt:yearMonthDuration; got: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ComputableValue
name|mult
parameter_list|(
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"multiplication is not supported for type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|ComputableValue
name|div
parameter_list|(
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"division is not supported for type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|int
name|conversionPreference
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|)
block|{
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|DateValue
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|XMLGregorianCalendar
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|1
return|;
block|}
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|GregorianCalendar
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
literal|2
return|;
block|}
if|if
condition|(
name|javaClass
operator|==
name|Date
operator|.
name|class
condition|)
block|{
return|return
literal|3
return|;
block|}
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
annotation|@
name|Override
specifier|public
parameter_list|<
name|T
parameter_list|>
name|T
name|toJavaObject
parameter_list|(
name|Class
argument_list|<
name|T
argument_list|>
name|target
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|target
operator|==
name|Object
operator|.
name|class
operator|||
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|DateValue
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|this
return|;
block|}
if|else if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|XMLGregorianCalendar
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|calendar
operator|.
name|clone
argument_list|()
return|;
block|}
if|else if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|GregorianCalendar
operator|.
name|class
argument_list|)
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|calendar
operator|.
name|toGregorianCalendar
argument_list|()
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|Date
operator|.
name|class
condition|)
block|{
return|return
operator|(
name|T
operator|)
name|calendar
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to Java object of type "
operator|+
name|target
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc)      * @see java.lang.Comparable#compareTo(java.lang.Object)      */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
if|if
condition|(
name|o
operator|instanceof
name|AbstractDateTimeValue
condition|)
block|{
specifier|final
name|AbstractDateTimeValue
name|dt
init|=
operator|(
name|AbstractDateTimeValue
operator|)
name|o
decl_stmt|;
return|return
name|calendar
operator|.
name|compare
argument_list|(
name|dt
operator|.
name|calendar
argument_list|)
return|;
block|}
specifier|final
name|AtomicValue
name|other
init|=
operator|(
name|AtomicValue
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DATE_TIME
argument_list|)
condition|)
try|try
block|{
comment|//TODO : find something that will consume less resources
return|return
name|calendar
operator|.
name|compare
argument_list|(
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|other
operator|.
name|getStringValue
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Failed to get string value of '"
operator|+
name|other
operator|+
literal|"'"
argument_list|,
name|e
argument_list|)
expr_stmt|;
comment|//Why not ?
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
else|else
block|{
return|return
name|getType
argument_list|()
operator|>
name|other
operator|.
name|getType
argument_list|()
condition|?
name|Constants
operator|.
name|SUPERIOR
else|:
name|Constants
operator|.
name|INFERIOR
return|;
block|}
block|}
comment|/**      * Utility method that is able to clone a calendar whose year is 0      * (whatever a year 0 means).       * It looks like the JDK is unable to do that.      * @param calendar The Calendar to clone      * @return the cloned Calendar      */
specifier|public
specifier|static
name|XMLGregorianCalendar
name|cloneXMLGregorianCalendar
parameter_list|(
name|XMLGregorianCalendar
name|calendar
parameter_list|)
block|{
name|boolean
name|hacked
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|calendar
operator|.
name|getYear
argument_list|()
operator|==
literal|0
condition|)
block|{
name|calendar
operator|.
name|setYear
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|hacked
operator|=
literal|true
expr_stmt|;
block|}
specifier|final
name|XMLGregorianCalendar
name|result
init|=
operator|(
name|XMLGregorianCalendar
operator|)
name|calendar
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|hacked
condition|)
block|{
comment|//reset everything
name|calendar
operator|.
name|setYear
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//-1 could also be considered
name|result
operator|.
name|setYear
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|instanceof
name|AbstractDateTimeValue
condition|)
block|{
specifier|final
name|AbstractDateTimeValue
name|dt
init|=
operator|(
name|AbstractDateTimeValue
operator|)
name|obj
decl_stmt|;
return|return
name|calendar
operator|.
name|equals
argument_list|(
name|dt
operator|.
name|calendar
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|int
name|hashCode
parameter_list|()
block|{
return|return
name|calendar
operator|.
name|hashCode
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDayOfWeek
parameter_list|()
block|{
return|return
name|calendar
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|DAY_OF_WEEK
argument_list|)
return|;
block|}
specifier|public
name|int
name|getDayWithinYear
parameter_list|()
block|{
specifier|final
name|int
name|j
init|=
name|getJulianDayNumber
argument_list|(
name|calendar
operator|.
name|getYear
argument_list|()
argument_list|,
name|calendar
operator|.
name|getMonth
argument_list|()
argument_list|,
name|calendar
operator|.
name|getDay
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|int
name|k
init|=
name|getJulianDayNumber
argument_list|(
name|calendar
operator|.
name|getYear
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
return|return
name|j
operator|-
name|k
operator|+
literal|1
return|;
block|}
specifier|public
name|int
name|getWeekWithinYear
parameter_list|()
block|{
return|return
name|calendar
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_YEAR
argument_list|)
return|;
block|}
specifier|public
name|int
name|getWeekWithinMonth
parameter_list|()
block|{
return|return
name|calendar
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|get
argument_list|(
name|Calendar
operator|.
name|WEEK_OF_MONTH
argument_list|)
return|;
block|}
comment|//copy from org.apache.xerces.jaxp.datatype.XMLGregorianCalendarImpl
specifier|private
name|XMLGregorianCalendar
name|parse
parameter_list|(
name|String
name|lexicalRepresentation
parameter_list|)
block|{
comment|// compute format string for this lexical representation.
name|String
name|format
init|=
literal|null
decl_stmt|;
specifier|final
name|String
name|lexRep
init|=
name|lexicalRepresentation
decl_stmt|;
specifier|final
name|int
name|NOT_FOUND
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|lexRepLength
init|=
name|lexRep
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// current parser needs a format string,
comment|// use following heuristics to figure out what xml schema date/time
comment|// datatype this lexical string could represent.
if|if
condition|(
name|lexRep
operator|.
name|indexOf
argument_list|(
literal|'T'
argument_list|)
operator|!=
name|NOT_FOUND
condition|)
block|{
comment|// found Date Time separater, must be xsd:DateTime
name|format
operator|=
literal|"%Y-%M-%DT%h:%m:%s"
operator|+
literal|"%z"
expr_stmt|;
block|}
if|else if
condition|(
name|lexRepLength
operator|>=
literal|3
operator|&&
name|lexRep
operator|.
name|charAt
argument_list|(
literal|2
argument_list|)
operator|==
literal|':'
condition|)
block|{
comment|// found ":", must be xsd:Time
name|format
operator|=
literal|"%h:%m:%s"
operator|+
literal|"%z"
expr_stmt|;
block|}
if|else if
condition|(
name|lexRep
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
condition|)
block|{
comment|// check for GDay || GMonth || GMonthDay
if|if
condition|(
name|lexRepLength
operator|>=
literal|3
operator|&&
name|lexRep
operator|.
name|charAt
argument_list|(
literal|2
argument_list|)
operator|==
literal|'-'
condition|)
block|{
comment|// GDAY
comment|// Fix 4971612: invalid SCCS macro substitution in data string
name|format
operator|=
literal|"---%D"
operator|+
literal|"%z"
expr_stmt|;
block|}
if|else if
condition|(
name|lexRepLength
operator|==
literal|4
operator|||
operator|(
name|lexRepLength
operator|>=
literal|6
operator|&&
operator|(
name|lexRep
operator|.
name|charAt
argument_list|(
literal|4
argument_list|)
operator|==
literal|'+'
operator|||
operator|(
name|lexRep
operator|.
name|charAt
argument_list|(
literal|4
argument_list|)
operator|==
literal|'-'
operator|&&
operator|(
name|lexRep
operator|.
name|charAt
argument_list|(
literal|5
argument_list|)
operator|==
literal|'-'
operator|||
name|lexRepLength
operator|==
literal|10
operator|)
operator|)
operator|)
operator|)
condition|)
block|{
comment|// GMonth
comment|// Fix 4971612: invalid SCCS macro substitution in data string
name|format
operator|=
literal|"--%M--%Z"
expr_stmt|;
specifier|final
name|Parser
name|p
init|=
operator|new
name|Parser
argument_list|(
name|format
argument_list|,
name|lexRep
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|XMLGregorianCalendar
name|c
init|=
name|p
operator|.
name|parse
argument_list|()
decl_stmt|;
comment|// check for validity
if|if
condition|(
operator|!
name|c
operator|.
name|isValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DatatypeMessageFormatter
operator|.
name|formatMessage
argument_list|(
literal|null
argument_list|,
literal|"InvalidXGCRepresentation"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|lexicalRepresentation
block|}
argument_list|)
comment|//"\"" + lexicalRepresentation + "\" is not a valid representation of an XML Gregorian Calendar value."
argument_list|)
throw|;
block|}
return|return
name|c
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
name|format
operator|=
literal|"--%M%z"
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// GMonthDay or invalid lexicalRepresentation
name|format
operator|=
literal|"--%M-%D"
operator|+
literal|"%z"
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// check for Date || GYear | GYearMonth
name|int
name|countSeparator
init|=
literal|0
decl_stmt|;
comment|// start at index 1 to skip potential negative sign for year.
specifier|final
name|int
name|timezoneOffset
init|=
name|lexRep
operator|.
name|indexOf
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
if|if
condition|(
name|timezoneOffset
operator|!=
name|NOT_FOUND
condition|)
block|{
comment|// found timezone, strip it off for distinguishing
comment|// between Date, GYear and GYearMonth so possible
comment|// negative sign in timezone is not mistaken as
comment|// a separator.
name|lexRepLength
operator|-=
literal|6
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|lexRepLength
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|lexRep
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'-'
condition|)
block|{
name|countSeparator
operator|++
expr_stmt|;
block|}
block|}
if|if
condition|(
name|countSeparator
operator|==
literal|0
condition|)
block|{
comment|// GYear
name|format
operator|=
literal|"%Y"
operator|+
literal|"%z"
expr_stmt|;
block|}
if|else if
condition|(
name|countSeparator
operator|==
literal|1
condition|)
block|{
comment|// GYearMonth
name|format
operator|=
literal|"%Y-%M"
operator|+
literal|"%z"
expr_stmt|;
block|}
else|else
block|{
comment|// Date or invalid lexicalRepresentation
comment|// Fix 4971612: invalid SCCS macro substitution in data string
name|format
operator|=
literal|"%Y-%M-%D"
operator|+
literal|"%z"
expr_stmt|;
block|}
block|}
specifier|final
name|Parser
name|p
init|=
operator|new
name|Parser
argument_list|(
name|format
argument_list|,
name|lexRep
argument_list|)
decl_stmt|;
specifier|final
name|XMLGregorianCalendar
name|c
init|=
name|p
operator|.
name|parse
argument_list|()
decl_stmt|;
comment|// check for validity
if|if
condition|(
operator|!
name|c
operator|.
name|isValid
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DatatypeMessageFormatter
operator|.
name|formatMessage
argument_list|(
literal|null
argument_list|,
literal|"InvalidXGCRepresentation"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|lexicalRepresentation
block|}
argument_list|)
comment|//"\"" + lexicalRepresentation + "\" is not a valid representation of an XML Gregorian Calendar value."
argument_list|)
throw|;
block|}
return|return
name|c
return|;
block|}
specifier|private
specifier|final
class|class
name|Parser
block|{
specifier|private
specifier|final
name|String
name|format
decl_stmt|;
specifier|private
specifier|final
name|String
name|value
decl_stmt|;
specifier|private
specifier|final
name|int
name|flen
decl_stmt|;
specifier|private
specifier|final
name|int
name|vlen
decl_stmt|;
specifier|private
name|int
name|fidx
decl_stmt|;
specifier|private
name|int
name|vidx
decl_stmt|;
specifier|private
name|BigInteger
name|year
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|month
init|=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
decl_stmt|;
specifier|private
name|int
name|day
init|=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
decl_stmt|;
specifier|private
name|int
name|timezone
init|=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
decl_stmt|;
specifier|private
name|int
name|hour
init|=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
decl_stmt|;
specifier|private
name|int
name|minute
init|=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
decl_stmt|;
specifier|private
name|int
name|second
init|=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
decl_stmt|;
specifier|private
name|BigDecimal
name|fractionalSecond
init|=
literal|null
decl_stmt|;
specifier|private
name|Parser
parameter_list|(
name|String
name|format
parameter_list|,
name|String
name|value
parameter_list|)
block|{
name|this
operator|.
name|format
operator|=
name|format
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
name|this
operator|.
name|flen
operator|=
name|format
operator|.
name|length
argument_list|()
expr_stmt|;
name|this
operator|.
name|vlen
operator|=
name|value
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
comment|/**          *<p>Parse a formated<code>String</code> into an<code>XMLGregorianCalendar</code>.</p>          *           *<p>If<code>String</code> is not formated as a legal<code>XMLGregorianCalendar</code> value,          * an<code>IllegalArgumentException</code> is thrown.</p>          *           * @throws IllegalArgumentException If<code>String</code> is not formated as a legal<code>XMLGregorianCalendar</code> value.          */
specifier|public
name|XMLGregorianCalendar
name|parse
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
name|char
name|vch
decl_stmt|;
while|while
condition|(
name|fidx
operator|<
name|flen
condition|)
block|{
specifier|final
name|char
name|fch
init|=
name|format
operator|.
name|charAt
argument_list|(
name|fidx
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|fch
operator|!=
literal|'%'
condition|)
block|{
comment|// not a meta character
name|skip
argument_list|(
name|fch
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// seen meta character. we don't do error check against the format
switch|switch
condition|(
name|format
operator|.
name|charAt
argument_list|(
name|fidx
operator|++
argument_list|)
condition|)
block|{
case|case
literal|'Y'
case|:
comment|// year
name|parseYear
argument_list|()
expr_stmt|;
break|break;
case|case
literal|'M'
case|:
comment|// month
name|month
operator|=
name|parseInt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'D'
case|:
comment|// days
name|day
operator|=
name|parseInt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'h'
case|:
comment|// hours
name|hour
operator|=
name|parseInt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'m'
case|:
comment|// minutes
name|minute
operator|=
name|parseInt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'s'
case|:
comment|// parse seconds.
name|second
operator|=
name|parseInt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|peek
argument_list|()
operator|==
literal|'.'
condition|)
block|{
name|fractionalSecond
operator|=
name|parseBigDecimal
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|'z'
case|:
comment|// time zone. missing, 'Z', or [+-]nn:nn
name|vch
operator|=
name|peek
argument_list|()
expr_stmt|;
if|if
condition|(
name|vch
operator|==
literal|'Z'
condition|)
block|{
name|vidx
operator|++
expr_stmt|;
name|timezone
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|vch
operator|==
literal|'+'
operator|||
name|vch
operator|==
literal|'-'
condition|)
block|{
name|vidx
operator|++
expr_stmt|;
specifier|final
name|int
name|h
init|=
name|parseInt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|skip
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
specifier|final
name|int
name|m
init|=
name|parseInt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|>=
literal|60
operator|||
name|m
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DatatypeMessageFormatter
operator|.
name|formatMessage
argument_list|(
literal|null
argument_list|,
literal|"InvalidFieldValue"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|m
argument_list|)
block|,
literal|"timezone minutes"
block|}
argument_list|)
argument_list|)
throw|;
name|timezone
operator|=
operator|(
name|h
operator|*
literal|60
operator|+
name|m
operator|)
operator|*
operator|(
name|vch
operator|==
literal|'+'
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
expr_stmt|;
block|}
break|break;
case|case
literal|'Z'
case|:
comment|// time zone. 'Z', or [+-]nn:nn
name|vch
operator|=
name|peek
argument_list|()
expr_stmt|;
if|if
condition|(
name|vch
operator|==
literal|'Z'
condition|)
block|{
name|vidx
operator|++
expr_stmt|;
name|timezone
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|vch
operator|==
literal|'+'
operator|||
name|vch
operator|==
literal|'-'
condition|)
block|{
name|vidx
operator|++
expr_stmt|;
specifier|final
name|int
name|h
init|=
name|parseInt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|skip
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
specifier|final
name|int
name|m
init|=
name|parseInt
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|>=
literal|60
operator|||
name|m
operator|<
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DatatypeMessageFormatter
operator|.
name|formatMessage
argument_list|(
literal|null
argument_list|,
literal|"InvalidFieldValue"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Integer
operator|.
name|valueOf
argument_list|(
name|m
argument_list|)
block|,
literal|"timezone minutes"
block|}
argument_list|)
argument_list|)
throw|;
name|timezone
operator|=
operator|(
name|h
operator|*
literal|60
operator|+
name|m
operator|)
operator|*
operator|(
name|vch
operator|==
literal|'+'
condition|?
literal|1
else|:
operator|-
literal|1
operator|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|DatatypeMessageFormatter
operator|.
name|formatMessage
argument_list|(
literal|null
argument_list|,
literal|"InvalidFieldValue"
argument_list|,
operator|new
name|Object
index|[]
block|{
literal|"do not defined"
block|,
literal|"timezone"
block|}
argument_list|)
argument_list|)
throw|;
block|}
break|break;
default|default :
comment|// illegal meta character. impossible.
throw|throw
operator|new
name|InternalError
argument_list|()
throw|;
block|}
block|}
if|if
condition|(
name|vidx
operator|!=
name|vlen
condition|)
block|{
comment|// some tokens are left in the input
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
argument_list|)
throw|;
comment|//,vidx);
block|}
if|if
condition|(
name|hour
operator|==
literal|24
operator|&&
name|minute
operator|==
literal|0
operator|&&
name|second
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|TIME
condition|)
block|{
name|hour
operator|=
literal|0
expr_stmt|;
block|}
block|}
return|return
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|getFactory
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|year
argument_list|,
name|month
argument_list|,
name|day
argument_list|,
name|hour
argument_list|,
name|minute
argument_list|,
name|second
argument_list|,
name|fractionalSecond
argument_list|,
name|timezone
argument_list|)
return|;
block|}
specifier|private
name|char
name|peek
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|vidx
operator|==
name|vlen
condition|)
block|{
return|return
operator|(
name|char
operator|)
operator|-
literal|1
return|;
block|}
return|return
name|value
operator|.
name|charAt
argument_list|(
name|vidx
argument_list|)
return|;
block|}
specifier|private
name|char
name|read
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|vidx
operator|==
name|vlen
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
argument_list|)
throw|;
comment|//,vidx);
block|}
return|return
name|value
operator|.
name|charAt
argument_list|(
name|vidx
operator|++
argument_list|)
return|;
block|}
specifier|private
name|void
name|skip
parameter_list|(
name|char
name|ch
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
if|if
condition|(
name|read
argument_list|()
operator|!=
name|ch
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
argument_list|)
throw|;
comment|//,vidx-1);
block|}
block|}
specifier|private
name|void
name|parseYear
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
specifier|final
name|int
name|vstart
init|=
name|vidx
decl_stmt|;
name|int
name|sign
init|=
literal|0
decl_stmt|;
comment|// skip leading negative, if it exists
if|if
condition|(
name|peek
argument_list|()
operator|==
literal|'-'
condition|)
block|{
name|vidx
operator|++
expr_stmt|;
name|sign
operator|=
literal|1
expr_stmt|;
block|}
while|while
condition|(
name|isDigit
argument_list|(
name|peek
argument_list|()
argument_list|)
condition|)
block|{
name|vidx
operator|++
expr_stmt|;
block|}
specifier|final
name|int
name|digits
init|=
name|vidx
operator|-
name|vstart
operator|-
name|sign
decl_stmt|;
if|if
condition|(
name|digits
operator|<
literal|4
condition|)
block|{
comment|// we are expecting more digits
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
argument_list|)
throw|;
comment|//,vidx);
block|}
specifier|final
name|String
name|yearString
init|=
name|value
operator|.
name|substring
argument_list|(
name|vstart
argument_list|,
name|vidx
argument_list|)
decl_stmt|;
comment|//            if (digits< 10) {
comment|//            	year = Integer.parseInt(yearString);
comment|//            }
comment|//            else {
name|year
operator|=
operator|new
name|BigInteger
argument_list|(
name|yearString
argument_list|)
expr_stmt|;
comment|//            }
block|}
specifier|private
name|int
name|parseInt
parameter_list|(
name|int
name|minDigits
parameter_list|,
name|int
name|maxDigits
parameter_list|)
throws|throws
name|IllegalArgumentException
block|{
specifier|final
name|int
name|vstart
init|=
name|vidx
decl_stmt|;
while|while
condition|(
name|isDigit
argument_list|(
name|peek
argument_list|()
argument_list|)
operator|&&
operator|(
name|vidx
operator|-
name|vstart
operator|)
operator|<
name|maxDigits
condition|)
block|{
name|vidx
operator|++
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|vidx
operator|-
name|vstart
operator|)
operator|<
name|minDigits
condition|)
block|{
comment|// we are expecting more digits
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
argument_list|)
throw|;
comment|//,vidx);
block|}
comment|// NumberFormatException is IllegalArgumentException
comment|//           try {
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|vstart
argument_list|,
name|vidx
argument_list|)
argument_list|)
return|;
comment|//            } catch( NumberFormatException e ) {
comment|//                // if the value is too long for int, NumberFormatException is thrown
comment|//                throw new IllegalArgumentException(value,vstart);
comment|//            }
block|}
specifier|private
name|BigDecimal
name|parseBigDecimal
parameter_list|()
throws|throws
name|IllegalArgumentException
block|{
specifier|final
name|int
name|vstart
init|=
name|vidx
decl_stmt|;
if|if
condition|(
name|peek
argument_list|()
operator|==
literal|'.'
condition|)
block|{
name|vidx
operator|++
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
name|value
argument_list|)
throw|;
block|}
while|while
condition|(
name|isDigit
argument_list|(
name|peek
argument_list|()
argument_list|)
condition|)
block|{
name|vidx
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|BigDecimal
argument_list|(
name|value
operator|.
name|substring
argument_list|(
name|vstart
argument_list|,
name|vidx
argument_list|)
argument_list|)
return|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isDigit
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
literal|'0'
operator|<=
name|ch
operator|&&
name|ch
operator|<=
literal|'9'
return|;
block|}
comment|/**      * Calculate the Julian day number at 00:00 on a given date. Code taken from saxon      * {@link<a href="http://saxon.sourceforge.net">http://saxon.sourceforge.net</a>}. Original algorithm is taken from      * http://vsg.cape.com/~pbaum/date/jdalg.htm and      * http://vsg.cape.com/~pbaum/date/jdalg2.htm      * (adjusted to handle BC dates correctly)      *<p/>      *<p>Note that this assumes dates in the proleptic Gregorian calendar</p>      *      * @param year  the year      * @param month the month (1-12)      * @param day   the day (1-31)      * @return the Julian day number      */
specifier|public
specifier|static
name|int
name|getJulianDayNumber
parameter_list|(
name|int
name|year
parameter_list|,
name|int
name|month
parameter_list|,
name|int
name|day
parameter_list|)
block|{
name|int
name|z
init|=
name|year
operator|-
operator|(
name|month
operator|<
literal|3
condition|?
literal|1
else|:
literal|0
operator|)
decl_stmt|;
specifier|final
name|short
name|f
init|=
name|monthData
index|[
name|month
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|z
operator|>=
literal|0
condition|)
block|{
return|return
name|day
operator|+
name|f
operator|+
literal|365
operator|*
name|z
operator|+
name|z
operator|/
literal|4
operator|-
name|z
operator|/
literal|100
operator|+
name|z
operator|/
literal|400
operator|+
literal|1721118
return|;
block|}
else|else
block|{
comment|// for negative years, add 12000 years and then subtract the days!
name|z
operator|+=
literal|12000
expr_stmt|;
specifier|final
name|int
name|j
init|=
name|day
operator|+
name|f
operator|+
literal|365
operator|*
name|z
operator|+
name|z
operator|/
literal|4
operator|-
name|z
operator|/
literal|100
operator|+
name|z
operator|/
literal|400
operator|+
literal|1721118
decl_stmt|;
return|return
name|j
operator|-
operator|(
literal|365
operator|*
literal|12000
operator|+
literal|12000
operator|/
literal|4
operator|-
literal|12000
operator|/
literal|100
operator|+
literal|12000
operator|/
literal|400
operator|)
return|;
comment|// number of leap years in 12000 years
block|}
block|}
block|}
end_class

end_unit

