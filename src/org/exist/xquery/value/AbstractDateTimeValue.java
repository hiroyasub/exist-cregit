begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|math
operator|.
name|BigDecimal
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|DecimalFormat
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|GregorianCalendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|DatatypeConstants
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|Duration
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_comment
comment|/**  * @author wolf  * @author<a href="mailto:piotr@ideanest.com">Piotr Kaminski</a>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractDateTimeValue
extends|extends
name|ComputableValue
block|{
comment|//Provisionally public
specifier|public
specifier|final
name|XMLGregorianCalendar
name|calendar
decl_stmt|;
specifier|private
name|XMLGregorianCalendar
name|implicitCalendar
decl_stmt|,
name|canonicalCalendar
decl_stmt|,
name|trimmedCalendar
decl_stmt|;
specifier|protected
specifier|static
name|Pattern
name|negativeDateStart
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"^\\d-(\\d+)-(.*)"
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|YEAR
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MONTH
init|=
literal|1
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DAY
init|=
literal|2
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|HOUR
init|=
literal|3
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MINUTE
init|=
literal|4
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|SECOND
init|=
literal|5
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|MILLISECOND
init|=
literal|6
decl_stmt|;
comment|/** 	 * Create a new date time value based on the given calendar.  The calendar is 	 *<em>not</em> cloned, so it is the subclass's responsibility to make sure there are 	 * no external references to it that would allow for mutation. 	 * 	 * @param calendar the calendar to wrap into an XPath value 	 */
specifier|protected
name|AbstractDateTimeValue
parameter_list|(
name|XMLGregorianCalendar
name|calendar
parameter_list|)
block|{
name|this
operator|.
name|calendar
operator|=
name|calendar
expr_stmt|;
block|}
specifier|protected
name|AbstractDateTimeValue
parameter_list|(
name|String
name|lexicalValue
parameter_list|)
throws|throws
name|XPathException
block|{
name|lexicalValue
operator|=
name|StringValue
operator|.
name|trimWhitespace
argument_list|(
name|lexicalValue
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|calendar
operator|=
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|newXMLGregorianCalendar
argument_list|(
name|lexicalValue
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"illegal lexical form for date-time-like value '"
operator|+
name|lexicalValue
operator|+
literal|"' "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Return a calendar with the timezone field set, to be used for order comparison. 	 * If the original calendar did not specify a timezone, set the local timezone (unadjusted 	 * for daylight savings).  The returned calendars will be totally ordered between themselves. 	 * We also set any missing fields to ensure that normalization doesn't discard important data! 	 * (This is probably a bug in the JAXP implementation, but the workaround doesn't hurt us, 	 * so it's faster to just fix it here.) 	 * 	 * @return the calendar represented by this object, with the timezone field filled in with an implicit value if necessary 	 */
specifier|protected
name|XMLGregorianCalendar
name|getImplicitCalendar
parameter_list|()
block|{
if|if
condition|(
name|implicitCalendar
operator|==
literal|null
condition|)
block|{
name|implicitCalendar
operator|=
operator|(
name|XMLGregorianCalendar
operator|)
name|calendar
operator|.
name|clone
argument_list|()
expr_stmt|;
if|if
condition|(
name|calendar
operator|.
name|getTimezone
argument_list|()
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
block|{
name|implicitCalendar
operator|.
name|setTimezone
argument_list|(
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|getLocalTimezoneOffsetMinutes
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// fill in fields from default reference; don't have to worry about weird combinations of fields being set, since we control that on creation
switch|switch
condition|(
name|getType
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|DATE
case|:
name|implicitCalendar
operator|.
name|setTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
break|break;
case|case
name|Type
operator|.
name|TIME
case|:
name|implicitCalendar
operator|.
name|setYear
argument_list|(
literal|1972
argument_list|)
expr_stmt|;
name|implicitCalendar
operator|.
name|setMonth
argument_list|(
literal|12
argument_list|)
expr_stmt|;
name|implicitCalendar
operator|.
name|setDay
argument_list|(
literal|31
argument_list|)
expr_stmt|;
break|break;
default|default:
block|}
name|implicitCalendar
operator|=
name|implicitCalendar
operator|.
name|normalize
argument_list|()
expr_stmt|;
comment|// the comparison routines will normalize it anyway, just do it once here
block|}
return|return
name|implicitCalendar
return|;
block|}
comment|// TODO: method not currently used, apparently the XPath spec never needs to canonicalize
comment|// date/times after all (see section 17.1.2 on casting)
specifier|protected
name|XMLGregorianCalendar
name|getCanonicalCalendar
parameter_list|()
block|{
if|if
condition|(
name|canonicalCalendar
operator|==
literal|null
condition|)
block|{
name|canonicalCalendar
operator|=
name|getTrimmedCalendar
argument_list|()
operator|.
name|normalize
argument_list|()
expr_stmt|;
block|}
return|return
name|canonicalCalendar
return|;
block|}
specifier|protected
name|XMLGregorianCalendar
name|getTrimmedCalendar
parameter_list|()
block|{
if|if
condition|(
name|trimmedCalendar
operator|==
literal|null
condition|)
block|{
name|trimmedCalendar
operator|=
operator|(
name|XMLGregorianCalendar
operator|)
name|calendar
operator|.
name|clone
argument_list|()
expr_stmt|;
name|BigDecimal
name|fract
init|=
name|trimmedCalendar
operator|.
name|getFractionalSecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|fract
operator|!=
literal|null
condition|)
block|{
comment|// TODO: replace following algorithm in JDK 1.5 with fract.stripTrailingZeros();
name|String
name|s
init|=
name|fract
operator|.
name|toString
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
operator|&&
name|s
operator|.
name|charAt
argument_list|(
name|i
operator|-
literal|1
argument_list|)
operator|==
literal|'0'
condition|)
name|i
operator|--
expr_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
condition|)
name|trimmedCalendar
operator|.
name|setFractionalSecond
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|else if
condition|(
name|i
operator|!=
name|s
operator|.
name|length
argument_list|()
condition|)
name|trimmedCalendar
operator|.
name|setFractionalSecond
argument_list|(
operator|new
name|BigDecimal
argument_list|(
name|s
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|trimmedCalendar
return|;
block|}
specifier|protected
specifier|abstract
name|AbstractDateTimeValue
name|createSameKind
parameter_list|(
name|XMLGregorianCalendar
name|cal
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|protected
name|long
name|getTimeInMillis
parameter_list|()
block|{
comment|// use getImplicitCalendar() rather than relying on toGregorianCalendar timezone defaulting
comment|// to maintain consistency
return|return
name|getImplicitCalendar
argument_list|()
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|getTimeInMillis
argument_list|()
return|;
block|}
specifier|protected
specifier|abstract
name|QName
name|getXMLSchemaType
parameter_list|()
function_decl|;
specifier|public
name|String
name|getStringValue
parameter_list|()
throws|throws
name|XPathException
block|{
name|String
name|r
init|=
name|getTrimmedCalendar
argument_list|()
operator|.
name|toXMLFormat
argument_list|()
decl_stmt|;
comment|// hacked to match the format mandated in XPath 2 17.1.2, which is different from the XML Schema canonical format
comment|//if (r.charAt(r.length()-1) == 'Z') r = r.substring(0, r.length()-1) + "+00:00";
comment|//Let's try these lexical transformations...
name|boolean
name|startsWithDashDash
init|=
name|r
operator|.
name|startsWith
argument_list|(
literal|"--"
argument_list|)
decl_stmt|;
name|r
operator|=
name|r
operator|.
name|replaceAll
argument_list|(
literal|"--"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|startsWithDashDash
condition|)
name|r
operator|=
literal|"--"
operator|+
name|r
expr_stmt|;
name|Matcher
name|m
init|=
name|negativeDateStart
operator|.
name|matcher
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|m
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|//TODO : refactor this -1 shift :
comment|//OK for :
comment|//(xs:dateTime("0001-01-01T01:01:01Z") + xs:yearMonthDuration("-P20Y07M"))
comment|//which goes from "0-20-06-01T01:01:01Z" to correct "-0021-06-01T01:01:01Z"
comment|//not OK for :
comment|//xs:string("-0012-05:00") cast as xs:gYear
comment|//which goes from "0-12-05:00" to incorrectly shifted "-0013-05:00"
name|int
name|year
init|=
name|Integer
operator|.
name|valueOf
argument_list|(
name|m
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|.
name|intValue
argument_list|()
operator|+
literal|1
decl_stmt|;
name|DecimalFormat
name|df
init|=
operator|new
name|DecimalFormat
argument_list|(
literal|"0000"
argument_list|)
decl_stmt|;
name|r
operator|=
literal|"-"
operator|+
name|df
operator|.
name|format
argument_list|(
name|year
argument_list|)
operator|+
literal|"-"
operator|+
name|m
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
return|return
name|r
return|;
block|}
specifier|public
name|boolean
name|effectiveBooleanValue
parameter_list|()
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"FORG0006: effective boolean value invalid operand type: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
specifier|abstract
name|AtomicValue
name|convertTo
parameter_list|(
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|int
name|getPart
parameter_list|(
name|int
name|part
parameter_list|)
block|{
switch|switch
condition|(
name|part
condition|)
block|{
case|case
name|YEAR
case|:
return|return
name|calendar
operator|.
name|getYear
argument_list|()
return|;
case|case
name|MONTH
case|:
return|return
name|calendar
operator|.
name|getMonth
argument_list|()
return|;
case|case
name|DAY
case|:
return|return
name|calendar
operator|.
name|getDay
argument_list|()
return|;
case|case
name|HOUR
case|:
return|return
name|calendar
operator|.
name|getHour
argument_list|()
return|;
case|case
name|MINUTE
case|:
return|return
name|calendar
operator|.
name|getMinute
argument_list|()
return|;
case|case
name|SECOND
case|:
return|return
name|calendar
operator|.
name|getSecond
argument_list|()
return|;
case|case
name|MILLISECOND
case|:
name|int
name|mSec
init|=
name|calendar
operator|.
name|getMillisecond
argument_list|()
decl_stmt|;
if|if
condition|(
name|mSec
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
return|return
literal|0
return|;
else|else
return|return
name|calendar
operator|.
name|getMillisecond
argument_list|()
return|;
default|default:
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid argument to method getPart"
argument_list|)
throw|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|Duration
name|tzLowerBound
init|=
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|newDurationDayTime
argument_list|(
literal|"-PT14H"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|Duration
name|tzUpperBound
init|=
name|tzLowerBound
operator|.
name|negate
argument_list|()
decl_stmt|;
specifier|protected
name|void
name|validateTimezone
parameter_list|(
name|DayTimeDurationValue
name|offset
parameter_list|)
throws|throws
name|XPathException
block|{
name|Duration
name|tz
init|=
name|offset
operator|.
name|duration
decl_stmt|;
name|Number
name|secs
init|=
name|tz
operator|.
name|getField
argument_list|(
name|DatatypeConstants
operator|.
name|SECONDS
argument_list|)
decl_stmt|;
if|if
condition|(
name|secs
operator|!=
literal|null
operator|&&
operator|(
operator|(
name|BigDecimal
operator|)
name|secs
operator|)
operator|.
name|compareTo
argument_list|(
name|BigDecimal
operator|.
name|valueOf
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"duration "
operator|+
name|offset
operator|+
literal|" has fractional minutes so cannot be used as a timezone offset"
argument_list|)
throw|;
if|if
condition|(
operator|!
operator|(
name|tz
operator|.
name|equals
argument_list|(
name|tzLowerBound
argument_list|)
operator|||
name|tz
operator|.
name|equals
argument_list|(
name|tzUpperBound
argument_list|)
operator|||
operator|(
name|tz
operator|.
name|isLongerThan
argument_list|(
name|tzLowerBound
argument_list|)
operator|&&
name|tz
operator|.
name|isShorterThan
argument_list|(
name|tzUpperBound
argument_list|)
operator|)
operator|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"duration "
operator|+
name|offset
operator|+
literal|" outside valid timezone offset range"
argument_list|)
throw|;
block|}
specifier|public
name|AbstractDateTimeValue
name|adjustedToTimezone
parameter_list|(
name|DayTimeDurationValue
name|offset
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|offset
operator|==
literal|null
condition|)
name|offset
operator|=
operator|new
name|DayTimeDurationValue
argument_list|(
name|TimeUtils
operator|.
name|getInstance
argument_list|()
operator|.
name|getLocalTimezoneOffsetMillis
argument_list|()
argument_list|)
expr_stmt|;
name|validateTimezone
argument_list|(
name|offset
argument_list|)
expr_stmt|;
name|XMLGregorianCalendar
name|xgc
init|=
operator|(
name|XMLGregorianCalendar
operator|)
name|calendar
operator|.
name|clone
argument_list|()
decl_stmt|;
if|if
condition|(
name|xgc
operator|.
name|getTimezone
argument_list|()
operator|!=
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
block|{
if|if
condition|(
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|DATE
condition|)
name|xgc
operator|.
name|setTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// set the fields so we don't lose precision when shifting timezones
name|xgc
operator|=
name|xgc
operator|.
name|normalize
argument_list|()
expr_stmt|;
name|xgc
operator|.
name|add
argument_list|(
name|offset
operator|.
name|duration
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|xgc
operator|.
name|setTimezone
argument_list|(
operator|(
name|int
operator|)
operator|(
name|offset
operator|.
name|getValue
argument_list|()
operator|/
literal|60
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"illegal timezone offset "
operator|+
name|offset
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|createSameKind
argument_list|(
name|xgc
argument_list|)
return|;
block|}
specifier|public
name|AbstractDateTimeValue
name|withoutTimezone
parameter_list|()
throws|throws
name|XPathException
block|{
name|XMLGregorianCalendar
name|xgc
init|=
operator|(
name|XMLGregorianCalendar
operator|)
name|calendar
operator|.
name|clone
argument_list|()
decl_stmt|;
name|xgc
operator|.
name|setTimezone
argument_list|(
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
argument_list|)
expr_stmt|;
return|return
name|createSameKind
argument_list|(
name|xgc
argument_list|)
return|;
block|}
specifier|public
name|Sequence
name|getTimezone
parameter_list|()
throws|throws
name|XPathException
block|{
name|int
name|tz
init|=
name|calendar
operator|.
name|getTimezone
argument_list|()
decl_stmt|;
if|if
condition|(
name|tz
operator|==
name|DatatypeConstants
operator|.
name|FIELD_UNDEFINED
condition|)
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
return|return
operator|new
name|DayTimeDurationValue
argument_list|(
name|tz
operator|*
literal|60000L
argument_list|)
return|;
block|}
specifier|public
name|boolean
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|int
name|operator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
name|int
name|cmp
init|=
name|compareTo
argument_list|(
name|collator
argument_list|,
name|other
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|Constants
operator|.
name|EQ
case|:
return|return
name|cmp
operator|==
literal|0
return|;
case|case
name|Constants
operator|.
name|NEQ
case|:
return|return
name|cmp
operator|!=
literal|0
return|;
case|case
name|Constants
operator|.
name|LT
case|:
return|return
name|cmp
operator|<
literal|0
return|;
case|case
name|Constants
operator|.
name|LTEQ
case|:
return|return
name|cmp
operator|<=
literal|0
return|;
case|case
name|Constants
operator|.
name|GT
case|:
return|return
name|cmp
operator|>
literal|0
return|;
case|case
name|Constants
operator|.
name|GTEQ
case|:
return|return
name|cmp
operator|>=
literal|0
return|;
default|default :
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown operator type in comparison"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getType
argument_list|()
operator|==
name|getType
argument_list|()
condition|)
block|{
comment|// filling in missing timezones with local timezone, should be total order as per XPath 2.0 10.4
name|int
name|r
init|=
name|getImplicitCalendar
argument_list|()
operator|.
name|compare
argument_list|(
operator|(
operator|(
name|AbstractDateTimeValue
operator|)
name|other
operator|)
operator|.
name|getImplicitCalendar
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|==
name|DatatypeConstants
operator|.
name|INDETERMINATE
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"indeterminate order between "
operator|+
name|this
operator|+
literal|" and "
operator|+
name|other
argument_list|)
throw|;
return|return
name|r
return|;
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: cannot compare "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|AtomicValue
name|max
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|otherDate
init|=
name|other
operator|.
name|getType
argument_list|()
operator|==
name|getType
argument_list|()
condition|?
operator|(
name|AbstractDateTimeValue
operator|)
name|other
else|:
operator|(
name|AbstractDateTimeValue
operator|)
name|other
operator|.
name|convertTo
argument_list|(
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getImplicitCalendar
argument_list|()
operator|.
name|compare
argument_list|(
name|otherDate
operator|.
name|getImplicitCalendar
argument_list|()
argument_list|)
operator|>
literal|0
condition|?
name|this
else|:
name|other
return|;
block|}
specifier|public
name|AtomicValue
name|min
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
name|AbstractDateTimeValue
name|otherDate
init|=
name|other
operator|.
name|getType
argument_list|()
operator|==
name|getType
argument_list|()
condition|?
operator|(
name|AbstractDateTimeValue
operator|)
name|other
else|:
operator|(
name|AbstractDateTimeValue
operator|)
name|other
operator|.
name|convertTo
argument_list|(
name|getType
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|getImplicitCalendar
argument_list|()
operator|.
name|compare
argument_list|(
name|otherDate
operator|.
name|getImplicitCalendar
argument_list|()
argument_list|)
operator|<
literal|0
condition|?
name|this
else|:
name|other
return|;
block|}
comment|// override for xs:time
specifier|public
name|ComputableValue
name|plus
parameter_list|(
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
switch|switch
condition|(
name|other
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|Type
operator|.
name|YEAR_MONTH_DURATION
case|:
case|case
name|Type
operator|.
name|DAY_TIME_DURATION
case|:
return|return
name|other
operator|.
name|plus
argument_list|(
name|this
argument_list|)
return|;
default|default:
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Operand to plus should be of type xdt:dayTimeDuration or xdt:yearMonthDuration; got: "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|ComputableValue
name|mult
parameter_list|(
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"multiplication is not supported for type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|ComputableValue
name|div
parameter_list|(
name|ComputableValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"division is not supported for type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|int
name|conversionPreference
parameter_list|(
name|Class
name|javaClass
parameter_list|)
block|{
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|DateValue
operator|.
name|class
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|XMLGregorianCalendar
operator|.
name|class
argument_list|)
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|GregorianCalendar
operator|.
name|class
argument_list|)
condition|)
return|return
literal|2
return|;
if|if
condition|(
name|javaClass
operator|==
name|Date
operator|.
name|class
condition|)
return|return
literal|3
return|;
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
specifier|public
name|Object
name|toJavaObject
parameter_list|(
name|Class
name|target
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|target
operator|==
name|Object
operator|.
name|class
operator|||
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|DateValue
operator|.
name|class
argument_list|)
condition|)
return|return
name|this
return|;
if|else if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|XMLGregorianCalendar
operator|.
name|class
argument_list|)
condition|)
return|return
name|calendar
operator|.
name|clone
argument_list|()
return|;
if|else if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|GregorianCalendar
operator|.
name|class
argument_list|)
condition|)
return|return
name|calendar
operator|.
name|toGregorianCalendar
argument_list|()
return|;
if|else if
condition|(
name|target
operator|==
name|Date
operator|.
name|class
condition|)
return|return
name|calendar
operator|.
name|toGregorianCalendar
argument_list|()
operator|.
name|getTime
argument_list|()
return|;
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|+
literal|" to Java object of type "
operator|+
name|target
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc)      * @see java.lang.Comparable#compareTo(java.lang.Object)      */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|AtomicValue
name|other
init|=
operator|(
name|AtomicValue
operator|)
name|o
decl_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|DATE_TIME
argument_list|)
condition|)
return|return
name|calendar
operator|.
name|compare
argument_list|(
operator|(
name|XMLGregorianCalendar
operator|)
name|o
argument_list|)
return|;
else|else
return|return
name|getType
argument_list|()
operator|>
name|other
operator|.
name|getType
argument_list|()
condition|?
name|Constants
operator|.
name|SUPERIOR
else|:
name|Constants
operator|.
name|INFERIOR
return|;
block|}
block|}
end_class

end_unit

