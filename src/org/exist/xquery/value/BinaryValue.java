begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_class
specifier|public
specifier|abstract
class|class
name|BinaryValue
extends|extends
name|AtomicValue
block|{
specifier|protected
name|byte
index|[]
name|data
decl_stmt|;
specifier|public
name|BinaryValue
parameter_list|()
block|{
block|}
specifier|public
name|BinaryValue
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|super
argument_list|()
expr_stmt|;
name|this
operator|.
name|data
operator|=
name|data
expr_stmt|;
block|}
specifier|public
name|byte
index|[]
name|getBinaryData
parameter_list|()
block|{
return|return
name|data
return|;
block|}
specifier|public
name|boolean
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|int
name|operator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|HEX_BINARY
operator|||
name|other
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BASE64_BINARY
condition|)
block|{
name|int
name|value
init|=
name|compareTo
argument_list|(
operator|(
name|BinaryValue
operator|)
name|other
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|Constants
operator|.
name|EQ
case|:
return|return
name|value
operator|==
literal|0
return|;
case|case
name|Constants
operator|.
name|NEQ
case|:
return|return
name|value
operator|!=
literal|0
return|;
case|case
name|Constants
operator|.
name|GT
case|:
return|return
name|value
operator|>
literal|0
return|;
case|case
name|Constants
operator|.
name|GTEQ
case|:
return|return
name|value
operator|>=
literal|0
return|;
case|case
name|Constants
operator|.
name|LT
case|:
return|return
name|value
operator|<
literal|0
return|;
case|case
name|Constants
operator|.
name|LTEQ
case|:
return|return
name|value
operator|<=
literal|0
return|;
default|default:
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: cannot apply operator to numeric value"
argument_list|)
throw|;
block|}
block|}
else|else
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot compare value of type xs:hexBinary with "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|int
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|HEX_BINARY
operator|||
name|other
operator|.
name|getType
argument_list|()
operator|==
name|Type
operator|.
name|BASE64_BINARY
condition|)
block|{
return|return
name|compareTo
argument_list|(
operator|(
name|BinaryValue
operator|)
name|other
argument_list|)
return|;
block|}
else|else
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot compare value of type xs:hexBinary with "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|AtomicValue
name|max
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot compare values of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|AtomicValue
name|min
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Cannot compare values of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|getType
argument_list|()
argument_list|)
argument_list|)
throw|;
block|}
specifier|public
name|int
name|conversionPreference
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|)
block|{
if|if
condition|(
name|javaClass
operator|.
name|isArray
argument_list|()
operator|&&
name|javaClass
operator|.
name|isInstance
argument_list|(
name|Byte
operator|.
name|class
argument_list|)
condition|)
return|return
literal|0
return|;
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
specifier|protected
name|int
name|compareTo
parameter_list|(
name|BinaryValue
name|otherValue
parameter_list|)
block|{
name|byte
index|[]
name|other
init|=
name|otherValue
operator|.
name|data
decl_stmt|;
name|int
name|a1len
init|=
name|data
operator|.
name|length
decl_stmt|;
name|int
name|a2len
init|=
name|other
operator|.
name|length
decl_stmt|;
name|int
name|limit
init|=
name|a1len
operator|<=
name|a2len
condition|?
name|a1len
else|:
name|a2len
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|b1
init|=
name|data
index|[
name|i
index|]
decl_stmt|;
name|byte
name|b2
init|=
name|other
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|b1
operator|!=
name|b2
condition|)
return|return
operator|(
name|b1
operator|&
literal|0xFF
operator|)
operator|-
operator|(
name|b2
operator|&
literal|0xFF
operator|)
return|;
block|}
return|return
operator|(
name|a1len
operator|-
name|a2len
operator|)
return|;
block|}
block|}
end_class

end_unit

