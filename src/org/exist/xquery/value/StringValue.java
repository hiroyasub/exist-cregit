begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2007 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Collations
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|UTF8
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|XMLChar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_class
specifier|public
class|class
name|StringValue
extends|extends
name|AtomicValue
block|{
specifier|public
specifier|final
specifier|static
name|StringValue
name|EMPTY_STRING
init|=
operator|new
name|StringValue
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|langRegex
init|=
comment|//http://www.w3.org/TR/xmlschema-2/#language
comment|//The lexical space of language is the set of all strings that conform
comment|//to the pattern [a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})* .
literal|"[a-zA-Z]{1,8}(-[a-zA-Z0-9]{1,8})*"
decl_stmt|;
comment|//Old definition : not sure where it comes from
comment|//"/(([a-z]|[A-Z])([a-z]|[A-Z])|" // ISO639Code
comment|//+ "([iI]-([a-z]|[A-Z])+)|"     // IanaCode
comment|//+ "([xX]-([a-z]|[A-Z])+))"     // UserCode
comment|//+ "(-([a-z]|[A-Z])+)*/";        // Subcode"
specifier|private
specifier|final
specifier|static
name|Pattern
name|langPattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|langRegex
argument_list|)
decl_stmt|;
specifier|protected
name|int
name|type
init|=
name|Type
operator|.
name|STRING
decl_stmt|;
specifier|protected
name|String
name|value
decl_stmt|;
specifier|public
name|StringValue
parameter_list|(
name|String
name|string
parameter_list|,
name|int
name|type
parameter_list|)
throws|throws
name|XPathException
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|string
operator|=
name|StringValue
operator|.
name|expand
argument_list|(
name|string
argument_list|)
expr_stmt|;
comment|//Should we have character entities
if|if
condition|(
name|type
operator|==
name|Type
operator|.
name|STRING
condition|)
name|this
operator|.
name|value
operator|=
name|string
expr_stmt|;
if|else if
condition|(
name|type
operator|==
name|Type
operator|.
name|NORMALIZED_STRING
condition|)
name|this
operator|.
name|value
operator|=
name|normalizeWhitespace
argument_list|(
name|string
argument_list|)
expr_stmt|;
else|else
block|{
name|this
operator|.
name|value
operator|=
name|collapseWhitespace
argument_list|(
name|string
argument_list|)
expr_stmt|;
name|checkType
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|StringValue
parameter_list|(
name|String
name|string
parameter_list|)
block|{
comment|//string = StringValue.expand(string); //Should we have character entities
name|value
operator|=
name|string
expr_stmt|;
block|}
specifier|public
name|StringValue
name|expand
parameter_list|()
throws|throws
name|XPathException
block|{
name|value
operator|=
name|expand
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
specifier|private
name|void
name|checkType
parameter_list|()
throws|throws
name|XPathException
block|{
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|Type
operator|.
name|NORMALIZED_STRING
case|:
case|case
name|Type
operator|.
name|TOKEN
case|:
return|return;
case|case
name|Type
operator|.
name|LANGUAGE
case|:
name|Matcher
name|matcher
init|=
name|langPattern
operator|.
name|matcher
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|matcher
operator|.
name|matches
argument_list|()
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: string "
operator|+
name|value
operator|+
literal|" is not valid for type xs:language"
argument_list|)
throw|;
return|return;
case|case
name|Type
operator|.
name|NAME
case|:
if|if
condition|(
operator|!
name|QName
operator|.
name|isQName
argument_list|(
name|value
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: string "
operator|+
name|value
operator|+
literal|" is not a valid xs:Name"
argument_list|)
throw|;
return|return;
case|case
name|Type
operator|.
name|NCNAME
case|:
case|case
name|Type
operator|.
name|ID
case|:
case|case
name|Type
operator|.
name|IDREF
case|:
case|case
name|Type
operator|.
name|ENTITY
case|:
if|if
condition|(
operator|!
name|XMLChar
operator|.
name|isValidNCName
argument_list|(
name|value
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: string "
operator|+
name|value
operator|+
literal|" is not a valid "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
argument_list|)
throw|;
case|case
name|Type
operator|.
name|NMTOKEN
case|:
if|if
condition|(
operator|!
name|XMLChar
operator|.
name|isValidNmtoken
argument_list|(
name|value
argument_list|)
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: string "
operator|+
name|value
operator|+
literal|" is not a valid xs:NMTOKEN"
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.AtomicValue#getType() 	 */
specifier|public
name|int
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#getStringValue() 	 */
specifier|public
name|String
name|getStringValue
parameter_list|()
block|{
return|return
name|getStringValue
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.Item#getStringValue() 	 */
specifier|public
name|String
name|getStringValue
parameter_list|(
name|boolean
name|bmpCheck
parameter_list|)
block|{
if|if
condition|(
name|bmpCheck
condition|)
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|value
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|value
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|value
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|XMLChar
operator|.
name|isSurrogate
argument_list|(
name|ch
argument_list|)
condition|)
block|{
comment|// Compose supplemental from high and low surrogate
name|int
name|suppChar
init|=
name|XMLChar
operator|.
name|supplemental
argument_list|(
name|ch
argument_list|,
name|value
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"&#"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|suppChar
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|";"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
specifier|public
name|Item
name|itemAt
parameter_list|(
name|int
name|pos
parameter_list|)
block|{
return|return
name|pos
operator|==
literal|0
condition|?
name|this
else|:
literal|null
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.AtomicValue#convertTo(int) 	 */
specifier|public
name|AtomicValue
name|convertTo
parameter_list|(
name|int
name|requiredType
parameter_list|)
throws|throws
name|XPathException
block|{
switch|switch
condition|(
name|requiredType
condition|)
block|{
comment|//TODO : should we allow these 2 type under-promotions ?
case|case
name|Type
operator|.
name|ATOMIC
case|:
case|case
name|Type
operator|.
name|ITEM
case|:
case|case
name|Type
operator|.
name|STRING
case|:
return|return
name|this
return|;
case|case
name|Type
operator|.
name|NORMALIZED_STRING
case|:
case|case
name|Type
operator|.
name|TOKEN
case|:
case|case
name|Type
operator|.
name|LANGUAGE
case|:
case|case
name|Type
operator|.
name|NMTOKEN
case|:
case|case
name|Type
operator|.
name|NAME
case|:
case|case
name|Type
operator|.
name|NCNAME
case|:
case|case
name|Type
operator|.
name|ID
case|:
case|case
name|Type
operator|.
name|IDREF
case|:
case|case
name|Type
operator|.
name|ENTITY
case|:
return|return
operator|new
name|StringValue
argument_list|(
name|value
argument_list|,
name|requiredType
argument_list|)
return|;
case|case
name|Type
operator|.
name|ANY_URI
case|:
return|return
operator|new
name|AnyURIValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|BOOLEAN
case|:
name|String
name|trimmed
init|=
name|trimWhitespace
argument_list|(
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|trimmed
operator|.
name|equals
argument_list|(
literal|"0"
argument_list|)
operator|||
name|trimmed
operator|.
name|equals
argument_list|(
literal|"false"
argument_list|)
condition|)
return|return
name|BooleanValue
operator|.
name|FALSE
return|;
if|else if
condition|(
name|trimmed
operator|.
name|equals
argument_list|(
literal|"1"
argument_list|)
operator|||
name|trimmed
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
condition|)
return|return
name|BooleanValue
operator|.
name|TRUE
return|;
else|else
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert string '"
operator|+
name|value
operator|+
literal|"' to boolean"
argument_list|)
throw|;
case|case
name|Type
operator|.
name|FLOAT
case|:
return|return
operator|new
name|FloatValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|DOUBLE
case|:
case|case
name|Type
operator|.
name|NUMBER
case|:
return|return
operator|new
name|DoubleValue
argument_list|(
name|this
argument_list|)
return|;
case|case
name|Type
operator|.
name|DECIMAL
case|:
return|return
operator|new
name|DecimalValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|INTEGER
case|:
case|case
name|Type
operator|.
name|NON_POSITIVE_INTEGER
case|:
case|case
name|Type
operator|.
name|NEGATIVE_INTEGER
case|:
case|case
name|Type
operator|.
name|POSITIVE_INTEGER
case|:
case|case
name|Type
operator|.
name|LONG
case|:
case|case
name|Type
operator|.
name|INT
case|:
case|case
name|Type
operator|.
name|SHORT
case|:
case|case
name|Type
operator|.
name|BYTE
case|:
case|case
name|Type
operator|.
name|NON_NEGATIVE_INTEGER
case|:
case|case
name|Type
operator|.
name|UNSIGNED_LONG
case|:
case|case
name|Type
operator|.
name|UNSIGNED_INT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_SHORT
case|:
case|case
name|Type
operator|.
name|UNSIGNED_BYTE
case|:
return|return
operator|new
name|IntegerValue
argument_list|(
name|value
argument_list|,
name|requiredType
argument_list|)
return|;
case|case
name|Type
operator|.
name|BASE64_BINARY
case|:
return|return
operator|new
name|Base64Binary
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|HEX_BINARY
case|:
return|return
operator|new
name|HexBinary
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|DATE_TIME
case|:
return|return
operator|new
name|DateTimeValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|TIME
case|:
return|return
operator|new
name|TimeValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|DATE
case|:
return|return
operator|new
name|DateValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|DURATION
case|:
return|return
operator|new
name|DurationValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|YEAR_MONTH_DURATION
case|:
return|return
operator|new
name|YearMonthDurationValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|DAY_TIME_DURATION
case|:
return|return
operator|new
name|DayTimeDurationValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|GYEAR
case|:
return|return
operator|new
name|GYearValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|GMONTH
case|:
return|return
operator|new
name|GMonthValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|GDAY
case|:
return|return
operator|new
name|GDayValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|GYEARMONTH
case|:
return|return
operator|new
name|GYearMonthValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|GMONTHDAY
case|:
return|return
operator|new
name|GMonthDayValue
argument_list|(
name|value
argument_list|)
return|;
case|case
name|Type
operator|.
name|UNTYPED_ATOMIC
case|:
return|return
operator|new
name|UntypedAtomicValue
argument_list|(
name|getStringValue
argument_list|()
argument_list|)
return|;
case|case
name|Type
operator|.
name|QNAME
case|:
return|return
operator|new
name|QNameValue
argument_list|(
literal|null
argument_list|,
operator|new
name|QName
argument_list|(
name|value
argument_list|)
argument_list|)
return|;
default|default :
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"FORG0001: cannot cast '"
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|this
operator|.
name|getItemType
argument_list|()
argument_list|)
operator|+
literal|"(\""
operator|+
name|getStringValue
argument_list|()
operator|+
literal|"\")' to "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|requiredType
argument_list|)
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|conversionPreference
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|javaClass
parameter_list|)
block|{
if|if
condition|(
name|javaClass
operator|.
name|isAssignableFrom
argument_list|(
name|StringValue
operator|.
name|class
argument_list|)
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|javaClass
operator|==
name|String
operator|.
name|class
operator|||
name|javaClass
operator|==
name|CharSequence
operator|.
name|class
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|javaClass
operator|==
name|Character
operator|.
name|class
operator|||
name|javaClass
operator|==
name|char
operator|.
name|class
condition|)
return|return
literal|2
return|;
if|if
condition|(
name|javaClass
operator|==
name|Double
operator|.
name|class
operator|||
name|javaClass
operator|==
name|double
operator|.
name|class
condition|)
return|return
literal|10
return|;
if|if
condition|(
name|javaClass
operator|==
name|Float
operator|.
name|class
operator|||
name|javaClass
operator|==
name|float
operator|.
name|class
condition|)
return|return
literal|11
return|;
if|if
condition|(
name|javaClass
operator|==
name|Long
operator|.
name|class
operator|||
name|javaClass
operator|==
name|long
operator|.
name|class
condition|)
return|return
literal|12
return|;
if|if
condition|(
name|javaClass
operator|==
name|Integer
operator|.
name|class
operator|||
name|javaClass
operator|==
name|int
operator|.
name|class
condition|)
return|return
literal|13
return|;
if|if
condition|(
name|javaClass
operator|==
name|Short
operator|.
name|class
operator|||
name|javaClass
operator|==
name|short
operator|.
name|class
condition|)
return|return
literal|14
return|;
if|if
condition|(
name|javaClass
operator|==
name|Byte
operator|.
name|class
operator|||
name|javaClass
operator|==
name|byte
operator|.
name|class
condition|)
return|return
literal|15
return|;
if|if
condition|(
name|javaClass
operator|==
name|Boolean
operator|.
name|class
operator|||
name|javaClass
operator|==
name|boolean
operator|.
name|class
condition|)
return|return
literal|16
return|;
if|if
condition|(
name|javaClass
operator|==
name|Object
operator|.
name|class
condition|)
return|return
literal|20
return|;
return|return
name|Integer
operator|.
name|MAX_VALUE
return|;
block|}
specifier|public
name|Object
name|toJavaObject
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|target
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|target
operator|.
name|isAssignableFrom
argument_list|(
name|StringValue
operator|.
name|class
argument_list|)
condition|)
return|return
name|this
return|;
if|else if
condition|(
name|target
operator|==
name|Object
operator|.
name|class
operator|||
name|target
operator|==
name|String
operator|.
name|class
operator|||
name|target
operator|==
name|CharSequence
operator|.
name|class
condition|)
return|return
name|value
return|;
if|else if
condition|(
name|target
operator|==
name|double
operator|.
name|class
operator|||
name|target
operator|==
name|Double
operator|.
name|class
condition|)
block|{
name|DoubleValue
name|v
init|=
operator|(
name|DoubleValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|DOUBLE
argument_list|)
decl_stmt|;
return|return
operator|new
name|Double
argument_list|(
name|v
operator|.
name|getValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|float
operator|.
name|class
operator|||
name|target
operator|==
name|Float
operator|.
name|class
condition|)
block|{
name|FloatValue
name|v
init|=
operator|(
name|FloatValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|FLOAT
argument_list|)
decl_stmt|;
return|return
operator|new
name|Float
argument_list|(
name|v
operator|.
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|long
operator|.
name|class
operator|||
name|target
operator|==
name|Long
operator|.
name|class
condition|)
block|{
name|IntegerValue
name|v
init|=
operator|(
name|IntegerValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|LONG
argument_list|)
decl_stmt|;
return|return
operator|new
name|Long
argument_list|(
name|v
operator|.
name|getInt
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|int
operator|.
name|class
operator|||
name|target
operator|==
name|Integer
operator|.
name|class
condition|)
block|{
name|IntegerValue
name|v
init|=
operator|(
name|IntegerValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|INT
argument_list|)
decl_stmt|;
return|return
operator|new
name|Integer
argument_list|(
name|v
operator|.
name|getInt
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|short
operator|.
name|class
operator|||
name|target
operator|==
name|Short
operator|.
name|class
condition|)
block|{
name|IntegerValue
name|v
init|=
operator|(
name|IntegerValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|SHORT
argument_list|)
decl_stmt|;
return|return
operator|new
name|Short
argument_list|(
operator|(
name|short
operator|)
name|v
operator|.
name|getInt
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|byte
operator|.
name|class
operator|||
name|target
operator|==
name|Byte
operator|.
name|class
condition|)
block|{
name|IntegerValue
name|v
init|=
operator|(
name|IntegerValue
operator|)
name|convertTo
argument_list|(
name|Type
operator|.
name|BYTE
argument_list|)
decl_stmt|;
return|return
operator|new
name|Byte
argument_list|(
operator|(
name|byte
operator|)
name|v
operator|.
name|getInt
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|boolean
operator|.
name|class
operator|||
name|target
operator|==
name|Boolean
operator|.
name|class
condition|)
block|{
return|return
name|Boolean
operator|.
name|valueOf
argument_list|(
name|effectiveBooleanValue
argument_list|()
argument_list|)
return|;
block|}
if|else if
condition|(
name|target
operator|==
name|char
operator|.
name|class
operator|||
name|target
operator|==
name|Character
operator|.
name|class
condition|)
block|{
if|if
condition|(
name|value
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|||
name|value
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert string with length = 0 or length> 1 to Java character"
argument_list|)
throw|;
return|return
operator|new
name|Character
argument_list|(
name|value
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"cannot convert value of type "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|type
argument_list|)
operator|+
literal|" to Java object of type "
operator|+
name|target
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.AtomicValue#compareTo(int, org.exist.xquery.value.AtomicValue) 	 */
specifier|public
name|boolean
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|int
name|operator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|other
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
comment|//A value of type xs:anyURI (or any type derived by restriction from xs:anyURI)
comment|//can be promoted to the type xs:string.
comment|//The result of this promotion is created by casting the original value to the type xs:string.
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|ANY_URI
argument_list|)
condition|)
name|other
operator|=
name|other
operator|.
name|convertTo
argument_list|(
name|Type
operator|.
name|STRING
argument_list|)
expr_stmt|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
block|{
name|int
name|cmp
init|=
name|Collations
operator|.
name|compare
argument_list|(
name|collator
argument_list|,
name|value
argument_list|,
name|other
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|operator
condition|)
block|{
case|case
name|Constants
operator|.
name|EQ
case|:
return|return
name|cmp
operator|==
literal|0
return|;
case|case
name|Constants
operator|.
name|NEQ
case|:
return|return
name|cmp
operator|!=
literal|0
return|;
case|case
name|Constants
operator|.
name|LT
case|:
return|return
name|cmp
operator|<
literal|0
return|;
case|case
name|Constants
operator|.
name|LTEQ
case|:
return|return
name|cmp
operator|<=
literal|0
return|;
case|case
name|Constants
operator|.
name|GT
case|:
return|return
name|cmp
operator|>
literal|0
return|;
case|case
name|Constants
operator|.
name|GTEQ
case|:
return|return
name|cmp
operator|>=
literal|0
return|;
default|default :
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Type error: cannot apply operand to string value"
argument_list|)
throw|;
block|}
block|}
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPTY0004: can not compare xs:string('"
operator|+
name|value
operator|+
literal|"') with "
operator|+
name|Type
operator|.
name|getTypeName
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|)
operator|+
literal|"('"
operator|+
name|other
operator|.
name|getStringValue
argument_list|()
operator|+
literal|"')"
argument_list|)
throw|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.AtomicValue#compareTo(org.exist.xquery.value.AtomicValue) 	 */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|NUMBER
argument_list|)
condition|)
block|{
comment|//No possible comparisons
if|if
condition|(
operator|(
operator|(
name|NumericValue
operator|)
name|other
operator|)
operator|.
name|isNaN
argument_list|()
condition|)
return|return
name|Constants
operator|.
name|INFERIOR
return|;
if|if
condition|(
operator|(
operator|(
name|NumericValue
operator|)
name|other
operator|)
operator|.
name|isInfinite
argument_list|()
condition|)
return|return
name|Constants
operator|.
name|INFERIOR
return|;
block|}
return|return
name|Collations
operator|.
name|compare
argument_list|(
name|collator
argument_list|,
name|value
argument_list|,
name|other
operator|.
name|getStringValue
argument_list|()
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.AtomicValue#startsWith(org.exist.xquery.value.AtomicValue) 	 */
specifier|public
name|boolean
name|startsWith
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|Collations
operator|.
name|startsWith
argument_list|(
name|collator
argument_list|,
name|value
argument_list|,
name|other
operator|.
name|getStringValue
argument_list|()
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.AtomicValue#endsWith(org.exist.xquery.value.AtomicValue) 	 */
specifier|public
name|boolean
name|endsWith
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|Collations
operator|.
name|endsWith
argument_list|(
name|collator
argument_list|,
name|value
argument_list|,
name|other
operator|.
name|getStringValue
argument_list|()
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.AtomicValue#contains(org.exist.xquery.value.AtomicValue) 	 */
specifier|public
name|boolean
name|contains
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|Collations
operator|.
name|indexOf
argument_list|(
name|collator
argument_list|,
name|value
argument_list|,
name|other
operator|.
name|getStringValue
argument_list|()
argument_list|)
operator|!=
name|Constants
operator|.
name|STRING_NOT_FOUND
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.AtomicValue#effectiveBooleanValue() 	 */
specifier|public
name|boolean
name|effectiveBooleanValue
parameter_list|()
throws|throws
name|XPathException
block|{
comment|// If its operand is a singleton value of type xs:string, xs:anyURI, xs:untypedAtomic,
comment|//or a type derived from one of these, fn:boolean returns false if the operand value has zero length; otherwise it returns true.
return|return
name|value
operator|.
name|length
argument_list|()
operator|>
literal|0
return|;
block|}
comment|/* (non-Javadoc) 	 * @see java.lang.Object#toString() 	 */
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|value
return|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|normalizeWhitespace
parameter_list|(
name|CharSequence
name|seq
parameter_list|)
block|{
if|if
condition|(
name|seq
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|StringBuilder
name|copy
init|=
operator|new
name|StringBuilder
argument_list|(
name|seq
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seq
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|seq
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|'\t'
case|:
name|copy
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
break|break;
default|default :
name|copy
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|copy
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 * Collapses all sequences of adjacent whitespace chars in the input string 	 * into a single space. 	 *   	 * @param in 	 */
specifier|public
specifier|static
name|String
name|collapseWhitespace
parameter_list|(
name|CharSequence
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
return|return
literal|""
return|;
if|if
condition|(
name|in
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|in
operator|.
name|toString
argument_list|()
return|;
block|}
name|int
name|i
init|=
literal|0
decl_stmt|;
comment|// this method is performance critical, so first test if we need to collapse at all
for|for
control|(
init|;
name|i
operator|<
name|in
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|XMLChar
operator|.
name|isSpace
argument_list|(
name|c
argument_list|)
condition|)
block|{
if|if
condition|(
name|i
operator|+
literal|1
operator|<
name|in
operator|.
name|length
argument_list|()
operator|&&
name|XMLChar
operator|.
name|isSpace
argument_list|(
name|in
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
break|break;
block|}
block|}
if|if
condition|(
name|i
operator|==
name|in
operator|.
name|length
argument_list|()
condition|)
comment|// no whitespace to collapse, just return
return|return
name|in
operator|.
name|toString
argument_list|()
return|;
comment|// start to collapse whitespace
name|StringBuilder
name|sb
init|=
operator|new
name|StringBuilder
argument_list|(
name|in
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|sb
operator|.
name|append
argument_list|(
name|in
operator|.
name|subSequence
argument_list|(
literal|0
argument_list|,
name|i
operator|+
literal|1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|boolean
name|inWhitespace
init|=
literal|true
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|in
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|char
name|c
init|=
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|XMLChar
operator|.
name|isSpace
argument_list|(
name|c
argument_list|)
condition|)
block|{
if|if
condition|(
name|inWhitespace
condition|)
block|{
comment|// remove the whitespace
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|inWhitespace
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
name|sb
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|inWhitespace
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|sb
operator|.
name|charAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|' '
condition|)
block|{
name|sb
operator|.
name|deleteCharAt
argument_list|(
name|sb
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|trimWhitespace
parameter_list|(
name|String
name|in
parameter_list|)
block|{
if|if
condition|(
name|in
operator|==
literal|null
condition|)
block|{
return|return
literal|""
return|;
block|}
if|if
condition|(
name|in
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|in
return|;
block|}
name|int
name|first
init|=
literal|0
decl_stmt|;
name|int
name|last
init|=
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
decl_stmt|;
while|while
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|first
argument_list|)
operator|<=
literal|0x20
condition|)
block|{
if|if
condition|(
name|first
operator|++
operator|>=
name|last
condition|)
block|{
return|return
literal|""
return|;
block|}
block|}
while|while
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|last
argument_list|)
operator|<=
literal|0x20
condition|)
block|{
name|last
operator|--
expr_stmt|;
block|}
return|return
name|in
operator|.
name|substring
argument_list|(
name|first
argument_list|,
name|last
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|expand
parameter_list|(
name|CharSequence
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|seq
operator|==
literal|null
condition|)
return|return
literal|""
return|;
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|(
name|seq
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|StringBuilder
name|entityRef
init|=
literal|null
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|seq
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|seq
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
condition|)
block|{
case|case
literal|'&'
case|:
if|if
condition|(
name|entityRef
operator|==
literal|null
condition|)
name|entityRef
operator|=
operator|new
name|StringBuilder
argument_list|()
expr_stmt|;
else|else
name|entityRef
operator|.
name|setLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|==
name|seq
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPST0003 : Ampersands (&) must be escaped."
argument_list|)
throw|;
block|}
if|if
condition|(
operator|(
name|i
operator|+
literal|2
operator|)
operator|==
name|seq
operator|.
name|length
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPST0003 : Ampersands (&) must be escaped (missing ;)."
argument_list|)
throw|;
block|}
name|ch
operator|=
name|seq
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'#'
condition|)
block|{
if|if
condition|(
operator|!
name|Character
operator|.
name|isLetter
argument_list|(
name|ch
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPST0003 : Ampersands (&) must be escaped (following character was not a name start character)."
argument_list|)
throw|;
block|}
name|entityRef
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|2
init|;
name|j
operator|<
name|seq
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ch
operator|=
name|seq
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|';'
operator|&&
operator|(
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'_'
operator|||
name|ch
operator|==
literal|'-'
operator|||
name|Character
operator|.
name|isLetterOrDigit
argument_list|(
name|ch
argument_list|)
operator|)
condition|)
block|{
name|entityRef
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ch
operator|==
literal|';'
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
break|break;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|expandEntity
argument_list|(
name|entityRef
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPST0003 : Invalid character in entity name ("
operator|+
name|ch
operator|+
literal|") or missing ;"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|entityRef
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|ch
operator|=
name|seq
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|2
argument_list|)
expr_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'x'
condition|)
block|{
name|entityRef
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
comment|// hex number
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|3
init|;
name|j
operator|<
name|seq
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ch
operator|=
name|seq
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|';'
operator|&&
operator|(
name|ch
operator|==
literal|'0'
operator|||
name|ch
operator|==
literal|'1'
operator|||
name|ch
operator|==
literal|'2'
operator|||
name|ch
operator|==
literal|'3'
operator|||
name|ch
operator|==
literal|'4'
operator|||
name|ch
operator|==
literal|'5'
operator|||
name|ch
operator|==
literal|'6'
operator|||
name|ch
operator|==
literal|'7'
operator|||
name|ch
operator|==
literal|'8'
operator|||
name|ch
operator|==
literal|'9'
operator|||
name|ch
operator|==
literal|'a'
operator|||
name|ch
operator|==
literal|'b'
operator|||
name|ch
operator|==
literal|'c'
operator|||
name|ch
operator|==
literal|'d'
operator|||
name|ch
operator|==
literal|'e'
operator|||
name|ch
operator|==
literal|'f'
operator|||
name|ch
operator|==
literal|'A'
operator|||
name|ch
operator|==
literal|'B'
operator|||
name|ch
operator|==
literal|'C'
operator|||
name|ch
operator|==
literal|'D'
operator|||
name|ch
operator|==
literal|'E'
operator|||
name|ch
operator|==
literal|'F'
operator|)
condition|)
block|{
name|entityRef
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ch
operator|==
literal|';'
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
break|break;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// decimal number
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|2
init|;
name|j
operator|<
name|seq
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|ch
operator|=
name|seq
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|';'
operator|&&
operator|(
name|ch
operator|==
literal|'0'
operator|||
name|ch
operator|==
literal|'1'
operator|||
name|ch
operator|==
literal|'2'
operator|||
name|ch
operator|==
literal|'3'
operator|||
name|ch
operator|==
literal|'4'
operator|||
name|ch
operator|==
literal|'5'
operator|||
name|ch
operator|==
literal|'6'
operator|||
name|ch
operator|==
literal|'7'
operator|||
name|ch
operator|==
literal|'8'
operator|||
name|ch
operator|==
literal|'9'
operator|)
condition|)
block|{
name|entityRef
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|ch
operator|==
literal|';'
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|i
operator|=
name|j
expr_stmt|;
break|break;
block|}
else|else
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|found
condition|)
block|{
name|int
name|charref
init|=
name|expandEntity
argument_list|(
name|entityRef
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|XMLChar
operator|.
name|isSupplemental
argument_list|(
name|charref
argument_list|)
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|XMLChar
operator|.
name|highSurrogate
argument_list|(
name|charref
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|XMLChar
operator|.
name|lowSurrogate
argument_list|(
name|charref
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
name|charref
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XPST0003 : Invalid character in character reference ("
operator|+
name|ch
operator|+
literal|") or missing ;"
argument_list|)
throw|;
block|}
block|}
break|break;
case|case
literal|'\r'
case|:
comment|// drop carriage returns
if|if
condition|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|!=
name|seq
operator|.
name|length
argument_list|()
condition|)
block|{
name|ch
operator|=
name|seq
operator|.
name|charAt
argument_list|(
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|!=
literal|'\n'
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
default|default :
name|buf
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * The method<code>expandEntity</code>      *      * @param buf a<code>String</code> value      * @return an<code>int</code> value      * @exception XPathException if an error occurs      */
specifier|private
specifier|final
specifier|static
name|int
name|expandEntity
parameter_list|(
name|String
name|buf
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|buf
operator|.
name|equals
argument_list|(
literal|"amp"
argument_list|)
condition|)
return|return
literal|'&'
return|;
if|else if
condition|(
name|buf
operator|.
name|equals
argument_list|(
literal|"lt"
argument_list|)
condition|)
return|return
literal|'<'
return|;
if|else if
condition|(
name|buf
operator|.
name|equals
argument_list|(
literal|"gt"
argument_list|)
condition|)
return|return
literal|'>'
return|;
if|else if
condition|(
name|buf
operator|.
name|equals
argument_list|(
literal|"quot"
argument_list|)
condition|)
return|return
literal|'"'
return|;
if|else if
condition|(
name|buf
operator|.
name|equals
argument_list|(
literal|"apos"
argument_list|)
condition|)
return|return
literal|'\''
return|;
if|else if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|buf
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'#'
condition|)
block|{
return|return
name|expandCharRef
argument_list|(
name|buf
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|)
return|;
block|}
else|else
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown entity reference: "
operator|+
name|buf
argument_list|)
throw|;
block|}
comment|/**      * The method<code>expandCharRef</code>      *      * @param buf a<code>String</code> value      * @return an<code>int</code> value      * @exception XPathException if an error occurs      */
specifier|private
specifier|final
specifier|static
name|int
name|expandCharRef
parameter_list|(
name|String
name|buf
parameter_list|)
throws|throws
name|XPathException
block|{
try|try
block|{
name|int
name|charNumber
decl_stmt|;
if|if
condition|(
name|buf
operator|.
name|length
argument_list|()
operator|>
literal|1
operator|&&
name|buf
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'x'
condition|)
block|{
comment|// Hex
name|charNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|buf
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|charNumber
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|buf
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|charNumber
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"XQST0090 : Character number zero (0) is not allowed."
argument_list|)
throw|;
block|}
return|return
name|charNumber
return|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Unknown character reference: "
operator|+
name|buf
argument_list|)
throw|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.value.AtomicValue#max(org.exist.xquery.value.AtomicValue) 	 */
specifier|public
name|AtomicValue
name|max
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
return|return
name|Collations
operator|.
name|compare
argument_list|(
name|collator
argument_list|,
name|value
argument_list|,
operator|(
operator|(
name|StringValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
operator|>
literal|0
condition|?
name|this
else|:
name|other
return|;
else|else
return|return
name|Collations
operator|.
name|compare
argument_list|(
name|collator
argument_list|,
name|value
argument_list|,
operator|(
operator|(
name|StringValue
operator|)
name|other
operator|.
name|convertTo
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|value
argument_list|)
operator|>
literal|0
condition|?
name|this
else|:
name|other
return|;
block|}
specifier|public
name|AtomicValue
name|min
parameter_list|(
name|Collator
name|collator
parameter_list|,
name|AtomicValue
name|other
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|other
operator|.
name|getType
argument_list|()
argument_list|,
name|Type
operator|.
name|STRING
argument_list|)
condition|)
return|return
name|Collations
operator|.
name|compare
argument_list|(
name|collator
argument_list|,
name|value
argument_list|,
operator|(
operator|(
name|StringValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
operator|<
literal|0
condition|?
name|this
else|:
name|other
return|;
else|else
return|return
name|Collations
operator|.
name|compare
argument_list|(
name|collator
argument_list|,
name|value
argument_list|,
operator|(
operator|(
name|StringValue
operator|)
name|other
operator|.
name|convertTo
argument_list|(
name|getType
argument_list|()
argument_list|)
operator|)
operator|.
name|value
argument_list|)
operator|<
literal|0
condition|?
name|this
else|:
name|other
return|;
block|}
comment|/* (non-Javadoc)      * @see java.lang.Comparable#compareTo(java.lang.Object)      */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
name|AtomicValue
name|other
init|=
operator|(
name|AtomicValue
operator|)
name|o
decl_stmt|;
comment|//        if(Type.subTypeOf(other.getType(), Type.STRING))
if|if
condition|(
name|getType
argument_list|()
operator|==
name|other
operator|.
name|getType
argument_list|()
condition|)
return|return
name|value
operator|.
name|compareTo
argument_list|(
operator|(
operator|(
name|StringValue
operator|)
name|other
operator|)
operator|.
name|value
argument_list|)
return|;
else|else
return|return
name|getType
argument_list|()
operator|>
name|other
operator|.
name|getType
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
return|;
block|}
comment|/** Serialize for the persistant storage       * @param offset      * */
specifier|public
name|byte
index|[]
name|serializeValue
parameter_list|(
name|int
name|offset
parameter_list|,
name|boolean
name|caseSensitive
parameter_list|)
block|{
specifier|final
name|String
name|val
init|=
name|caseSensitive
condition|?
name|value
else|:
name|value
operator|.
name|toLowerCase
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|offset
operator|+
literal|1
operator|+
name|UTF8
operator|.
name|encoded
argument_list|(
name|val
argument_list|)
index|]
decl_stmt|;
name|data
index|[
name|offset
index|]
operator|=
operator|(
name|byte
operator|)
name|type
expr_stmt|;
comment|// TODO: cast to byte is not safe
name|UTF8
operator|.
name|encode
argument_list|(
name|val
argument_list|,
name|data
argument_list|,
name|offset
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
block|}
end_class

end_unit

