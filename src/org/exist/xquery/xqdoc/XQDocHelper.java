begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|xqdoc
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionParameterSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|FunctionReturnSequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|xqdoc
operator|.
name|parser
operator|.
name|XQDocLexer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|xqdoc
operator|.
name|parser
operator|.
name|XQDocParser
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  * Helper for parsing XQDoc comments on function declarations. XQDoc comments  * are stored in the function signature but not parsed until one of the  * inspection functions accesses them.  */
end_comment

begin_class
specifier|public
class|class
name|XQDocHelper
block|{
specifier|public
specifier|static
name|void
name|parse
parameter_list|(
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|String
name|desc
init|=
name|signature
operator|.
name|getDescription
argument_list|()
decl_stmt|;
if|if
condition|(
name|desc
operator|==
literal|null
operator|||
operator|!
name|desc
operator|.
name|startsWith
argument_list|(
literal|"(:"
argument_list|)
condition|)
block|{
return|return;
block|}
name|XQDocLexer
name|lexer
init|=
operator|new
name|XQDocLexer
argument_list|(
operator|new
name|StringReader
argument_list|(
name|desc
argument_list|)
argument_list|)
decl_stmt|;
name|XQDocParser
name|parser
init|=
operator|new
name|XQDocParser
argument_list|(
name|lexer
argument_list|)
decl_stmt|;
name|XQDocHelper
name|helper
init|=
operator|new
name|XQDocHelper
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|xqdocComment
argument_list|(
name|helper
argument_list|)
expr_stmt|;
name|helper
operator|.
name|enhance
argument_list|(
name|signature
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
comment|// ignore: comment will be shown unparsed
block|}
catch|catch
parameter_list|(
name|TokenStreamException
name|e
parameter_list|)
block|{
comment|// ignore: comment will be shown unparsed
block|}
block|}
specifier|private
name|StringBuilder
name|description
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|parameters
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|meta
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
specifier|public
name|XQDocHelper
parameter_list|()
block|{
block|}
specifier|public
name|void
name|addDescription
parameter_list|(
name|CharSequence
name|part
parameter_list|)
block|{
name|description
operator|.
name|append
argument_list|(
name|part
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setParameter
parameter_list|(
name|String
name|comment
parameter_list|)
block|{
name|String
name|components
index|[]
init|=
name|comment
operator|.
name|trim
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\s+"
argument_list|,
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|components
operator|!=
literal|null
operator|&&
name|components
operator|.
name|length
operator|==
literal|2
condition|)
block|{
name|String
name|var
init|=
name|components
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|var
operator|.
name|length
argument_list|()
operator|>
literal|0
operator|&&
name|var
operator|.
name|charAt
argument_list|(
literal|0
argument_list|)
operator|==
literal|'$'
condition|)
name|var
operator|=
name|var
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|parameters
operator|.
name|put
argument_list|(
name|var
argument_list|,
name|components
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setTag
parameter_list|(
name|String
name|tag
parameter_list|,
name|String
name|content
parameter_list|)
block|{
if|if
condition|(
name|tag
operator|.
name|equals
argument_list|(
literal|"@param"
argument_list|)
condition|)
block|{
name|setParameter
argument_list|(
name|content
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|meta
operator|.
name|put
argument_list|(
name|tag
argument_list|,
name|content
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|enhance
parameter_list|(
name|FunctionSignature
name|signature
parameter_list|)
block|{
name|signature
operator|.
name|setDescription
argument_list|(
name|description
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|returnDesc
init|=
name|meta
operator|.
name|get
argument_list|(
literal|"@return"
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnDesc
operator|!=
literal|null
condition|)
block|{
name|SequenceType
name|returnType
init|=
name|signature
operator|.
name|getReturnType
argument_list|()
decl_stmt|;
name|FunctionReturnSequenceType
name|newType
init|=
operator|new
name|FunctionReturnSequenceType
argument_list|(
name|returnType
operator|.
name|getPrimaryType
argument_list|()
argument_list|,
name|returnType
operator|.
name|getCardinality
argument_list|()
argument_list|,
name|returnDesc
argument_list|)
decl_stmt|;
name|signature
operator|.
name|setReturnType
argument_list|(
name|newType
argument_list|)
expr_stmt|;
block|}
name|SequenceType
index|[]
name|args
init|=
name|signature
operator|.
name|getArgumentTypes
argument_list|()
decl_stmt|;
for|for
control|(
name|SequenceType
name|type
range|:
name|args
control|)
block|{
if|if
condition|(
name|type
operator|instanceof
name|FunctionParameterSequenceType
condition|)
block|{
name|FunctionParameterSequenceType
name|argType
init|=
operator|(
name|FunctionParameterSequenceType
operator|)
name|type
decl_stmt|;
name|String
name|desc
init|=
name|parameters
operator|.
name|get
argument_list|(
name|argType
operator|.
name|getAttributeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|!=
literal|null
condition|)
name|argType
operator|.
name|setDescription
argument_list|(
name|desc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|out
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|out
operator|.
name|append
argument_list|(
name|description
argument_list|)
operator|.
name|append
argument_list|(
literal|"\n\n"
argument_list|)
expr_stmt|;
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|meta
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%20s\t%s\n"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|entry
range|:
name|parameters
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|out
operator|.
name|append
argument_list|(
name|String
operator|.
name|format
argument_list|(
literal|"%20s\t%s\n"
argument_list|,
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

