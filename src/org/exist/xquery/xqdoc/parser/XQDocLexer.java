begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.7 (2006-11-01): "XQDocParser.g" -> "XQDocLexer.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|xqdoc
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|xqdoc
operator|.
name|XQDocHelper
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamRecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharScanner
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|InputBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CommonToken
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltForCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRHashString
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LexerSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_class
specifier|public
class|class
name|XQDocLexer
extends|extends
name|antlr
operator|.
name|CharScanner
implements|implements
name|XQDocParserTokenTypes
implements|,
name|TokenStream
block|{
specifier|public
name|XQDocLexer
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ByteBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQDocLexer
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|CharBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQDocLexer
parameter_list|(
name|InputBuffer
name|ib
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|LexerSharedInputState
argument_list|(
name|ib
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XQDocLexer
parameter_list|(
name|LexerSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|caseSensitiveLiterals
operator|=
literal|true
expr_stmt|;
name|setCaseSensitive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|literals
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Token
name|nextToken
parameter_list|()
throws|throws
name|TokenStreamException
block|{
name|Token
name|theRetToken
init|=
literal|null
decl_stmt|;
name|tryAgain
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_ttype
init|=
name|Token
operator|.
name|INVALID_TYPE
decl_stmt|;
name|resetText
argument_list|()
expr_stmt|;
try|try
block|{
comment|// for char stream error handling
try|try
block|{
comment|// for lexical error handling
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'('
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|':'
operator|)
condition|)
block|{
name|mXQDOC_START
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|')'
operator|)
condition|)
block|{
name|mXQDOC_END
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'@'
operator|)
operator|&&
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mTAG
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'@'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mAT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mCHARS
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'\n'
operator|)
condition|)
block|{
name|mTRIM
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|':'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mSIMPLE_COLON
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|EOF_CHAR
condition|)
block|{
name|uponEOF
argument_list|()
expr_stmt|;
name|_returnToken
operator|=
name|makeToken
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_returnToken
operator|==
literal|null
condition|)
continue|continue
name|tryAgain
continue|;
comment|// found SKIP token
name|_ttype
operator|=
name|_returnToken
operator|.
name|getType
argument_list|()
expr_stmt|;
name|_ttype
operator|=
name|testLiteralsTable
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_returnToken
operator|.
name|setType
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
return|return
name|_returnToken
return|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStreamRecognitionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CharStreamException
name|cse
parameter_list|)
block|{
if|if
condition|(
name|cse
operator|instanceof
name|CharStreamIOException
condition|)
block|{
throw|throw
operator|new
name|TokenStreamIOException
argument_list|(
operator|(
operator|(
name|CharStreamIOException
operator|)
name|cse
operator|)
operator|.
name|io
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TokenStreamException
argument_list|(
name|cse
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|mXQDOC_START
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XQDOC_START
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"(:~"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mXQDOC_END
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|XQDOC_END
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|":)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mAT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|AT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mCHARS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|CHARS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt16
init|=
literal|0
decl_stmt|;
name|_loop16
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|_cnt16
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop16
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt16
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mTRIM
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|TRIM
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|{
name|_loop19
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
block|{
name|match
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|' '
case|:
block|{
name|match
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
break|break
name|_loop19
break|;
block|}
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mSIMPLE_COLON
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SIMPLE_COLON
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mTAG
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|TAG
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt26
init|=
literal|0
decl_stmt|;
name|_loop26
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
block|{
name|matchRange
argument_list|(
literal|'A'
argument_list|,
literal|'Z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'a'
argument_list|,
literal|'z'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|matchRange
argument_list|(
literal|'0'
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|_cnt26
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop26
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt26
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1025
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|287948901175001088L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|576460743847706622L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|288230376151712776L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|-
literal|2L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|2
init|;
name|i
operator|<=
literal|1022
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
name|data
index|[
literal|1023
index|]
operator|=
literal|9223372036854775807L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

