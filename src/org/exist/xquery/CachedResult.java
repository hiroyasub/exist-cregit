begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * This class is used to hold an intermediate result that can be cached.  * Caching results is effective if a subexpression is executed more than once  * and the current evaluation context doesn't change between invocations.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|CachedResult
block|{
specifier|protected
name|Sequence
name|cachedResult
init|=
literal|null
decl_stmt|;
specifier|protected
name|Sequence
name|cachedContext
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|timestamp
init|=
literal|0
decl_stmt|;
specifier|public
name|CachedResult
parameter_list|(
name|NodeSet
name|context
parameter_list|,
name|Sequence
name|result
parameter_list|)
block|{
name|this
operator|.
name|cachedContext
operator|=
name|context
expr_stmt|;
name|this
operator|.
name|cachedResult
operator|=
name|result
expr_stmt|;
name|this
operator|.
name|timestamp
operator|=
name|context
operator|.
name|getState
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Sequence
name|getResult
parameter_list|()
block|{
return|return
name|cachedResult
return|;
block|}
specifier|public
name|boolean
name|isValid
parameter_list|(
name|Sequence
name|context
parameter_list|)
block|{
if|if
condition|(
name|context
operator|==
literal|null
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|Type
operator|.
name|subTypeOf
argument_list|(
name|context
operator|.
name|getItemType
argument_list|()
argument_list|,
name|Type
operator|.
name|NODE
argument_list|)
operator|&&
name|cachedContext
operator|==
name|context
condition|)
block|{
if|if
condition|(
operator|(
operator|(
name|NodeSet
operator|)
name|context
operator|)
operator|.
name|hasChanged
argument_list|(
name|timestamp
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|cachedResult
operator|.
name|setIsCached
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

