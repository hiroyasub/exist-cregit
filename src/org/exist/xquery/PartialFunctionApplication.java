begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_class
specifier|public
class|class
name|PartialFunctionApplication
extends|extends
name|AbstractExpression
block|{
specifier|protected
name|FunctionCall
name|function
decl_stmt|;
specifier|public
name|PartialFunctionApplication
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|FunctionCall
name|call
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|function
operator|=
name|call
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|function
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
name|Sequence
index|[]
name|seq
init|=
operator|new
name|Sequence
index|[
name|function
operator|.
name|getArgumentCount
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|function
operator|.
name|getArgumentCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Expression
name|arg
init|=
name|function
operator|.
name|getArgument
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|arg
operator|instanceof
name|Function
operator|.
name|Placeholder
condition|)
continue|continue;
try|try
block|{
name|seq
index|[
name|i
index|]
operator|=
name|arg
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
expr_stmt|;
comment|//			System.out.println("found " + seq[i].getLength() + " for " + getArgument(i).pprint());
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getLine
argument_list|()
operator|<=
literal|0
condition|)
block|{
name|e
operator|.
name|setLocation
argument_list|(
name|line
argument_list|,
name|column
argument_list|,
name|getSource
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// append location of the function call to the exception message:
name|e
operator|.
name|addFunctionCall
argument_list|(
name|function
operator|.
name|functionDef
argument_list|,
name|this
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
return|return
operator|new
name|PartialFunctionReference
argument_list|(
name|function
argument_list|,
name|seq
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|FUNCTION_REFERENCE
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
name|Cardinality
operator|.
name|EXACTLY_ONE
return|;
block|}
block|}
end_class

end_unit

