begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-03 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BooleanValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_comment
comment|/**  * Represents a quantified expression: "some ... in ... satisfies",   * "every ... in ... satisfies".  *   * @author Wolfgang Meier (wolfgang@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|QuantifiedExpression
extends|extends
name|BindingExpression
block|{
specifier|public
specifier|final
specifier|static
name|int
name|SOME
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|EVERY
init|=
literal|1
decl_stmt|;
specifier|private
name|int
name|mode
init|=
name|SOME
decl_stmt|;
comment|/** 	 * @param context 	 */
specifier|public
name|QuantifiedExpression
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|int
name|mode
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|mode
operator|=
name|mode
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|,
name|Sequence
name|resultSequence
parameter_list|)
throws|throws
name|XPathException
block|{
name|context
operator|.
name|pushLocalContext
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|Variable
name|var
init|=
operator|new
name|Variable
argument_list|(
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|varName
argument_list|)
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|var
argument_list|)
expr_stmt|;
name|Sequence
name|inSeq
init|=
name|inputSequence
operator|.
name|eval
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|Sequence
name|satisfiesSeq
decl_stmt|;
name|boolean
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|SequenceIterator
name|i
init|=
name|inSeq
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|contextItem
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
if|if
condition|(
name|sequenceType
operator|!=
literal|null
condition|)
comment|// check sequence type
name|sequenceType
operator|.
name|checkType
argument_list|(
name|contextItem
operator|.
name|getType
argument_list|()
argument_list|)
expr_stmt|;
name|var
operator|.
name|setValue
argument_list|(
name|contextItem
operator|.
name|toSequence
argument_list|()
argument_list|)
expr_stmt|;
name|satisfiesSeq
operator|=
name|returnExpr
operator|.
name|eval
argument_list|(
literal|null
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnExpr
operator|.
name|returnsType
argument_list|()
operator|==
name|Type
operator|.
name|BOOLEAN
condition|)
name|found
operator|=
name|satisfiesSeq
operator|.
name|effectiveBooleanValue
argument_list|()
expr_stmt|;
else|else
name|found
operator|=
name|satisfiesSeq
operator|.
name|getLength
argument_list|()
operator|!=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
name|mode
operator|==
name|SOME
operator|&&
name|found
operator|)
operator|||
operator|(
name|mode
operator|==
name|EVERY
operator|&&
operator|!
name|found
operator|)
condition|)
break|break;
block|}
name|context
operator|.
name|popLocalContext
argument_list|()
expr_stmt|;
return|return
name|found
condition|?
name|BooleanValue
operator|.
name|TRUE
else|:
name|BooleanValue
operator|.
name|FALSE
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.Expression#pprint() 	 */
specifier|public
name|String
name|pprint
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"some $"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|varName
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" in "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|inputSequence
operator|.
name|pprint
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|" satisfies "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|returnExpr
operator|.
name|pprint
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.Expression#returnsType() 	 */
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|Type
operator|.
name|BOOLEAN
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.AbstractExpression#getDependencies() 	 */
specifier|public
name|int
name|getDependencies
parameter_list|()
block|{
return|return
name|Dependency
operator|.
name|CONTEXT_ITEM
operator||
name|Dependency
operator|.
name|CONTEXT_SET
return|;
block|}
block|}
end_class

end_unit

