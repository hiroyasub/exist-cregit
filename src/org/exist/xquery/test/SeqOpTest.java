begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|SeqOpTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
specifier|static
name|String
name|URI
init|=
literal|"xmldb:exist:///db"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|DRIVER
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|private
name|XPathQueryService
name|query
decl_stmt|;
specifier|private
name|Collection
name|c
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|TestRunner
operator|.
name|run
argument_list|(
name|SeqOpTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
specifier|public
name|SeqOpTest
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|super
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReverseEmpty
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|"reverse(())"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReverseAtomic1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
literal|"reverse(('a'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReverseAtomic2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"a"
block|}
argument_list|,
literal|"reverse(('a', 'b'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReverseNodes1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><a/><b/></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|}
argument_list|,
literal|"reverse(//a)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReverseNodes2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><a/><b/></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b/>"
block|,
literal|"<a/>"
block|}
argument_list|,
literal|"reverse(/top/*)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testReverseMixed
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><a/><b/></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"c"
block|,
literal|"<b/>"
block|,
literal|"<a/>"
block|}
argument_list|,
literal|"reverse((/top/*, 'c'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveEmpty1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|"remove((), 1)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveEmpty2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|"remove((), 0)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveEmpty3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|"remove((), 42)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveOutOfBounds1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"remove(('a', 'b'), 0)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveOutOfBounds2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"remove(('a', 'b'), 3)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveOutOfBounds3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"remove(('a', 'b'), -1)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveAtomic1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
literal|"remove(('a', 'b', 'c'), 1)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveAtomic2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"c"
block|}
argument_list|,
literal|"remove(('a', 'b', 'c'), 2)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveAtomic3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"remove(('a', 'b', 'c'), 3)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveMixed1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><a/><b/></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b/>"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
literal|"remove((/top/*, 'a', 'b', 'c'), 1)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveMixed2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><a/><b/></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
literal|"remove((/top/*, 'a', 'b', 'c'), 2)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveMixed3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><a/><b/></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|,
literal|"<b/>"
block|,
literal|"b"
block|,
literal|"c"
block|}
argument_list|,
literal|"remove((/top/*, 'a', 'b', 'c'), 3)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveNodes1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><a/><b/><c/></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<b/>"
block|,
literal|"<c/>"
block|}
argument_list|,
literal|"remove(/top/*, 1)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveNodes2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><a/><b/><c/></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|,
literal|"<c/>"
block|}
argument_list|,
literal|"remove(/top/*, 2)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testRemoveNodes3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><a/><b/><c/></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|,
literal|"<b/>"
block|}
argument_list|,
literal|"remove(/top/*, 3)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertEmpty1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[
literal|0
index|]
argument_list|,
literal|"insert-before((), 1, ())"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertEmpty2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
literal|"insert-before((), 1, ('a'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertEmpty3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|}
argument_list|,
literal|"insert-before(('a'), 1, ())"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertOutOfBounds1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"c"
block|,
literal|"d"
block|,
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"insert-before(('a', 'b'), 0, ('c', 'd'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertOutOfBounds2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|,
literal|"insert-before(('a', 'b'), 3, ('c', 'd'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertOutOfBounds3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"b"
block|,
literal|"c"
block|,
literal|"d"
block|}
argument_list|,
literal|"insert-before(('a', 'b'), 4, ('c', 'd'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertAtomic1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"c"
block|,
literal|"d"
block|,
literal|"b"
block|}
argument_list|,
literal|"insert-before(('a', 'b'), 2, ('c', 'd'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertAtomic2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"c"
block|,
literal|"d"
block|,
literal|"a"
block|,
literal|"b"
block|}
argument_list|,
literal|"insert-before(('a', 'b'), 1, ('c', 'd'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertAtomic3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"a"
block|,
literal|"a"
block|,
literal|"b"
block|,
literal|"b"
block|}
argument_list|,
literal|"insert-before(('a', 'b'), 2, ('a', 'b'))"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertNodes1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><x><a/><b/></x><y><c/><d/></y></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|,
literal|"<c/>"
block|,
literal|"<d/>"
block|,
literal|"<b/>"
block|}
argument_list|,
literal|"insert-before(/top/x/*, 2, /top/y/*)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertNodes2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><x><a/><b/></x><y><c/><d/></y></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<c/>"
block|,
literal|"<d/>"
block|,
literal|"<a/>"
block|,
literal|"<b/>"
block|}
argument_list|,
literal|"insert-before(/top/x/*, 1, /top/y/*)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertNodes3
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><x><a/><b/></x><y><c/><d/></y></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|,
literal|"<b/>"
block|,
literal|"<c/>"
block|,
literal|"<d/>"
block|}
argument_list|,
literal|"insert-before(/top/x/*, 3, /top/y/*)"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: currently fails because duplicate nodes are removed
specifier|public
name|void
name|testInsertNodes4
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><x><a/><b/></x><y><c/><d/></y></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|,
literal|"<a/>"
block|,
literal|"<b/>"
block|,
literal|"<b/>"
block|}
argument_list|,
literal|"insert-before(/top/x/*, 2, /top/x/*)"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertMixed1
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><x><a/><b/></x><y><c/><d/></y></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|,
literal|"c"
block|,
literal|"<b/>"
block|}
argument_list|,
literal|"insert-before(/top/x/*, 2, ('c'))"
argument_list|)
expr_stmt|;
block|}
comment|// TODO: currently fails because duplicate nodes are removed
specifier|public
name|void
name|testInsertMixed2
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|createDocument
argument_list|(
literal|"foo"
argument_list|,
literal|"<top><x><a/><b/></x><y><c/><d/></y></top>"
argument_list|)
expr_stmt|;
name|assertSeq
argument_list|(
operator|new
name|String
index|[]
block|{
literal|"<a/>"
block|,
literal|"<a/>"
block|,
literal|"<b/>"
block|,
literal|"<b/>"
block|,
literal|"c"
block|}
argument_list|,
literal|"insert-before((/top/x/*, 'c'), 2, /top/x/*)"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|assertSeq
parameter_list|(
name|String
index|[]
name|expected
parameter_list|,
name|String
name|q
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|ResourceSet
name|rs
init|=
name|query
operator|.
name|query
argument_list|(
name|q
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|expected
operator|.
name|length
argument_list|,
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|List
name|a
init|=
name|Arrays
operator|.
name|asList
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|List
name|r
init|=
operator|new
name|ArrayList
argument_list|(
operator|(
name|int
operator|)
name|rs
operator|.
name|getSize
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rs
operator|.
name|getSize
argument_list|()
condition|;
name|i
operator|++
control|)
name|r
operator|.
name|add
argument_list|(
name|rs
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|a
operator|.
name|equals
argument_list|(
name|r
argument_list|)
condition|)
name|fail
argument_list|(
literal|"expected "
operator|+
name|a
operator|+
literal|", got "
operator|+
name|r
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XMLResource
name|createDocument
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|res
init|=
operator|(
name|XMLResource
operator|)
name|c
operator|.
name|createResource
argument_list|(
name|name
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
decl_stmt|;
name|res
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|c
operator|.
name|storeResource
argument_list|(
name|res
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
specifier|private
name|Collection
name|setupTestCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|rootcms
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|Collection
name|c
init|=
name|root
operator|.
name|getChildCollection
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|rootcms
operator|.
name|removeCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|rootcms
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|c
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|URI
operator|+
literal|"/test"
argument_list|,
literal|"admin"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|c
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
comment|// initialize driver
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|Class
operator|.
name|forName
argument_list|(
name|DRIVER
argument_list|)
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|c
operator|=
name|setupTestCollection
argument_list|()
expr_stmt|;
name|query
operator|=
operator|(
name|XPathQueryService
operator|)
name|c
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed setup"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|c
operator|!=
literal|null
condition|)
name|c
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed teardown"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

