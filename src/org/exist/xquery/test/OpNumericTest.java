begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|test
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_class
specifier|public
class|class
name|OpNumericTest
extends|extends
name|TestCase
block|{
specifier|private
name|XQueryContext
name|context
decl_stmt|;
specifier|private
name|DayTimeDurationValue
name|dtDuration
decl_stmt|;
specifier|private
name|YearMonthDurationValue
name|ymDuration
decl_stmt|;
specifier|private
name|DateTimeValue
name|dateTime
decl_stmt|;
specifier|private
name|DateValue
name|date
decl_stmt|;
specifier|private
name|TimeValue
name|time
decl_stmt|;
specifier|private
name|IntegerValue
name|integer
decl_stmt|;
specifier|private
name|DecimalValue
name|decimal
decl_stmt|;
specifier|private
name|DBBroker
name|broker
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
name|super
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|String
name|home
decl_stmt|,
name|file
init|=
literal|"conf.xml"
decl_stmt|;
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
expr_stmt|;
if|if
condition|(
name|home
operator|==
literal|null
condition|)
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|file
argument_list|,
name|home
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|)
expr_stmt|;
name|broker
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|get
argument_list|(
name|SecurityManager
operator|.
name|SYSTEM_USER
argument_list|)
expr_stmt|;
name|context
operator|=
operator|new
name|XQueryContext
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|dtDuration
operator|=
operator|new
name|DayTimeDurationValue
argument_list|(
literal|"P1D"
argument_list|)
expr_stmt|;
name|ymDuration
operator|=
operator|new
name|YearMonthDurationValue
argument_list|(
literal|"P1Y"
argument_list|)
expr_stmt|;
name|dateTime
operator|=
operator|new
name|DateTimeValue
argument_list|(
literal|"2005-06-02T16:28:00Z"
argument_list|)
expr_stmt|;
name|date
operator|=
operator|new
name|DateValue
argument_list|(
literal|"2005-06-02"
argument_list|)
expr_stmt|;
name|time
operator|=
operator|new
name|TimeValue
argument_list|(
literal|"16:28:00Z"
argument_list|)
expr_stmt|;
name|integer
operator|=
operator|new
name|IntegerValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|decimal
operator|=
operator|new
name|DecimalValue
argument_list|(
literal|"1.5"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
block|{
try|try
block|{
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|OpNumeric
name|buildOp
parameter_list|(
name|int
name|op
parameter_list|,
name|AtomicValue
name|a
parameter_list|,
name|AtomicValue
name|b
parameter_list|)
block|{
return|return
operator|new
name|OpNumeric
argument_list|(
name|context
argument_list|,
operator|new
name|LiteralValue
argument_list|(
name|context
argument_list|,
name|a
argument_list|)
argument_list|,
operator|new
name|LiteralValue
argument_list|(
name|context
argument_list|,
name|b
argument_list|)
argument_list|,
name|op
argument_list|)
return|;
block|}
specifier|private
name|void
name|assertOp
parameter_list|(
name|String
name|result
parameter_list|,
name|int
name|op
parameter_list|,
name|AtomicValue
name|a
parameter_list|,
name|AtomicValue
name|b
parameter_list|)
block|{
try|try
block|{
name|Sequence
name|r
init|=
name|buildOp
argument_list|(
name|op
argument_list|,
name|a
argument_list|,
name|b
argument_list|)
operator|.
name|eval
argument_list|(
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
name|result
argument_list|,
name|r
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
operator|.
name|getStringValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|test_idiv1
parameter_list|()
block|{
try|try
block|{
name|assertOp
argument_list|(
literal|"2"
argument_list|,
name|Constants
operator|.
name|IDIV
argument_list|,
operator|new
name|IntegerValue
argument_list|(
literal|3
argument_list|)
argument_list|,
operator|new
name|DecimalValue
argument_list|(
literal|"1.5"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|test_idiv2
parameter_list|()
block|{
name|assertOp
argument_list|(
literal|"2"
argument_list|,
name|Constants
operator|.
name|IDIV
argument_list|,
operator|new
name|IntegerValue
argument_list|(
literal|4
argument_list|)
argument_list|,
operator|new
name|IntegerValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_idiv3
parameter_list|()
block|{
name|assertOp
argument_list|(
literal|"2"
argument_list|,
name|Constants
operator|.
name|IDIV
argument_list|,
operator|new
name|IntegerValue
argument_list|(
literal|5
argument_list|)
argument_list|,
operator|new
name|IntegerValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_idivReturnType1
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|IDIV
argument_list|,
name|integer
argument_list|,
name|integer
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_idivReturnType2
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|IDIV
argument_list|,
name|integer
argument_list|,
name|decimal
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_idivReturnType3
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|IDIV
argument_list|,
name|decimal
argument_list|,
name|integer
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_divReturnType1
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|DIV
argument_list|,
name|integer
argument_list|,
name|integer
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_divReturnType2
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|DIV
argument_list|,
name|integer
argument_list|,
name|decimal
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_divReturnType3
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|DIV
argument_list|,
name|decimal
argument_list|,
name|integer
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_divReturnType4
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|DIV
argument_list|,
name|dtDuration
argument_list|,
name|integer
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_divReturnType5
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|YEAR_MONTH_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|DIV
argument_list|,
name|ymDuration
argument_list|,
name|integer
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_divReturnType6
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|DIV
argument_list|,
name|dtDuration
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_divReturnType7
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DECIMAL
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|DIV
argument_list|,
name|ymDuration
argument_list|,
name|ymDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_multReturnType1
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MULT
argument_list|,
name|dtDuration
argument_list|,
name|integer
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_multReturnType2
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MULT
argument_list|,
name|integer
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_multReturnType3
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|YEAR_MONTH_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MULT
argument_list|,
name|ymDuration
argument_list|,
name|integer
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_multReturnType4
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|YEAR_MONTH_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MULT
argument_list|,
name|integer
argument_list|,
name|ymDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType1
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|dtDuration
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType2
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|YEAR_MONTH_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|ymDuration
argument_list|,
name|ymDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType3
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|date
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType4
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|dateTime
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType5
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|TIME
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|time
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType6
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|dtDuration
argument_list|,
name|date
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType7
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|dtDuration
argument_list|,
name|dateTime
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType8
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|TIME
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|dtDuration
argument_list|,
name|time
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType9
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|date
argument_list|,
name|ymDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType10
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|dateTime
argument_list|,
name|ymDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType11
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|ymDuration
argument_list|,
name|date
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_plusReturnType12
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|PLUS
argument_list|,
name|ymDuration
argument_list|,
name|dateTime
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType1
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|dtDuration
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType2
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|YEAR_MONTH_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|ymDuration
argument_list|,
name|ymDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType3
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|dateTime
argument_list|,
name|dateTime
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType4
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|date
argument_list|,
name|date
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType5
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DAY_TIME_DURATION
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|time
argument_list|,
name|time
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType6
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|dateTime
argument_list|,
name|ymDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType7
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE_TIME
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|dateTime
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType8
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|date
argument_list|,
name|ymDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType9
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|DATE
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|date
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|test_minusReturnType10
parameter_list|()
block|{
name|assertEquals
argument_list|(
name|Type
operator|.
name|TIME
argument_list|,
name|buildOp
argument_list|(
name|Constants
operator|.
name|MINUS
argument_list|,
name|time
argument_list|,
name|dtDuration
argument_list|)
operator|.
name|returnsType
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

