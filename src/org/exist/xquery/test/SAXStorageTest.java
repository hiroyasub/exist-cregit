begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on 23 juin 2004 $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|LocalCollection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|DTDHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_comment
comment|/** This TestCase is for direct storage of SAX events in the database; one has to implement an XMLReader.   * It is also a stress test that creates large documents using SAX, use main() for this.                 * @author jmv  */
end_comment

begin_class
specifier|public
class|class
name|SAXStorageTest
extends|extends
name|TestCase
block|{
comment|/** */
specifier|public
name|SAXStorageTest
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|super
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XMLResource
name|doc
decl_stmt|;
specifier|private
name|Collection
name|root
decl_stmt|;
specifier|private
specifier|static
name|String
name|FILE_STORED
decl_stmt|;
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
comment|// initialize driver
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|root
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist:///db"
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|root
operator|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|FILE_STORED
operator|=
literal|"big.xml"
expr_stmt|;
name|doc
operator|=
operator|(
name|XMLResource
operator|)
name|root
operator|.
name|createResource
argument_list|(
name|FILE_STORED
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** 	 * @param xquery 	 * @param mess 	 * @return TODO 	 * @throws XMLDBException 	 */
specifier|private
name|ResourceSet
name|querySingleLine
parameter_list|(
name|String
name|xquery
parameter_list|,
name|String
name|mess
parameter_list|)
throws|throws
name|XMLDBException
block|{
comment|// query a single line:
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|xquery
operator|!=
literal|""
condition|)
block|{
comment|// xquery = "/*/*[2]";
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Querying \""
operator|+
name|xquery
operator|+
literal|"\" ..."
argument_list|)
expr_stmt|;
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
literal|"big.xml"
argument_list|,
name|xquery
argument_list|)
expr_stmt|;
comment|// assertEquals(1, result.getSize());
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time for query \""
operator|+
name|xquery
operator|+
literal|"\" on "
operator|+
name|mess
operator|+
literal|": "
operator|+
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/** Store in the "classical" eXist way: the XMLResource stores an XML string before 	 * storeResource() stores it in the database. 	 * @throws XMLDBException 	 * @throws SAXException 	 */
specifier|public
name|void
name|testQueryStoreContentAsSAX
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|SAXException
block|{
name|ContentHandler
name|databaseInserter
init|=
name|doc
operator|.
name|setContentAsSAX
argument_list|()
decl_stmt|;
operator|(
operator|new
name|TabularXMLReader
argument_list|()
operator|)
operator|.
name|writeDocument
argument_list|(
name|databaseInserter
argument_list|)
expr_stmt|;
name|root
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|querySingleLine
argument_list|(
literal|""
argument_list|,
literal|"testQueryStoreContentAsSAX"
argument_list|)
expr_stmt|;
block|}
comment|/** Store in the new way: the XMLResource stores just a File object before 	 * storeResource() stores the SAX events in the database. 	 * @throws XMLDBException */
specifier|public
name|void
name|testQueryBigDocument
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|XMLReader
name|dataSource
init|=
operator|new
name|TabularXMLReader
argument_list|()
decl_stmt|;
name|storeSAXEvents
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|querySingleLine
argument_list|(
literal|""
argument_list|,
literal|"testQueryBigDocument"
argument_list|)
decl_stmt|;
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @param dataSource 	 * @throws XMLDBException 	 */
specifier|private
name|void
name|storeSAXEvents
parameter_list|(
name|XMLReader
name|dataSource
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|root
operator|instanceof
name|LocalCollection
condition|)
block|{
name|long
name|t0
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|LocalCollection
name|coll
init|=
operator|(
name|LocalCollection
operator|)
name|root
decl_stmt|;
name|coll
operator|.
name|setReader
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
operator|new
name|File
argument_list|(
name|FILE_STORED
argument_list|)
argument_list|)
expr_stmt|;
name|coll
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|long
name|t1
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Time for storing:  "
operator|+
operator|(
name|t1
operator|-
name|t0
operator|)
operator|+
literal|" ms."
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** arguments: lines , columns, XQuery string */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|String
name|xquery
init|=
literal|""
decl_stmt|;
name|int
name|lines
init|=
literal|20
decl_stmt|;
name|int
name|columns
init|=
literal|20
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>=
literal|2
condition|)
block|{
name|lines
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|columns
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|3
condition|)
block|{
name|xquery
operator|=
name|args
index|[
literal|2
index|]
expr_stmt|;
block|}
if|if
condition|(
name|args
operator|.
name|length
operator|<
literal|2
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Taking default values"
argument_list|)
expr_stmt|;
block|}
name|SAXStorageTest
name|tester
init|=
operator|new
name|SAXStorageTest
argument_list|(
literal|null
argument_list|)
decl_stmt|;
name|tester
operator|.
name|setUp
argument_list|()
expr_stmt|;
name|XMLReader
name|dataSource
init|=
operator|new
name|TabularXMLReader
argument_list|(
name|lines
argument_list|,
name|columns
argument_list|)
decl_stmt|;
name|tester
operator|.
name|storeSAXEvents
argument_list|(
name|dataSource
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Stored tabular data, "
operator|+
name|lines
operator|+
literal|" lines, "
operator|+
name|columns
operator|+
literal|" columns"
argument_list|)
expr_stmt|;
if|if
condition|(
name|xquery
operator|!=
literal|""
condition|)
block|{
name|ResourceSet
name|result
init|=
name|tester
operator|.
name|querySingleLine
argument_list|(
name|xquery
argument_list|,
literal|"testQueryBigDocument"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"result size: "
operator|+
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|shutdown
argument_list|(
name|tester
operator|.
name|root
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|shutdown
parameter_list|(
name|Collection
name|collection
parameter_list|)
throws|throws
name|XMLDBException
block|{
comment|//		shutdown the database gracefully
name|DatabaseInstanceManager
name|manager
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|manager
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

