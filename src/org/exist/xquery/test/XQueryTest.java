begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|custommonkey
operator|.
name|xmlunit
operator|.
name|*
import|;
end_import

begin_class
specifier|public
class|class
name|XQueryTest
extends|extends
name|XMLTestCase
block|{
specifier|private
specifier|static
specifier|final
name|String
name|NUMBERS_XML
init|=
literal|"numbers.xml"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE1_NAME
init|=
literal|"module1.xqm"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|MODULE2_NAME
init|=
literal|"module2.xqm"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|URI
init|=
literal|"xmldb:exist:///db"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|numbers
init|=
literal|"<test>"
operator|+
literal|"<item id='1'><price>5.6</price><stock>22</stock></item>"
operator|+
literal|"<item id='2'><price>7.4</price><stock>43</stock></item>"
operator|+
literal|"<item id='3'><price>18.4</price><stock>5</stock></item>"
operator|+
literal|"<item id='4'><price>65.54</price><stock>16</stock></item>"
operator|+
literal|"</test>"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|module1
init|=
literal|"module namespace blah=\"blah\";\n"
operator|+
literal|"declare variable $blah:param {\"value-1\"};"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|module2
init|=
literal|"module namespace foo=\"\";\n"
operator|+
literal|"declare variable $foo:bar {\"bar\"};"
decl_stmt|;
specifier|private
name|Collection
name|testCollection
decl_stmt|;
specifier|private
specifier|static
name|String
name|attributeXML
decl_stmt|;
specifier|private
specifier|static
name|int
name|stringSize
decl_stmt|;
specifier|private
specifier|static
name|int
name|nbElem
decl_stmt|;
specifier|private
name|String
name|file_name
init|=
literal|"detail_xml.xml"
decl_stmt|;
specifier|private
name|String
name|xml
decl_stmt|;
specifier|private
name|Database
name|database
decl_stmt|;
specifier|public
name|XQueryTest
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
block|{
try|try
block|{
comment|// initialize driver
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|database
operator|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|Collection
name|root
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist:///db"
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|testCollection
operator|=
name|service
operator|.
name|createCollection
argument_list|(
literal|"test"
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|testCollection
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
comment|/* 	 * @see TestCase#tearDown() 	 */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
comment|// testCollection.removeResource( testCollection .getResource(file_name));
name|DatabaseManager
operator|.
name|deregisterDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|DatabaseInstanceManager
name|dim
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|dim
operator|.
name|shutdown
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"tearDown PASSED"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testFor
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $f in /*/item return $f"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|4
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $f in /*/item  order by $f ascending  return $f"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"3"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $f in /*/item  order by $f descending  return $f"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"2"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"for $f in /*/item  order by xs:double($f/price) descending  return $f"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|NUMBERS_XML
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|resu
operator|=
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"4"
argument_list|,
operator|(
operator|(
name|Element
operator|)
name|resu
operator|.
name|getContentAsDOM
argument_list|()
operator|)
operator|.
name|getAttribute
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFor(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testVariable
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace param=\"param\";\n"
operator|+
literal|"declare variable $param:a {\"a\"};\n"
operator|+
literal|"declare function param:a() {$param:a};\n"
operator|+
literal|"let $param:a := \"b\" \n"
operator|+
literal|"return ($param:a, $param:a)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"b"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"b"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace param=\"param\";\n"
operator|+
literal|"declare variable $param:a {\"a\"};\n"
operator|+
literal|"declare function param:a() {$param:a};\n"
operator|+
literal|"let $param:a := \"b\" \n"
operator|+
literal|"return param:a(), param:a()"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $foo {\"foo1\"};\n"
operator|+
literal|"let $foo := \"foo2\" \n"
operator|+
literal|"for $bar in (1 to 1) \n"
operator|+
literal|"  let $foo := \"foo3\" \n"
operator|+
literal|"  return $foo"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"foo3"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 4 ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare variable $a {\"1st instance\"};\n"
operator|+
literal|"declare variable $a {\"2nd instance\"};\n"
operator|+
literal|"$a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XQST0049"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace param=\"param\";\n"
operator|+
literal|"declare function param:f() { $param:a };\n"
operator|+
literal|"declare variable $param:a {\"a\"};\n"
operator|+
literal|"param:f()"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testVariable : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testTypedVariables
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as element()* := (<assign/> ,<assign/> )\n"
operator|+
literal|"let $w :=<r>{ $v }</r>\n"
operator|+
literal|"let $x as element()* := $w/assign\n"
operator|+
literal|"return $x"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"assign"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as node()* := ()\n"
operator|+
literal|"return $v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as item()* := ()\n"
operator|+
literal|"return $v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as empty() := ()\n"
operator|+
literal|"return $v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as item() := ()\n"
operator|+
literal|"return $v"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as item()* := (<a/> , 1 )\n"
operator|+
literal|"return $v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"1"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as node()* := (<a/> , 1 )\n"
operator|+
literal|"return $v"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 8: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v as item()* := (<a/> , 1 )\n"
operator|+
literal|"let $w as element()* := $v\n"
operator|+
literal|"return $w"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 9: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as element()* {(<assign/> ,<assign/> ) };\n"
operator|+
literal|"declare variable $w {<r>{ $v }</r> };\n"
operator|+
literal|"declare variable $x as element()* { $w/assign };\n"
operator|+
literal|"$x"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"assign"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 10: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as node()* { () };\n"
operator|+
literal|"$v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 11: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as item()* { () };\n"
operator|+
literal|"$v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 12: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as empty() { () };\n"
operator|+
literal|"$v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 13: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as item() { () };\n"
operator|+
literal|"$v"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 14: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as item()* { (<a/> , 1 ) }; \n"
operator|+
literal|"$v"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|Node
operator|.
name|ELEMENT_NODE
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeType
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"a"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"1"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 15: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as node()* { (<a/> , 1 ) };\n"
operator|+
literal|"$v"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables 16: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"declare variable $v as item()* { (<a/> , 1 ) };\n"
operator|+
literal|"declare variable $w as element()* { $v };\n"
operator|+
literal|"$w"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testPrecedence
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testPrecedence 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"declare namespace blah=\"blah\";\n"
operator|+
literal|"declare variable $blah:param  {\"value-1\"};\n"
operator|+
literal|"let $blah:param := \"value-2\"\n"
operator|+
literal|"(:: FLWOR expressions have a higher precedence than the comma operator ::)\n"
operator|+
literal|"return $blah:param, $blah:param "
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"value-2"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"value-1"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTypedVariables : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|bugtestNamespace
parameter_list|()
block|{
name|Resource
name|doc
decl_stmt|;
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE1_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE2_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module2
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
comment|//			TODO : this should not work (empty namespace)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"(:: empty namespace ::)\n"
operator|+
literal|"declare namespace blah=\"\";\n"
operator|+
literal|"\"OK\""
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//assertTrue(exceptionThrown);
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"(:: redefine existing prefix ::)\n"
operator|+
literal|"declare namespace blah=\"blah\";\n"
operator|+
literal|"$blah:param"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XQST0033"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"(:: redefine existing prefix ::)\n"
operator|+
literal|"declare namespace blah=\"bla\";\n"
operator|+
literal|"declare variable $blah:param  {\"value-2\"};\n"
operator|+
literal|"$blah:param"
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"XQST0033"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//			TODO : this should work (emty namespace allowed)
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE2_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$foo:bar"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"bar"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//			TODO : this should work (emty namespace allowed)
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace foo=\"\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE2_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$bar"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"bar"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
comment|//Interesting one : let's see with XQuery gurus :-)
comment|//declare namespace fn="";
comment|//fn:current-time()
comment|/* 			 If the URILiteral part of a namespace declaration is a zero-length string,  			 any existing namespace binding for the given prefix is removed from  			 the statically known namespaces. This feature provides a way  			 to remove predeclared namespace prefixes such as local. 			 */
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testNamespace : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testModule
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|Resource
name|doc
init|=
name|testCollection
operator|.
name|createResource
argument_list|(
name|MODULE1_NAME
argument_list|,
literal|"BinaryResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|module1
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistResource
operator|)
name|doc
operator|)
operator|.
name|setMimeType
argument_list|(
literal|"application/xquery"
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$blah:param"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"value-1"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"(:: redefine variable ::)\n"
operator|+
literal|"declare variable $blah:param  {\"value-2\"};\n"
operator|+
literal|"$blah:param"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"blah\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"declare namespace blah2=\"blah\";\n"
operator|+
literal|"$blah2:param"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"value-1"
argument_list|,
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"xquery version \"1.0\";\n"
operator|+
literal|"import module namespace blah=\"bla\" at \""
operator|+
name|URI
operator|+
literal|"/test/"
operator|+
name|MODULE1_NAME
operator|+
literal|"\";\n"
operator|+
literal|"$blah:param"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testModule : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testFunctionDoc
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|boolean
name|exceptionThrown
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|NUMBERS_XML
argument_list|,
name|numbers
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 1: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc(\"/db/test/"
operator|+
name|NUMBERS_XML
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
try|try
block|{
name|Node
name|n
init|=
operator|(
operator|(
name|XMLResource
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|)
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
name|DetailedDiff
name|d
init|=
operator|new
name|DetailedDiff
argument_list|(
name|compareXML
argument_list|(
name|numbers
argument_list|,
name|n
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|//ignore eXist namespace's attributes
comment|//TODO : should be improved !
name|assertEquals
argument_list|(
literal|1
argument_list|,
name|d
operator|.
name|getAllDifferences
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 2: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc(\"http://www.w3.org/RDF/\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 3: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v := ()\n"
operator|+
literal|"return doc($v)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 4: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc(\"/db/test/dummy"
operator|+
name|NUMBERS_XML
operator|+
literal|"\")"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 5: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc(\"http://www.w3.org/RDF/dummy\")"
expr_stmt|;
try|try
block|{
name|exceptionThrown
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|exceptionThrown
operator|=
literal|true
expr_stmt|;
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|exceptionThrown
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 6: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc-available(\"/db/test/"
operator|+
name|NUMBERS_XML
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 7: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc-available(\"http://www.w3.org/RDF/\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"true"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 8: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $v := ()\n"
operator|+
literal|"return doc-available($v)"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 9: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc-available(\"/db/test/dummy"
operator|+
name|NUMBERS_XML
operator|+
literal|"\")"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 10: ========"
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"doc-available(\"http://www.w3.org/RDF/dummy\")"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc 11: ========"
argument_list|)
expr_stmt|;
comment|//A redirected 404
name|query
operator|=
literal|"doc-available(\"http://java.sun.com/404\")"
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|1
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|"false"
argument_list|,
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testFunctionDoc : XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|String
name|makeString
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|StringBuffer
name|b
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
name|c
init|=
literal|'a'
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
name|i
operator|++
control|)
block|{
name|b
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
block|}
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|void
name|testLargeAttributeSimple
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple 1: ========"
argument_list|)
expr_stmt|;
name|String
name|large
init|=
name|createXMLContentWithLargeString
argument_list|()
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|file_name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|file_name
operator|+
literal|"') / details/metadata[@docid= '"
operator|+
name|large
operator|+
literal|"' ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|file_name
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|nbElem
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLargeAttributeContains
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple 1: ========"
argument_list|)
expr_stmt|;
name|String
name|large
init|=
name|createXMLContentWithLargeString
argument_list|()
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|file_name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|file_name
operator|+
literal|"') / details/metadata[ contains(@docid, 'aa') ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|file_name
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|nbElem
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLargeAttributeKeywordOperator
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple 1: ========"
argument_list|)
expr_stmt|;
name|String
name|large
init|=
name|createXMLContentWithLargeString
argument_list|()
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|file_name
argument_list|,
name|xml
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|file_name
operator|+
literal|"') / details/metadata[ @docid&= '"
operator|+
name|large
operator|+
literal|"' ]"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|file_name
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
name|nbElem
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeSimple(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** CAUTION side effect on field xml 	 * @return the large string contained in the atrbute(s) 	 */
specifier|private
name|String
name|createXMLContentWithLargeString
parameter_list|()
block|{
name|String
name|large
init|=
name|makeString
argument_list|(
name|stringSize
argument_list|)
decl_stmt|;
name|String
name|head
init|=
literal|"<details format='xml'>"
decl_stmt|;
name|String
name|elem
init|=
literal|"<metadata docid='"
operator|+
name|large
operator|+
literal|"'></metadata>"
decl_stmt|;
name|String
name|tail
init|=
literal|"</details>"
decl_stmt|;
name|xml
operator|=
name|head
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nbElem
condition|;
name|i
operator|++
control|)
name|xml
operator|+=
name|elem
expr_stmt|;
name|xml
operator|+=
name|tail
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"XML:\n"
operator|+
name|xml
argument_list|)
expr_stmt|;
return|return
name|large
return|;
block|}
specifier|public
name|void
name|testRetrieveLargeAttribute
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testRetrieveLargeAttribute 1: ========"
argument_list|)
expr_stmt|;
name|XMLResource
name|res
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|getResource
argument_list|(
name|file_name
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"res.getContent(): "
operator|+
name|res
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** This test is obsolete because testLargeAttributeSimple() reproduces the problem without a file, 	 * but I keep it to show how one can test with an XML file. */
specifier|public
name|void
name|obsoleteTestLargeAttributeRealFile
parameter_list|()
block|{
name|ResourceSet
name|result
decl_stmt|;
name|String
name|query
decl_stmt|;
name|XMLResource
name|resu
decl_stmt|;
try|try
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeRealFile 1: ========"
argument_list|)
expr_stmt|;
name|String
name|large
decl_stmt|;
name|large
operator|=
literal|"challengesininformationretrievalandlanguagemodelingreportofaworkshopheldatthecenterforintelligentinformationretrievaluniversityofmassachusettsamherstseptember2002-extdocid-howardturtlemarksandersonnorbertfuhralansmeatonjayaslamdragomirradevwesselkraaijellenvoorheesamitsinghaldonnaharmanjaypontejamiecallannicholasbelkinjohnlaffertylizliddyronirosenfeldvictorlavrenkodavidjharperrichschwartzjohnpragerchengxiangzhaijinxixusalimroukosstephenrobertsonandrewmccallumbrucecroftrmanmathasuedumaisdjoerdhiemstraeduardhovyralphweischedelthomashofmannjamesallanchrisbuckleyphilipresnikdavidlewis2003"
expr_stmt|;
if|if
condition|(
name|attributeXML
operator|!=
literal|null
condition|)
name|large
operator|=
name|attributeXML
expr_stmt|;
name|String
name|xml
init|=
literal|"<details format='xml'><metadata docid='"
operator|+
name|large
operator|+
literal|"'></metadata></details>"
decl_stmt|;
specifier|final
name|String
name|FILE_NAME
init|=
literal|"detail_xml.xml"
decl_stmt|;
name|XPathQueryService
name|service
init|=
name|storeXMLStringAndGetQueryService
argument_list|(
name|FILE_NAME
argument_list|)
decl_stmt|;
name|query
operator|=
literal|"doc('"
operator|+
name|FILE_NAME
operator|+
literal|"') / details/metadata[@docid= '"
operator|+
name|large
operator|+
literal|"' ]"
expr_stmt|;
comment|// fails !!!
comment|// query = "doc('"+ FILE_NAME+"') / details/metadata[ docid= '" + large + "' ]"; // test passes!
name|result
operator|=
name|service
operator|.
name|queryResource
argument_list|(
name|FILE_NAME
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|printResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|"XQuery: "
operator|+
name|query
argument_list|,
literal|2
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testLargeAttributeRealFile(): XMLDBException: "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * @return 	 * @throws XMLDBException 	 */
specifier|private
name|XPathQueryService
name|storeXMLStringAndGetQueryService
parameter_list|(
name|String
name|documentName
parameter_list|,
name|String
name|content
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
comment|/** 	 * @return 	 * @throws XMLDBException 	 */
specifier|private
name|XPathQueryService
name|storeXMLStringAndGetQueryService
parameter_list|(
name|String
name|documentName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|doc
init|=
operator|(
name|XMLResource
operator|)
name|testCollection
operator|.
name|createResource
argument_list|(
name|documentName
argument_list|,
literal|"XMLResource"
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setContent
argument_list|(
operator|new
name|File
argument_list|(
name|documentName
argument_list|)
argument_list|)
expr_stmt|;
name|testCollection
operator|.
name|storeResource
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|testCollection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
return|return
name|service
return|;
block|}
comment|/** 	 * @param result 	 * @throws XMLDBException 	 */
specifier|private
name|void
name|printResult
parameter_list|(
name|ResourceSet
name|result
parameter_list|)
throws|throws
name|XMLDBException
block|{
for|for
control|(
name|ResourceIterator
name|i
init|=
name|result
operator|.
name|getIterator
argument_list|()
init|;
name|i
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|Resource
name|r
init|=
name|i
operator|.
name|nextResource
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|r
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|0
condition|)
block|{
name|attributeXML
operator|=
name|args
index|[
literal|0
index|]
expr_stmt|;
block|}
name|stringSize
operator|=
literal|513
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|1
condition|)
block|{
name|stringSize
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|nbElem
operator|=
literal|2
expr_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|>
literal|2
condition|)
block|{
name|nbElem
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|args
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
block|}
name|junit
operator|.
name|textui
operator|.
name|TestRunner
operator|.
name|run
argument_list|(
name|XQueryTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

