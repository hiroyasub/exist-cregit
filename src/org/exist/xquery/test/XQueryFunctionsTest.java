begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on 17.03.2005 - $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|test
package|;
end_package

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|textui
operator|.
name|TestRunner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_comment
comment|/** Tests for various standart XQuery functions  * @author jens  */
end_comment

begin_class
specifier|public
class|class
name|XQueryFunctionsTest
extends|extends
name|TestCase
block|{
specifier|private
name|String
index|[]
name|testvalues
decl_stmt|;
specifier|private
name|String
index|[]
name|resultvalues
decl_stmt|;
specifier|private
name|XPathQueryService
name|service
decl_stmt|;
specifier|private
name|Collection
name|root
init|=
literal|null
decl_stmt|;
specifier|private
name|Database
name|database
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|XPathException
block|{
name|TestRunner
operator|.
name|run
argument_list|(
name|XQueryFunctionsTest
operator|.
name|class
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Constructor for XQueryFunctionsTest. 	 * @param arg0 	 */
specifier|public
name|XQueryFunctionsTest
parameter_list|(
name|String
name|arg0
parameter_list|)
block|{
name|super
argument_list|(
name|arg0
argument_list|)
expr_stmt|;
block|}
comment|/** Tests the XQuery-/XPath-function fn:round-half-to-even 	 * with the rounding value typed xs:integer 	 */
specifier|public
name|void
name|testRoundHtE_INTEGER
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|query
operator|=
literal|"fn:round-half-to-even( xs:integer('1'), 0 )"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"fn:round-half-to-even( xs:integer('6'), -1 )"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"10"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"fn:round-half-to-even( xs:integer('5'), -1 )"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testRoundHtE_INTEGER(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests the XQuery-/XPath-function fn:round-half-to-even 	 * with the rounding value typed xs:double 	 */
specifier|public
name|void
name|testRoundHtE_DOUBLE
parameter_list|()
throws|throws
name|XPathException
block|{
comment|/* List of Values to test with Rounding */
name|String
index|[]
name|testvalues
init|=
block|{
literal|"0.5"
block|,
literal|"1.5"
block|,
literal|"2.5"
block|,
literal|"3.567812E+3"
block|,
literal|"4.7564E-3"
block|,
literal|"35612.25"
block|}
decl_stmt|;
name|String
index|[]
name|resultvalues
init|=
block|{
literal|"0"
block|,
literal|"2"
block|,
literal|"2"
block|,
literal|"3567.81"
block|,
literal|"0"
block|,
literal|"35600"
block|}
decl_stmt|;
name|int
index|[]
name|precision
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|2
block|,
literal|2
block|,
operator|-
literal|2
block|}
decl_stmt|;
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testvalues
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|query
operator|=
literal|"fn:round-half-to-even( xs:double('"
operator|+
name|testvalues
index|[
name|i
index|]
operator|+
literal|"'), "
operator|+
name|precision
index|[
name|i
index|]
operator|+
literal|" )"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|String
name|r
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|resultvalues
index|[
name|i
index|]
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testRoundHtE_DOUBLE(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Tests the XQuery-XPath function fn:tokenize() */
specifier|public
name|void
name|testTokenize
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"count ( tokenize('a/b' , '/') )"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"count ( tokenize('a/b/' , '/') )"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"count ( tokenize('' , '/') )"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"0"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"let $res := fn:tokenize('abracadabra', '(ab)|(a)')"
operator|+
literal|"let $reference := ('', 'r', 'c', 'd', 'r', '')"
operator|+
literal|"return fn:deep-equal($res, $reference)"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testTokenize(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDeepEqual
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"let $res := ('a', 'b')"
operator|+
literal|"let $reference := ('a', 'b')"
operator|+
literal|"return fn:deep-equal($res, $reference)"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"true"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testDeepEqual(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCompare
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"fn:compare(\"Strasse\", \"Stra\u00DFe\")"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"-1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
comment|//result 	= service.query("fn:compare(\"Strasse\", \"Stra\u00DFe\", \"java:GermanCollator\")");
comment|//r 		= (String) result.getResource(0).getContent();
comment|//assertEquals( "0", r );
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testCompare(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testDistinctValues
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"declare variable $c { distinct-values(('a', 'a')) }; $c"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"declare variable $c { distinct-values((<a>a</a>,<b>a</b>)) }; $c"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"let $seq := ('A', 2, 'B', 2) return distinct-values($seq) "
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testDistinctValues(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSum
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"declare variable $c { sum((1, 2)) }; $c"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"declare variable $c { sum((<a>1</a>,<b>2</b>)) }; $c"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
comment|//Any untyped atomic values in the sequence are converted to xs:double values ([MK Xpath 2.0], p. 432)
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"declare variable $c { sum((), 3) }; $c"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testSum(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testAvg
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"avg((2, 2))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"avg((<a>2</a>,<b>2</b>))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
comment|//Any untyped atomic values in the resulting sequence
comment|//(typically, values extracted from nodes in a schemaless document)
comment|//are converted to xs:double values ([MK Xpath 2.0], p. 301)
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"avg((3, 4, 5))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"4"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"avg((xdt:yearMonthDuration('P20Y'), xdt:yearMonthDuration('P10M')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"P10Y5M"
argument_list|,
name|r
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"avg((xdt:yearMonthDuration('P20Y') , (3, 4, 5)))"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0006"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"avg(())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"avg(((xs:float('INF')), xs:float('-INF')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NaN"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"avg(((3, 4, 5), xs:float('NaN')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"NaN"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testAvg(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMin
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"min((1, 2))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"min((<a>1</a>,<b>2</b>))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"1"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"min(())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"min((xs:dateTime('2005-12-19T16:22:40.006+01:00'), xs:dateTime('2005-12-19T16:29:40.321+01:00')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2005-12-19T16:22:40.006+01:00"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"min(('a', 'b'))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|r
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"min((xs:dateTime('2005-12-19T16:22:40.006+01:00'), 'a'))"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0006"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"min(1, 2)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"FOCH0002"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testMin(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testMax
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"max((1, 2))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"max((<a>1</a>,<b>2</b>))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"max(())"
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|0
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"max((xs:dateTime('2005-12-19T16:22:40.006+01:00'), xs:dateTime('2005-12-19T16:29:40.321+01:00')))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2005-12-19T16:29:40.321+01:00"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"max(('a', 'b'))"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"b"
argument_list|,
name|r
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"max((xs:dateTime('2005-12-19T16:22:40.006+01:00'), 'a'))"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"FORG0006"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
try|try
block|{
name|message
operator|=
literal|""
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"max(1, 2)"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|message
operator|=
name|e
operator|.
name|getMessage
argument_list|()
expr_stmt|;
block|}
name|assertTrue
argument_list|(
name|message
operator|.
name|indexOf
argument_list|(
literal|"FOCH0002"
argument_list|)
operator|>
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testMax(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testExclusiveLock
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:exclusive-lock(//*,($query1, $query2))\n"
operator|+
literal|"return $a"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:exclusive-lock((),($query1, $query2))\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:exclusive-lock((),($query1, $query2))\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a := util:exclusive-lock(//*,<root/>)\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<root/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testExclusiveLock(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testSharedLock
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|String
name|query
init|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:shared-lock(//*,($query1, $query2))\n"
operator|+
literal|"return $a"
decl_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:shared-lock((),($query1, $query2))\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $query1 := (<a/>)\n"
operator|+
literal|"let $query2 := (2, 3)\n"
operator|+
literal|"let $a := util:shared-lock((),($query1, $query2))\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
literal|3
argument_list|,
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<a/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|1
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"2"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|2
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"3"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"let $a := util:shared-lock(//*,<root/>)\n"
operator|+
literal|"return $a"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"<root/>"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testSharedLock(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testEncodeForURI
parameter_list|()
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
name|String
name|string
decl_stmt|;
name|String
name|expected
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|string
operator|=
literal|"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"
expr_stmt|;
name|expected
operator|=
literal|"http%3A%2F%2Fwww.example.com%2F00%2FWeather%2FCA%2FLos%2520Angeles#ocean"
expr_stmt|;
name|query
operator|=
literal|"encode-for-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"~b\u00e9b\u00e9"
expr_stmt|;
name|expected
operator|=
literal|"~b%C3%A9b%C3%A9"
expr_stmt|;
name|query
operator|=
literal|"encode-for-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"100% organic"
expr_stmt|;
name|expected
operator|=
literal|"100%25%20organic"
expr_stmt|;
name|query
operator|=
literal|"encode-for-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testEncodeForURI(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testIRIToURI
parameter_list|()
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
name|String
name|string
decl_stmt|;
name|String
name|expected
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|string
operator|=
literal|"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"
expr_stmt|;
name|expected
operator|=
literal|"http://www.example.com/00/Weather/CA/Los%20Angeles#ocean"
expr_stmt|;
name|query
operator|=
literal|"iri-to-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"http://www.example.com/~b\u00e9b\u00e9"
expr_stmt|;
name|expected
operator|=
literal|"http://www.example.com/~b%C3%A9b%C3%A9"
expr_stmt|;
name|query
operator|=
literal|"iri-to-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"$"
expr_stmt|;
name|expected
operator|=
literal|"$"
expr_stmt|;
name|query
operator|=
literal|"iri-to-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"testIRIToURI(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testEscapeHTMLURI
parameter_list|()
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
name|String
name|string
decl_stmt|;
name|String
name|expected
decl_stmt|;
name|String
name|query
decl_stmt|;
try|try
block|{
name|string
operator|=
literal|"http://www.example.com/00/Weather/CA/Los Angeles#ocean"
expr_stmt|;
name|expected
operator|=
literal|"http://www.example.com/00/Weather/CA/Los Angeles#ocean"
expr_stmt|;
name|query
operator|=
literal|"escape-html-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|string
operator|=
literal|"javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~b\u00e9b\u00e9');"
expr_stmt|;
name|expected
operator|=
literal|"javascript:if (navigator.browserLanguage == 'fr') window.open('http://www.example.com/~b%C3%A9b%C3%A9');"
expr_stmt|;
name|query
operator|=
literal|"escape-html-uri(\""
operator|+
name|string
operator|+
literal|"\")"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
name|expected
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|query
operator|=
literal|"escape-html-uri('$')"
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"$"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"EscapeHTMLURI(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testLocalName
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"let $a :=<a><b></b></a>"
operator|+
literal|"return fn:local-name($a)"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"a"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"local-name(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|testCurrentDateTime
parameter_list|()
throws|throws
name|XPathException
block|{
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
try|try
block|{
comment|//Do not use this test around midnight on the last day of a month ;-)
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"('Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', "
operator|+
literal|"'Oct', 'Nov', 'Dec')[month-from-dateTime(current-dateTime())]"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|SimpleDateFormat
name|df
init|=
operator|new
name|SimpleDateFormat
argument_list|(
literal|"MMM"
argument_list|,
operator|new
name|Locale
argument_list|(
literal|"en"
argument_list|,
literal|"US"
argument_list|)
argument_list|)
decl_stmt|;
name|Date
name|date
init|=
operator|new
name|Date
argument_list|()
decl_stmt|;
name|assertEquals
argument_list|(
name|df
operator|.
name|format
argument_list|(
name|date
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"current-dateTime(): "
operator|+
name|e
argument_list|)
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*      *  Bugfix 3070      *  @see http://svn.sourceforge.net/exist/?rev=3070&view=rev      *      *  seconds-from-dateTime() returned wrong value when dateTime had      * no millesecs available. Special value was returned.      */
specifier|public
name|void
name|testSecondsFromDateTime
parameter_list|()
block|{
comment|//
name|ResourceSet
name|result
init|=
literal|null
decl_stmt|;
name|String
name|r
init|=
literal|""
decl_stmt|;
name|String
name|message
decl_stmt|;
try|try
block|{
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"seconds-from-dateTime(xs:dateTime(\"2005-12-22T13:35:21.000\") )"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"21"
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|result
operator|=
name|service
operator|.
name|query
argument_list|(
literal|"seconds-from-dateTime(xs:dateTime(\"2005-12-22T13:35:21\") )"
argument_list|)
expr_stmt|;
name|r
operator|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
expr_stmt|;
name|assertEquals
argument_list|(
literal|"21"
argument_list|,
name|r
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|//ensure the test collection is removed and call collection-exists,
comment|//which should return false, no exception thrown
specifier|public
name|void
name|testCollectionExists1
parameter_list|()
block|{
comment|//remove the test collection if it already exists
name|String
name|collectionName
init|=
literal|"testCollectionExists"
decl_stmt|;
name|String
name|collectionPath
init|=
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/"
operator|+
name|collectionName
decl_stmt|;
try|try
block|{
name|Collection
name|testCollection
init|=
name|root
operator|.
name|getChildCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCollection
operator|!=
literal|null
condition|)
block|{
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|removeCollection
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error removing existing test collection:"
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|runCollectionExistsTest
argument_list|(
name|collectionPath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
comment|//create a collection and call collection-exists, which should return true,
comment|//no exception thrown
specifier|public
name|void
name|testCollectionExists2
parameter_list|()
block|{
comment|//add the test collection
name|String
name|collectionName
init|=
literal|"testCollectionExists"
decl_stmt|;
name|String
name|collectionPath
init|=
name|DBBroker
operator|.
name|ROOT_COLLECTION
operator|+
literal|"/"
operator|+
name|collectionName
decl_stmt|;
try|try
block|{
name|Collection
name|testCollection
init|=
name|root
operator|.
name|getChildCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|testCollection
operator|==
literal|null
condition|)
block|{
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|cms
operator|.
name|createCollection
argument_list|(
name|collectionPath
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error determining if test collection already exists:"
argument_list|)
expr_stmt|;
name|xe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|xe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|runCollectionExistsTest
argument_list|(
name|collectionPath
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|runCollectionExistsTest
parameter_list|(
name|String
name|collectionPath
parameter_list|,
name|boolean
name|expectedResult
parameter_list|)
block|{
comment|//collection-exists should not throw an exception and should return expectedResult
name|String
name|importXMLDB
init|=
literal|"import module namespace xmldb=\"http://exist-db.org/xquery/xmldb\";"
decl_stmt|;
name|String
name|collectionExists
init|=
literal|"xmldb:collection-exists('"
operator|+
name|collectionPath
operator|+
literal|"')"
decl_stmt|;
name|String
name|query
init|=
name|importXMLDB
operator|+
name|collectionExists
decl_stmt|;
try|try
block|{
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
decl_stmt|;
name|assertNotNull
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|assertTrue
argument_list|(
name|result
operator|.
name|getSize
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|assertNotNull
argument_list|(
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|String
name|content
init|=
operator|(
name|String
operator|)
name|result
operator|.
name|getResource
argument_list|(
literal|0
argument_list|)
operator|.
name|getContent
argument_list|()
decl_stmt|;
name|assertNotNull
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|assertEquals
argument_list|(
name|expectedResult
argument_list|,
name|Boolean
operator|.
name|valueOf
argument_list|(
name|content
argument_list|)
operator|.
name|booleanValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xe
parameter_list|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Error calling xmldb:collection-exists:"
argument_list|)
expr_stmt|;
name|xe
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|xe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/* 	 * @see TestCase#setUp() 	 */
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
comment|// initialize driver
name|Class
name|cl
init|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.exist.xmldb.DatabaseImpl"
argument_list|)
decl_stmt|;
name|database
operator|=
operator|(
name|Database
operator|)
name|cl
operator|.
name|newInstance
argument_list|()
expr_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|root
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
literal|"xmldb:exist://"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
argument_list|,
literal|"admin"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|service
operator|=
operator|(
name|XPathQueryService
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
block|}
comment|/* 	 * @see TestCase#tearDown() 	 */
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|DatabaseManager
operator|.
name|deregisterDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
name|DatabaseInstanceManager
name|dim
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|root
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|dim
operator|.
name|shutdown
argument_list|()
expr_stmt|;
comment|//System.out.println("tearDown PASSED");
block|}
block|}
end_class

end_unit

