begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2011 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *    * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *   * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *    *  $Id: SwitchExpression.java 13846 2011-02-25 09:52:38Z ellefj $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|ErrorCodes
operator|.
name|EXistErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|ErrorCodes
operator|.
name|ErrorCode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|functions
operator|.
name|fn
operator|.
name|FunDeepEqual
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|ExpressionDumper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Item
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_comment
comment|/**  * Implements the XQuery 3 switch expression.  *   * @author ljo  *  */
end_comment

begin_class
specifier|public
class|class
name|SwitchExpression
extends|extends
name|AbstractExpression
block|{
comment|/**      * Internal class used to hold a single case clause.      */
specifier|private
class|class
name|Case
block|{
name|List
argument_list|<
name|Expression
argument_list|>
name|operands
decl_stmt|;
name|Expression
name|returnClause
decl_stmt|;
specifier|public
name|Case
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|caseOperands
parameter_list|,
name|Expression
name|caseClause
parameter_list|)
block|{
name|this
operator|.
name|operands
operator|=
name|caseOperands
expr_stmt|;
name|this
operator|.
name|returnClause
operator|=
name|caseClause
expr_stmt|;
block|}
block|}
specifier|private
name|Expression
name|operand
decl_stmt|;
specifier|private
name|Case
name|defaultClause
init|=
literal|null
decl_stmt|;
specifier|private
name|List
argument_list|<
name|Case
argument_list|>
name|cases
init|=
operator|new
name|ArrayList
argument_list|<
name|Case
argument_list|>
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|public
name|SwitchExpression
parameter_list|(
name|XQueryContext
name|context
parameter_list|,
name|Expression
name|operand
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|this
operator|.
name|operand
operator|=
name|operand
expr_stmt|;
block|}
comment|/**      * Add case clause(s) with a return.      */
specifier|public
name|void
name|addCase
parameter_list|(
name|List
argument_list|<
name|Expression
argument_list|>
name|caseOperands
parameter_list|,
name|Expression
name|returnClause
parameter_list|)
block|{
name|cases
operator|.
name|add
argument_list|(
operator|new
name|Case
argument_list|(
name|caseOperands
argument_list|,
name|returnClause
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Set the default clause.      */
specifier|public
name|void
name|setDefault
parameter_list|(
name|Expression
name|defaultClause
parameter_list|)
block|{
name|this
operator|.
name|defaultClause
operator|=
operator|new
name|Case
argument_list|(
literal|null
argument_list|,
name|defaultClause
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Sequence
name|eval
parameter_list|(
name|Sequence
name|contextSequence
parameter_list|,
name|Item
name|contextItem
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|getContext
argument_list|()
operator|.
name|getXQueryVersion
argument_list|()
operator|<
literal|30
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|EXXQDY0003
argument_list|,
literal|"switch expression is not available before XQuery 3.0"
argument_list|,
name|contextSequence
argument_list|)
throw|;
block|}
if|if
condition|(
name|contextItem
operator|!=
literal|null
condition|)
name|contextSequence
operator|=
name|contextItem
operator|.
name|toSequence
argument_list|()
expr_stmt|;
name|Sequence
name|opSeq
init|=
name|operand
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
decl_stmt|;
name|Sequence
name|result
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|opSeq
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
name|defaultClause
operator|.
name|returnClause
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Item
name|opItem
init|=
name|opSeq
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicValue
name|opVal
init|=
name|opItem
operator|.
name|atomize
argument_list|()
decl_stmt|;
if|if
condition|(
name|opVal
operator|.
name|hasMany
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Cardinality error in switch operand "
argument_list|,
name|opVal
argument_list|)
throw|;
block|}
name|Collator
name|defaultCollator
init|=
name|context
operator|.
name|getDefaultCollator
argument_list|()
decl_stmt|;
for|for
control|(
name|Case
name|next
range|:
name|cases
control|)
block|{
for|for
control|(
name|Expression
name|caseOperand
range|:
name|next
operator|.
name|operands
control|)
block|{
name|Item
name|caseItem
init|=
name|caseOperand
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|,
name|contextItem
argument_list|)
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|AtomicValue
name|caseVal
init|=
name|caseItem
operator|.
name|atomize
argument_list|()
decl_stmt|;
if|if
condition|(
name|caseVal
operator|.
name|hasMany
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
name|this
argument_list|,
name|ErrorCodes
operator|.
name|XPTY0004
argument_list|,
literal|"Cardinality error in switch case operand "
argument_list|,
name|caseVal
argument_list|)
throw|;
block|}
if|if
condition|(
name|FunDeepEqual
operator|.
name|deepEquals
argument_list|(
name|caseItem
argument_list|,
name|opVal
argument_list|,
name|defaultCollator
argument_list|)
condition|)
block|{
name|result
operator|=
name|next
operator|.
name|returnClause
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|result
operator|=
name|defaultClause
operator|.
name|returnClause
operator|.
name|eval
argument_list|(
name|contextSequence
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
return|return
name|operand
operator|.
name|returnsType
argument_list|()
return|;
block|}
specifier|public
name|int
name|getDependencies
parameter_list|()
block|{
return|return
name|Dependency
operator|.
name|CONTEXT_SET
operator|+
name|Dependency
operator|.
name|CONTEXT_ITEM
return|;
block|}
specifier|public
name|int
name|getCardinality
parameter_list|()
block|{
return|return
name|Cardinality
operator|.
name|ZERO_OR_MORE
return|;
block|}
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|contextInfo
operator|.
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|operand
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
for|for
control|(
name|Case
name|next
range|:
name|cases
control|)
block|{
name|next
operator|.
name|returnClause
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
name|defaultClause
operator|.
name|returnClause
operator|.
name|analyze
argument_list|(
name|contextInfo
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setContextDocSet
parameter_list|(
name|DocumentSet
name|contextSet
parameter_list|)
block|{
name|super
operator|.
name|setContextDocSet
argument_list|(
name|contextSet
argument_list|)
expr_stmt|;
name|operand
operator|.
name|setContextDocSet
argument_list|(
name|contextSet
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|dump
parameter_list|(
name|ExpressionDumper
name|dumper
parameter_list|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"switch("
argument_list|,
name|line
argument_list|)
expr_stmt|;
name|operand
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|startIndent
argument_list|()
expr_stmt|;
for|for
control|(
name|Case
name|next
range|:
name|cases
control|)
block|{
for|for
control|(
name|Expression
name|caseOperand
range|:
name|next
operator|.
name|operands
control|)
block|{
name|dumper
operator|.
name|display
argument_list|(
literal|"case "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|caseOperand
argument_list|)
expr_stmt|;
block|}
name|dumper
operator|.
name|display
argument_list|(
literal|" return "
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|display
argument_list|(
name|next
operator|.
name|returnClause
argument_list|)
operator|.
name|nl
argument_list|()
expr_stmt|;
block|}
name|dumper
operator|.
name|display
argument_list|(
literal|"default "
argument_list|)
expr_stmt|;
name|defaultClause
operator|.
name|returnClause
operator|.
name|dump
argument_list|(
name|dumper
argument_list|)
expr_stmt|;
name|dumper
operator|.
name|endIndent
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|operand
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|defaultClause
operator|.
name|returnClause
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
for|for
control|(
name|Case
name|next
range|:
name|cases
control|)
block|{
name|next
operator|.
name|returnClause
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

