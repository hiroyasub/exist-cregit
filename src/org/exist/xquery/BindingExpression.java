begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|xquery
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|numbering
operator|.
name|NodeId
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|UpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Abstract superclass for the variable binding expressions "for" and "let".  *   * @author Wolfgang Meier<wolfgang@exist-db.org>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|BindingExpression
extends|extends
name|AbstractFLWORClause
implements|implements
name|RewritableExpression
block|{
specifier|protected
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|BindingExpression
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|SequenceType
name|POSITIONAL_VAR_TYPE
init|=
operator|new
name|SequenceType
argument_list|(
name|Type
operator|.
name|INTEGER
argument_list|,
name|Cardinality
operator|.
name|EXACTLY_ONE
argument_list|)
decl_stmt|;
specifier|protected
name|String
name|varName
decl_stmt|;
specifier|protected
name|SequenceType
name|sequenceType
init|=
literal|null
decl_stmt|;
specifier|protected
name|Expression
name|inputSequence
decl_stmt|;
specifier|private
name|ExprUpdateListener
name|listener
decl_stmt|;
specifier|public
name|BindingExpression
parameter_list|(
name|XQueryContext
name|context
parameter_list|)
block|{
name|super
argument_list|(
name|context
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setVariable
parameter_list|(
name|String
name|qname
parameter_list|)
block|{
name|varName
operator|=
name|qname
expr_stmt|;
block|}
specifier|public
name|String
name|getVariable
parameter_list|()
block|{
return|return
name|this
operator|.
name|varName
return|;
block|}
comment|/** 	 * Set the sequence type of the variable (as specified in the "as" clause). 	 *  	 * @param type 	 */
specifier|public
name|void
name|setSequenceType
parameter_list|(
name|SequenceType
name|type
parameter_list|)
block|{
name|this
operator|.
name|sequenceType
operator|=
name|type
expr_stmt|;
block|}
specifier|public
name|void
name|setInputSequence
parameter_list|(
name|Expression
name|sequence
parameter_list|)
block|{
name|this
operator|.
name|inputSequence
operator|=
name|sequence
operator|.
name|simplify
argument_list|()
expr_stmt|;
block|}
specifier|public
name|Expression
name|getInputSequence
parameter_list|()
block|{
return|return
name|this
operator|.
name|inputSequence
return|;
block|}
comment|/* (non-Javadoc)              * @see org.exist.xquery.Expression#analyze(org.exist.xquery.Expression, int)              */
specifier|public
name|void
name|analyze
parameter_list|(
name|AnalyzeContextInfo
name|contextInfo
parameter_list|)
throws|throws
name|XPathException
block|{
name|unordered
operator|=
operator|(
name|contextInfo
operator|.
name|getFlags
argument_list|()
operator|&
name|UNORDERED
operator|)
operator|>
literal|0
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Sequence
name|postEval
parameter_list|(
name|Sequence
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|returnExpr
operator|instanceof
name|FLWORClause
condition|)
block|{
name|seq
operator|=
operator|(
operator|(
name|FLWORClause
operator|)
name|returnExpr
operator|)
operator|.
name|postEval
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
return|return
name|super
operator|.
name|postEval
argument_list|(
name|seq
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.Expression#preselect(org.exist.dom.persistent.DocumentSet, org.exist.xquery.StaticContext) 	 */
specifier|public
name|DocumentSet
name|preselect
parameter_list|(
name|DocumentSet
name|in_docs
parameter_list|)
throws|throws
name|XPathException
block|{
return|return
name|in_docs
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.xquery.AbstractExpression#resetState() 	 */
specifier|public
name|void
name|resetState
parameter_list|(
name|boolean
name|postOptimization
parameter_list|)
block|{
name|super
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|inputSequence
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
name|returnExpr
operator|.
name|resetState
argument_list|(
name|postOptimization
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|void
name|setContext
parameter_list|(
name|int
name|contextId
parameter_list|,
name|Sequence
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|seq
operator|instanceof
name|VirtualNodeSet
condition|)
block|{
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|seq
operator|)
operator|.
name|setInPredicate
argument_list|(
literal|true
argument_list|)
expr_stmt|;
operator|(
operator|(
name|VirtualNodeSet
operator|)
name|seq
operator|)
operator|.
name|setSelfIsContext
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|Item
name|next
decl_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|seq
operator|.
name|unorderedIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|next
operator|=
name|i
operator|.
name|nextItem
argument_list|()
expr_stmt|;
if|if
condition|(
name|next
operator|instanceof
name|NodeProxy
condition|)
block|{
operator|(
operator|(
name|NodeProxy
operator|)
name|next
operator|)
operator|.
name|addContextNode
argument_list|(
name|contextId
argument_list|,
operator|(
name|NodeProxy
operator|)
name|next
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
name|void
name|clearContext
parameter_list|(
name|int
name|contextId
parameter_list|,
name|Sequence
name|seq
parameter_list|)
throws|throws
name|XPathException
block|{
if|if
condition|(
name|seq
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|seq
operator|instanceof
name|VirtualNodeSet
operator|)
condition|)
block|{
name|seq
operator|.
name|clearContext
argument_list|(
name|contextId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|registerUpdateListener
parameter_list|(
specifier|final
name|Sequence
name|sequence
parameter_list|)
block|{
if|if
condition|(
name|listener
operator|==
literal|null
condition|)
block|{
name|listener
operator|=
operator|new
name|ExprUpdateListener
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|context
operator|.
name|registerUpdateListener
argument_list|(
name|listener
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|listener
operator|.
name|setSequence
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ExprUpdateListener
implements|implements
name|UpdateListener
block|{
specifier|private
name|Sequence
name|sequence
decl_stmt|;
specifier|public
name|ExprUpdateListener
parameter_list|(
name|Sequence
name|sequence
parameter_list|)
block|{
name|this
operator|.
name|sequence
operator|=
name|sequence
expr_stmt|;
block|}
specifier|public
name|void
name|setSequence
parameter_list|(
name|Sequence
name|sequence
parameter_list|)
block|{
name|this
operator|.
name|sequence
operator|=
name|sequence
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|documentUpdated
parameter_list|(
name|DocumentImpl
name|document
parameter_list|,
name|int
name|event
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
name|void
name|nodeMoved
parameter_list|(
name|NodeId
name|oldNodeId
parameter_list|,
name|NodeHandle
name|newNode
parameter_list|)
block|{
name|sequence
operator|.
name|nodeMoved
argument_list|(
name|oldNodeId
argument_list|,
name|newNode
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|unsubscribe
parameter_list|()
block|{
name|BindingExpression
operator|.
name|this
operator|.
name|listener
operator|=
literal|null
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|debug
parameter_list|()
block|{
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
name|returnsType
parameter_list|()
block|{
comment|//TODO: let must return "return expression type"
if|if
condition|(
name|sequenceType
operator|!=
literal|null
condition|)
block|{
return|return
name|sequenceType
operator|.
name|getPrimaryType
argument_list|()
return|;
block|}
return|return
name|super
operator|.
name|returnsType
argument_list|()
return|;
block|}
comment|/* RewritableExpression API */
annotation|@
name|Override
specifier|public
name|void
name|replace
parameter_list|(
name|Expression
name|oldExpr
parameter_list|,
name|Expression
name|newExpr
parameter_list|)
block|{
if|if
condition|(
name|inputSequence
operator|==
name|oldExpr
condition|)
block|{
name|inputSequence
operator|=
name|newExpr
expr_stmt|;
block|}
if|else if
condition|(
name|returnExpr
operator|==
name|oldExpr
condition|)
block|{
name|returnExpr
operator|=
name|newExpr
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getPrevious
parameter_list|(
name|Expression
name|current
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Expression
name|getFirst
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remove
parameter_list|(
name|Expression
name|oldExpr
parameter_list|)
throws|throws
name|XPathException
block|{
block|}
comment|/* END RewritableExpression API */
block|}
end_class

end_unit

