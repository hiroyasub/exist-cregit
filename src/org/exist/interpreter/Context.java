begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|interpreter
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|Collator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TimeZone
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|datatype
operator|.
name|XMLGregorianCalendar
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|stream
operator|.
name|XMLStreamException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|debuggee
operator|.
name|DebuggeeJoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|ExistPDP
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|XACMLSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|stax
operator|.
name|ExtendedXMLStreamReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|UpdateListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|LockedDocumentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|NamePool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionCall
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|FunctionSignature
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|LocalVariable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Module
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Option
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|PathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Pragma
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Profiler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|TerminatedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|UserDefinedFunction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Variable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryWatchDog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|AnyURIValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|BinaryValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|NodeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_interface
specifier|public
interface|interface
name|Context
block|{
comment|/** 	 * Returns true if this context has a parent context (means it is a module context). 	 * 	 * @return  False. 	 */
specifier|public
name|boolean
name|hasParent
parameter_list|()
function_decl|;
specifier|public
name|XQueryContext
name|getRootContext
parameter_list|()
function_decl|;
specifier|public
name|XQueryContext
name|copyContext
parameter_list|()
function_decl|;
comment|/** 	 * Update the current dynamic context using the properties of another context. This is needed by {@link org.exist.xquery.functions.util.Eval}. 	 * 	 * @param  from 	 */
specifier|public
name|void
name|updateContext
parameter_list|(
name|XQueryContext
name|from
parameter_list|)
function_decl|;
comment|/** 	 * Prepares the current context before xquery execution. 	 */
specifier|public
name|void
name|prepare
parameter_list|()
function_decl|;
specifier|public
name|AccessContext
name|getAccessContext
parameter_list|()
function_decl|;
comment|/** 	 * Is profiling enabled? 	 * 	 * @return  true if profiling is enabled for this context. 	 */
specifier|public
name|boolean
name|isProfilingEnabled
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isProfilingEnabled
parameter_list|(
name|int
name|verbosity
parameter_list|)
function_decl|;
comment|/** 	 * Returns the {@link Profiler} instance of this context if profiling is enabled. 	 * 	 * @return  the profiler instance. 	 */
specifier|public
name|Profiler
name|getProfiler
parameter_list|()
function_decl|;
comment|/** 	 * Called from the XQuery compiler to set the root expression for this context. 	 * 	 * @param  expr 	 */
specifier|public
name|void
name|setRootExpression
parameter_list|(
name|Expression
name|expr
parameter_list|)
function_decl|;
comment|/** 	 * Returns the root expression of the XQuery associated with this context. 	 * 	 * @return  root expression 	 */
specifier|public
name|Expression
name|getRootExpression
parameter_list|()
function_decl|;
comment|/** 	 * Returns the number of expression objects in the internal representation of the query. Used to estimate the size of the query. 	 * 	 * @return  number of expression objects 	 */
specifier|public
name|int
name|getExpressionCount
parameter_list|()
function_decl|;
specifier|public
name|void
name|setSource
parameter_list|(
name|XACMLSource
name|source
parameter_list|)
function_decl|;
specifier|public
name|XACMLSource
name|getSource
parameter_list|()
function_decl|;
comment|/** 	 * Returns the Source Key of the XQuery associated with this context. 	 * 	 * @return  source key 	 */
specifier|public
name|String
name|getSourceKey
parameter_list|()
function_decl|;
comment|/** 	 * Returns the Source Type of the XQuery associated with this context. 	 * 	 * @return  source type 	 */
specifier|public
name|String
name|getSourceType
parameter_list|()
function_decl|;
comment|/** 	 * Declare a user-defined static prefix/namespace mapping. 	 * 	 *<p>eXist internally keeps a table containing all prefix/namespace mappings it found in documents, which have been previously stored into the 	 * database. These default mappings need not to be declared explicitely.</p> 	 * 	 * @param   prefix 	 * @param   uri 	 * 	 * @throws  XPathException   	 */
specifier|public
name|void
name|declareNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|void
name|declareNamespaces
parameter_list|(
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|namespaceMap
parameter_list|)
function_decl|;
comment|/** 	 * Removes the namespace URI from the prefix/namespace mappings table. 	 * 	 * @param  uri 	 */
specifier|public
name|void
name|removeNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
function_decl|;
comment|/** 	 * Declare an in-scope namespace. This is called during query execution. 	 * 	 * @param  prefix 	 * @param  uri 	 */
specifier|public
name|void
name|declareInScopeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|uri
parameter_list|)
function_decl|;
specifier|public
name|String
name|getInScopeNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
function_decl|;
specifier|public
name|String
name|getInScopePrefix
parameter_list|(
name|String
name|uri
parameter_list|)
function_decl|;
specifier|public
name|String
name|getInheritedNamespace
parameter_list|(
name|String
name|prefix
parameter_list|)
function_decl|;
specifier|public
name|String
name|getInheritedPrefix
parameter_list|(
name|String
name|uri
parameter_list|)
function_decl|;
comment|/** 	 * Return the namespace URI mapped to the registered prefix or null if the prefix is not registered. 	 * 	 * @param   prefix 	 * 	 * @return  namespace 	 */
specifier|public
name|String
name|getURIForPrefix
parameter_list|(
name|String
name|prefix
parameter_list|)
function_decl|;
comment|/** 	 * Get URI Prefix 	 * 	 * @param   uri 	 * 	 * @return  the prefix mapped to the registered URI or null if the URI is not registered. 	 */
specifier|public
name|String
name|getPrefixForURI
parameter_list|(
name|String
name|uri
parameter_list|)
function_decl|;
comment|/** 	 * Returns the current default function namespace. 	 * 	 * @return  current default function namespace 	 */
specifier|public
name|String
name|getDefaultFunctionNamespace
parameter_list|()
function_decl|;
comment|/** 	 * Set the default function namespace. By default, this points to the namespace for XPath built-in functions. 	 * 	 * @param   uri 	 * 	 * @throws  XPathException   	 */
specifier|public
name|void
name|setDefaultFunctionNamespace
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Returns the current default element namespace. 	 * 	 * @return  current default element namespace schema 	 * 	 * @throws  XPathException   	 */
specifier|public
name|String
name|getDefaultElementNamespaceSchema
parameter_list|()
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Set the default element namespace. By default, this points to the empty uri. 	 * 	 * @param   uri 	 * 	 * @throws  XPathException   	 */
specifier|public
name|void
name|setDefaultElementNamespaceSchema
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Returns the current default element namespace. 	 * 	 * @return  current default element namespace 	 * 	 * @throws  XPathException   	 */
specifier|public
name|String
name|getDefaultElementNamespace
parameter_list|()
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Set the default element namespace. By default, this points to the empty uri. 	 * 	 * @param      uri     a<code>String</code> value 	 * @param      schema  a<code>String</code> value 	 * 	 * @exception  XPathException  if an error occurs 	 */
specifier|public
name|void
name|setDefaultElementNamespace
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|schema
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Set the default collation to be used by all operators and functions on strings. Throws an exception if the collation is unknown or cannot be 	 * instantiated. 	 * 	 * @param   uri 	 * 	 * @throws  XPathException 	 */
specifier|public
name|void
name|setDefaultCollation
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|String
name|getDefaultCollation
parameter_list|()
function_decl|;
specifier|public
name|Collator
name|getCollator
parameter_list|(
name|String
name|uri
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|Collator
name|getDefaultCollator
parameter_list|()
function_decl|;
comment|/** 	 * Set the set of statically known documents for the current execution context. These documents will be processed if no explicit document set has 	 * been set for the current expression with fn:doc() or fn:collection(). 	 * 	 * @param  docs 	 */
specifier|public
name|void
name|setStaticallyKnownDocuments
parameter_list|(
name|XmldbURI
index|[]
name|docs
parameter_list|)
function_decl|;
specifier|public
name|void
name|setStaticallyKnownDocuments
parameter_list|(
name|DocumentSet
name|set
parameter_list|)
function_decl|;
comment|//TODO : not sure how these 2 options might/have to be related
specifier|public
name|void
name|setCalendar
parameter_list|(
name|XMLGregorianCalendar
name|newCalendar
parameter_list|)
function_decl|;
specifier|public
name|void
name|setTimeZone
parameter_list|(
name|TimeZone
name|newTimeZone
parameter_list|)
function_decl|;
specifier|public
name|XMLGregorianCalendar
name|getCalendar
parameter_list|()
function_decl|;
specifier|public
name|TimeZone
name|getImplicitTimeZone
parameter_list|()
function_decl|;
comment|/** 	 * Get statically known documents 	 * 	 * @return  set of statically known documents. 	 * 	 * @throws  XPathException   	 */
specifier|public
name|DocumentSet
name|getStaticallyKnownDocuments
parameter_list|()
throws|throws
name|XPathException
function_decl|;
specifier|public
name|ExtendedXMLStreamReader
name|getXMLStreamReader
parameter_list|(
name|NodeValue
name|nv
parameter_list|)
throws|throws
name|XMLStreamException
throws|,
name|IOException
function_decl|;
specifier|public
name|void
name|setProtectedDocs
parameter_list|(
name|LockedDocumentMap
name|map
parameter_list|)
function_decl|;
specifier|public
name|LockedDocumentMap
name|getProtectedDocs
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|inProtectedMode
parameter_list|()
function_decl|;
comment|/** 	 * Should loaded documents be locked? 	 * 	 *<p>see #setLockDocumentsOnLoad(boolean)</p> 	 * 	 * @return   	 */
specifier|public
name|boolean
name|lockDocumentsOnLoad
parameter_list|()
function_decl|;
specifier|public
name|void
name|addLockedDocument
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
function_decl|;
specifier|public
name|void
name|setShared
parameter_list|(
name|boolean
name|shared
parameter_list|)
function_decl|;
specifier|public
name|boolean
name|isShared
parameter_list|()
function_decl|;
specifier|public
name|void
name|addModifiedDoc
parameter_list|(
name|DocumentImpl
name|document
parameter_list|)
function_decl|;
specifier|public
name|void
name|reset
parameter_list|()
function_decl|;
comment|/** 	 * Prepare this XQueryContext to be reused. This should be called when adding an XQuery to the cache. 	 * 	 * @param  keepGlobals   	 */
specifier|public
name|void
name|reset
parameter_list|(
name|boolean
name|keepGlobals
parameter_list|)
function_decl|;
comment|/** 	 * Returns true if whitespace between constructed element nodes should be stripped by default. 	 * 	 * @return   	 */
specifier|public
name|boolean
name|stripWhitespace
parameter_list|()
function_decl|;
specifier|public
name|void
name|setStripWhitespace
parameter_list|(
name|boolean
name|strip
parameter_list|)
function_decl|;
comment|/** 	 * Returns true if namespaces for constructed element and document nodes should be preserved on copy by default. 	 * 	 * @return   	 */
specifier|public
name|boolean
name|preserveNamespaces
parameter_list|()
function_decl|;
comment|/** 	 * The method<code>setPreserveNamespaces.</code> 	 * 	 * @param  preserve  a<code>boolean</code> value 	 */
specifier|public
name|void
name|setPreserveNamespaces
parameter_list|(
specifier|final
name|boolean
name|preserve
parameter_list|)
function_decl|;
comment|/** 	 * Returns true if namespaces for constructed element and document nodes should be inherited on copy by default. 	 * 	 * @return   	 */
specifier|public
name|boolean
name|inheritNamespaces
parameter_list|()
function_decl|;
comment|/** 	 * The method<code>setInheritNamespaces.</code> 	 * 	 * @param  inherit  a<code>boolean</code> value 	 */
specifier|public
name|void
name|setInheritNamespaces
parameter_list|(
specifier|final
name|boolean
name|inherit
parameter_list|)
function_decl|;
comment|/** 	 * Returns true if order empty is set to gretest, otherwise false for order empty is least. 	 * 	 * @return   	 */
specifier|public
name|boolean
name|orderEmptyGreatest
parameter_list|()
function_decl|;
comment|/** 	 * The method<code>setOrderEmptyGreatest.</code> 	 * 	 * @param  order  a<code>boolean</code> value 	 */
specifier|public
name|void
name|setOrderEmptyGreatest
parameter_list|(
specifier|final
name|boolean
name|order
parameter_list|)
function_decl|;
comment|/** 	 * Get modules 	 * 	 * @return  iterator over all modules imported into this context 	 */
specifier|public
name|Iterator
argument_list|<
name|Module
argument_list|>
name|getModules
parameter_list|()
function_decl|;
comment|/** 	 * Get root modules 	 * 	 * @return  iterator over all modules registered in the entire context tree 	 */
specifier|public
name|Iterator
argument_list|<
name|Module
argument_list|>
name|getRootModules
parameter_list|()
function_decl|;
specifier|public
name|Iterator
argument_list|<
name|Module
argument_list|>
name|getAllModules
parameter_list|()
function_decl|;
comment|/** 	 * Get the built-in module registered for the given namespace URI. 	 * 	 * @param   namespaceURI 	 * 	 * @return  built-in module 	 */
specifier|public
name|Module
name|getModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
function_decl|;
specifier|public
name|Module
name|getRootModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
function_decl|;
specifier|public
name|void
name|setModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|Module
name|module
parameter_list|)
function_decl|;
comment|/** 	 * For compiled expressions: check if the source of any module imported by the current query has changed since compilation. 	 * 	 * @return   	 */
specifier|public
name|boolean
name|checkModulesValid
parameter_list|()
function_decl|;
specifier|public
name|void
name|analyzeAndOptimizeIfModulesChanged
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Load a built-in module from the given class name and assign it to the namespace URI. The specified class should be a subclass of {@link 	 * Module}. The method will try to instantiate the class. If the class is not found or an exception is thrown, the method will silently fail. The 	 * namespace URI has to be equal to the namespace URI declared by the module class. Otherwise, the module is not loaded. 	 * 	 * @param   namespaceURI 	 * @param   moduleClass 	 * 	 * @return   	 */
specifier|public
name|Module
name|loadBuiltInModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|moduleClass
parameter_list|)
function_decl|;
comment|/** 	 * Convenience method that returns the XACML Policy Decision Point for this database instance. If XACML has not been enabled, this returns null. 	 * 	 * @return  the PDP for this database instance, or null if XACML is disabled 	 */
specifier|public
name|ExistPDP
name|getPDP
parameter_list|()
function_decl|;
comment|/** 	 * Declare a user-defined function. All user-defined functions are kept in a single hash map. 	 * 	 * @param   function 	 * 	 * @throws  XPathException 	 */
specifier|public
name|void
name|declareFunction
parameter_list|(
name|UserDefinedFunction
name|function
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Resolve a user-defined function. 	 * 	 * @param   name 	 * @param   argCount   	 * 	 * @return  user-defined function 	 * 	 * @throws  XPathException 	 */
specifier|public
name|UserDefinedFunction
name|resolveFunction
parameter_list|(
name|QName
name|name
parameter_list|,
name|int
name|argCount
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|Iterator
argument_list|<
name|FunctionSignature
argument_list|>
name|getSignaturesForFunction
parameter_list|(
name|QName
name|name
parameter_list|)
function_decl|;
specifier|public
name|Iterator
argument_list|<
name|UserDefinedFunction
argument_list|>
name|localFunctions
parameter_list|()
function_decl|;
comment|/** 	 * Declare a local variable. This is called by variable binding expressions like "let" and "for". 	 * 	 * @param   var 	 * 	 * @return   	 * 	 * @throws  XPathException 	 */
specifier|public
name|LocalVariable
name|declareVariableBinding
parameter_list|(
name|LocalVariable
name|var
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Declare a global variable as by "declare variable". 	 * 	 * @param   var 	 * 	 * @return   	 * 	 * @throws  XPathException 	 */
specifier|public
name|Variable
name|declareGlobalVariable
parameter_list|(
name|Variable
name|var
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|void
name|undeclareGlobalVariable
parameter_list|(
name|QName
name|name
parameter_list|)
function_decl|;
comment|/** 	 * Declare a user-defined variable. 	 * 	 *<p>The value argument is converted into an XPath value (@see XPathUtil#javaObjectToXPath(Object)).</p> 	 * 	 * @param   qname  the qualified name of the new variable. Any namespaces should have been declared before. 	 * @param   value  a Java object, representing the fixed value of the variable 	 * 	 * @return  the created Variable object 	 * 	 * @throws  XPathException  if the value cannot be converted into a known XPath value or the variable QName references an unknown 	 *                          namespace-prefix. 	 */
specifier|public
name|Variable
name|declareVariable
parameter_list|(
name|String
name|qname
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|Variable
name|declareVariable
parameter_list|(
name|QName
name|qn
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Try to resolve a variable. 	 * 	 * @param   name  the qualified name of the variable as string 	 * 	 * @return  the declared Variable object 	 * 	 * @throws  XPathException  if the variable is unknown 	 */
specifier|public
name|Variable
name|resolveVariable
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Try to resolve a variable. 	 * 	 * @param   qname  the qualified name of the variable 	 * 	 * @return  the declared Variable object 	 * 	 * @throws  XPathException  if the variable is unknown 	 */
specifier|public
name|Variable
name|resolveVariable
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|boolean
name|isVarDeclared
parameter_list|(
name|QName
name|qname
parameter_list|)
function_decl|;
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|Variable
argument_list|>
name|getVariables
parameter_list|()
function_decl|;
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|Variable
argument_list|>
name|getLocalVariables
parameter_list|()
function_decl|;
specifier|public
name|Map
argument_list|<
name|QName
argument_list|,
name|Variable
argument_list|>
name|getGlobalVariables
parameter_list|()
function_decl|;
comment|/** 	 * Turn on/off XPath 1.0 backwards compatibility. 	 * 	 *<p>If turned on, comparison expressions will behave like in XPath 1.0, i.e. if any one of the operands is a number, the other operand will be 	 * cast to a double.</p> 	 * 	 * @param  backwardsCompatible 	 */
specifier|public
name|void
name|setBackwardsCompatibility
parameter_list|(
name|boolean
name|backwardsCompatible
parameter_list|)
function_decl|;
comment|/** 	 * XPath 1.0 backwards compatibility turned on? 	 * 	 *<p>In XPath 1.0 compatible mode, additional conversions will be applied to values if a numeric value is expected.</p> 	 * 	 * @return   	 */
specifier|public
name|boolean
name|isBackwardsCompatible
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isRaiseErrorOnFailedRetrieval
parameter_list|()
function_decl|;
comment|/** 	 * Get the DBBroker instance used for the current query. 	 * 	 *<p>The DBBroker is the main database access object, providing access to all internal database functions.</p> 	 * 	 * @return  DBBroker instance 	 */
specifier|public
name|DBBroker
name|getBroker
parameter_list|()
function_decl|;
specifier|public
name|void
name|setBroker
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
function_decl|;
comment|/** 	 * Get the user which executes the current query. 	 * 	 * @return  user 	 * @deprecated use getSubject 	 */
specifier|public
name|Subject
name|getUser
parameter_list|()
function_decl|;
comment|/** 	 * Get the subject which executes the current query. 	 * 	 * @return  subject 	 */
specifier|public
name|Subject
name|getSubject
parameter_list|()
function_decl|;
comment|/** 	 * Get the document builder currently used for creating temporary document fragments. A new document builder will be created on demand. 	 * 	 * @return  document builder 	 */
specifier|public
name|MemTreeBuilder
name|getDocumentBuilder
parameter_list|()
function_decl|;
specifier|public
name|MemTreeBuilder
name|getDocumentBuilder
parameter_list|(
name|boolean
name|explicitCreation
parameter_list|)
function_decl|;
comment|/** 	 * Returns the shared name pool used by all in-memory documents which are created within this query context. Create a name pool for every document 	 * would be a waste of memory, especially since it is likely that the documents contain elements or attributes with similar names. 	 * 	 * @return  the shared name pool 	 */
specifier|public
name|NamePool
name|getSharedNamePool
parameter_list|()
function_decl|;
specifier|public
name|XQueryContext
name|getContext
parameter_list|()
function_decl|;
specifier|public
name|void
name|prologEnter
parameter_list|(
name|Expression
name|expr
parameter_list|)
function_decl|;
specifier|public
name|void
name|expressionStart
parameter_list|(
name|Expression
name|expr
parameter_list|)
throws|throws
name|TerminatedException
function_decl|;
specifier|public
name|void
name|expressionEnd
parameter_list|(
name|Expression
name|expr
parameter_list|)
function_decl|;
specifier|public
name|void
name|stackEnter
parameter_list|(
name|Expression
name|expr
parameter_list|)
throws|throws
name|TerminatedException
function_decl|;
specifier|public
name|void
name|stackLeave
parameter_list|(
name|Expression
name|expr
parameter_list|)
function_decl|;
specifier|public
name|void
name|proceed
parameter_list|()
throws|throws
name|TerminatedException
function_decl|;
specifier|public
name|void
name|proceed
parameter_list|(
name|Expression
name|expr
parameter_list|)
throws|throws
name|TerminatedException
function_decl|;
specifier|public
name|void
name|proceed
parameter_list|(
name|Expression
name|expr
parameter_list|,
name|MemTreeBuilder
name|builder
parameter_list|)
throws|throws
name|TerminatedException
function_decl|;
specifier|public
name|void
name|setWatchDog
parameter_list|(
name|XQueryWatchDog
name|watchdog
parameter_list|)
function_decl|;
specifier|public
name|XQueryWatchDog
name|getWatchDog
parameter_list|()
function_decl|;
comment|/** 	 * Push any document fragment created within the current execution context on the stack. 	 */
specifier|public
name|void
name|pushDocumentContext
parameter_list|()
function_decl|;
specifier|public
name|void
name|popDocumentContext
parameter_list|()
function_decl|;
comment|/** 	 * Set the base URI for the evaluation context. 	 * 	 *<p>This is the URI returned by the fn:base-uri() function.</p> 	 * 	 * @param  uri 	 */
specifier|public
name|void
name|setBaseURI
parameter_list|(
name|AnyURIValue
name|uri
parameter_list|)
function_decl|;
comment|/** 	 * Set the base URI for the evaluation context. 	 * 	 *<p>A base URI specified via the base-uri directive in the XQuery prolog overwrites any other setting.</p> 	 * 	 * @param  uri 	 * @param  setInProlog 	 */
specifier|public
name|void
name|setBaseURI
parameter_list|(
name|AnyURIValue
name|uri
parameter_list|,
name|boolean
name|setInProlog
parameter_list|)
function_decl|;
comment|/** 	 * Set the path to a base directory where modules should be loaded from. Relative module paths will be resolved against this directory. The 	 * property is usually set by the XQueryServlet or XQueryGenerator, but can also be specified manually. 	 * 	 * @param  path 	 */
specifier|public
name|void
name|setModuleLoadPath
parameter_list|(
name|String
name|path
parameter_list|)
function_decl|;
specifier|public
name|String
name|getModuleLoadPath
parameter_list|()
function_decl|;
comment|/** 	 * The method<code>isBaseURIDeclared.</code> 	 * 	 * @return  a<code>boolean</code> value 	 */
specifier|public
name|boolean
name|isBaseURIDeclared
parameter_list|()
function_decl|;
comment|/** 	 * Get the base URI of the evaluation context. 	 * 	 *<p>This is the URI returned by the fn:base-uri() function.</p> 	 * 	 * @return     base URI of the evaluation context 	 * 	 * @exception  XPathException  if an error occurs 	 */
specifier|public
name|AnyURIValue
name|getBaseURI
parameter_list|()
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Set the current context position, i.e. the position of the currently processed item in the context sequence. This value is required by some 	 * expressions, e.g. fn:position(). 	 * 	 * @param  pos 	 * @param  sequence   	 */
specifier|public
name|void
name|setContextSequencePosition
parameter_list|(
name|int
name|pos
parameter_list|,
name|Sequence
name|sequence
parameter_list|)
function_decl|;
comment|/** 	 * Get the current context position, i.e. the position of the currently processed item in the context sequence. 	 * 	 * @return  current context position 	 */
specifier|public
name|int
name|getContextPosition
parameter_list|()
function_decl|;
specifier|public
name|Sequence
name|getContextSequence
parameter_list|()
function_decl|;
specifier|public
name|void
name|pushInScopeNamespaces
parameter_list|()
function_decl|;
comment|/** 	 * Push all in-scope namespace declarations onto the stack. 	 * 	 * @param  inherit   	 */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|pushInScopeNamespaces
parameter_list|(
name|boolean
name|inherit
parameter_list|)
function_decl|;
specifier|public
name|void
name|popInScopeNamespaces
parameter_list|()
function_decl|;
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|void
name|pushNamespaceContext
parameter_list|()
function_decl|;
specifier|public
name|void
name|popNamespaceContext
parameter_list|()
function_decl|;
comment|/** 	 * Returns the last variable on the local variable stack. The current variable context can be restored by passing the return value to {@link 	 * #popLocalVariables(LocalVariable)}. 	 * 	 * @param   newContext   	 * 	 * @return  last variable on the local variable stack 	 */
specifier|public
name|LocalVariable
name|markLocalVariables
parameter_list|(
name|boolean
name|newContext
parameter_list|)
function_decl|;
comment|/** 	 * Restore the local variable stack to the position marked by variable var. 	 * 	 * @param  var 	 */
specifier|public
name|void
name|popLocalVariables
parameter_list|(
name|LocalVariable
name|var
parameter_list|)
function_decl|;
comment|/** 	 * Returns the current size of the stack. This is used to determine where a variable has been declared. 	 * 	 * @return  current size of the stack 	 */
specifier|public
name|int
name|getCurrentStackSize
parameter_list|()
function_decl|;
comment|/** 	 * Report the start of a function execution. Adds the reported function signature to the function call stack. 	 * 	 * @param  signature   	 */
specifier|public
name|void
name|functionStart
parameter_list|(
name|FunctionSignature
name|signature
parameter_list|)
function_decl|;
comment|/** 	 * Report the end of the currently executed function. Pops the last function signature from the function call stack. 	 */
specifier|public
name|void
name|functionEnd
parameter_list|()
function_decl|;
comment|/** 	 * Check if the specified function signature is found in the current function called stack. If yes, the function might be tail recursive and needs 	 * to be optimized. 	 * 	 * @param   signature 	 * 	 * @return   	 */
specifier|public
name|boolean
name|tailRecursiveCall
parameter_list|(
name|FunctionSignature
name|signature
parameter_list|)
function_decl|;
specifier|public
name|void
name|mapModule
parameter_list|(
name|String
name|namespace
parameter_list|,
name|XmldbURI
name|uri
parameter_list|)
function_decl|;
comment|/** 	 * Import a module and make it available in this context. The prefix and location parameters are optional. If prefix is null, the default prefix 	 * specified by the module is used. If location is null, the module will be read from the namespace URI. 	 * 	 * @param   namespaceURI 	 * @param   prefix 	 * @param   location 	 * 	 * @throws  XPathException 	 */
specifier|public
name|Module
name|importModule
parameter_list|(
name|String
name|namespaceURI
parameter_list|,
name|String
name|prefix
parameter_list|,
name|String
name|location
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Returns the static location mapped to an XQuery source module, if known. 	 * 	 * @param   namespaceURI  the URI of the module 	 * 	 * @return  the location string 	 */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|String
name|getModuleLocation
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
function_decl|;
comment|/** 	 * Returns an iterator over all module namespace URIs which are statically mapped to a known location. 	 * 	 * @return  an iterator 	 */
annotation|@
name|SuppressWarnings
argument_list|(
literal|"unchecked"
argument_list|)
specifier|public
name|Iterator
argument_list|<
name|String
argument_list|>
name|getMappedModuleURIs
parameter_list|()
function_decl|;
comment|/** 	 * Add a forward reference to an undeclared function. Forward references will be resolved later. 	 * 	 * @param  call 	 */
specifier|public
name|void
name|addForwardReference
parameter_list|(
name|FunctionCall
name|call
parameter_list|)
function_decl|;
comment|/** 	 * Resolve all forward references to previously undeclared functions. 	 * 	 * @throws  XPathException 	 */
specifier|public
name|void
name|resolveForwardReferences
parameter_list|()
throws|throws
name|XPathException
function_decl|;
specifier|public
name|boolean
name|optimizationsEnabled
parameter_list|()
function_decl|;
comment|/** 	 * for static compile-time options i.e. declare option 	 * 	 * @param   qnameString   	 * @param   contents      	 * 	 * @throws  XPathException   	 */
specifier|public
name|void
name|addOption
parameter_list|(
name|String
name|qnameString
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * for dynamic run-time options i.e. util:declare-option 	 * 	 * @param   qnameString   	 * @param   contents      	 * 	 * @throws  XPathException   	 */
specifier|public
name|void
name|addDynamicOption
parameter_list|(
name|String
name|qnameString
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|Option
name|getOption
parameter_list|(
name|QName
name|qname
parameter_list|)
function_decl|;
specifier|public
name|Pragma
name|getPragma
parameter_list|(
name|String
name|name
parameter_list|,
name|String
name|contents
parameter_list|)
throws|throws
name|XPathException
function_decl|;
comment|/** 	 * Store the supplied data to a temporary document fragment. 	 * 	 * @param   doc 	 * 	 * @return   	 * 	 * @throws  XPathException 	 */
specifier|public
name|DocumentImpl
name|storeTemporaryDoc
parameter_list|(
name|org
operator|.
name|exist
operator|.
name|memtree
operator|.
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|attribute
parameter_list|,
name|Object
name|value
parameter_list|)
function_decl|;
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|attribute
parameter_list|)
function_decl|;
comment|/** 	 * Set an XQuery Context variable. General variable storage in the xquery context 	 * 	 * @param  name   The variable name 	 * @param  XQvar  The variable value, may be of any xs: type 	 */
specifier|public
name|void
name|setXQueryContextVar
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|XQvar
parameter_list|)
function_decl|;
comment|/** 	 * Get an XQuery Context variable. General variable storage in the xquery context 	 * 	 * @param   name  The variable name 	 * 	 * @return  The variable value indicated by name. 	 */
specifier|public
name|Object
name|getXQueryContextVar
parameter_list|(
name|String
name|name
parameter_list|)
function_decl|;
comment|/** 	 * Starts a batch Transaction. 	 * 	 * @throws  TransactionException   	 * @throws TriggerException  	 */
specifier|public
name|void
name|startBatchTransaction
parameter_list|()
throws|throws
name|TransactionException
throws|,
name|TriggerException
function_decl|;
comment|/** 	 * Determines if a batch transaction should be performed. 	 * 	 * @return  true if a batch update transaction should be performed 	 */
specifier|public
name|boolean
name|hasBatchTransaction
parameter_list|()
function_decl|;
comment|/** 	 * Get the Transaction for the batch. 	 * 	 * @return  The Transaction 	 */
specifier|public
name|Txn
name|getBatchTransaction
parameter_list|()
function_decl|;
comment|/** 	 * Set's that a trigger should be executed for the provided document as part of the batch transaction. 	 * 	 * @param  doc  The document to trigger for 	 */
specifier|public
name|void
name|setBatchTransactionTrigger
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|)
function_decl|;
comment|/** 	 * Completes a batch transaction, by committing the transaction and calling finish on any triggers set by setBatchTransactionTrigger(). 	 * 	 * @throws TransactionException   	 * @throws TriggerException  	 */
specifier|public
name|void
name|finishBatchTransaction
parameter_list|()
throws|throws
name|TransactionException
throws|,
name|TriggerException
function_decl|;
specifier|public
name|void
name|registerUpdateListener
parameter_list|(
name|UpdateListener
name|listener
parameter_list|)
function_decl|;
comment|/** 	 * Check if the XQuery contains pragmas that define serialization settings. If yes, 	 * copy the corresponding settings to the current set of output properties. 	 * 	 * @param   properties  the properties object to which serialization parameters will be added. 	 * 	 * @throws  XPathException  if an error occurs while parsing the option 	 */
specifier|public
name|void
name|checkOptions
parameter_list|(
name|Properties
name|properties
parameter_list|)
throws|throws
name|XPathException
function_decl|;
specifier|public
name|void
name|setDebuggeeJoint
parameter_list|(
name|DebuggeeJoint
name|joint
parameter_list|)
function_decl|;
specifier|public
name|DebuggeeJoint
name|getDebuggeeJoint
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|isDebugMode
parameter_list|()
function_decl|;
specifier|public
name|boolean
name|requireDebugMode
parameter_list|()
function_decl|;
specifier|public
name|void
name|registerBinaryValueInstance
parameter_list|(
name|BinaryValue
name|binaryValue
parameter_list|)
function_decl|;
specifier|public
name|void
name|cleanupBinaryValueInstances
parameter_list|()
function_decl|;
block|}
end_interface

end_unit

