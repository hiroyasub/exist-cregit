begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|RemoteException
import|;
end_import

begin_comment
comment|/**  * This interface defines eXist's SOAP service for write   * operations on the database.  */
end_comment

begin_interface
specifier|public
interface|interface
name|Admin
extends|extends
name|java
operator|.
name|rmi
operator|.
name|Remote
block|{
comment|/** 	 * Create a new user session. Authenticates the user against the database. 	 * The user has to be a valid database user. If the provided user information 	 * is valid, a new session will be registered on the server and a session id 	 * will be returned. 	 *  	 * The session will be valid for at least 60 minutes. Please call disconnect() to 	 * release the session. 	 *  	 * Sessions are shared between the Query and Admin services. A session created 	 * through the Query service can be used with the Admin service and vice versa. 	 *  	 * @param user 	 * @param password 	 * @return session-id a unique id for the created session  	 * @throws RemoteException if the user cannot log in 	 */
specifier|public
name|String
name|connect
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
throws|throws
name|RemoteException
function_decl|;
comment|/** 	 * Release a user session. This will free all resources (including result sets). 	 *  	 * @param sessionId a valid session id as returned by connect(). 	 * @throws java.rmi.RemoteException 	 */
specifier|public
name|void
name|disconnect
parameter_list|(
name|String
name|sessionId
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
function_decl|;
comment|/** 	 * Store a new document into the database. The document will be stored using 	 * the name and location as specified by the path argument. To avoid any conflicts 	 * with the SOAP transport layer, document contents are passed as base64 encoded 	 * binary data. Internally, all documents are stored in UTF-8 encoding. 	 *  	 * The method will automatically replace an already existing document with the same 	 * path if the replace argument is set to true (and the user has sufficient privileges). 	 *   	 * @param sessionId a unique id for the created session. 	 * @param data the document contents as base64 encoded binary data. 	 * @param encoding the character encoding used for the document data. 	 * @param path the target path for the new document. 	 * @param replace should an existing document be replaced?  	 * @throws RemoteException 	 */
specifier|public
name|void
name|store
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|String
name|encoding
parameter_list|,
name|String
name|path
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|RemoteException
function_decl|;
comment|/** 	 * Remove the specified collection. 	 *  	 * @param sessionId sessionId a unique id for the created session. 	 * @param path the full path to the collection. 	 * @return true on success. 	 *  	 * @throws RemoteException 	 */
specifier|public
name|boolean
name|removeCollection
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|RemoteException
function_decl|;
comment|/** 	 * Remove the specified document. 	 *  	 * @param sessionId a unique id for the created session. 	 * @param path the full path to the document. 	 * @return true on success. 	 *  	 * @throws RemoteException 	 */
specifier|public
name|boolean
name|removeDocument
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|RemoteException
function_decl|;
comment|/** 	 * Create a new collection using the specified path. 	 *  	 * @param sessionId a unique id for the created session. 	 * @param path the full path to the collection. 	 * @return 	 * @throws RemoteException 	 */
specifier|public
name|boolean
name|createCollection
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|String
name|path
parameter_list|)
throws|throws
name|RemoteException
function_decl|;
comment|/** 	 * Apply a set of XUpdate modifications to a collection. 	 *  	 * @param sessionId a unique id for the created session. 	 * @param collectionName the full path to the collection. 	 * @param xupdate the XUpdate document to be applied. 	 * @return 	 * @throws RemoteException 	 */
specifier|public
name|int
name|xupdate
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|String
name|collectionName
parameter_list|,
name|String
name|xupdate
parameter_list|)
throws|throws
name|RemoteException
function_decl|;
comment|/** 	 * Apply a set of XUpdate modifications to the specified document. 	 *  	 * @param sessionId a unique id for the created session. 	 * @param documentName the full path to the document. 	 * @param xupdate the XUpdate document to be applied. 	 * @return 	 * @throws RemoteException 	 */
specifier|public
name|int
name|xupdateResource
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|String
name|documentName
parameter_list|,
name|String
name|xupdate
parameter_list|)
throws|throws
name|RemoteException
function_decl|;
block|}
end_interface

end_unit

