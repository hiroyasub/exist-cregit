begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|soap
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|rmi
operator|.
name|RemoteException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|sync
operator|.
name|Sync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Occurrences
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|Modification
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xupdate
operator|.
name|XUpdateProcessor
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  *  Provides the actual implementations for the methods defined in  * {@link org.exist.soap.Admin}.  *  *@author     Wolfgang Meier<wolfgang@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|AdminSoapBindingImpl
implements|implements
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|Admin
block|{
specifier|private
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Admin
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
comment|/**  Constructor for the AdminSoapBindingImpl object */
specifier|public
name|AdminSoapBindingImpl
parameter_list|()
block|{
try|try
block|{
name|pool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"failed to initialize broker pool"
argument_list|)
throw|;
block|}
block|}
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|connect
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|userId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|password
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|User
name|u
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getUser
argument_list|(
name|userId
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"user "
operator|+
name|userId
operator|+
literal|" does not exist"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|u
operator|.
name|validate
argument_list|(
name|password
argument_list|)
condition|)
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"the supplied password is invalid"
argument_list|)
throw|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"user "
operator|+
name|userId
operator|+
literal|" connected"
argument_list|)
expr_stmt|;
return|return
name|SessionManager
operator|.
name|getInstance
argument_list|()
operator|.
name|createSession
argument_list|(
name|u
argument_list|)
return|;
block|}
specifier|public
name|void
name|disconnect
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|SessionManager
name|manager
init|=
name|SessionManager
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|Session
name|session
init|=
name|manager
operator|.
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"disconnecting session "
operator|+
name|sessionId
argument_list|)
expr_stmt|;
name|manager
operator|.
name|disconnect
argument_list|(
name|sessionId
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|createCollection
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|createCollection
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|createCollection
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"creating collection "
operator|+
name|path
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
name|coll
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|txn
argument_list|,
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"failed to create collection"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|broker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|coll
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
name|broker
operator|.
name|sync
argument_list|(
name|Sync
operator|.
name|MINOR_SYNC
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|removeCollection
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|removeCollection
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|removeCollection
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|boolean
name|removed
init|=
name|broker
operator|.
name|removeCollection
argument_list|(
name|txn
argument_list|,
name|collection
argument_list|)
decl_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return
name|removed
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|removeDocument
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|removeDocument
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid document URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|removeDocument
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|XmldbURI
name|collectionUri
init|=
name|path
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|docUri
init|=
name|path
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectionUri
operator|==
literal|null
operator|||
name|docUri
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Illegal document path"
argument_list|)
throw|;
block|}
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collectionUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Collection "
operator|+
name|collectionUri
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|DocumentImpl
name|doc
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Document "
operator|+
name|docUri
operator|+
literal|" not found"
argument_list|)
throw|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
name|collection
operator|.
name|removeBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|doc
argument_list|)
expr_stmt|;
else|else
name|collection
operator|.
name|removeXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|store
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|encoding
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
name|store
argument_list|(
name|sessionId
argument_list|,
name|data
argument_list|,
name|encoding
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|,
name|replace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid document URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|store
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|encoding
parameter_list|,
name|XmldbURI
name|path
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|XmldbURI
name|collectionUri
init|=
name|path
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|docUri
init|=
name|path
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectionUri
operator|==
literal|null
operator|||
name|docUri
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Illegal document path"
argument_list|)
throw|;
block|}
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collectionUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Collection "
operator|+
name|collectionUri
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|replace
condition|)
block|{
name|DocumentImpl
name|old
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Document exists and overwrite is not allowed"
argument_list|)
throw|;
block|}
block|}
name|long
name|startTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
comment|// TODO check XML/Binary resource
comment|//          IndexInfo info = collection.validate(txn, broker, path, new InputSource(new ByteArrayInputStream(data)));
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
literal|"text/xml"
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|data
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"parsing "
operator|+
name|path
operator|+
literal|" took "
operator|+
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|startTime
operator|)
operator|+
literal|"ms."
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|Session
name|getSession
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|Session
name|session
init|=
name|SessionManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getSession
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
throw|throw
operator|new
name|java
operator|.
name|rmi
operator|.
name|RemoteException
argument_list|(
literal|"Session is invalid or timed out"
argument_list|)
throw|;
return|return
name|session
return|;
block|}
specifier|public
name|int
name|xupdate
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|collectionName
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|xupdate
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|xupdate
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|,
name|xupdate
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|xupdate
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|collectionName
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|xupdate
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collectionName
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"collection "
operator|+
name|collectionName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|DocumentSet
name|docs
init|=
name|collection
operator|.
name|allDocs
argument_list|(
name|broker
argument_list|,
operator|new
name|DocumentSet
argument_list|()
argument_list|,
literal|true
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|XUpdateProcessor
name|processor
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
name|AccessContext
operator|.
name|SOAP
argument_list|)
decl_stmt|;
name|Modification
name|modifications
index|[]
init|=
name|processor
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifications
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mods
operator|+=
name|modifications
index|[
name|i
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|mods
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|xupdateResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|documentName
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|xupdate
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|xupdateResource
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentName
argument_list|)
argument_list|,
name|xupdate
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid document URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|int
name|xupdateResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|documentName
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|xupdate
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO check XML/Binary resource
comment|//            DocumentImpl doc = (DocumentImpl)broker.getDocument(documentName);
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|documentName
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"document "
operator|+
name|documentName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|broker
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Not allowed to read resource"
argument_list|)
throw|;
block|}
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|XUpdateProcessor
name|processor
init|=
operator|new
name|XUpdateProcessor
argument_list|(
name|broker
argument_list|,
name|docs
argument_list|,
name|AccessContext
operator|.
name|SOAP
argument_list|)
decl_stmt|;
name|Modification
name|modifications
index|[]
init|=
name|processor
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|xupdate
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|long
name|mods
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|modifications
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|mods
operator|+=
name|modifications
index|[
name|i
index|]
operator|.
name|process
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
return|return
operator|(
name|int
operator|)
name|mods
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|storeBinary
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|mimeType
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
name|storeBinary
argument_list|(
name|sessionId
argument_list|,
name|data
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|,
name|mimeType
argument_list|,
name|replace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid document URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|storeBinary
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|XmldbURI
name|path
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|mimeType
parameter_list|,
name|boolean
name|replace
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|XmldbURI
name|collectionUri
init|=
name|path
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|docUri
init|=
name|path
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectionUri
operator|==
literal|null
operator|||
name|docUri
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Illegal document path"
argument_list|)
throw|;
block|}
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionUri
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Collection "
operator|+
name|collectionUri
operator|+
literal|" not found"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|replace
condition|)
block|{
name|DocumentImpl
name|old
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|docUri
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Old document exists and overwrite is not allowed"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Storing binary resource to collection "
operator|+
name|collection
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
comment|/*DocumentImpl doc = */
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|docUri
argument_list|,
name|data
argument_list|,
name|mimeType
argument_list|)
expr_stmt|;
comment|//            if (created != null)
comment|//                doc.setCreated(created.getTime());
comment|//            if (modified != null)
comment|//                doc.setLastModified(modified.getTime());
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
comment|//        documentCache.clear();
comment|//        return doc != null;
block|}
specifier|public
name|byte
index|[]
name|getBinaryResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|getBinaryResource
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid document URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|byte
index|[]
name|getBinaryResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
comment|// TODO check XML/Binary resource
comment|//            doc = (DocumentImpl) broker.openXmlDocument(name, Lock.READ_LOCK);
name|doc
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|name
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Resource "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|!=
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Document "
operator|+
name|name
operator|+
literal|" is not a binary resource"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Insufficient privileges to read resource"
argument_list|)
throw|;
return|return
name|broker
operator|.
name|getBinaryResource
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|doc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|CollectionDesc
name|getCollectionDesc
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|getCollectionDesc
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|CollectionDesc
name|getCollectionDesc
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|collectionName
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|collectionName
operator|==
literal|null
condition|)
name|collectionName
operator|=
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionName
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"collection "
operator|+
name|collectionName
operator|+
literal|" not found!"
argument_list|)
throw|;
name|CollectionDesc
name|desc
init|=
operator|new
name|CollectionDesc
argument_list|()
decl_stmt|;
name|Vector
name|docs
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|Vector
name|collections
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
if|if
condition|(
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
block|{
name|DocumentImpl
name|doc
decl_stmt|;
comment|//              Hashtable hash;
name|Permission
name|perms
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|perms
operator|=
name|doc
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
name|DocumentDesc
name|dd
init|=
operator|new
name|DocumentDesc
argument_list|()
decl_stmt|;
comment|//                    hash = new Hashtable(4);
name|dd
operator|.
name|setName
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dd
operator|.
name|setOwner
argument_list|(
name|perms
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|dd
operator|.
name|setGroup
argument_list|(
name|perms
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|dd
operator|.
name|setPermissions
argument_list|(
name|perms
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|dd
operator|.
name|setType
argument_list|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|?
name|DocumentType
operator|.
name|BinaryResource
else|:
name|DocumentType
operator|.
name|XMLResource
argument_list|)
expr_stmt|;
name|docs
operator|.
name|addElement
argument_list|(
name|dd
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|collections
operator|.
name|addElement
argument_list|(
operator|(
operator|(
name|XmldbURI
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Permission
name|perms
init|=
name|collection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setCollections
argument_list|(
operator|new
name|Strings
argument_list|(
operator|(
name|String
index|[]
operator|)
name|collections
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|collections
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setDocuments
argument_list|(
operator|new
name|DocumentDescs
argument_list|(
operator|(
name|DocumentDesc
index|[]
operator|)
name|docs
operator|.
name|toArray
argument_list|(
operator|new
name|DocumentDesc
index|[
name|docs
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setName
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setCreated
argument_list|(
name|collection
operator|.
name|getCreationTime
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setOwner
argument_list|(
name|perms
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setGroup
argument_list|(
name|perms
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|desc
operator|.
name|setPermissions
argument_list|(
name|perms
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|desc
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setPermissions
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|resource
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|owner
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|ownerGroup
parameter_list|,
name|int
name|permissions
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
name|setPermissions
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
argument_list|,
name|owner
argument_list|,
name|ownerGroup
argument_list|,
name|permissions
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setPermissions
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|resource
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|owner
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|ownerGroup
parameter_list|,
name|int
name|permissions
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|resource
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
comment|// TODO check XML/Binary resource
comment|//                doc = (DocumentImpl) broker.openDocument(resource, Lock.WRITE_LOCK);
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|resource
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"document or collection "
operator|+
name|resource
operator|+
literal|" not found"
argument_list|)
throw|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"changing permissions on document "
operator|+
name|resource
argument_list|)
expr_stmt|;
name|Permission
name|perm
init|=
name|doc
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|perm
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
expr_stmt|;
block|}
name|perm
operator|.
name|setPermissions
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
comment|// TODO check XML/Binary resource
comment|//                    broker.storeDocument(transaction, doc);
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
comment|//                    return true;
block|}
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to change permissions"
argument_list|)
throw|;
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"changing permissions on collection "
operator|+
name|resource
argument_list|)
expr_stmt|;
name|Permission
name|perm
init|=
name|collection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
if|if
condition|(
name|perm
operator|.
name|getOwner
argument_list|()
operator|.
name|equals
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
condition|)
block|{
name|perm
operator|.
name|setPermissions
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
if|if
condition|(
name|owner
operator|!=
literal|null
condition|)
block|{
name|perm
operator|.
name|setOwner
argument_list|(
name|owner
argument_list|)
expr_stmt|;
name|perm
operator|.
name|setGroup
argument_list|(
name|ownerGroup
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|registerLock
argument_list|(
name|collection
operator|.
name|getLock
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
return|return;
block|}
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to change permissions"
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TransactionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|moveOrCopyResource
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|String
name|docPath
parameter_list|,
name|String
name|destinationPath
parameter_list|,
name|String
name|newName
parameter_list|,
name|boolean
name|move
parameter_list|)
throws|throws
name|RemoteException
block|{
try|try
block|{
name|moveOrCopyResource
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|docPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|destinationPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|newName
argument_list|)
argument_list|,
name|move
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|moveOrCopyResource
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|docPath
parameter_list|,
name|XmldbURI
name|destinationPath
parameter_list|,
name|XmldbURI
name|newName
parameter_list|,
name|boolean
name|move
parameter_list|)
throws|throws
name|RemoteException
block|{
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
name|Collection
name|destination
init|=
literal|null
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|session
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
name|XmldbURI
name|collectionUri
init|=
name|docPath
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|XmldbURI
name|docUri
init|=
name|docPath
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|collectionUri
operator|==
literal|null
operator|||
name|docUri
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Illegal document path"
argument_list|)
throw|;
block|}
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionUri
argument_list|,
name|move
condition|?
name|Lock
operator|.
name|WRITE_LOCK
else|:
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Collection "
operator|+
name|collectionUri
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
name|doc
operator|=
name|collection
operator|.
name|getDocumentWithLock
argument_list|(
name|broker
argument_list|,
name|docUri
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Document "
operator|+
name|docUri
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
comment|// get destination collection
name|destination
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|destinationPath
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Destination collection "
operator|+
name|destinationPath
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|move
condition|)
comment|// TODO check XML/Binary resource
comment|//                broker.moveResource(transaction, doc, destination, newName);
name|broker
operator|.
name|moveXMLResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
else|else
comment|// TODO check XML/Binary resource
comment|//                broker.copyResource(transaction, doc, destination, newName);
name|broker
operator|.
name|copyXMLResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
comment|//            documentCache.clear();
return|return;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Could not acquire lock on document "
operator|+
name|docPath
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Could not move/copy document "
operator|+
name|docPath
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TransactionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Error commiting transaction "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
name|destination
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|collection
operator|.
name|release
argument_list|(
name|move
condition|?
name|Lock
operator|.
name|WRITE_LOCK
else|:
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|boolean
name|moveOrCopyCollection
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|String
name|collectionPath
parameter_list|,
name|String
name|destinationPath
parameter_list|,
name|String
name|newName
parameter_list|,
name|boolean
name|move
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|RemoteException
block|{
try|try
block|{
return|return
name|moveOrCopyCollection
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|destinationPath
argument_list|)
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|newName
argument_list|)
argument_list|,
name|move
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|boolean
name|moveOrCopyCollection
parameter_list|(
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|collectionPath
parameter_list|,
name|XmldbURI
name|destinationPath
parameter_list|,
name|XmldbURI
name|newName
parameter_list|,
name|boolean
name|move
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|RemoteException
block|{
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
name|Collection
name|destination
init|=
literal|null
decl_stmt|;
try|try
block|{
name|User
name|user
init|=
name|session
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// get source document
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionPath
argument_list|,
name|move
condition|?
name|Lock
operator|.
name|WRITE_LOCK
else|:
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Collection "
operator|+
name|collectionPath
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
comment|// get destination collection
name|destination
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|destinationPath
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Destination collection "
operator|+
name|destinationPath
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|move
condition|)
name|broker
operator|.
name|moveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
else|else
name|broker
operator|.
name|copyCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
comment|//            documentCache.clear();
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|collection
operator|.
name|release
argument_list|(
name|move
condition|?
name|Lock
operator|.
name|WRITE_LOCK
else|:
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
name|destination
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|copyResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|docPath
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|destinationPath
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|newName
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|moveOrCopyResource
argument_list|(
name|sessionId
argument_list|,
name|docPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|copyCollection
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|collectionPath
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|destinationPath
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|newName
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
name|moveOrCopyCollection
argument_list|(
name|sessionId
argument_list|,
name|collectionPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|setUser
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|password
parameter_list|,
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|Strings
name|groups
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|home
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
if|if
condition|(
name|password
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|password
operator|=
literal|null
expr_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|session
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
operator|.
name|GUEST_USER
argument_list|)
operator|&&
operator|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"guest user cannot be modified"
argument_list|)
throw|;
name|User
name|u
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasUser
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"not allowed to create user"
argument_list|)
throw|;
name|u
operator|=
operator|new
name|User
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|u
operator|.
name|setPasswordDigest
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|u
operator|=
name|manager
operator|.
name|getUser
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|u
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"you are not allowed to change this user"
argument_list|)
throw|;
name|u
operator|.
name|setPasswordDigest
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groups
operator|.
name|getElements
argument_list|()
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|u
operator|.
name|hasGroup
argument_list|(
name|groups
operator|.
name|getElements
argument_list|()
index|[
name|i
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"User is not allowed to add groups"
argument_list|)
throw|;
name|u
operator|.
name|addGroup
argument_list|(
name|groups
operator|.
name|getElements
argument_list|()
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|home
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|u
operator|.
name|setHome
argument_list|(
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|home
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
name|manager
operator|.
name|setUser
argument_list|(
name|u
argument_list|)
expr_stmt|;
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|UserDesc
name|getUser
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|user
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|User
name|u
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getUser
argument_list|(
name|user
argument_list|)
decl_stmt|;
if|if
condition|(
name|u
operator|==
literal|null
condition|)
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"user "
operator|+
name|user
operator|+
literal|" does not exist"
argument_list|)
throw|;
name|UserDesc
name|desc
init|=
operator|new
name|UserDesc
argument_list|()
decl_stmt|;
name|desc
operator|.
name|setName
argument_list|(
name|u
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|/*         Vector groups = new Vector();         for (Iterator i = u.getGroups(); i.hasNext(); )             groups.addElement(i.next());         desc.setGroups(new Strings((String[])groups.toArray(new String[groups.size()])));  */
name|desc
operator|.
name|setGroups
argument_list|(
operator|new
name|Strings
argument_list|(
name|u
operator|.
name|getGroups
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|u
operator|.
name|getHome
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|desc
operator|.
name|setHome
argument_list|(
name|u
operator|.
name|getHome
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|desc
return|;
block|}
specifier|public
name|void
name|removeUser
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|User
name|user
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
condition|)
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"you are not allowed to remove users"
argument_list|)
throw|;
try|try
block|{
name|manager
operator|.
name|deleteUser
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|UserDescs
name|getUsers
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|User
name|users
index|[]
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getUsers
argument_list|()
decl_stmt|;
name|UserDesc
index|[]
name|r
init|=
operator|new
name|UserDesc
index|[
name|users
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|users
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|r
index|[
name|i
index|]
operator|=
operator|new
name|UserDesc
argument_list|()
expr_stmt|;
name|r
index|[
name|i
index|]
operator|.
name|setName
argument_list|(
name|users
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|/*             Vector groups = new Vector();             for (Iterator j = users[i].getGroups(); j.hasNext(); )                 groups.addElement(j.next());             r[i].setGroups(new Strings((String[])groups.toArray(new String[groups.size()])));  */
name|r
index|[
name|i
index|]
operator|.
name|setGroups
argument_list|(
operator|new
name|Strings
argument_list|(
name|users
index|[
name|i
index|]
operator|.
name|getGroups
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|users
index|[
name|i
index|]
operator|.
name|getHome
argument_list|()
operator|!=
literal|null
condition|)
name|r
index|[
name|i
index|]
operator|.
name|setHome
argument_list|(
name|users
index|[
name|i
index|]
operator|.
name|getHome
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|UserDescs
argument_list|(
name|r
argument_list|)
return|;
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|Strings
name|getGroups
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|String
index|[]
name|groups
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGroups
argument_list|()
decl_stmt|;
name|Vector
name|v
init|=
operator|new
name|Vector
argument_list|(
name|groups
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|groups
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|v
operator|.
name|addElement
argument_list|(
name|groups
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Strings
argument_list|(
operator|(
name|String
index|[]
operator|)
name|v
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|v
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|void
name|moveCollection
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|collectionPath
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|destinationPath
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|newName
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
name|moveOrCopyCollection
argument_list|(
name|sessionId
argument_list|,
name|collectionPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RemoteException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|moveResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|docPath
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|destinationPath
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|newName
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|moveOrCopyResource
argument_list|(
name|sessionId
argument_list|,
name|docPath
argument_list|,
name|destinationPath
argument_list|,
name|newName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|lockResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|userName
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
name|lockResource
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|,
name|userName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|lockResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|path
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|userName
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|session
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// TODO check XML/Binary resource
comment|//            doc = (DocumentImpl) broker.openDocument(path, Lock.WRITE_LOCK);
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|path
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Resource "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|UPDATE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User is not allowed to lock resource "
operator|+
name|path
argument_list|)
throw|;
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|userName
operator|.
name|equals
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
operator|||
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|" is not allowed "
operator|+
literal|"to lock the resource for user "
operator|+
name|userName
argument_list|)
throw|;
name|User
name|lockOwner
init|=
name|doc
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOwner
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|lockOwner
operator|.
name|equals
argument_list|(
name|user
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Resource is already locked by user "
operator|+
name|lockOwner
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
name|User
name|lo
init|=
name|manager
operator|.
name|getUser
argument_list|(
name|userName
argument_list|)
decl_stmt|;
name|doc
operator|.
name|setUserLock
argument_list|(
name|lo
argument_list|)
expr_stmt|;
comment|// TODO check XML/Binary resource
comment|//            broker.storeDocument(transaction, doc);
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|RemoteException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|unlockResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
name|unlockResource
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|void
name|unlockResource
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|session
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// TODO check XML/Binary resource
comment|//            doc = (DocumentImpl) broker.openDocument(path, Lock.WRITE_LOCK);
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|path
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Resource "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|UPDATE
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"User is not allowed to lock resource "
operator|+
name|path
argument_list|)
throw|;
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|manager
init|=
name|pool
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
name|User
name|lockOwner
init|=
name|doc
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
if|if
condition|(
name|lockOwner
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|lockOwner
operator|.
name|equals
argument_list|(
name|user
argument_list|)
operator|)
operator|&&
operator|(
operator|!
name|manager
operator|.
name|hasAdminPrivileges
argument_list|(
name|user
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Resource is already locked by user "
operator|+
name|lockOwner
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|doc
operator|.
name|setUserLock
argument_list|(
literal|null
argument_list|)
expr_stmt|;
comment|// TODO check XML/Binary resource
comment|//            broker.storeDocument(transaction, doc);
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
return|return;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|hasUserLock
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|hasUserLock
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|path
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|java
operator|.
name|lang
operator|.
name|String
name|hasUserLock
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|path
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|session
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
comment|// TODO check XML/Binary resource
comment|//            doc = (DocumentImpl) broker.openDocument(path, Lock.READ_LOCK);
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|path
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Resource "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|doc
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Insufficient privileges to read resource"
argument_list|)
throw|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Resource "
operator|+
name|path
operator|+
literal|" not found"
argument_list|)
throw|;
name|User
name|u
init|=
name|doc
operator|.
name|getUserLock
argument_list|()
decl_stmt|;
return|return
name|u
operator|==
literal|null
condition|?
literal|""
else|:
name|u
operator|.
name|getName
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|Permissions
name|getPermissions
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|resource
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|getPermissions
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|resource
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|Permissions
name|getPermissions
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|resource
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|session
operator|.
name|getUser
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
operator|.
name|openCollection
argument_list|(
name|resource
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
name|Permission
name|perm
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
comment|// TODO check XML/Binary resource
comment|//                DocumentImpl doc = (DocumentImpl) broker.openDocument(resource, Lock.READ_LOCK);
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|resource
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"document or collection "
operator|+
name|resource
operator|+
literal|" not found"
argument_list|)
throw|;
name|perm
operator|=
name|doc
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|perm
operator|=
name|collection
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
name|Permissions
name|p
init|=
operator|new
name|Permissions
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOwner
argument_list|(
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setGroup
argument_list|(
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPermissions
argument_list|(
name|perm
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|EntityPermissionsList
name|listCollectionPermissions
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|listCollectionPermissions
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|EntityPermissionsList
name|listCollectionPermissions
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|session
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|name
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Collection "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to read collection "
operator|+
name|name
argument_list|)
throw|;
name|EntityPermissions
index|[]
name|result
init|=
operator|new
name|EntityPermissions
index|[
name|collection
operator|.
name|getChildCollectionCount
argument_list|()
index|]
decl_stmt|;
name|XmldbURI
name|child
decl_stmt|,
name|path
decl_stmt|;
name|Collection
name|childColl
decl_stmt|;
name|Permission
name|perm
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|child
operator|=
operator|(
name|XmldbURI
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|path
operator|=
name|name
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|childColl
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|perm
operator|=
name|childColl
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|=
operator|new
name|EntityPermissions
argument_list|()
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|.
name|setName
argument_list|(
name|child
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|.
name|setOwner
argument_list|(
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|.
name|setGroup
argument_list|(
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|.
name|setPermissions
argument_list|(
name|perm
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|EntityPermissionsList
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|EntityPermissionsList
name|listDocumentPermissions
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|name
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|listDocumentPermissions
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|EntityPermissionsList
name|listDocumentPermissions
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|name
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|session
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|name
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Collection "
operator|+
name|name
operator|+
literal|" not found"
argument_list|)
throw|;
if|if
condition|(
operator|!
name|collection
operator|.
name|getPermissions
argument_list|()
operator|.
name|validate
argument_list|(
name|user
argument_list|,
name|Permission
operator|.
name|READ
argument_list|)
condition|)
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"not allowed to read collection "
operator|+
name|name
argument_list|)
throw|;
name|EntityPermissions
index|[]
name|result
init|=
operator|new
name|EntityPermissions
index|[
name|collection
operator|.
name|getDocumentCount
argument_list|()
index|]
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
name|Permission
name|perm
decl_stmt|;
name|int
name|cnt
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|perm
operator|=
name|doc
operator|.
name|getPermissions
argument_list|()
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|=
operator|new
name|EntityPermissions
argument_list|()
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|.
name|setName
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|.
name|setOwner
argument_list|(
name|perm
operator|.
name|getOwner
argument_list|()
argument_list|)
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|.
name|setGroup
argument_list|(
name|perm
operator|.
name|getOwnerGroup
argument_list|()
argument_list|)
expr_stmt|;
name|result
index|[
name|cnt
index|]
operator|.
name|setPermissions
argument_list|(
name|perm
operator|.
name|getPermissions
argument_list|()
argument_list|)
expr_stmt|;
name|cnt
operator|++
expr_stmt|;
block|}
return|return
operator|new
name|EntityPermissionsList
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|IndexedElements
name|getIndexedElements
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|java
operator|.
name|lang
operator|.
name|String
name|collectionName
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
try|try
block|{
return|return
name|getIndexedElements
argument_list|(
name|sessionId
argument_list|,
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|collectionName
argument_list|)
argument_list|,
name|inclusive
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
literal|"Invalid collection URI"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|org
operator|.
name|exist
operator|.
name|soap
operator|.
name|IndexedElements
name|getIndexedElements
parameter_list|(
name|java
operator|.
name|lang
operator|.
name|String
name|sessionId
parameter_list|,
name|XmldbURI
name|collectionName
parameter_list|,
name|boolean
name|inclusive
parameter_list|)
throws|throws
name|java
operator|.
name|rmi
operator|.
name|RemoteException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Session
name|session
init|=
name|getSession
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
name|User
name|user
init|=
name|session
operator|.
name|getUser
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|collectionName
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"collection "
operator|+
name|collectionName
operator|+
literal|" not found"
argument_list|)
throw|;
name|Occurrences
name|occurrences
index|[]
init|=
name|broker
operator|.
name|getElementIndex
argument_list|()
operator|.
name|scanIndexedElements
argument_list|(
name|collection
argument_list|,
name|inclusive
argument_list|)
decl_stmt|;
name|IndexedElement
index|[]
name|result
init|=
operator|new
name|IndexedElement
index|[
name|occurrences
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|occurrences
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|QName
name|qname
init|=
operator|(
name|QName
operator|)
name|occurrences
index|[
name|i
index|]
operator|.
name|getTerm
argument_list|()
decl_stmt|;
name|result
index|[
name|i
index|]
operator|=
operator|new
name|IndexedElement
argument_list|(
name|qname
operator|.
name|getLocalName
argument_list|()
argument_list|,
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|qname
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
condition|?
literal|""
else|:
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|,
name|occurrences
index|[
name|i
index|]
operator|.
name|getOccurrences
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|IndexedElements
argument_list|(
name|result
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
throw|throw
operator|new
name|RemoteException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

