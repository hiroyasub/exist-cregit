begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|ant
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|BuildException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|DirectoryScanner
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|Project
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|types
operator|.
name|DirSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|Restore
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|restore
operator|.
name|listener
operator|.
name|ConsoleRestoreListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|restore
operator|.
name|listener
operator|.
name|RestoreListener
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_comment
comment|/**  * DOCUMENT ME!  *  * @author  wolf  */
end_comment

begin_class
specifier|public
class|class
name|RestoreTask
extends|extends
name|AbstractXMLDBTask
block|{
specifier|private
name|File
name|zipFile
init|=
literal|null
decl_stmt|;
specifier|private
name|File
name|dir
init|=
literal|null
decl_stmt|;
specifier|private
name|DirSet
name|dirSet
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|restorePassword
init|=
literal|null
decl_stmt|;
comment|/* (non-Javadoc)      * @see org.apache.tools.ant.Task#execute()      */
specifier|public
name|void
name|execute
parameter_list|()
throws|throws
name|BuildException
block|{
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|BuildException
argument_list|(
literal|"You have to specify an XMLDB collection URI"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
operator|(
name|dir
operator|==
literal|null
operator|)
operator|&&
operator|(
name|dirSet
operator|==
literal|null
operator|)
operator|&&
operator|(
name|zipFile
operator|==
literal|null
operator|)
condition|)
block|{
throw|throw
operator|(
operator|new
name|BuildException
argument_list|(
literal|"Missing required argument: either dir, dirset or file required"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
operator|(
name|dir
operator|!=
literal|null
operator|)
operator|&&
operator|!
name|dir
operator|.
name|canRead
argument_list|()
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Cannot read restore file: "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|failonerror
condition|)
block|{
throw|throw
operator|(
operator|new
name|BuildException
argument_list|(
name|msg
argument_list|)
operator|)
throw|;
block|}
else|else
block|{
name|log
argument_list|(
name|msg
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|registerDatabase
argument_list|()
expr_stmt|;
try|try
block|{
if|if
condition|(
name|dir
operator|!=
literal|null
condition|)
block|{
name|log
argument_list|(
literal|"Restoring from "
operator|+
name|dir
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
specifier|final
name|File
name|file
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"__contents__.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Did not found file "
operator|+
name|file
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|failonerror
condition|)
block|{
throw|throw
operator|(
operator|new
name|BuildException
argument_list|(
name|msg
argument_list|)
operator|)
throw|;
block|}
else|else
block|{
name|log
argument_list|(
name|msg
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|Restore
name|restore
init|=
operator|new
name|Restore
argument_list|()
decl_stmt|;
specifier|final
name|RestoreListener
name|listener
init|=
operator|new
name|ConsoleRestoreListener
argument_list|()
decl_stmt|;
name|restore
operator|.
name|restore
argument_list|(
name|listener
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|restorePassword
argument_list|,
name|file
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|dirSet
operator|!=
literal|null
condition|)
block|{
specifier|final
name|DirectoryScanner
name|scanner
init|=
name|dirSet
operator|.
name|getDirectoryScanner
argument_list|(
name|getProject
argument_list|()
argument_list|)
decl_stmt|;
name|scanner
operator|.
name|scan
argument_list|()
expr_stmt|;
specifier|final
name|String
index|[]
name|includedFiles
init|=
name|scanner
operator|.
name|getIncludedFiles
argument_list|()
decl_stmt|;
name|log
argument_list|(
literal|"Found "
operator|+
name|includedFiles
operator|.
name|length
operator|+
literal|" files.\n"
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|included
range|:
name|includedFiles
control|)
block|{
name|dir
operator|=
operator|new
name|File
argument_list|(
name|scanner
operator|.
name|getBasedir
argument_list|()
operator|+
name|File
operator|.
name|separator
operator|+
name|included
argument_list|)
expr_stmt|;
specifier|final
name|File
name|contentsFile
init|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
literal|"__contents__.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|contentsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"Did not found file "
operator|+
name|contentsFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|failonerror
condition|)
block|{
throw|throw
operator|(
operator|new
name|BuildException
argument_list|(
name|msg
argument_list|)
operator|)
throw|;
block|}
else|else
block|{
name|log
argument_list|(
name|msg
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|log
argument_list|(
literal|"Restoring from "
operator|+
name|contentsFile
operator|.
name|getAbsolutePath
argument_list|()
operator|+
literal|" ...\n"
argument_list|)
expr_stmt|;
comment|// TODO subdirectories as sub-collections?
specifier|final
name|Restore
name|restore
init|=
operator|new
name|Restore
argument_list|()
decl_stmt|;
specifier|final
name|RestoreListener
name|listener
init|=
operator|new
name|ConsoleRestoreListener
argument_list|()
decl_stmt|;
name|restore
operator|.
name|restore
argument_list|(
name|listener
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|restorePassword
argument_list|,
name|contentsFile
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|zipFile
operator|!=
literal|null
condition|)
block|{
name|log
argument_list|(
literal|"Restoring from "
operator|+
name|zipFile
operator|.
name|getAbsolutePath
argument_list|()
argument_list|,
name|Project
operator|.
name|MSG_INFO
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|zipFile
operator|.
name|exists
argument_list|()
condition|)
block|{
specifier|final
name|String
name|msg
init|=
literal|"File not found: "
operator|+
name|zipFile
operator|.
name|getAbsolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|failonerror
condition|)
block|{
throw|throw
operator|(
operator|new
name|BuildException
argument_list|(
name|msg
argument_list|)
operator|)
throw|;
block|}
else|else
block|{
name|log
argument_list|(
name|msg
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|Restore
name|restore
init|=
operator|new
name|Restore
argument_list|()
decl_stmt|;
specifier|final
name|RestoreListener
name|listener
init|=
operator|new
name|ConsoleRestoreListener
argument_list|()
decl_stmt|;
name|restore
operator|.
name|restore
argument_list|(
name|listener
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|restorePassword
argument_list|,
name|zipFile
argument_list|,
name|uri
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
specifier|final
name|String
name|msg
init|=
literal|"Exception during restore: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
decl_stmt|;
if|if
condition|(
name|failonerror
condition|)
block|{
throw|throw
operator|(
operator|new
name|BuildException
argument_list|(
name|msg
argument_list|,
name|e
argument_list|)
operator|)
throw|;
block|}
else|else
block|{
name|log
argument_list|(
name|msg
argument_list|,
name|e
argument_list|,
name|Project
operator|.
name|MSG_ERR
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|public
name|DirSet
name|createDirSet
parameter_list|()
block|{
name|this
operator|.
name|dirSet
operator|=
operator|new
name|DirSet
argument_list|()
expr_stmt|;
return|return
operator|(
name|dirSet
operator|)
return|;
block|}
comment|/**      * DOCUMENT ME!      *      * @param  dir      */
specifier|public
name|void
name|setDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|this
operator|.
name|dir
operator|=
name|dir
expr_stmt|;
block|}
specifier|public
name|void
name|setFile
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|zipFile
operator|=
name|file
expr_stmt|;
block|}
specifier|public
name|void
name|setRestorePassword
parameter_list|(
name|String
name|pass
parameter_list|)
block|{
name|this
operator|.
name|restorePassword
operator|=
name|pass
expr_stmt|;
block|}
block|}
end_class

end_unit

