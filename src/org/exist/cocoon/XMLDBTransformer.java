begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * XMLDBTransformer.java - Mar 7, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cocoon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|pool
operator|.
name|Poolable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|configuration
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|configuration
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|parameters
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|environment
operator|.
name|ObjectModelHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|environment
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|environment
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|environment
operator|.
name|SourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|transformation
operator|.
name|AbstractSAXTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|xml
operator|.
name|dom
operator|.
name|DOMStreamer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XPathQueryServiceImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|DocumentFragment
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XUpdateQueryService
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_comment
comment|/**  * Transformer component for querying an XML database using the  * XMLDB API.  *   * This component provides a limited set of tags to query collections  * in the database.  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|XMLDBTransformer
extends|extends
name|AbstractSAXTransformer
implements|implements
name|Poolable
block|{
specifier|public
name|String
name|DEFAULT_DRIVER
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|public
name|String
name|DEFAULT_USER
init|=
literal|"guest"
decl_stmt|;
specifier|public
name|String
name|DEFAULT_PASSWORD
init|=
literal|"guest"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://exist-db.org/transformer/1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_ELEMENT
init|=
literal|"collection"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FOR_EACH_ELEMENT
init|=
literal|"for-each"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CURRENT_NODE_ELEMENT
init|=
literal|"current-node"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|SELECT_NODE
init|=
literal|"select-node"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RESULT_SET_ELEMENT
init|=
literal|"result-set"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|XUPDATE_ELEMENT
init|=
literal|"update"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_ELEMENT
init|=
literal|"error"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ERRMSG_ELEMENT
init|=
literal|"message"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STACKTRACE_ELEMENT
init|=
literal|"stacktrace"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"xdb:"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FATAL_ERROR
init|=
literal|"fatal"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WARNING
init|=
literal|"warn"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|INFO
init|=
literal|"info"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|IN_COLLECTION
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|IN_QUERY
init|=
literal|2
decl_stmt|;
specifier|private
name|String
name|driver
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|user
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|password
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|xpath
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
specifier|private
name|Stack
name|commandStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|isRecording
init|=
literal|false
decl_stmt|;
specifier|private
name|int
name|nesting
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|mode
init|=
literal|0
decl_stmt|;
specifier|private
name|XMLResource
name|currentResource
init|=
literal|null
decl_stmt|;
specifier|private
name|HashMap
name|namespaces
init|=
operator|new
name|HashMap
argument_list|(
literal|20
argument_list|)
decl_stmt|;
specifier|private
name|String
name|prefix
init|=
literal|null
decl_stmt|;
specifier|private
name|StringWriter
name|queryWriter
decl_stmt|;
specifier|private
name|TransformerHandler
name|queryHandler
decl_stmt|;
comment|/** The trax<code>TransformerFactory</code> used by this transformer. */
specifier|private
name|SAXTransformerFactory
name|tfactory
init|=
literal|null
decl_stmt|;
comment|/** 	 * Setup the component. Accepts parameters "driver", "user" and 	 * "password". If specified, those parameters override the default- 	 * settings or the settings specified during component setup. 	 *  	 * Example: 	 *  	 *&lt;map:transform type="xmldb"&gt; 	 *&lt;map:parameter name="driver" value="org.exist.xmldb.DatabaseImpl"/&gt; 	 *&lt;map:parameter name="user" value="guest"/&gt; 	 *&lt;map:parameter name="password" value="guest"/&gt; 	 *&lt;/map:transform&gt; 	 *  	 * @see org.apache.cocoon.sitemap.SitemapModelComponent#setup(org.apache.cocoon.environment.SourceResolver, java.util.Map, java.lang.String, org.apache.avalon.framework.parameters.Parameters) 	 */
specifier|public
name|void
name|setup
parameter_list|(
name|SourceResolver
name|resolver
parameter_list|,
name|Map
name|map
parameter_list|,
name|String
name|src
parameter_list|,
name|Parameters
name|parameters
parameter_list|)
throws|throws
name|ProcessingException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|super
operator|.
name|setup
argument_list|(
name|resolver
argument_list|,
name|map
argument_list|,
name|src
argument_list|,
name|parameters
argument_list|)
expr_stmt|;
name|driver
operator|=
name|parameters
operator|.
name|getParameter
argument_list|(
literal|"driver"
argument_list|,
name|DEFAULT_DRIVER
argument_list|)
expr_stmt|;
name|user
operator|=
name|parameters
operator|.
name|getParameter
argument_list|(
literal|"user"
argument_list|,
name|DEFAULT_USER
argument_list|)
expr_stmt|;
name|password
operator|=
name|parameters
operator|.
name|getParameter
argument_list|(
literal|"password"
argument_list|,
name|DEFAULT_PASSWORD
argument_list|)
expr_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ProcessingException
argument_list|(
literal|"no request object found"
argument_list|)
throw|;
block|}
name|setupDatabase
argument_list|()
expr_stmt|;
block|}
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qname
parameter_list|,
name|Attributes
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|queryHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|queryHandler
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isRecording
condition|)
block|{
if|if
condition|(
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|&&
name|FOR_EACH_ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
operator|++
name|nesting
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
if|if
condition|(
name|COLLECTION_ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|prefix
operator|=
operator|(
name|qname
operator|.
name|endsWith
argument_list|(
name|localName
argument_list|)
condition|?
name|qname
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|qname
operator|.
name|length
argument_list|()
operator|-
name|localName
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|PREFIX
operator|)
expr_stmt|;
name|startCollection
argument_list|(
name|attribs
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|FOR_EACH_ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|startForEach
argument_list|(
name|attribs
argument_list|)
expr_stmt|;
if|else if
condition|(
name|CURRENT_NODE_ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|startCurrent
argument_list|(
name|attribs
argument_list|)
expr_stmt|;
if|else if
condition|(
name|SELECT_NODE
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|startSelectNode
argument_list|(
name|attribs
argument_list|)
expr_stmt|;
if|else if
condition|(
name|XUPDATE_ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|startXUpdate
argument_list|(
name|attribs
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|currentResource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|AttributesImpl
name|a
init|=
operator|new
name|AttributesImpl
argument_list|(
name|attribs
argument_list|)
decl_stmt|;
name|a
operator|.
name|addAttribute
argument_list|(
name|NAMESPACE
argument_list|,
literal|"document-id"
argument_list|,
name|prefix
operator|+
literal|"document-id"
argument_list|,
literal|"CDATA"
argument_list|,
name|currentResource
operator|.
name|getDocumentId
argument_list|()
argument_list|)
expr_stmt|;
name|a
operator|.
name|addAttribute
argument_list|(
name|NAMESPACE
argument_list|,
literal|"collection"
argument_list|,
name|prefix
operator|+
literal|"collection"
argument_list|,
literal|"CDATA"
argument_list|,
name|currentResource
operator|.
name|getParentCollection
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|currentResource
operator|=
literal|null
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
block|}
block|}
else|else
name|super
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|protected
name|void
name|startCollection
parameter_list|(
name|Attributes
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|uri
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|FATAL_ERROR
argument_list|,
literal|"element collection requires an uri-attribute"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|pUser
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|String
name|pPassword
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
comment|// use default user and password if not specified
if|if
condition|(
name|pUser
operator|==
literal|null
condition|)
name|pUser
operator|=
name|user
expr_stmt|;
if|if
condition|(
name|pPassword
operator|==
literal|null
condition|)
name|pPassword
operator|=
name|password
expr_stmt|;
try|try
block|{
name|collection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|,
name|pUser
argument_list|,
name|pPassword
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"collection "
operator|+
name|uri
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"failed to retrieve collection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|mode
operator|=
name|IN_COLLECTION
expr_stmt|;
block|}
specifier|protected
name|void
name|startCurrent
parameter_list|(
name|Attributes
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|commandStack
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ForEach
name|each
init|=
operator|(
name|ForEach
operator|)
name|commandStack
operator|.
name|peek
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|each
operator|.
name|currentResource
operator|!=
literal|null
condition|)
name|each
operator|.
name|currentResource
operator|.
name|getContentAsSAX
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
block|}
block|}
comment|/**    * Helper for TransformerFactory.    */
specifier|protected
name|SAXTransformerFactory
name|getTransformerFactory
parameter_list|()
block|{
if|if
condition|(
name|tfactory
operator|==
literal|null
condition|)
block|{
name|tfactory
operator|=
operator|(
name|SAXTransformerFactory
operator|)
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
expr_stmt|;
comment|//tfactory.setErrorListener(new TraxErrorHandler(getLogger()));
block|}
return|return
name|tfactory
return|;
block|}
specifier|protected
name|void
name|startXUpdate
parameter_list|(
name|Attributes
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|FATAL_ERROR
argument_list|,
literal|"no collection selected"
argument_list|)
expr_stmt|;
return|return;
block|}
name|queryWriter
operator|=
operator|new
name|StringWriter
argument_list|(
literal|256
argument_list|)
expr_stmt|;
try|try
block|{
name|this
operator|.
name|queryHandler
operator|=
name|getTransformerFactory
argument_list|()
operator|.
name|newTransformerHandler
argument_list|()
expr_stmt|;
name|this
operator|.
name|queryHandler
operator|.
name|setResult
argument_list|(
operator|new
name|StreamResult
argument_list|(
name|queryWriter
argument_list|)
argument_list|)
expr_stmt|;
comment|//this.queryHandler.getTransformer().setOutputProperties(format);
block|}
catch|catch
parameter_list|(
name|TransformerConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Failed to get transformer handler"
argument_list|,
name|e
argument_list|)
throw|;
block|}
comment|// Start query document
name|this
operator|.
name|queryHandler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|Iterator
name|i
init|=
name|namespaces
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|queryHandler
operator|.
name|startPrefixMapping
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|endXUpdate
parameter_list|()
throws|throws
name|SAXException
block|{
try|try
block|{
name|XUpdateQueryService
name|service
init|=
operator|(
name|XUpdateQueryService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|long
name|count
init|=
name|service
operator|.
name|update
argument_list|(
name|queryWriter
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
name|FATAL_ERROR
argument_list|,
literal|"Unable to perform update: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|startSelectNode
parameter_list|(
name|Attributes
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|FATAL_ERROR
argument_list|,
literal|"no collection selected"
argument_list|)
expr_stmt|;
return|return;
block|}
name|XMLResource
name|resource
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|commandStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ForEach
name|last
init|=
operator|(
name|ForEach
operator|)
name|commandStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|resource
operator|=
name|last
operator|.
name|currentResource
expr_stmt|;
block|}
name|xpath
operator|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
if|if
condition|(
name|xpath
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|FATAL_ERROR
argument_list|,
literal|"attribute 'query' is missing"
argument_list|)
expr_stmt|;
return|return;
block|}
name|String
name|pHighlightElementMatches
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"match-tagging-elements"
argument_list|)
decl_stmt|;
name|boolean
name|highlightElementMatches
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|pHighlightElementMatches
operator|!=
literal|null
condition|)
name|highlightElementMatches
operator|=
name|pHighlightElementMatches
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|pHighlightAttributeMatches
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"match-tagging-attributes"
argument_list|)
decl_stmt|;
name|boolean
name|highlightAttributeMatches
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pHighlightAttributeMatches
operator|!=
literal|null
condition|)
name|highlightAttributeMatches
operator|=
name|pHighlightAttributeMatches
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|XPathQueryServiceImpl
name|service
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|String
name|highlighting
init|=
literal|"none"
decl_stmt|;
if|if
condition|(
name|highlightElementMatches
operator|&&
name|highlightAttributeMatches
condition|)
name|highlighting
operator|=
literal|"both"
expr_stmt|;
if|else if
condition|(
name|highlightElementMatches
condition|)
name|highlighting
operator|=
literal|"elements"
expr_stmt|;
if|else if
condition|(
name|highlightAttributeMatches
condition|)
name|highlighting
operator|=
literal|"attributes"
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
name|highlighting
argument_list|)
expr_stmt|;
name|setQueryContext
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|ResourceSet
name|queryResult
init|=
operator|(
name|resource
operator|==
literal|null
operator|)
condition|?
name|service
operator|.
name|query
argument_list|(
name|xpath
argument_list|)
else|:
name|service
operator|.
name|query
argument_list|(
name|resource
argument_list|,
name|xpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|queryResult
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"query returned null"
argument_list|)
expr_stmt|;
return|return;
block|}
name|long
name|len
init|=
name|queryResult
operator|.
name|getSize
argument_list|()
decl_stmt|;
for|for
control|(
name|long
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
name|XMLResource
name|res
init|=
operator|(
name|XMLResource
operator|)
name|queryResult
operator|.
name|getResource
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|res
operator|.
name|getContentAsSAX
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"error during query-execution"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|startForEach
parameter_list|(
name|Attributes
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|FATAL_ERROR
argument_list|,
literal|"no collection selected"
argument_list|)
expr_stmt|;
return|return;
block|}
name|ForEach
name|each
init|=
operator|new
name|ForEach
argument_list|()
decl_stmt|;
name|XMLResource
name|resource
init|=
literal|null
decl_stmt|;
name|boolean
name|nested
init|=
operator|!
name|commandStack
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
name|nested
condition|)
block|{
name|ForEach
name|last
init|=
operator|(
name|ForEach
operator|)
name|commandStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|resource
operator|=
name|last
operator|.
name|currentResource
expr_stmt|;
block|}
name|commandStack
operator|.
name|push
argument_list|(
name|each
argument_list|)
expr_stmt|;
comment|// process attributes
name|xpath
operator|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
if|if
condition|(
name|xpath
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|FATAL_ERROR
argument_list|,
literal|"attribute 'query' is missing"
argument_list|)
expr_stmt|;
return|return;
block|}
name|each
operator|.
name|query
operator|=
name|xpath
expr_stmt|;
name|String
name|sortExpr
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"sort-by"
argument_list|)
decl_stmt|;
name|String
name|pFrom
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"from"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pFrom
operator|!=
literal|null
condition|)
try|try
block|{
name|each
operator|.
name|from
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|pFrom
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"attribute 'from' requires numeric value"
argument_list|)
expr_stmt|;
block|}
name|String
name|pTo
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"to"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pTo
operator|!=
literal|null
condition|)
try|try
block|{
name|each
operator|.
name|to
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|pTo
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"attribute 'to' requires numeric value"
argument_list|)
expr_stmt|;
block|}
name|String
name|pHighlightElementMatches
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"match-tagging-elements"
argument_list|)
decl_stmt|;
name|boolean
name|highlightElementMatches
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|pHighlightElementMatches
operator|!=
literal|null
condition|)
name|highlightElementMatches
operator|=
name|pHighlightElementMatches
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|pHighlightAttributeMatches
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"match-tagging-attributes"
argument_list|)
decl_stmt|;
name|boolean
name|highlightAttributeMatches
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pHighlightAttributeMatches
operator|!=
literal|null
condition|)
name|highlightAttributeMatches
operator|=
name|pHighlightAttributeMatches
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|String
name|pSession
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"use-session"
argument_list|)
decl_stmt|;
name|boolean
name|createSession
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pSession
operator|!=
literal|null
condition|)
name|createSession
operator|=
name|pSession
operator|.
name|equals
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
name|Session
name|session
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|createSession
condition|)
name|session
operator|=
name|request
operator|.
name|getSession
argument_list|(
literal|true
argument_list|)
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
try|try
block|{
name|ResourceSet
name|queryResult
init|=
literal|null
decl_stmt|;
name|XPathQueryServiceImpl
name|service
init|=
operator|(
name|XPathQueryServiceImpl
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|Serializer
operator|.
name|GENERATE_DOC_EVENTS
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|String
name|highlighting
init|=
literal|"none"
decl_stmt|;
if|if
condition|(
name|highlightElementMatches
operator|&&
name|highlightAttributeMatches
condition|)
name|highlighting
operator|=
literal|"both"
expr_stmt|;
if|else if
condition|(
name|highlightElementMatches
condition|)
name|highlighting
operator|=
literal|"elements"
expr_stmt|;
if|else if
condition|(
name|highlightAttributeMatches
condition|)
name|highlighting
operator|=
literal|"attributes"
expr_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|HIGHLIGHT_MATCHES
argument_list|,
name|highlighting
argument_list|)
expr_stmt|;
name|setQueryContext
argument_list|(
name|service
argument_list|)
expr_stmt|;
comment|// check if query result is already stored in the session
if|if
condition|(
name|createSession
operator|&&
name|resource
operator|==
literal|null
condition|)
name|queryResult
operator|=
operator|(
name|ResourceSet
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|xpath
argument_list|)
expr_stmt|;
if|if
condition|(
name|queryResult
operator|==
literal|null
condition|)
block|{
name|queryResult
operator|=
operator|(
name|resource
operator|==
literal|null
operator|)
condition|?
name|service
operator|.
name|query
argument_list|(
name|xpath
argument_list|,
name|sortExpr
argument_list|)
else|:
name|service
operator|.
name|query
argument_list|(
name|resource
argument_list|,
name|xpath
argument_list|,
name|sortExpr
argument_list|)
expr_stmt|;
if|if
condition|(
name|createSession
condition|)
name|session
operator|.
name|setAttribute
argument_list|(
name|xpath
argument_list|,
name|queryResult
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|queryResult
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"query returned null"
argument_list|)
expr_stmt|;
return|return;
block|}
name|each
operator|.
name|queryResult
operator|=
name|queryResult
expr_stmt|;
name|int
name|size
init|=
operator|(
name|int
operator|)
name|each
operator|.
name|queryResult
operator|.
name|getSize
argument_list|()
decl_stmt|;
if|if
condition|(
name|each
operator|.
name|from
operator|<
literal|0
condition|)
name|each
operator|.
name|from
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|each
operator|.
name|to
operator|<
literal|0
operator|||
name|each
operator|.
name|to
operator|>=
name|size
condition|)
name|each
operator|.
name|to
operator|=
name|size
operator|-
literal|1
expr_stmt|;
if|if
condition|(
operator|!
name|nested
condition|)
block|{
name|AttributesImpl
name|atts
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|atts
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"count"
argument_list|,
literal|"count"
argument_list|,
literal|"CDATA"
argument_list|,
name|queryResult
operator|==
literal|null
condition|?
literal|"0"
else|:
name|Long
operator|.
name|toString
argument_list|(
name|queryResult
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|atts
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"xpath"
argument_list|,
literal|"xpath"
argument_list|,
literal|"CDATA"
argument_list|,
name|xpath
argument_list|)
expr_stmt|;
name|atts
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"query-time"
argument_list|,
literal|"query-time"
argument_list|,
literal|"CDATA"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|atts
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"from"
argument_list|,
literal|"from"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|each
operator|.
name|from
argument_list|)
argument_list|)
expr_stmt|;
name|atts
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"to"
argument_list|,
literal|"to"
argument_list|,
literal|"CDATA"
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|each
operator|.
name|to
argument_list|)
argument_list|)
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
name|RESULT_SET_ELEMENT
argument_list|,
name|prefix
operator|+
name|RESULT_SET_ELEMENT
argument_list|,
name|atts
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
name|FATAL_ERROR
argument_list|,
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|commandStack
operator|.
name|pop
argument_list|()
expr_stmt|;
return|return;
block|}
name|nesting
operator|++
expr_stmt|;
name|isRecording
operator|=
literal|true
expr_stmt|;
name|startRecording
argument_list|()
expr_stmt|;
block|}
specifier|protected
name|void
name|setupDatabase
parameter_list|()
throws|throws
name|ProcessingException
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProcessingException
argument_list|(
literal|"failed to setup database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|reportError
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|SAXException
block|{
name|reportError
argument_list|(
name|type
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|reportError
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|cause
parameter_list|)
throws|throws
name|SAXException
block|{
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"type"
argument_list|,
literal|"type"
argument_list|,
literal|"CDATA"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|super
operator|.
name|startPrefixMapping
argument_list|(
name|PREFIX
argument_list|,
name|NAMESPACE
argument_list|)
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
name|ERROR_ELEMENT
argument_list|,
name|PREFIX
operator|+
name|ERROR_ELEMENT
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
name|ERRMSG_ELEMENT
argument_list|,
name|PREFIX
operator|+
name|ERRMSG_ELEMENT
argument_list|,
operator|new
name|AttributesImpl
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|message
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|message
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
name|ERRMSG_ELEMENT
argument_list|,
name|PREFIX
operator|+
name|ERRMSG_ELEMENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|)
decl_stmt|;
name|cause
operator|.
name|printStackTrace
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|String
name|trace
init|=
name|cause
operator|.
name|toString
argument_list|()
decl_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
name|STACKTRACE_ELEMENT
argument_list|,
name|PREFIX
operator|+
name|STACKTRACE_ELEMENT
argument_list|,
operator|new
name|AttributesImpl
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|trace
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|trace
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
name|STACKTRACE_ELEMENT
argument_list|,
name|PREFIX
operator|+
name|STACKTRACE_ELEMENT
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
name|ERROR_ELEMENT
argument_list|,
name|PREFIX
operator|+
name|ERROR_ELEMENT
argument_list|)
expr_stmt|;
name|super
operator|.
name|endPrefixMapping
argument_list|(
name|PREFIX
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|loc
parameter_list|,
name|String
name|raw
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|this
operator|.
name|queryHandler
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|&&
name|XUPDATE_ELEMENT
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
operator|)
condition|)
block|{
name|this
operator|.
name|queryHandler
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|loc
argument_list|,
name|raw
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|&&
name|XUPDATE_ELEMENT
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
condition|)
block|{
name|Iterator
name|i
init|=
name|namespaces
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|Map
operator|.
name|Entry
name|entry
init|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|this
operator|.
name|queryHandler
operator|.
name|endPrefixMapping
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|endXUpdate
argument_list|()
expr_stmt|;
name|this
operator|.
name|queryHandler
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isRecording
condition|)
block|{
if|if
condition|(
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
operator|&&
name|FOR_EACH_ELEMENT
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
operator|&&
operator|--
name|nesting
operator|==
literal|0
condition|)
name|endForEach
argument_list|()
expr_stmt|;
else|else
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|loc
argument_list|,
name|raw
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
if|if
condition|(
name|COLLECTION_ELEMENT
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
condition|)
block|{
name|collection
operator|=
literal|null
expr_stmt|;
name|mode
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|FOR_EACH_ELEMENT
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
condition|)
block|{
name|endForEach
argument_list|()
expr_stmt|;
block|}
return|return;
block|}
else|else
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|loc
argument_list|,
name|raw
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|endForEach
parameter_list|()
throws|throws
name|SAXException
block|{
name|isRecording
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|commandStack
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|ForEach
name|each
init|=
operator|(
name|ForEach
operator|)
name|commandStack
operator|.
name|peek
argument_list|()
decl_stmt|;
name|DocumentFragment
name|fragment
init|=
name|endRecording
argument_list|()
decl_stmt|;
if|if
condition|(
name|each
operator|.
name|queryResult
operator|==
literal|null
condition|)
return|return;
name|DOMStreamer
name|streamer
init|=
operator|new
name|DOMStreamer
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|each
operator|.
name|current
operator|=
name|each
operator|.
name|from
init|;
name|each
operator|.
name|current
operator|<=
name|each
operator|.
name|to
condition|;
operator|++
name|each
operator|.
name|current
control|)
block|{
try|try
block|{
name|each
operator|.
name|currentResource
operator|=
operator|(
name|XMLResource
operator|)
name|each
operator|.
name|queryResult
operator|.
name|getResource
argument_list|(
name|each
operator|.
name|current
argument_list|)
expr_stmt|;
name|currentResource
operator|=
name|each
operator|.
name|currentResource
expr_stmt|;
name|streamer
operator|.
name|stream
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"error while retrieving resource "
operator|+
name|each
operator|.
name|current
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
name|commandStack
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|commandStack
operator|.
name|isEmpty
argument_list|()
condition|)
name|super
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
name|RESULT_SET_ELEMENT
argument_list|,
name|prefix
operator|+
name|RESULT_SET_ELEMENT
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.avalon.excalibur.pool.Recyclable#recycle() 	 */
specifier|public
name|void
name|recycle
parameter_list|()
block|{
name|collection
operator|=
literal|null
expr_stmt|;
name|mode
operator|=
literal|0
expr_stmt|;
name|xpath
operator|=
literal|null
expr_stmt|;
name|commandStack
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nesting
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|p0
parameter_list|,
name|int
name|p1
parameter_list|,
name|int
name|p2
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|queryHandler
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|queryHandler
operator|.
name|characters
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|super
operator|.
name|characters
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
class|class
name|ForEach
block|{
name|ResourceSet
name|queryResult
init|=
literal|null
decl_stmt|;
name|String
name|query
init|=
literal|null
decl_stmt|;
name|int
name|from
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|to
init|=
operator|-
literal|1
decl_stmt|;
name|XMLResource
name|currentResource
init|=
literal|null
decl_stmt|;
name|long
name|current
init|=
literal|0
decl_stmt|;
specifier|public
name|ForEach
parameter_list|()
block|{
block|}
block|}
comment|/** 	 * Try to read configuration parameters from the component setup. 	 *  	 * Example: 	 *  	 *&lt;map:transformer name="xmldb" src="org.exist.cocoon.XMLDBTransformer"&gt; 	 *&lt;driver&gt;org.exist.xmldb.DatabaseImpl&lt;/driver&gt; 	 *&lt;user&gt;guest&lt;/user&gt; 	 *&lt;password&gt;guest&lt;/password&gt; 	 *&lt;/map:transformer&gt; 	 *  	 * will set the default driver, user and password. Note that these 	 * values may also be set as parameters in the pipeline. 	 *  	 * @see org.apache.avalon.framework.configuration.Configurable#configure(org.apache.avalon.framework.configuration.Configuration) 	 */
specifier|public
name|void
name|configure
parameter_list|(
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
operator|.
name|configure
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|Configuration
name|child
init|=
name|configuration
operator|.
name|getChild
argument_list|(
literal|"user"
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
name|DEFAULT_USER
operator|=
name|child
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|child
operator|=
name|configuration
operator|.
name|getChild
argument_list|(
literal|"password"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
name|DEFAULT_PASSWORD
operator|=
name|child
operator|.
name|getValue
argument_list|()
expr_stmt|;
name|child
operator|=
name|configuration
operator|.
name|getChild
argument_list|(
literal|"driver"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|!=
literal|null
condition|)
name|DEFAULT_DRIVER
operator|=
name|child
operator|.
name|getValue
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#endPrefixMapping(java.lang.String) 	 */
specifier|public
name|void
name|endPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|)
throws|throws
name|SAXException
block|{
name|namespaces
operator|.
name|remove
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|super
operator|.
name|endPrefixMapping
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#startPrefixMapping(java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|startPrefixMapping
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|namespaceURI
parameter_list|)
throws|throws
name|SAXException
block|{
name|namespaces
operator|.
name|put
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
name|super
operator|.
name|startPrefixMapping
argument_list|(
name|prefix
argument_list|,
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setQueryContext
parameter_list|(
name|XPathQueryService
name|service
parameter_list|)
block|{
name|Map
operator|.
name|Entry
name|entry
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaces
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|entry
operator|=
operator|(
name|Map
operator|.
name|Entry
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|getKey
argument_list|()
operator|==
literal|null
operator|||
name|entry
operator|.
name|getValue
argument_list|()
operator|==
literal|null
condition|)
continue|continue;
try|try
block|{
name|service
operator|.
name|setNamespace
argument_list|(
operator|(
name|String
operator|)
name|entry
operator|.
name|getKey
argument_list|()
argument_list|,
operator|(
name|String
operator|)
name|entry
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
block|}
block|}
block|}
block|}
end_class

end_unit

