begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * XMLDBTransformer.java - Mar 7, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cocoon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|excalibur
operator|.
name|pool
operator|.
name|Poolable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|parameters
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|ProcessingException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|environment
operator|.
name|SourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|transformation
operator|.
name|AbstractSAXTransformer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_comment
comment|/**  * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|XMLDBTransformer
extends|extends
name|AbstractSAXTransformer
implements|implements
name|Poolable
block|{
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_DRIVER
init|=
literal|"org.exist.xmldb.DatabaseImpl"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|DEFAULT_USER
init|=
literal|"guest"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|NAMESPACE
init|=
literal|"http://exist-db/transformer/1.0"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|COLLECTION_ELEMENT
init|=
literal|"collection"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|EXEC_QUERY_ELEMENT
init|=
literal|"execute-query"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|QUERY_ELEMENT
init|=
literal|"query"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|RESULT_ELEMENT
init|=
literal|"result-set"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ERROR_ELEMENT
init|=
literal|"error"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|ERRMSG_ELEMENT
init|=
literal|"message"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|STACKTRACE_ELEMENT
init|=
literal|"stacktrace"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|FATAL_ERROR
init|=
literal|"fatal"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|WARNING
init|=
literal|"warn"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|IN_COLLECTION
init|=
literal|1
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|IN_QUERY
init|=
literal|2
decl_stmt|;
specifier|private
name|String
name|driver
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|user
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|password
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|xpath
init|=
literal|null
decl_stmt|;
specifier|private
name|StringBuffer
name|buffer
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
specifier|private
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
specifier|private
name|int
name|mode
init|=
literal|0
decl_stmt|;
specifier|private
name|boolean
name|inElement
init|=
literal|false
decl_stmt|;
comment|/* (non-Javadoc) 	 * @see org.apache.cocoon.sitemap.SitemapModelComponent#setup(org.apache.cocoon.environment.SourceResolver, java.util.Map, java.lang.String, org.apache.avalon.framework.parameters.Parameters) 	 */
specifier|public
name|void
name|setup
parameter_list|(
name|SourceResolver
name|resolver
parameter_list|,
name|Map
name|map
parameter_list|,
name|String
name|src
parameter_list|,
name|Parameters
name|parameters
parameter_list|)
throws|throws
name|ProcessingException
throws|,
name|SAXException
throws|,
name|IOException
block|{
name|driver
operator|=
name|parameters
operator|.
name|getParameter
argument_list|(
literal|"driver"
argument_list|,
name|DEFAULT_DRIVER
argument_list|)
expr_stmt|;
name|user
operator|=
name|parameters
operator|.
name|getParameter
argument_list|(
literal|"user"
argument_list|,
name|DEFAULT_USER
argument_list|)
expr_stmt|;
name|password
operator|=
name|parameters
operator|.
name|getParameter
argument_list|(
literal|"password"
argument_list|,
name|DEFAULT_USER
argument_list|)
expr_stmt|;
name|setupDatabase
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes) 	 */
specifier|public
name|void
name|startElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|localName
parameter_list|,
name|String
name|qname
parameter_list|,
name|Attributes
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
if|if
condition|(
name|COLLECTION_ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|startCollection
argument_list|(
name|attribs
argument_list|)
expr_stmt|;
if|else if
condition|(
name|EXEC_QUERY_ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|startQuery
argument_list|(
name|attribs
argument_list|)
expr_stmt|;
if|else if
condition|(
name|QUERY_ELEMENT
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
name|inElement
operator|=
literal|true
expr_stmt|;
block|}
else|else
name|super
operator|.
name|startElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qname
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|startCollection
parameter_list|(
name|Attributes
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
name|String
name|uri
init|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"uri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|uri
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|FATAL_ERROR
argument_list|,
literal|"element collection requires an uri-attribute"
argument_list|)
expr_stmt|;
return|return;
block|}
try|try
block|{
name|collection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|,
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"collection "
operator|+
name|uri
operator|+
literal|" not found"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"failed to retrieve collection"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
name|mode
operator|=
name|IN_COLLECTION
expr_stmt|;
block|}
specifier|protected
name|void
name|startQuery
parameter_list|(
name|Attributes
name|attribs
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|mode
operator|!=
name|IN_COLLECTION
condition|)
return|return;
name|xpath
operator|=
name|attribs
operator|.
name|getValue
argument_list|(
literal|"query"
argument_list|)
expr_stmt|;
name|mode
operator|=
name|IN_QUERY
expr_stmt|;
block|}
specifier|protected
name|void
name|setupDatabase
parameter_list|()
throws|throws
name|ProcessingException
block|{
try|try
block|{
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|driver
argument_list|)
decl_stmt|;
name|Database
name|database
init|=
operator|(
name|Database
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|database
operator|.
name|setProperty
argument_list|(
literal|"create-database"
argument_list|,
literal|"true"
argument_list|)
expr_stmt|;
name|DatabaseManager
operator|.
name|registerDatabase
argument_list|(
name|database
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ProcessingException
argument_list|(
literal|"failed to setup database"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|reportError
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|message
parameter_list|)
throws|throws
name|SAXException
block|{
name|reportError
argument_list|(
name|type
argument_list|,
name|message
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|reportError
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|message
parameter_list|,
name|Exception
name|cause
parameter_list|)
throws|throws
name|SAXException
block|{
name|AttributesImpl
name|attribs
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|attribs
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"type"
argument_list|,
literal|"type"
argument_list|,
literal|"CDATA"
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
name|ERROR_ELEMENT
argument_list|,
name|ERROR_ELEMENT
argument_list|,
name|attribs
argument_list|)
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
name|ERRMSG_ELEMENT
argument_list|,
name|ERRMSG_ELEMENT
argument_list|,
operator|new
name|AttributesImpl
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|message
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|message
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
name|ERRMSG_ELEMENT
argument_list|,
name|ERRMSG_ELEMENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|cause
operator|!=
literal|null
condition|)
block|{
name|PrintWriter
name|writer
init|=
operator|new
name|PrintWriter
argument_list|(
operator|new
name|StringWriter
argument_list|()
argument_list|)
decl_stmt|;
name|cause
operator|.
name|printStackTrace
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|String
name|trace
init|=
name|cause
operator|.
name|toString
argument_list|()
decl_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
name|STACKTRACE_ELEMENT
argument_list|,
name|STACKTRACE_ELEMENT
argument_list|,
operator|new
name|AttributesImpl
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|trace
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|trace
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|super
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
name|STACKTRACE_ELEMENT
argument_list|,
name|STACKTRACE_ELEMENT
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
name|ERROR_ELEMENT
argument_list|,
name|ERROR_ELEMENT
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String) 	 */
specifier|public
name|void
name|endElement
parameter_list|(
name|String
name|uri
parameter_list|,
name|String
name|loc
parameter_list|,
name|String
name|raw
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|NAMESPACE
operator|.
name|equals
argument_list|(
name|uri
argument_list|)
condition|)
block|{
if|if
condition|(
name|COLLECTION_ELEMENT
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
condition|)
block|{
name|collection
operator|=
literal|null
expr_stmt|;
name|mode
operator|=
literal|0
expr_stmt|;
block|}
if|else if
condition|(
name|EXEC_QUERY_ELEMENT
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
condition|)
block|{
try|try
block|{
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|setProperty
argument_list|(
literal|"sax-document-events"
argument_list|,
literal|"false"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Query: "
operator|+
name|xpath
argument_list|)
expr_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|xpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|==
literal|null
condition|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"query returned null as result"
argument_list|)
expr_stmt|;
return|return;
block|}
name|AttributesImpl
name|at
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|at
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"count"
argument_list|,
literal|"count"
argument_list|,
literal|"CDATA"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|result
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|at
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
literal|"xpath"
argument_list|,
literal|"xpath"
argument_list|,
literal|"CDATA"
argument_list|,
name|xpath
argument_list|)
expr_stmt|;
name|super
operator|.
name|startElement
argument_list|(
name|NAMESPACE
argument_list|,
name|RESULT_ELEMENT
argument_list|,
name|RESULT_ELEMENT
argument_list|,
name|at
argument_list|)
expr_stmt|;
name|XMLResource
name|resource
decl_stmt|;
for|for
control|(
name|ResourceIterator
name|i
init|=
name|result
operator|.
name|getIterator
argument_list|()
init|;
name|i
operator|.
name|hasMoreResources
argument_list|()
condition|;
control|)
block|{
name|resource
operator|=
operator|(
name|XMLResource
operator|)
name|i
operator|.
name|nextResource
argument_list|()
expr_stmt|;
name|resource
operator|.
name|getContentAsSAX
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|super
operator|.
name|endElement
argument_list|(
name|NAMESPACE
argument_list|,
name|RESULT_ELEMENT
argument_list|,
name|RESULT_ELEMENT
argument_list|)
expr_stmt|;
name|mode
operator|=
name|IN_COLLECTION
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|reportError
argument_list|(
name|WARNING
argument_list|,
literal|"database error"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|QUERY_ELEMENT
operator|.
name|equals
argument_list|(
name|loc
argument_list|)
condition|)
block|{
name|xpath
operator|=
name|buffer
operator|.
name|toString
argument_list|()
expr_stmt|;
name|inElement
operator|=
literal|false
expr_stmt|;
block|}
return|return;
block|}
else|else
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|loc
argument_list|,
name|raw
argument_list|)
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.avalon.excalibur.pool.Recyclable#recycle() 	 */
specifier|public
name|void
name|recycle
parameter_list|()
block|{
name|collection
operator|=
literal|null
expr_stmt|;
name|mode
operator|=
literal|0
expr_stmt|;
name|inElement
operator|=
literal|false
expr_stmt|;
name|xpath
operator|=
literal|null
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.xml.sax.ContentHandler#characters(char[], int, int) 	 */
specifier|public
name|void
name|characters
parameter_list|(
name|char
index|[]
name|p0
parameter_list|,
name|int
name|p1
parameter_list|,
name|int
name|p2
parameter_list|)
throws|throws
name|SAXException
block|{
name|super
operator|.
name|characters
argument_list|(
name|p0
argument_list|,
name|p1
argument_list|,
name|p2
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

