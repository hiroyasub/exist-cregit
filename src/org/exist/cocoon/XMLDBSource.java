begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Extended and slightly adopted version of the original XMLDBSource found in Apache Cocoon.  * The original license is:  *  *  Copyright 1999-2004 The Apache Software Foundation.  *  * Licensed under the Apache License, Version 2.0 (the "License");  * you may not use this file except in compliance with the License.  * You may obtain a copy of the License at  *  *      http://www.apache.org/licenses/LICENSE-2.0  *  * Unless required by applicable law or agreed to in writing, software  * distributed under the License is distributed on an "AS IS" BASIS,  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  * See the License for the specific language governing permissions and  * limitations under the License.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cocoon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|SAXTransformerFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|sax
operator|.
name|TransformerHandler
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|stream
operator|.
name|StreamResult
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|logger
operator|.
name|AbstractLogEnabled
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|logger
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|CascadingIOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|xml
operator|.
name|IncludeXMLConsumer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|ModifiableTraversableSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|SourceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|SourceNotFoundException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|SourceUtil
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|SourceValidity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|source
operator|.
name|impl
operator|.
name|validity
operator|.
name|TimeStampValidity
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLizable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|external
operator|.
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|io
operator|.
name|output
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|CollectionImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|ExtendedResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|helpers
operator|.
name|AttributesImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|BinaryResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_comment
comment|/**  * This class implements the xmldb:// pseudo-protocol and allows to get XML  * content from an XML:DB enabled XML database.  *  *<p>  * This class starts on   *<a   *  href="http://svn.apache.org/viewcvs.cgi/cocoon/blocks/xmldb/trunk/java/org/apache/cocoon/components/source/impl/XMLDBSource.java?rev=359757&view=markup"/  *>XMLDBSource</a> from Cocoon project.  * Some improvments may be useful for Cocoon, some others may be Exist specific.  * Interesting new features :  *</p>  *   *<ul>  *<li>cacheable for a resource read</li>  *<li>handle userinfo urls like<...//user:password@host/...> (for read)</li>   *<li>setContentAsDOM() to avoid encodings problem when writing a resource</li>  *<li>resourceToSAX() plug a lexical handler to get comments of the XML document</li>  *<li>getCollection(), getResource() (xmldb objects)</li>  *<li>getUser(), getPassword()</li>  *</ul>  *   * @version CVS $Id$  */
end_comment

begin_class
specifier|public
class|class
name|XMLDBSource
extends|extends
name|AbstractLogEnabled
implements|implements
name|ModifiableTraversableSource
implements|,
name|XMLizable
block|{
comment|//
comment|// Static Strings used for XML Collection representation
comment|//
comment|/** Source namespace */
specifier|public
specifier|static
specifier|final
name|String
name|URI
init|=
literal|"http://apache.org/cocoon/xmldb/1.0"
decl_stmt|;
comment|/** Source prefix */
specifier|public
specifier|static
specifier|final
name|String
name|PREFIX
init|=
literal|"db"
decl_stmt|;
comment|/** Root element<code>&lt;collections&gt;</code> */
specifier|protected
specifier|static
specifier|final
name|String
name|COLLECTIONS
init|=
literal|"collections"
decl_stmt|;
comment|/** Root element<code>&lt;xmldb:collections&gt;</code> (raw name) */
specifier|protected
specifier|static
specifier|final
name|String
name|QCOLLECTIONS
init|=
name|PREFIX
operator|+
literal|":"
operator|+
name|COLLECTIONS
decl_stmt|;
comment|/** Attribute<code>resources</code> on the root element indicates count of resources in the collection */
specifier|protected
specifier|static
specifier|final
name|String
name|RESOURCE_COUNT_ATTR
init|=
literal|"resources"
decl_stmt|;
comment|/** Attribute<code>collections</code> on the root element indicates count of collections in the collection */
specifier|protected
specifier|static
specifier|final
name|String
name|COLLECTION_COUNT_ATTR
init|=
literal|"collections"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|COLLECTION_BASE_ATTR
init|=
literal|"base"
decl_stmt|;
comment|/** Element<code>&lt;collection&gt;</code> */
specifier|protected
specifier|static
specifier|final
name|String
name|COLLECTION
init|=
literal|"collection"
decl_stmt|;
comment|/** Element<code>&lt;xmldb:collection&gt;</code> (raw name) */
specifier|protected
specifier|static
specifier|final
name|String
name|QCOLLECTION
init|=
name|PREFIX
operator|+
literal|":"
operator|+
name|COLLECTION
decl_stmt|;
comment|/** Element<code>&lt;resource&gt;</code> */
specifier|protected
specifier|static
specifier|final
name|String
name|RESOURCE
init|=
literal|"resource"
decl_stmt|;
comment|/** Element<code>&lt;resource&gt;</code> (raw name) */
specifier|protected
specifier|static
specifier|final
name|String
name|QRESOURCE
init|=
name|PREFIX
operator|+
literal|":"
operator|+
name|RESOURCE
decl_stmt|;
comment|/** Attribute<code>name</code> on the collection/resource element */
specifier|protected
specifier|static
specifier|final
name|String
name|NAME_ATTR
init|=
literal|"name"
decl_stmt|;
comment|/** Root element<code>&lt;results&gt;</code> */
specifier|protected
specifier|static
specifier|final
name|String
name|RESULTSET
init|=
literal|"results"
decl_stmt|;
comment|/** Root element<code>&lt;xmldb:results&gt;</code> (raw name) */
specifier|protected
specifier|static
specifier|final
name|String
name|QRESULTSET
init|=
name|PREFIX
operator|+
literal|":"
operator|+
name|RESULTSET
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|QUERY_ATTR
init|=
literal|"query"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|RESULTS_COUNT_ATTR
init|=
literal|"resources"
decl_stmt|;
comment|/** Element<code>&lt;result&gt;</code> */
specifier|protected
specifier|static
specifier|final
name|String
name|RESULT
init|=
literal|"result"
decl_stmt|;
comment|/** Element<code>&lt;xmldb:result&gt;</code> (raw name) */
specifier|protected
specifier|static
specifier|final
name|String
name|QRESULT
init|=
name|PREFIX
operator|+
literal|":"
operator|+
name|RESULT
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|RESULT_DOCID_ATTR
init|=
literal|"docid"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|RESULT_ID_ATTR
init|=
literal|"id"
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
name|CDATA
init|=
literal|"CDATA"
decl_stmt|;
comment|//
comment|// Instance variables
comment|//
comment|/** default encoding to write outputStream */
specifier|public
name|String
name|encoding
init|=
literal|"UTF-8"
decl_stmt|;
comment|/** The requested URL */
specifier|public
name|String
name|url
decl_stmt|;
comment|/** The supplied user */
specifier|public
name|String
name|user
decl_stmt|;
comment|/** The supplied password */
specifier|public
name|String
name|password
decl_stmt|;
comment|/** The part of URL after # sign */
specifier|protected
name|String
name|query
decl_stmt|;
comment|/** The System ID */
specifier|protected
name|String
name|systemId
decl_stmt|;
comment|/** The path for the collection (same as url if it's a collection) */
specifier|private
specifier|final
name|String
name|colPath
decl_stmt|;
comment|/** The name of the resource in the collection (null if a collection) */
specifier|private
name|String
name|resName
decl_stmt|;
specifier|public
name|Collection
name|collection
decl_stmt|;
specifier|public
name|Resource
name|resource
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ST_UNKNOWN
init|=
literal|0
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ST_COLLECTION
init|=
literal|1
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ST_RESOURCE
init|=
literal|2
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ST_NO_PARENT
init|=
literal|3
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|ST_NO_RESOURCE
init|=
literal|4
decl_stmt|;
specifier|private
name|int
name|status
init|=
name|ST_UNKNOWN
decl_stmt|;
comment|/**      * The constructor.      *      * @param logger the Logger instance.      * @param user      * @param password      * @param srcUrl the URL being queried.      */
specifier|public
name|XMLDBSource
parameter_list|(
name|Logger
name|logger
parameter_list|,
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|srcUrl
parameter_list|)
block|{
name|enableLogging
argument_list|(
name|logger
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
comment|// Parse URL (with String methods for efficiency and tolerance)
comment|// Exist improvment, handle user:pass override from URL
comment|// default behavior
name|this
operator|.
name|url
operator|=
name|srcUrl
expr_stmt|;
comment|// allow little queries
name|int
name|sharp
init|=
name|this
operator|.
name|url
operator|.
name|indexOf
argument_list|(
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharp
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|url
operator|=
name|this
operator|.
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|sharp
argument_list|)
expr_stmt|;
name|this
operator|.
name|query
operator|=
name|this
operator|.
name|url
operator|.
name|substring
argument_list|(
name|sharp
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|query
operator|.
name|length
argument_list|()
operator|==
literal|0
condition|)
name|query
operator|=
literal|null
expr_stmt|;
block|}
comment|// try userinfo, a '@' before #
comment|// alow things like xmldb:exist://user:password@*/**
name|int
name|at
init|=
name|this
operator|.
name|url
operator|.
name|indexOf
argument_list|(
literal|'@'
argument_list|)
decl_stmt|;
name|int
name|root
init|=
name|this
operator|.
name|url
operator|.
name|indexOf
argument_list|(
literal|"//"
argument_list|)
decl_stmt|;
if|if
condition|(
name|at
operator|>
operator|-
literal|1
operator|&&
operator|(
name|sharp
operator|==
operator|-
literal|1
operator|||
name|at
operator|<
name|sharp
operator|)
condition|)
block|{
comment|// take userinfo first and modify url after
name|String
name|userinfo
init|=
name|this
operator|.
name|url
operator|.
name|substring
argument_list|(
name|root
operator|+
literal|2
argument_list|,
name|at
argument_list|)
decl_stmt|;
name|this
operator|.
name|url
operator|=
name|this
operator|.
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|root
operator|+
literal|2
argument_list|)
operator|+
name|this
operator|.
name|url
operator|.
name|substring
argument_list|(
name|at
operator|+
literal|1
argument_list|)
expr_stmt|;
name|int
name|column
init|=
name|userinfo
operator|.
name|indexOf
argument_list|(
literal|":"
argument_list|)
decl_stmt|;
if|if
condition|(
name|column
operator|!=
operator|-
literal|1
condition|)
block|{
name|this
operator|.
name|user
operator|=
name|userinfo
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|column
argument_list|)
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|userinfo
operator|.
name|substring
argument_list|(
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|user
operator|=
name|userinfo
expr_stmt|;
block|}
block|}
comment|// Split path in collection and resource
if|if
condition|(
name|this
operator|.
name|url
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|this
operator|.
name|url
operator|=
name|this
operator|.
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|this
operator|.
name|url
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// [giulio]
comment|// [FG] commented till Exist is able to work without URI encoding, to keep compatibility with other possible xmldb
comment|// url = url.replaceAll(" ", "%20");
name|int
name|pos
init|=
name|this
operator|.
name|url
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
name|colPath
operator|=
name|this
operator|.
name|url
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|resName
operator|=
name|this
operator|.
name|url
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|setup
parameter_list|()
throws|throws
name|XMLDBException
throws|,
name|SourceException
block|{
name|status
operator|=
name|ST_UNKNOWN
expr_stmt|;
try|try
block|{
name|collection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|url
argument_list|,
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|status
operator|=
name|ST_COLLECTION
expr_stmt|;
return|return;
block|}
comment|// That may be a resource: get the parent collection
name|collection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|colPath
argument_list|,
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
comment|// Even parent is unknown
name|status
operator|=
name|ST_NO_PARENT
expr_stmt|;
block|}
else|else
block|{
name|resource
operator|=
name|collection
operator|.
name|getResource
argument_list|(
name|resName
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
comment|// A resource
name|status
operator|=
name|ST_RESOURCE
expr_stmt|;
block|}
else|else
block|{
name|status
operator|=
name|ST_NO_RESOURCE
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|status
operator|==
name|ST_UNKNOWN
condition|)
block|{
comment|// Something went wrong: ensure any collection is closed
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|cleanup
parameter_list|()
block|{
name|close
argument_list|(
name|this
operator|.
name|collection
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Collection
name|createCollection
parameter_list|(
name|String
name|path
parameter_list|)
throws|throws
name|XMLDBException
throws|,
name|SourceException
block|{
name|Collection
name|coll
init|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|path
argument_list|,
name|this
operator|.
name|user
argument_list|,
name|this
operator|.
name|password
argument_list|)
decl_stmt|;
if|if
condition|(
name|coll
operator|!=
literal|null
condition|)
block|{
return|return
name|coll
return|;
block|}
comment|// Need to create the collection
comment|// Remove any trailing '/'
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|int
name|pos
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
throw|throw
operator|new
name|SourceException
argument_list|(
literal|"Invalid collection path "
operator|+
name|path
argument_list|)
throw|;
block|}
comment|// Recurse
name|Collection
name|parentColl
init|=
name|createCollection
argument_list|(
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
argument_list|)
decl_stmt|;
comment|// And create the child collection
name|CollectionManagementService
name|mgtService
init|=
operator|(
name|CollectionManagementService
operator|)
name|parentColl
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|coll
operator|=
name|mgtService
operator|.
name|createCollection
argument_list|(
name|path
operator|.
name|substring
argument_list|(
name|pos
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|coll
return|;
block|}
comment|/**      * Close an XMLDB collection, ignoring any exception      */
specifier|private
name|void
name|close
parameter_list|(
name|Collection
name|coll
parameter_list|)
block|{
if|if
condition|(
name|coll
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|coll
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
comment|// ignore;
block|}
block|}
block|}
comment|/** A getter for the xmldb Collection object for this Source */
specifier|public
name|Collection
name|getCollection
parameter_list|()
throws|throws
name|SourceException
throws|,
name|XMLDBException
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|collection
return|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** A getter for the xmldb Resource object for this Source */
specifier|public
name|Resource
name|getResource
parameter_list|()
throws|throws
name|SourceException
throws|,
name|XMLDBException
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
return|return
name|this
operator|.
name|resource
return|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** A getter for the user login configured in cocoon.xconf */
specifier|public
name|String
name|getUser
parameter_list|()
block|{
return|return
name|this
operator|.
name|user
return|;
block|}
comment|/** A getter for the password configured in cocoon.xconf for the connection */
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|this
operator|.
name|password
return|;
block|}
comment|/**      * Stream SAX events to a given ContentHandler. If the requested      * resource is a collection, build an XML view of it.      */
specifier|public
name|void
name|toSAX
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|SAXException
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|ST_COLLECTION
condition|)
block|{
name|this
operator|.
name|collectionToSAX
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|status
operator|==
name|ST_RESOURCE
condition|)
block|{
name|this
operator|.
name|resourceToSAX
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SourceNotFoundException
argument_list|(
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|SAXException
name|se
parameter_list|)
block|{
throw|throw
name|se
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Error processing "
operator|+
name|getURI
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|resourceToSAX
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XMLDBException
throws|,
name|SourceException
block|{
if|if
condition|(
operator|!
operator|(
name|resource
operator|instanceof
name|XMLResource
operator|)
condition|)
block|{
throw|throw
operator|new
name|SAXException
argument_list|(
literal|"Not an XML resource: "
operator|+
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
comment|// Query resource
if|if
condition|(
name|getLogger
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Querying resource "
operator|+
name|resName
operator|+
literal|" from collection "
operator|+
name|url
operator|+
literal|"; query= "
operator|+
name|this
operator|.
name|query
argument_list|)
expr_stmt|;
block|}
name|queryToSAX
argument_list|(
name|handler
argument_list|,
name|collection
argument_list|,
name|resName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Return entire resource
if|if
condition|(
name|getLogger
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Obtaining resource "
operator|+
name|resName
operator|+
literal|" from collection "
operator|+
name|colPath
argument_list|)
expr_stmt|;
block|}
comment|//<frederic.glorieux@ajlsm.com> exist specific improvements
if|if
condition|(
name|resource
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
condition|)
block|{
comment|// To output comments
operator|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|EXistResource
operator|)
name|resource
operator|)
operator|.
name|setLexicalHandler
argument_list|(
operator|(
name|LexicalHandler
operator|)
name|handler
argument_list|)
expr_stmt|;
block|}
operator|(
operator|(
name|XMLResource
operator|)
name|resource
operator|)
operator|.
name|getContentAsSAX
argument_list|(
name|handler
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|collectionToSAX
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XMLDBException
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
comment|// Query collection
if|if
condition|(
name|getLogger
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Querying collection "
operator|+
name|url
operator|+
literal|"; query= "
operator|+
name|this
operator|.
name|query
argument_list|)
expr_stmt|;
block|}
name|queryToSAX
argument_list|(
name|handler
argument_list|,
name|collection
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// List collection
if|if
condition|(
name|getLogger
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Listing collection "
operator|+
name|url
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|nresources
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|collection
operator|.
name|getResourceCount
argument_list|()
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|RESOURCE_COUNT_ATTR
argument_list|,
name|RESOURCE_COUNT_ATTR
argument_list|,
literal|"CDATA"
argument_list|,
name|nresources
argument_list|)
expr_stmt|;
specifier|final
name|String
name|ncollections
init|=
name|Integer
operator|.
name|toString
argument_list|(
name|collection
operator|.
name|getChildCollectionCount
argument_list|()
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|COLLECTION_COUNT_ATTR
argument_list|,
name|COLLECTION_COUNT_ATTR
argument_list|,
literal|"CDATA"
argument_list|,
name|ncollections
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|COLLECTION_BASE_ATTR
argument_list|,
name|COLLECTION_BASE_ATTR
argument_list|,
literal|"CDATA"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|handler
operator|.
name|startPrefixMapping
argument_list|(
name|PREFIX
argument_list|,
name|URI
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|URI
argument_list|,
name|COLLECTIONS
argument_list|,
name|QCOLLECTIONS
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
comment|// Print child collections
name|String
index|[]
name|collections
init|=
name|collection
operator|.
name|listChildCollections
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|collections
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|NAME_ATTR
argument_list|,
name|NAME_ATTR
argument_list|,
name|CDATA
argument_list|,
name|collections
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|URI
argument_list|,
name|COLLECTION
argument_list|,
name|QCOLLECTION
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|URI
argument_list|,
name|COLLECTION
argument_list|,
name|QCOLLECTION
argument_list|)
expr_stmt|;
block|}
comment|// Print child resources
name|String
index|[]
name|resources
init|=
name|collection
operator|.
name|listResources
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resources
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|NAME_ATTR
argument_list|,
name|NAME_ATTR
argument_list|,
name|CDATA
argument_list|,
name|resources
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|URI
argument_list|,
name|RESOURCE
argument_list|,
name|QRESOURCE
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endElement
argument_list|(
name|URI
argument_list|,
name|RESOURCE
argument_list|,
name|QRESOURCE
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|URI
argument_list|,
name|COLLECTIONS
argument_list|,
name|QCOLLECTIONS
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endPrefixMapping
argument_list|(
name|PREFIX
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|queryToSAX
parameter_list|(
name|ContentHandler
name|handler
parameter_list|,
name|Collection
name|collection
parameter_list|,
name|String
name|resource
parameter_list|)
throws|throws
name|SAXException
throws|,
name|XMLDBException
block|{
name|AttributesImpl
name|attributes
init|=
operator|new
name|AttributesImpl
argument_list|()
decl_stmt|;
name|XPathQueryService
name|service
init|=
operator|(
name|XPathQueryService
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|resultSet
init|=
operator|(
name|resource
operator|==
literal|null
operator|)
condition|?
name|service
operator|.
name|query
argument_list|(
name|query
argument_list|)
else|:
name|service
operator|.
name|queryResource
argument_list|(
name|resource
argument_list|,
name|query
argument_list|)
decl_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|QUERY_ATTR
argument_list|,
name|QUERY_ATTR
argument_list|,
literal|"CDATA"
argument_list|,
name|query
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|RESULTS_COUNT_ATTR
argument_list|,
name|RESULTS_COUNT_ATTR
argument_list|,
literal|"CDATA"
argument_list|,
name|Long
operator|.
name|toString
argument_list|(
name|resultSet
operator|.
name|getSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|handler
operator|.
name|startPrefixMapping
argument_list|(
name|PREFIX
argument_list|,
name|URI
argument_list|)
expr_stmt|;
name|handler
operator|.
name|startElement
argument_list|(
name|URI
argument_list|,
name|RESULTSET
argument_list|,
name|QRESULTSET
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
name|IncludeXMLConsumer
name|includeHandler
init|=
operator|new
name|IncludeXMLConsumer
argument_list|(
name|handler
argument_list|)
decl_stmt|;
comment|// Print search results
name|ResourceIterator
name|results
init|=
name|resultSet
operator|.
name|getIterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|results
operator|.
name|hasMoreResources
argument_list|()
condition|)
block|{
name|XMLResource
name|result
init|=
operator|(
name|XMLResource
operator|)
name|results
operator|.
name|nextResource
argument_list|()
decl_stmt|;
specifier|final
name|String
name|id
init|=
name|result
operator|.
name|getId
argument_list|()
decl_stmt|;
specifier|final
name|String
name|documentId
init|=
name|result
operator|.
name|getDocumentId
argument_list|()
decl_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|id
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|RESULT_ID_ATTR
argument_list|,
name|RESULT_ID_ATTR
argument_list|,
name|CDATA
argument_list|,
name|id
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|documentId
operator|!=
literal|null
condition|)
block|{
name|attributes
operator|.
name|addAttribute
argument_list|(
literal|""
argument_list|,
name|RESULT_DOCID_ATTR
argument_list|,
name|RESULT_DOCID_ATTR
argument_list|,
name|CDATA
argument_list|,
name|documentId
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|startElement
argument_list|(
name|URI
argument_list|,
name|RESULT
argument_list|,
name|QRESULT
argument_list|,
name|attributes
argument_list|)
expr_stmt|;
try|try
block|{
name|result
operator|.
name|getContentAsSAX
argument_list|(
name|includeHandler
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xde
parameter_list|)
block|{
comment|// That may be a text-only result
name|Object
name|content
init|=
name|result
operator|.
name|getContent
argument_list|()
decl_stmt|;
if|if
condition|(
name|content
operator|instanceof
name|String
condition|)
block|{
name|String
name|text
init|=
operator|(
name|String
operator|)
name|content
decl_stmt|;
name|handler
operator|.
name|characters
argument_list|(
name|text
operator|.
name|toCharArray
argument_list|()
argument_list|,
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Cannot do better
throw|throw
name|xde
throw|;
block|}
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|URI
argument_list|,
name|RESULT
argument_list|,
name|QRESULT
argument_list|)
expr_stmt|;
block|}
name|handler
operator|.
name|endElement
argument_list|(
name|URI
argument_list|,
name|RESULTSET
argument_list|,
name|QRESULTSET
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endPrefixMapping
argument_list|(
name|PREFIX
argument_list|)
expr_stmt|;
name|handler
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
specifier|public
name|String
name|getURI
parameter_list|()
block|{
return|return
name|url
return|;
block|}
specifier|public
name|long
name|getContentLength
parameter_list|()
block|{
name|long
name|result
init|=
operator|-
literal|1
decl_stmt|;
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
name|result
operator|=
operator|new
name|Integer
argument_list|(
operator|(
operator|(
name|EXistResource
operator|)
name|this
operator|.
name|resource
operator|)
operator|.
name|getContentLength
argument_list|()
argument_list|)
operator|.
name|longValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|getLogger
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"getContentLength() for "
operator|+
name|resName
operator|+
literal|" from collection "
operator|+
name|url
operator|+
literal|" failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|long
name|getLastModified
parameter_list|()
block|{
name|long
name|result
init|=
literal|0
decl_stmt|;
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
name|this
operator|.
name|status
operator|==
name|ST_COLLECTION
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|CollectionImpl
operator|)
name|this
operator|.
name|collection
operator|)
operator|.
name|getCreationTime
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|this
operator|.
name|status
operator|==
name|ST_RESOURCE
condition|)
block|{
name|result
operator|=
operator|(
operator|(
name|EXistResource
operator|)
name|this
operator|.
name|resource
operator|)
operator|.
name|getLastModificationTime
argument_list|()
operator|.
name|getTime
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|getLogger
argument_list|()
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"getLastModified() for "
operator|+
name|resName
operator|+
literal|" from collection "
operator|+
name|url
operator|+
literal|" failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
return|return
name|status
operator|==
name|ST_COLLECTION
operator|||
name|status
operator|==
name|ST_RESOURCE
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|getMimeType
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|String
name|getScheme
parameter_list|()
block|{
return|return
name|SourceUtil
operator|.
name|getScheme
argument_list|(
name|url
argument_list|)
return|;
block|}
specifier|public
name|SourceValidity
name|getValidity
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|resource
operator|==
literal|null
operator|||
name|collection
operator|==
literal|null
condition|)
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
operator|&&
name|resource
operator|instanceof
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|AbstractEXistResource
condition|)
return|return
operator|new
name|TimeStampValidity
argument_list|(
operator|(
operator|(
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|AbstractEXistResource
operator|)
name|resource
operator|)
operator|.
name|getLastModificationTime
argument_list|()
operator|.
name|getTime
argument_list|()
argument_list|)
return|;
comment|/*                          if (collection != null&& resource instanceof  org.exist.xmldb.AbstractEXistResource)                 return new TimeStampValidity(((org.exist.xmldb.AbstractEXistResource)resource).getLastModificationTime().getTime());             */
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|SourceException
name|e
parameter_list|)
block|{
block|}
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|refresh
parameter_list|()
block|{
block|}
comment|/**      * Get an InputSource for the given URL.      */
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
comment|// Check if it's binary
if|if
condition|(
name|resource
operator|instanceof
name|ExtendedResource
condition|)
block|{
return|return
operator|(
operator|(
name|ExtendedResource
operator|)
name|resource
operator|)
operator|.
name|getStreamContent
argument_list|()
return|;
block|}
else|else
block|{
comment|// Serialize SAX result
name|TransformerFactory
name|tf
init|=
name|TransformerFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|TransformerHandler
name|th
init|=
operator|(
operator|(
name|SAXTransformerFactory
operator|)
name|tf
operator|)
operator|.
name|newTransformerHandler
argument_list|()
decl_stmt|;
name|ByteArrayOutputStream
name|bOut
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|StreamResult
name|result
init|=
operator|new
name|StreamResult
argument_list|(
name|bOut
argument_list|)
decl_stmt|;
name|th
operator|.
name|setResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|toSAX
argument_list|(
name|th
argument_list|)
expr_stmt|;
return|return
operator|new
name|ByteArrayInputStream
argument_list|(
name|bOut
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
throw|throw
name|ioe
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|CascadingIOException
argument_list|(
literal|"Exception during processing of "
operator|+
name|getURI
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Return an {@link OutputStream} to write to. This method expects an XML document to be      * written in that stream. To create a binary resource, use {@link #getBinaryOutputStream()}.      */
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|MalformedURLException
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Cannot modify a resource that includes an XPATH expression"
argument_list|)
throw|;
block|}
return|return
operator|new
name|XMLDBOutputStream
argument_list|(
literal|false
argument_list|)
return|;
block|}
comment|/**      * set content as DOM      *       * @see<a href="http://exist.sourceforge.net/api/org/xmldb/api/modules/XMLResource.html#setContentAsDOM(org.w3c.dom.Node)">XMLDB API</a>      */
specifier|public
name|void
name|setContentAsDOM
parameter_list|(
name|Node
name|doc
parameter_list|)
throws|throws
name|IOException
throws|,
name|MalformedURLException
block|{
comment|// author frederic.glorieux@ajlsm.com
try|try
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Cannot modify a resource that includes an XPATH expression"
argument_list|)
throw|;
block|}
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|ST_NO_PARENT
condition|)
block|{
comment|// If there's no parent collection, create it
name|collection
operator|=
name|createCollection
argument_list|(
name|colPath
argument_list|)
expr_stmt|;
name|status
operator|=
name|ST_NO_RESOURCE
expr_stmt|;
block|}
name|resource
operator|=
name|collection
operator|.
name|createResource
argument_list|(
name|this
operator|.
name|resName
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
operator|(
operator|(
name|XMLResource
operator|)
name|resource
operator|)
operator|.
name|setContentAsDOM
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to create resource "
operator|+
name|resName
operator|+
literal|": "
operator|+
name|e
operator|.
name|errorCode
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
name|System
operator|.
name|out
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|SourceException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * get content as DOM      * @see<a href="http://exist.sourceforge.net/api/org/xmldb/api/modules/XMLResource.html#setContentAsDOM(org.w3c.dom.Node)">XMLDB API</a>      */
specifier|public
name|Node
name|getContentAsDOM
parameter_list|()
throws|throws
name|IOException
throws|,
name|MalformedURLException
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|resource
operator|instanceof
name|XMLResource
operator|)
condition|)
block|{
throw|throw
operator|new
name|SourceException
argument_list|(
literal|"Not an XML resource: "
operator|+
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Not yet available for queries, only for single resource."
argument_list|)
throw|;
block|}
name|String
name|name
init|=
name|this
operator|.
name|resName
decl_stmt|;
name|resource
operator|=
name|collection
operator|.
name|createResource
argument_list|(
name|name
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
return|return
operator|(
operator|(
name|XMLResource
operator|)
name|resource
operator|)
operator|.
name|getContentAsDOM
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to create resource "
operator|+
name|resName
operator|+
literal|": "
operator|+
name|e
operator|.
name|errorCode
decl_stmt|;
throw|throw
operator|new
name|SourceException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Return an {@link OutputStream} to write data to a binary resource.      */
specifier|public
name|OutputStream
name|getBinaryOutputStream
parameter_list|()
throws|throws
name|IOException
throws|,
name|MalformedURLException
block|{
if|if
condition|(
name|query
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|MalformedURLException
argument_list|(
literal|"Cannot modify a resource that includes an XPATH expression"
argument_list|)
throw|;
block|}
return|return
operator|new
name|XMLDBOutputStream
argument_list|(
literal|true
argument_list|)
return|;
block|}
comment|/**      * Create a new identifier for a resource within a collection. The current source must be      * an existing collection.      *       * @throws SourceException       */
specifier|public
name|String
name|createId
parameter_list|()
throws|throws
name|SourceException
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|ST_COLLECTION
condition|)
block|{
throw|throw
operator|new
name|SourceNotFoundException
argument_list|(
literal|"Collection for createId not found: "
operator|+
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
return|return
name|collection
operator|.
name|createId
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xdbe
parameter_list|)
block|{
throw|throw
operator|new
name|SourceException
argument_list|(
literal|"Cannot get Id for "
operator|+
name|getURI
argument_list|()
argument_list|,
name|xdbe
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|writeOutputStream
parameter_list|(
name|ByteArrayOutputStream
name|baos
parameter_list|,
name|boolean
name|binary
parameter_list|)
throws|throws
name|SourceException
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|ST_NO_PARENT
condition|)
block|{
comment|// If there's no parent collection, create it
name|collection
operator|=
name|createCollection
argument_list|(
name|colPath
argument_list|)
expr_stmt|;
name|status
operator|=
name|ST_NO_RESOURCE
expr_stmt|;
block|}
comment|// If it's a collection create an id for a child resource.
comment|// FIXME(SW): kept for backwards compatibility, but do we really want this?
name|String
name|name
decl_stmt|;
if|if
condition|(
name|status
operator|==
name|ST_COLLECTION
condition|)
block|{
name|name
operator|=
name|collection
operator|.
name|createId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|name
operator|=
name|this
operator|.
name|resName
expr_stmt|;
block|}
name|String
name|mimeType
decl_stmt|;
name|Resource
name|resource
decl_stmt|;
if|if
condition|(
name|binary
condition|)
block|{
name|resource
operator|=
name|collection
operator|.
name|createResource
argument_list|(
name|name
argument_list|,
name|BinaryResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
name|resource
operator|.
name|setContent
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resource
operator|=
name|collection
operator|.
name|createResource
argument_list|(
name|name
argument_list|,
name|XMLResource
operator|.
name|RESOURCE_TYPE
argument_list|)
expr_stmt|;
comment|// FIXME: potential encoding problems here, as we don't know the one use in the stream
comment|// frederic.glorieux@ajlsm.com : Yes, it is, here a quick hack, default encoding for XML=UTF-8
name|resource
operator|.
name|setContent
argument_list|(
operator|new
name|String
argument_list|(
name|baos
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|encoding
argument_list|)
argument_list|)
expr_stmt|;
name|mimeType
operator|=
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
name|MimeType
name|mime
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|!=
literal|null
condition|)
block|{
name|mimeType
operator|=
name|mime
operator|.
name|getName
argument_list|()
expr_stmt|;
block|}
operator|(
operator|(
name|EXistResource
operator|)
name|resource
operator|)
operator|.
name|setMimeType
argument_list|(
name|mimeType
argument_list|)
expr_stmt|;
name|collection
operator|.
name|storeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"Written to resource "
operator|+
name|resName
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Failed to create resource "
operator|+
name|resName
operator|+
literal|": "
operator|+
name|e
operator|.
name|errorCode
decl_stmt|;
throw|throw
operator|new
name|SourceException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
name|String
name|message
init|=
literal|"Encoding for the resource "
operator|+
name|resName
operator|+
name|encoding
decl_stmt|;
throw|throw
operator|new
name|SourceException
argument_list|(
name|message
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/** Set a default encoding for outputStream */
specifier|public
name|void
name|setEncoding
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|this
operator|.
name|encoding
operator|=
name|s
expr_stmt|;
block|}
comment|/** Set a default encoding for outputStream */
specifier|public
name|String
name|getEncoding
parameter_list|()
block|{
return|return
name|this
operator|.
name|encoding
return|;
block|}
comment|/**      * Delete the source      */
specifier|public
name|void
name|delete
parameter_list|()
throws|throws
name|SourceException
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|==
name|ST_RESOURCE
condition|)
block|{
name|collection
operator|.
name|removeResource
argument_list|(
name|resource
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|status
operator|==
name|ST_COLLECTION
condition|)
block|{
name|Collection
name|parent
init|=
name|collection
operator|.
name|getParentCollection
argument_list|()
decl_stmt|;
name|CollectionManagementService
name|service
init|=
operator|(
name|CollectionManagementService
operator|)
name|parent
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|service
operator|.
name|removeCollection
argument_list|(
name|collection
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|SourceException
name|se
parameter_list|)
block|{
throw|throw
name|se
throw|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|xdbe
parameter_list|)
block|{
throw|throw
operator|new
name|SourceException
argument_list|(
literal|"Could not delete "
operator|+
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Can the data sent to an<code>OutputStream</code> returned by      * {@link #getOutputStream()} be cancelled ?      *      * @return true if the stream can be cancelled      */
specifier|public
name|boolean
name|canCancel
parameter_list|(
name|OutputStream
name|stream
parameter_list|)
block|{
return|return
name|stream
operator|instanceof
name|XMLDBOutputStream
operator|&&
operator|!
operator|(
operator|(
name|XMLDBOutputStream
operator|)
name|stream
operator|)
operator|.
name|isClosed
argument_list|()
return|;
block|}
comment|/**      * Cancel the data sent to an<code>OutputStream</code> returned by      * {@link #getOutputStream()}.      *      *<p>After cancelling, the stream should no longer be used.</p>      */
specifier|public
name|void
name|cancel
parameter_list|(
name|OutputStream
name|stream
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|canCancel
argument_list|(
name|stream
argument_list|)
condition|)
block|{
operator|(
operator|(
name|XMLDBOutputStream
operator|)
name|stream
operator|)
operator|.
name|cancel
argument_list|()
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SourceException
argument_list|(
literal|"Cannot cancel stream for "
operator|+
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
class|class
name|XMLDBOutputStream
extends|extends
name|OutputStream
block|{
specifier|private
name|ByteArrayOutputStream
name|baos
decl_stmt|;
specifier|private
name|boolean
name|isClosed
decl_stmt|;
specifier|private
name|boolean
name|binary
decl_stmt|;
specifier|public
name|XMLDBOutputStream
parameter_list|(
name|boolean
name|binary
parameter_list|)
block|{
name|baos
operator|=
operator|new
name|ByteArrayOutputStream
argument_list|()
expr_stmt|;
name|isClosed
operator|=
literal|false
expr_stmt|;
name|this
operator|.
name|binary
operator|=
name|binary
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|int
name|b
parameter_list|)
throws|throws
name|IOException
block|{
name|baos
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|)
throws|throws
name|IOException
block|{
name|baos
operator|.
name|write
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
name|baos
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|IOException
throws|,
name|SourceException
block|{
if|if
condition|(
operator|!
name|isClosed
condition|)
block|{
name|writeOutputStream
argument_list|(
name|baos
argument_list|,
name|this
operator|.
name|binary
argument_list|)
expr_stmt|;
name|baos
operator|.
name|close
argument_list|()
expr_stmt|;
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|IOException
block|{
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|baos
operator|.
name|size
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|isClosed
parameter_list|()
block|{
return|return
name|this
operator|.
name|isClosed
return|;
block|}
specifier|public
name|void
name|cancel
parameter_list|()
block|{
name|this
operator|.
name|isClosed
operator|=
literal|true
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|makeCollection
parameter_list|()
throws|throws
name|SourceException
block|{
try|try
block|{
name|createCollection
argument_list|(
name|this
operator|.
name|url
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SourceException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SourceException
argument_list|(
literal|"Cannot make collection with "
operator|+
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|isCollection
parameter_list|()
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
return|return
name|status
operator|==
name|ST_COLLECTION
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|java
operator|.
name|util
operator|.
name|Collection
name|getChildren
parameter_list|()
throws|throws
name|SourceException
block|{
try|try
block|{
name|setup
argument_list|()
expr_stmt|;
if|if
condition|(
name|status
operator|!=
name|ST_COLLECTION
condition|)
block|{
throw|throw
operator|new
name|SourceException
argument_list|(
literal|"Not a collection: "
operator|+
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
name|String
index|[]
name|childColl
init|=
name|collection
operator|.
name|listChildCollections
argument_list|()
decl_stmt|;
name|String
index|[]
name|childRes
init|=
name|collection
operator|.
name|listResources
argument_list|()
decl_stmt|;
name|ArrayList
name|children
init|=
operator|new
name|ArrayList
argument_list|(
name|childColl
operator|.
name|length
operator|+
name|childRes
operator|.
name|length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childColl
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|XMLDBSource
argument_list|(
name|getLogger
argument_list|()
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|url
operator|+
literal|"/"
operator|+
name|childColl
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|childRes
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|children
operator|.
name|add
argument_list|(
operator|new
name|XMLDBSource
argument_list|(
name|getLogger
argument_list|()
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|url
operator|+
literal|"/"
operator|+
name|childRes
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
catch|catch
parameter_list|(
name|SourceException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|SourceException
argument_list|(
literal|"Cannot list children of "
operator|+
name|getURI
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|Source
name|getChild
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SourceException
block|{
return|return
operator|new
name|XMLDBSource
argument_list|(
name|getLogger
argument_list|()
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|this
operator|.
name|url
operator|+
literal|"/"
operator|+
name|name
argument_list|)
return|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|resName
return|;
block|}
specifier|public
name|Source
name|getParent
parameter_list|()
throws|throws
name|SourceException
block|{
return|return
operator|new
name|XMLDBSource
argument_list|(
name|getLogger
argument_list|()
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|this
operator|.
name|colPath
argument_list|)
return|;
block|}
block|}
end_class

end_unit

