begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cocoon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|parameters
operator|.
name|Parameters
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|avalon
operator|.
name|framework
operator|.
name|thread
operator|.
name|ThreadSafe
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|acting
operator|.
name|ServiceableAction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|environment
operator|.
name|ObjectModelHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|environment
operator|.
name|Redirector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|environment
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|cocoon
operator|.
name|environment
operator|.
name|SourceResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|DatabaseInstanceManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|DatabaseManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|/**  * Cocoon action to shut down a running database instance of eXist.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|ShutdownAction
extends|extends
name|ServiceableAction
implements|implements
name|ThreadSafe
block|{
specifier|public
name|ShutdownAction
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/* (non-Javadoc) 	 * @see org.apache.cocoon.acting.Action#act(org.apache.cocoon.environment.Redirector, org.apache.cocoon.environment.SourceResolver, java.util.Map, java.lang.String, org.apache.avalon.framework.parameters.Parameters) 	 */
specifier|public
name|Map
name|act
parameter_list|(
name|Redirector
name|redirector
parameter_list|,
name|SourceResolver
name|resolver
parameter_list|,
name|Map
name|objectModel
parameter_list|,
name|String
name|source
parameter_list|,
name|Parameters
name|parameters
parameter_list|)
throws|throws
name|Exception
block|{
name|Map
name|result
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|Request
name|request
init|=
name|ObjectModelHelper
operator|.
name|getRequest
argument_list|(
name|objectModel
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|==
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"No request!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|String
name|user
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|String
name|passwd
init|=
name|request
operator|.
name|getParameter
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"no user specified!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|debug
argument_list|(
literal|"No source specified! Using default."
argument_list|)
expr_stmt|;
name|source
operator|=
literal|"xmldb:exist://"
operator|+
name|DBBroker
operator|.
name|ROOT_COLLECTION
expr_stmt|;
block|}
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
comment|// try to access collection specified in source
try|try
block|{
name|collection
operator|=
name|DatabaseManager
operator|.
name|getCollection
argument_list|(
name|source
argument_list|,
name|user
argument_list|,
name|passwd
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"login denied: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
try|try
block|{
name|DatabaseInstanceManager
name|mgr
init|=
operator|(
name|DatabaseInstanceManager
operator|)
name|collection
operator|.
name|getService
argument_list|(
literal|"DatabaseInstanceManager"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|mgr
operator|==
literal|null
condition|)
block|{
name|getLogger
argument_list|()
operator|.
name|error
argument_list|(
literal|"access to DatabaseInstanceManager failed"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|mgr
operator|.
name|shutdown
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|getLogger
argument_list|()
operator|.
name|warn
argument_list|(
literal|"An error occurred: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|result
return|;
block|}
block|}
end_class

end_unit

