begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|cocoon
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|excalibur
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ContentHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|DTDHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotRecognizedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXNotSupportedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|XMLReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ext
operator|.
name|LexicalHandler
import|;
end_import

begin_comment
comment|/**  * Wrapper around SAXParser interface from excalibur to  * provide an (excalibur) independend implementation of XMLReader.  */
end_comment

begin_class
specifier|public
class|class
name|XMLReaderWrapper
implements|implements
name|XMLReader
block|{
specifier|private
name|SAXParser
name|saxParser
decl_stmt|;
specifier|private
name|ContentHandler
name|contentHandler
init|=
literal|null
decl_stmt|;
specifier|private
name|LexicalHandler
name|lexicalHandler
init|=
literal|null
decl_stmt|;
comment|/**      * @param saxParser to wrap around      */
specifier|public
name|XMLReaderWrapper
parameter_list|(
name|SAXParser
name|saxParser
parameter_list|)
block|{
name|this
operator|.
name|saxParser
operator|=
name|saxParser
expr_stmt|;
block|}
comment|/**      * @see org.xml.sax.XMLReader#parse(java.lang.String)      */
specifier|public
name|void
name|parse
parameter_list|(
name|String
name|systemId
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
name|systemId
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Not supported.      *       * @see org.xml.sax.XMLReader#getFeature(java.lang.String)      */
specifier|public
name|boolean
name|getFeature
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
return|return
literal|false
return|;
block|}
comment|/**      * Not supported.      *       * @see org.xml.sax.XMLReader#setFeature(java.lang.String, boolean)      */
specifier|public
name|void
name|setFeature
parameter_list|(
name|String
name|name
parameter_list|,
name|boolean
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
block|}
comment|/**      * @see org.xml.sax.XMLReader#getContentHandler()      */
specifier|public
name|ContentHandler
name|getContentHandler
parameter_list|()
block|{
return|return
name|contentHandler
return|;
block|}
comment|/**      * @see org.xml.sax.XMLReader#setContentHandler(org.xml.sax.ContentHandler)      */
specifier|public
name|void
name|setContentHandler
parameter_list|(
name|ContentHandler
name|handler
parameter_list|)
block|{
name|this
operator|.
name|contentHandler
operator|=
name|handler
expr_stmt|;
block|}
comment|/**      * Not supported.      *       * @see org.xml.sax.XMLReader#getDTDHandler()      */
specifier|public
name|DTDHandler
name|getDTDHandler
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Not supported.      *       * @see org.xml.sax.XMLReader#setDTDHandler(org.xml.sax.DTDHandler)      */
specifier|public
name|void
name|setDTDHandler
parameter_list|(
name|DTDHandler
name|handler
parameter_list|)
block|{
block|}
comment|/**      * Not supported.      *       * @see org.xml.sax.XMLReader#getEntityResolver()      */
specifier|public
name|EntityResolver
name|getEntityResolver
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Not supported.      *       * @see org.xml.sax.XMLReader#setEntityResolver(org.xml.sax.EntityResolver)      */
specifier|public
name|void
name|setEntityResolver
parameter_list|(
name|EntityResolver
name|resolver
parameter_list|)
block|{
block|}
comment|/**      * Not supported.      *       * @see org.xml.sax.XMLReader#getErrorHandler()      */
specifier|public
name|ErrorHandler
name|getErrorHandler
parameter_list|()
block|{
return|return
literal|null
return|;
block|}
comment|/**      * Not supported.      *       * @see org.xml.sax.XMLReader#setErrorHandler(org.xml.sax.ErrorHandler)      */
specifier|public
name|void
name|setErrorHandler
parameter_list|(
name|ErrorHandler
name|handler
parameter_list|)
block|{
block|}
comment|/**      * @see org.xml.sax.XMLReader#parse(org.xml.sax.InputSource)      */
specifier|public
name|void
name|parse
parameter_list|(
name|InputSource
name|input
parameter_list|)
throws|throws
name|IOException
throws|,
name|SAXException
block|{
if|if
condition|(
name|lexicalHandler
operator|!=
literal|null
condition|)
block|{
name|saxParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|contentHandler
argument_list|,
name|lexicalHandler
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|saxParser
operator|.
name|parse
argument_list|(
name|input
argument_list|,
name|contentHandler
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * @see org.xml.sax.XMLReader#getProperty(java.lang.String)      */
specifier|public
name|Object
name|getProperty
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|)
condition|)
block|{
return|return
name|lexicalHandler
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" not recognized"
argument_list|)
throw|;
block|}
block|}
comment|/**      * Only property<i>http://xml.org/sax/properties/lexical-handler</i> is       * supported.      *       * @see org.xml.sax.XMLReader#setProperty(java.lang.String, java.lang.Object)      */
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
throws|throws
name|SAXNotRecognizedException
throws|,
name|SAXNotSupportedException
block|{
if|if
condition|(
name|name
operator|.
name|equals
argument_list|(
literal|"http://xml.org/sax/properties/lexical-handler"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|value
operator|instanceof
name|LexicalHandler
operator|)
condition|)
block|{
throw|throw
operator|new
name|SAXNotSupportedException
argument_list|(
literal|"Value not of type LexicalHandler"
argument_list|)
throw|;
block|}
name|lexicalHandler
operator|=
operator|(
name|LexicalHandler
operator|)
name|value
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|SAXNotRecognizedException
argument_list|(
literal|"Property "
operator|+
name|name
operator|+
literal|" not recognized"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

