begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009-2013 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id: Configuration.java 17982 2012-12-31 12:50:10Z deliriumsky $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|JobException
operator|.
name|JobExceptionAction
import|;
end_import

begin_comment
comment|/**  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|JobConfig
block|{
comment|/** start conf.xml names **/
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_ELEMENT_NAME
init|=
literal|"scheduler"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|CONFIGURATION_JOB_ELEMENT_NAME
init|=
literal|"job"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOB_TYPE_ATTRIBUTE
init|=
literal|"type"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOB_CLASS_ATTRIBUTE
init|=
literal|"class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOB_XQUERY_ATTRIBUTE
init|=
literal|"xquery"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOB_CRON_TRIGGER_ATTRIBUTE
init|=
literal|"cron-trigger"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOB_PERIOD_ATTRIBUTE
init|=
literal|"period"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOB_DELAY_ATTRIBUTE
init|=
literal|"delay"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOB_REPEAT_ATTRIBUTE
init|=
literal|"repeat"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOB_NAME_ATTRIBUTE
init|=
literal|"name"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|JOB_UNSCHEDULE_ON_EXCEPTION
init|=
literal|"unschedule-on-exception"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_SCHEDULER_JOBS
init|=
literal|"scheduler.jobs"
decl_stmt|;
comment|/** end conf.xml names **/
specifier|private
specifier|final
name|JobType
name|jobType
decl_stmt|;
specifier|private
specifier|final
name|String
name|jobName
decl_stmt|;
specifier|private
specifier|final
name|String
name|resourceName
decl_stmt|;
specifier|private
specifier|final
name|String
name|schedule
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|unscheduleOnException
decl_stmt|;
specifier|private
name|long
name|delay
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|int
name|repeat
init|=
operator|-
literal|1
decl_stmt|;
comment|//repeat indefinetly
specifier|private
specifier|final
name|Properties
name|parameters
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
specifier|public
name|JobConfig
parameter_list|(
specifier|final
name|JobType
name|jobType
parameter_list|,
specifier|final
name|String
name|jobName
parameter_list|,
specifier|final
name|String
name|resourceName
parameter_list|,
specifier|final
name|String
name|schedule
parameter_list|,
specifier|final
name|String
name|unscheduleOnException
parameter_list|)
throws|throws
name|JobException
block|{
if|if
condition|(
name|jobType
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|jobType
operator|=
name|jobType
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|jobType
operator|=
name|JobType
operator|.
name|USER
expr_stmt|;
block|}
name|this
operator|.
name|jobName
operator|=
name|jobName
expr_stmt|;
if|if
condition|(
name|resourceName
operator|!=
literal|null
condition|)
block|{
name|this
operator|.
name|resourceName
operator|=
name|resourceName
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|(
operator|new
name|JobException
argument_list|(
name|JobExceptionAction
operator|.
name|JOB_ABORT
argument_list|,
literal|"Job must have a resource for execution"
argument_list|)
operator|)
throw|;
block|}
if|if
condition|(
name|schedule
operator|==
literal|null
condition|)
block|{
throw|throw
operator|(
operator|new
name|JobException
argument_list|(
name|JobExceptionAction
operator|.
name|JOB_ABORT
argument_list|,
literal|"Job must have a schedule"
argument_list|)
operator|)
throw|;
block|}
else|else
block|{
name|this
operator|.
name|schedule
operator|=
name|schedule
expr_stmt|;
block|}
name|this
operator|.
name|unscheduleOnException
operator|=
name|Configuration
operator|.
name|parseBoolean
argument_list|(
name|unscheduleOnException
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|JobType
name|getType
parameter_list|()
block|{
return|return
name|jobType
return|;
block|}
specifier|public
name|String
name|getJobName
parameter_list|()
block|{
return|return
name|jobName
return|;
block|}
specifier|public
name|String
name|getResourceName
parameter_list|()
block|{
return|return
name|resourceName
return|;
block|}
specifier|public
name|String
name|getSchedule
parameter_list|()
block|{
return|return
name|schedule
return|;
block|}
specifier|public
name|long
name|getDelay
parameter_list|()
block|{
return|return
name|delay
return|;
block|}
specifier|public
name|void
name|setDelay
parameter_list|(
specifier|final
name|long
name|delay
parameter_list|)
block|{
name|this
operator|.
name|delay
operator|=
name|delay
expr_stmt|;
block|}
specifier|public
name|int
name|getRepeat
parameter_list|()
block|{
return|return
name|repeat
return|;
block|}
specifier|public
name|void
name|setRepeat
parameter_list|(
specifier|final
name|int
name|repeat
parameter_list|)
block|{
name|this
operator|.
name|repeat
operator|=
name|repeat
expr_stmt|;
block|}
specifier|public
name|void
name|addParameter
parameter_list|(
specifier|final
name|String
name|name
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
block|{
name|parameters
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Properties
name|getParameters
parameter_list|()
block|{
return|return
name|parameters
return|;
block|}
specifier|public
name|boolean
name|unscheduleOnException
parameter_list|()
block|{
return|return
name|unscheduleOnException
return|;
block|}
block|}
end_class

end_unit

