begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2006 The eXist team  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Enumeration
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|DBSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|XQueryPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionException
import|;
end_import

begin_comment
comment|/**  * Class to represent a User's XQuery Job  * Extends UserJob  *   * @author Adam Retter<adam.retter@devon.gov.uk>  */
end_comment

begin_class
specifier|public
class|class
name|UserXQueryJob
extends|extends
name|UserJob
block|{
specifier|private
name|String
name|JOB_NAME
init|=
literal|"XQuery"
decl_stmt|;
specifier|private
name|String
name|XQueryResource
init|=
literal|null
decl_stmt|;
specifier|private
name|User
name|user
init|=
literal|null
decl_stmt|;
comment|/** 	 * Default Constructor for Quartz 	 */
specifier|public
name|UserXQueryJob
parameter_list|()
block|{
block|}
comment|/** 	 * Constructor for Creating a new XQuery User Job 	 */
specifier|public
name|UserXQueryJob
parameter_list|(
name|String
name|XQueryResource
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|this
operator|.
name|XQueryResource
operator|=
name|XQueryResource
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|JOB_NAME
operator|+=
literal|": "
operator|+
name|XQueryResource
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|JOB_NAME
return|;
block|}
comment|/** 	 * Returns the XQuery Resource for this Job 	 *  	 * @return The XQuery Resource for this Job 	 */
specifier|protected
name|String
name|getXQueryResource
parameter_list|()
block|{
return|return
name|XQueryResource
return|;
block|}
comment|/** 	 * Returns the User for this Job 	 *  	 * @return The User for this Job 	 */
specifier|protected
name|User
name|getUser
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|public
specifier|final
name|void
name|execute
parameter_list|(
name|JobExecutionContext
name|jec
parameter_list|)
throws|throws
name|JobExecutionException
block|{
name|JobDataMap
name|jobDataMap
init|=
name|jec
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
name|BrokerPool
name|pool
init|=
operator|(
name|BrokerPool
operator|)
name|jobDataMap
operator|.
name|get
argument_list|(
literal|"brokerpool"
argument_list|)
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|String
name|xqueryresource
init|=
operator|(
name|String
operator|)
name|jobDataMap
operator|.
name|get
argument_list|(
literal|"xqueryresource"
argument_list|)
decl_stmt|;
name|User
name|user
init|=
operator|(
name|User
operator|)
name|jobDataMap
operator|.
name|get
argument_list|(
literal|"user"
argument_list|)
decl_stmt|;
name|Properties
name|params
init|=
operator|(
name|Properties
operator|)
name|jobDataMap
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
decl_stmt|;
comment|//if invalid arguments then abort
if|if
condition|(
name|pool
operator|==
literal|null
operator|||
name|xqueryresource
operator|==
literal|null
operator|||
name|user
operator|==
literal|null
condition|)
block|{
name|abort
argument_list|(
literal|"BrokerPool or XQueryResource or User was null!"
argument_list|)
expr_stmt|;
block|}
try|try
block|{
comment|//get the xquery
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|xqueryresource
argument_list|)
decl_stmt|;
name|DocumentImpl
name|resource
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
name|Source
name|source
init|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
literal|true
argument_list|)
decl_stmt|;
comment|//execute the xquery
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryPool
name|xqPool
init|=
name|xquery
operator|.
name|getXQueryPool
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
decl_stmt|;
comment|//try and get a pre-compiled query from the pool
name|CompiledXQuery
name|compiled
init|=
name|xqPool
operator|.
name|borrowCompiledXQuery
argument_list|(
name|broker
argument_list|,
name|source
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
name|context
operator|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|REST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|context
operator|=
name|compiled
operator|.
name|getContext
argument_list|()
expr_stmt|;
block|}
comment|//TODO: don't hardcode this?
name|context
operator|.
name|setModuleLoadPath
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|.
name|append
argument_list|(
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|context
operator|.
name|setStaticallyKnownDocuments
argument_list|(
operator|new
name|XmldbURI
index|[]
block|{
name|resource
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
block|}
argument_list|)
expr_stmt|;
comment|//declare any parameters as external variables
name|String
name|bindingPrefix
init|=
name|params
operator|.
name|getProperty
argument_list|(
literal|"bindingPrefix"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bindingPrefix
operator|==
literal|null
condition|)
name|bindingPrefix
operator|=
literal|"local"
expr_stmt|;
name|Enumeration
name|paramNames
init|=
name|params
operator|.
name|keys
argument_list|()
decl_stmt|;
while|while
condition|(
name|paramNames
operator|.
name|hasMoreElements
argument_list|()
condition|)
block|{
name|String
name|name
init|=
operator|(
name|String
operator|)
name|paramNames
operator|.
name|nextElement
argument_list|()
decl_stmt|;
name|String
name|value
init|=
name|params
operator|.
name|getProperty
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|context
operator|.
name|declareVariable
argument_list|(
name|bindingPrefix
operator|+
literal|":"
operator|+
name|name
argument_list|,
operator|new
name|StringValue
argument_list|(
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|compiled
operator|==
literal|null
condition|)
block|{
try|try
block|{
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
name|source
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|abort
argument_list|(
literal|"Failed to read query from "
operator|+
name|resource
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
try|try
block|{
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|//return the compiled query to the pool
name|xqPool
operator|.
name|returnCompiledXQuery
argument_list|(
name|source
argument_list|,
name|compiled
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|ee
parameter_list|)
block|{
name|abort
argument_list|(
literal|"Could not get DBBroker!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|pde
parameter_list|)
block|{
name|abort
argument_list|(
literal|"Permission denied for the scheduling user: "
operator|+
name|user
operator|.
name|getName
argument_list|()
operator|+
literal|"!"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|xpe
parameter_list|)
block|{
name|abort
argument_list|(
literal|"XPathException in the Job: "
operator|+
name|xpe
operator|.
name|getMessage
argument_list|()
operator|+
literal|"!"
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
comment|// Release the DBBroker
if|if
condition|(
name|pool
operator|!=
literal|null
operator|&&
name|broker
operator|!=
literal|null
condition|)
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|abort
parameter_list|(
name|String
name|message
parameter_list|)
throws|throws
name|JobExecutionException
block|{
comment|//abort all triggers for this job
name|JobExecutionException
name|jaa
init|=
operator|new
name|JobExecutionException
argument_list|(
literal|"UserXQueryJob Failed: "
operator|+
name|message
operator|+
literal|" Unscheduling UserXQueryJob."
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|jaa
operator|.
name|setUnscheduleAllTriggers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
throw|throw
name|jaa
throw|;
block|}
block|}
end_class

end_unit

