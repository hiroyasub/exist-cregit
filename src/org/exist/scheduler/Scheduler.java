begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2006 The eXist team  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software Foundation  *  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|scheduler
package|;
end_package

begin_import
import|import
name|java
operator|.
name|text
operator|.
name|ParseException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Calendar
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|CronTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDetail
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SimpleTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SchedulerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SchedulerFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|impl
operator|.
name|StdSchedulerFactory
import|;
end_import

begin_comment
comment|/**  * A Scheduler to trigger System and User defined jobs  *  * @author Adam Retter<adam.retter@devon.gov.uk>  */
end_comment

begin_class
specifier|public
class|class
name|Scheduler
block|{
specifier|public
specifier|static
specifier|final
name|String
name|PROPERTY_SCHEDULER_JOBS
init|=
literal|"scheduler.jobs"
decl_stmt|;
comment|//the scheduler
specifier|private
name|org
operator|.
name|quartz
operator|.
name|Scheduler
name|scheduler
init|=
literal|null
decl_stmt|;
comment|//the brokerpool for this scheduler
specifier|private
name|BrokerPool
name|brokerpool
init|=
literal|null
decl_stmt|;
comment|/** 	 * Create and Start a new Scheduler 	 *  	 * @param brokerpool	The brokerpool for which this scheduler is intended 	 */
specifier|public
name|Scheduler
parameter_list|(
name|BrokerPool
name|brokerpool
parameter_list|,
name|Configuration
name|config
parameter_list|)
throws|throws
name|EXistException
block|{
name|this
operator|.
name|brokerpool
operator|=
name|brokerpool
expr_stmt|;
try|try
block|{
comment|//load the properties for quartz
name|InputStream
name|is
init|=
name|Scheduler
operator|.
name|class
operator|.
name|getResourceAsStream
argument_list|(
literal|"quartz.properties"
argument_list|)
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
try|try
block|{
name|properties
operator|.
name|load
argument_list|(
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Failed to load scheduler settings from org/exist/scheduler/quartz.properties"
argument_list|)
throw|;
block|}
name|SchedulerFactory
name|schedulerFactory
init|=
operator|new
name|StdSchedulerFactory
argument_list|(
name|properties
argument_list|)
decl_stmt|;
name|scheduler
operator|=
name|schedulerFactory
operator|.
name|getScheduler
argument_list|()
expr_stmt|;
comment|//start quartz
name|scheduler
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"Unable to create Scheduler"
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * Shutdown the running Scheduler 	 *  	 * Asynchronous method. use isShutdown() to determine if the 	 * Scheduler has Shutdown 	 */
specifier|public
name|void
name|shutdown
parameter_list|(
name|boolean
name|waitForJobsToComplete
parameter_list|)
block|{
try|try
block|{
name|scheduler
operator|.
name|shutdown
argument_list|(
name|waitForJobsToComplete
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
comment|//TODO: LOG something here!?!
block|}
block|}
specifier|public
name|boolean
name|isShutdown
parameter_list|()
block|{
try|try
block|{
return|return
name|scheduler
operator|.
name|isShutdown
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
comment|//TODO: LOG something here!?!
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * @param period	The period, in milliseconds. 	 * @param job 	The job to trigger after each period 	 * @param startNow	true if the cycle should start with execution 	 * of the task now. Otherwise, the cycle starts with a delay of 	 *<code>period</code> milliseconds. 	 *  	 * @return	true if thejob was successfully scheduled, false otherwise 	 */
specifier|public
name|boolean
name|createPeriodicJob
parameter_list|(
name|long
name|period
parameter_list|,
name|JobDescription
name|job
parameter_list|,
name|boolean
name|startNow
parameter_list|)
block|{
return|return
name|createPeriodicJob
argument_list|(
name|period
argument_list|,
name|job
argument_list|,
name|startNow
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** 	 * @param period	The period, in milliseconds. 	 * @param job 	The job to trigger after each period 	 * @param startNow	true if the cycle should start with execution 	 * of the task now. Otherwise, the cycle starts with a delay of 	 *<code>period</code> milliseconds. 	 * @param params	Any parameters to pass to the job 	 *  	 * @return	true if thejob was successfully scheduled, false otherwise 	 */
specifier|public
name|boolean
name|createPeriodicJob
parameter_list|(
name|long
name|period
parameter_list|,
name|JobDescription
name|job
parameter_list|,
name|boolean
name|startNow
parameter_list|,
name|Map
name|params
parameter_list|)
block|{
comment|//Create the job details
name|JobDetail
name|jobDetail
init|=
operator|new
name|JobDetail
argument_list|(
name|job
operator|.
name|getName
argument_list|()
argument_list|,
name|job
operator|.
name|getGroup
argument_list|()
argument_list|,
name|job
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|//Setup the jobs's data map
name|JobDataMap
name|jobDataMap
init|=
name|jobDetail
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
name|setupJobDataMap
argument_list|(
name|job
argument_list|,
name|jobDataMap
argument_list|,
name|params
argument_list|)
expr_stmt|;
comment|//setup a trigger for the job, millisecond based
name|SimpleTrigger
name|trigger
init|=
operator|new
name|SimpleTrigger
argument_list|()
decl_stmt|;
name|trigger
operator|.
name|setRepeatInterval
argument_list|(
name|period
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|setRepeatCount
argument_list|(
name|SimpleTrigger
operator|.
name|REPEAT_INDEFINITELY
argument_list|)
expr_stmt|;
comment|//when should the trigger start
if|if
condition|(
name|startNow
condition|)
block|{
comment|//start now
name|trigger
operator|.
name|setStartTime
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//start after period
name|Calendar
name|start
init|=
name|Calendar
operator|.
name|getInstance
argument_list|()
decl_stmt|;
name|start
operator|.
name|add
argument_list|(
name|Calendar
operator|.
name|MILLISECOND
argument_list|,
operator|(
name|int
operator|)
name|period
argument_list|)
expr_stmt|;
name|trigger
operator|.
name|setStartTime
argument_list|(
name|start
operator|.
name|getTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//set the trigger's name
name|trigger
operator|.
name|setName
argument_list|(
name|job
operator|.
name|getName
argument_list|()
operator|+
literal|" Trigger"
argument_list|)
expr_stmt|;
comment|//schedule the job
try|try
block|{
name|scheduler
operator|.
name|scheduleJob
argument_list|(
name|jobDetail
argument_list|,
name|trigger
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
comment|//Failed to schedule Job
return|return
literal|false
return|;
block|}
comment|//Succesfully scheduled Job
return|return
literal|true
return|;
block|}
comment|/** 	 * @param cronExpression	The Cron scheduling expression 	 * @param job 	The job to trigger after each period 	 *  	 * @return	true if thejob was successfully scheduled, false otherwise 	 */
specifier|public
name|boolean
name|createCronJob
parameter_list|(
name|String
name|cronExpression
parameter_list|,
name|JobDescription
name|job
parameter_list|)
block|{
return|return
name|createCronJob
argument_list|(
name|cronExpression
argument_list|,
name|job
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|/** 	 * @param cronExpression	The Cron scheduling expression 	 * @param job 	The job to trigger after each period 	 * @param params	Any parameters to pass to the job 	 *  	 * @return	true if thejob was successfully scheduled, false otherwise 	 */
specifier|public
name|boolean
name|createCronJob
parameter_list|(
name|String
name|cronExpression
parameter_list|,
name|JobDescription
name|job
parameter_list|,
name|Map
name|params
parameter_list|)
block|{
comment|//Create the job details
name|JobDetail
name|jobDetail
init|=
operator|new
name|JobDetail
argument_list|(
name|job
operator|.
name|getName
argument_list|()
argument_list|,
name|job
operator|.
name|getGroup
argument_list|()
argument_list|,
name|job
operator|.
name|getClass
argument_list|()
argument_list|)
decl_stmt|;
comment|//Setup the jobs's data map
name|JobDataMap
name|jobDataMap
init|=
name|jobDetail
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
name|setupJobDataMap
argument_list|(
name|job
argument_list|,
name|jobDataMap
argument_list|,
name|params
argument_list|)
expr_stmt|;
try|try
block|{
comment|//setup a trigger for the job, cron based
name|CronTrigger
name|trigger
init|=
operator|new
name|CronTrigger
argument_list|(
name|job
operator|.
name|getName
argument_list|()
operator|+
literal|" Trigger"
argument_list|,
name|job
operator|.
name|getGroup
argument_list|()
argument_list|,
name|cronExpression
argument_list|)
decl_stmt|;
comment|//schedule the job
name|scheduler
operator|.
name|scheduleJob
argument_list|(
name|jobDetail
argument_list|,
name|trigger
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ParseException
name|pe
parameter_list|)
block|{
comment|//Failed to schedule Job
return|return
literal|false
return|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
comment|//Failed to schedule Job
return|return
literal|false
return|;
block|}
comment|//Succesfully scheduled Job
return|return
literal|true
return|;
block|}
comment|/** 	 * Removes a Job from the Scheduler 	 *  	 * @param jobName	The name of the Job 	 * @param jobGroup The group that the Job was Scheduled in 	 *  	 * @return true if the job was deleted, false otherwise 	 */
specifier|public
name|boolean
name|deleteJob
parameter_list|(
name|String
name|jobName
parameter_list|,
name|String
name|jobGroup
parameter_list|)
block|{
try|try
block|{
return|return
name|scheduler
operator|.
name|deleteJob
argument_list|(
name|jobName
argument_list|,
name|jobGroup
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
comment|/** 	 * Pauses a Job with the Scheduler 	 *  	 * @param jobName	The name of the Job 	 * @param jobGroup The group that the Job was Scheduled in 	 */
specifier|public
name|void
name|pauseJob
parameter_list|(
name|String
name|jobName
parameter_list|,
name|String
name|jobGroup
parameter_list|)
block|{
try|try
block|{
name|scheduler
operator|.
name|pauseJob
argument_list|(
name|jobName
argument_list|,
name|jobGroup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
block|}
block|}
comment|/** 	 * Resume a Job with the Scheduler 	 *  	 * @param jobName	The name of the Job 	 * @param jobGroup The group that the Job was Scheduled in 	 */
specifier|public
name|void
name|resumeJob
parameter_list|(
name|String
name|jobName
parameter_list|,
name|String
name|jobGroup
parameter_list|)
block|{
try|try
block|{
name|scheduler
operator|.
name|resumeJob
argument_list|(
name|jobName
argument_list|,
name|jobGroup
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
block|}
block|}
comment|/** 	 * Get's the names of the Job groups 	 *  	 * @return String array of the Job group names 	 */
specifier|public
name|String
index|[]
name|getJobGroupNames
parameter_list|()
block|{
try|try
block|{
return|return
name|scheduler
operator|.
name|getJobGroupNames
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 * Get's information about currently Scheduled Job's 	 *  	 * @return An array of ScheduledJobInfo 	 */
specifier|public
name|ScheduledJobInfo
index|[]
name|getScheduledJobs
parameter_list|()
block|{
name|ArrayList
name|jobs
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
comment|//get the trigger groups
name|String
index|[]
name|trigGroups
init|=
name|scheduler
operator|.
name|getTriggerGroupNames
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|tg
init|=
literal|0
init|;
name|tg
operator|<
name|trigGroups
operator|.
name|length
condition|;
name|tg
operator|++
control|)
block|{
comment|//get the trigger names for the trigger group
name|String
index|[]
name|trigNames
init|=
name|scheduler
operator|.
name|getTriggerNames
argument_list|(
name|trigGroups
index|[
name|tg
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|tn
init|=
literal|0
init|;
name|tn
operator|<
name|trigNames
operator|.
name|length
condition|;
name|tn
operator|++
control|)
block|{
comment|//add information about the job to the result
name|jobs
operator|.
name|add
argument_list|(
operator|new
name|ScheduledJobInfo
argument_list|(
name|scheduler
argument_list|,
name|scheduler
operator|.
name|getTrigger
argument_list|(
name|trigNames
index|[
name|tn
index|]
argument_list|,
name|trigGroups
index|[
name|tg
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|SchedulerException
name|se
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
comment|//copy the array list to a correctly typed array
name|Object
index|[]
name|oJobsArray
init|=
name|jobs
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|ScheduledJobInfo
index|[]
name|jobsArray
init|=
operator|new
name|ScheduledJobInfo
index|[
name|oJobsArray
operator|.
name|length
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|oJobsArray
argument_list|,
literal|0
argument_list|,
name|jobsArray
argument_list|,
literal|0
argument_list|,
name|oJobsArray
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|jobsArray
return|;
block|}
comment|/** 	 * Set's up all the job's that are listed in conf.xml and loaded 	 * through org.exist.util.Configuration 	 */
specifier|public
name|void
name|setupConfiguredJobs
parameter_list|(
name|Configuration
name|config
parameter_list|)
block|{
name|String
name|jobList
index|[]
index|[]
init|=
operator|(
name|String
index|[]
index|[]
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|Scheduler
operator|.
name|PROPERTY_SCHEDULER_JOBS
argument_list|)
decl_stmt|;
if|if
condition|(
name|jobList
operator|==
literal|null
condition|)
return|return;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|jobList
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|jobResource
init|=
name|jobList
index|[
name|i
index|]
index|[
literal|0
index|]
decl_stmt|;
name|String
name|jobSchedule
init|=
name|jobList
index|[
name|i
index|]
index|[
literal|1
index|]
decl_stmt|;
comment|//must be a resource and a schedule
if|if
condition|(
name|jobResource
operator|==
literal|null
operator|||
name|jobSchedule
operator|==
literal|null
condition|)
return|return;
name|JobDescription
name|job
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|jobResource
operator|.
name|startsWith
argument_list|(
literal|"/db/"
argument_list|)
condition|)
block|{
comment|//create an xquery job
name|User
name|guestUser
init|=
name|brokerpool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getUser
argument_list|(
name|SecurityManager
operator|.
name|GUEST_USER
argument_list|)
decl_stmt|;
name|job
operator|=
operator|new
name|UserXQueryJob
argument_list|(
name|jobResource
argument_list|,
name|guestUser
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//create a java job
try|try
block|{
comment|//Check if the Class is a UserJob
name|Class
name|jobClass
init|=
name|Class
operator|.
name|forName
argument_list|(
name|jobResource
argument_list|)
decl_stmt|;
name|job
operator|=
operator|(
name|JobDescription
operator|)
name|jobClass
operator|.
name|newInstance
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|job
operator|instanceof
name|UserJavaJob
operator|)
condition|)
block|{
return|return;
block|}
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|iae
parameter_list|)
block|{
return|return;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ie
parameter_list|)
block|{
return|return;
block|}
block|}
comment|//trigger is cron or period?
if|if
condition|(
name|jobSchedule
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
comment|//schedule job with cron trigger
name|createCronJob
argument_list|(
name|jobSchedule
argument_list|,
name|job
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//schedule job with periodic trigger
name|long
name|period
init|=
name|Long
operator|.
name|parseLong
argument_list|(
name|jobSchedule
argument_list|)
decl_stmt|;
name|createPeriodicJob
argument_list|(
name|period
argument_list|,
name|job
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/** 	 * Sets up the Job's Data Map 	 *  	 * @param job	The Job 	 * @param jobDataMap	The Job's Data Map 	 * @param params	Any parameters for the job 	 */
specifier|private
name|void
name|setupJobDataMap
parameter_list|(
name|JobDescription
name|job
parameter_list|,
name|JobDataMap
name|jobDataMap
parameter_list|,
name|Map
name|params
parameter_list|)
block|{
comment|//if this is a system job, store the brokerpool in the job's data map
name|jobDataMap
operator|.
name|put
argument_list|(
literal|"brokerpool"
argument_list|,
name|brokerpool
argument_list|)
expr_stmt|;
comment|//if this is a system task job, store the systemtask in the job's data map
if|if
condition|(
name|job
operator|instanceof
name|SystemTaskJob
condition|)
block|{
name|jobDataMap
operator|.
name|put
argument_list|(
literal|"systemtask"
argument_list|,
operator|(
operator|(
name|SystemTaskJob
operator|)
name|job
operator|)
operator|.
name|getSystemTask
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//if this is a users xquery job, store the xquery resource and user in the job's data map
if|if
condition|(
name|job
operator|instanceof
name|UserXQueryJob
condition|)
block|{
name|jobDataMap
operator|.
name|put
argument_list|(
literal|"xqueryresource"
argument_list|,
operator|(
operator|(
name|UserXQueryJob
operator|)
name|job
operator|)
operator|.
name|getXQueryResource
argument_list|()
argument_list|)
expr_stmt|;
name|jobDataMap
operator|.
name|put
argument_list|(
literal|"user"
argument_list|,
operator|(
operator|(
name|UserXQueryJob
operator|)
name|job
operator|)
operator|.
name|getUser
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//copy any parameters into the job's data map
if|if
condition|(
name|params
operator|!=
literal|null
condition|)
block|{
name|jobDataMap
operator|.
name|put
argument_list|(
literal|"params"
argument_list|,
name|params
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

