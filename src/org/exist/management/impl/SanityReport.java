begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|backup
operator|.
name|ErrorReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|ConsistencyCheckTask
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|SystemTask
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|AttributeChangeNotification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|MBeanNotificationInfo
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|Notification
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|NotificationBroadcasterSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenDataException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|OpenType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|SimpleType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularDataSupport
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularType
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|LinkedList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_class
specifier|public
class|class
name|SanityReport
extends|extends
name|NotificationBroadcasterSupport
implements|implements
name|SanityReportMBean
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|SanityReport
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|STATUS_OK
init|=
literal|"OK"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|STATUS_FAIL
init|=
literal|"FAIL"
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|itemNames
init|=
block|{
literal|"errcode"
block|,
literal|"description"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|itemDescriptions
init|=
block|{
literal|"Error code"
block|,
literal|"Description of the error"
block|}
decl_stmt|;
specifier|private
specifier|static
name|String
index|[]
name|indexNames
init|=
block|{
literal|"errcode"
block|}
decl_stmt|;
specifier|private
specifier|static
name|List
name|NO_ERRORS
init|=
operator|new
name|LinkedList
argument_list|()
decl_stmt|;
specifier|private
name|int
name|seqNum
init|=
literal|0
decl_stmt|;
specifier|private
name|Date
name|lastCheckStart
init|=
literal|null
decl_stmt|;
specifier|private
name|Date
name|lastCheckEnd
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|status
init|=
name|STATUS_OK
decl_stmt|;
specifier|private
name|List
name|errors
init|=
name|NO_ERRORS
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|public
name|SanityReport
parameter_list|(
name|BrokerPool
name|pool
parameter_list|)
block|{
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
block|}
specifier|public
name|MBeanNotificationInfo
index|[]
name|getNotificationInfo
parameter_list|()
block|{
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[]
block|{
name|AttributeChangeNotification
operator|.
name|ATTRIBUTE_CHANGE
block|}
decl_stmt|;
name|String
name|name
init|=
name|AttributeChangeNotification
operator|.
name|class
operator|.
name|getName
argument_list|()
decl_stmt|;
name|String
name|description
init|=
literal|"The status attribute of this MBean has changed"
decl_stmt|;
name|MBeanNotificationInfo
name|info
init|=
operator|new
name|MBeanNotificationInfo
argument_list|(
name|types
argument_list|,
name|name
argument_list|,
name|description
argument_list|)
decl_stmt|;
return|return
operator|new
name|MBeanNotificationInfo
index|[]
block|{
name|info
block|}
return|;
block|}
specifier|public
name|Date
name|getLastCheckEnd
parameter_list|()
block|{
return|return
name|lastCheckEnd
return|;
block|}
specifier|public
name|Date
name|getLastCheckStart
parameter_list|()
block|{
return|return
name|lastCheckStart
return|;
block|}
specifier|public
name|String
name|getStatus
parameter_list|()
block|{
return|return
name|status
return|;
block|}
specifier|public
name|TabularData
name|getErrors
parameter_list|()
block|{
name|OpenType
index|[]
name|itemTypes
init|=
block|{
name|SimpleType
operator|.
name|STRING
block|,
name|SimpleType
operator|.
name|STRING
block|}
decl_stmt|;
name|CompositeType
name|infoType
decl_stmt|;
try|try
block|{
name|infoType
operator|=
operator|new
name|CompositeType
argument_list|(
literal|"errorInfo"
argument_list|,
literal|"Provides information on a consistency check error"
argument_list|,
name|itemNames
argument_list|,
name|itemDescriptions
argument_list|,
name|itemTypes
argument_list|)
expr_stmt|;
name|TabularType
name|tabularType
init|=
operator|new
name|TabularType
argument_list|(
literal|"errorList"
argument_list|,
literal|"List of consistency check errors"
argument_list|,
name|infoType
argument_list|,
name|indexNames
argument_list|)
decl_stmt|;
name|TabularDataSupport
name|data
init|=
operator|new
name|TabularDataSupport
argument_list|(
name|tabularType
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|errors
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ErrorReport
name|error
init|=
operator|(
name|ErrorReport
operator|)
name|errors
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|Object
index|[]
name|itemValues
init|=
block|{
name|error
operator|.
name|getErrcodeString
argument_list|()
block|,
name|error
operator|.
name|getMessage
argument_list|()
block|}
decl_stmt|;
name|data
operator|.
name|put
argument_list|(
operator|new
name|CompositeDataSupport
argument_list|(
name|infoType
argument_list|,
name|itemNames
argument_list|,
name|itemValues
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
catch|catch
parameter_list|(
name|OpenDataException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|void
name|triggerCheck
parameter_list|()
block|{
try|try
block|{
name|SystemTask
name|task
init|=
operator|new
name|ConsistencyCheckTask
argument_list|()
decl_stmt|;
name|Properties
name|properties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|task
operator|.
name|configure
argument_list|(
name|pool
operator|.
name|getConfiguration
argument_list|()
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|pool
operator|.
name|triggerSystemTask
argument_list|(
name|task
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Failed to trigger db sanity check: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|protected
name|void
name|updateErrors
parameter_list|(
name|List
name|errorList
parameter_list|,
name|long
name|startTime
parameter_list|)
block|{
name|long
name|endTime
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
name|String
name|oldStatus
init|=
name|this
operator|.
name|status
decl_stmt|;
if|if
condition|(
name|errorList
operator|==
literal|null
operator|||
name|errorList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|this
operator|.
name|status
operator|=
name|STATUS_OK
expr_stmt|;
name|this
operator|.
name|errors
operator|=
name|NO_ERRORS
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|errors
operator|=
name|errorList
expr_stmt|;
name|this
operator|.
name|status
operator|=
name|STATUS_FAIL
expr_stmt|;
block|}
name|this
operator|.
name|lastCheckStart
operator|=
operator|new
name|Date
argument_list|(
name|startTime
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastCheckEnd
operator|=
operator|new
name|Date
argument_list|(
name|endTime
argument_list|)
expr_stmt|;
name|Notification
name|event
init|=
operator|new
name|AttributeChangeNotification
argument_list|(
name|this
argument_list|,
name|seqNum
operator|++
argument_list|,
name|endTime
argument_list|,
literal|"Consistency errors found"
argument_list|,
literal|"status"
argument_list|,
literal|"String"
argument_list|,
name|oldStatus
argument_list|,
name|this
operator|.
name|status
argument_list|)
decl_stmt|;
name|event
operator|.
name|setUserData
argument_list|(
name|this
operator|.
name|status
argument_list|)
expr_stmt|;
name|sendNotification
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

