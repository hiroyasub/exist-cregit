begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-08 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|FileStore
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|journal
operator|.
name|Journal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|function
operator|.
name|FunctionE
import|;
end_import

begin_comment
comment|/**  * Class DiskUsage. Retrieves data from the java File object  *  * @author dizzzz@exist-db.org  */
end_comment

begin_class
specifier|public
class|class
name|DiskUsage
implements|implements
name|DiskUsageMBean
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|DiskUsage
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Optional
argument_list|<
name|Path
argument_list|>
name|journalDir
decl_stmt|;
specifier|private
name|Optional
argument_list|<
name|Path
argument_list|>
name|dataDir
decl_stmt|;
specifier|public
name|DiskUsage
parameter_list|(
specifier|final
name|BrokerPool
name|pool
parameter_list|)
block|{
specifier|final
name|Configuration
name|config
init|=
name|pool
operator|.
name|getConfiguration
argument_list|()
decl_stmt|;
name|this
operator|.
name|journalDir
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
operator|(
name|Path
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|Journal
operator|.
name|PROPERTY_RECOVERY_JOURNAL_DIR
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Files
operator|::
name|isDirectory
argument_list|)
expr_stmt|;
name|this
operator|.
name|dataDir
operator|=
name|Optional
operator|.
name|ofNullable
argument_list|(
operator|(
name|Path
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|BrokerPool
operator|.
name|PROPERTY_DATA_DIR
argument_list|)
argument_list|)
operator|.
name|filter
argument_list|(
name|Files
operator|::
name|isDirectory
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDataDirectory
parameter_list|()
block|{
return|return
name|dataDir
operator|.
name|map
argument_list|(
name|d
lambda|->
name|d
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
name|NOT_CONFIGURED
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getJournalDirectory
parameter_list|()
block|{
return|return
name|journalDir
operator|.
name|map
argument_list|(
name|d
lambda|->
name|d
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
operator|.
name|orElse
argument_list|(
name|NOT_CONFIGURED
argument_list|)
return|;
block|}
specifier|private
name|long
name|measureFileStore
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|path
parameter_list|,
specifier|final
name|FunctionE
argument_list|<
name|FileStore
argument_list|,
name|Long
argument_list|,
name|IOException
argument_list|>
name|measurement
parameter_list|)
block|{
return|return
name|path
operator|.
name|map
argument_list|(
name|p
lambda|->
block|{
try|try
block|{
return|return
name|measurement
operator|.
name|apply
argument_list|(
name|Files
operator|.
name|getFileStore
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
name|NO_VALUE
return|;
block|}
block|}
argument_list|)
operator|.
name|orElse
argument_list|(
name|NO_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDataDirectoryTotalSpace
parameter_list|()
block|{
return|return
name|measureFileStore
argument_list|(
name|dataDir
argument_list|,
name|fs
lambda|->
name|fs
operator|.
name|getTotalSpace
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDataDirectoryUsableSpace
parameter_list|()
block|{
return|return
name|measureFileStore
argument_list|(
name|dataDir
argument_list|,
name|fs
lambda|->
name|fs
operator|.
name|getUsableSpace
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getJournalDirectoryTotalSpace
parameter_list|()
block|{
return|return
name|measureFileStore
argument_list|(
name|journalDir
argument_list|,
name|fs
lambda|->
name|fs
operator|.
name|getTotalSpace
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getJournalDirectoryUsableSpace
parameter_list|()
block|{
return|return
name|measureFileStore
argument_list|(
name|journalDir
argument_list|,
name|fs
lambda|->
name|fs
operator|.
name|getUsableSpace
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getDataDirectoryUsedSpace
parameter_list|()
block|{
return|return
name|dataDir
operator|.
name|map
argument_list|(
name|d
lambda|->
block|{
try|try
block|{
return|return
name|Files
operator|.
name|list
argument_list|(
name|d
argument_list|)
operator|.
name|filter
argument_list|(
name|this
operator|::
name|isDbxFile
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|p
lambda|->
block|{
specifier|final
name|long
name|size
init|=
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|p
argument_list|)
decl_stmt|;
return|return
name|size
operator|==
name|NO_VALUE
condition|?
literal|0
else|:
name|size
return|;
block|}
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
name|NO_VALUE
return|;
block|}
block|}
argument_list|)
operator|.
name|orElse
argument_list|(
name|NO_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getJournalDirectoryUsedSpace
parameter_list|()
block|{
return|return
name|dataDir
operator|.
name|map
argument_list|(
name|d
lambda|->
block|{
try|try
block|{
return|return
name|Files
operator|.
name|list
argument_list|(
name|d
argument_list|)
operator|.
name|filter
argument_list|(
name|this
operator|::
name|isJournalFile
argument_list|)
operator|.
name|mapToLong
argument_list|(
name|p
lambda|->
block|{
specifier|final
name|long
name|size
init|=
name|FileUtils
operator|.
name|sizeQuietly
argument_list|(
name|p
argument_list|)
decl_stmt|;
return|return
name|size
operator|==
name|NO_VALUE
condition|?
literal|0
else|:
name|size
return|;
block|}
argument_list|)
operator|.
name|sum
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
name|NO_VALUE
return|;
block|}
block|}
argument_list|)
operator|.
name|orElse
argument_list|(
name|NO_VALUE
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|long
name|getJournalDirectoryNumberOfFiles
parameter_list|()
block|{
return|return
name|journalDir
operator|.
name|map
argument_list|(
name|j
lambda|->
block|{
try|try
block|{
return|return
name|Files
operator|.
name|list
argument_list|(
name|j
argument_list|)
operator|.
name|filter
argument_list|(
name|this
operator|::
name|isJournalFile
argument_list|)
operator|.
name|count
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
return|return
name|NO_VALUE
return|;
block|}
block|}
argument_list|)
operator|.
name|orElse
argument_list|(
name|NO_VALUE
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isJournalFile
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
return|return
name|FileUtils
operator|.
name|fileName
argument_list|(
name|path
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".log"
argument_list|)
return|;
block|}
specifier|private
name|boolean
name|isDbxFile
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
return|return
name|FileUtils
operator|.
name|fileName
argument_list|(
name|path
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".dbx"
argument_list|)
return|;
block|}
block|}
end_class

end_unit

