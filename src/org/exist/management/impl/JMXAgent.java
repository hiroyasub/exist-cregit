begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|impl
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|Agent
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_comment
comment|/**  * Real implementation of interface {@link org.exist.management.Agent}  * which registers MBeans with the MBeanServer.  */
end_comment

begin_class
specifier|public
class|class
name|JMXAgent
implements|implements
name|Agent
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|JMXAgent
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|Agent
name|agent
init|=
literal|null
decl_stmt|;
specifier|public
specifier|static
name|Agent
name|getInstance
parameter_list|()
block|{
if|if
condition|(
name|agent
operator|==
literal|null
condition|)
name|agent
operator|=
operator|new
name|JMXAgent
argument_list|()
expr_stmt|;
return|return
name|agent
return|;
block|}
specifier|private
name|MBeanServer
name|server
decl_stmt|;
specifier|private
name|Map
name|registeredMBeans
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|public
name|JMXAgent
parameter_list|()
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Creating the JMX MBeanServer."
argument_list|)
expr_stmt|;
name|ArrayList
name|servers
init|=
name|MBeanServerFactory
operator|.
name|findMBeanServer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|servers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|server
operator|=
operator|(
name|MBeanServer
operator|)
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
else|else
name|server
operator|=
name|MBeanServerFactory
operator|.
name|createMBeanServer
argument_list|()
expr_stmt|;
comment|//        try {
comment|//            JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://127.0.0.1:9999/server");
comment|//            JMXConnectorServer cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, server);
comment|//            cs.start();
comment|//        } catch (IOException e) {
comment|//            LOG.warn("ERROR: failed to initialize JMX connector: " + e.getMessage(), e);
comment|//        }
name|registerSystemMBeans
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|synchronized
name|void
name|registerSystemMBeans
parameter_list|()
block|{
try|try
block|{
name|ObjectName
name|name
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management:type=LockManager"
argument_list|)
decl_stmt|;
name|addMBean
argument_list|(
name|name
argument_list|,
operator|new
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|impl
operator|.
name|LockManager
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while registering cache mbean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while registering cache mbean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|initDBInstance
parameter_list|(
name|BrokerPool
name|instance
parameter_list|)
block|{
try|try
block|{
name|addMBean
argument_list|(
name|instance
operator|.
name|getId
argument_list|()
argument_list|,
literal|"org.exist.management."
operator|+
name|instance
operator|.
name|getId
argument_list|()
operator|+
literal|":type=Database"
argument_list|,
operator|new
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|impl
operator|.
name|Database
argument_list|(
name|instance
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DatabaseConfigurationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception while registering database mbean."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|closeDBInstance
parameter_list|(
name|BrokerPool
name|instance
parameter_list|)
block|{
try|try
block|{
name|Stack
name|stack
init|=
operator|(
name|Stack
operator|)
name|registeredMBeans
operator|.
name|get
argument_list|(
name|instance
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ObjectName
name|on
init|=
operator|(
name|ObjectName
operator|)
name|stack
operator|.
name|pop
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"deregistering JMX MBean: "
operator|+
name|on
argument_list|)
expr_stmt|;
name|server
operator|.
name|unregisterMBean
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InstanceNotFoundException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem found while unregistering JMX"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|MBeanRegistrationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem found while unregistering JMX"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|synchronized
name|void
name|addMBean
parameter_list|(
name|String
name|dbInstance
parameter_list|,
name|String
name|name
parameter_list|,
name|Object
name|mbean
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
try|try
block|{
name|ObjectName
name|on
init|=
operator|new
name|ObjectName
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|addMBean
argument_list|(
name|on
argument_list|,
name|mbean
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbInstance
operator|!=
literal|null
condition|)
block|{
name|Stack
name|stack
init|=
operator|(
name|Stack
operator|)
name|registeredMBeans
operator|.
name|get
argument_list|(
name|dbInstance
argument_list|)
decl_stmt|;
if|if
condition|(
name|stack
operator|==
literal|null
condition|)
block|{
name|stack
operator|=
operator|new
name|Stack
argument_list|()
expr_stmt|;
name|registeredMBeans
operator|.
name|put
argument_list|(
name|dbInstance
argument_list|,
name|stack
argument_list|)
expr_stmt|;
block|}
name|stack
operator|.
name|push
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem registering mbean: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Exception while registering JMX mbean: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|addMBean
parameter_list|(
name|ObjectName
name|name
parameter_list|,
name|Object
name|mbean
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
try|try
block|{
if|if
condition|(
operator|!
name|server
operator|.
name|isRegistered
argument_list|(
name|name
argument_list|)
condition|)
name|server
operator|.
name|registerMBean
argument_list|(
name|mbean
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstanceAlreadyExistsException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem registering mbean: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Exception while registering JMX mbean: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|MBeanRegistrationException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem registering mbean: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Exception while registering JMX mbean: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|NotCompliantMBeanException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Problem registering mbean: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"Exception while registering JMX mbean: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

