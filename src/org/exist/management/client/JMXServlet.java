begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-10 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStreamWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Writer
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletConfig
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|ServletException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServlet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|DOMSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_comment
comment|/**  * A servlet to monitor the database. It returns status information for the database based  * on the JMX interface. For simplicity, the JMX beans provided by eXist  * are organized into categories. One calls the servlet with one or more  * categories in parameter "c", e.g.:  *   * /exist/jmx?c=instances&c=memory   *   * If no parameter is specified, all categories will be returned. Valid  * categories are "memory", "instances", "disk", "system", "caches",  * "locking", "processes", "sanity", "all".  *   * The servlet can also be used to test if the database is responsive by  * using parameter "operation=ping" and a timeout (t=timeout-in-milliseconds).  * For example, the following call  *   * /exist/jmx?operation=ping&t=1000  *   * will wait for a response within 1000ms. If the ping returns within the  * specified timeout, the servlet returns the attributes of the SanityReport  * JMX bean, which will include an element&lt;jmx:Status&gt;PING_OK&lt;/jmx:Status&gt;.  * If the ping takes longer than the timeout, you'll instead find an element    *&lt;jmx:error&gt; in the returned XML. In this case, additional information on  * running queries, memory consumption and database locks will be provided.  *   * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|JMXServlet
extends|extends
name|HttpServlet
block|{
specifier|private
specifier|final
specifier|static
name|Properties
name|defaultProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
specifier|private
name|JMXtoXML
name|client
decl_stmt|;
specifier|public
name|JMXServlet
parameter_list|()
block|{
block|}
specifier|protected
name|void
name|doGet
parameter_list|(
name|HttpServletRequest
name|req
parameter_list|,
name|HttpServletResponse
name|resp
parameter_list|)
throws|throws
name|ServletException
throws|,
name|IOException
block|{
name|Element
name|root
init|=
literal|null
decl_stmt|;
name|String
name|operation
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"operation"
argument_list|)
decl_stmt|;
if|if
condition|(
name|operation
operator|!=
literal|null
operator|&&
literal|"ping"
operator|.
name|equals
argument_list|(
name|operation
argument_list|)
condition|)
block|{
name|long
name|timeout
init|=
literal|5000
decl_stmt|;
name|String
name|timeoutParam
init|=
name|req
operator|.
name|getParameter
argument_list|(
literal|"t"
argument_list|)
decl_stmt|;
if|if
condition|(
name|timeoutParam
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|timeout
operator|=
name|Long
operator|.
name|parseLong
argument_list|(
name|timeoutParam
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"timeout parameter needs to be a number. Got: "
operator|+
name|timeoutParam
argument_list|)
throw|;
block|}
block|}
name|long
name|responseTime
init|=
name|client
operator|.
name|ping
argument_list|(
literal|"exist"
argument_list|,
name|timeout
argument_list|)
decl_stmt|;
if|if
condition|(
name|responseTime
operator|==
name|JMXtoXML
operator|.
name|PING_TIMEOUT
condition|)
name|root
operator|=
name|client
operator|.
name|generateXMLReport
argument_list|(
literal|"no response on ping after "
operator|+
name|timeout
operator|+
literal|"ms"
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sanity"
block|,
literal|"locking"
block|,
literal|"processes"
block|,
literal|"instances"
block|,
literal|"memory"
block|}
argument_list|)
expr_stmt|;
else|else
name|root
operator|=
name|client
operator|.
name|generateXMLReport
argument_list|(
literal|null
argument_list|,
operator|new
name|String
index|[]
block|{
literal|"sanity"
block|}
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|String
index|[]
name|categories
init|=
name|req
operator|.
name|getParameterValues
argument_list|(
literal|"c"
argument_list|)
decl_stmt|;
if|if
condition|(
name|categories
operator|==
literal|null
condition|)
name|categories
operator|=
operator|new
name|String
index|[]
block|{
literal|"all"
block|}
expr_stmt|;
name|root
operator|=
name|client
operator|.
name|generateXMLReport
argument_list|(
literal|null
argument_list|,
name|categories
argument_list|)
expr_stmt|;
block|}
name|resp
operator|.
name|setContentType
argument_list|(
literal|"application/xml"
argument_list|)
expr_stmt|;
name|Object
name|useAttribute
init|=
name|req
operator|.
name|getAttribute
argument_list|(
literal|"jmx.attribute"
argument_list|)
decl_stmt|;
if|if
condition|(
name|useAttribute
operator|!=
literal|null
condition|)
name|req
operator|.
name|setAttribute
argument_list|(
name|useAttribute
operator|.
name|toString
argument_list|()
argument_list|,
name|root
argument_list|)
expr_stmt|;
else|else
block|{
name|Writer
name|writer
init|=
operator|new
name|OutputStreamWriter
argument_list|(
name|resp
operator|.
name|getOutputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|DOMSerializer
name|streamer
init|=
operator|new
name|DOMSerializer
argument_list|(
name|writer
argument_list|,
name|defaultProperties
argument_list|)
decl_stmt|;
try|try
block|{
name|streamer
operator|.
name|serialize
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|TransformerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|ServletException
argument_list|(
literal|"Error while serializing result: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|writer
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|init
parameter_list|(
name|ServletConfig
name|config
parameter_list|)
throws|throws
name|ServletException
block|{
name|super
operator|.
name|init
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|client
operator|=
operator|new
name|JMXtoXML
argument_list|()
expr_stmt|;
name|client
operator|.
name|connect
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

