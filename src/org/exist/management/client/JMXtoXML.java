begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-10 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|client
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
operator|.
name|CLASS_LOADING_MXBEAN_NAME
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
operator|.
name|GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
operator|.
name|MEMORY_MXBEAN_NAME
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
operator|.
name|OPERATING_SYSTEM_MXBEAN_NAME
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
operator|.
name|RUNTIME_MXBEAN_NAME
import|;
end_import

begin_import
import|import static
name|java
operator|.
name|lang
operator|.
name|management
operator|.
name|ManagementFactory
operator|.
name|THREAD_MXBEAN_NAME
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeMap
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|*
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|CompositeType
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|openmbean
operator|.
name|TabularData
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnector
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXConnectorFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|management
operator|.
name|remote
operator|.
name|JMXServiceURL
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|xml
operator|.
name|DOMConfigurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|management
operator|.
name|impl
operator|.
name|SanityReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|MemTreeBuilder
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|ConfigurationHelper
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|DOMSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Utility class to output database status information from eXist's JMX interface as XML.  *  * @author wolf  *  */
end_comment

begin_class
specifier|public
class|class
name|JMXtoXML
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|JMXtoXML
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Map
argument_list|<
name|String
argument_list|,
name|ObjectName
index|[]
argument_list|>
name|CATEGORIES
init|=
operator|new
name|TreeMap
argument_list|<>
argument_list|()
decl_stmt|;
static|static
block|{
try|try
block|{
comment|// Java
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"memory"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
name|MEMORY_MXBEAN_NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"runtime"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
name|RUNTIME_MXBEAN_NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"operatingsystem"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
name|OPERATING_SYSTEM_MXBEAN_NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"thread"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
name|THREAD_MXBEAN_NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"classloading"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
name|CLASS_LOADING_MXBEAN_NAME
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// eXist
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"instances"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management.*:type=Database"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"disk"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management.*:type=DiskUsage"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"system"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management:type=SystemInfo"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"caches"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management.exist:type=CacheManager"
argument_list|)
block|,
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management.exist:type=CollectionCacheManager"
argument_list|)
block|,
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management.exist:type=CacheManager.Cache,*"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"locking"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management:type=LockManager"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"processes"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management.*:type=ProcessReport"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"sanity"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management.*.tasks:type=SanityReport"
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// Jetty
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"jetty.threads"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.eclipse.jetty.util.thread:type=queuedthreadpool,id=0"
argument_list|)
block|}
argument_list|)
expr_stmt|;
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"jetty.nio"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.eclipse.jetty.server.nio:type=selectchannelconnector,id=0"
argument_list|)
block|}
argument_list|)
expr_stmt|;
comment|// Special case: all data
name|CATEGORIES
operator|.
name|put
argument_list|(
literal|"all"
argument_list|,
operator|new
name|ObjectName
index|[]
block|{
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.*:*"
argument_list|)
block|,
operator|new
name|ObjectName
argument_list|(
literal|"java.lang:*"
argument_list|)
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedObjectNameException
decl||
name|NullPointerException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Error in initialization: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|Properties
name|defaultProperties
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|defaultProperties
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|JMX_NAMESPACE
init|=
literal|"http://exist-db.org/jmx"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|JMX_PREFIX
init|=
literal|"jmx"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|ROW_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"row"
argument_list|,
name|JMX_NAMESPACE
argument_list|,
name|JMX_PREFIX
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|JMX_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"jmx"
argument_list|,
name|JMX_NAMESPACE
argument_list|,
name|JMX_PREFIX
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|QName
name|JMX_RESULT
init|=
operator|new
name|QName
argument_list|(
literal|"result"
argument_list|,
name|JMX_NAMESPACE
argument_list|,
name|JMX_PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|JMX_RESULT_TYPE_ATTR
init|=
operator|new
name|QName
argument_list|(
literal|"class"
argument_list|,
name|JMX_NAMESPACE
argument_list|,
name|JMX_PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|JMX_CONNECTION_ATTR
init|=
operator|new
name|QName
argument_list|(
literal|"connection"
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|JMX_ERROR
init|=
operator|new
name|QName
argument_list|(
literal|"error"
argument_list|,
name|JMX_NAMESPACE
argument_list|,
name|JMX_PREFIX
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|VERSION_ATTR
init|=
operator|new
name|QName
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|long
name|PING_TIMEOUT
init|=
operator|-
literal|99
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|int
name|VERSION
init|=
literal|1
decl_stmt|;
specifier|private
specifier|final
name|MBeanServerConnection
name|platformConnection
init|=
name|ManagementFactory
operator|.
name|getPlatformMBeanServer
argument_list|()
decl_stmt|;
specifier|private
name|MBeanServerConnection
name|connection
decl_stmt|;
specifier|private
name|JMXServiceURL
name|url
decl_stmt|;
specifier|private
name|long
name|ping
init|=
operator|-
literal|1
decl_stmt|;
comment|/**      * Connect to the local JMX instance.      */
specifier|public
name|void
name|connect
parameter_list|()
block|{
specifier|final
name|ArrayList
argument_list|<
name|MBeanServer
argument_list|>
name|servers
init|=
name|MBeanServerFactory
operator|.
name|findMBeanServer
argument_list|(
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|servers
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|connection
operator|=
name|servers
operator|.
name|get
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Connect to a remote JMX instance using address and port.      *      * @param address The remote address      * @param port The report port      * @throws MalformedURLException The RMI url could not be constructed      * @throws IOException An IO error occurred      */
specifier|public
name|void
name|connect
parameter_list|(
name|String
name|address
parameter_list|,
name|int
name|port
parameter_list|)
throws|throws
name|MalformedURLException
throws|,
name|IOException
block|{
name|url
operator|=
operator|new
name|JMXServiceURL
argument_list|(
literal|"service:jmx:rmi:///jndi/rmi://"
operator|+
name|address
operator|+
literal|":"
operator|+
name|port
operator|+
literal|"/jmxrmi"
argument_list|)
expr_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|String
index|[]
argument_list|>
name|env
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|final
name|String
index|[]
name|creds
init|=
block|{
literal|"guest"
block|,
literal|"guest"
block|}
decl_stmt|;
name|env
operator|.
name|put
argument_list|(
name|JMXConnector
operator|.
name|CREDENTIALS
argument_list|,
name|creds
argument_list|)
expr_stmt|;
specifier|final
name|JMXConnector
name|jmxc
init|=
name|JMXConnectorFactory
operator|.
name|connect
argument_list|(
name|url
argument_list|,
name|env
argument_list|)
decl_stmt|;
name|connection
operator|=
name|jmxc
operator|.
name|getMBeanServerConnection
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Connected to JMX server at "
operator|+
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * Retrieve JMX output for the given categories and return a string of XML. Valid categories are "memory",      * "instances", "disk", "system", "caches", "locking", "processes", "sanity", "all".      */
specifier|public
name|String
name|generateReport
parameter_list|(
name|String
name|categories
index|[]
parameter_list|)
throws|throws
name|TransformerException
block|{
specifier|final
name|Element
name|root
init|=
name|generateXMLReport
argument_list|(
literal|null
argument_list|,
name|categories
argument_list|)
decl_stmt|;
specifier|final
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
specifier|final
name|DOMSerializer
name|streamer
init|=
operator|new
name|DOMSerializer
argument_list|(
name|writer
argument_list|,
name|defaultProperties
argument_list|)
decl_stmt|;
name|streamer
operator|.
name|serialize
argument_list|(
name|root
argument_list|)
expr_stmt|;
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * Ping the database to see if it is still responsive. This will first try to get a database broker object and if it      * succeeds, run a simple query. If the server does not respond within the given timeout, the method will return an      * error code -99 ({@link JMXtoXML#PING_TIMEOUT}). If there's an error on the server, the return value will be less      * than 0. Otherwise the return value is the response time in milliseconds.      *      * @param instance the name of the database instance (default instance is "exist")      * @param timeout a timeout in milliseconds      * @return Response time in msec, less than 0 in case of an error on server or PING_TIMEOUT when server does not      * respond in time      */
specifier|public
name|long
name|ping
parameter_list|(
name|String
name|instance
parameter_list|,
name|long
name|timeout
parameter_list|)
block|{
name|ping
operator|=
name|SanityReport
operator|.
name|PING_WAITING
expr_stmt|;
specifier|final
name|long
name|start
init|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
decl_stmt|;
specifier|final
name|Ping
name|thread
init|=
operator|new
name|Ping
argument_list|(
name|instance
argument_list|)
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
synchronized|synchronized
init|(
name|this
init|)
block|{
while|while
condition|(
name|ping
operator|==
name|SanityReport
operator|.
name|PING_WAITING
condition|)
block|{
try|try
block|{
name|wait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|InterruptedException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
operator|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
operator|-
name|start
operator|)
operator|>=
name|timeout
condition|)
block|{
return|return
name|PING_TIMEOUT
return|;
block|}
block|}
return|return
name|ping
return|;
block|}
block|}
specifier|private
class|class
name|Ping
extends|extends
name|Thread
block|{
specifier|private
name|String
name|instance
decl_stmt|;
specifier|public
name|Ping
parameter_list|(
name|String
name|instance
parameter_list|)
block|{
name|this
operator|.
name|instance
operator|=
name|instance
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|run
parameter_list|()
block|{
try|try
block|{
specifier|final
name|ObjectName
name|name
init|=
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management."
operator|+
name|instance
operator|+
literal|".tasks:type=SanityReport"
argument_list|)
decl_stmt|;
name|ping
operator|=
operator|(
name|Long
operator|)
name|connection
operator|.
name|invoke
argument_list|(
name|name
argument_list|,
literal|"ping"
argument_list|,
operator|new
name|Object
index|[]
block|{
name|Boolean
operator|.
name|TRUE
block|}
argument_list|,
operator|new
name|String
index|[]
block|{
name|boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|ping
operator|=
name|SanityReport
operator|.
name|PING_ERROR
expr_stmt|;
block|}
synchronized|synchronized
init|(
name|this
init|)
block|{
name|notifyAll
argument_list|()
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Retrieve JMX output for the given categories and return it as an XML DOM. Valid categories are "memory",      * "instances", "disk", "system", "caches", "locking", "processes", "sanity", "all".      *      * @param errcode an optional error description      * @param categories      * @return xml report      */
specifier|public
name|Element
name|generateXMLReport
parameter_list|(
name|String
name|errcode
parameter_list|,
name|String
name|categories
index|[]
parameter_list|)
block|{
specifier|final
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
name|JMX_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|VERSION_ATTR
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAttribute
argument_list|(
name|JMX_CONNECTION_ATTR
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|errcode
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|startElement
argument_list|(
name|JMX_ERROR
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|characters
argument_list|(
name|errcode
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
for|for
control|(
specifier|final
name|String
name|category
range|:
name|categories
control|)
block|{
specifier|final
name|ObjectName
index|[]
name|names
init|=
name|CATEGORIES
operator|.
name|get
argument_list|(
name|category
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|ObjectName
name|name
range|:
name|names
control|)
block|{
name|queryMBeans
argument_list|(
name|builder
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not generate XML report from JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Element
operator|)
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getNode
argument_list|(
literal|1
argument_list|)
return|;
block|}
specifier|public
name|String
name|getDataDir
parameter_list|()
block|{
try|try
block|{
specifier|final
name|Object
name|dir
init|=
name|connection
operator|.
name|getAttribute
argument_list|(
operator|new
name|ObjectName
argument_list|(
literal|"org.exist.management.exist:type=DiskUsage"
argument_list|)
argument_list|,
literal|"DataDirectory"
argument_list|)
decl_stmt|;
return|return
name|dir
operator|==
literal|null
condition|?
literal|null
else|:
name|dir
operator|.
name|toString
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|MBeanException
decl||
name|AttributeNotFoundException
decl||
name|InstanceNotFoundException
decl||
name|ReflectionException
decl||
name|IOException
decl||
name|MalformedObjectNameException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|Element
name|invoke
parameter_list|(
name|String
name|objectName
parameter_list|,
name|String
name|operation
parameter_list|,
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|InstanceNotFoundException
throws|,
name|MalformedObjectNameException
throws|,
name|MBeanException
throws|,
name|IOException
throws|,
name|ReflectionException
throws|,
name|IntrospectionException
block|{
name|ObjectName
name|name
init|=
operator|new
name|ObjectName
argument_list|(
name|objectName
argument_list|)
decl_stmt|;
name|MBeanServerConnection
name|conn
init|=
name|connection
decl_stmt|;
name|MBeanInfo
name|info
decl_stmt|;
try|try
block|{
name|info
operator|=
name|conn
operator|.
name|getMBeanInfo
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InstanceNotFoundException
name|e
parameter_list|)
block|{
name|conn
operator|=
name|platformConnection
expr_stmt|;
name|info
operator|=
name|conn
operator|.
name|getMBeanInfo
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|MBeanOperationInfo
index|[]
name|operations
init|=
name|info
operator|.
name|getOperations
argument_list|()
decl_stmt|;
for|for
control|(
name|MBeanOperationInfo
name|op
range|:
name|operations
control|)
block|{
if|if
condition|(
name|operation
operator|.
name|equals
argument_list|(
name|op
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
name|MBeanParameterInfo
index|[]
name|sig
init|=
name|op
operator|.
name|getSignature
argument_list|()
decl_stmt|;
name|Object
index|[]
name|params
init|=
operator|new
name|Object
index|[
name|sig
operator|.
name|length
index|]
decl_stmt|;
name|String
index|[]
name|types
init|=
operator|new
name|String
index|[
name|sig
operator|.
name|length
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sig
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|String
name|type
init|=
name|sig
index|[
name|i
index|]
operator|.
name|getType
argument_list|()
decl_stmt|;
name|types
index|[
name|i
index|]
operator|=
name|type
expr_stmt|;
name|params
index|[
name|i
index|]
operator|=
name|mapParameter
argument_list|(
name|type
argument_list|,
name|args
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|Object
name|result
init|=
name|conn
operator|.
name|invoke
argument_list|(
name|name
argument_list|,
name|operation
argument_list|,
name|params
argument_list|,
name|types
argument_list|)
decl_stmt|;
specifier|final
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|()
decl_stmt|;
try|try
block|{
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
name|JMX_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|VERSION_ATTR
argument_list|,
name|Integer
operator|.
name|toString
argument_list|(
name|VERSION
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|url
operator|!=
literal|null
condition|)
block|{
name|builder
operator|.
name|addAttribute
argument_list|(
name|JMX_CONNECTION_ATTR
argument_list|,
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|builder
operator|.
name|startElement
argument_list|(
name|JMX_RESULT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
name|JMX_RESULT_TYPE_ATTR
argument_list|,
name|op
operator|.
name|getReturnType
argument_list|()
argument_list|)
expr_stmt|;
name|serializeObject
argument_list|(
name|builder
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|warn
argument_list|(
literal|"Could not generate XML report from JMX: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
operator|(
name|Element
operator|)
name|builder
operator|.
name|getDocument
argument_list|()
operator|.
name|getNode
argument_list|(
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|private
name|void
name|queryMBeans
parameter_list|(
name|MemTreeBuilder
name|builder
parameter_list|,
name|ObjectName
name|query
parameter_list|)
throws|throws
name|IOException
throws|,
name|InstanceNotFoundException
throws|,
name|IntrospectionException
throws|,
name|ReflectionException
throws|,
name|SAXException
throws|,
name|AttributeNotFoundException
throws|,
name|MBeanException
throws|,
name|MalformedObjectNameException
throws|,
name|NullPointerException
block|{
name|MBeanServerConnection
name|conn
init|=
name|connection
decl_stmt|;
name|Set
argument_list|<
name|ObjectName
argument_list|>
name|beans
init|=
name|conn
operator|.
name|queryNames
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
decl_stmt|;
comment|//if the query is not found in the eXist specific MBeans server, then attempt to query the platform for it
if|if
condition|(
name|beans
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|beans
operator|=
name|platformConnection
operator|.
name|queryNames
argument_list|(
name|query
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|conn
operator|=
name|platformConnection
expr_stmt|;
block|}
comment|//TODO examine JUnit source code as alternative method
for|for
control|(
specifier|final
name|ObjectName
name|name
range|:
name|beans
control|)
block|{
specifier|final
name|MBeanInfo
name|info
init|=
name|conn
operator|.
name|getMBeanInfo
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|String
name|className
init|=
name|info
operator|.
name|getClassName
argument_list|()
decl_stmt|;
specifier|final
name|int
name|p
init|=
name|className
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|>
operator|-
literal|1
operator|&&
name|p
operator|+
literal|1
operator|<
name|className
operator|.
name|length
argument_list|()
condition|)
block|{
name|className
operator|=
name|className
operator|.
name|substring
argument_list|(
name|p
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|final
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|className
argument_list|,
name|JMX_NAMESPACE
argument_list|,
name|JMX_PREFIX
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
name|qname
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|builder
operator|.
name|addAttribute
argument_list|(
operator|new
name|QName
argument_list|(
literal|"name"
argument_list|)
argument_list|,
name|name
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|MBeanAttributeInfo
index|[]
name|beanAttribs
init|=
name|info
operator|.
name|getAttributes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|beanAttribs
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|beanAttribs
index|[
name|i
index|]
operator|.
name|isReadable
argument_list|()
condition|)
block|{
try|try
block|{
specifier|final
name|QName
name|attrQName
init|=
operator|new
name|QName
argument_list|(
name|beanAttribs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|,
name|JMX_NAMESPACE
argument_list|,
name|JMX_PREFIX
argument_list|)
decl_stmt|;
specifier|final
name|Object
name|attrib
init|=
name|conn
operator|.
name|getAttribute
argument_list|(
name|name
argument_list|,
name|beanAttribs
index|[
name|i
index|]
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
name|attrQName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializeObject
argument_list|(
name|builder
argument_list|,
name|attrib
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"exception caught: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|serializeObject
parameter_list|(
name|MemTreeBuilder
name|builder
parameter_list|,
name|Object
name|object
parameter_list|)
throws|throws
name|SAXException
block|{
if|if
condition|(
name|object
operator|==
literal|null
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|object
operator|instanceof
name|TabularData
condition|)
block|{
name|serialize
argument_list|(
name|builder
argument_list|,
operator|(
name|TabularData
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|CompositeData
condition|)
block|{
name|serialize
argument_list|(
name|builder
argument_list|,
operator|(
name|CompositeData
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|object
operator|instanceof
name|Object
index|[]
condition|)
block|{
name|serialize
argument_list|(
name|builder
argument_list|,
operator|(
name|Object
index|[]
operator|)
name|object
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|builder
operator|.
name|characters
argument_list|(
name|object
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|serialize
parameter_list|(
name|MemTreeBuilder
name|builder
parameter_list|,
name|Object
index|[]
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
for|for
control|(
specifier|final
name|Object
name|o
range|:
name|data
control|)
block|{
name|serializeObject
argument_list|(
name|builder
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|serialize
parameter_list|(
name|MemTreeBuilder
name|builder
parameter_list|,
name|CompositeData
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|CompositeType
name|type
init|=
name|data
operator|.
name|getCompositeType
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|String
name|key
range|:
name|type
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|key
argument_list|,
name|JMX_NAMESPACE
argument_list|,
name|JMX_PREFIX
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
name|qname
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializeObject
argument_list|(
name|builder
argument_list|,
name|data
operator|.
name|get
argument_list|(
name|key
argument_list|)
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|serialize
parameter_list|(
name|MemTreeBuilder
name|builder
parameter_list|,
name|TabularData
name|data
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|CompositeType
name|rowType
init|=
name|data
operator|.
name|getTabularType
argument_list|()
operator|.
name|getRowType
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Object
name|rowObj
range|:
name|data
operator|.
name|values
argument_list|()
control|)
block|{
specifier|final
name|CompositeData
name|row
init|=
operator|(
name|CompositeData
operator|)
name|rowObj
decl_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
name|ROW_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|String
name|key
range|:
name|rowType
operator|.
name|keySet
argument_list|()
control|)
block|{
specifier|final
name|Object
name|columnData
init|=
name|row
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
specifier|final
name|QName
name|columnQName
init|=
operator|new
name|QName
argument_list|(
name|key
argument_list|,
name|JMX_NAMESPACE
argument_list|,
name|JMX_PREFIX
argument_list|)
decl_stmt|;
name|builder
operator|.
name|startElement
argument_list|(
name|columnQName
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|serializeObject
argument_list|(
name|builder
argument_list|,
name|columnData
argument_list|)
expr_stmt|;
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
name|builder
operator|.
name|endElement
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|Object
name|mapParameter
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|value
parameter_list|)
block|{
if|if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"int"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|Integer
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Integer
operator|.
name|parseInt
argument_list|(
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"long"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|Long
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Long
operator|.
name|parseLong
argument_list|(
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"float"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|Float
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Float
operator|.
name|parseFloat
argument_list|(
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"double"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|Double
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Double
operator|.
name|parseDouble
argument_list|(
name|value
argument_list|)
return|;
block|}
if|else if
condition|(
name|type
operator|.
name|equals
argument_list|(
literal|"boolean"
argument_list|)
operator|||
name|type
operator|.
name|equals
argument_list|(
name|Boolean
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
return|return
name|Boolean
operator|.
name|parseBoolean
argument_list|(
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|value
return|;
block|}
block|}
comment|/**      * @param args      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
specifier|final
name|File
name|home
init|=
name|ConfigurationHelper
operator|.
name|getExistHome
argument_list|()
decl_stmt|;
name|DOMConfigurator
operator|.
name|configure
argument_list|(
operator|new
name|File
argument_list|(
name|home
argument_list|,
literal|"log4j.xml"
argument_list|)
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|JMXtoXML
name|client
init|=
operator|new
name|JMXtoXML
argument_list|()
decl_stmt|;
try|try
block|{
name|client
operator|.
name|connect
argument_list|(
literal|"localhost"
argument_list|,
literal|1099
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|client
operator|.
name|generateReport
argument_list|(
name|args
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
decl||
name|TransformerException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

