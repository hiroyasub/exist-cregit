begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.2rc2 (20030105): "XPathParser.g" -> "XPathParser.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|BasicConfigurator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LLkParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ParserSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_class
specifier|public
class|class
name|XPathParser
extends|extends
name|antlr
operator|.
name|LLkParser
implements|implements
name|XPathParserTokenTypes
block|{
specifier|protected
name|DocumentSet
name|includeDocs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
specifier|protected
name|BrokerPool
name|pool
init|=
literal|null
decl_stmt|;
specifier|protected
name|ArrayList
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|(
literal|5
argument_list|)
decl_stmt|;
specifier|protected
name|PathExpr
name|topExpr
decl_stmt|;
specifier|protected
name|Environment
name|env
init|=
literal|null
decl_stmt|;
specifier|protected
name|boolean
name|error
init|=
literal|false
decl_stmt|;
specifier|protected
name|User
name|user
decl_stmt|;
specifier|protected
specifier|static
specifier|final
name|String
index|[]
index|[]
name|internalFunctions
init|=
block|{
block|{
literal|"substring"
block|,
literal|"org.exist.xpath.FunSubstring"
block|}
block|,
block|{
literal|"not"
block|,
literal|"org.exist.xpath.FunNot"
block|}
block|,
block|{
literal|"position"
block|,
literal|"org.exist.xpath.FunPosition"
block|}
block|,
block|{
literal|"last"
block|,
literal|"org.exist.xpath.FunLast"
block|}
block|,
block|{
literal|"count"
block|,
literal|"org.exist.xpath.FunCount"
block|}
block|,
block|{
literal|"string-length"
block|,
literal|"org.exist.xpath.FunStrLength"
block|}
block|,
block|{
literal|"boolean"
block|,
literal|"org.exist.xpath.FunBoolean"
block|}
block|,
block|{
literal|"string"
block|,
literal|"org.exist.xpath.FunString"
block|}
block|,
block|{
literal|"number"
block|,
literal|"org.exist.xpath.FunNumber"
block|}
block|,
block|{
literal|"true"
block|,
literal|"org.exist.xpath.FunTrue"
block|}
block|,
block|{
literal|"false"
block|,
literal|"org.exist.xpath.FunFalse"
block|}
block|,
block|{
literal|"sum"
block|,
literal|"org.exist.xpath.FunSum"
block|}
block|,
block|{
literal|"floor"
block|,
literal|"org.exist.xpath.FunFloor"
block|}
block|,
block|{
literal|"ceiling"
block|,
literal|"org.exist.xpath.FunCeiling"
block|}
block|,
block|{
literal|"round"
block|,
literal|"org.exist.xpath.FunRound"
block|}
block|,
block|{
literal|"name"
block|,
literal|"org.exist.xpath.FunName"
block|}
block|,
block|{
literal|"match-any"
block|,
literal|"org.exist.xpath.FunKeywordMatchAny"
block|}
block|,
block|{
literal|"match-all"
block|,
literal|"org.exist.xpath.FunKeywordMatchAll"
block|}
block|,
block|{
literal|"id"
block|,
literal|"org.exist.xpath.FunId"
block|}
block|}
decl_stmt|;
specifier|public
name|XPathParser
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|User
name|user
parameter_list|,
name|TokenStream
name|lexer
parameter_list|)
block|{
name|this
argument_list|(
name|pool
argument_list|,
name|user
argument_list|,
name|lexer
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathParser
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|User
name|user
parameter_list|,
name|TokenStream
name|lexer
parameter_list|,
name|DocumentSet
name|docs
parameter_list|)
block|{
name|this
argument_list|(
name|lexer
argument_list|)
expr_stmt|;
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|env
operator|=
operator|new
name|Environment
argument_list|(
name|internalFunctions
argument_list|)
expr_stmt|;
if|if
condition|(
name|docs
operator|!=
literal|null
condition|)
name|this
operator|.
name|includeDocs
operator|=
name|docs
expr_stmt|;
try|try
block|{
name|pool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|void
name|setEnvironment
parameter_list|(
name|Environment
name|environment
parameter_list|)
block|{
name|env
operator|=
name|environment
expr_stmt|;
block|}
specifier|public
name|String
name|getErrorMsg
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exceptions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Exception
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|boolean
name|foundErrors
parameter_list|()
block|{
return|return
name|error
return|;
block|}
specifier|protected
name|void
name|handleException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XPathParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|tokenBuf
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
specifier|public
name|XPathParser
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|)
block|{
name|this
argument_list|(
name|tokenBuf
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XPathParser
parameter_list|(
name|TokenStream
name|lexer
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|lexer
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
specifier|public
name|XPathParser
parameter_list|(
name|TokenStream
name|lexer
parameter_list|)
block|{
name|this
argument_list|(
name|lexer
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathParser
parameter_list|(
name|ParserSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpointer
parameter_list|(
name|PathExpr
name|exprIn
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Token
name|id
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
block|{
name|match
argument_list|(
name|LITERAL_xpointer
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|xpointer_expr
argument_list|(
name|exprIn
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
block|{
name|id
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|exprIn
operator|.
name|setDocumentSet
argument_list|(
name|includeDocs
argument_list|)
expr_stmt|;
name|Function
name|idf
init|=
operator|new
name|FunId
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|idf
operator|.
name|addArgument
argument_list|(
operator|new
name|Literal
argument_list|(
name|id
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exprIn
operator|.
name|addPath
argument_list|(
name|idf
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|xpointer_expr
parameter_list|(
name|PathExpr
name|exprIn
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_doctype
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_xcollection
case|:
block|{
name|document_function
argument_list|(
name|exprIn
argument_list|)
expr_stmt|;
name|or_expr
argument_list|(
name|exprIn
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|exprIn
operator|.
name|setDocumentSet
argument_list|(
name|includeDocs
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|CONST
case|:
case|case
name|STAR
case|:
case|case
name|INT
case|:
case|case
name|LITERAL_text
case|:
case|case
literal|29
case|:
case|case
literal|30
case|:
case|case
name|LITERAL_contains
case|:
case|case
name|LITERAL_match
case|:
case|case
name|LITERAL_near
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|AT
case|:
case|case
name|ATTRIB_STAR
case|:
case|case
name|LITERAL_node
case|:
case|case
name|PARENT
case|:
case|case
name|SELF
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|43
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|49
case|:
block|{
name|or_expr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|RootNode
name|rootStep
init|=
operator|new
name|RootNode
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|exprIn
operator|.
name|add
argument_list|(
name|rootStep
argument_list|)
expr_stmt|;
name|exprIn
operator|.
name|addPath
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|exprIn
operator|.
name|setDocumentSet
argument_list|(
name|includeDocs
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|handleException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|document_function
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Token
name|arg3
init|=
literal|null
decl_stmt|;
name|Token
name|arg1
init|=
literal|null
decl_stmt|;
name|Token
name|arg2
init|=
literal|null
decl_stmt|;
name|Token
name|arg6
init|=
literal|null
decl_stmt|;
name|Token
name|arg7
init|=
literal|null
decl_stmt|;
name|Token
name|arg8
init|=
literal|null
decl_stmt|;
name|Token
name|arg9
init|=
literal|null
decl_stmt|;
name|Expression
name|step
init|=
literal|null
decl_stmt|;
name|boolean
name|inclusive
init|=
literal|true
decl_stmt|;
name|DocumentSet
name|temp
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_doctype
case|:
block|{
name|match
argument_list|(
name|LITERAL_doctype
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|arg3
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|includeDocs
operator|=
name|broker
operator|.
name|getDocumentsByDoctype
argument_list|(
name|user
argument_list|,
name|arg3
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|step
operator|=
operator|new
name|RootNode
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setDocumentSet
argument_list|(
name|includeDocs
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|LITERAL_collection
case|:
block|{
name|match
argument_list|(
name|LITERAL_collection
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|arg6
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|temp
operator|=
name|broker
operator|.
name|getDocumentsByCollection
argument_list|(
name|user
argument_list|,
name|arg6
operator|.
name|getText
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|includeDocs
operator|=
name|temp
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|_loop31
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|arg7
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|temp
operator|=
name|broker
operator|.
name|getDocumentsByCollection
argument_list|(
name|user
argument_list|,
name|arg7
operator|.
name|getText
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|includeDocs
operator|.
name|addAll
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
break|break
name|_loop31
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|RootNode
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setDocumentSet
argument_list|(
name|includeDocs
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_xcollection
case|:
block|{
name|match
argument_list|(
name|LITERAL_xcollection
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|arg8
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|temp
operator|=
name|broker
operator|.
name|getDocumentsByCollection
argument_list|(
name|user
argument_list|,
name|arg8
operator|.
name|getText
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|includeDocs
operator|.
name|addAll
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|_loop33
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|arg9
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|temp
operator|=
name|broker
operator|.
name|getDocumentsByCollection
argument_list|(
name|user
argument_list|,
name|arg9
operator|.
name|getText
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|includeDocs
operator|.
name|addAll
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
break|break
name|_loop33
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|RootNode
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setDocumentSet
argument_list|(
name|includeDocs
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|boolean
name|synPredMatched27
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_document
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LPAREN
operator|)
operator|)
condition|)
block|{
name|int
name|_m27
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched27
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_document
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched27
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m27
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched27
condition|)
block|{
name|match
argument_list|(
name|LITERAL_document
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|includeDocs
operator|=
name|broker
operator|.
name|getAllDocuments
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|step
operator|=
operator|new
name|RootNode
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|expr
operator|.
name|setDocumentSet
argument_list|(
name|includeDocs
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_document
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LPAREN
operator|)
condition|)
block|{
name|match
argument_list|(
name|LITERAL_document
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|arg1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|RootNode
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|user
argument_list|,
name|arg1
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|expr
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|includeDocs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|{
name|_loop29
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|arg2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|arg2
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|expr
operator|.
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
name|includeDocs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
break|break
name|_loop29
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|or_expr
parameter_list|(
name|PathExpr
name|exprIn
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|OpOr
name|op
init|=
literal|null
decl_stmt|;
name|boolean
name|branch
init|=
literal|false
decl_stmt|;
name|and_expr
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|{
name|_loop7
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_or
operator|)
condition|)
block|{
name|match
argument_list|(
name|LITERAL_or
argument_list|)
expr_stmt|;
name|and_expr
argument_list|(
name|right
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|branch
condition|)
block|{
name|op
operator|=
operator|new
name|OpOr
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|exprIn
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|op
operator|.
name|addPath
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
name|op
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|right
operator|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|branch
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop7
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|branch
condition|)
name|exprIn
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|expr
parameter_list|(
name|PathExpr
name|exprIn
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|xpath_expr
argument_list|(
name|exprIn
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpath_expr
parameter_list|(
name|PathExpr
name|exprIn
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
try|try
block|{
comment|// for error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_doctype
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
case|case
name|LITERAL_xcollection
case|:
block|{
name|document_function
argument_list|(
name|exprIn
argument_list|)
expr_stmt|;
name|or_expr
argument_list|(
name|exprIn
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|exprIn
operator|.
name|setDocumentSet
argument_list|(
name|includeDocs
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|CONST
case|:
case|case
name|STAR
case|:
case|case
name|INT
case|:
case|case
name|LITERAL_text
case|:
case|case
literal|29
case|:
case|case
literal|30
case|:
case|case
name|LITERAL_contains
case|:
case|case
name|LITERAL_match
case|:
case|case
name|LITERAL_near
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|AT
case|:
case|case
name|ATTRIB_STAR
case|:
case|case
name|LITERAL_node
case|:
case|case
name|PARENT
case|:
case|case
name|SELF
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|43
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|49
case|:
block|{
name|or_expr
argument_list|(
name|exprIn
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|ex
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|handleException
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|ex
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|and_expr
parameter_list|(
name|PathExpr
name|exprIn
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|boolean
name|branch
init|=
literal|false
decl_stmt|;
name|OpAnd
name|op
init|=
literal|null
decl_stmt|;
name|equality_expr
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|{
name|_loop10
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_and
operator|)
condition|)
block|{
name|match
argument_list|(
name|LITERAL_and
argument_list|)
expr_stmt|;
name|equality_expr
argument_list|(
name|right
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|op
operator|==
literal|null
condition|)
block|{
name|op
operator|=
operator|new
name|OpAnd
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|exprIn
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|op
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
name|op
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|right
operator|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|branch
operator|=
literal|true
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop10
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|branch
condition|)
name|exprIn
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|equality_expr
parameter_list|(
name|PathExpr
name|exprIn
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Token
name|l
init|=
literal|null
decl_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|int
name|op
init|=
literal|0
decl_stmt|;
name|boolean
name|branch
init|=
literal|false
decl_stmt|;
name|union_expr
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
block|{
block|{
name|op
operator|=
name|equality_operator
argument_list|()
expr_stmt|;
name|relational_expr
argument_list|(
name|right
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|OpEquals
name|exprEq
init|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|exprIn
operator|.
name|addPath
argument_list|(
name|exprEq
argument_list|)
expr_stmt|;
name|branch
operator|=
literal|true
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
block|{
block|{
name|op
operator|=
name|fulltext_operator
argument_list|()
expr_stmt|;
name|l
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|FunContains
name|exprCont
init|=
operator|new
name|FunContains
argument_list|(
name|pool
argument_list|,
name|op
argument_list|)
decl_stmt|;
name|exprCont
operator|.
name|setPath
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|Tokenizer
name|tokenizer
init|=
name|broker
operator|.
name|getTextEngine
argument_list|()
operator|.
name|getTokenizer
argument_list|()
decl_stmt|;
name|tokenizer
operator|.
name|setText
argument_list|(
name|l
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|TextToken
name|token
decl_stmt|;
name|String
name|word
decl_stmt|;
while|while
condition|(
literal|null
operator|!=
operator|(
name|token
operator|=
name|tokenizer
operator|.
name|nextToken
argument_list|(
literal|true
argument_list|)
operator|)
condition|)
block|{
name|word
operator|=
name|token
operator|.
name|getText
argument_list|()
expr_stmt|;
name|exprCont
operator|.
name|addTerm
argument_list|(
name|word
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
name|exprIn
operator|.
name|addPath
argument_list|(
name|exprCont
argument_list|)
expr_stmt|;
name|branch
operator|=
literal|true
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|COMMA
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
operator|!
name|branch
condition|)
name|exprIn
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|union_expr
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|,
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|boolean
name|branch
init|=
literal|false
decl_stmt|;
name|relational_expr
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|UNION
case|:
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|branch
operator|=
literal|true
expr_stmt|;
block|}
name|match
argument_list|(
name|UNION
argument_list|)
expr_stmt|;
name|union_expr
argument_list|(
name|right
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
case|case
name|COMMA
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|branch
condition|)
block|{
name|Union
name|result
init|=
operator|new
name|Union
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|expr
operator|.
name|addPath
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
else|else
name|expr
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|int
name|equality_operator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|int
name|type
decl_stmt|;
name|type
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|EQ
case|:
block|{
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|Constants
operator|.
name|EQ
expr_stmt|;
block|}
break|break;
block|}
case|case
name|NEQ
case|:
block|{
name|match
argument_list|(
name|NEQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|Constants
operator|.
name|NEQ
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|type
return|;
block|}
specifier|public
specifier|final
name|void
name|relational_expr
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|boolean
name|branch
init|=
literal|false
decl_stmt|;
name|int
name|rop
init|=
literal|0
decl_stmt|;
name|additive_expr
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LTEQ
case|:
case|case
name|GTEQ
case|:
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|branch
operator|=
literal|true
expr_stmt|;
block|}
name|rop
operator|=
name|relational_operator
argument_list|()
expr_stmt|;
name|additive_expr
argument_list|(
name|right
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
case|case
name|UNION
case|:
case|case
name|COMMA
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|branch
condition|)
block|{
name|OpEquals
name|exprEq
init|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|rop
argument_list|)
decl_stmt|;
name|expr
operator|.
name|addPath
argument_list|(
name|exprEq
argument_list|)
expr_stmt|;
block|}
else|else
name|expr
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|int
name|fulltext_operator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
block|{
name|int
name|type
decl_stmt|;
name|type
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ANDEQ
case|:
block|{
name|match
argument_list|(
name|ANDEQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|Constants
operator|.
name|FULLTEXT_AND
expr_stmt|;
block|}
break|break;
block|}
case|case
name|OREQ
case|:
block|{
name|match
argument_list|(
name|OREQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|Constants
operator|.
name|FULLTEXT_OR
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|type
return|;
block|}
specifier|public
specifier|final
name|void
name|additive_expr
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|boolean
name|branch
init|=
literal|false
decl_stmt|;
name|pathexpr
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|{
name|_loop24
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|PLUS
operator|)
condition|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|branch
operator|=
literal|true
expr_stmt|;
block|}
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|pathexpr
argument_list|(
name|right
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop24
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|branch
condition|)
block|{
name|OpNumeric
name|exprNum
init|=
operator|new
name|OpNumeric
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|PLUS
argument_list|)
decl_stmt|;
name|expr
operator|.
name|addPath
argument_list|(
name|exprNum
argument_list|)
expr_stmt|;
block|}
else|else
name|expr
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|int
name|relational_operator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|int
name|type
decl_stmt|;
name|type
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LT
case|:
block|{
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|Constants
operator|.
name|LT
expr_stmt|;
block|}
break|break;
block|}
case|case
name|GT
case|:
block|{
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|Constants
operator|.
name|GT
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LTEQ
case|:
block|{
name|match
argument_list|(
name|LTEQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|Constants
operator|.
name|LTEQ
expr_stmt|;
block|}
break|break;
block|}
case|case
name|GTEQ
case|:
block|{
name|match
argument_list|(
name|GTEQ
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|type
operator|=
name|Constants
operator|.
name|GTEQ
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|type
return|;
block|}
specifier|public
specifier|final
name|void
name|pathexpr
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|result
init|=
literal|null
decl_stmt|;
name|PathExpr
name|path
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
case|case
name|CONST
case|:
case|case
name|STAR
case|:
case|case
name|INT
case|:
case|case
name|LITERAL_text
case|:
case|case
literal|29
case|:
case|case
literal|30
case|:
case|case
name|LITERAL_contains
case|:
case|case
name|LITERAL_match
case|:
case|case
name|LITERAL_near
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|AT
case|:
case|case
name|ATTRIB_STAR
case|:
case|case
name|LITERAL_node
case|:
case|case
name|PARENT
case|:
case|case
name|SELF
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|43
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|49
case|:
block|{
block|{
name|int
name|_cnt36
init|=
literal|0
decl_stmt|;
name|_loop36
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|result
operator|=
name|regularexpr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|Step
operator|&&
operator|(
operator|(
name|Step
operator|)
name|result
operator|)
operator|.
name|getAxis
argument_list|()
operator|==
operator|-
literal|1
condition|)
operator|(
operator|(
name|Step
operator|)
name|result
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|CHILD_AXIS
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|_cnt36
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop36
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt36
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|path
operator|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
name|or_expr
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|expr
operator|.
name|addPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|final
name|Expression
name|regularexpr
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|result
decl_stmt|;
name|result
operator|=
literal|null
expr_stmt|;
name|Predicate
name|pred
init|=
literal|null
decl_stmt|;
name|int
name|axis
init|=
name|Constants
operator|.
name|CHILD_AXIS
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_descendant
case|:
case|case
literal|43
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|49
case|:
block|{
name|axis
operator|=
name|axis_spec
argument_list|()
expr_stmt|;
name|result
operator|=
name|step
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|Step
operator|&&
operator|(
operator|(
name|Step
operator|)
name|result
operator|)
operator|.
name|getAxis
argument_list|()
operator|==
operator|-
literal|1
condition|)
operator|(
operator|(
name|Step
operator|)
name|result
operator|)
operator|.
name|setAxis
argument_list|(
name|axis
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop52
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LPPAREN
operator|)
condition|)
block|{
name|pred
operator|=
name|predicate
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|expr
operator|.
name|addPredicate
argument_list|(
name|pred
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop52
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|NCNAME
case|:
case|case
name|CONST
case|:
case|case
name|STAR
case|:
case|case
name|INT
case|:
case|case
name|LITERAL_text
case|:
case|case
literal|29
case|:
case|case
literal|30
case|:
case|case
name|LITERAL_contains
case|:
case|case
name|LITERAL_match
case|:
case|case
name|LITERAL_near
case|:
case|case
name|AT
case|:
case|case
name|ATTRIB_STAR
case|:
case|case
name|LITERAL_node
case|:
case|case
name|PARENT
case|:
case|case
name|SELF
case|:
block|{
name|result
operator|=
name|step
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|Step
operator|&&
operator|(
operator|(
name|Step
operator|)
name|result
operator|)
operator|.
name|getAxis
argument_list|()
operator|==
operator|-
literal|1
condition|)
operator|(
operator|(
name|Step
operator|)
name|result
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|CHILD_AXIS
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop54
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LPPAREN
operator|)
condition|)
block|{
name|pred
operator|=
name|predicate
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|expr
operator|.
name|addPredicate
argument_list|(
name|pred
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop54
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|SLASH
case|:
block|{
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|result
operator|=
name|regularexpr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|Step
operator|&&
operator|(
operator|(
name|Step
operator|)
name|result
operator|)
operator|.
name|getAxis
argument_list|()
operator|==
operator|-
literal|1
condition|)
operator|(
operator|(
name|Step
operator|)
name|result
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|CHILD_AXIS
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|DSLASH
case|:
block|{
name|match
argument_list|(
name|DSLASH
argument_list|)
expr_stmt|;
name|result
operator|=
name|regularexpr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|result
operator|instanceof
name|Step
condition|)
operator|(
operator|(
name|Step
operator|)
name|result
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|result
return|;
block|}
specifier|public
specifier|final
name|Expression
name|primary_expr
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|step
decl_stmt|;
name|Token
name|l
init|=
literal|null
decl_stmt|;
name|Token
name|i
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|path
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|CONST
case|:
block|{
name|l
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|Literal
argument_list|(
name|l
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|INT
case|:
block|{
name|i
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|INT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|IntNumber
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|i
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|function_call
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|step
decl_stmt|;
name|Token
name|l
init|=
literal|null
decl_stmt|;
name|Token
name|l2
init|=
literal|null
decl_stmt|;
name|Token
name|arg
init|=
literal|null
decl_stmt|;
name|Token
name|l3
init|=
literal|null
decl_stmt|;
name|Token
name|l4
init|=
literal|null
decl_stmt|;
name|Token
name|i
init|=
literal|null
decl_stmt|;
name|Token
name|f1
init|=
literal|null
decl_stmt|;
name|Token
name|f2
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|path
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|arg1
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|arg2
init|=
literal|null
decl_stmt|;
name|Function
name|fun
init|=
literal|null
decl_stmt|;
name|int
name|distance
init|=
literal|1
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_text
case|:
block|{
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|TEXT_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|29
case|:
block|{
name|match
argument_list|(
literal|29
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|or_expr
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|l
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|returnsType
argument_list|()
operator|==
name|Constants
operator|.
name|TYPE_NODELIST
condition|)
block|{
name|String
name|val
init|=
name|l
operator|.
name|getText
argument_list|()
operator|+
literal|"%"
decl_stmt|;
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|path
argument_list|,
operator|new
name|Literal
argument_list|(
name|val
argument_list|)
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|step
operator|=
operator|new
name|FunStartsWith
argument_list|(
name|pool
argument_list|,
name|path
argument_list|,
operator|new
name|Literal
argument_list|(
name|l
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
literal|30
case|:
block|{
name|match
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|or_expr
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|l2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|returnsType
argument_list|()
operator|==
name|Constants
operator|.
name|TYPE_NODELIST
condition|)
block|{
name|String
name|val
init|=
name|l2
operator|.
name|getText
argument_list|()
decl_stmt|;
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|path
argument_list|,
operator|new
name|Literal
argument_list|(
name|l2
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|step
operator|=
operator|new
name|FunEndsWith
argument_list|(
name|pool
argument_list|,
name|path
argument_list|,
operator|new
name|Literal
argument_list|(
name|l2
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|LITERAL_contains
case|:
block|{
name|match
argument_list|(
name|LITERAL_contains
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|or_expr
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|arg
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|String
name|term
init|=
literal|"%"
operator|+
name|arg
operator|.
name|getText
argument_list|()
operator|+
literal|"%"
decl_stmt|;
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|path
argument_list|,
operator|new
name|Literal
argument_list|(
name|term
argument_list|)
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|step
operator|.
name|pprint
argument_list|()
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_match
case|:
block|{
name|match
argument_list|(
name|LITERAL_match
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|or_expr
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|l3
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|path
operator|.
name|returnsType
argument_list|()
operator|==
name|Constants
operator|.
name|TYPE_NODELIST
condition|)
block|{
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|path
argument_list|,
operator|new
name|Literal
argument_list|(
name|l3
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|,
name|Constants
operator|.
name|REGEXP
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|LITERAL_near
case|:
block|{
name|match
argument_list|(
name|LITERAL_near
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|or_expr
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|l4
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|CONST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COMMA
case|:
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|i
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|INT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|distance
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|i
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|FunNear
name|near
init|=
operator|new
name|FunNear
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|near
operator|.
name|setDistance
argument_list|(
name|distance
argument_list|)
expr_stmt|;
name|near
operator|.
name|setPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|pool
operator|.
name|get
argument_list|()
expr_stmt|;
name|Tokenizer
name|tok
init|=
name|broker
operator|.
name|getTextEngine
argument_list|()
operator|.
name|getTokenizer
argument_list|()
decl_stmt|;
name|tok
operator|.
name|setText
argument_list|(
name|l4
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|TextToken
name|token
decl_stmt|;
name|String
name|next
decl_stmt|;
while|while
condition|(
operator|(
name|token
operator|=
name|tok
operator|.
name|nextToken
argument_list|(
literal|true
argument_list|)
operator|)
operator|!=
literal|null
condition|)
block|{
name|next
operator|=
name|token
operator|.
name|getText
argument_list|()
expr_stmt|;
name|near
operator|.
name|addTerm
argument_list|(
name|next
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|pool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
name|expr
operator|.
name|addPath
argument_list|(
name|near
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
default|default:
name|boolean
name|synPredMatched41
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|NCNAME
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LPAREN
operator|)
operator|)
condition|)
block|{
name|int
name|_m41
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched41
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched41
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m41
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched41
condition|)
block|{
name|f1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|env
operator|.
name|hasFunction
argument_list|(
name|f1
operator|.
name|getText
argument_list|()
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|SemanticException
argument_list|(
literal|" env.hasFunction(f1.getText()) "
argument_list|)
throw|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|fun
operator|=
name|Function
operator|.
name|createFunction
argument_list|(
name|pool
argument_list|,
name|env
operator|.
name|getFunction
argument_list|(
name|f1
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|addPath
argument_list|(
name|fun
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|boolean
name|synPredMatched43
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|NCNAME
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LPAREN
operator|)
operator|)
condition|)
block|{
name|int
name|_m43
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched43
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched43
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m43
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched43
condition|)
block|{
name|f2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|fun
operator|=
name|Function
operator|.
name|createFunction
argument_list|(
name|pool
argument_list|,
name|env
operator|.
name|getFunction
argument_list|(
name|f2
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|addPath
argument_list|(
name|fun
argument_list|)
expr_stmt|;
block|}
name|or_expr
argument_list|(
name|arg1
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|fun
operator|.
name|addArgument
argument_list|(
name|arg1
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop45
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|arg2
operator|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
name|or_expr
argument_list|(
name|arg2
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|fun
operator|.
name|addArgument
argument_list|(
name|arg2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop45
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|void
name|empty_arglist
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
block|}
specifier|public
specifier|final
name|void
name|function_args
parameter_list|(
name|Function
name|fun
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|PathExpr
name|arg1
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|arg2
init|=
literal|null
decl_stmt|;
name|or_expr
argument_list|(
name|arg1
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|fun
operator|.
name|addArgument
argument_list|(
name|arg1
argument_list|)
expr_stmt|;
block|}
block|{
name|_loop49
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|arg2
operator|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
expr_stmt|;
block|}
name|or_expr
argument_list|(
name|arg2
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|fun
operator|.
name|addArgument
argument_list|(
name|arg2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop49
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
specifier|public
specifier|final
name|int
name|axis_spec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|int
name|axis
decl_stmt|;
name|axis
operator|=
operator|-
literal|1
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_descendant
case|:
block|{
name|match
argument_list|(
name|LITERAL_descendant
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|axis
operator|=
name|Constants
operator|.
name|DESCENDANT_AXIS
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|43
case|:
block|{
name|match
argument_list|(
literal|43
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|axis
operator|=
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_child
case|:
block|{
name|match
argument_list|(
name|LITERAL_child
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|axis
operator|=
name|Constants
operator|.
name|CHILD_AXIS
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_parent
case|:
block|{
name|match
argument_list|(
name|LITERAL_parent
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|axis
operator|=
name|Constants
operator|.
name|PARENT_AXIS
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_self
case|:
block|{
name|match
argument_list|(
name|LITERAL_self
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|axis
operator|=
name|Constants
operator|.
name|SELF_AXIS
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|axis
operator|=
name|Constants
operator|.
name|ATTRIBUTE_AXIS
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_ancestor
case|:
block|{
name|match
argument_list|(
name|LITERAL_ancestor
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|axis
operator|=
name|Constants
operator|.
name|ANCESTOR_AXIS
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|49
case|:
block|{
name|match
argument_list|(
literal|49
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|axis
operator|=
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|axis
return|;
block|}
specifier|public
specifier|final
name|Expression
name|step
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|step
decl_stmt|;
name|Token
name|any
init|=
literal|null
decl_stmt|;
name|Token
name|anyAttr
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|String
name|qn
decl_stmt|;
name|String
name|attr
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|AT
case|:
block|{
name|match
argument_list|(
name|AT
argument_list|)
expr_stmt|;
name|attr
operator|=
name|qname
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|ATTRIBUTE_AXIS
argument_list|,
operator|new
name|NameTest
argument_list|(
name|attr
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STAR
case|:
block|{
name|any
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|ELEMENT_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|ATTRIB_STAR
case|:
block|{
name|anyAttr
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ATTRIB_STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|ATTRIBUTE_AXIS
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|ATTRIBUTE_NODE
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|NODE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|PARENT
case|:
block|{
name|match
argument_list|(
name|PARENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|PARENT_AXIS
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|NODE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SELF
case|:
block|{
name|match
argument_list|(
name|SELF
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|SELF_AXIS
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|NODE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|CONST
case|:
case|case
name|INT
case|:
block|{
name|step
operator|=
name|primary_expr
argument_list|(
name|expr
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
name|LPAREN
operator|)
condition|)
block|{
name|step
operator|=
name|function_call
argument_list|(
name|expr
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|&&
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|2
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|qn
operator|=
name|qname
argument_list|()
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
operator|-
literal|1
argument_list|,
operator|new
name|NameTest
argument_list|(
name|qn
argument_list|)
argument_list|)
expr_stmt|;
name|expr
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Predicate
name|predicate
parameter_list|(
name|PathExpr
name|expr
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Predicate
name|pred
decl_stmt|;
name|pred
operator|=
operator|new
name|Predicate
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPPAREN
argument_list|)
expr_stmt|;
name|or_expr
argument_list|(
name|pred
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPPAREN
argument_list|)
expr_stmt|;
return|return
name|pred
return|;
block|}
specifier|public
specifier|final
name|String
name|qname
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|Token
name|n1
init|=
literal|null
decl_stmt|;
name|Token
name|n2
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
block|{
name|n1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|n1
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COLON
case|:
block|{
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|n2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|+
literal|':'
operator|+
name|n2
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|CONST
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
case|case
name|UNION
case|:
case|case
name|LT
case|:
case|case
name|GT
case|:
case|case
name|LTEQ
case|:
case|case
name|GTEQ
case|:
case|case
name|PLUS
case|:
case|case
name|STAR
case|:
case|case
name|COMMA
case|:
case|case
name|INT
case|:
case|case
name|LITERAL_text
case|:
case|case
literal|29
case|:
case|case
literal|30
case|:
case|case
name|LITERAL_contains
case|:
case|case
name|LITERAL_match
case|:
case|case
name|LITERAL_near
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|AT
case|:
case|case
name|ATTRIB_STAR
case|:
case|case
name|LITERAL_node
case|:
case|case
name|PARENT
case|:
case|case
name|SELF
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|43
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|49
case|:
case|case
name|LPPAREN
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"text"
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_contains
case|:
block|{
name|match
argument_list|(
name|LITERAL_contains
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"contains"
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|29
case|:
block|{
name|match
argument_list|(
literal|29
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"starts-with"
expr_stmt|;
block|}
break|break;
block|}
case|case
literal|30
case|:
block|{
name|match
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ends-with"
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_near
case|:
block|{
name|match
argument_list|(
name|LITERAL_near
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"near"
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
return|return
name|name
return|;
block|}
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|_tokenNames
init|=
block|{
literal|"<0>"
block|,
literal|"EOF"
block|,
literal|"<2>"
block|,
literal|"NULL_TREE_LOOKAHEAD"
block|,
literal|"\"xpointer\""
block|,
literal|"LPAREN"
block|,
literal|"RPAREN"
block|,
literal|"NCNAME"
block|,
literal|"\"or\""
block|,
literal|"\"and\""
block|,
literal|"CONST"
block|,
literal|"ANDEQ"
block|,
literal|"OREQ"
block|,
literal|"EQ"
block|,
literal|"NEQ"
block|,
literal|"UNION"
block|,
literal|"LT"
block|,
literal|"GT"
block|,
literal|"LTEQ"
block|,
literal|"GTEQ"
block|,
literal|"PLUS"
block|,
literal|"\"doctype\""
block|,
literal|"\"document\""
block|,
literal|"STAR"
block|,
literal|"COMMA"
block|,
literal|"\"collection\""
block|,
literal|"\"xcollection\""
block|,
literal|"INT"
block|,
literal|"\"text\""
block|,
literal|"\"starts-with\""
block|,
literal|"\"ends-with\""
block|,
literal|"\"contains\""
block|,
literal|"\"match\""
block|,
literal|"\"near\""
block|,
literal|"SLASH"
block|,
literal|"DSLASH"
block|,
literal|"AT"
block|,
literal|"ATTRIB_STAR"
block|,
literal|"\"node\""
block|,
literal|"PARENT"
block|,
literal|"SELF"
block|,
literal|"COLON"
block|,
literal|"\"descendant\""
block|,
literal|"\"descendant-or-self\""
block|,
literal|"\"child\""
block|,
literal|"\"parent\""
block|,
literal|"\"self\""
block|,
literal|"\"attribute\""
block|,
literal|"\"ancestor\""
block|,
literal|"\"ancestor-or-self\""
block|,
literal|"LPPAREN"
block|,
literal|"RPPAREN"
block|,
literal|"WS"
block|,
literal|"BASECHAR"
block|,
literal|"IDEOGRAPHIC"
block|,
literal|"DIGIT"
block|,
literal|"NMSTART"
block|,
literal|"NMCHAR"
block|,
literal|"VARIABLE"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|1123700757759104L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|16911433856L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|12616466560L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_3
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|4503599520415682L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_3
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

