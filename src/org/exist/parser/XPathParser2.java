begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.2: "XPathParser2.g" -> "XPathParser2.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|debug
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Stack
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|functions
operator|.
name|*
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LLkParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ParserSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTFactory
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTPair
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|ASTArray
import|;
end_import

begin_class
specifier|public
class|class
name|XPathParser2
extends|extends
name|antlr
operator|.
name|LLkParser
implements|implements
name|XPathParser2TokenTypes
block|{
specifier|protected
name|ArrayList
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|foundError
init|=
literal|false
decl_stmt|;
specifier|protected
name|Stack
name|globalStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
name|Stack
name|elementStack
init|=
operator|new
name|Stack
argument_list|()
decl_stmt|;
specifier|protected
name|XPathLexer2
name|lexer
decl_stmt|;
specifier|public
name|XPathParser2
parameter_list|(
name|XPathLexer2
name|lexer
parameter_list|,
name|boolean
name|dummy
parameter_list|)
block|{
name|this
argument_list|(
operator|(
name|TokenStream
operator|)
name|lexer
argument_list|)
expr_stmt|;
name|this
operator|.
name|lexer
operator|=
name|lexer
expr_stmt|;
block|}
specifier|public
name|boolean
name|foundErrors
parameter_list|()
block|{
return|return
name|foundError
return|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exceptions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Exception
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|foundError
operator|=
literal|true
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XPathParser2
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|tokenBuf
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathParser2
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|)
block|{
name|this
argument_list|(
name|tokenBuf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XPathParser2
parameter_list|(
name|TokenStream
name|lexer
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|lexer
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathParser2
parameter_list|(
name|TokenStream
name|lexer
parameter_list|)
block|{
name|this
argument_list|(
name|lexer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathParser2
parameter_list|(
name|ParserSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|imaginaryTokenDefinitions
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|imaginaryTokenDefinitions_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp87_AST
init|=
literal|null
decl_stmt|;
name|tmp87_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp87_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QNAME
argument_list|)
expr_stmt|;
name|AST
name|tmp88_AST
init|=
literal|null
decl_stmt|;
name|tmp88_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp88_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PREDICATE
argument_list|)
expr_stmt|;
name|AST
name|tmp89_AST
init|=
literal|null
decl_stmt|;
name|tmp89_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp89_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FLWOR
argument_list|)
expr_stmt|;
name|AST
name|tmp90_AST
init|=
literal|null
decl_stmt|;
name|tmp90_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp90_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PARENTHESIZED
argument_list|)
expr_stmt|;
name|AST
name|tmp91_AST
init|=
literal|null
decl_stmt|;
name|tmp91_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp91_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ABSOLUTE_SLASH
argument_list|)
expr_stmt|;
name|AST
name|tmp92_AST
init|=
literal|null
decl_stmt|;
name|tmp92_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp92_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ABSOLUTE_DSLASH
argument_list|)
expr_stmt|;
name|AST
name|tmp93_AST
init|=
literal|null
decl_stmt|;
name|tmp93_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp93_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WILDCARD
argument_list|)
expr_stmt|;
name|AST
name|tmp94_AST
init|=
literal|null
decl_stmt|;
name|tmp94_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp94_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PREFIX_WILDCARD
argument_list|)
expr_stmt|;
name|AST
name|tmp95_AST
init|=
literal|null
decl_stmt|;
name|tmp95_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp95_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FUNCTION
argument_list|)
expr_stmt|;
name|AST
name|tmp96_AST
init|=
literal|null
decl_stmt|;
name|tmp96_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp96_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|UNARY_MINUS
argument_list|)
expr_stmt|;
name|AST
name|tmp97_AST
init|=
literal|null
decl_stmt|;
name|tmp97_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp97_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|UNARY_PLUS
argument_list|)
expr_stmt|;
name|AST
name|tmp98_AST
init|=
literal|null
decl_stmt|;
name|tmp98_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp98_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XPOINTER
argument_list|)
expr_stmt|;
name|AST
name|tmp99_AST
init|=
literal|null
decl_stmt|;
name|tmp99_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp99_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XPOINTER_ID
argument_list|)
expr_stmt|;
name|AST
name|tmp100_AST
init|=
literal|null
decl_stmt|;
name|tmp100_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp100_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|VARIABLE_REF
argument_list|)
expr_stmt|;
name|AST
name|tmp101_AST
init|=
literal|null
decl_stmt|;
name|tmp101_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp101_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|VARIABLE_BINDING
argument_list|)
expr_stmt|;
name|AST
name|tmp102_AST
init|=
literal|null
decl_stmt|;
name|tmp102_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp102_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ELEMENT
argument_list|)
expr_stmt|;
name|AST
name|tmp103_AST
init|=
literal|null
decl_stmt|;
name|tmp103_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp103_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ATTRIBUTE
argument_list|)
expr_stmt|;
name|AST
name|tmp104_AST
init|=
literal|null
decl_stmt|;
name|tmp104_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp104_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|TEXT
argument_list|)
expr_stmt|;
name|AST
name|tmp105_AST
init|=
literal|null
decl_stmt|;
name|tmp105_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp105_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|VERSION_DECL
argument_list|)
expr_stmt|;
name|AST
name|tmp106_AST
init|=
literal|null
decl_stmt|;
name|tmp106_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp106_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NAMESPACE_DECL
argument_list|)
expr_stmt|;
name|AST
name|tmp107_AST
init|=
literal|null
decl_stmt|;
name|tmp107_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp107_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DEF_NAMESPACE_DECL
argument_list|)
expr_stmt|;
name|AST
name|tmp108_AST
init|=
literal|null
decl_stmt|;
name|tmp108_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp108_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DEF_FUNCTION_NS_DECL
argument_list|)
expr_stmt|;
name|AST
name|tmp109_AST
init|=
literal|null
decl_stmt|;
name|tmp109_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp109_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GLOBAL_VAR
argument_list|)
expr_stmt|;
name|AST
name|tmp110_AST
init|=
literal|null
decl_stmt|;
name|tmp110_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp110_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FUNCTION_DECL
argument_list|)
expr_stmt|;
name|AST
name|tmp111_AST
init|=
literal|null
decl_stmt|;
name|tmp111_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp111_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PROLOG
argument_list|)
expr_stmt|;
name|AST
name|tmp112_AST
init|=
literal|null
decl_stmt|;
name|tmp112_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp112_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ATOMIC_TYPE
argument_list|)
expr_stmt|;
name|AST
name|tmp113_AST
init|=
literal|null
decl_stmt|;
name|tmp113_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp113_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MODULE
argument_list|)
expr_stmt|;
name|AST
name|tmp114_AST
init|=
literal|null
decl_stmt|;
name|tmp114_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp114_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ORDER_BY
argument_list|)
expr_stmt|;
name|AST
name|tmp115_AST
init|=
literal|null
decl_stmt|;
name|tmp115_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp115_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|POSITIONAL_VAR
argument_list|)
expr_stmt|;
name|imaginaryTokenDefinitions_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|imaginaryTokenDefinitions_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpointer
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|xpointer_AST
init|=
literal|null
decl_stmt|;
name|AST
name|ex_AST
init|=
literal|null
decl_stmt|;
name|Token
name|nc
init|=
literal|null
decl_stmt|;
name|AST
name|nc_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
block|{
name|AST
name|tmp116_AST
init|=
literal|null
decl_stmt|;
name|tmp116_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp116_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_xpointer
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|ex_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|XPOINTER
argument_list|,
literal|"xpointer"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|ex_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|xpointer_AST
operator|!=
literal|null
operator|&&
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
block|{
name|nc
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nc_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|nc_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|XPOINTER_ID
argument_list|,
literal|"id"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|nc_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|xpointer_AST
operator|!=
literal|null
operator|&&
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|xpointer_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|expr_AST
init|=
literal|null
decl_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop55
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|AST
name|tmp119_AST
init|=
literal|null
decl_stmt|;
name|tmp119_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp119_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop55
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpath
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|xpath_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_declare
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LT
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|114
case|:
case|case
literal|115
case|:
case|case
name|XML_PI
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
name|module
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|AST
name|tmp120_AST
init|=
literal|null
decl_stmt|;
name|tmp120_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp120_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
name|xpath_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|returnAST
operator|=
name|xpath_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|module
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|module_AST
init|=
literal|null
decl_stmt|;
name|mainModule
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|module_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|module_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mainModule
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|mainModule_AST
init|=
literal|null
decl_stmt|;
name|prolog
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|queryBody
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|mainModule_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|mainModule_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|prolog
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|prolog_AST
init|=
literal|null
decl_stmt|;
name|AST
name|v_AST
init|=
literal|null
decl_stmt|;
name|AST
name|nd_AST
init|=
literal|null
decl_stmt|;
name|AST
name|dnd_AST
init|=
literal|null
decl_stmt|;
name|AST
name|fd_AST
init|=
literal|null
decl_stmt|;
block|{
name|boolean
name|synPredMatched10
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|XQUERY
operator|)
operator|)
condition|)
block|{
name|int
name|_m10
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched10
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|XQUERY
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched10
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m10
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched10
condition|)
block|{
name|version
argument_list|()
expr_stmt|;
name|v_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|{
name|_loop21
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
condition|)
block|{
block|{
name|boolean
name|synPredMatched14
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m14
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched14
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched14
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m14
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched14
condition|)
block|{
name|namespaceDecl
argument_list|()
expr_stmt|;
name|nd_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched16
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m16
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched16
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched16
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m16
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched16
condition|)
block|{
name|defaultNamespaceDecl
argument_list|()
expr_stmt|;
name|dnd_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched18
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m18
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched18
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched18
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m18
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched18
condition|)
block|{
name|functionDecl
argument_list|()
expr_stmt|;
name|fd_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched20
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_declare
operator|)
operator|)
condition|)
block|{
name|int
name|_m20
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched20
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_variable
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched20
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m20
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched20
condition|)
block|{
name|varDecl
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
name|match
argument_list|(
name|SEMICOLON
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop21
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|prolog_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|prolog_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|queryBody
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|queryBody_AST
init|=
literal|null
decl_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|queryBody_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|queryBody_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|version
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|version_AST
init|=
literal|null
decl_stmt|;
name|Token
name|v
init|=
literal|null
decl_stmt|;
name|AST
name|v_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp123_AST
init|=
literal|null
decl_stmt|;
name|tmp123_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp123_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XQUERY
argument_list|)
expr_stmt|;
name|AST
name|tmp124_AST
init|=
literal|null
decl_stmt|;
name|tmp124_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp124_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
name|v
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|v_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|v_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|version_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|version_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|1
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|VERSION_DECL
argument_list|,
name|v
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|version_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|version_AST
operator|!=
literal|null
operator|&&
name|version_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|version_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|version_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|version_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|version_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|namespaceDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|namespaceDecl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|prefix
init|=
literal|null
decl_stmt|;
name|AST
name|prefix_AST
init|=
literal|null
decl_stmt|;
name|Token
name|uri
init|=
literal|null
decl_stmt|;
name|AST
name|uri_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp125_AST
init|=
literal|null
decl_stmt|;
name|tmp125_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp125_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|AST
name|tmp126_AST
init|=
literal|null
decl_stmt|;
name|tmp126_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp126_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|prefix
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|prefix_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|prefix_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|uri
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|uri_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|uri
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|uri_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|namespaceDecl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|namespaceDecl_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|NAMESPACE_DECL
argument_list|,
name|prefix
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|uri_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|namespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|namespaceDecl_AST
operator|!=
literal|null
operator|&&
name|namespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|namespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|namespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|namespaceDecl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|namespaceDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|defaultNamespaceDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|defaultNamespaceDecl_AST
init|=
literal|null
decl_stmt|;
name|Token
name|defu
init|=
literal|null
decl_stmt|;
name|AST
name|defu_AST
init|=
literal|null
decl_stmt|;
name|Token
name|deff
init|=
literal|null
decl_stmt|;
name|AST
name|deff_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp128_AST
init|=
literal|null
decl_stmt|;
name|tmp128_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp128_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|AST
name|tmp129_AST
init|=
literal|null
decl_stmt|;
name|tmp129_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp129_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_element
case|:
block|{
name|AST
name|tmp130_AST
init|=
literal|null
decl_stmt|;
name|tmp130_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp130_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
name|AST
name|tmp131_AST
init|=
literal|null
decl_stmt|;
name|tmp131_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp131_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|defu
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|defu_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|defu
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|defu_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|defaultNamespaceDecl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|defaultNamespaceDecl_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|DEF_NAMESPACE_DECL
argument_list|,
literal|"defaultNamespaceDecl"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|defu_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|defaultNamespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|defaultNamespaceDecl_AST
operator|!=
literal|null
operator|&&
name|defaultNamespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|defaultNamespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|defaultNamespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|LITERAL_function
case|:
block|{
name|AST
name|tmp132_AST
init|=
literal|null
decl_stmt|;
name|tmp132_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp132_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|AST
name|tmp133_AST
init|=
literal|null
decl_stmt|;
name|tmp133_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp133_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
name|deff
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|deff_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|deff
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|deff_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|defaultNamespaceDecl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|defaultNamespaceDecl_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|DEF_FUNCTION_NS_DECL
argument_list|,
literal|"defaultFunctionNSDecl"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|deff_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|defaultNamespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|defaultNamespaceDecl_AST
operator|!=
literal|null
operator|&&
name|defaultNamespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|defaultNamespaceDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|defaultNamespaceDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|defaultNamespaceDecl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|defaultNamespaceDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|functionDecl_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOLLAR
case|:
block|{
name|paramList
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|returnType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|functionBody
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionDecl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionDecl_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION_DECL
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|functionDecl_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|functionDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|functionDecl_AST
operator|!=
literal|null
operator|&&
name|functionDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|functionDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|functionDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|functionDecl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|functionDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|varDecl
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|varDecl_AST
init|=
literal|null
decl_stmt|;
name|AST
name|ex_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_declare
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_variable
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|typeDeclaration
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|ex_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|varDecl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|varDecl_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|GLOBAL_VAR
argument_list|,
name|varName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|varDecl_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|varDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|varDecl_AST
operator|!=
literal|null
operator|&&
name|varDecl_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|varDecl_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|varDecl_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|varDecl_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|varDecl_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|qName
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|qName_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
name|String
name|name2
decl_stmt|;
name|boolean
name|synPredMatched179
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m179
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched179
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched179
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m179
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched179
condition|)
block|{
name|name
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|AST
name|tmp143_AST
init|=
literal|null
decl_stmt|;
name|tmp143_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp143_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|name2
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|+
literal|':'
operator|+
name|name2
expr_stmt|;
block|}
name|qName_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|name
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|qName_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|qName_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|void
name|typeDeclaration
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|typeDeclaration_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp144_AST
init|=
literal|null
decl_stmt|;
name|tmp144_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp144_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|typeDeclaration_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|typeDeclaration_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|paramList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|paramList_AST
init|=
literal|null
decl_stmt|;
name|AST
name|p1_AST
init|=
literal|null
decl_stmt|;
name|param
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop35
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|param
argument_list|()
expr_stmt|;
name|p1_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop35
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|paramList_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|paramList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|returnType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|returnType_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp146_AST
init|=
literal|null
decl_stmt|;
name|tmp146_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp146_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|sequenceType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|returnType_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|returnType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionBody
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|functionBody_AST
init|=
literal|null
decl_stmt|;
name|AST
name|e_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp147_AST
init|=
literal|null
decl_stmt|;
name|tmp147_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp147_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
name|functionBody_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|functionBody_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|sequenceType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|sequenceType_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched41
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_empty
operator|)
operator|)
condition|)
block|{
name|int
name|_m41
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched41
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_empty
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched41
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m41
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched41
condition|)
block|{
name|AST
name|tmp149_AST
init|=
literal|null
decl_stmt|;
name|tmp149_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp149_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_empty
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|sequenceType_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|itemType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUESTION
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
block|{
name|occurrenceIndicator
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
case|case
name|LCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_at
case|:
case|case
name|COLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|sequenceType_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|sequenceType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|param
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|param_AST
init|=
literal|null
decl_stmt|;
name|AST
name|t_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|typeDeclaration
argument_list|()
expr_stmt|;
name|t_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
case|case
name|COMMA
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|param_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|param_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|varName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|t_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|param_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|param_AST
operator|!=
literal|null
operator|&&
name|param_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|param_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|param_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|param_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|param_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|itemType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|itemType_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched46
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_item
operator|)
operator|)
condition|)
block|{
name|int
name|_m46
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched46
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_item
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched46
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m46
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched46
condition|)
block|{
name|AST
name|tmp153_AST
init|=
literal|null
decl_stmt|;
name|tmp153_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp153_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_item
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|itemType_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched48
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m48
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched48
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|matchNot
argument_list|(
name|EOF
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched48
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m48
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched48
condition|)
block|{
name|kindTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|itemType_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|atomicType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|itemType_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|itemType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|occurrenceIndicator
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|occurrenceIndicator_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUESTION
case|:
block|{
name|AST
name|tmp156_AST
init|=
literal|null
decl_stmt|;
name|tmp156_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp156_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QUESTION
argument_list|)
expr_stmt|;
name|occurrenceIndicator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|STAR
case|:
block|{
name|AST
name|tmp157_AST
init|=
literal|null
decl_stmt|;
name|tmp157_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp157_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|occurrenceIndicator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|PLUS
case|:
block|{
name|AST
name|tmp158_AST
init|=
literal|null
decl_stmt|;
name|tmp158_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp158_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|occurrenceIndicator_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|occurrenceIndicator_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|kindTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|kindTest_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_text
case|:
block|{
name|textTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|anyKindTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_element
case|:
block|{
name|elementTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|attributeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|commentTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|114
case|:
block|{
name|piTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|115
case|:
block|{
name|documentTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|kindTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|atomicType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|atomicType_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|atomicType_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|atomicType_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|ATOMIC_TYPE
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|atomicType_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|atomicType_AST
operator|!=
literal|null
operator|&&
name|atomicType_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|atomicType_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|atomicType_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|atomicType_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|atomicType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|singleType
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|singleType_AST
init|=
literal|null
decl_stmt|;
name|atomicType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|QUESTION
case|:
block|{
name|AST
name|tmp159_AST
init|=
literal|null
decl_stmt|;
name|tmp159_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp159_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QUESTION
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|RCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|singleType_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|singleType_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|exprSingle
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|exprSingle_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched59
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_for
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_let
operator|)
operator|)
condition|)
block|{
name|int
name|_m59
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched59
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_for
case|:
block|{
name|match
argument_list|(
name|LITERAL_for
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_let
case|:
block|{
name|match
argument_list|(
name|LITERAL_let
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched59
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m59
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched59
condition|)
block|{
name|flworExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched61
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_if
operator|)
operator|)
condition|)
block|{
name|int
name|_m61
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched61
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LITERAL_if
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched61
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m61
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched61
condition|)
block|{
name|ifExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_4
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|orExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|exprSingle_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|exprSingle_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|flworExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|flworExpr_AST
init|=
literal|null
decl_stmt|;
block|{
name|int
name|_cnt64
init|=
literal|0
decl_stmt|;
name|_loop64
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_for
case|:
block|{
name|forClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_let
case|:
block|{
name|letClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|_cnt64
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop64
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt64
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_where
case|:
block|{
name|AST
name|tmp160_AST
init|=
literal|null
decl_stmt|;
name|tmp160_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp160_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_where
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_order
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_order
case|:
block|{
name|orderByClause
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_return
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|AST
name|tmp161_AST
init|=
literal|null
decl_stmt|;
name|tmp161_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp161_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_return
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|flworExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|flworExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|ifExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|ifExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp162_AST
init|=
literal|null
decl_stmt|;
name|tmp162_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp162_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_if
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_then
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_else
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|ifExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|ifExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|orExpr_AST
init|=
literal|null
decl_stmt|;
name|andExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop91
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_or
operator|)
condition|)
block|{
name|AST
name|tmp167_AST
init|=
literal|null
decl_stmt|;
name|tmp167_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp167_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_or
argument_list|)
expr_stmt|;
name|andExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop91
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|orExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|forClause_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp168_AST
init|=
literal|null
decl_stmt|;
name|tmp168_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp168_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_for
argument_list|)
expr_stmt|;
name|inVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop69
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|inVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop69
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|forClause_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|forClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|letClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|letClause_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp170_AST
init|=
literal|null
decl_stmt|;
name|tmp170_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp170_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_let
argument_list|)
expr_stmt|;
name|letVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop72
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|letVarBinding
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop72
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|letClause_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|letClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orderByClause
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|orderByClause_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LITERAL_order
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_by
argument_list|)
expr_stmt|;
name|orderSpecList
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|orderByClause_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|orderByClause_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|ORDER_BY
argument_list|,
literal|"order by"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|orderByClause_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|orderByClause_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|orderByClause_AST
operator|!=
literal|null
operator|&&
name|orderByClause_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|orderByClause_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|orderByClause_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|orderByClause_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orderByClause_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|inVarBinding
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|inVarBinding_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|typeDeclaration
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_in
case|:
case|case
name|LITERAL_at
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_at
case|:
block|{
name|positionalVar
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_in
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LITERAL_in
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|inVarBinding_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|inVarBinding_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|varName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|inVarBinding_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|inVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|inVarBinding_AST
operator|!=
literal|null
operator|&&
name|inVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|inVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|inVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|inVarBinding_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|inVarBinding_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|letVarBinding
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|letVarBinding_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_as
case|:
block|{
name|typeDeclaration
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COLON
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|letVarBinding_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|letVarBinding_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_BINDING
argument_list|,
name|varName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|letVarBinding_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|letVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|letVarBinding_AST
operator|!=
literal|null
operator|&&
name|letVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|letVarBinding_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|letVarBinding_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|letVarBinding_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|letVarBinding_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|positionalVar
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|positionalVar_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
decl_stmt|;
name|AST
name|tmp179_AST
init|=
literal|null
decl_stmt|;
name|tmp179_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp179_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_at
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|positionalVar_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|positionalVar_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|POSITIONAL_VAR
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|positionalVar_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|positionalVar_AST
operator|!=
literal|null
operator|&&
name|positionalVar_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|positionalVar_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|positionalVar_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|positionalVar_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|positionalVar_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orderSpecList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|orderSpecList_AST
init|=
literal|null
decl_stmt|;
name|orderSpec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop82
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|orderSpec
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop82
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|orderSpecList_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orderSpecList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orderSpec
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|orderSpec_AST
init|=
literal|null
decl_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|orderModifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|orderSpec_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orderSpec_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orderModifier
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|orderModifier_AST
init|=
literal|null
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_ascending
case|:
block|{
name|AST
name|tmp182_AST
init|=
literal|null
decl_stmt|;
name|tmp182_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp182_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ascending
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descending
case|:
block|{
name|AST
name|tmp183_AST
init|=
literal|null
decl_stmt|;
name|tmp183_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp183_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_descending
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|COMMA
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_return
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_empty
case|:
block|{
name|AST
name|tmp184_AST
init|=
literal|null
decl_stmt|;
name|tmp184_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp184_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_empty
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_greatest
case|:
block|{
name|AST
name|tmp185_AST
init|=
literal|null
decl_stmt|;
name|tmp185_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp185_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_greatest
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_least
case|:
block|{
name|AST
name|tmp186_AST
init|=
literal|null
decl_stmt|;
name|tmp186_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp186_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_least
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
break|break;
block|}
case|case
name|COMMA
case|:
case|case
name|LITERAL_return
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|orderModifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orderModifier_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|andExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|andExpr_AST
init|=
literal|null
decl_stmt|;
name|castExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop94
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_and
operator|)
condition|)
block|{
name|AST
name|tmp187_AST
init|=
literal|null
decl_stmt|;
name|tmp187_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp187_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_and
argument_list|)
expr_stmt|;
name|castExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop94
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|andExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|andExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|castExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|castExpr_AST
init|=
literal|null
decl_stmt|;
name|comparisonExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_cast
case|:
block|{
name|AST
name|tmp188_AST
init|=
literal|null
decl_stmt|;
name|tmp188_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp188_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_cast
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_as
argument_list|)
expr_stmt|;
name|singleType
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|RCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|castExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|castExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|comparisonExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|comparisonExpr_AST
init|=
literal|null
decl_stmt|;
name|rangeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
case|case
name|GT
case|:
case|case
name|GTEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|EQ
case|:
block|{
name|AST
name|tmp190_AST
init|=
literal|null
decl_stmt|;
name|tmp190_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp190_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NEQ
case|:
block|{
name|AST
name|tmp191_AST
init|=
literal|null
decl_stmt|;
name|tmp191_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp191_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NEQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|GT
case|:
block|{
name|AST
name|tmp192_AST
init|=
literal|null
decl_stmt|;
name|tmp192_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp192_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|GTEQ
case|:
block|{
name|AST
name|tmp193_AST
init|=
literal|null
decl_stmt|;
name|tmp193_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp193_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GTEQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LT
case|:
block|{
name|AST
name|tmp194_AST
init|=
literal|null
decl_stmt|;
name|tmp194_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp194_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LTEQ
case|:
block|{
name|AST
name|tmp195_AST
init|=
literal|null
decl_stmt|;
name|tmp195_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp195_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LTEQ
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|rangeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ANDEQ
case|:
block|{
name|AST
name|tmp196_AST
init|=
literal|null
decl_stmt|;
name|tmp196_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp196_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ANDEQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OREQ
case|:
block|{
name|AST
name|tmp197_AST
init|=
literal|null
decl_stmt|;
name|tmp197_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp197_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|OREQ
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|rangeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|RCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|comparisonExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|comparisonExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|rangeExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|rangeExpr_AST
init|=
literal|null
decl_stmt|;
name|additiveExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_to
case|:
block|{
name|AST
name|tmp198_AST
init|=
literal|null
decl_stmt|;
name|tmp198_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp198_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_to
argument_list|)
expr_stmt|;
name|additiveExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|EQ
case|:
case|case
name|RCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|NEQ
case|:
case|case
name|GT
case|:
case|case
name|GTEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|rangeExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|rangeExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|additiveExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|additiveExpr_AST
init|=
literal|null
decl_stmt|;
name|multiplicativeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop108
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|PLUS
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|MINUS
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|PLUS
case|:
block|{
name|AST
name|tmp199_AST
init|=
literal|null
decl_stmt|;
name|tmp199_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp199_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MINUS
case|:
block|{
name|AST
name|tmp200_AST
init|=
literal|null
decl_stmt|;
name|tmp200_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp200_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|multiplicativeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop108
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|additiveExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|additiveExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|multiplicativeExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|multiplicativeExpr_AST
init|=
literal|null
decl_stmt|;
name|unaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop112
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_5
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STAR
case|:
block|{
name|AST
name|tmp201_AST
init|=
literal|null
decl_stmt|;
name|tmp201_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp201_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_div
case|:
block|{
name|AST
name|tmp202_AST
init|=
literal|null
decl_stmt|;
name|tmp202_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp202_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_div
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_idiv
case|:
block|{
name|AST
name|tmp203_AST
init|=
literal|null
decl_stmt|;
name|tmp203_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp203_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_idiv
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_mod
case|:
block|{
name|AST
name|tmp204_AST
init|=
literal|null
decl_stmt|;
name|tmp204_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp204_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_mod
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|unaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop112
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|multiplicativeExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|multiplicativeExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unaryExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|unaryExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|expr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|expr2_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|MINUS
case|:
block|{
name|AST
name|tmp205_AST
init|=
literal|null
decl_stmt|;
name|tmp205_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp205_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
name|unionExpr
argument_list|()
expr_stmt|;
name|expr_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|UNARY_MINUS
argument_list|,
literal|"-"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|expr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|unaryExpr_AST
operator|!=
literal|null
operator|&&
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|PLUS
case|:
block|{
name|AST
name|tmp206_AST
init|=
literal|null
decl_stmt|;
name|tmp206_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp206_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|unionExpr
argument_list|()
expr_stmt|;
name|expr2_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|UNARY_PLUS
argument_list|,
literal|"+"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|expr2_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|unaryExpr_AST
operator|!=
literal|null
operator|&&
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|114
case|:
case|case
literal|115
case|:
case|case
name|XML_PI
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
name|unionExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|unaryExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unionExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|unionExpr_AST
init|=
literal|null
decl_stmt|;
name|pathExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|UNION
case|:
block|{
name|AST
name|tmp207_AST
init|=
literal|null
decl_stmt|;
name|tmp207_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp207_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|UNION
argument_list|)
expr_stmt|;
name|pathExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|EQ
case|:
case|case
name|RCURLY
case|:
case|case
name|COMMA
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_where
case|:
case|case
name|LITERAL_return
case|:
case|case
name|LITERAL_order
case|:
case|case
name|LITERAL_ascending
case|:
case|case
name|LITERAL_descending
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_cast
case|:
case|case
name|NEQ
case|:
case|case
name|GT
case|:
case|case
name|GTEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|LITERAL_to
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_idiv
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|RPPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|unionExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|unionExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|pathExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|pathExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|relPath_AST
init|=
literal|null
decl_stmt|;
name|AST
name|relPath2_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LT
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|114
case|:
case|case
literal|115
case|:
case|case
name|XML_PI
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
name|relativePathExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DSLASH
case|:
block|{
name|AST
name|tmp208_AST
init|=
literal|null
decl_stmt|;
name|tmp208_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp208_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DSLASH
argument_list|)
expr_stmt|;
name|relativePathExpr
argument_list|()
expr_stmt|;
name|relPath2_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|ABSOLUTE_DSLASH
argument_list|,
literal|"AbsoluteSlashSlash"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|relPath2_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pathExpr_AST
operator|!=
literal|null
operator|&&
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
name|boolean
name|synPredMatched118
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SLASH
operator|)
operator|)
condition|)
block|{
name|int
name|_m118
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched118
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|relativePathExpr
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched118
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m118
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched118
condition|)
block|{
name|AST
name|tmp209_AST
init|=
literal|null
decl_stmt|;
name|tmp209_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp209_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|relativePathExpr
argument_list|()
expr_stmt|;
name|relPath_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|ABSOLUTE_SLASH
argument_list|,
literal|"AbsoluteSlash"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|relPath_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pathExpr_AST
operator|!=
literal|null
operator|&&
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SLASH
operator|)
condition|)
block|{
name|AST
name|tmp210_AST
init|=
literal|null
decl_stmt|;
name|tmp210_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp210_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|pathExpr_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|ABSOLUTE_SLASH
argument_list|,
literal|"AbsoluteSlash"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pathExpr_AST
operator|!=
literal|null
operator|&&
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|pathExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|relativePathExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|relativePathExpr_AST
init|=
literal|null
decl_stmt|;
name|stepExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop122
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SLASH
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|DSLASH
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SLASH
case|:
block|{
name|AST
name|tmp211_AST
init|=
literal|null
decl_stmt|;
name|tmp211_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp211_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DSLASH
case|:
block|{
name|AST
name|tmp212_AST
init|=
literal|null
decl_stmt|;
name|tmp212_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp212_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DSLASH
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|stepExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop122
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|relativePathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|relativePathExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|stepExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|stepExpr_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched126
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m126
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched126
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_text
case|:
block|{
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_element
case|:
block|{
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched126
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m126
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched126
condition|)
block|{
name|axisStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched129
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_7
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m129
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched129
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOLLAR
case|:
block|{
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|LITERAL_comment
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
block|{
name|qName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SELF
case|:
block|{
name|match
argument_list|(
name|SELF
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|literal
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|XML_COMMENT
case|:
block|{
name|match
argument_list|(
name|XML_COMMENT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LT
case|:
block|{
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched129
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m129
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched129
condition|)
block|{
name|filterStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|axisStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|stepExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|axisStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|axisStep_AST
init|=
literal|null
decl_stmt|;
block|{
name|forwardOrReverseStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
name|predicates
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|axisStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|axisStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|literal_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
block|{
name|AST
name|tmp213_AST
init|=
literal|null
decl_stmt|;
name|tmp213_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp213_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|numericLiteral
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|filterStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|filterStep_AST
init|=
literal|null
decl_stmt|;
name|primaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|predicates
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|filterStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|filterStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forwardOrReverseStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|forwardOrReverseStep_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched138
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_child
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|105
operator|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m138
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched138
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|forwardAxisSpecifier
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched138
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m138
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched138
condition|)
block|{
name|forwardAxis
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forwardOrReverseStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched140
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_parent
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|109
operator|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m140
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched140
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|reverseAxisSpecifier
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched140
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m140
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched140
condition|)
block|{
name|reverseAxis
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forwardOrReverseStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_6
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|abbrevStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forwardOrReverseStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|forwardOrReverseStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|predicates
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|predicates_AST
init|=
literal|null
decl_stmt|;
block|{
name|_loop134
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LPPAREN
operator|)
condition|)
block|{
name|predicate
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop134
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|predicates_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|predicates_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|predicate
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|predicate_AST
init|=
literal|null
decl_stmt|;
name|AST
name|predExpr_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LPPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|predExpr_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|predicate_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|predicate_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|PREDICATE
argument_list|,
literal|"Pred"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|predExpr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|predicate_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|predicate_AST
operator|!=
literal|null
operator|&&
name|predicate_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|predicate_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|predicate_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|predicate_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|predicate_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forwardAxisSpecifier
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|forwardAxisSpecifier_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_child
case|:
block|{
name|AST
name|tmp216_AST
init|=
literal|null
decl_stmt|;
name|tmp216_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp216_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_child
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_self
case|:
block|{
name|AST
name|tmp217_AST
init|=
literal|null
decl_stmt|;
name|tmp217_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp217_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_self
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|AST
name|tmp218_AST
init|=
literal|null
decl_stmt|;
name|tmp218_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp218_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descendant
case|:
block|{
name|AST
name|tmp219_AST
init|=
literal|null
decl_stmt|;
name|tmp219_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp219_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_descendant
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|104
case|:
block|{
name|AST
name|tmp220_AST
init|=
literal|null
decl_stmt|;
name|tmp220_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp220_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|104
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|105
case|:
block|{
name|AST
name|tmp221_AST
init|=
literal|null
decl_stmt|;
name|tmp221_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp221_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|105
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|forwardAxisSpecifier_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forwardAxis
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|forwardAxis_AST
init|=
literal|null
decl_stmt|;
name|forwardAxisSpecifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|forwardAxis_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|forwardAxis_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|nodeTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|nodeTest_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched149
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m149
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched149
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|matchNot
argument_list|(
name|EOF
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched149
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m149
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched149
condition|)
block|{
name|kindTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_8
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|nameTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|nodeTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|reverseAxisSpecifier
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|reverseAxisSpecifier_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_parent
case|:
block|{
name|AST
name|tmp224_AST
init|=
literal|null
decl_stmt|;
name|tmp224_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp224_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_parent
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ancestor
case|:
block|{
name|AST
name|tmp225_AST
init|=
literal|null
decl_stmt|;
name|tmp225_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp225_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ancestor
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|108
case|:
block|{
name|AST
name|tmp226_AST
init|=
literal|null
decl_stmt|;
name|tmp226_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp226_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|108
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|109
case|:
block|{
name|AST
name|tmp227_AST
init|=
literal|null
decl_stmt|;
name|tmp227_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp227_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|109
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|reverseAxisSpecifier_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|reverseAxis
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|reverseAxis_AST
init|=
literal|null
decl_stmt|;
name|reverseAxisSpecifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|reverseAxis_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|reverseAxis_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|abbrevStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|abbrevStep_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|AT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|114
case|:
case|case
literal|115
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|AT
case|:
block|{
name|AST
name|tmp230_AST
init|=
literal|null
decl_stmt|;
name|tmp230_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp230_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|AT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_element
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|114
case|:
case|case
literal|115
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|nodeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|abbrevStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|PARENT
case|:
block|{
name|AST
name|tmp231_AST
init|=
literal|null
decl_stmt|;
name|tmp231_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp231_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PARENT
argument_list|)
expr_stmt|;
name|abbrevStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|abbrevStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|nameTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|nameTest_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched153
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|NCNAME
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STAR
operator|)
operator|)
condition|)
block|{
name|int
name|_m153
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched153
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
block|{
block|{
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STAR
case|:
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched153
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m153
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched153
condition|)
block|{
name|wildcard
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nameTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|nameTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|nameTest_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|QNAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|nameTest_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|nameTest_AST
operator|!=
literal|null
operator|&&
name|nameTest_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|nameTest_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|nameTest_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|nameTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|nameTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|wildcard
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|wildcard_AST
init|=
literal|null
decl_stmt|;
name|Token
name|nc1
init|=
literal|null
decl_stmt|;
name|AST
name|nc1_AST
init|=
literal|null
decl_stmt|;
name|Token
name|nc2
init|=
literal|null
decl_stmt|;
name|AST
name|nc2_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched156
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STAR
operator|)
operator|)
condition|)
block|{
name|int
name|_m156
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched156
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched156
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m156
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched156
condition|)
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|nc1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nc1_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|nc1
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|nc1_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|PREFIX_WILDCARD
argument_list|,
literal|"*"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|nc1_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|wildcard_AST
operator|!=
literal|null
operator|&&
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|NCNAME
operator|)
condition|)
block|{
name|nc2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nc2_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|nc2
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|nc2_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|nc2_AST
argument_list|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|WILDCARD
argument_list|,
literal|"*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|wildcard_AST
operator|!=
literal|null
operator|&&
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STAR
operator|)
condition|)
block|{
name|AST
name|tmp236_AST
init|=
literal|null
decl_stmt|;
name|tmp236_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp236_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
comment|// make this distinct from multiplication
name|wildcard_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|WILDCARD
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|wildcard_AST
operator|!=
literal|null
operator|&&
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|wildcard_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|primaryExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|primaryExpr_AST
init|=
literal|null
decl_stmt|;
name|String
name|varName
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|LITERAL_comment
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
name|functionCall
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|SELF
case|:
block|{
name|contextItemExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|parenthesizedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DOLLAR
case|:
block|{
name|match
argument_list|(
name|DOLLAR
argument_list|)
expr_stmt|;
name|varName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|primaryExpr_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|VARIABLE_REF
argument_list|,
name|varName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|primaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|primaryExpr_AST
operator|!=
literal|null
operator|&&
name|primaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|primaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|primaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LT
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|XML_PI
case|:
block|{
name|constructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|primaryExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionCall
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|functionCall_AST
init|=
literal|null
decl_stmt|;
name|AST
name|params_AST
init|=
literal|null
decl_stmt|;
name|String
name|fnName
init|=
literal|null
decl_stmt|;
name|fnName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionCall_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionCall_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION
argument_list|,
name|fnName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|functionCall_AST
operator|!=
literal|null
operator|&&
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LT
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|114
case|:
case|case
literal|115
case|:
case|case
name|XML_PI
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
name|functionParameters
argument_list|()
expr_stmt|;
name|params_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionCall_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionCall_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION
argument_list|,
name|fnName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|params_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|functionCall_AST
operator|!=
literal|null
operator|&&
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|functionCall_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|functionCall_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|contextItemExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|contextItemExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp240_AST
init|=
literal|null
decl_stmt|;
name|tmp240_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp240_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SELF
argument_list|)
expr_stmt|;
name|contextItemExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|contextItemExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|parenthesizedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|parenthesizedExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|e_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|LITERAL_element
case|:
case|case
name|DOLLAR
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|STAR
case|:
case|case
name|PLUS
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LT
case|:
case|case
name|MINUS
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|XML_COMMENT
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
case|case
name|LITERAL_comment
case|:
case|case
literal|114
case|:
case|case
literal|115
case|:
case|case
name|XML_PI
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
name|expr
argument_list|()
expr_stmt|;
name|e_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|parenthesizedExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|parenthesizedExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|PARENTHESIZED
argument_list|,
literal|"Parenthesized"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|e_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|parenthesizedExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|parenthesizedExpr_AST
operator|!=
literal|null
operator|&&
name|parenthesizedExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|parenthesizedExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|parenthesizedExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|parenthesizedExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|parenthesizedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|constructor
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|constructor_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LT
case|:
block|{
name|elementConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|constructor_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XML_COMMENT
case|:
block|{
name|xmlComment
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|constructor_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XML_PI
case|:
block|{
name|xmlPI
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|constructor_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|constructor_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|numericLiteral
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|numericLiteral_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOUBLE_LITERAL
case|:
block|{
name|AST
name|tmp243_AST
init|=
literal|null
decl_stmt|;
name|tmp243_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp243_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOUBLE_LITERAL
argument_list|)
expr_stmt|;
name|numericLiteral_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DECIMAL_LITERAL
case|:
block|{
name|AST
name|tmp244_AST
init|=
literal|null
decl_stmt|;
name|tmp244_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp244_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DECIMAL_LITERAL
argument_list|)
expr_stmt|;
name|numericLiteral_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|INTEGER_LITERAL
case|:
block|{
name|AST
name|tmp245_AST
init|=
literal|null
decl_stmt|;
name|tmp245_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp245_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
name|numericLiteral_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|numericLiteral_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionParameters
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|functionParameters_AST
init|=
literal|null
decl_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop167
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|exprSingle
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop167
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|functionParameters_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|functionParameters_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|textTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|textTest_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp247_AST
init|=
literal|null
decl_stmt|;
name|tmp247_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp247_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|textTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|textTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|anyKindTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|anyKindTest_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp250_AST
init|=
literal|null
decl_stmt|;
name|tmp250_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp250_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|anyKindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|anyKindTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|elementTest_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp253_AST
init|=
literal|null
decl_stmt|;
name|tmp253_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp253_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_element
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|elementTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|elementTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|attributeTest_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp256_AST
init|=
literal|null
decl_stmt|;
name|tmp256_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp256_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|attributeTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|attributeTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|commentTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|commentTest_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp259_AST
init|=
literal|null
decl_stmt|;
name|tmp259_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp259_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_comment
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|commentTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|commentTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|piTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|piTest_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp262_AST
init|=
literal|null
decl_stmt|;
name|tmp262_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp262_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|114
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|piTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|piTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|documentTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|documentTest_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp265_AST
init|=
literal|null
decl_stmt|;
name|tmp265_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp265_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|115
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|documentTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|documentTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|ncnameOrKeyword
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|ncnameOrKeyword_AST
init|=
literal|null
decl_stmt|;
name|Token
name|n1
init|=
literal|null
decl_stmt|;
name|AST
name|n1_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
block|{
name|n1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|n1_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|n1_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|n1
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
name|ncnameOrKeyword_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XQUERY
case|:
case|case
name|VERSION
case|:
case|case
name|LITERAL_namespace
case|:
case|case
name|LITERAL_default
case|:
case|case
name|LITERAL_function
case|:
case|case
name|LITERAL_variable
case|:
case|case
name|LITERAL_empty
case|:
case|case
name|LITERAL_item
case|:
case|case
name|LITERAL_for
case|:
case|case
name|LITERAL_let
case|:
case|case
name|LITERAL_if
case|:
case|case
name|LITERAL_then
case|:
case|case
name|LITERAL_else
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|104
case|:
case|case
literal|105
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|108
case|:
case|case
literal|109
case|:
case|case
name|LITERAL_comment
case|:
case|case
name|LITERAL_document
case|:
case|case
name|LITERAL_collection
case|:
block|{
name|name
operator|=
name|reservedKeywords
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|ncnameOrKeyword_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|ncnameOrKeyword_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|void
name|elementConstructor
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|elementConstructor_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|true
expr_stmt|;
name|boolean
name|synPredMatched183
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LT
operator|)
operator|)
condition|)
block|{
name|int
name|_m183
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched183
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|qName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|WS
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched183
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m183
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched183
condition|)
block|{
name|elementWithAttributes
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementConstructor_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LT
operator|)
condition|)
block|{
name|elementWithoutAttributes
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementConstructor_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|elementConstructor_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xmlComment
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|xmlComment_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp268_AST
init|=
literal|null
decl_stmt|;
name|tmp268_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp268_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XML_COMMENT
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XML_COMMENT_END
argument_list|)
expr_stmt|;
name|xmlComment_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|xmlComment_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xmlPI
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|xmlPI_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp270_AST
init|=
literal|null
decl_stmt|;
name|tmp270_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp270_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XML_PI
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XML_PI_END
argument_list|)
expr_stmt|;
name|xmlPI_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|xmlPI_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementWithAttributes
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|elementWithAttributes_AST
init|=
literal|null
decl_stmt|;
name|AST
name|attrs_AST
init|=
literal|null
decl_stmt|;
name|AST
name|content_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|attributeList
argument_list|()
expr_stmt|;
name|attrs_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SLASH
case|:
block|{
block|{
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithAttributes_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
if|if
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
name|elementWithAttributes_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|ELEMENT
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|attrs_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementWithAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementWithAttributes_AST
operator|!=
literal|null
operator|&&
name|elementWithAttributes_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementWithAttributes_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementWithAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|GT
case|:
block|{
block|{
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementStack
operator|.
name|push
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
block|}
name|mixedElementContent
argument_list|()
expr_stmt|;
name|content_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|END_TAG_START
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithAttributes_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
if|if
condition|(
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|RecognitionException
argument_list|(
literal|"found wrong closing tag: "
operator|+
name|name
argument_list|)
throw|;
name|String
name|prev
init|=
operator|(
name|String
operator|)
name|elementStack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prev
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
throw|throw
operator|new
name|RecognitionException
argument_list|(
literal|"found closing tag: "
operator|+
name|name
operator|+
literal|"; expected: "
operator|+
name|prev
argument_list|)
throw|;
name|elementWithAttributes_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|ELEMENT
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|attrs_AST
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
block|}
name|currentAST
operator|.
name|root
operator|=
name|elementWithAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementWithAttributes_AST
operator|!=
literal|null
operator|&&
name|elementWithAttributes_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementWithAttributes_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementWithAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|elementWithAttributes_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|elementWithAttributes_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementWithoutAttributes
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|elementWithoutAttributes_AST
init|=
literal|null
decl_stmt|;
name|AST
name|content_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|AST
name|tmp278_AST
init|=
literal|null
decl_stmt|;
name|tmp278_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp278_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SLASH
case|:
block|{
block|{
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithoutAttributes_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|elementWithoutAttributes_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|ELEMENT
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementWithoutAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementWithoutAttributes_AST
operator|!=
literal|null
operator|&&
name|elementWithoutAttributes_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementWithoutAttributes_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementWithoutAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
case|case
name|GT
case|:
block|{
block|{
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementStack
operator|.
name|push
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
block|}
name|mixedElementContent
argument_list|()
expr_stmt|;
name|content_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|END_TAG_START
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementWithoutAttributes_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
if|if
condition|(
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
throw|throw
operator|new
name|RecognitionException
argument_list|(
literal|"found wrong closing tag: "
operator|+
name|name
argument_list|)
throw|;
name|String
name|prev
init|=
operator|(
name|String
operator|)
name|elementStack
operator|.
name|pop
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|prev
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
throw|throw
operator|new
name|RecognitionException
argument_list|(
literal|"found closing tag: "
operator|+
name|name
operator|+
literal|"; expected: "
operator|+
name|prev
argument_list|)
throw|;
name|elementWithoutAttributes_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|ELEMENT
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|content_AST
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|elementStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
block|}
name|currentAST
operator|.
name|root
operator|=
name|elementWithoutAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementWithoutAttributes_AST
operator|!=
literal|null
operator|&&
name|elementWithoutAttributes_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementWithoutAttributes_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementWithoutAttributes_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|elementWithoutAttributes_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|elementWithoutAttributes_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mixedElementContent
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|mixedElementContent_AST
init|=
literal|null
decl_stmt|;
block|{
name|_loop201
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_9
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|elementContent
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop201
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|mixedElementContent_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|mixedElementContent_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeList
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|attributeList_AST
init|=
literal|null
decl_stmt|;
block|{
name|int
name|_cnt194
init|=
literal|0
decl_stmt|;
name|_loop194
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|WS
operator|)
condition|)
block|{
name|attributeDef
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt194
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop194
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt194
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|attributeList_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|attributeList_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeDef
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|attributeDef_AST
init|=
literal|null
decl_stmt|;
name|AST
name|value_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|lexer
operator|.
name|parseStringLiterals
operator|=
literal|false
expr_stmt|;
name|match
argument_list|(
name|WS
argument_list|)
expr_stmt|;
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QUOT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|true
expr_stmt|;
block|}
name|attributeValue
argument_list|()
expr_stmt|;
name|value_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|false
expr_stmt|;
block|}
name|match
argument_list|(
name|QUOT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|parseStringLiterals
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|attributeDef_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|attributeDef_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|ATTRIBUTE
argument_list|,
name|name
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|value_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|attributeDef_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|attributeDef_AST
operator|!=
literal|null
operator|&&
name|attributeDef_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|attributeDef_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|attributeDef_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|attributeDef_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|attributeDef_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeValue
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|attributeValue_AST
init|=
literal|null
decl_stmt|;
block|{
name|int
name|_cnt198
init|=
literal|0
decl_stmt|;
name|_loop198
label|:
do|do
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ATTRIBUTE_CONTENT
case|:
block|{
name|AST
name|tmp288_AST
init|=
literal|null
decl_stmt|;
name|tmp288_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp288_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ATTRIBUTE_CONTENT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
name|attributeEnclosedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
if|if
condition|(
name|_cnt198
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop198
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_cnt198
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|attributeValue_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|attributeValue_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|attributeEnclosedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|attributeEnclosedExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp289_AST
init|=
literal|null
decl_stmt|;
name|tmp289_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp289_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|false
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
block|}
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|lexer
operator|.
name|inAttributeContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|true
expr_stmt|;
block|}
name|attributeEnclosedExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|attributeEnclosedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|elementContent
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|elementContent_AST
init|=
literal|null
decl_stmt|;
name|Token
name|content
init|=
literal|null
decl_stmt|;
name|AST
name|content_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LT
case|:
block|{
name|elementConstructor
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|ELEMENT_CONTENT
case|:
block|{
name|content
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|content_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|content_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ELEMENT_CONTENT
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementContent_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|elementContent_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|TEXT
argument_list|,
name|content
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|elementContent_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|elementContent_AST
operator|!=
literal|null
operator|&&
name|elementContent_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|elementContent_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|elementContent_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|elementContent_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XML_COMMENT
case|:
block|{
name|xmlComment
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XML_PI
case|:
block|{
name|xmlPI
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LCURLY
case|:
block|{
name|enclosedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|elementContent_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|elementContent_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|enclosedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|enclosedExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp291_AST
init|=
literal|null
decl_stmt|;
name|tmp291_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp291_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|globalStack
operator|.
name|push
argument_list|(
name|elementStack
argument_list|)
expr_stmt|;
name|elementStack
operator|=
operator|new
name|Stack
argument_list|()
expr_stmt|;
name|lexer
operator|.
name|inElementContent
operator|=
literal|false
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|false
expr_stmt|;
block|}
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RCURLY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|elementStack
operator|=
operator|(
name|Stack
operator|)
name|globalStack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|lexer
operator|.
name|inElementContent
operator|=
literal|true
expr_stmt|;
name|lexer
operator|.
name|wsExplicit
operator|=
literal|true
expr_stmt|;
block|}
name|enclosedExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|enclosedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|reservedKeywords
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|reservedKeywords_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_div
case|:
block|{
name|AST
name|tmp293_AST
init|=
literal|null
decl_stmt|;
name|tmp293_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp293_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_div
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"div"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_mod
case|:
block|{
name|AST
name|tmp294_AST
init|=
literal|null
decl_stmt|;
name|tmp294_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp294_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_mod
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"mod"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|AST
name|tmp295_AST
init|=
literal|null
decl_stmt|;
name|tmp295_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp295_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"text"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|AST
name|tmp296_AST
init|=
literal|null
decl_stmt|;
name|tmp296_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp296_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"node"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_or
case|:
block|{
name|AST
name|tmp297_AST
init|=
literal|null
decl_stmt|;
name|tmp297_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp297_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_or
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"or"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_and
case|:
block|{
name|AST
name|tmp298_AST
init|=
literal|null
decl_stmt|;
name|tmp298_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp298_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_and
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"and"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_child
case|:
block|{
name|AST
name|tmp299_AST
init|=
literal|null
decl_stmt|;
name|tmp299_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp299_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_child
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"child"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_parent
case|:
block|{
name|AST
name|tmp300_AST
init|=
literal|null
decl_stmt|;
name|tmp300_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp300_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"parent"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_self
case|:
block|{
name|AST
name|tmp301_AST
init|=
literal|null
decl_stmt|;
name|tmp301_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp301_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_self
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"self"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|AST
name|tmp302_AST
init|=
literal|null
decl_stmt|;
name|tmp302_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp302_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"attribute"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_comment
case|:
block|{
name|AST
name|tmp303_AST
init|=
literal|null
decl_stmt|;
name|tmp303_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp303_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_comment
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"comment"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_document
case|:
block|{
name|AST
name|tmp304_AST
init|=
literal|null
decl_stmt|;
name|tmp304_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp304_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_document
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"document"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_collection
case|:
block|{
name|AST
name|tmp305_AST
init|=
literal|null
decl_stmt|;
name|tmp305_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp305_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"collection"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ancestor
case|:
block|{
name|AST
name|tmp306_AST
init|=
literal|null
decl_stmt|;
name|tmp306_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp306_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ancestor
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ancestor"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descendant
case|:
block|{
name|AST
name|tmp307_AST
init|=
literal|null
decl_stmt|;
name|tmp307_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp307_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_descendant
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"descendant"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|104
case|:
block|{
name|AST
name|tmp308_AST
init|=
literal|null
decl_stmt|;
name|tmp308_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp308_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|104
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"descendant-or-self"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|108
case|:
block|{
name|AST
name|tmp309_AST
init|=
literal|null
decl_stmt|;
name|tmp309_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp309_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|108
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ancestor-or-self"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|109
case|:
block|{
name|AST
name|tmp310_AST
init|=
literal|null
decl_stmt|;
name|tmp310_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp310_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|109
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"preceding-sibling"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|105
case|:
block|{
name|AST
name|tmp311_AST
init|=
literal|null
decl_stmt|;
name|tmp311_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp311_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|105
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"following-sibling"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_item
case|:
block|{
name|AST
name|tmp312_AST
init|=
literal|null
decl_stmt|;
name|tmp312_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp312_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_item
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"item"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_empty
case|:
block|{
name|AST
name|tmp313_AST
init|=
literal|null
decl_stmt|;
name|tmp313_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp313_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_empty
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"empty"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|VERSION
case|:
block|{
name|AST
name|tmp314_AST
init|=
literal|null
decl_stmt|;
name|tmp314_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp314_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|VERSION
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"version"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|XQUERY
case|:
block|{
name|AST
name|tmp315_AST
init|=
literal|null
decl_stmt|;
name|tmp315_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp315_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XQUERY
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"xquery"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_variable
case|:
block|{
name|AST
name|tmp316_AST
init|=
literal|null
decl_stmt|;
name|tmp316_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp316_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_variable
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"variable"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_namespace
case|:
block|{
name|AST
name|tmp317_AST
init|=
literal|null
decl_stmt|;
name|tmp317_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp317_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_namespace
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"namespace"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_if
case|:
block|{
name|AST
name|tmp318_AST
init|=
literal|null
decl_stmt|;
name|tmp318_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp318_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_if
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"if"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_then
case|:
block|{
name|AST
name|tmp319_AST
init|=
literal|null
decl_stmt|;
name|tmp319_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp319_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_then
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"then"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_else
case|:
block|{
name|AST
name|tmp320_AST
init|=
literal|null
decl_stmt|;
name|tmp320_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp320_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_else
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"else"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_for
case|:
block|{
name|AST
name|tmp321_AST
init|=
literal|null
decl_stmt|;
name|tmp321_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp321_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_for
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"for"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_let
case|:
block|{
name|AST
name|tmp322_AST
init|=
literal|null
decl_stmt|;
name|tmp322_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp322_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_let
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"let"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_default
case|:
block|{
name|AST
name|tmp323_AST
init|=
literal|null
decl_stmt|;
name|tmp323_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp323_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_default
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"default"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_function
case|:
block|{
name|AST
name|tmp324_AST
init|=
literal|null
decl_stmt|;
name|tmp324_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp324_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_function
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"function"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|reservedKeywords_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|_tokenNames
init|=
block|{
literal|"<0>"
block|,
literal|"EOF"
block|,
literal|"<2>"
block|,
literal|"NULL_TREE_LOOKAHEAD"
block|,
literal|"QNAME"
block|,
literal|"PREDICATE"
block|,
literal|"FLWOR"
block|,
literal|"PARENTHESIZED"
block|,
literal|"ABSOLUTE_SLASH"
block|,
literal|"ABSOLUTE_DSLASH"
block|,
literal|"WILDCARD"
block|,
literal|"PREFIX_WILDCARD"
block|,
literal|"FUNCTION"
block|,
literal|"UNARY_MINUS"
block|,
literal|"UNARY_PLUS"
block|,
literal|"XPOINTER"
block|,
literal|"XPOINTER_ID"
block|,
literal|"VARIABLE_REF"
block|,
literal|"VARIABLE_BINDING"
block|,
literal|"ELEMENT"
block|,
literal|"ATTRIBUTE"
block|,
literal|"TEXT"
block|,
literal|"VERSION_DECL"
block|,
literal|"NAMESPACE_DECL"
block|,
literal|"DEF_NAMESPACE_DECL"
block|,
literal|"DEF_FUNCTION_NS_DECL"
block|,
literal|"GLOBAL_VAR"
block|,
literal|"FUNCTION_DECL"
block|,
literal|"PROLOG"
block|,
literal|"ATOMIC_TYPE"
block|,
literal|"MODULE"
block|,
literal|"ORDER_BY"
block|,
literal|"POSITIONAL_VAR"
block|,
literal|"\"xpointer\""
block|,
literal|"LPAREN"
block|,
literal|"RPAREN"
block|,
literal|"NCNAME"
block|,
literal|"\"xquery\""
block|,
literal|"\"version\""
block|,
literal|"SEMICOLON"
block|,
literal|"\"declare\""
block|,
literal|"\"namespace\""
block|,
literal|"\"default\""
block|,
literal|"\"function\""
block|,
literal|"\"variable\""
block|,
literal|"STRING_LITERAL"
block|,
literal|"EQ"
block|,
literal|"\"element\""
block|,
literal|"DOLLAR"
block|,
literal|"LCURLY"
block|,
literal|"RCURLY"
block|,
literal|"\"as\""
block|,
literal|"COMMA"
block|,
literal|"\"empty\""
block|,
literal|"QUESTION"
block|,
literal|"STAR"
block|,
literal|"PLUS"
block|,
literal|"\"item\""
block|,
literal|"\"for\""
block|,
literal|"\"let\""
block|,
literal|"\"if\""
block|,
literal|"\"where\""
block|,
literal|"\"return\""
block|,
literal|"\"in\""
block|,
literal|"\"at\""
block|,
literal|"COLON"
block|,
literal|"\"order\""
block|,
literal|"\"by\""
block|,
literal|"\"ascending\""
block|,
literal|"\"descending\""
block|,
literal|"\"greatest\""
block|,
literal|"\"least\""
block|,
literal|"\"then\""
block|,
literal|"\"else\""
block|,
literal|"\"or\""
block|,
literal|"\"and\""
block|,
literal|"\"cast\""
block|,
literal|"NEQ"
block|,
literal|"GT"
block|,
literal|"GTEQ"
block|,
literal|"LT"
block|,
literal|"LTEQ"
block|,
literal|"ANDEQ"
block|,
literal|"OREQ"
block|,
literal|"\"to\""
block|,
literal|"MINUS"
block|,
literal|"\"div\""
block|,
literal|"\"idiv\""
block|,
literal|"\"mod\""
block|,
literal|"UNION"
block|,
literal|"SLASH"
block|,
literal|"DSLASH"
block|,
literal|"\"text\""
block|,
literal|"\"node\""
block|,
literal|"SELF"
block|,
literal|"XML_COMMENT"
block|,
literal|"LPPAREN"
block|,
literal|"RPPAREN"
block|,
literal|"AT"
block|,
literal|"PARENT"
block|,
literal|"\"child\""
block|,
literal|"\"self\""
block|,
literal|"\"attribute\""
block|,
literal|"\"descendant\""
block|,
literal|"\"descendant-or-self\""
block|,
literal|"\"following-sibling\""
block|,
literal|"\"parent\""
block|,
literal|"\"ancestor\""
block|,
literal|"\"ancestor-or-self\""
block|,
literal|"\"preceding-sibling\""
block|,
literal|"DOUBLE_LITERAL"
block|,
literal|"DECIMAL_LITERAL"
block|,
literal|"INTEGER_LITERAL"
block|,
literal|"\"comment\""
block|,
literal|"\"processing-instruction\""
block|,
literal|"\"document-node\""
block|,
literal|"WS"
block|,
literal|"END_TAG_START"
block|,
literal|"QUOT"
block|,
literal|"ATTRIBUTE_CONTENT"
block|,
literal|"ELEMENT_CONTENT"
block|,
literal|"XML_COMMENT_END"
block|,
literal|"XML_PI"
block|,
literal|"XML_PI_END"
block|,
literal|"\"document\""
block|,
literal|"\"collection\""
block|,
literal|"XML_PI_START"
block|,
literal|"LETTER"
block|,
literal|"DIGITS"
block|,
literal|"HEX_DIGITS"
block|,
literal|"NMSTART"
block|,
literal|"NMCHAR"
block|,
literal|"EXPR_COMMENT"
block|,
literal|"PREDEFINED_ENTITY_REF"
block|,
literal|"CHAR_REF"
block|,
literal|"NEXT_TOKEN"
block|,
literal|"CHAR"
block|,
literal|"BASECHAR"
block|,
literal|"IDEOGRAPHIC"
block|,
literal|"COMBINING_CHAR"
block|,
literal|"DIGIT"
block|,
literal|"EXTENDER"
block|}
decl_stmt|;
specifier|protected
name|void
name|buildTokenTypeASTClassMap
parameter_list|()
block|{
name|tokenTypeToASTClassMap
operator|=
literal|null
expr_stmt|;
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2279313391363293184L
block|,
literal|3751498476670750464L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2170768486777749504L
block|,
literal|3459397764624944896L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2170909224266104832L
block|,
literal|3462775464345472768L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_3
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|140737488355328L
block|,
literal|3940925357162496L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_3
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_4
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2279312291851665408L
block|,
literal|3751498476670750464L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_4
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_4
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_5
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|36028797018963968L
block|,
literal|29360128L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_5
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_5
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_6
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2206938021285068800L
block|,
literal|3462775515885080320L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_6
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_6
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_7
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2171085163306418176L
block|,
literal|3748120725207191296L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_7
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_7
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_8
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|2206797283796713472L
block|,
literal|3459397764624944896L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_8
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_8
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_9
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|562949953421312L
block|,
literal|360287972337188864L
block|,
literal|0L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_9
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_9
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

