begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR : "XPathParser2.g" -> "XPathParser2.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|debug
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|*
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LLkParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ParserSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTFactory
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTPair
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|ASTArray
import|;
end_import

begin_class
specifier|public
class|class
name|XPathParser2
extends|extends
name|antlr
operator|.
name|LLkParser
implements|implements
name|XPathParser2TokenTypes
block|{
specifier|protected
name|ArrayList
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|foundError
init|=
literal|false
decl_stmt|;
specifier|public
name|boolean
name|foundErrors
parameter_list|()
block|{
return|return
name|foundError
return|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exceptions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Exception
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|foundError
operator|=
literal|true
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XPathParser2
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|tokenBuf
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathParser2
parameter_list|(
name|TokenBuffer
name|tokenBuf
parameter_list|)
block|{
name|this
argument_list|(
name|tokenBuf
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XPathParser2
parameter_list|(
name|TokenStream
name|lexer
parameter_list|,
name|int
name|k
parameter_list|)
block|{
name|super
argument_list|(
name|lexer
argument_list|,
name|k
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathParser2
parameter_list|(
name|TokenStream
name|lexer
parameter_list|)
block|{
name|this
argument_list|(
name|lexer
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathParser2
parameter_list|(
name|ParserSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
name|buildTokenTypeASTClassMap
argument_list|()
expr_stmt|;
name|astFactory
operator|=
operator|new
name|ASTFactory
argument_list|(
name|getTokenTypeToASTClassMap
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|imaginaryTokenDefinitions
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|imaginaryTokenDefinitions_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp47_AST
init|=
literal|null
decl_stmt|;
name|tmp47_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp47_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|QNAME
argument_list|)
expr_stmt|;
name|AST
name|tmp48_AST
init|=
literal|null
decl_stmt|;
name|tmp48_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp48_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PREDICATE
argument_list|)
expr_stmt|;
name|AST
name|tmp49_AST
init|=
literal|null
decl_stmt|;
name|tmp49_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp49_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PARENTHESIZED
argument_list|)
expr_stmt|;
name|AST
name|tmp50_AST
init|=
literal|null
decl_stmt|;
name|tmp50_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp50_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ABSOLUTE_SLASH
argument_list|)
expr_stmt|;
name|AST
name|tmp51_AST
init|=
literal|null
decl_stmt|;
name|tmp51_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp51_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ABSOLUTE_DSLASH
argument_list|)
expr_stmt|;
name|AST
name|tmp52_AST
init|=
literal|null
decl_stmt|;
name|tmp52_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp52_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|WILDCARD
argument_list|)
expr_stmt|;
name|AST
name|tmp53_AST
init|=
literal|null
decl_stmt|;
name|tmp53_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp53_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PREFIX_WILDCARD
argument_list|)
expr_stmt|;
name|AST
name|tmp54_AST
init|=
literal|null
decl_stmt|;
name|tmp54_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp54_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|FUNCTION
argument_list|)
expr_stmt|;
name|AST
name|tmp55_AST
init|=
literal|null
decl_stmt|;
name|tmp55_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp55_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|UNARY_MINUS
argument_list|)
expr_stmt|;
name|AST
name|tmp56_AST
init|=
literal|null
decl_stmt|;
name|tmp56_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp56_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|UNARY_PLUS
argument_list|)
expr_stmt|;
name|AST
name|tmp57_AST
init|=
literal|null
decl_stmt|;
name|tmp57_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp57_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XPOINTER
argument_list|)
expr_stmt|;
name|AST
name|tmp58_AST
init|=
literal|null
decl_stmt|;
name|tmp58_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp58_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|XPOINTER_ID
argument_list|)
expr_stmt|;
name|imaginaryTokenDefinitions_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|imaginaryTokenDefinitions_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpointer
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|xpointer_AST
init|=
literal|null
decl_stmt|;
name|AST
name|ex_AST
init|=
literal|null
decl_stmt|;
name|Token
name|nc
init|=
literal|null
decl_stmt|;
name|AST
name|nc_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_xpointer
case|:
block|{
name|AST
name|tmp59_AST
init|=
literal|null
decl_stmt|;
name|tmp59_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp59_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_xpointer
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|ex_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|XPOINTER
argument_list|,
literal|"xpointer"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|ex_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|xpointer_AST
operator|!=
literal|null
operator|&&
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
block|{
name|nc
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nc_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|nc
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|nc_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|XPOINTER_ID
argument_list|,
literal|"id"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|nc_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|xpointer_AST
operator|!=
literal|null
operator|&&
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|xpointer_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|xpointer_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|xpointer_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|xpointer_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|expr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|expr_AST
init|=
literal|null
decl_stmt|;
name|orExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|expr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|expr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpath
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|xpath_AST
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|xpath_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
name|e
throw|;
block|}
block|}
name|returnAST
operator|=
name|xpath_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|orExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|orExpr_AST
init|=
literal|null
decl_stmt|;
name|andExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop8
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_or
operator|)
condition|)
block|{
name|AST
name|tmp62_AST
init|=
literal|null
decl_stmt|;
name|tmp62_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp62_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_or
argument_list|)
expr_stmt|;
name|andExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop8
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|orExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|orExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|andExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|andExpr_AST
init|=
literal|null
decl_stmt|;
name|comparisonExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop11
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_and
operator|)
condition|)
block|{
name|AST
name|tmp63_AST
init|=
literal|null
decl_stmt|;
name|tmp63_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp63_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_and
argument_list|)
expr_stmt|;
name|comparisonExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop11
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|andExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|andExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|comparisonExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|comparisonExpr_AST
init|=
literal|null
decl_stmt|;
name|additiveExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
case|case
name|GT
case|:
case|case
name|GTEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|EQ
case|:
block|{
name|AST
name|tmp64_AST
init|=
literal|null
decl_stmt|;
name|tmp64_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp64_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|EQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NEQ
case|:
block|{
name|AST
name|tmp65_AST
init|=
literal|null
decl_stmt|;
name|tmp65_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp65_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NEQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|GT
case|:
block|{
name|AST
name|tmp66_AST
init|=
literal|null
decl_stmt|;
name|tmp66_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp66_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|GTEQ
case|:
block|{
name|AST
name|tmp67_AST
init|=
literal|null
decl_stmt|;
name|tmp67_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp67_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|GTEQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LT
case|:
block|{
name|AST
name|tmp68_AST
init|=
literal|null
decl_stmt|;
name|tmp68_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp68_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LTEQ
case|:
block|{
name|AST
name|tmp69_AST
init|=
literal|null
decl_stmt|;
name|tmp69_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp69_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LTEQ
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|additiveExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|ANDEQ
case|:
block|{
name|AST
name|tmp70_AST
init|=
literal|null
decl_stmt|;
name|tmp70_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp70_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|ANDEQ
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OREQ
case|:
block|{
name|AST
name|tmp71_AST
init|=
literal|null
decl_stmt|;
name|tmp71_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp71_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|OREQ
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|AST
name|tmp72_AST
init|=
literal|null
decl_stmt|;
name|tmp72_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp72_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|RPPAREN
case|:
case|case
name|COMMA
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|comparisonExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|comparisonExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|additiveExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|additiveExpr_AST
init|=
literal|null
decl_stmt|;
name|multiplicativeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop21
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|PLUS
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|MINUS
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|PLUS
case|:
block|{
name|AST
name|tmp73_AST
init|=
literal|null
decl_stmt|;
name|tmp73_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp73_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|MINUS
case|:
block|{
name|AST
name|tmp74_AST
init|=
literal|null
decl_stmt|;
name|tmp74_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp74_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|multiplicativeExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop21
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|additiveExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|additiveExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|multiplicativeExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|multiplicativeExpr_AST
init|=
literal|null
decl_stmt|;
name|unaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop25
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|STAR
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
name|LITERAL_mod
operator|)
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STAR
case|:
block|{
name|AST
name|tmp75_AST
init|=
literal|null
decl_stmt|;
name|tmp75_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp75_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_div
case|:
block|{
name|AST
name|tmp76_AST
init|=
literal|null
decl_stmt|;
name|tmp76_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp76_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_div
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_mod
case|:
block|{
name|AST
name|tmp77_AST
init|=
literal|null
decl_stmt|;
name|tmp77_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp77_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_mod
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|unaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop25
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|multiplicativeExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|multiplicativeExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unaryExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|unaryExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|expr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|expr2_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|MINUS
case|:
block|{
name|AST
name|tmp78_AST
init|=
literal|null
decl_stmt|;
name|tmp78_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp78_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|MINUS
argument_list|)
expr_stmt|;
name|unionExpr
argument_list|()
expr_stmt|;
name|expr_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|UNARY_MINUS
argument_list|,
literal|"-"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|expr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|unaryExpr_AST
operator|!=
literal|null
operator|&&
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|PLUS
case|:
block|{
name|AST
name|tmp79_AST
init|=
literal|null
decl_stmt|;
name|tmp79_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp79_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PLUS
argument_list|)
expr_stmt|;
name|unionExpr
argument_list|()
expr_stmt|;
name|expr2_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|UNARY_PLUS
argument_list|,
literal|"+"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|expr2_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|unaryExpr_AST
operator|!=
literal|null
operator|&&
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|unaryExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|unaryExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|unionExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|unaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|unaryExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|unionExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|unionExpr_AST
init|=
literal|null
decl_stmt|;
name|pathExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|UNION
case|:
block|{
name|AST
name|tmp80_AST
init|=
literal|null
decl_stmt|;
name|tmp80_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp80_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|UNION
argument_list|)
expr_stmt|;
name|pathExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
case|case
name|GT
case|:
case|case
name|GTEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|RPPAREN
case|:
case|case
name|COMMA
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|unionExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|unionExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|pathExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|pathExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|relPath_AST
init|=
literal|null
decl_stmt|;
name|AST
name|relPath2_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|relativePathExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DSLASH
case|:
block|{
name|AST
name|tmp81_AST
init|=
literal|null
decl_stmt|;
name|tmp81_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp81_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DSLASH
argument_list|)
expr_stmt|;
name|relativePathExpr
argument_list|()
expr_stmt|;
name|relPath2_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|ABSOLUTE_DSLASH
argument_list|,
literal|"AbsoluteSlashSlash"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|relPath2_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pathExpr_AST
operator|!=
literal|null
operator|&&
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
name|boolean
name|synPredMatched31
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SLASH
operator|)
operator|)
condition|)
block|{
name|int
name|_m31
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched31
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|relativePathExpr
argument_list|()
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched31
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m31
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched31
condition|)
block|{
name|AST
name|tmp82_AST
init|=
literal|null
decl_stmt|;
name|tmp82_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp82_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
name|relativePathExpr
argument_list|()
expr_stmt|;
name|relPath_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|ABSOLUTE_SLASH
argument_list|,
literal|"AbsoluteSlash"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|relPath_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pathExpr_AST
operator|!=
literal|null
operator|&&
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SLASH
operator|)
condition|)
block|{
name|AST
name|tmp83_AST
init|=
literal|null
decl_stmt|;
name|tmp83_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp83_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|pathExpr_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|ABSOLUTE_SLASH
argument_list|,
literal|"AbsoluteSlash"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|pathExpr_AST
operator|!=
literal|null
operator|&&
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|pathExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|pathExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|pathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|pathExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|relativePathExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|relativePathExpr_AST
init|=
literal|null
decl_stmt|;
name|stepExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop35
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|SLASH
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|DSLASH
operator|)
condition|)
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|SLASH
case|:
block|{
name|AST
name|tmp84_AST
init|=
literal|null
decl_stmt|;
name|tmp84_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp84_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SLASH
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DSLASH
case|:
block|{
name|AST
name|tmp85_AST
init|=
literal|null
decl_stmt|;
name|tmp85_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp85_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DSLASH
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|stepExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop35
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|relativePathExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|relativePathExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|stepExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|stepExpr_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched39
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m39
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched39
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_text
case|:
block|{
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched39
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m39
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched39
condition|)
block|{
name|axisStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched42
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m42
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched42
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
block|{
block|{
name|qName
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|SELF
case|:
block|{
name|match
argument_list|(
name|SELF
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|STRING_LITERAL
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|literal
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched42
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m42
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched42
condition|)
block|{
name|filterStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|axisStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|stepExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|stepExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|axisStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|axisStep_AST
init|=
literal|null
decl_stmt|;
block|{
name|forwardOrReverseStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
name|predicates
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|axisStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|axisStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|qName
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|qName_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
name|String
name|name2
decl_stmt|;
name|name
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|COLON
case|:
block|{
name|AST
name|tmp86_AST
init|=
literal|null
decl_stmt|;
name|tmp86_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp86_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|name2
operator|=
name|ncnameOrKeyword
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|name
operator|+
literal|':'
operator|+
name|name2
expr_stmt|;
block|}
break|break;
block|}
case|case
name|EOF
case|:
case|case
name|LPAREN
case|:
case|case
name|RPAREN
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
case|case
name|GT
case|:
case|case
name|GTEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LPPAREN
case|:
case|case
name|RPPAREN
case|:
case|case
name|COMMA
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|qName_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|qName_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|void
name|literal
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|literal_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
block|{
name|AST
name|tmp87_AST
init|=
literal|null
decl_stmt|;
name|tmp87_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp87_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|numericLiteral
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|literal_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|literal_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|filterStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|filterStep_AST
init|=
literal|null
decl_stmt|;
name|primaryExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|predicates
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|filterStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|filterStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forwardOrReverseStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|forwardOrReverseStep_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched51
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_child
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|52
operator|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m51
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched51
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|forwardAxisSpecifier
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched51
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m51
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched51
condition|)
block|{
name|forwardAxis
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forwardOrReverseStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
name|boolean
name|synPredMatched53
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
name|LITERAL_parent
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|56
operator|)
operator|)
operator|)
condition|)
block|{
name|int
name|_m53
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched53
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|reverseAxisSpecifier
argument_list|()
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched53
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m53
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched53
condition|)
block|{
name|reverseAxis
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forwardOrReverseStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|abbrevStep
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|forwardOrReverseStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|forwardOrReverseStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|predicates
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|predicates_AST
init|=
literal|null
decl_stmt|;
block|{
name|_loop47
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LPPAREN
operator|)
condition|)
block|{
name|predicate
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop47
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|predicates_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|predicates_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|predicate
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|predicate_AST
init|=
literal|null
decl_stmt|;
name|AST
name|predExpr_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LPPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|predExpr_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|predicate_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|predicate_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|PREDICATE
argument_list|,
literal|"Pred"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|predExpr_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|predicate_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|predicate_AST
operator|!=
literal|null
operator|&&
name|predicate_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|predicate_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|predicate_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|predicate_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|predicate_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forwardAxisSpecifier
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|forwardAxisSpecifier_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_child
case|:
block|{
name|AST
name|tmp90_AST
init|=
literal|null
decl_stmt|;
name|tmp90_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp90_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_child
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_self
case|:
block|{
name|AST
name|tmp91_AST
init|=
literal|null
decl_stmt|;
name|tmp91_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp91_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_self
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|AST
name|tmp92_AST
init|=
literal|null
decl_stmt|;
name|tmp92_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp92_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descendant
case|:
block|{
name|AST
name|tmp93_AST
init|=
literal|null
decl_stmt|;
name|tmp93_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp93_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_descendant
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|51
case|:
block|{
name|AST
name|tmp94_AST
init|=
literal|null
decl_stmt|;
name|tmp94_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp94_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|51
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|52
case|:
block|{
name|AST
name|tmp95_AST
init|=
literal|null
decl_stmt|;
name|tmp95_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp95_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|52
argument_list|)
expr_stmt|;
name|forwardAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|forwardAxisSpecifier_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|forwardAxis
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|forwardAxis_AST
init|=
literal|null
decl_stmt|;
name|forwardAxisSpecifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|forwardAxis_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|forwardAxis_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|nodeTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|nodeTest_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched63
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_text
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|LITERAL_node
operator|)
operator|)
condition|)
block|{
name|int
name|_m63
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched63
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_text
case|:
block|{
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched63
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m63
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched63
condition|)
block|{
name|kindTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|nameTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nodeTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|nodeTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|reverseAxisSpecifier
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|reverseAxisSpecifier_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_parent
case|:
block|{
name|AST
name|tmp98_AST
init|=
literal|null
decl_stmt|;
name|tmp98_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp98_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_parent
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ancestor
case|:
block|{
name|AST
name|tmp99_AST
init|=
literal|null
decl_stmt|;
name|tmp99_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp99_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ancestor
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|55
case|:
block|{
name|AST
name|tmp100_AST
init|=
literal|null
decl_stmt|;
name|tmp100_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp100_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|55
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|56
case|:
block|{
name|AST
name|tmp101_AST
init|=
literal|null
decl_stmt|;
name|tmp101_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp101_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|56
argument_list|)
expr_stmt|;
name|reverseAxisSpecifier_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|reverseAxisSpecifier_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|reverseAxis
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|reverseAxis_AST
init|=
literal|null
decl_stmt|;
name|reverseAxisSpecifier
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|reverseAxis_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|reverseAxis_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|abbrevStep
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|abbrevStep_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|AT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|AT
case|:
block|{
name|AST
name|tmp104_AST
init|=
literal|null
decl_stmt|;
name|tmp104_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp104_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|AT
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|nodeTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|abbrevStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|PARENT
case|:
block|{
name|AST
name|tmp105_AST
init|=
literal|null
decl_stmt|;
name|tmp105_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp105_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|PARENT
argument_list|)
expr_stmt|;
name|abbrevStep_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|abbrevStep_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|kindTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|kindTest_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_text
case|:
block|{
name|textTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|anyKindTest
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|kindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|kindTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|nameTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|nameTest_AST
init|=
literal|null
decl_stmt|;
name|String
name|name
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched67
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|NCNAME
operator|||
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STAR
operator|)
operator|)
condition|)
block|{
name|int
name|_m67
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched67
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
block|{
block|{
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
case|case
name|STAR
case|:
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched67
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m67
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched67
condition|)
block|{
name|wildcard
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|nameTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|_tokenSet_3
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|name
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|nameTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|nameTest_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|QNAME
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|nameTest_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|nameTest_AST
operator|!=
literal|null
operator|&&
name|nameTest_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|nameTest_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|nameTest_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|nameTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|nameTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|wildcard
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|wildcard_AST
init|=
literal|null
decl_stmt|;
name|Token
name|nc1
init|=
literal|null
decl_stmt|;
name|AST
name|nc1_AST
init|=
literal|null
decl_stmt|;
name|Token
name|nc2
init|=
literal|null
decl_stmt|;
name|AST
name|nc2_AST
init|=
literal|null
decl_stmt|;
name|boolean
name|synPredMatched70
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STAR
operator|)
operator|)
condition|)
block|{
name|int
name|_m70
init|=
name|mark
argument_list|()
decl_stmt|;
name|synPredMatched70
operator|=
literal|true
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|++
expr_stmt|;
try|try
block|{
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|pe
parameter_list|)
block|{
name|synPredMatched70
operator|=
literal|false
expr_stmt|;
block|}
name|rewind
argument_list|(
name|_m70
argument_list|)
expr_stmt|;
name|inputState
operator|.
name|guessing
operator|--
expr_stmt|;
block|}
if|if
condition|(
name|synPredMatched70
condition|)
block|{
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|nc1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nc1_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|nc1
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|nc1_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|PREFIX_WILDCARD
argument_list|,
literal|"*"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|nc1_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|wildcard_AST
operator|!=
literal|null
operator|&&
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|NCNAME
operator|)
condition|)
block|{
name|nc2
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|nc2_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|nc2
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|nc2_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|COLON
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|nc2_AST
argument_list|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|WILDCARD
argument_list|,
literal|"*"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|wildcard_AST
operator|!=
literal|null
operator|&&
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|STAR
operator|)
condition|)
block|{
name|AST
name|tmp110_AST
init|=
literal|null
decl_stmt|;
name|tmp110_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp110_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|STAR
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
comment|// make this distinct from multiplication
name|wildcard_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|WILDCARD
argument_list|,
literal|"*"
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|wildcard_AST
operator|!=
literal|null
operator|&&
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|wildcard_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|wildcard_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|wildcard_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
name|returnAST
operator|=
name|wildcard_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|primaryExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|primaryExpr_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|literal
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
block|{
name|functionCall
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|SELF
case|:
block|{
name|contextItemExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LPAREN
case|:
block|{
name|parenthesizedExpr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|primaryExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|primaryExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionCall
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|functionCall_AST
init|=
literal|null
decl_stmt|;
name|AST
name|params_AST
init|=
literal|null
decl_stmt|;
name|String
name|fnName
init|=
literal|null
decl_stmt|;
name|fnName
operator|=
name|qName
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionCall_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionCall_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION
argument_list|,
name|fnName
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|functionCall_AST
operator|!=
literal|null
operator|&&
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LPAREN
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|functionParameters
argument_list|()
expr_stmt|;
name|params_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|functionCall_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|functionCall_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|FUNCTION
argument_list|,
name|fnName
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|params_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|functionCall_AST
operator|!=
literal|null
operator|&&
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|functionCall_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|functionCall_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|RPAREN
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|functionCall_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|functionCall_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|contextItemExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|contextItemExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp113_AST
init|=
literal|null
decl_stmt|;
name|tmp113_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp113_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|SELF
argument_list|)
expr_stmt|;
name|contextItemExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|contextItemExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|parenthesizedExpr
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|parenthesizedExpr_AST
init|=
literal|null
decl_stmt|;
name|AST
name|e_AST
init|=
literal|null
decl_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|e_AST
operator|=
operator|(
name|AST
operator|)
name|returnAST
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|parenthesizedExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|parenthesizedExpr_AST
operator|=
operator|(
name|AST
operator|)
name|astFactory
operator|.
name|make
argument_list|(
operator|(
operator|new
name|ASTArray
argument_list|(
literal|2
argument_list|)
operator|)
operator|.
name|add
argument_list|(
name|astFactory
operator|.
name|create
argument_list|(
name|PARENTHESIZED
argument_list|,
literal|"Parenthesized"
argument_list|)
argument_list|)
operator|.
name|add
argument_list|(
name|e_AST
argument_list|)
argument_list|)
expr_stmt|;
name|currentAST
operator|.
name|root
operator|=
name|parenthesizedExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|child
operator|=
name|parenthesizedExpr_AST
operator|!=
literal|null
operator|&&
name|parenthesizedExpr_AST
operator|.
name|getFirstChild
argument_list|()
operator|!=
literal|null
condition|?
name|parenthesizedExpr_AST
operator|.
name|getFirstChild
argument_list|()
else|:
name|parenthesizedExpr_AST
expr_stmt|;
name|currentAST
operator|.
name|advanceChildToEnd
argument_list|()
expr_stmt|;
block|}
name|parenthesizedExpr_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|parenthesizedExpr_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|numericLiteral
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|numericLiteral_AST
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|DOUBLE_LITERAL
case|:
block|{
name|AST
name|tmp116_AST
init|=
literal|null
decl_stmt|;
name|tmp116_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp116_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DOUBLE_LITERAL
argument_list|)
expr_stmt|;
name|numericLiteral_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|DECIMAL_LITERAL
case|:
block|{
name|AST
name|tmp117_AST
init|=
literal|null
decl_stmt|;
name|tmp117_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp117_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|DECIMAL_LITERAL
argument_list|)
expr_stmt|;
name|numericLiteral_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|INTEGER_LITERAL
case|:
block|{
name|AST
name|tmp118_AST
init|=
literal|null
decl_stmt|;
name|tmp118_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp118_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
name|numericLiteral_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|numericLiteral_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|functionParameters
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|functionParameters_AST
init|=
literal|null
decl_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|{
name|_loop80
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|COMMA
operator|)
condition|)
block|{
name|match
argument_list|(
name|COMMA
argument_list|)
expr_stmt|;
name|expr
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop80
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|functionParameters_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|functionParameters_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|textTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|textTest_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp120_AST
init|=
literal|null
decl_stmt|;
name|tmp120_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp120_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|textTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|textTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|anyKindTest
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|anyKindTest_AST
init|=
literal|null
decl_stmt|;
name|AST
name|tmp123_AST
init|=
literal|null
decl_stmt|;
name|tmp123_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|makeASTRoot
argument_list|(
name|currentAST
argument_list|,
name|tmp123_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LPAREN
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|RPAREN
argument_list|)
expr_stmt|;
name|anyKindTest_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
name|returnAST
operator|=
name|anyKindTest_AST
expr_stmt|;
block|}
specifier|public
specifier|final
name|String
name|ncnameOrKeyword
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|ncnameOrKeyword_AST
init|=
literal|null
decl_stmt|;
name|Token
name|n1
init|=
literal|null
decl_stmt|;
name|AST
name|n1_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|NCNAME
case|:
block|{
name|n1
operator|=
name|LT
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|n1_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|n1
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|n1_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|NCNAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
name|n1
operator|.
name|getText
argument_list|()
expr_stmt|;
block|}
name|ncnameOrKeyword_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
block|{
name|name
operator|=
name|reservedKeywords
argument_list|()
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|returnAST
argument_list|)
expr_stmt|;
name|ncnameOrKeyword_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|ncnameOrKeyword_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|final
name|String
name|reservedKeywords
parameter_list|()
throws|throws
name|RecognitionException
throws|,
name|TokenStreamException
block|{
name|String
name|name
decl_stmt|;
name|returnAST
operator|=
literal|null
expr_stmt|;
name|ASTPair
name|currentAST
init|=
operator|new
name|ASTPair
argument_list|()
decl_stmt|;
name|AST
name|reservedKeywords_AST
init|=
literal|null
decl_stmt|;
name|name
operator|=
literal|null
expr_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
name|LITERAL_div
case|:
block|{
name|AST
name|tmp126_AST
init|=
literal|null
decl_stmt|;
name|tmp126_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp126_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_div
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"div"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_mod
case|:
block|{
name|AST
name|tmp127_AST
init|=
literal|null
decl_stmt|;
name|tmp127_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp127_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_mod
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"mod"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|AST
name|tmp128_AST
init|=
literal|null
decl_stmt|;
name|tmp128_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp128_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_text
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"text"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|AST
name|tmp129_AST
init|=
literal|null
decl_stmt|;
name|tmp129_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp129_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_node
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"node"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_or
case|:
block|{
name|AST
name|tmp130_AST
init|=
literal|null
decl_stmt|;
name|tmp130_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp130_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_or
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"or"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_and
case|:
block|{
name|AST
name|tmp131_AST
init|=
literal|null
decl_stmt|;
name|tmp131_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp131_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_and
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"and"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_child
case|:
block|{
name|AST
name|tmp132_AST
init|=
literal|null
decl_stmt|;
name|tmp132_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp132_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_child
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"child"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_parent
case|:
block|{
name|AST
name|tmp133_AST
init|=
literal|null
decl_stmt|;
name|tmp133_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp133_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_parent
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"parent"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_self
case|:
block|{
name|AST
name|tmp134_AST
init|=
literal|null
decl_stmt|;
name|tmp134_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp134_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_self
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"self"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|AST
name|tmp135_AST
init|=
literal|null
decl_stmt|;
name|tmp135_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp135_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_attribute
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"attribute"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ancestor
case|:
block|{
name|AST
name|tmp136_AST
init|=
literal|null
decl_stmt|;
name|tmp136_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp136_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_ancestor
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ancestor"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descendant
case|:
block|{
name|AST
name|tmp137_AST
init|=
literal|null
decl_stmt|;
name|tmp137_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp137_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
name|LITERAL_descendant
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"descendant"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|51
case|:
block|{
name|AST
name|tmp138_AST
init|=
literal|null
decl_stmt|;
name|tmp138_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp138_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|51
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"descendant-or-self"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|55
case|:
block|{
name|AST
name|tmp139_AST
init|=
literal|null
decl_stmt|;
name|tmp139_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp139_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|55
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"ancestor-or-self"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|56
case|:
block|{
name|AST
name|tmp140_AST
init|=
literal|null
decl_stmt|;
name|tmp140_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp140_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|56
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"preceding-sibling"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
case|case
literal|52
case|:
block|{
name|AST
name|tmp141_AST
init|=
literal|null
decl_stmt|;
name|tmp141_AST
operator|=
name|astFactory
operator|.
name|create
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|astFactory
operator|.
name|addASTChild
argument_list|(
name|currentAST
argument_list|,
name|tmp141_AST
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|52
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputState
operator|.
name|guessing
operator|==
literal|0
condition|)
block|{
name|name
operator|=
literal|"following-sibling"
expr_stmt|;
block|}
name|reservedKeywords_AST
operator|=
operator|(
name|AST
operator|)
name|currentAST
operator|.
name|root
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|LT
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|returnAST
operator|=
name|reservedKeywords_AST
expr_stmt|;
return|return
name|name
return|;
block|}
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|_tokenNames
init|=
block|{
literal|"<0>"
block|,
literal|"EOF"
block|,
literal|"<2>"
block|,
literal|"NULL_TREE_LOOKAHEAD"
block|,
literal|"QNAME"
block|,
literal|"PREDICATE"
block|,
literal|"PARENTHESIZED"
block|,
literal|"ABSOLUTE_SLASH"
block|,
literal|"ABSOLUTE_DSLASH"
block|,
literal|"WILDCARD"
block|,
literal|"PREFIX_WILDCARD"
block|,
literal|"FUNCTION"
block|,
literal|"UNARY_MINUS"
block|,
literal|"UNARY_PLUS"
block|,
literal|"XPOINTER"
block|,
literal|"XPOINTER_ID"
block|,
literal|"\"xpointer\""
block|,
literal|"LPAREN"
block|,
literal|"RPAREN"
block|,
literal|"NCNAME"
block|,
literal|"\"or\""
block|,
literal|"\"and\""
block|,
literal|"EQ"
block|,
literal|"NEQ"
block|,
literal|"GT"
block|,
literal|"GTEQ"
block|,
literal|"LT"
block|,
literal|"LTEQ"
block|,
literal|"ANDEQ"
block|,
literal|"OREQ"
block|,
literal|"STRING_LITERAL"
block|,
literal|"PLUS"
block|,
literal|"MINUS"
block|,
literal|"STAR"
block|,
literal|"\"div\""
block|,
literal|"\"mod\""
block|,
literal|"UNION"
block|,
literal|"SLASH"
block|,
literal|"DSLASH"
block|,
literal|"\"text\""
block|,
literal|"\"node\""
block|,
literal|"SELF"
block|,
literal|"LPPAREN"
block|,
literal|"RPPAREN"
block|,
literal|"COLON"
block|,
literal|"AT"
block|,
literal|"PARENT"
block|,
literal|"\"child\""
block|,
literal|"\"self\""
block|,
literal|"\"attribute\""
block|,
literal|"\"descendant\""
block|,
literal|"\"descendant-or-self\""
block|,
literal|"\"following-sibling\""
block|,
literal|"\"parent\""
block|,
literal|"\"ancestor\""
block|,
literal|"\"ancestor-or-self\""
block|,
literal|"\"preceding-sibling\""
block|,
literal|"DOUBLE_LITERAL"
block|,
literal|"DECIMAL_LITERAL"
block|,
literal|"INTEGER_LITERAL"
block|,
literal|"COMMA"
block|,
literal|"BASECHAR"
block|,
literal|"IDEOGRAPHIC"
block|,
literal|"DIGIT"
block|,
literal|"DIGITS"
block|,
literal|"NMSTART"
block|,
literal|"NMCHAR"
block|,
literal|"WS"
block|,
literal|"INTEGER_DECIMAL_PARENT"
block|,
literal|"VARIABLE"
block|}
decl_stmt|;
specifier|protected
name|void
name|buildTokenTypeASTClassMap
parameter_list|()
block|{
name|tokenTypeToASTClassMap
operator|=
literal|null
expr_stmt|;
block|}
empty_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|144081713104420864L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|1152784668026339328L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|143976159988154368L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_3
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|143976151398219776L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_3
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_3
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

