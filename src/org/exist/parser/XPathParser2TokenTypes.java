begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.2: "XPathParser2.g" -> "XPathParser2.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|debug
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|functions
operator|.
name|*
import|;
end_import

begin_interface
specifier|public
interface|interface
name|XPathParser2TokenTypes
block|{
name|int
name|EOF
init|=
literal|1
decl_stmt|;
name|int
name|NULL_TREE_LOOKAHEAD
init|=
literal|3
decl_stmt|;
name|int
name|QNAME
init|=
literal|4
decl_stmt|;
name|int
name|PREDICATE
init|=
literal|5
decl_stmt|;
name|int
name|FLWOR
init|=
literal|6
decl_stmt|;
name|int
name|PARENTHESIZED
init|=
literal|7
decl_stmt|;
name|int
name|ABSOLUTE_SLASH
init|=
literal|8
decl_stmt|;
name|int
name|ABSOLUTE_DSLASH
init|=
literal|9
decl_stmt|;
name|int
name|WILDCARD
init|=
literal|10
decl_stmt|;
name|int
name|PREFIX_WILDCARD
init|=
literal|11
decl_stmt|;
name|int
name|FUNCTION
init|=
literal|12
decl_stmt|;
name|int
name|UNARY_MINUS
init|=
literal|13
decl_stmt|;
name|int
name|UNARY_PLUS
init|=
literal|14
decl_stmt|;
name|int
name|XPOINTER
init|=
literal|15
decl_stmt|;
name|int
name|XPOINTER_ID
init|=
literal|16
decl_stmt|;
name|int
name|VARIABLE_REF
init|=
literal|17
decl_stmt|;
name|int
name|VARIABLE_BINDING
init|=
literal|18
decl_stmt|;
name|int
name|ELEMENT
init|=
literal|19
decl_stmt|;
name|int
name|ATTRIBUTE
init|=
literal|20
decl_stmt|;
name|int
name|TEXT
init|=
literal|21
decl_stmt|;
name|int
name|LITERAL_xpointer
init|=
literal|22
decl_stmt|;
name|int
name|LPAREN
init|=
literal|23
decl_stmt|;
name|int
name|RPAREN
init|=
literal|24
decl_stmt|;
name|int
name|NCNAME
init|=
literal|25
decl_stmt|;
name|int
name|LITERAL_where
init|=
literal|26
decl_stmt|;
name|int
name|LITERAL_return
init|=
literal|27
decl_stmt|;
name|int
name|LITERAL_for
init|=
literal|28
decl_stmt|;
name|int
name|COMMA
init|=
literal|29
decl_stmt|;
name|int
name|LITERAL_let
init|=
literal|30
decl_stmt|;
name|int
name|DOLLAR
init|=
literal|31
decl_stmt|;
name|int
name|LITERAL_in
init|=
literal|32
decl_stmt|;
name|int
name|COLON
init|=
literal|33
decl_stmt|;
name|int
name|EQ
init|=
literal|34
decl_stmt|;
name|int
name|LITERAL_or
init|=
literal|35
decl_stmt|;
name|int
name|LITERAL_and
init|=
literal|36
decl_stmt|;
name|int
name|NEQ
init|=
literal|37
decl_stmt|;
name|int
name|GT
init|=
literal|38
decl_stmt|;
name|int
name|GTEQ
init|=
literal|39
decl_stmt|;
name|int
name|LT
init|=
literal|40
decl_stmt|;
name|int
name|LTEQ
init|=
literal|41
decl_stmt|;
name|int
name|ANDEQ
init|=
literal|42
decl_stmt|;
name|int
name|OREQ
init|=
literal|43
decl_stmt|;
name|int
name|PLUS
init|=
literal|44
decl_stmt|;
name|int
name|MINUS
init|=
literal|45
decl_stmt|;
name|int
name|STAR
init|=
literal|46
decl_stmt|;
name|int
name|LITERAL_div
init|=
literal|47
decl_stmt|;
name|int
name|LITERAL_mod
init|=
literal|48
decl_stmt|;
name|int
name|UNION
init|=
literal|49
decl_stmt|;
name|int
name|SLASH
init|=
literal|50
decl_stmt|;
name|int
name|DSLASH
init|=
literal|51
decl_stmt|;
name|int
name|LITERAL_text
init|=
literal|52
decl_stmt|;
name|int
name|LITERAL_node
init|=
literal|53
decl_stmt|;
name|int
name|SELF
init|=
literal|54
decl_stmt|;
name|int
name|XML_COMMENT
init|=
literal|55
decl_stmt|;
name|int
name|LPPAREN
init|=
literal|56
decl_stmt|;
name|int
name|RPPAREN
init|=
literal|57
decl_stmt|;
name|int
name|AT
init|=
literal|58
decl_stmt|;
name|int
name|PARENT
init|=
literal|59
decl_stmt|;
name|int
name|LITERAL_child
init|=
literal|60
decl_stmt|;
name|int
name|LITERAL_self
init|=
literal|61
decl_stmt|;
name|int
name|LITERAL_attribute
init|=
literal|62
decl_stmt|;
name|int
name|LITERAL_descendant
init|=
literal|63
decl_stmt|;
comment|// "descendant-or-self" = 64
comment|// "following-sibling" = 65
name|int
name|LITERAL_parent
init|=
literal|66
decl_stmt|;
name|int
name|LITERAL_ancestor
init|=
literal|67
decl_stmt|;
comment|// "ancestor-or-self" = 68
comment|// "preceding-sibling" = 69
name|int
name|STRING_LITERAL
init|=
literal|70
decl_stmt|;
name|int
name|DOUBLE_LITERAL
init|=
literal|71
decl_stmt|;
name|int
name|DECIMAL_LITERAL
init|=
literal|72
decl_stmt|;
name|int
name|INTEGER_LITERAL
init|=
literal|73
decl_stmt|;
name|int
name|WS
init|=
literal|74
decl_stmt|;
name|int
name|END_TAG_START
init|=
literal|75
decl_stmt|;
name|int
name|QUOT
init|=
literal|76
decl_stmt|;
name|int
name|ATTRIBUTE_CONTENT
init|=
literal|77
decl_stmt|;
name|int
name|ELEMENT_CONTENT
init|=
literal|78
decl_stmt|;
name|int
name|XML_COMMENT_END
init|=
literal|79
decl_stmt|;
name|int
name|XML_PI
init|=
literal|80
decl_stmt|;
name|int
name|XML_PI_END
init|=
literal|81
decl_stmt|;
name|int
name|LCURLY
init|=
literal|82
decl_stmt|;
name|int
name|RCURLY
init|=
literal|83
decl_stmt|;
name|int
name|XML_PI_START
init|=
literal|84
decl_stmt|;
name|int
name|BASECHAR
init|=
literal|85
decl_stmt|;
name|int
name|IDEOGRAPHIC
init|=
literal|86
decl_stmt|;
name|int
name|COMBINING_CHAR
init|=
literal|87
decl_stmt|;
name|int
name|DIGIT
init|=
literal|88
decl_stmt|;
name|int
name|EXTENDER
init|=
literal|89
decl_stmt|;
name|int
name|LETTER
init|=
literal|90
decl_stmt|;
name|int
name|DIGITS
init|=
literal|91
decl_stmt|;
name|int
name|HEX_DIGITS
init|=
literal|92
decl_stmt|;
name|int
name|NMSTART
init|=
literal|93
decl_stmt|;
name|int
name|NMCHAR
init|=
literal|94
decl_stmt|;
name|int
name|PREDEFINED_ENTITY_REF
init|=
literal|95
decl_stmt|;
name|int
name|CHAR_REF
init|=
literal|96
decl_stmt|;
name|int
name|NEXT_TOKEN
init|=
literal|97
decl_stmt|;
block|}
end_interface

end_unit

