begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR : "XPathParser.g" -> "XPathLexer.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|StringTokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|BasicConfigurator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStreamRecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharStreamIOException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharScanner
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|InputBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ByteBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CharBuffer
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|CommonToken
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltForCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedCharException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TokenStream
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRHashString
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|LexerSharedInputState
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_class
specifier|public
class|class
name|XPathLexer
extends|extends
name|antlr
operator|.
name|CharScanner
implements|implements
name|XPathParserTokenTypes
implements|,
name|TokenStream
block|{
specifier|public
name|XPathLexer
parameter_list|(
name|InputStream
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|ByteBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathLexer
parameter_list|(
name|Reader
name|in
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|CharBuffer
argument_list|(
name|in
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathLexer
parameter_list|(
name|InputBuffer
name|ib
parameter_list|)
block|{
name|this
argument_list|(
operator|new
name|LexerSharedInputState
argument_list|(
name|ib
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathLexer
parameter_list|(
name|LexerSharedInputState
name|state
parameter_list|)
block|{
name|super
argument_list|(
name|state
argument_list|)
expr_stmt|;
name|caseSensitiveLiterals
operator|=
literal|true
expr_stmt|;
name|setCaseSensitive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|literals
operator|=
operator|new
name|Hashtable
argument_list|()
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ancestor"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|48
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"node"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|38
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"near"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|33
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"text"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|28
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"descendant"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"doctype"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|21
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"parent"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|45
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"child"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|44
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"self"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|46
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"attribute"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|47
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"or"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"starts-with"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|29
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"descendant-or-self"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|43
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"collection"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|25
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"match"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"document"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|22
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"xpointer"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ancestor-or-self"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|49
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"preceding-sibling"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|51
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"and"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|9
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"xcollection"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|26
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"ends-with"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|30
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"following-sibling"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|50
argument_list|)
argument_list|)
expr_stmt|;
name|literals
operator|.
name|put
argument_list|(
operator|new
name|ANTLRHashString
argument_list|(
literal|"contains"
argument_list|,
name|this
argument_list|)
argument_list|,
operator|new
name|Integer
argument_list|(
literal|31
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Token
name|nextToken
parameter_list|()
throws|throws
name|TokenStreamException
block|{
name|Token
name|theRetToken
init|=
literal|null
decl_stmt|;
name|tryAgain
label|:
for|for
control|(
init|;
condition|;
control|)
block|{
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_ttype
init|=
name|Token
operator|.
name|INVALID_TYPE
decl_stmt|;
name|resetText
argument_list|()
expr_stmt|;
try|try
block|{
comment|// for char stream error handling
try|try
block|{
comment|// for lexical error handling
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\t'
case|:
case|case
literal|'\n'
case|:
case|case
literal|'\r'
case|:
case|case
literal|' '
case|:
block|{
name|mWS
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'"'
case|:
case|case
literal|'\''
case|:
block|{
name|mCONST
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|':'
case|:
block|{
name|mCOLON
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'*'
case|:
block|{
name|mSTAR
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|','
case|:
block|{
name|mCOMMA
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'['
case|:
block|{
name|mLPPAREN
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|']'
case|:
block|{
name|mRPPAREN
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'('
case|:
block|{
name|mLPAREN
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|')'
case|:
block|{
name|mRPAREN
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'+'
case|:
block|{
name|mPLUS
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'_'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
case|case
literal|'\u00c0'
case|:
case|case
literal|'\u00c1'
case|:
case|case
literal|'\u00c2'
case|:
case|case
literal|'\u00c3'
case|:
case|case
literal|'\u00c4'
case|:
case|case
literal|'\u00c5'
case|:
case|case
literal|'\u00c6'
case|:
case|case
literal|'\u00c7'
case|:
case|case
literal|'\u00c8'
case|:
case|case
literal|'\u00c9'
case|:
case|case
literal|'\u00ca'
case|:
case|case
literal|'\u00cb'
case|:
case|case
literal|'\u00cc'
case|:
case|case
literal|'\u00cd'
case|:
case|case
literal|'\u00ce'
case|:
case|case
literal|'\u00cf'
case|:
case|case
literal|'\u00d0'
case|:
case|case
literal|'\u00d1'
case|:
case|case
literal|'\u00d2'
case|:
case|case
literal|'\u00d3'
case|:
case|case
literal|'\u00d4'
case|:
case|case
literal|'\u00d5'
case|:
case|case
literal|'\u00d6'
case|:
case|case
literal|'\u00d8'
case|:
case|case
literal|'\u00d9'
case|:
case|case
literal|'\u00da'
case|:
case|case
literal|'\u00db'
case|:
case|case
literal|'\u00dc'
case|:
case|case
literal|'\u00dd'
case|:
case|case
literal|'\u00de'
case|:
case|case
literal|'\u00df'
case|:
case|case
literal|'\u00e0'
case|:
case|case
literal|'\u00e1'
case|:
case|case
literal|'\u00e2'
case|:
case|case
literal|'\u00e3'
case|:
case|case
literal|'\u00e4'
case|:
case|case
literal|'\u00e5'
case|:
case|case
literal|'\u00e6'
case|:
case|case
literal|'\u00e7'
case|:
case|case
literal|'\u00e8'
case|:
case|case
literal|'\u00e9'
case|:
case|case
literal|'\u00ea'
case|:
case|case
literal|'\u00eb'
case|:
case|case
literal|'\u00ec'
case|:
case|case
literal|'\u00ed'
case|:
case|case
literal|'\u00ee'
case|:
case|case
literal|'\u00ef'
case|:
case|case
literal|'\u00f0'
case|:
case|case
literal|'\u00f1'
case|:
case|case
literal|'\u00f2'
case|:
case|case
literal|'\u00f3'
case|:
case|case
literal|'\u00f4'
case|:
case|case
literal|'\u00f5'
case|:
case|case
literal|'\u00f6'
case|:
case|case
literal|'\u00f8'
case|:
case|case
literal|'\u00f9'
case|:
case|case
literal|'\u00fa'
case|:
case|case
literal|'\u00fb'
case|:
case|case
literal|'\u00fc'
case|:
case|case
literal|'\u00fd'
case|:
case|case
literal|'\u00fe'
case|:
case|case
literal|'\u00ff'
case|:
block|{
name|mNCNAME
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|mINT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'$'
case|:
block|{
name|mVARIABLE
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'&'
case|:
block|{
name|mANDEQ
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'='
case|:
block|{
name|mEQ
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
case|case
literal|'!'
case|:
block|{
name|mNEQ
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'/'
operator|)
condition|)
block|{
name|mDSLASH
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'.'
operator|)
condition|)
block|{
name|mPARENT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'@'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'*'
operator|)
condition|)
block|{
name|mATTRIB_STAR
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'|'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'='
operator|)
condition|)
block|{
name|mOREQ
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'='
operator|)
condition|)
block|{
name|mLTEQ
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'>'
operator|)
operator|&&
operator|(
name|LA
argument_list|(
literal|2
argument_list|)
operator|==
literal|'='
operator|)
condition|)
block|{
name|mGTEQ
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'/'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mSLASH
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mSELF
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'|'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mUNION
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'@'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mAT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'<'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mLT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
if|else if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'>'
operator|)
operator|&&
operator|(
literal|true
operator|)
condition|)
block|{
name|mGT
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|theRetToken
operator|=
name|_returnToken
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
name|EOF_CHAR
condition|)
block|{
name|uponEOF
argument_list|()
expr_stmt|;
name|_returnToken
operator|=
name|makeToken
argument_list|(
name|Token
operator|.
name|EOF_TYPE
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_returnToken
operator|==
literal|null
condition|)
continue|continue
name|tryAgain
continue|;
comment|// found SKIP token
name|_ttype
operator|=
name|_returnToken
operator|.
name|getType
argument_list|()
expr_stmt|;
name|_returnToken
operator|.
name|setType
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
return|return
name|_returnToken
return|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|TokenStreamRecognitionException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
name|CharStreamException
name|cse
parameter_list|)
block|{
if|if
condition|(
name|cse
operator|instanceof
name|CharStreamIOException
condition|)
block|{
throw|throw
operator|new
name|TokenStreamIOException
argument_list|(
operator|(
operator|(
name|CharStreamIOException
operator|)
name|cse
operator|)
operator|.
name|io
argument_list|)
throw|;
block|}
else|else
block|{
throw|throw
operator|new
name|TokenStreamException
argument_list|(
name|cse
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
specifier|public
specifier|final
name|void
name|mWS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|WS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|' '
case|:
block|{
name|match
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\t'
case|:
block|{
name|match
argument_list|(
literal|'\t'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\n'
case|:
block|{
name|match
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\r'
case|:
block|{
name|match
argument_list|(
literal|'\r'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_ttype
operator|=
name|Token
operator|.
name|SKIP
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mCONST
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|CONST
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'"'
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|_loop65
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop65
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\''
case|:
block|{
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
block|{
name|_loop68
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_1
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
block|{
name|match
argument_list|(
name|_tokenSet_1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
break|break
name|_loop68
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mSLASH
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SLASH
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mDSLASH
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DSLASH
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|match
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mCOLON
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|COLON
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mSTAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|STAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mCOMMA
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|COMMA
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|','
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mLPPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LPPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'['
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mRPPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|RPPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mLPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mRPAREN
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|RPAREN
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mSELF
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|SELF
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mPARENT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PARENT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|".."
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mUNION
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|UNION
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mPLUS
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|PLUS
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'+'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mAT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|AT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mBASECHAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|BASECHAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0041'
argument_list|,
literal|'\u005a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u0061'
argument_list|,
literal|'\u007a'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u00c0'
case|:
case|case
literal|'\u00c1'
case|:
case|case
literal|'\u00c2'
case|:
case|case
literal|'\u00c3'
case|:
case|case
literal|'\u00c4'
case|:
case|case
literal|'\u00c5'
case|:
case|case
literal|'\u00c6'
case|:
case|case
literal|'\u00c7'
case|:
case|case
literal|'\u00c8'
case|:
case|case
literal|'\u00c9'
case|:
case|case
literal|'\u00ca'
case|:
case|case
literal|'\u00cb'
case|:
case|case
literal|'\u00cc'
case|:
case|case
literal|'\u00cd'
case|:
case|case
literal|'\u00ce'
case|:
case|case
literal|'\u00cf'
case|:
case|case
literal|'\u00d0'
case|:
case|case
literal|'\u00d1'
case|:
case|case
literal|'\u00d2'
case|:
case|case
literal|'\u00d3'
case|:
case|case
literal|'\u00d4'
case|:
case|case
literal|'\u00d5'
case|:
case|case
literal|'\u00d6'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u00c0'
argument_list|,
literal|'\u00d6'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u00d8'
case|:
case|case
literal|'\u00d9'
case|:
case|case
literal|'\u00da'
case|:
case|case
literal|'\u00db'
case|:
case|case
literal|'\u00dc'
case|:
case|case
literal|'\u00dd'
case|:
case|case
literal|'\u00de'
case|:
case|case
literal|'\u00df'
case|:
case|case
literal|'\u00e0'
case|:
case|case
literal|'\u00e1'
case|:
case|case
literal|'\u00e2'
case|:
case|case
literal|'\u00e3'
case|:
case|case
literal|'\u00e4'
case|:
case|case
literal|'\u00e5'
case|:
case|case
literal|'\u00e6'
case|:
case|case
literal|'\u00e7'
case|:
case|case
literal|'\u00e8'
case|:
case|case
literal|'\u00e9'
case|:
case|case
literal|'\u00ea'
case|:
case|case
literal|'\u00eb'
case|:
case|case
literal|'\u00ec'
case|:
case|case
literal|'\u00ed'
case|:
case|case
literal|'\u00ee'
case|:
case|case
literal|'\u00ef'
case|:
case|case
literal|'\u00f0'
case|:
case|case
literal|'\u00f1'
case|:
case|case
literal|'\u00f2'
case|:
case|case
literal|'\u00f3'
case|:
case|case
literal|'\u00f4'
case|:
case|case
literal|'\u00f5'
case|:
case|case
literal|'\u00f6'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u00d8'
argument_list|,
literal|'\u00f6'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u00f8'
case|:
case|case
literal|'\u00f9'
case|:
case|case
literal|'\u00fa'
case|:
case|case
literal|'\u00fb'
case|:
case|case
literal|'\u00fc'
case|:
case|case
literal|'\u00fd'
case|:
case|case
literal|'\u00fe'
case|:
case|case
literal|'\u00ff'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u00f8'
argument_list|,
literal|'\u00ff'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
name|_ttype
operator|=
name|testLiteralsTable
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|,
name|_ttype
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mIDEOGRAPHIC
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|IDEOGRAPHIC
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'\u3007'
case|:
block|{
name|match
argument_list|(
literal|'\u3007'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'\u3021'
case|:
case|case
literal|'\u3022'
case|:
case|case
literal|'\u3023'
case|:
case|case
literal|'\u3024'
case|:
case|case
literal|'\u3025'
case|:
case|case
literal|'\u3026'
case|:
case|case
literal|'\u3027'
case|:
case|case
literal|'\u3028'
case|:
case|case
literal|'\u3029'
case|:
block|{
name|matchRange
argument_list|(
literal|'\u3021'
argument_list|,
literal|'\u3029'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'\u4e00'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'\u9fa5'
operator|)
operator|)
condition|)
block|{
name|matchRange
argument_list|(
literal|'\u4e00'
argument_list|,
literal|'\u9fa5'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mDIGIT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|DIGIT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|matchRange
argument_list|(
literal|'\u0030'
argument_list|,
literal|'\u0039'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mNMSTART
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NMSTART
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
case|case
literal|'\u00c0'
case|:
case|case
literal|'\u00c1'
case|:
case|case
literal|'\u00c2'
case|:
case|case
literal|'\u00c3'
case|:
case|case
literal|'\u00c4'
case|:
case|case
literal|'\u00c5'
case|:
case|case
literal|'\u00c6'
case|:
case|case
literal|'\u00c7'
case|:
case|case
literal|'\u00c8'
case|:
case|case
literal|'\u00c9'
case|:
case|case
literal|'\u00ca'
case|:
case|case
literal|'\u00cb'
case|:
case|case
literal|'\u00cc'
case|:
case|case
literal|'\u00cd'
case|:
case|case
literal|'\u00ce'
case|:
case|case
literal|'\u00cf'
case|:
case|case
literal|'\u00d0'
case|:
case|case
literal|'\u00d1'
case|:
case|case
literal|'\u00d2'
case|:
case|case
literal|'\u00d3'
case|:
case|case
literal|'\u00d4'
case|:
case|case
literal|'\u00d5'
case|:
case|case
literal|'\u00d6'
case|:
case|case
literal|'\u00d8'
case|:
case|case
literal|'\u00d9'
case|:
case|case
literal|'\u00da'
case|:
case|case
literal|'\u00db'
case|:
case|case
literal|'\u00dc'
case|:
case|case
literal|'\u00dd'
case|:
case|case
literal|'\u00de'
case|:
case|case
literal|'\u00df'
case|:
case|case
literal|'\u00e0'
case|:
case|case
literal|'\u00e1'
case|:
case|case
literal|'\u00e2'
case|:
case|case
literal|'\u00e3'
case|:
case|case
literal|'\u00e4'
case|:
case|case
literal|'\u00e5'
case|:
case|case
literal|'\u00e6'
case|:
case|case
literal|'\u00e7'
case|:
case|case
literal|'\u00e8'
case|:
case|case
literal|'\u00e9'
case|:
case|case
literal|'\u00ea'
case|:
case|case
literal|'\u00eb'
case|:
case|case
literal|'\u00ec'
case|:
case|case
literal|'\u00ed'
case|:
case|case
literal|'\u00ee'
case|:
case|case
literal|'\u00ef'
case|:
case|case
literal|'\u00f0'
case|:
case|case
literal|'\u00f1'
case|:
case|case
literal|'\u00f2'
case|:
case|case
literal|'\u00f3'
case|:
case|case
literal|'\u00f4'
case|:
case|case
literal|'\u00f5'
case|:
case|case
literal|'\u00f6'
case|:
case|case
literal|'\u00f8'
case|:
case|case
literal|'\u00f9'
case|:
case|case
literal|'\u00fa'
case|:
case|case
literal|'\u00fb'
case|:
case|case
literal|'\u00fc'
case|:
case|case
literal|'\u00fd'
case|:
case|case
literal|'\u00fe'
case|:
case|case
literal|'\u00ff'
case|:
block|{
name|mBASECHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'_'
case|:
block|{
name|match
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|protected
specifier|final
name|void
name|mNMCHAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NMCHAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
switch|switch
condition|(
name|LA
argument_list|(
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'A'
case|:
case|case
literal|'B'
case|:
case|case
literal|'C'
case|:
case|case
literal|'D'
case|:
case|case
literal|'E'
case|:
case|case
literal|'F'
case|:
case|case
literal|'G'
case|:
case|case
literal|'H'
case|:
case|case
literal|'I'
case|:
case|case
literal|'J'
case|:
case|case
literal|'K'
case|:
case|case
literal|'L'
case|:
case|case
literal|'M'
case|:
case|case
literal|'N'
case|:
case|case
literal|'O'
case|:
case|case
literal|'P'
case|:
case|case
literal|'Q'
case|:
case|case
literal|'R'
case|:
case|case
literal|'S'
case|:
case|case
literal|'T'
case|:
case|case
literal|'U'
case|:
case|case
literal|'V'
case|:
case|case
literal|'W'
case|:
case|case
literal|'X'
case|:
case|case
literal|'Y'
case|:
case|case
literal|'Z'
case|:
case|case
literal|'a'
case|:
case|case
literal|'b'
case|:
case|case
literal|'c'
case|:
case|case
literal|'d'
case|:
case|case
literal|'e'
case|:
case|case
literal|'f'
case|:
case|case
literal|'g'
case|:
case|case
literal|'h'
case|:
case|case
literal|'i'
case|:
case|case
literal|'j'
case|:
case|case
literal|'k'
case|:
case|case
literal|'l'
case|:
case|case
literal|'m'
case|:
case|case
literal|'n'
case|:
case|case
literal|'o'
case|:
case|case
literal|'p'
case|:
case|case
literal|'q'
case|:
case|case
literal|'r'
case|:
case|case
literal|'s'
case|:
case|case
literal|'t'
case|:
case|case
literal|'u'
case|:
case|case
literal|'v'
case|:
case|case
literal|'w'
case|:
case|case
literal|'x'
case|:
case|case
literal|'y'
case|:
case|case
literal|'z'
case|:
case|case
literal|'\u00c0'
case|:
case|case
literal|'\u00c1'
case|:
case|case
literal|'\u00c2'
case|:
case|case
literal|'\u00c3'
case|:
case|case
literal|'\u00c4'
case|:
case|case
literal|'\u00c5'
case|:
case|case
literal|'\u00c6'
case|:
case|case
literal|'\u00c7'
case|:
case|case
literal|'\u00c8'
case|:
case|case
literal|'\u00c9'
case|:
case|case
literal|'\u00ca'
case|:
case|case
literal|'\u00cb'
case|:
case|case
literal|'\u00cc'
case|:
case|case
literal|'\u00cd'
case|:
case|case
literal|'\u00ce'
case|:
case|case
literal|'\u00cf'
case|:
case|case
literal|'\u00d0'
case|:
case|case
literal|'\u00d1'
case|:
case|case
literal|'\u00d2'
case|:
case|case
literal|'\u00d3'
case|:
case|case
literal|'\u00d4'
case|:
case|case
literal|'\u00d5'
case|:
case|case
literal|'\u00d6'
case|:
case|case
literal|'\u00d8'
case|:
case|case
literal|'\u00d9'
case|:
case|case
literal|'\u00da'
case|:
case|case
literal|'\u00db'
case|:
case|case
literal|'\u00dc'
case|:
case|case
literal|'\u00dd'
case|:
case|case
literal|'\u00de'
case|:
case|case
literal|'\u00df'
case|:
case|case
literal|'\u00e0'
case|:
case|case
literal|'\u00e1'
case|:
case|case
literal|'\u00e2'
case|:
case|case
literal|'\u00e3'
case|:
case|case
literal|'\u00e4'
case|:
case|case
literal|'\u00e5'
case|:
case|case
literal|'\u00e6'
case|:
case|case
literal|'\u00e7'
case|:
case|case
literal|'\u00e8'
case|:
case|case
literal|'\u00e9'
case|:
case|case
literal|'\u00ea'
case|:
case|case
literal|'\u00eb'
case|:
case|case
literal|'\u00ec'
case|:
case|case
literal|'\u00ed'
case|:
case|case
literal|'\u00ee'
case|:
case|case
literal|'\u00ef'
case|:
case|case
literal|'\u00f0'
case|:
case|case
literal|'\u00f1'
case|:
case|case
literal|'\u00f2'
case|:
case|case
literal|'\u00f3'
case|:
case|case
literal|'\u00f4'
case|:
case|case
literal|'\u00f5'
case|:
case|case
literal|'\u00f6'
case|:
case|case
literal|'\u00f8'
case|:
case|case
literal|'\u00f9'
case|:
case|case
literal|'\u00fa'
case|:
case|case
literal|'\u00fb'
case|:
case|case
literal|'\u00fc'
case|:
case|case
literal|'\u00fd'
case|:
case|case
literal|'\u00fe'
case|:
case|case
literal|'\u00ff'
case|:
block|{
name|mBASECHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'0'
case|:
case|case
literal|'1'
case|:
case|case
literal|'2'
case|:
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
case|case
literal|'5'
case|:
case|case
literal|'6'
case|:
case|case
literal|'7'
case|:
case|case
literal|'8'
case|:
case|case
literal|'9'
case|:
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'.'
case|:
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'-'
case|:
block|{
name|match
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|'_'
case|:
block|{
name|match
argument_list|(
literal|'_'
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mNCNAME
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NCNAME
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|mNMSTART
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|{
name|_loop95
label|:
do|do
block|{
if|if
condition|(
operator|(
name|_tokenSet_2
operator|.
name|member
argument_list|(
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|mNMCHAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop95
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_ttype
operator|=
name|testLiteralsTable
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mINT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|INT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
block|{
name|int
name|_cnt98
init|=
literal|0
decl_stmt|;
name|_loop98
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt98
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop98
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt98
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|{
name|_loop102
label|:
do|do
block|{
if|if
condition|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|==
literal|'.'
operator|)
condition|)
block|{
name|match
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|{
name|int
name|_cnt101
init|=
literal|0
decl_stmt|;
name|_loop101
label|:
do|do
block|{
if|if
condition|(
operator|(
operator|(
name|LA
argument_list|(
literal|1
argument_list|)
operator|>=
literal|'0'
operator|&&
name|LA
argument_list|(
literal|1
argument_list|)
operator|<=
literal|'9'
operator|)
operator|)
condition|)
block|{
name|mDIGIT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|_cnt101
operator|>=
literal|1
condition|)
block|{
break|break
name|_loop101
break|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoViableAltForCharException
argument_list|(
operator|(
name|char
operator|)
name|LA
argument_list|(
literal|1
argument_list|)
argument_list|,
name|getFilename
argument_list|()
argument_list|,
name|getLine
argument_list|()
argument_list|,
name|getColumn
argument_list|()
argument_list|)
throw|;
block|}
block|}
name|_cnt101
operator|++
expr_stmt|;
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
block|}
else|else
block|{
break|break
name|_loop102
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mVARIABLE
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|VARIABLE
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'$'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mNCNAME
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mATTRIB_STAR
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ATTRIB_STAR
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|_saveIndex
operator|=
name|text
operator|.
name|length
argument_list|()
expr_stmt|;
name|match
argument_list|(
literal|'@'
argument_list|)
expr_stmt|;
name|text
operator|.
name|setLength
argument_list|(
name|_saveIndex
argument_list|)
expr_stmt|;
name|mSTAR
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mANDEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|ANDEQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"&="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mOREQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|OREQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"|="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|EQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'='
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mNEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|NEQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"!="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mLT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mGT
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|GT
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mLTEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|LTEQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|"<="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|mGTEQ
parameter_list|(
name|boolean
name|_createToken
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|CharStreamException
throws|,
name|TokenStreamException
block|{
name|int
name|_ttype
decl_stmt|;
name|Token
name|_token
init|=
literal|null
decl_stmt|;
name|int
name|_begin
init|=
name|text
operator|.
name|length
argument_list|()
decl_stmt|;
name|_ttype
operator|=
name|GTEQ
expr_stmt|;
name|int
name|_saveIndex
decl_stmt|;
name|match
argument_list|(
literal|">="
argument_list|)
expr_stmt|;
if|if
condition|(
name|_createToken
operator|&&
name|_token
operator|==
literal|null
operator|&&
name|_ttype
operator|!=
name|Token
operator|.
name|SKIP
condition|)
block|{
name|_token
operator|=
name|makeToken
argument_list|(
name|_ttype
argument_list|)
expr_stmt|;
name|_token
operator|.
name|setText
argument_list|(
operator|new
name|String
argument_list|(
name|text
operator|.
name|getBuffer
argument_list|()
argument_list|,
name|_begin
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
name|_begin
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|_returnToken
operator|=
name|_token
expr_stmt|;
block|}
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|17179869192L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1023
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_1
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|2048
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|-
literal|549755813896L
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
literal|1023
condition|;
name|i
operator|++
control|)
block|{
name|data
index|[
name|i
index|]
operator|=
operator|-
literal|1L
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_1
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_1
argument_list|()
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_2
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
literal|1025
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
literal|288054454291267584L
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
literal|576460745995190270L
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
operator|-
literal|36028797027352577L
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_2
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_2
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

