begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Util.java - Aug 29, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|Expression
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|GeneralComparison
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|LiteralValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|PathExpr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|RootNode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|StaticContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|functions
operator|.
name|ExtNear
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|functions
operator|.
name|Function
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|AtomicValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|StringValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_class
specifier|public
class|class
name|Util
block|{
comment|/** 	 * Create a function call. This method handles special functions like  	 * document(), collection() or near(). It also optimizes some function  	 * calls. 	 *  	 * @param pool 	 * @param context 	 * @param parent 	 * @param fnName 	 * @param params 	 * @return 	 * @throws EXistException 	 * @throws PermissionDeniedException 	 */
specifier|public
specifier|static
name|Expression
name|createFunction
parameter_list|(
name|StaticContext
name|context
parameter_list|,
name|PathExpr
name|parent
parameter_list|,
name|String
name|fnName
parameter_list|,
name|List
name|params
parameter_list|)
throws|throws
name|XPathException
block|{
name|QName
name|qname
init|=
name|QName
operator|.
name|parseFunction
argument_list|(
name|context
argument_list|,
name|fnName
argument_list|)
decl_stmt|;
name|String
name|local
init|=
name|qname
operator|.
name|getLocalName
argument_list|()
decl_stmt|;
name|String
name|uri
init|=
name|qname
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
name|Expression
name|step
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|uri
operator|.
name|equals
argument_list|(
name|Function
operator|.
name|BUILTIN_FUNCTION_NS
argument_list|)
condition|)
block|{
if|if
condition|(
name|local
operator|.
name|equals
argument_list|(
literal|"document"
argument_list|)
condition|)
block|{
name|DocumentSet
name|docs
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|docs
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getAllDocuments
argument_list|()
expr_stmt|;
else|else
block|{
name|docs
operator|=
operator|new
name|DocumentSet
argument_list|()
expr_stmt|;
try|try
block|{
name|String
name|next
decl_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
operator|(
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getLiteralValue
argument_list|()
expr_stmt|;
name|doc
operator|=
operator|(
name|DocumentImpl
operator|)
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getDocument
argument_list|(
name|next
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
name|docs
operator|.
name|add
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"permission denied while retrieving input set"
argument_list|)
throw|;
block|}
block|}
name|step
operator|=
operator|new
name|RootNode
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|parent
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|local
operator|.
name|equals
argument_list|(
literal|"collection"
argument_list|)
operator|||
name|local
operator|.
name|equals
argument_list|(
literal|"xcollection"
argument_list|)
condition|)
block|{
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|boolean
name|inclusive
init|=
name|fnName
operator|.
name|equals
argument_list|(
literal|"collection"
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|next
decl_stmt|;
name|DocumentSet
name|temp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
operator|(
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getLiteralValue
argument_list|()
expr_stmt|;
name|temp
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getDocumentsByCollection
argument_list|(
name|next
argument_list|,
name|inclusive
argument_list|)
expr_stmt|;
name|docs
operator|.
name|addAll
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"permission denied while retrieving input set"
argument_list|)
throw|;
block|}
name|step
operator|=
operator|new
name|RootNode
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|parent
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|local
operator|.
name|equals
argument_list|(
literal|"doctype"
argument_list|)
condition|)
block|{
name|DocumentSet
name|docs
init|=
operator|new
name|DocumentSet
argument_list|()
decl_stmt|;
name|String
name|next
decl_stmt|;
name|DocumentSet
name|temp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|params
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|next
operator|=
operator|(
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
name|i
argument_list|)
operator|)
operator|.
name|getLiteralValue
argument_list|()
expr_stmt|;
name|temp
operator|=
name|context
operator|.
name|getBroker
argument_list|()
operator|.
name|getDocumentsByDoctype
argument_list|(
name|next
argument_list|)
expr_stmt|;
name|docs
operator|.
name|addAll
argument_list|(
name|temp
argument_list|)
expr_stmt|;
block|}
name|step
operator|=
operator|new
name|RootNode
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|parent
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setDocumentSet
argument_list|(
name|docs
argument_list|)
expr_stmt|;
block|}
comment|// near(node-set, string)
if|if
condition|(
name|local
operator|.
name|equals
argument_list|(
literal|"near"
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Function near requires two arguments"
argument_list|)
throw|;
name|PathExpr
name|p1
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Second argument to near is empty"
argument_list|)
throw|;
name|Expression
name|e1
init|=
name|p1
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|ExtNear
name|near
init|=
operator|new
name|ExtNear
argument_list|(
name|context
argument_list|)
decl_stmt|;
name|near
operator|.
name|addTerm
argument_list|(
name|e1
argument_list|)
expr_stmt|;
name|near
operator|.
name|setPath
argument_list|(
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|p1
operator|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|p1
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Distance argument to near is empty"
argument_list|)
throw|;
name|near
operator|.
name|setDistance
argument_list|(
name|p1
argument_list|)
expr_stmt|;
block|}
name|step
operator|=
name|near
expr_stmt|;
name|parent
operator|.
name|addPath
argument_list|(
name|near
argument_list|)
expr_stmt|;
block|}
comment|// ends-with(node-set, string)
if|if
condition|(
name|local
operator|.
name|equals
argument_list|(
literal|"starts-with"
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Function starts-with requires two arguments"
argument_list|)
throw|;
name|PathExpr
name|p0
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PathExpr
name|p1
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Second argument to starts-with is empty"
argument_list|)
throw|;
name|Expression
name|e1
init|=
name|p1
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|e1
operator|instanceof
name|LiteralValue
operator|&&
name|p0
operator|.
name|returnsType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
condition|)
block|{
name|LiteralValue
name|l
init|=
operator|(
name|LiteralValue
operator|)
name|e1
decl_stmt|;
name|AtomicValue
name|v
init|=
operator|new
name|StringValue
argument_list|(
name|l
operator|.
name|getValue
argument_list|()
operator|.
name|getStringValue
argument_list|()
operator|+
literal|'%'
argument_list|)
decl_stmt|;
name|l
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|GeneralComparison
name|op
init|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|p0
argument_list|,
name|e1
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
block|}
block|}
comment|// ends-with(node-set, string)
if|if
condition|(
name|local
operator|.
name|equals
argument_list|(
literal|"ends-with"
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Function ends-with requires two arguments"
argument_list|)
throw|;
name|PathExpr
name|p0
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PathExpr
name|p1
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Second argument to ends-with is empty"
argument_list|)
throw|;
name|Expression
name|e1
init|=
name|p1
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|e1
operator|instanceof
name|LiteralValue
operator|&&
name|p0
operator|.
name|returnsType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
condition|)
block|{
name|LiteralValue
name|l
init|=
operator|(
name|LiteralValue
operator|)
name|e1
decl_stmt|;
name|AtomicValue
name|v
init|=
operator|new
name|StringValue
argument_list|(
literal|'%'
operator|+
name|l
operator|.
name|getValue
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
name|l
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|GeneralComparison
name|op
init|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|p0
argument_list|,
name|e1
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
block|}
block|}
comment|// contains(node-set, string)
if|if
condition|(
name|local
operator|.
name|equals
argument_list|(
literal|"contains"
argument_list|)
condition|)
block|{
if|if
condition|(
name|params
operator|.
name|size
argument_list|()
operator|<
literal|2
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Function contains requires two arguments"
argument_list|)
throw|;
name|PathExpr
name|p0
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|PathExpr
name|p1
init|=
operator|(
name|PathExpr
operator|)
name|params
operator|.
name|get
argument_list|(
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|p1
operator|.
name|getLength
argument_list|()
operator|==
literal|0
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Second argument to contains is empty"
argument_list|)
throw|;
name|Expression
name|e1
init|=
name|p1
operator|.
name|getExpression
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|e1
operator|instanceof
name|LiteralValue
operator|&&
name|p0
operator|.
name|returnsType
argument_list|()
operator|==
name|Type
operator|.
name|NODE
condition|)
block|{
name|LiteralValue
name|l
init|=
operator|(
name|LiteralValue
operator|)
name|e1
decl_stmt|;
name|AtomicValue
name|v
init|=
operator|new
name|StringValue
argument_list|(
literal|'%'
operator|+
name|l
operator|.
name|getValue
argument_list|()
operator|.
name|getStringValue
argument_list|()
operator|+
literal|'%'
argument_list|)
decl_stmt|;
name|l
operator|.
name|setValue
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|GeneralComparison
name|op
init|=
operator|new
name|GeneralComparison
argument_list|(
name|context
argument_list|,
name|p0
argument_list|,
name|e1
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
decl_stmt|;
name|parent
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|step
operator|==
literal|null
condition|)
block|{
name|Class
name|clazz
init|=
name|context
operator|.
name|getClassForFunction
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|clazz
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"function "
operator|+
name|qname
operator|.
name|toString
argument_list|()
operator|+
literal|" ( namespace-uri = "
operator|+
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|") is not defined"
argument_list|)
throw|;
name|Function
name|func
init|=
name|Function
operator|.
name|createFunction
argument_list|(
name|context
argument_list|,
name|clazz
argument_list|)
decl_stmt|;
name|func
operator|.
name|setArguments
argument_list|(
name|params
argument_list|)
expr_stmt|;
name|parent
operator|.
name|addPath
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|step
operator|=
name|func
expr_stmt|;
block|}
return|return
name|step
return|;
block|}
block|}
end_class

end_unit

