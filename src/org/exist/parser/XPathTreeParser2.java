begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|// $ANTLR 2.7.2: "XPathParser2.g" -> "XPathTreeParser2.java"$
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|parser
package|;
end_package

begin_import
import|import
name|antlr
operator|.
name|debug
operator|.
name|misc
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|analysis
operator|.
name|Tokenizer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xpath
operator|.
name|*
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|TreeParser
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|Token
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|AST
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|RecognitionException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ANTLRException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|NoViableAltException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|MismatchedTokenException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|SemanticException
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|BitSet
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|ASTPair
import|;
end_import

begin_import
import|import
name|antlr
operator|.
name|collections
operator|.
name|impl
operator|.
name|ASTArray
import|;
end_import

begin_class
specifier|public
class|class
name|XPathTreeParser2
extends|extends
name|antlr
operator|.
name|TreeParser
implements|implements
name|XPathParser2TokenTypes
block|{
specifier|private
name|BrokerPool
name|pool
decl_stmt|;
specifier|private
name|StaticContext
name|context
decl_stmt|;
specifier|protected
name|ArrayList
name|exceptions
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|protected
name|boolean
name|foundError
init|=
literal|false
decl_stmt|;
specifier|public
name|XPathTreeParser2
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|StaticContext
name|context
parameter_list|)
block|{
name|this
argument_list|()
expr_stmt|;
name|this
operator|.
name|pool
operator|=
name|pool
expr_stmt|;
name|this
operator|.
name|context
operator|=
name|context
expr_stmt|;
block|}
specifier|public
name|boolean
name|foundErrors
parameter_list|()
block|{
return|return
name|foundError
return|;
block|}
specifier|public
name|String
name|getErrorMessage
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|exceptions
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
operator|(
name|Exception
operator|)
name|i
operator|.
name|next
argument_list|()
operator|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|protected
name|void
name|handleException
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|foundError
operator|=
literal|true
expr_stmt|;
name|exceptions
operator|.
name|add
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XPathTreeParser2
parameter_list|()
block|{
name|tokenNames
operator|=
name|_tokenNames
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpointer
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|AST
name|xpointer_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|AST
name|nc
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|// for error handling
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|XPOINTER
case|:
block|{
name|AST
name|__t90
init|=
name|_t
decl_stmt|;
name|AST
name|tmp1_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|XPOINTER
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t90
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|XPOINTER_ID
case|:
block|{
name|AST
name|__t91
init|=
name|_t
decl_stmt|;
name|AST
name|tmp2_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|XPOINTER_ID
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|nc
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t91
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|Function
name|fun
init|=
operator|new
name|FunId
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|fun
operator|.
name|addArgument
argument_list|(
operator|new
name|Literal
argument_list|(
name|nc
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|fun
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|expr
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|AST
name|expr_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|Expression
name|step
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_or
case|:
block|{
name|AST
name|__t94
init|=
name|_t
decl_stmt|;
name|AST
name|tmp3_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_or
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t94
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpOr
name|or
init|=
operator|new
name|OpOr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|or
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|or
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|or
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_and
case|:
block|{
name|AST
name|__t95
init|=
name|_t
decl_stmt|;
name|AST
name|tmp4_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_and
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t95
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpAnd
name|and
init|=
operator|new
name|OpAnd
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|and
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|and
operator|.
name|add
argument_list|(
name|right
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|and
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PARENTHESIZED
case|:
block|{
name|AST
name|__t96
init|=
name|_t
decl_stmt|;
name|AST
name|tmp5_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PARENTHESIZED
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|expr
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|expr
argument_list|)
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|expr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t96
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|UNION
case|:
block|{
name|AST
name|__t97
init|=
name|_t
decl_stmt|;
name|AST
name|tmp6_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|UNION
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t97
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|Union
name|union
init|=
operator|new
name|Union
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|)
decl_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|union
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|ABSOLUTE_SLASH
case|:
block|{
name|AST
name|__t98
init|=
name|_t
decl_stmt|;
name|AST
name|tmp7_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ABSOLUTE_SLASH
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|RootNode
name|root
init|=
operator|new
name|RootNode
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|PARENTHESIZED
case|:
case|case
name|ABSOLUTE_SLASH
case|:
case|case
name|ABSOLUTE_DSLASH
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_or
case|:
case|case
name|LITERAL_and
case|:
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
case|case
name|GT
case|:
case|case
name|GTEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
case|case
name|UNION
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t98
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|ABSOLUTE_DSLASH
case|:
block|{
name|AST
name|__t100
init|=
name|_t
decl_stmt|;
name|AST
name|tmp8_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ABSOLUTE_DSLASH
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|RootNode
name|root
init|=
operator|new
name|RootNode
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|path
operator|.
name|add
argument_list|(
name|root
argument_list|)
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|NCNAME
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|step
operator|=
name|pathExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
if|if
condition|(
name|step
operator|instanceof
name|LocationStep
condition|)
operator|(
operator|(
name|LocationStep
operator|)
name|step
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_AXIS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t100
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|EQ
case|:
case|case
name|NEQ
case|:
case|case
name|GT
case|:
case|case
name|GTEQ
case|:
case|case
name|LT
case|:
case|case
name|LTEQ
case|:
block|{
name|step
operator|=
name|generalComp
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|ANDEQ
case|:
case|case
name|OREQ
case|:
block|{
name|step
operator|=
name|fulltextComp
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|NCNAME
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|step
operator|=
name|pathExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|UNARY_MINUS
case|:
case|case
name|UNARY_PLUS
case|:
case|case
name|PLUS
case|:
case|case
name|MINUS
case|:
case|case
name|STAR
case|:
case|case
name|LITERAL_div
case|:
case|case
name|LITERAL_mod
case|:
block|{
name|step
operator|=
name|numericExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|void
name|xpath
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
block|{
name|AST
name|xpath_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
try|try
block|{
comment|// for error handling
name|expr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|RecognitionException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
name|handleException
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|final
name|Expression
name|pathExpr
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|step
decl_stmt|;
name|AST
name|pathExpr_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|AST
name|c
init|=
literal|null
decl_stmt|;
name|AST
name|i
init|=
literal|null
decl_stmt|;
name|AST
name|dec
init|=
literal|null
decl_stmt|;
name|AST
name|dbl
init|=
literal|null
decl_stmt|;
name|AST
name|qn
init|=
literal|null
decl_stmt|;
name|AST
name|nc1
init|=
literal|null
decl_stmt|;
name|AST
name|nc
init|=
literal|null
decl_stmt|;
name|AST
name|attr
init|=
literal|null
decl_stmt|;
name|AST
name|nc2
init|=
literal|null
decl_stmt|;
name|AST
name|nc3
init|=
literal|null
decl_stmt|;
name|Expression
name|rightStep
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|int
name|axis
init|=
name|Constants
operator|.
name|CHILD_AXIS
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|STRING_LITERAL
case|:
block|{
name|c
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|Literal
argument_list|(
name|c
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|INTEGER_LITERAL
case|:
block|{
name|i
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|INTEGER_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|IntNumber
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|i
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
block|{
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|DECIMAL_LITERAL
case|:
block|{
name|dec
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|DECIMAL_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|IntNumber
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|dec
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DOUBLE_LITERAL
case|:
block|{
name|dbl
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|DOUBLE_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|IntNumber
argument_list|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|dbl
operator|.
name|getText
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|FUNCTION
case|:
block|{
name|step
operator|=
name|functionCall
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
block|{
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
block|{
name|axis
operator|=
name|forwardAxis
argument_list|(
name|_t
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
break|break;
block|}
case|case
name|QNAME
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|NCNAME
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|NodeTest
name|test
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
block|{
name|qn
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|QNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|QName
name|qname
init|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|qn
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|test
operator|=
operator|new
name|NameTest
argument_list|(
name|Constants
operator|.
name|ELEMENT_NODE
argument_list|,
name|qname
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PREFIX_WILDCARD
case|:
block|{
name|AST
name|__t106
init|=
name|_t
decl_stmt|;
name|AST
name|tmp9_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PREFIX_WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|nc1
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t106
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
name|nc1
operator|.
name|getText
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|test
operator|=
operator|new
name|NameTest
argument_list|(
name|Constants
operator|.
name|ELEMENT_NODE
argument_list|,
name|qname
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
block|{
name|AST
name|__t107
init|=
name|_t
decl_stmt|;
name|nc
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|AST
name|tmp10_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t107
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|String
name|namespaceURI
init|=
name|context
operator|.
name|getURIForPrefix
argument_list|(
name|nc
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
name|QName
name|qname
init|=
operator|new
name|QName
argument_list|(
literal|null
argument_list|,
name|namespaceURI
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|test
operator|=
operator|new
name|NameTest
argument_list|(
name|Constants
operator|.
name|ELEMENT_NODE
argument_list|,
name|qname
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|WILDCARD
case|:
block|{
name|AST
name|tmp11_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|ELEMENT_NODE
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_node
case|:
block|{
name|AST
name|tmp12_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_node
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|AnyNodeTest
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_text
case|:
block|{
name|AST
name|tmp13_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_text
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|test
operator|=
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|TEXT_NODE
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
name|axis
argument_list|,
name|test
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|{
name|_loop109
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|PREDICATE
operator|)
condition|)
block|{
name|predicate
argument_list|(
name|_t
argument_list|,
operator|(
name|LocationStep
operator|)
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop109
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|AT
case|:
block|{
name|AST
name|tmp14_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|AT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|QName
name|qname
decl_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
block|{
name|attr
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|QNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|qname
operator|=
name|QName
operator|.
name|parse
argument_list|(
name|context
argument_list|,
name|attr
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|PREFIX_WILDCARD
case|:
block|{
name|AST
name|__t111
init|=
name|_t
decl_stmt|;
name|AST
name|tmp15_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PREFIX_WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|nc2
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t111
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|qname
operator|=
operator|new
name|QName
argument_list|(
name|nc2
operator|.
name|getText
argument_list|()
argument_list|,
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|NCNAME
case|:
block|{
name|AST
name|__t112
init|=
name|_t
decl_stmt|;
name|nc3
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NCNAME
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|AST
name|tmp16_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|WILDCARD
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t112
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|String
name|namespaceURI
init|=
name|context
operator|.
name|getURIForPrefix
argument_list|(
name|nc3
operator|.
name|getText
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|namespaceURI
operator|==
literal|null
condition|)
throw|throw
operator|new
name|EXistException
argument_list|(
literal|"No namespace defined for prefix "
operator|+
name|nc
operator|.
name|getText
argument_list|()
argument_list|)
throw|;
name|qname
operator|=
operator|new
name|QName
argument_list|(
literal|null
argument_list|,
name|namespaceURI
argument_list|,
literal|null
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|ATTRIBUTE_AXIS
argument_list|,
operator|new
name|NameTest
argument_list|(
name|Constants
operator|.
name|ATTRIBUTE_NODE
argument_list|,
name|qname
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|{
name|_loop114
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|PREDICATE
operator|)
condition|)
block|{
name|predicate
argument_list|(
name|_t
argument_list|,
operator|(
name|LocationStep
operator|)
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop114
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|SELF
case|:
block|{
name|AST
name|tmp17_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|SELF
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|SELF_AXIS
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|NODE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|{
name|_loop116
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|PREDICATE
operator|)
condition|)
block|{
name|predicate
argument_list|(
name|_t
argument_list|,
operator|(
name|LocationStep
operator|)
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop116
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|PARENT
case|:
block|{
name|AST
name|tmp18_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PARENT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
operator|new
name|LocationStep
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|PARENT_AXIS
argument_list|,
operator|new
name|TypeTest
argument_list|(
name|Constants
operator|.
name|NODE_TYPE
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
block|{
name|_loop118
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_t
operator|.
name|getType
argument_list|()
operator|==
name|PREDICATE
operator|)
condition|)
block|{
name|predicate
argument_list|(
name|_t
argument_list|,
operator|(
name|LocationStep
operator|)
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop118
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
break|break;
block|}
case|case
name|SLASH
case|:
block|{
name|AST
name|__t119
init|=
name|_t
decl_stmt|;
name|AST
name|tmp19_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|SLASH
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|pathExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|NCNAME
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|rightStep
operator|=
name|pathExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
if|if
condition|(
name|rightStep
operator|instanceof
name|LocationStep
operator|&&
operator|(
operator|(
name|LocationStep
operator|)
name|rightStep
operator|)
operator|.
name|getAxis
argument_list|()
operator|==
operator|-
literal|1
condition|)
operator|(
operator|(
name|LocationStep
operator|)
name|rightStep
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|CHILD_AXIS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t119
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
if|if
condition|(
name|rightStep
operator|instanceof
name|LocationStep
operator|&&
operator|(
operator|(
name|LocationStep
operator|)
name|rightStep
operator|)
operator|.
name|getAxis
argument_list|()
operator|==
operator|-
literal|1
condition|)
operator|(
operator|(
name|LocationStep
operator|)
name|step
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|CHILD_AXIS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|DSLASH
case|:
block|{
name|AST
name|__t121
init|=
name|_t
decl_stmt|;
name|AST
name|tmp20_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|DSLASH
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|step
operator|=
name|pathExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|QNAME
case|:
case|case
name|WILDCARD
case|:
case|case
name|PREFIX_WILDCARD
case|:
case|case
name|FUNCTION
case|:
case|case
name|NCNAME
case|:
case|case
name|STRING_LITERAL
case|:
case|case
name|SLASH
case|:
case|case
name|DSLASH
case|:
case|case
name|LITERAL_text
case|:
case|case
name|LITERAL_node
case|:
case|case
name|SELF
case|:
case|case
name|AT
case|:
case|case
name|PARENT
case|:
case|case
name|LITERAL_child
case|:
case|case
name|LITERAL_self
case|:
case|case
name|LITERAL_attribute
case|:
case|case
name|LITERAL_descendant
case|:
case|case
literal|51
case|:
case|case
literal|52
case|:
case|case
name|LITERAL_parent
case|:
case|case
name|LITERAL_ancestor
case|:
case|case
literal|55
case|:
case|case
literal|56
case|:
case|case
name|DOUBLE_LITERAL
case|:
case|case
name|DECIMAL_LITERAL
case|:
case|case
name|INTEGER_LITERAL
case|:
block|{
name|rightStep
operator|=
name|pathExpr
argument_list|(
name|_t
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
if|if
condition|(
name|rightStep
operator|instanceof
name|LocationStep
condition|)
operator|(
operator|(
name|LocationStep
operator|)
name|rightStep
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
literal|3
case|:
block|{
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
block|}
name|_t
operator|=
name|__t121
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
if|if
condition|(
name|step
operator|instanceof
name|LocationStep
condition|)
operator|(
operator|(
name|LocationStep
operator|)
name|step
operator|)
operator|.
name|setAxis
argument_list|(
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|generalComp
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|step
decl_stmt|;
name|AST
name|generalComp_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|EQ
case|:
block|{
name|AST
name|__t142
init|=
name|_t
decl_stmt|;
name|AST
name|tmp21_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|EQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|EQ
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t142
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|NEQ
case|:
block|{
name|AST
name|__t143
init|=
name|_t
decl_stmt|;
name|AST
name|tmp22_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|NEQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|NEQ
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t143
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LT
case|:
block|{
name|AST
name|__t144
init|=
name|_t
decl_stmt|;
name|AST
name|tmp23_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|LT
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t144
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|LTEQ
case|:
block|{
name|AST
name|__t145
init|=
name|_t
decl_stmt|;
name|AST
name|tmp24_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LTEQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|LTEQ
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t145
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GT
case|:
block|{
name|AST
name|__t146
init|=
name|_t
decl_stmt|;
name|AST
name|tmp25_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|GT
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|GT
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t146
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|GTEQ
case|:
block|{
name|AST
name|__t147
init|=
name|_t
decl_stmt|;
name|AST
name|tmp26_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|GTEQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|=
operator|new
name|OpEquals
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|GTEQ
argument_list|)
expr_stmt|;
name|path
operator|.
name|add
argument_list|(
name|step
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t147
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|fulltextComp
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|step
decl_stmt|;
name|AST
name|fulltextComp_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|AST
name|c
init|=
literal|null
decl_stmt|;
name|AST
name|c2
init|=
literal|null
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|ANDEQ
case|:
block|{
name|AST
name|__t139
init|=
name|_t
decl_stmt|;
name|AST
name|tmp27_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|ANDEQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|c
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t139
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|ExtFulltext
name|exprCont
init|=
operator|new
name|ExtFulltext
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|FULLTEXT_AND
argument_list|)
decl_stmt|;
name|exprCont
operator|.
name|setPath
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|exprCont
operator|.
name|addTerms
argument_list|(
name|c
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|exprCont
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|OREQ
case|:
block|{
name|AST
name|__t140
init|=
name|_t
decl_stmt|;
name|AST
name|tmp28_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|OREQ
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|c2
operator|=
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STRING_LITERAL
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_t
operator|=
name|__t140
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|ExtFulltext
name|exprCont
init|=
operator|new
name|ExtFulltext
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|FULLTEXT_OR
argument_list|)
decl_stmt|;
name|exprCont
operator|.
name|setPath
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|exprCont
operator|.
name|addTerms
argument_list|(
name|c2
operator|.
name|getText
argument_list|()
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|exprCont
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|numericExpr
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|step
decl_stmt|;
name|AST
name|numericExpr_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|PathExpr
name|left
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|PathExpr
name|right
init|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
decl_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|PLUS
case|:
block|{
name|AST
name|__t124
init|=
name|_t
decl_stmt|;
name|AST
name|tmp29_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PLUS
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t124
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|PLUS
argument_list|)
decl_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
case|case
name|MINUS
case|:
block|{
name|AST
name|__t125
init|=
name|_t
decl_stmt|;
name|AST
name|tmp30_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|MINUS
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t125
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|MINUS
argument_list|)
decl_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
case|case
name|UNARY_MINUS
case|:
block|{
name|AST
name|__t126
init|=
name|_t
decl_stmt|;
name|AST
name|tmp31_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|UNARY_MINUS
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t126
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|UnaryExpr
name|unary
init|=
operator|new
name|UnaryExpr
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|MINUS
argument_list|)
decl_stmt|;
name|unary
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|unary
argument_list|)
expr_stmt|;
name|step
operator|=
name|unary
expr_stmt|;
break|break;
block|}
case|case
name|UNARY_PLUS
case|:
block|{
name|AST
name|__t127
init|=
name|_t
decl_stmt|;
name|AST
name|tmp32_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|UNARY_PLUS
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t127
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|UnaryExpr
name|unary
init|=
operator|new
name|UnaryExpr
argument_list|(
name|pool
argument_list|,
name|Constants
operator|.
name|PLUS
argument_list|)
decl_stmt|;
name|unary
operator|.
name|add
argument_list|(
name|left
argument_list|)
expr_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|unary
argument_list|)
expr_stmt|;
name|step
operator|=
name|unary
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_div
case|:
block|{
name|AST
name|__t128
init|=
name|_t
decl_stmt|;
name|AST
name|tmp33_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_div
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t128
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|DIV
argument_list|)
decl_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_mod
case|:
block|{
name|AST
name|__t129
init|=
name|_t
decl_stmt|;
name|AST
name|tmp34_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_mod
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t129
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|MOD
argument_list|)
decl_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
case|case
name|STAR
case|:
block|{
name|AST
name|__t130
init|=
name|_t
decl_stmt|;
name|AST
name|tmp35_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|STAR
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|_t
operator|=
name|__t130
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|OpNumeric
name|op
init|=
operator|new
name|OpNumeric
argument_list|(
name|pool
argument_list|,
name|left
argument_list|,
name|right
argument_list|,
name|Constants
operator|.
name|MULT
argument_list|)
decl_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|op
argument_list|)
expr_stmt|;
name|step
operator|=
name|op
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|Expression
name|functionCall
parameter_list|(
name|AST
name|_t
parameter_list|,
name|PathExpr
name|path
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|Expression
name|step
decl_stmt|;
name|AST
name|functionCall_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|AST
name|fn
init|=
literal|null
decl_stmt|;
name|PathExpr
name|pathExpr
decl_stmt|;
name|step
operator|=
literal|null
expr_stmt|;
name|AST
name|__t134
init|=
name|_t
decl_stmt|;
name|fn
operator|=
name|_t
operator|==
name|ASTNULL
condition|?
literal|null
else|:
operator|(
name|AST
operator|)
name|_t
expr_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|FUNCTION
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|Vector
name|params
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
block|{
name|_loop136
label|:
do|do
block|{
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
if|if
condition|(
operator|(
name|_tokenSet_0
operator|.
name|member
argument_list|(
name|_t
operator|.
name|getType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|pathExpr
operator|=
operator|new
name|PathExpr
argument_list|(
name|pool
argument_list|)
expr_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|pathExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|pathExpr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break
name|_loop136
break|;
block|}
block|}
do|while
condition|(
literal|true
condition|)
do|;
block|}
name|_t
operator|=
name|__t134
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|step
operator|=
name|Util
operator|.
name|createFunction
argument_list|(
name|pool
argument_list|,
name|context
argument_list|,
name|path
argument_list|,
name|fn
operator|.
name|getText
argument_list|()
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|step
return|;
block|}
specifier|public
specifier|final
name|int
name|forwardAxis
parameter_list|(
name|AST
name|_t
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|int
name|axis
decl_stmt|;
name|AST
name|forwardAxis_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|axis
operator|=
operator|-
literal|1
expr_stmt|;
if|if
condition|(
name|_t
operator|==
literal|null
condition|)
name|_t
operator|=
name|ASTNULL
expr_stmt|;
switch|switch
condition|(
name|_t
operator|.
name|getType
argument_list|()
condition|)
block|{
case|case
name|LITERAL_child
case|:
block|{
name|AST
name|tmp36_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_child
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|CHILD_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_attribute
case|:
block|{
name|AST
name|tmp37_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_attribute
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|ATTRIBUTE_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_self
case|:
block|{
name|AST
name|tmp38_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_self
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|SELF_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_parent
case|:
block|{
name|AST
name|tmp39_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_parent
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|PARENT_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_descendant
case|:
block|{
name|AST
name|tmp40_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_descendant
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|DESCENDANT_AXIS
expr_stmt|;
break|break;
block|}
case|case
literal|51
case|:
block|{
name|AST
name|tmp41_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|51
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|DESCENDANT_SELF_AXIS
expr_stmt|;
break|break;
block|}
case|case
literal|52
case|:
block|{
name|AST
name|tmp42_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|52
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|FOLLOWING_SIBLING_AXIS
expr_stmt|;
break|break;
block|}
case|case
literal|56
case|:
block|{
name|AST
name|tmp43_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|PRECEDING_SIBLING_AXIS
expr_stmt|;
break|break;
block|}
case|case
name|LITERAL_ancestor
case|:
block|{
name|AST
name|tmp44_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|LITERAL_ancestor
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|ANCESTOR_AXIS
expr_stmt|;
break|break;
block|}
case|case
literal|55
case|:
block|{
name|AST
name|tmp45_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
literal|55
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|axis
operator|=
name|Constants
operator|.
name|ANCESTOR_SELF_AXIS
expr_stmt|;
break|break;
block|}
default|default:
block|{
throw|throw
operator|new
name|NoViableAltException
argument_list|(
name|_t
argument_list|)
throw|;
block|}
block|}
name|_retTree
operator|=
name|_t
expr_stmt|;
return|return
name|axis
return|;
block|}
specifier|public
specifier|final
name|void
name|predicate
parameter_list|(
name|AST
name|_t
parameter_list|,
name|LocationStep
name|step
parameter_list|)
throws|throws
name|RecognitionException
throws|,
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|AST
name|predicate_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|AST
name|__t132
init|=
name|_t
decl_stmt|;
name|AST
name|tmp46_AST_in
init|=
operator|(
name|AST
operator|)
name|_t
decl_stmt|;
name|match
argument_list|(
name|_t
argument_list|,
name|PREDICATE
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getFirstChild
argument_list|()
expr_stmt|;
name|Predicate
name|predicateExpr
init|=
operator|new
name|Predicate
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|expr
argument_list|(
name|_t
argument_list|,
name|predicateExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|_retTree
expr_stmt|;
name|step
operator|.
name|addPredicate
argument_list|(
name|predicateExpr
argument_list|)
expr_stmt|;
name|_t
operator|=
name|__t132
expr_stmt|;
name|_t
operator|=
name|_t
operator|.
name|getNextSibling
argument_list|()
expr_stmt|;
name|_retTree
operator|=
name|_t
expr_stmt|;
block|}
specifier|public
specifier|static
specifier|final
name|String
index|[]
name|_tokenNames
init|=
block|{
literal|"<0>"
block|,
literal|"EOF"
block|,
literal|"<2>"
block|,
literal|"NULL_TREE_LOOKAHEAD"
block|,
literal|"QNAME"
block|,
literal|"PREDICATE"
block|,
literal|"PARENTHESIZED"
block|,
literal|"ABSOLUTE_SLASH"
block|,
literal|"ABSOLUTE_DSLASH"
block|,
literal|"WILDCARD"
block|,
literal|"PREFIX_WILDCARD"
block|,
literal|"FUNCTION"
block|,
literal|"UNARY_MINUS"
block|,
literal|"UNARY_PLUS"
block|,
literal|"XPOINTER"
block|,
literal|"XPOINTER_ID"
block|,
literal|"\"xpointer\""
block|,
literal|"LPAREN"
block|,
literal|"RPAREN"
block|,
literal|"NCNAME"
block|,
literal|"\"or\""
block|,
literal|"\"and\""
block|,
literal|"EQ"
block|,
literal|"NEQ"
block|,
literal|"GT"
block|,
literal|"GTEQ"
block|,
literal|"LT"
block|,
literal|"LTEQ"
block|,
literal|"ANDEQ"
block|,
literal|"OREQ"
block|,
literal|"STRING_LITERAL"
block|,
literal|"PLUS"
block|,
literal|"MINUS"
block|,
literal|"STAR"
block|,
literal|"\"div\""
block|,
literal|"\"mod\""
block|,
literal|"UNION"
block|,
literal|"SLASH"
block|,
literal|"DSLASH"
block|,
literal|"\"text\""
block|,
literal|"\"node\""
block|,
literal|"SELF"
block|,
literal|"LPPAREN"
block|,
literal|"RPPAREN"
block|,
literal|"COLON"
block|,
literal|"AT"
block|,
literal|"PARENT"
block|,
literal|"\"child\""
block|,
literal|"\"self\""
block|,
literal|"\"attribute\""
block|,
literal|"\"descendant\""
block|,
literal|"\"descendant-or-self\""
block|,
literal|"\"following-sibling\""
block|,
literal|"\"parent\""
block|,
literal|"\"ancestor\""
block|,
literal|"\"ancestor-or-self\""
block|,
literal|"\"preceding-sibling\""
block|,
literal|"DOUBLE_LITERAL"
block|,
literal|"DECIMAL_LITERAL"
block|,
literal|"INTEGER_LITERAL"
block|,
literal|"COMMA"
block|,
literal|"BASECHAR"
block|,
literal|"IDEOGRAPHIC"
block|,
literal|"DIGIT"
block|,
literal|"DIGITS"
block|,
literal|"NMSTART"
block|,
literal|"NMCHAR"
block|,
literal|"WS"
block|,
literal|"INTEGER_DECIMAL_PARENT"
block|,
literal|"VARIABLE"
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
index|[]
name|mk_tokenSet_0
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
block|{
literal|1152890718280761296L
block|,
literal|0L
block|}
decl_stmt|;
return|return
name|data
return|;
block|}
specifier|public
specifier|static
specifier|final
name|BitSet
name|_tokenSet_0
init|=
operator|new
name|BitSet
argument_list|(
name|mk_tokenSet_0
argument_list|()
argument_list|)
decl_stmt|;
block|}
end_class

end_unit

