begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|repo
package|;
end_package

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|SystemProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|memtree
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionFactory
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|UnixStylePermission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|UserAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|FileSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|serializer
operator|.
name|AttrList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|util
operator|.
name|DocUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|DateTimeValue
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Type
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|Package
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|deps
operator|.
name|DependencyVersion
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|tui
operator|.
name|BatchUserInteraction
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|Attributes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|DirectoryStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarEntry
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|jar
operator|.
name|JarInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * Deploy a .xar package into the database using the information provided  * in expath-pkg.xml and repo.xml.  */
end_comment

begin_class
specifier|public
class|class
name|Deployment
block|{
specifier|public
specifier|final
specifier|static
name|String
name|PROPERTY_APP_ROOT
init|=
literal|"repo.root-collection"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|Deployment
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PROCESSOR_NAME
init|=
literal|"http://exist-db.org"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|REPO_NAMESPACE
init|=
literal|"http://exist-db.org/xquery/repo"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PKG_NAMESPACE
init|=
literal|"http://expath.org/ns/pkg"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|QName
name|SETUP_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"setup"
argument_list|,
name|REPO_NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|PRE_SETUP_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"prepare"
argument_list|,
name|REPO_NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|POST_SETUP_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"finish"
argument_list|,
name|REPO_NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|TARGET_COLL_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"target"
argument_list|,
name|REPO_NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|PERMISSIONS_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"permissions"
argument_list|,
name|REPO_NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|CLEANUP_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"cleanup"
argument_list|,
name|REPO_NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|DEPLOYED_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"deployed"
argument_list|,
name|REPO_NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|DEPENDENCY_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"dependency"
argument_list|,
name|PKG_NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|QName
name|RESOURCES_ELEMENT
init|=
operator|new
name|QName
argument_list|(
literal|"resources"
argument_list|,
name|REPO_NAMESPACE
argument_list|)
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|RESOURCES_PATH_ATTRIBUTE
init|=
literal|"path"
decl_stmt|;
specifier|private
specifier|final
name|DBBroker
name|broker
decl_stmt|;
specifier|private
specifier|static
class|class
name|RequestedPerms
block|{
specifier|final
name|String
name|user
decl_stmt|;
specifier|final
name|String
name|password
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|group
decl_stmt|;
specifier|final
name|Either
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|permissions
decl_stmt|;
specifier|private
name|RequestedPerms
parameter_list|(
specifier|final
name|String
name|user
parameter_list|,
specifier|final
name|String
name|password
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|group
parameter_list|,
specifier|final
name|Either
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
name|permissions
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|this
operator|.
name|password
operator|=
name|password
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
name|this
operator|.
name|permissions
operator|=
name|permissions
expr_stmt|;
block|}
block|}
comment|//    private Optional<RequestedPerms> requestedPerms = Optional.empty();
specifier|public
name|Deployment
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
block|{
name|this
operator|.
name|broker
operator|=
name|broker
expr_stmt|;
block|}
specifier|protected
name|Optional
argument_list|<
name|Path
argument_list|>
name|getPackageDir
parameter_list|(
specifier|final
name|String
name|pkgName
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|repo
parameter_list|)
throws|throws
name|PackageException
block|{
name|Optional
argument_list|<
name|Path
argument_list|>
name|packageDir
init|=
name|Optional
operator|.
name|empty
argument_list|()
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Packages
name|pp
range|:
name|repo
operator|.
name|get
argument_list|()
operator|.
name|getParentRepo
argument_list|()
operator|.
name|listPackages
argument_list|()
control|)
block|{
specifier|final
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|Package
name|pkg
init|=
name|pp
operator|.
name|latest
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkg
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|pkgName
argument_list|)
condition|)
block|{
name|packageDir
operator|=
name|Optional
operator|.
name|of
argument_list|(
name|getPackageDir
argument_list|(
name|pkg
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|packageDir
return|;
block|}
specifier|protected
name|Path
name|getPackageDir
parameter_list|(
specifier|final
name|Package
name|pkg
parameter_list|)
block|{
specifier|final
name|FileSystemStorage
operator|.
name|FileSystemResolver
name|resolver
init|=
operator|(
name|FileSystemStorage
operator|.
name|FileSystemResolver
operator|)
name|pkg
operator|.
name|getResolver
argument_list|()
decl_stmt|;
return|return
name|resolver
operator|.
name|resolveResourceAsFile
argument_list|(
literal|""
argument_list|)
operator|.
name|toPath
argument_list|()
return|;
block|}
specifier|protected
name|Optional
argument_list|<
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|Package
argument_list|>
name|getPackage
parameter_list|(
specifier|final
name|String
name|pkgName
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|repo
parameter_list|)
throws|throws
name|PackageException
block|{
if|if
condition|(
name|repo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Packages
name|pp
range|:
name|repo
operator|.
name|get
argument_list|()
operator|.
name|getParentRepo
argument_list|()
operator|.
name|listPackages
argument_list|()
control|)
block|{
specifier|final
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|Package
name|pkg
init|=
name|pp
operator|.
name|latest
argument_list|()
decl_stmt|;
if|if
condition|(
name|pkg
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|pkgName
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|pkg
argument_list|)
return|;
block|}
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|protected
name|DocumentImpl
name|getRepoXML
parameter_list|(
specifier|final
name|Path
name|packageDir
parameter_list|)
throws|throws
name|PackageException
block|{
comment|// find and parse the repo.xml descriptor
specifier|final
name|Path
name|repoFile
init|=
name|packageDir
operator|.
name|resolve
argument_list|(
literal|"repo.xml"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|repoFile
argument_list|)
condition|)
block|{
return|return
literal|null
return|;
block|}
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|repoFile
argument_list|)
init|)
block|{
return|return
name|DocUtils
operator|.
name|parse
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
literal|null
argument_list|,
name|is
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
decl||
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Failed to parse repo.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|installAndDeploy
parameter_list|(
specifier|final
name|Path
name|xar
parameter_list|,
specifier|final
name|PackageLoader
name|loader
parameter_list|)
throws|throws
name|PackageException
throws|,
name|IOException
block|{
return|return
name|installAndDeploy
argument_list|(
name|xar
argument_list|,
name|loader
argument_list|,
literal|true
argument_list|)
return|;
block|}
comment|/**      * Install and deploy a give xar archive. Dependencies are installed from      * the PackageLoader.      *      * @param xar the .xar file to install      * @param loader package loader to use      * @param enforceDeps when set to true, the method will throw an exception if a dependency could not be resolved      *                    or an older version of the required dependency is installed and needs to be replaced.      */
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|installAndDeploy
parameter_list|(
specifier|final
name|Path
name|xar
parameter_list|,
specifier|final
name|PackageLoader
name|loader
parameter_list|,
name|boolean
name|enforceDeps
parameter_list|)
throws|throws
name|PackageException
throws|,
name|IOException
block|{
specifier|final
name|Optional
argument_list|<
name|DocumentImpl
argument_list|>
name|descriptor
init|=
name|getDescriptor
argument_list|(
name|xar
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|descriptor
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Missing descriptor from package: "
operator|+
name|xar
operator|.
name|toAbsolutePath
argument_list|()
argument_list|)
throw|;
block|}
specifier|final
name|DocumentImpl
name|document
init|=
name|descriptor
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|ElementImpl
name|root
init|=
operator|(
name|ElementImpl
operator|)
name|document
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
specifier|final
name|String
name|name
init|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|pkgVersion
init|=
name|root
operator|.
name|getAttribute
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|repo
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getExpathRepo
argument_list|()
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|Packages
name|packages
init|=
name|repo
operator|.
name|get
argument_list|()
operator|.
name|getParentRepo
argument_list|()
operator|.
name|getPackages
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|packages
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|enforceDeps
operator|||
name|pkgVersion
operator|.
name|equals
argument_list|(
name|packages
operator|.
name|latest
argument_list|()
operator|.
name|getVersion
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Application package "
operator|+
name|name
operator|+
literal|" already installed. Skipping."
argument_list|)
expr_stmt|;
specifier|final
name|Package
name|pkg
init|=
name|packages
operator|.
name|latest
argument_list|()
decl_stmt|;
return|return
name|Optional
operator|.
name|of
argument_list|(
name|getTargetCollection
argument_list|(
name|pkg
argument_list|,
name|getPackageDir
argument_list|(
name|pkg
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
name|InMemoryNodeSet
name|deps
decl_stmt|;
try|try
block|{
name|deps
operator|=
name|findElements
argument_list|(
name|root
argument_list|,
name|DEPENDENCY_ELEMENT
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|deps
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|Element
name|dependency
init|=
operator|(
name|Element
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|pkgName
init|=
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"package"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|processor
init|=
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"processor"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|versionStr
init|=
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|semVer
init|=
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"semver"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|semVerMin
init|=
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"semver-min"
argument_list|)
decl_stmt|;
specifier|final
name|String
name|semVerMax
init|=
name|dependency
operator|.
name|getAttribute
argument_list|(
literal|"semver-max"
argument_list|)
decl_stmt|;
name|PackageLoader
operator|.
name|Version
name|version
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|semVer
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
operator|new
name|PackageLoader
operator|.
name|Version
argument_list|(
name|semVer
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|semVerMax
operator|!=
literal|null
operator|||
name|semVerMin
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
operator|new
name|PackageLoader
operator|.
name|Version
argument_list|(
name|semVerMin
argument_list|,
name|semVerMax
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pkgVersion
operator|!=
literal|null
condition|)
block|{
name|version
operator|=
operator|new
name|PackageLoader
operator|.
name|Version
argument_list|(
name|versionStr
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|processor
operator|!=
literal|null
operator|&&
name|processor
operator|.
name|equals
argument_list|(
name|PROCESSOR_NAME
argument_list|)
operator|&&
name|version
operator|!=
literal|null
condition|)
block|{
name|checkProcessorVersion
argument_list|(
name|version
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|pkgName
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|info
argument_list|(
literal|"Package "
operator|+
name|name
operator|+
literal|" depends on "
operator|+
name|pkgName
argument_list|)
expr_stmt|;
name|boolean
name|isInstalled
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|get
argument_list|()
operator|.
name|getParentRepo
argument_list|()
operator|.
name|getPackages
argument_list|(
name|pkgName
argument_list|)
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Package "
operator|+
name|pkgName
operator|+
literal|" already installed"
argument_list|)
expr_stmt|;
name|Packages
name|pkgs
init|=
name|repo
operator|.
name|get
argument_list|()
operator|.
name|getParentRepo
argument_list|()
operator|.
name|getPackages
argument_list|(
name|pkgName
argument_list|)
decl_stmt|;
comment|// check if installed package matches required version
if|if
condition|(
name|pkgs
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|Package
name|latest
init|=
name|pkgs
operator|.
name|latest
argument_list|()
decl_stmt|;
name|DependencyVersion
name|depVersion
init|=
name|version
operator|.
name|getDependencyVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|depVersion
operator|.
name|isCompatible
argument_list|(
name|latest
operator|.
name|getVersion
argument_list|()
argument_list|)
condition|)
block|{
name|isInstalled
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Package "
operator|+
name|pkgName
operator|+
literal|" needs to be upgraded"
argument_list|)
expr_stmt|;
if|if
condition|(
name|enforceDeps
condition|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Package requires version "
operator|+
name|version
operator|.
name|toString
argument_list|()
operator|+
literal|" of package "
operator|+
name|pkgName
operator|+
literal|". Installed version is "
operator|+
name|latest
operator|.
name|getVersion
argument_list|()
operator|+
literal|". Please upgrade!"
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
name|isInstalled
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|isInstalled
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Package "
operator|+
name|pkgName
operator|+
literal|" already installed"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|isInstalled
operator|&&
name|loader
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Path
name|depFile
init|=
name|loader
operator|.
name|load
argument_list|(
name|pkgName
argument_list|,
name|version
argument_list|)
decl_stmt|;
if|if
condition|(
name|depFile
operator|!=
literal|null
condition|)
block|{
name|installAndDeploy
argument_list|(
name|depFile
argument_list|,
name|loader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|enforceDeps
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Missing dependency: package "
operator|+
name|pkgName
operator|+
literal|" could not be resolved. This error "
operator|+
literal|"is not fatal, but the package may not work as expected"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Missing dependency: package "
operator|+
name|pkgName
operator|+
literal|" could not be resolved."
argument_list|)
throw|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Invalid descriptor found in "
operator|+
name|xar
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
throw|;
block|}
comment|// installing the xar into the expath repo
name|LOG
operator|.
name|info
argument_list|(
literal|"Installing package "
operator|+
name|xar
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|UserInteractionStrategy
name|interact
init|=
operator|new
name|BatchUserInteraction
argument_list|()
decl_stmt|;
specifier|final
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|Package
name|pkg
init|=
name|repo
operator|.
name|get
argument_list|()
operator|.
name|getParentRepo
argument_list|()
operator|.
name|installPackage
argument_list|(
name|xar
argument_list|,
literal|true
argument_list|,
name|interact
argument_list|)
decl_stmt|;
specifier|final
name|ExistPkgInfo
name|info
init|=
operator|(
name|ExistPkgInfo
operator|)
name|pkg
operator|.
name|getInfo
argument_list|(
literal|"exist"
argument_list|)
decl_stmt|;
if|if
condition|(
name|info
operator|!=
literal|null
operator|&&
operator|!
name|info
operator|.
name|getJars
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ClasspathHelper
operator|.
name|updateClasspath
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|pkg
argument_list|)
expr_stmt|;
block|}
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryPool
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|final
name|String
name|pkgName
init|=
name|pkg
operator|.
name|getName
argument_list|()
decl_stmt|;
comment|// signal status
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|reportStatus
argument_list|(
literal|"Installing app: "
operator|+
name|pkg
operator|.
name|getAbbrev
argument_list|()
argument_list|)
expr_stmt|;
name|repo
operator|.
name|get
argument_list|()
operator|.
name|reportAction
argument_list|(
name|ExistRepository
operator|.
name|Action
operator|.
name|INSTALL
argument_list|,
name|pkg
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Deploying package "
operator|+
name|pkgName
argument_list|)
expr_stmt|;
return|return
name|deploy
argument_list|(
name|pkgName
argument_list|,
name|repo
argument_list|,
literal|null
argument_list|)
return|;
block|}
comment|// Totally unneccessary to do the above if repo is unavailable.
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|private
name|void
name|checkProcessorVersion
parameter_list|(
specifier|final
name|PackageLoader
operator|.
name|Version
name|version
parameter_list|)
throws|throws
name|PackageException
block|{
specifier|final
name|String
name|procVersion
init|=
name|SystemProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getSystemProperty
argument_list|(
literal|"product-version"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
specifier|final
name|DependencyVersion
name|depVersion
init|=
name|version
operator|.
name|getDependencyVersion
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|depVersion
operator|.
name|isCompatible
argument_list|(
name|procVersion
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Package requires eXistdb version "
operator|+
name|version
operator|.
name|toString
argument_list|()
operator|+
literal|". "
operator|+
literal|"Installed version is "
operator|+
name|procVersion
argument_list|)
throw|;
block|}
block|}
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|undeploy
parameter_list|(
specifier|final
name|String
name|pkgName
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|repo
parameter_list|)
throws|throws
name|PackageException
block|{
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|maybePackageDir
init|=
name|getPackageDir
argument_list|(
name|pkgName
argument_list|,
name|repo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|maybePackageDir
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// fails silently if package dir is not found?
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|final
name|Path
name|packageDir
init|=
name|maybePackageDir
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Package
argument_list|>
name|pkg
init|=
name|getPackage
argument_list|(
name|pkgName
argument_list|,
name|repo
argument_list|)
decl_stmt|;
specifier|final
name|DocumentImpl
name|repoXML
decl_stmt|;
try|try
block|{
name|repoXML
operator|=
name|getRepoXML
argument_list|(
name|packageDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PackageException
name|e
parameter_list|)
block|{
if|if
condition|(
name|pkg
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|uninstall
argument_list|(
name|pkg
operator|.
name|get
argument_list|()
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Failed to remove package from database "
operator|+
literal|"due to error in repo.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
if|if
condition|(
name|repoXML
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|cleanup
init|=
name|findElement
argument_list|(
name|repoXML
argument_list|,
name|CLEANUP_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|cleanup
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|runQuery
argument_list|(
literal|null
argument_list|,
name|packageDir
argument_list|,
name|cleanup
operator|.
name|get
argument_list|()
operator|.
name|getStringValue
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|target
init|=
name|findElement
argument_list|(
name|repoXML
argument_list|,
name|TARGET_COLL_ELEMENT
argument_list|)
decl_stmt|;
if|if
condition|(
name|pkg
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|uninstall
argument_list|(
name|pkg
operator|.
name|get
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
return|return
name|target
operator|.
name|map
argument_list|(
name|e
lambda|->
name|Optional
operator|.
name|ofNullable
argument_list|(
name|e
operator|.
name|getStringValue
argument_list|()
argument_list|)
argument_list|)
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|Optional
operator|.
name|of
argument_list|(
name|getTargetFallback
argument_list|(
name|pkg
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Error found while processing repo.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Error found while processing repo.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
comment|// we still may need to remove the copy of the package from /db/system/repo
if|if
condition|(
name|pkg
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|uninstall
argument_list|(
name|pkg
operator|.
name|get
argument_list|()
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|deploy
parameter_list|(
specifier|final
name|String
name|pkgName
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|repo
parameter_list|,
specifier|final
name|String
name|userTarget
parameter_list|)
throws|throws
name|PackageException
throws|,
name|IOException
block|{
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|maybePackageDir
init|=
name|getPackageDir
argument_list|(
name|pkgName
argument_list|,
name|repo
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|maybePackageDir
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Package not found: "
operator|+
name|pkgName
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|packageDir
init|=
name|maybePackageDir
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|DocumentImpl
name|repoXML
init|=
name|getRepoXML
argument_list|(
name|packageDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoXML
operator|==
literal|null
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
try|try
block|{
comment|// if there's a<setup> element, run the query it points to
specifier|final
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|setup
init|=
name|findElement
argument_list|(
name|repoXML
argument_list|,
name|SETUP_ELEMENT
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|setupPath
init|=
name|setup
operator|.
name|map
argument_list|(
name|ElementImpl
operator|::
name|getStringValue
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|setupPath
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|runQuery
argument_list|(
literal|null
argument_list|,
name|packageDir
argument_list|,
name|setupPath
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
else|else
block|{
comment|// otherwise copy all child directories to the target collection
name|XmldbURI
name|targetCollection
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|userTarget
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|targetCollection
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|userTarget
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Bad collection URI: "
operator|+
name|userTarget
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
specifier|final
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|target
init|=
name|findElement
argument_list|(
name|repoXML
argument_list|,
name|TARGET_COLL_ELEMENT
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|targetPath
init|=
name|target
operator|.
name|map
argument_list|(
name|ElementImpl
operator|::
name|getStringValue
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetPath
operator|.
name|isPresent
argument_list|()
condition|)
block|{
comment|// determine target collection
try|try
block|{
name|targetCollection
operator|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|getTargetCollection
argument_list|(
name|targetPath
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Bad collection URI for<target> element: "
operator|+
name|targetPath
operator|.
name|get
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"EXPath Package '"
operator|+
name|pkgName
operator|+
literal|"' does not contain a<target> in its repo.xml, no files will be deployed to /apps"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|targetCollection
operator|==
literal|null
condition|)
block|{
comment|// no target means: package does not need to be deployed into database
comment|// however, we need to preserve a copy for backup purposes
specifier|final
name|Optional
argument_list|<
name|Package
argument_list|>
name|pkg
init|=
name|getPackage
argument_list|(
name|pkgName
argument_list|,
name|repo
argument_list|)
decl_stmt|;
name|pkg
operator|.
name|orElseThrow
argument_list|(
parameter_list|()
lambda|->
operator|new
name|XPathException
argument_list|(
literal|"expath repository is not available so the package was not stored."
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|String
name|pkgColl
init|=
name|pkg
operator|.
name|get
argument_list|()
operator|.
name|getAbbrev
argument_list|()
operator|+
literal|"-"
operator|+
name|pkg
operator|.
name|get
argument_list|()
operator|.
name|getVersion
argument_list|()
decl_stmt|;
name|targetCollection
operator|=
name|XmldbURI
operator|.
name|SYSTEM
operator|.
name|append
argument_list|(
literal|"repo/"
operator|+
name|pkgColl
argument_list|)
expr_stmt|;
block|}
comment|// extract the permissions (if any)
specifier|final
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|permissions
init|=
name|findElement
argument_list|(
name|repoXML
argument_list|,
name|PERMISSIONS_ELEMENT
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|RequestedPerms
argument_list|>
name|requestedPerms
init|=
name|permissions
operator|.
name|flatMap
argument_list|(
name|elem
lambda|->
block|{
specifier|final
name|Optional
argument_list|<
name|Either
argument_list|<
name|Integer
argument_list|,
name|String
argument_list|>
argument_list|>
name|perms
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
operator|.
name|flatMap
argument_list|(
name|mode
lambda|->
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Either
operator|.
name|Left
argument_list|(
name|Integer
operator|.
name|parseInt
argument_list|(
name|mode
argument_list|,
literal|8
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|NumberFormatException
name|e
parameter_list|)
block|{
if|if
condition|(
name|mode
operator|.
name|matches
argument_list|(
literal|"^[rwx-]{9}"
argument_list|)
condition|)
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|Either
operator|.
name|Right
argument_list|(
name|mode
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
block|}
block|}
argument_list|)
decl_stmt|;
return|return
name|perms
operator|.
name|map
argument_list|(
name|p
lambda|->
operator|new
name|RequestedPerms
argument_list|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"user"
argument_list|)
argument_list|,
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"password"
argument_list|)
argument_list|,
name|Optional
operator|.
name|ofNullable
argument_list|(
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"group"
argument_list|)
argument_list|)
argument_list|,
name|p
argument_list|)
argument_list|)
return|;
block|}
argument_list|)
decl_stmt|;
comment|//check that if there were permissions then we were able to parse them, a failure would be related to the mode string
if|if
condition|(
name|permissions
operator|.
name|isPresent
argument_list|()
operator|&&
operator|!
name|requestedPerms
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|String
name|mode
init|=
name|permissions
operator|.
name|map
argument_list|(
name|elem
lambda|->
name|elem
operator|.
name|getAttribute
argument_list|(
literal|"mode"
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|null
argument_list|)
decl_stmt|;
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Bad format for mode attribute in<permissions>: "
operator|+
name|mode
argument_list|)
throw|;
block|}
comment|// run the pre-setup query if present
specifier|final
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|preSetup
init|=
name|findElement
argument_list|(
name|repoXML
argument_list|,
name|PRE_SETUP_ELEMENT
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|preSetupPath
init|=
name|preSetup
operator|.
name|map
argument_list|(
name|ElementImpl
operator|::
name|getStringValue
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|preSetupPath
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|runQuery
argument_list|(
name|targetCollection
argument_list|,
name|packageDir
argument_list|,
name|preSetupPath
operator|.
name|get
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
comment|// any required users and group should have been created by the pre-setup query.
comment|// check for invalid users now.
if|if
condition|(
name|requestedPerms
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|checkUserSettings
argument_list|(
name|requestedPerms
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|InMemoryNodeSet
name|resources
init|=
name|findElements
argument_list|(
name|repoXML
argument_list|,
name|RESOURCES_ELEMENT
argument_list|)
decl_stmt|;
comment|// install
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errors
init|=
name|scanDirectory
argument_list|(
name|packageDir
argument_list|,
name|targetCollection
argument_list|,
name|resources
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|,
name|requestedPerms
argument_list|)
decl_stmt|;
comment|// run the post-setup query if present
specifier|final
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|postSetup
init|=
name|findElement
argument_list|(
name|repoXML
argument_list|,
name|POST_SETUP_ELEMENT
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|postSetupPath
init|=
name|postSetup
operator|.
name|map
argument_list|(
name|ElementImpl
operator|::
name|getStringValue
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|postSetupPath
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|runQuery
argument_list|(
name|targetCollection
argument_list|,
name|packageDir
argument_list|,
name|postSetupPath
operator|.
name|get
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|storeRepoXML
argument_list|(
name|repoXML
argument_list|,
name|targetCollection
argument_list|,
name|requestedPerms
argument_list|)
expr_stmt|;
comment|// TODO: it should be safe to clean up the file system after a package
comment|// has been deployed. Might be enabled after 2.0
comment|//cleanup(pkgName, repo);
if|if
condition|(
operator|!
name|errors
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Deployment incomplete, "
operator|+
name|errors
operator|.
name|size
argument_list|()
operator|+
literal|" issues found: "
operator|+
name|errors
operator|.
name|stream
argument_list|()
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|joining
argument_list|(
literal|"; "
argument_list|)
argument_list|)
argument_list|)
throw|;
block|}
return|return
name|Optional
operator|.
name|ofNullable
argument_list|(
name|targetCollection
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Error found while processing repo.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * After deployment, clean up the package directory and remove all files which have been      * stored into the db. They are not needed anymore. Only preserve the descriptors and the      * contents directory.      *      * @param pkgName      * @param repo      * @throws PackageException      */
specifier|private
name|void
name|cleanup
parameter_list|(
specifier|final
name|String
name|pkgName
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|repo
parameter_list|)
throws|throws
name|PackageException
block|{
if|if
condition|(
name|repo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|Optional
argument_list|<
name|Package
argument_list|>
name|pkg
init|=
name|getPackage
argument_list|(
name|pkgName
argument_list|,
name|repo
argument_list|)
decl_stmt|;
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|maybePackageDir
init|=
name|pkg
operator|.
name|map
argument_list|(
name|this
operator|::
name|getPackageDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|maybePackageDir
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Cleanup: package dir for package "
operator|+
name|pkgName
operator|+
literal|" not found"
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|packageDir
init|=
name|maybePackageDir
operator|.
name|get
argument_list|()
decl_stmt|;
specifier|final
name|String
name|abbrev
init|=
name|pkg
operator|.
name|get
argument_list|()
operator|.
name|getAbbrev
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|filesToDelete
init|=
name|Files
operator|.
name|find
argument_list|(
name|packageDir
argument_list|,
literal|1
argument_list|,
parameter_list|(
name|path
parameter_list|,
name|attrs
parameter_list|)
lambda|->
block|{
if|if
condition|(
name|path
operator|.
name|equals
argument_list|(
name|packageDir
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|String
name|name
init|=
name|FileUtils
operator|.
name|fileName
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|attrs
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
operator|!
operator|(
name|name
operator|.
name|equals
argument_list|(
name|abbrev
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"content"
argument_list|)
operator|)
return|;
block|}
else|else
block|{
return|return
operator|!
operator|(
name|name
operator|.
name|equals
argument_list|(
literal|"expath-pkg.xml"
argument_list|)
operator|||
name|name
operator|.
name|equals
argument_list|(
literal|"repo.xml"
argument_list|)
operator|||
literal|"exist.xml"
operator|.
name|equals
argument_list|(
name|name
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
literal|"icon"
argument_list|)
operator|)
return|;
block|}
block|}
argument_list|)
init|)
block|{
name|filesToDelete
operator|.
name|forEach
argument_list|(
name|path
lambda|->
block|{
try|try
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cleanup: failed to delete file "
operator|+
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" in package "
operator|+
name|pkgName
argument_list|)
expr_stmt|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Cleanup: failed to delete files"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/**      * Get the target collection for the given package, which resides in pkgDir.      * Returns path to cached .xar for library packages.      *      * @param pkg      * @param pkgDir      * @return      * @throws PackageException      */
specifier|private
name|String
name|getTargetCollection
parameter_list|(
specifier|final
name|Package
name|pkg
parameter_list|,
specifier|final
name|Path
name|pkgDir
parameter_list|)
throws|throws
name|PackageException
block|{
specifier|final
name|DocumentImpl
name|repoXML
init|=
name|getRepoXML
argument_list|(
name|pkgDir
argument_list|)
decl_stmt|;
if|if
condition|(
name|repoXML
operator|!=
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|target
init|=
name|findElement
argument_list|(
name|repoXML
argument_list|,
name|TARGET_COLL_ELEMENT
argument_list|)
decl_stmt|;
return|return
name|target
operator|.
name|map
argument_list|(
name|ElementImpl
operator|::
name|getStringValue
argument_list|)
operator|.
name|map
argument_list|(
name|this
operator|::
name|getTargetCollection
argument_list|)
operator|.
name|map
argument_list|(
name|XmldbURI
operator|::
name|create
argument_list|)
operator|.
name|map
argument_list|(
name|XmldbURI
operator|::
name|getCollectionPath
argument_list|)
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|getTargetFallback
argument_list|(
name|pkg
argument_list|)
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Failed to determine target collection"
argument_list|)
throw|;
block|}
block|}
else|else
block|{
return|return
name|getTargetFallback
argument_list|(
name|pkg
argument_list|)
operator|.
name|getCollectionPath
argument_list|()
return|;
block|}
block|}
specifier|private
name|XmldbURI
name|getTargetFallback
parameter_list|(
specifier|final
name|Package
name|pkg
parameter_list|)
block|{
specifier|final
name|String
name|pkgColl
init|=
name|pkg
operator|.
name|getAbbrev
argument_list|()
operator|+
literal|"-"
operator|+
name|pkg
operator|.
name|getVersion
argument_list|()
decl_stmt|;
return|return
name|XmldbURI
operator|.
name|SYSTEM
operator|.
name|append
argument_list|(
literal|"repo/"
operator|+
name|pkgColl
argument_list|)
return|;
block|}
specifier|private
name|String
name|getTargetCollection
parameter_list|(
name|String
name|targetFromRepo
parameter_list|)
block|{
specifier|final
name|String
name|appRoot
init|=
operator|(
name|String
operator|)
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|PROPERTY_APP_ROOT
argument_list|)
decl_stmt|;
if|if
condition|(
name|appRoot
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|targetFromRepo
operator|.
name|startsWith
argument_list|(
literal|"/db/"
argument_list|)
condition|)
block|{
name|targetFromRepo
operator|=
name|targetFromRepo
operator|.
name|substring
argument_list|(
literal|4
argument_list|)
expr_stmt|;
block|}
return|return
name|appRoot
operator|+
name|targetFromRepo
return|;
block|}
if|if
condition|(
name|targetFromRepo
operator|.
name|startsWith
argument_list|(
literal|"/db"
argument_list|)
condition|)
block|{
return|return
name|targetFromRepo
return|;
block|}
else|else
block|{
return|return
literal|"/db/"
operator|+
name|targetFromRepo
return|;
block|}
block|}
comment|/**      * Delete the target collection of the package. If there's no repo.xml descriptor,      * target will be null.      *      * @param pkg      * @param target      * @throws PackageException      */
specifier|private
name|void
name|uninstall
parameter_list|(
specifier|final
name|Package
name|pkg
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|target
parameter_list|)
throws|throws
name|PackageException
block|{
comment|// determine target collection
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|targetPath
init|=
name|target
operator|.
name|map
argument_list|(
name|ElementImpl
operator|::
name|getStringValue
argument_list|)
operator|.
name|filter
argument_list|(
name|s
lambda|->
operator|!
name|s
operator|.
name|isEmpty
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|targetCollection
init|=
name|targetPath
operator|.
name|map
argument_list|(
name|s
lambda|->
name|XmldbURI
operator|.
name|create
argument_list|(
name|getTargetCollection
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
operator|.
name|orElseGet
argument_list|(
parameter_list|()
lambda|->
name|getTargetFallback
argument_list|(
name|pkg
argument_list|)
argument_list|)
decl_stmt|;
specifier|final
name|TransactionManager
name|mgr
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|mgr
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|Collection
name|collection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|targetCollection
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|target
operator|!=
literal|null
condition|)
block|{
specifier|final
name|XmldbURI
name|configCollection
init|=
name|XmldbURI
operator|.
name|CONFIG_COLLECTION_URI
operator|.
name|append
argument_list|(
name|targetCollection
argument_list|)
decl_stmt|;
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|configCollection
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|broker
operator|.
name|removeCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
block|}
name|mgr
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|IOException
decl||
name|TriggerException
decl||
name|TransactionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception occurred while removing package."
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Store repo.xml into the db. Adds the time of deployment to the descriptor.      *      * @param repoXML      * @param targetCollection      * @throws XPathException      */
specifier|private
name|void
name|storeRepoXML
parameter_list|(
specifier|final
name|DocumentImpl
name|repoXML
parameter_list|,
specifier|final
name|XmldbURI
name|targetCollection
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|RequestedPerms
argument_list|>
name|requestedPerms
parameter_list|)
throws|throws
name|PackageException
throws|,
name|XPathException
block|{
comment|// Store repo.xml
specifier|final
name|DateTimeValue
name|time
init|=
operator|new
name|DateTimeValue
argument_list|(
operator|new
name|Date
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MemTreeBuilder
name|builder
init|=
operator|new
name|MemTreeBuilder
argument_list|()
decl_stmt|;
name|builder
operator|.
name|startDocument
argument_list|()
expr_stmt|;
specifier|final
name|UpdatingDocumentReceiver
name|receiver
init|=
operator|new
name|UpdatingDocumentReceiver
argument_list|(
name|builder
argument_list|,
name|time
operator|.
name|getStringValue
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|repoXML
operator|.
name|copyTo
argument_list|(
name|broker
argument_list|,
name|receiver
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Error while updating repo.xml in-memory: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|builder
operator|.
name|endDocument
argument_list|()
expr_stmt|;
specifier|final
name|DocumentImpl
name|updatedXML
init|=
name|builder
operator|.
name|getDocument
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|mgr
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|mgr
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|targetCollection
argument_list|)
decl_stmt|;
specifier|final
name|XmldbURI
name|name
init|=
name|XmldbURI
operator|.
name|createInternal
argument_list|(
literal|"repo.xml"
argument_list|)
decl_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|name
argument_list|,
name|updatedXML
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permission
init|=
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|setPermissions
argument_list|(
name|requestedPerms
argument_list|,
literal|false
argument_list|,
name|MimeType
operator|.
name|XML_TYPE
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|updatedXML
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|IOException
decl||
name|SAXException
decl||
name|LockException
decl||
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Error while storing updated repo.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|void
name|checkUserSettings
parameter_list|(
specifier|final
name|RequestedPerms
name|requestedPerms
parameter_list|)
throws|throws
name|PackageException
block|{
name|Objects
operator|.
name|requireNonNull
argument_list|(
name|requestedPerms
argument_list|)
expr_stmt|;
specifier|final
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
name|secman
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
decl_stmt|;
try|try
block|{
if|if
condition|(
name|requestedPerms
operator|.
name|group
operator|.
name|filter
argument_list|(
name|g
lambda|->
operator|!
name|secman
operator|.
name|hasGroup
argument_list|(
name|g
argument_list|)
argument_list|)
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|secman
operator|.
name|addGroup
argument_list|(
name|broker
argument_list|,
operator|new
name|GroupAider
argument_list|(
name|requestedPerms
operator|.
name|group
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
block|;             }
if|if
condition|(
operator|!
name|secman
operator|.
name|hasAccount
argument_list|(
name|requestedPerms
operator|.
name|user
argument_list|)
condition|)
block|{
specifier|final
name|UserAider
name|aider
init|=
operator|new
name|UserAider
argument_list|(
name|requestedPerms
operator|.
name|user
argument_list|)
decl_stmt|;
name|aider
operator|.
name|setPassword
argument_list|(
name|requestedPerms
operator|.
name|password
argument_list|)
expr_stmt|;
name|requestedPerms
operator|.
name|group
operator|.
name|ifPresent
argument_list|(
name|groupName
lambda|->
name|aider
operator|.
name|addGroup
argument_list|(
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
name|secman
operator|.
name|addAccount
argument_list|(
name|broker
argument_list|,
name|aider
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Failed to create user: "
operator|+
name|requestedPerms
operator|.
name|user
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|private
name|Sequence
name|runQuery
parameter_list|(
specifier|final
name|XmldbURI
name|targetCollection
parameter_list|,
specifier|final
name|Path
name|tempDir
parameter_list|,
specifier|final
name|String
name|fileName
parameter_list|,
specifier|final
name|boolean
name|preInstall
parameter_list|)
throws|throws
name|PackageException
throws|,
name|IOException
throws|,
name|XPathException
block|{
specifier|final
name|Path
name|xquery
init|=
name|tempDir
operator|.
name|resolve
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|xquery
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"The XQuery resource specified in the<setup> element was not found"
argument_list|)
expr_stmt|;
return|return
name|Sequence
operator|.
name|EMPTY_SEQUENCE
return|;
block|}
specifier|final
name|XQuery
name|xqs
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
specifier|final
name|XQueryContext
name|ctx
init|=
operator|new
name|XQueryContext
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|)
decl_stmt|;
name|ctx
operator|.
name|declareVariable
argument_list|(
literal|"dir"
argument_list|,
name|tempDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|home
init|=
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getExistHome
argument_list|()
decl_stmt|;
if|if
condition|(
name|home
operator|.
name|isPresent
argument_list|()
condition|)
block|{
name|ctx
operator|.
name|declareVariable
argument_list|(
literal|"home"
argument_list|,
name|home
operator|.
name|get
argument_list|()
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|targetCollection
operator|!=
literal|null
condition|)
block|{
name|ctx
operator|.
name|declareVariable
argument_list|(
literal|"target"
argument_list|,
name|targetCollection
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|ctx
operator|.
name|setModuleLoadPath
argument_list|(
name|XmldbURI
operator|.
name|EMBEDDED_SERVER_URI
operator|+
name|targetCollection
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ctx
operator|.
name|declareVariable
argument_list|(
literal|"target"
argument_list|,
name|Sequence
operator|.
name|EMPTY_SEQUENCE
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|preInstall
condition|)
block|{
comment|// when running pre-setup scripts, base path should point to directory
comment|// because the target collection does not yet exist
name|ctx
operator|.
name|setModuleLoadPath
argument_list|(
name|tempDir
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CompiledXQuery
name|compiled
decl_stmt|;
try|try
block|{
name|compiled
operator|=
name|xqs
operator|.
name|compile
argument_list|(
name|broker
argument_list|,
name|ctx
argument_list|,
operator|new
name|FileSource
argument_list|(
name|xquery
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|xqs
operator|.
name|execute
argument_list|(
name|broker
argument_list|,
name|compiled
argument_list|,
literal|null
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Scan a directory and import all files and sub directories into the target      * collection.      *      * @param directory      * @param target      */
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|scanDirectory
parameter_list|(
specifier|final
name|Path
name|directory
parameter_list|,
specifier|final
name|XmldbURI
name|target
parameter_list|,
specifier|final
name|InMemoryNodeSet
name|resources
parameter_list|,
specifier|final
name|boolean
name|inRootDir
parameter_list|,
specifier|final
name|boolean
name|isResourcesDir
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|RequestedPerms
argument_list|>
name|requestedPerms
parameter_list|)
block|{
return|return
name|scanDirectory
argument_list|(
name|directory
argument_list|,
name|target
argument_list|,
name|resources
argument_list|,
name|inRootDir
argument_list|,
name|isResourcesDir
argument_list|,
name|requestedPerms
argument_list|,
operator|new
name|ArrayList
argument_list|<>
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|List
argument_list|<
name|String
argument_list|>
name|scanDirectory
parameter_list|(
specifier|final
name|Path
name|directory
parameter_list|,
specifier|final
name|XmldbURI
name|target
parameter_list|,
specifier|final
name|InMemoryNodeSet
name|resources
parameter_list|,
specifier|final
name|boolean
name|inRootDir
parameter_list|,
specifier|final
name|boolean
name|isResourcesDir
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|RequestedPerms
argument_list|>
name|requestedPerms
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errors
parameter_list|)
block|{
specifier|final
name|TransactionManager
name|mgr
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|mgr
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|setPermissions
argument_list|(
name|requestedPerms
argument_list|,
literal|true
argument_list|,
literal|null
argument_list|,
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|TriggerException
decl||
name|IOException
decl||
name|TransactionException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|boolean
name|isResources
init|=
name|isResourcesDir
operator|||
name|isResourceDir
argument_list|(
name|target
argument_list|,
name|resources
argument_list|)
decl_stmt|;
comment|// the root dir is not allowed to be a resources directory
if|if
condition|(
operator|!
name|inRootDir
operator|&&
name|isResources
condition|)
block|{
try|try
block|{
name|storeBinaryResources
argument_list|(
name|directory
argument_list|,
name|collection
argument_list|,
name|requestedPerms
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|storeFiles
argument_list|(
name|directory
argument_list|,
name|collection
argument_list|,
name|inRootDir
argument_list|,
name|requestedPerms
argument_list|,
name|errors
argument_list|)
expr_stmt|;
block|}
comment|// scan sub directories
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|subDirs
init|=
name|Files
operator|.
name|find
argument_list|(
name|directory
argument_list|,
literal|1
argument_list|,
parameter_list|(
name|path
parameter_list|,
name|attrs
parameter_list|)
lambda|->
operator|(
operator|!
name|path
operator|.
name|equals
argument_list|(
name|directory
argument_list|)
operator|)
operator|&&
name|attrs
operator|.
name|isDirectory
argument_list|()
argument_list|)
init|)
block|{
name|subDirs
operator|.
name|forEach
argument_list|(
name|path
lambda|->
name|scanDirectory
argument_list|(
name|path
argument_list|,
name|target
operator|.
name|append
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|path
argument_list|)
argument_list|)
argument_list|,
name|resources
argument_list|,
literal|false
argument_list|,
name|isResources
argument_list|,
name|requestedPerms
argument_list|,
name|errors
argument_list|)
argument_list|)
block|;         }
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to scan sub-directories"
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
block|}
return|return
name|errors
return|;
block|}
specifier|private
name|boolean
name|isResourceDir
parameter_list|(
name|XmldbURI
name|target
parameter_list|,
name|InMemoryNodeSet
name|resources
parameter_list|)
block|{
comment|// iterate here or pass into scandirectory directly or even save as class property???
try|try
block|{
for|for
control|(
specifier|final
name|SequenceIterator
name|i
init|=
name|resources
operator|.
name|iterate
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
specifier|final
name|ElementImpl
name|child
init|=
operator|(
name|ElementImpl
operator|)
name|i
operator|.
name|nextItem
argument_list|()
decl_stmt|;
specifier|final
name|String
name|resourcePath
init|=
name|child
operator|.
name|getAttribute
argument_list|(
name|RESOURCES_PATH_ATTRIBUTE
argument_list|)
decl_stmt|;
if|if
condition|(
name|target
operator|.
name|toString
argument_list|()
operator|.
name|endsWith
argument_list|(
name|resourcePath
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception while reading resource list in repo.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      * Import all files in the given directory into the target collection      *      * @param directory      * @param targetCollection      */
specifier|private
name|void
name|storeFiles
parameter_list|(
specifier|final
name|Path
name|directory
parameter_list|,
specifier|final
name|Collection
name|targetCollection
parameter_list|,
specifier|final
name|boolean
name|inRootDir
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|RequestedPerms
argument_list|>
name|requestedPerms
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errors
parameter_list|)
block|{
name|List
argument_list|<
name|Path
argument_list|>
name|files
decl_stmt|;
try|try
block|{
name|files
operator|=
name|FileUtils
operator|.
name|list
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|directory
argument_list|)
operator|+
literal|": "
operator|+
name|ioe
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|files
operator|=
name|Collections
operator|.
name|EMPTY_LIST
expr_stmt|;
block|}
specifier|final
name|MimeTable
name|mimeTab
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|TransactionManager
name|mgr
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|file
range|:
name|files
control|)
block|{
if|if
condition|(
name|inRootDir
operator|&&
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
operator|.
name|equals
argument_list|(
literal|"repo.xml"
argument_list|)
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|MimeType
name|mime
init|=
name|mimeTab
operator|.
name|getContentTypeFor
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|==
literal|null
condition|)
block|{
name|mime
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
specifier|final
name|XmldbURI
name|name
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|mgr
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
if|if
condition|(
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
specifier|final
name|InputSource
name|is
init|=
operator|new
name|FileInputSource
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|IndexInfo
name|info
init|=
literal|null
decl_stmt|;
try|try
block|{
name|info
operator|=
name|targetCollection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|name
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
decl||
name|PermissionDeniedException
decl||
name|LockException
decl||
name|SAXException
decl||
name|IOException
name|e
parameter_list|)
block|{
comment|//check for .html ending
if|if
condition|(
name|mime
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MimeType
operator|.
name|HTML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
comment|//store it as binary resource
name|storeBinary
argument_list|(
name|targetCollection
argument_list|,
name|file
argument_list|,
name|mime
argument_list|,
name|name
argument_list|,
name|requestedPerms
argument_list|,
name|transaction
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// could neither store as xml nor binary: give up and report failure in outer catch
throw|throw
operator|new
name|EXistException
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
operator|+
literal|" cannot be stored"
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|info
operator|!=
literal|null
condition|)
block|{
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|permission
init|=
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|setPermissions
argument_list|(
name|requestedPerms
argument_list|,
literal|false
argument_list|,
name|mime
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|targetCollection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|is
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|final
name|long
name|size
init|=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
specifier|final
name|BinaryDocument
name|doc
init|=
name|targetCollection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|name
argument_list|,
name|is
argument_list|,
name|mime
operator|.
name|getName
argument_list|()
argument_list|,
name|size
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permission
init|=
name|doc
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|setPermissions
argument_list|(
name|requestedPerms
argument_list|,
literal|false
argument_list|,
name|mime
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
name|mgr
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|SAXException
decl||
name|EXistException
decl||
name|PermissionDeniedException
decl||
name|LockException
decl||
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|file
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
specifier|private
name|void
name|storeBinary
parameter_list|(
specifier|final
name|Collection
name|targetCollection
parameter_list|,
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|MimeType
name|mime
parameter_list|,
specifier|final
name|XmldbURI
name|name
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|RequestedPerms
argument_list|>
name|requestedPerms
parameter_list|,
specifier|final
name|Txn
name|transaction
parameter_list|)
throws|throws
name|IOException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
block|{
specifier|final
name|long
name|size
init|=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|InputStream
name|is
init|=
name|Files
operator|.
name|newInputStream
argument_list|(
name|file
argument_list|)
init|)
block|{
specifier|final
name|BinaryDocument
name|doc
init|=
name|targetCollection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|name
argument_list|,
name|is
argument_list|,
name|mime
operator|.
name|getName
argument_list|()
argument_list|,
name|size
argument_list|)
decl_stmt|;
specifier|final
name|Permission
name|permission
init|=
name|doc
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|setPermissions
argument_list|(
name|requestedPerms
argument_list|,
literal|false
argument_list|,
name|mime
argument_list|,
name|permission
argument_list|)
expr_stmt|;
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|storeBinaryResources
parameter_list|(
specifier|final
name|Path
name|directory
parameter_list|,
specifier|final
name|Collection
name|targetCollection
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|RequestedPerms
argument_list|>
name|requestedPerms
parameter_list|,
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|errors
parameter_list|)
throws|throws
name|IOException
throws|,
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|TriggerException
block|{
specifier|final
name|TransactionManager
name|mgr
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
name|DirectoryStream
argument_list|<
name|Path
argument_list|>
name|stream
init|=
name|Files
operator|.
name|newDirectoryStream
argument_list|(
name|directory
argument_list|)
init|)
block|{
for|for
control|(
specifier|final
name|Path
name|entry
range|:
name|stream
control|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|entry
argument_list|)
condition|)
block|{
specifier|final
name|XmldbURI
name|name
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|FileUtils
operator|.
name|fileName
argument_list|(
name|entry
argument_list|)
argument_list|)
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|mgr
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|storeBinary
argument_list|(
name|targetCollection
argument_list|,
name|entry
argument_list|,
name|MimeType
operator|.
name|BINARY_TYPE
argument_list|,
name|name
argument_list|,
name|requestedPerms
argument_list|,
name|transaction
argument_list|)
expr_stmt|;
name|mgr
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|errors
operator|.
name|add
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|/**      * Set owner, group and permissions. For XQuery resources, always set the executable flag.      * @param mime      * @param permission      */
specifier|private
name|void
name|setPermissions
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|RequestedPerms
argument_list|>
name|requestedPerms
parameter_list|,
specifier|final
name|boolean
name|isCollection
parameter_list|,
specifier|final
name|MimeType
name|mime
parameter_list|,
specifier|final
name|Permission
name|permission
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|int
name|mode
init|=
name|permission
operator|.
name|getMode
argument_list|()
decl_stmt|;
if|if
condition|(
name|requestedPerms
operator|.
name|isPresent
argument_list|()
condition|)
block|{
specifier|final
name|RequestedPerms
name|perms
init|=
name|requestedPerms
operator|.
name|get
argument_list|()
decl_stmt|;
name|PermissionFactory
operator|.
name|chown
argument_list|(
name|broker
argument_list|,
name|permission
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|perms
operator|.
name|user
argument_list|)
argument_list|,
name|perms
operator|.
name|group
argument_list|)
expr_stmt|;
name|mode
operator|=
name|perms
operator|.
name|permissions
operator|.
name|map
argument_list|(
name|permStr
lambda|->
block|{
try|try
block|{
specifier|final
name|UnixStylePermission
name|other
init|=
operator|new
name|UnixStylePermission
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
argument_list|)
decl_stmt|;
name|other
operator|.
name|setMode
argument_list|(
name|permStr
argument_list|)
expr_stmt|;
return|return
name|other
operator|.
name|getMode
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
decl||
name|SyntaxException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Unable to set permissions string: "
operator|+
name|permStr
operator|+
literal|". Falling back to default."
argument_list|)
expr_stmt|;
return|return
name|permission
operator|.
name|getMode
argument_list|()
return|;
block|}
block|}
argument_list|)
operator|.
name|fold
argument_list|(
name|l
lambda|->
name|l
argument_list|,
name|r
lambda|->
name|r
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isCollection
operator|||
operator|(
name|mime
operator|!=
literal|null
operator|&&
name|mime
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|MimeType
operator|.
name|XQUERY_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|mode
operator|=
name|mode
operator||
literal|0111
expr_stmt|;
comment|//TODO(AR) Whoever did this - this is a really bad idea. You are circumventing the security of the system
block|}
name|PermissionFactory
operator|.
name|chmod
argument_list|(
name|broker
argument_list|,
name|permission
argument_list|,
name|Optional
operator|.
name|of
argument_list|(
name|mode
argument_list|)
argument_list|,
name|Optional
operator|.
name|empty
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|private
name|Optional
argument_list|<
name|ElementImpl
argument_list|>
name|findElement
parameter_list|(
specifier|final
name|NodeImpl
name|root
parameter_list|,
specifier|final
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|InMemoryNodeSet
name|setupNodes
init|=
operator|new
name|InMemoryNodeSet
argument_list|()
decl_stmt|;
name|root
operator|.
name|selectDescendants
argument_list|(
literal|false
argument_list|,
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|qname
argument_list|)
argument_list|,
name|setupNodes
argument_list|)
expr_stmt|;
if|if
condition|(
name|setupNodes
operator|.
name|getItemCount
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
return|return
name|Optional
operator|.
name|of
argument_list|(
operator|(
name|ElementImpl
operator|)
name|setupNodes
operator|.
name|itemAt
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
specifier|private
name|InMemoryNodeSet
name|findElements
parameter_list|(
specifier|final
name|NodeImpl
name|root
parameter_list|,
specifier|final
name|QName
name|qname
parameter_list|)
throws|throws
name|XPathException
block|{
specifier|final
name|InMemoryNodeSet
name|setupNodes
init|=
operator|new
name|InMemoryNodeSet
argument_list|()
decl_stmt|;
name|root
operator|.
name|selectDescendants
argument_list|(
literal|false
argument_list|,
operator|new
name|NameTest
argument_list|(
name|Type
operator|.
name|ELEMENT
argument_list|,
name|qname
argument_list|)
argument_list|,
name|setupNodes
argument_list|)
expr_stmt|;
return|return
name|setupNodes
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|String
argument_list|>
name|getNameFromDescriptor
parameter_list|(
specifier|final
name|Path
name|xar
parameter_list|)
throws|throws
name|IOException
throws|,
name|PackageException
block|{
specifier|final
name|Optional
argument_list|<
name|DocumentImpl
argument_list|>
name|doc
init|=
name|getDescriptor
argument_list|(
name|xar
argument_list|)
decl_stmt|;
return|return
name|doc
operator|.
name|map
argument_list|(
name|DocumentImpl
operator|::
name|getDocumentElement
argument_list|)
operator|.
name|map
argument_list|(
name|root
lambda|->
name|root
operator|.
name|getAttribute
argument_list|(
literal|"name"
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|Optional
argument_list|<
name|DocumentImpl
argument_list|>
name|getDescriptor
parameter_list|(
specifier|final
name|Path
name|jar
parameter_list|)
throws|throws
name|IOException
throws|,
name|PackageException
block|{
try|try
init|(
specifier|final
name|JarInputStream
name|jis
init|=
operator|new
name|JarInputStream
argument_list|(
name|Files
operator|.
name|newInputStream
argument_list|(
name|jar
argument_list|)
argument_list|)
init|)
block|{
name|JarEntry
name|entry
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|jis
operator|.
name|getNextJarEntry
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|isDirectory
argument_list|()
operator|&&
literal|"expath-pkg.xml"
operator|.
name|equals
argument_list|(
name|entry
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
try|try
block|{
return|return
name|Optional
operator|.
name|of
argument_list|(
name|DocUtils
operator|.
name|parse
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
literal|null
argument_list|,
name|jis
argument_list|)
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PackageException
argument_list|(
literal|"Error while parsing expath-pkg.xml: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
block|}
return|return
name|Optional
operator|.
name|empty
argument_list|()
return|;
block|}
comment|/**      * Update repo.xml while copying it. For security reasons, make sure      * any default password is removed before uploading.      */
specifier|private
specifier|static
class|class
name|UpdatingDocumentReceiver
extends|extends
name|DocumentBuilderReceiver
block|{
specifier|private
specifier|final
name|String
name|time
decl_stmt|;
specifier|private
specifier|final
name|Deque
argument_list|<
name|String
argument_list|>
name|stack
init|=
operator|new
name|ArrayDeque
argument_list|<>
argument_list|()
decl_stmt|;
specifier|public
name|UpdatingDocumentReceiver
parameter_list|(
specifier|final
name|MemTreeBuilder
name|builder
parameter_list|,
specifier|final
name|String
name|time
parameter_list|)
block|{
name|super
argument_list|(
name|builder
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|time
operator|=
name|time
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|,
specifier|final
name|AttrList
name|attribs
parameter_list|)
block|{
name|stack
operator|.
name|push
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|AttrList
name|newAttrs
init|=
name|attribs
decl_stmt|;
if|if
condition|(
name|attribs
operator|!=
literal|null
operator|&&
literal|"permissions"
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|newAttrs
operator|=
operator|new
name|AttrList
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|attribs
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
literal|"password"
operator|.
name|equals
argument_list|(
name|attribs
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|newAttrs
operator|.
name|addAttribute
argument_list|(
name|attribs
operator|.
name|getQName
argument_list|(
name|i
argument_list|)
argument_list|,
name|attribs
operator|.
name|getValue
argument_list|(
name|i
argument_list|)
argument_list|,
name|attribs
operator|.
name|getType
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
literal|"deployed"
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|super
operator|.
name|startElement
argument_list|(
name|qname
argument_list|,
name|newAttrs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|startElement
parameter_list|(
specifier|final
name|String
name|namespaceURI
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qName
parameter_list|,
specifier|final
name|Attributes
name|attrs
parameter_list|)
throws|throws
name|SAXException
block|{
name|stack
operator|.
name|push
argument_list|(
name|localName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
literal|"deployed"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|super
operator|.
name|startElement
argument_list|(
name|namespaceURI
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|,
name|attrs
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
throws|throws
name|SAXException
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"meta"
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|addDeployTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"deployed"
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
condition|)
block|{
name|super
operator|.
name|endElement
argument_list|(
name|qname
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|endElement
parameter_list|(
specifier|final
name|String
name|uri
parameter_list|,
specifier|final
name|String
name|localName
parameter_list|,
specifier|final
name|String
name|qName
parameter_list|)
throws|throws
name|SAXException
block|{
name|stack
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
literal|"meta"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|addDeployTime
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
literal|"deployed"
operator|.
name|equals
argument_list|(
name|localName
argument_list|)
condition|)
block|{
name|super
operator|.
name|endElement
argument_list|(
name|uri
argument_list|,
name|localName
argument_list|,
name|qName
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|attribute
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|,
specifier|final
name|String
name|value
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
literal|"permissions"
operator|.
name|equals
argument_list|(
name|current
argument_list|)
operator|&&
literal|"password"
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|super
operator|.
name|attribute
argument_list|(
name|qname
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
specifier|final
name|char
index|[]
name|ch
parameter_list|,
specifier|final
name|int
name|start
parameter_list|,
specifier|final
name|int
name|len
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"deployed"
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|ch
argument_list|,
name|start
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|characters
parameter_list|(
specifier|final
name|CharSequence
name|seq
parameter_list|)
throws|throws
name|SAXException
block|{
specifier|final
name|String
name|current
init|=
name|stack
operator|.
name|peek
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
literal|"deployed"
operator|.
name|equals
argument_list|(
name|current
argument_list|)
condition|)
block|{
name|super
operator|.
name|characters
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|addDeployTime
parameter_list|()
throws|throws
name|SAXException
block|{
name|super
operator|.
name|startElement
argument_list|(
name|DEPLOYED_ELEMENT
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|super
operator|.
name|characters
argument_list|(
name|time
argument_list|)
expr_stmt|;
name|super
operator|.
name|endElement
argument_list|(
name|DEPLOYED_ELEMENT
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

