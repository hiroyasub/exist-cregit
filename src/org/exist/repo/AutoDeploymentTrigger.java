begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|repo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|StartupTrigger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Startup trigger for automatic deployment of application packages. Scans the "autodeploy" directory  * for .xar files. Installs any application which does not yet exist in the database.  */
end_comment

begin_class
specifier|public
class|class
name|AutoDeploymentTrigger
implements|implements
name|StartupTrigger
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|AutoDeploymentTrigger
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|AUTODEPLOY_DIRECTORY
init|=
literal|"autodeploy"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|AUTODEPLOY_PROPERTY
init|=
literal|"exist.autodeploy"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|execute
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|List
argument_list|<
name|?
extends|extends
name|Object
argument_list|>
argument_list|>
name|params
parameter_list|)
block|{
comment|// do not process if the system property exist.autodeploy=off
specifier|final
name|String
name|property
init|=
name|System
operator|.
name|getProperty
argument_list|(
name|AUTODEPLOY_PROPERTY
argument_list|,
literal|"on"
argument_list|)
decl_stmt|;
if|if
condition|(
name|property
operator|.
name|equalsIgnoreCase
argument_list|(
literal|"off"
argument_list|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|homeDir
init|=
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getExistHome
argument_list|()
decl_stmt|;
specifier|final
name|Path
name|autodeployDir
init|=
name|FileUtils
operator|.
name|resolve
argument_list|(
name|homeDir
argument_list|,
name|AUTODEPLOY_DIRECTORY
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Files
operator|.
name|isReadable
argument_list|(
name|autodeployDir
argument_list|)
operator|&&
name|Files
operator|.
name|isDirectory
argument_list|(
name|autodeployDir
argument_list|)
condition|)
block|{
return|return;
block|}
try|try
block|{
specifier|final
name|List
argument_list|<
name|Path
argument_list|>
name|xars
init|=
name|Files
operator|.
name|find
argument_list|(
name|autodeployDir
argument_list|,
literal|1
argument_list|,
parameter_list|(
name|path
parameter_list|,
name|attrs
parameter_list|)
lambda|->
operator|(
operator|!
name|attrs
operator|.
name|isDirectory
argument_list|()
operator|)
operator|&&
name|FileUtils
operator|.
name|fileName
argument_list|(
name|path
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|".xar"
argument_list|)
argument_list|)
operator|.
name|sorted
argument_list|(
parameter_list|(
name|o1
parameter_list|,
name|o2
parameter_list|)
lambda|->
name|o1
operator|.
name|getFileName
argument_list|()
operator|.
name|compareTo
argument_list|(
name|o2
operator|.
name|getFileName
argument_list|()
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
decl_stmt|;
name|LOG
operator|.
name|info
argument_list|(
literal|"Scanning autodeploy directory. Found "
operator|+
name|xars
operator|.
name|size
argument_list|()
operator|+
literal|" app packages."
argument_list|)
expr_stmt|;
specifier|final
name|Deployment
name|deployment
init|=
operator|new
name|Deployment
argument_list|(
name|broker
argument_list|)
decl_stmt|;
comment|// build a map with uri -> file so we can resolve dependencies
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Path
argument_list|>
name|packages
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|xar
range|:
name|xars
control|)
block|{
try|try
block|{
specifier|final
name|String
name|name
init|=
name|deployment
operator|.
name|getNameFromDescriptor
argument_list|(
name|xar
argument_list|)
decl_stmt|;
name|packages
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|xar
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception while reading app package "
operator|+
name|xar
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PackageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Caught exception while reading app package "
operator|+
name|xar
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|PackageLoader
name|loader
init|=
operator|new
name|PackageLoader
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|Path
name|load
parameter_list|(
name|String
name|name
parameter_list|,
name|PackageLoader
operator|.
name|Version
name|version
parameter_list|)
block|{
comment|// TODO: enforce version check
return|return
name|packages
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
block|}
decl_stmt|;
for|for
control|(
specifier|final
name|Path
name|xar
range|:
name|xars
control|)
block|{
try|try
block|{
name|deployment
operator|.
name|installAndDeploy
argument_list|(
name|xar
argument_list|,
name|loader
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PackageException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception during deployment of app "
operator|+
name|FileUtils
operator|.
name|fileName
argument_list|(
name|xar
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|reportStatus
argument_list|(
literal|"An error occurred during app deployment: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Exception during deployment of app "
operator|+
name|FileUtils
operator|.
name|fileName
argument_list|(
name|xar
argument_list|)
operator|+
literal|": "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|reportStatus
argument_list|(
literal|"An error occurred during app deployment: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ioe
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

