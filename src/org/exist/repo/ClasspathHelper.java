begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|repo
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Classpath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|EXistClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Helper class to construct classpath for expath modules containing  * jar files. Part of start.jar  */
end_comment

begin_class
specifier|public
class|class
name|ClasspathHelper
block|{
specifier|public
specifier|static
name|void
name|updateClasspath
parameter_list|(
name|BrokerPool
name|pool
parameter_list|)
block|{
name|ClassLoader
name|loader
init|=
name|pool
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|loader
operator|instanceof
name|EXistClassLoader
operator|)
condition|)
return|return;
name|File
name|existHome
init|=
name|pool
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getExistHome
argument_list|()
decl_stmt|;
name|Classpath
name|cp
init|=
operator|new
name|Classpath
argument_list|()
decl_stmt|;
name|scanPackages
argument_list|(
name|cp
argument_list|,
name|existHome
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistClassLoader
operator|)
name|loader
operator|)
operator|.
name|addURLs
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|scanPackages
parameter_list|(
name|Classpath
name|classpath
parameter_list|,
name|File
name|existHome
parameter_list|)
block|{
try|try
block|{
name|File
name|repo
decl_stmt|;
if|if
condition|(
name|existHome
operator|!=
literal|null
condition|)
block|{
operator|new
name|File
argument_list|(
name|existHome
argument_list|,
name|ExistRepository
operator|.
name|EXPATH_REPO_DEFAULT
argument_list|)
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|repo
operator|=
operator|new
name|File
argument_list|(
name|existHome
argument_list|,
name|ExistRepository
operator|.
name|EXPATH_REPO_DEFAULT
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|ExistRepository
operator|.
name|EXPATH_REPO_DIR
argument_list|)
operator|.
name|mkdir
argument_list|()
expr_stmt|;
name|repo
operator|=
operator|new
name|File
argument_list|(
name|System
operator|.
name|getProperty
argument_list|(
literal|"java.io.tmpdir"
argument_list|)
operator|+
name|ExistRepository
operator|.
name|EXPATH_REPO_DIR
argument_list|)
expr_stmt|;
block|}
name|File
index|[]
name|modules
init|=
name|repo
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
return|return
name|file
operator|.
name|isDirectory
argument_list|()
operator|&&
operator|!
name|file
operator|.
name|getName
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"."
argument_list|)
return|;
block|}
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|modules
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|File
name|module
range|:
name|modules
control|)
block|{
name|File
name|exist
init|=
operator|new
name|File
argument_list|(
name|module
argument_list|,
literal|".exist"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exist
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|exist
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The .exist config dir is not a dir: "
operator|+
name|exist
argument_list|)
throw|;
block|}
name|File
name|cp
init|=
operator|new
name|File
argument_list|(
name|exist
argument_list|,
literal|"classpath.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cp
operator|.
name|exists
argument_list|()
condition|)
block|{
name|BufferedReader
name|reader
init|=
operator|new
name|BufferedReader
argument_list|(
operator|new
name|FileReader
argument_list|(
name|cp
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|classpath
operator|.
name|addComponent
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|reader
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

