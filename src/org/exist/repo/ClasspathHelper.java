begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2012-2015 The eXist-db Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|repo
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|SystemProperties
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|Classpath
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|start
operator|.
name|EXistClassLoader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|Package
import|;
end_import

begin_import
import|import
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|deps
operator|.
name|ProcessorDependency
import|;
end_import

begin_comment
comment|/**  * Helper class to construct classpath for expath modules containing  * jar files. Part of start.jar  */
end_comment

begin_class
specifier|public
class|class
name|ClasspathHelper
implements|implements
name|BrokerPoolService
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|ClasspathHelper
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// if no eXist version is specified in the expath-pkg.xml, we assume it is 2.2 or older
specifier|private
specifier|final
specifier|static
name|PackageLoader
operator|.
name|Version
name|DEFAULT_VERSION
init|=
operator|new
name|PackageLoader
operator|.
name|Version
argument_list|(
literal|"1.4.0"
argument_list|,
literal|"2.2.1"
argument_list|)
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
specifier|final
name|ClassLoader
name|loader
init|=
name|brokerPool
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|loader
operator|instanceof
name|EXistClassLoader
operator|)
condition|)
block|{
return|return;
block|}
specifier|final
name|Classpath
name|cp
init|=
operator|new
name|Classpath
argument_list|()
decl_stmt|;
name|scanPackages
argument_list|(
name|brokerPool
argument_list|,
name|cp
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistClassLoader
operator|)
name|loader
operator|)
operator|.
name|addURLs
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|updateClasspath
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|org
operator|.
name|expath
operator|.
name|pkg
operator|.
name|repo
operator|.
name|Package
name|pkg
parameter_list|)
throws|throws
name|PackageException
block|{
specifier|final
name|ClassLoader
name|loader
init|=
name|pool
operator|.
name|getClassLoader
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|loader
operator|instanceof
name|EXistClassLoader
operator|)
condition|)
block|{
return|return;
block|}
if|if
condition|(
operator|!
name|isCompatible
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Package "
operator|+
name|pkg
operator|.
name|getName
argument_list|()
operator|+
literal|" is not compatible with this version of eXist. "
operator|+
literal|"To avoid conflicts, Java libraries shipping with this package are not loaded."
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|final
name|FileSystemStorage
operator|.
name|FileSystemResolver
name|resolver
init|=
operator|(
name|FileSystemStorage
operator|.
name|FileSystemResolver
operator|)
name|pkg
operator|.
name|getResolver
argument_list|()
decl_stmt|;
specifier|final
name|File
name|packageDir
init|=
name|resolver
operator|.
name|resolveResourceAsFile
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
specifier|final
name|Classpath
name|cp
init|=
operator|new
name|Classpath
argument_list|()
decl_stmt|;
try|try
block|{
name|scanPackageDir
argument_list|(
name|cp
argument_list|,
name|packageDir
argument_list|)
expr_stmt|;
operator|(
operator|(
name|EXistClassLoader
operator|)
name|loader
operator|)
operator|.
name|addURLs
argument_list|(
name|cp
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An error occurred while updating classpath for package "
operator|+
name|pkg
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|scanPackages
parameter_list|(
name|BrokerPool
name|pool
parameter_list|,
name|Classpath
name|classpath
parameter_list|)
block|{
try|try
block|{
specifier|final
name|Optional
argument_list|<
name|ExistRepository
argument_list|>
name|repo
init|=
name|pool
operator|.
name|getExpathRepo
argument_list|()
decl_stmt|;
if|if
condition|(
name|repo
operator|.
name|isPresent
argument_list|()
condition|)
block|{
for|for
control|(
specifier|final
name|Packages
name|pkgs
range|:
name|repo
operator|.
name|get
argument_list|()
operator|.
name|getParentRepo
argument_list|()
operator|.
name|listPackages
argument_list|()
control|)
block|{
specifier|final
name|Package
name|pkg
init|=
name|pkgs
operator|.
name|latest
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isCompatible
argument_list|(
name|pkg
argument_list|)
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"Package "
operator|+
name|pkg
operator|.
name|getName
argument_list|()
operator|+
literal|" is not compatible with this version of eXist. "
operator|+
literal|"To avoid conflicts, Java libraries shipping with this package are not loaded."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
specifier|final
name|FileSystemStorage
operator|.
name|FileSystemResolver
name|resolver
init|=
operator|(
name|FileSystemStorage
operator|.
name|FileSystemResolver
operator|)
name|pkg
operator|.
name|getResolver
argument_list|()
decl_stmt|;
specifier|final
name|File
name|packageDir
init|=
name|resolver
operator|.
name|resolveResourceAsFile
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
name|scanPackageDir
argument_list|(
name|classpath
argument_list|,
name|packageDir
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An error occurred while updating classpath for package "
operator|+
name|pkg
operator|.
name|getName
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"An error occurred while updating classpath for packages"
argument_list|,
name|e
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|boolean
name|isCompatible
parameter_list|(
name|Package
name|pkg
parameter_list|)
throws|throws
name|PackageException
block|{
comment|// determine the eXistdb version this package is compatible with
specifier|final
name|Collection
argument_list|<
name|ProcessorDependency
argument_list|>
name|processorDeps
init|=
name|pkg
operator|.
name|getProcessorDeps
argument_list|()
decl_stmt|;
specifier|final
name|String
name|procVersion
init|=
name|SystemProperties
operator|.
name|getInstance
argument_list|()
operator|.
name|getSystemProperty
argument_list|(
literal|"product-semver"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|PackageLoader
operator|.
name|Version
name|processorVersion
init|=
name|DEFAULT_VERSION
decl_stmt|;
for|for
control|(
name|ProcessorDependency
name|dependency
range|:
name|processorDeps
control|)
block|{
if|if
condition|(
name|Deployment
operator|.
name|PROCESSOR_NAME
operator|.
name|equals
argument_list|(
name|dependency
operator|.
name|getProcessor
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|dependency
operator|.
name|getSemver
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processorVersion
operator|=
operator|new
name|PackageLoader
operator|.
name|Version
argument_list|(
name|dependency
operator|.
name|getSemver
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dependency
operator|.
name|getSemverMax
argument_list|()
operator|!=
literal|null
operator|||
name|dependency
operator|.
name|getSemverMin
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processorVersion
operator|=
operator|new
name|PackageLoader
operator|.
name|Version
argument_list|(
name|dependency
operator|.
name|getSemverMin
argument_list|()
argument_list|,
name|dependency
operator|.
name|getSemverMax
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|dependency
operator|.
name|getVersions
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|processorVersion
operator|=
operator|new
name|PackageLoader
operator|.
name|Version
argument_list|(
name|dependency
operator|.
name|getVersions
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
return|return
name|processorVersion
operator|.
name|getDependencyVersion
argument_list|()
operator|.
name|isCompatible
argument_list|(
name|procVersion
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|void
name|scanPackageDir
parameter_list|(
name|Classpath
name|classpath
parameter_list|,
name|File
name|module
parameter_list|)
throws|throws
name|IOException
block|{
specifier|final
name|Path
name|dotExist
init|=
name|module
operator|.
name|toPath
argument_list|()
operator|.
name|resolve
argument_list|(
literal|".exist"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|dotExist
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|dotExist
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"The .exist config dir is not a dir: "
operator|+
name|dotExist
argument_list|)
throw|;
block|}
specifier|final
name|Path
name|cp
init|=
name|dotExist
operator|.
name|resolve
argument_list|(
literal|"classpath.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|exists
argument_list|(
name|cp
argument_list|)
condition|)
block|{
try|try
init|(
specifier|final
name|BufferedReader
name|reader
init|=
name|Files
operator|.
name|newBufferedReader
argument_list|(
name|cp
argument_list|)
init|)
block|{
name|String
name|line
decl_stmt|;
while|while
condition|(
operator|(
name|line
operator|=
name|reader
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|classpath
operator|.
name|addComponent
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_class

end_unit

