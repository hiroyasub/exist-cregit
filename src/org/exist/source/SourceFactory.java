begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|source
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileNotFoundException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URI
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Files
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|InvalidPathException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Path
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|Paths
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * Factory to create a {@link org.exist.source.Source} object for a given  * URL.  *  * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|SourceFactory
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|SourceFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Create a {@link Source} object for the given URL.      *<p>      * As a special case, if the URL starts with "resource:", the resource      * will be read from the current context class loader.      *      * @param broker      broker, can be null if not asking for a database resource      * @param contextPath      * @param location      * @throws MalformedURLException      * @throws IOException      */
specifier|public
specifier|static
specifier|final
name|Source
name|getSource
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|String
name|contextPath
parameter_list|,
name|String
name|location
parameter_list|,
name|boolean
name|checkXQEncoding
parameter_list|)
throws|throws
name|IOException
throws|,
name|PermissionDeniedException
block|{
name|Source
name|source
init|=
literal|null
decl_stmt|;
comment|/* resource: */
if|if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|ClassLoaderSource
operator|.
name|PROTOCOL
argument_list|)
condition|)
block|{
name|source
operator|=
operator|new
name|ClassLoaderSource
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|contextPath
operator|!=
literal|null
operator|&&
name|contextPath
operator|.
name|startsWith
argument_list|(
name|ClassLoaderSource
operator|.
name|PROTOCOL
argument_list|)
condition|)
block|{
comment|// Pretend it is a file on the local system so we can resolve it easily with URL() class.
specifier|final
name|String
name|conPathNoProtocol
init|=
name|contextPath
operator|.
name|replace
argument_list|(
name|ClassLoaderSource
operator|.
name|PROTOCOL
argument_list|,
literal|"file://"
argument_list|)
decl_stmt|;
name|String
name|resolvedURL
init|=
operator|new
name|URL
argument_list|(
operator|new
name|URL
argument_list|(
name|conPathNoProtocol
argument_list|)
argument_list|,
name|location
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|resolvedURL
operator|=
name|resolvedURL
operator|.
name|replaceFirst
argument_list|(
literal|"file://"
argument_list|,
name|ClassLoaderSource
operator|.
name|PROTOCOL
argument_list|)
expr_stmt|;
name|source
operator|=
operator|new
name|ClassLoaderSource
argument_list|(
name|resolvedURL
argument_list|)
expr_stmt|;
block|}
comment|/* file:// or location without scheme (:/) is assumed to be a file */
if|else if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
literal|"file:/"
argument_list|)
operator|||
operator|!
name|location
operator|.
name|contains
argument_list|(
literal|":/"
argument_list|)
condition|)
block|{
name|location
operator|=
name|location
operator|.
name|replaceAll
argument_list|(
literal|"^(file:)?/*(.*)$"
argument_list|,
literal|"$2"
argument_list|)
expr_stmt|;
try|try
block|{
specifier|final
name|Path
name|p
init|=
name|Paths
operator|.
name|get
argument_list|(
name|contextPath
argument_list|,
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|p
argument_list|)
condition|)
block|{
name|location
operator|=
name|p
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
name|source
operator|=
operator|new
name|FileSource
argument_list|(
name|p
argument_list|,
name|checkXQEncoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// continue trying
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|Path
name|p2
init|=
name|Paths
operator|.
name|get
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|p2
argument_list|)
condition|)
block|{
name|location
operator|=
name|p2
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
name|source
operator|=
operator|new
name|FileSource
argument_list|(
name|p2
argument_list|,
name|checkXQEncoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// continue trying
block|}
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
try|try
block|{
specifier|final
name|Path
name|p3
init|=
name|Paths
operator|.
name|get
argument_list|(
name|contextPath
argument_list|)
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|resolve
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|p3
argument_list|)
condition|)
block|{
name|location
operator|=
name|p3
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
name|source
operator|=
operator|new
name|FileSource
argument_list|(
name|p3
argument_list|,
name|checkXQEncoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// continue trying
block|}
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|/*                  * Try to load as an absolute path                  */
try|try
block|{
specifier|final
name|Path
name|p4
init|=
name|Paths
operator|.
name|get
argument_list|(
literal|"/"
operator|+
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|p4
argument_list|)
condition|)
block|{
name|location
operator|=
name|p4
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
name|source
operator|=
operator|new
name|FileSource
argument_list|(
name|p4
argument_list|,
name|checkXQEncoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// continue trying
block|}
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|/*                  * Try to load from the folder of the contextPath                  */
try|try
block|{
specifier|final
name|Path
name|p5
init|=
name|Paths
operator|.
name|get
argument_list|(
name|contextPath
argument_list|)
operator|.
name|resolveSibling
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|p5
argument_list|)
condition|)
block|{
name|location
operator|=
name|p5
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
name|source
operator|=
operator|new
name|FileSource
argument_list|(
name|p5
argument_list|,
name|checkXQEncoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// continue trying
block|}
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|/*                  * Try to load from the folder of the contextPath URL                  */
try|try
block|{
name|Path
name|p6
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|contextPath
operator|.
name|startsWith
argument_list|(
literal|"file:/"
argument_list|)
condition|)
block|{
try|try
block|{
name|p6
operator|=
name|Paths
operator|.
name|get
argument_list|(
operator|new
name|URI
argument_list|(
name|contextPath
argument_list|)
argument_list|)
operator|.
name|resolveSibling
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|URISyntaxException
name|e
parameter_list|)
block|{
comment|// continue trying
block|}
block|}
if|if
condition|(
name|p6
operator|==
literal|null
condition|)
block|{
name|p6
operator|=
name|Paths
operator|.
name|get
argument_list|(
name|contextPath
operator|.
name|replaceFirst
argument_list|(
literal|"^file:/*(/.*)$"
argument_list|,
literal|"$1"
argument_list|)
argument_list|)
operator|.
name|resolveSibling
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|p6
argument_list|)
condition|)
block|{
name|location
operator|=
name|p6
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
name|source
operator|=
operator|new
name|FileSource
argument_list|(
name|p6
argument_list|,
name|checkXQEncoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// continue trying
block|}
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
comment|/*                  * Lastly we try to load it using EXIST_HOME as the reference point                  */
name|Path
name|p7
init|=
literal|null
decl_stmt|;
try|try
block|{
name|p7
operator|=
name|FileUtils
operator|.
name|resolve
argument_list|(
name|BrokerPool
operator|.
name|getInstance
argument_list|()
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getExistHome
argument_list|()
argument_list|,
name|location
argument_list|)
expr_stmt|;
if|if
condition|(
name|Files
operator|.
name|isReadable
argument_list|(
name|p7
argument_list|)
condition|)
block|{
name|location
operator|=
name|p7
operator|.
name|toUri
argument_list|()
operator|.
name|toASCIIString
argument_list|()
expr_stmt|;
name|source
operator|=
operator|new
name|FileSource
argument_list|(
name|p7
argument_list|,
name|checkXQEncoding
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|InvalidPathException
name|e
parameter_list|)
block|{
comment|// continue and abort below
block|}
block|}
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"cannot read module source from file at "
operator|+
name|location
operator|+
literal|". \n"
argument_list|)
throw|;
block|}
block|}
comment|/* xmldb: */
if|else if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|XMLDB_URI_PREFIX
argument_list|)
condition|)
block|{
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|XmldbURI
name|pathUri
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|source
operator|=
operator|new
name|DBSource
argument_list|(
name|broker
argument_list|,
operator|(
name|BinaryDocument
operator|)
name|resource
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
try|try
block|{
comment|// XML document: serialize to string source so it can be read as a stream
comment|// by fn:unparsed-text and friends
name|source
operator|=
operator|new
name|StringSource
argument_list|(
name|broker
operator|.
name|getSerializer
argument_list|()
operator|.
name|serialize
argument_list|(
name|resource
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
block|}
block|}
block|}
finally|finally
block|{
comment|//TODO: this is nasty!!! as we are unlocking the resource whilst there
comment|//is still a source
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|LockMode
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/* resource: */
if|else if
condition|(
name|location
operator|.
name|startsWith
argument_list|(
name|ClassLoaderSource
operator|.
name|PROTOCOL
argument_list|)
condition|)
block|{
name|source
operator|=
operator|new
name|ClassLoaderSource
argument_list|(
name|location
argument_list|)
expr_stmt|;
block|}
comment|/* any other URL */
else|else
block|{
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|source
operator|=
operator|new
name|URLSource
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
return|return
name|source
return|;
block|}
block|}
end_class

end_unit

