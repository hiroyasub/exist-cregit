begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|source
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_comment
comment|/**  * A source implementation reading from an URL.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|URLSource
extends|extends
name|AbstractSource
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|URLSource
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|URL
name|url
decl_stmt|;
specifier|private
name|URLConnection
name|connection
init|=
literal|null
decl_stmt|;
specifier|private
name|long
name|lastModified
init|=
literal|0
decl_stmt|;
specifier|protected
name|URLSource
parameter_list|()
block|{
block|}
specifier|public
name|URLSource
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
specifier|protected
name|void
name|setURL
parameter_list|(
name|URL
name|url
parameter_list|)
block|{
name|this
operator|.
name|url
operator|=
name|url
expr_stmt|;
block|}
specifier|public
name|URL
name|getURL
parameter_list|()
block|{
return|return
name|url
return|;
block|}
specifier|private
name|long
name|getLastModification
parameter_list|()
block|{
try|try
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
name|connection
operator|=
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
return|return
name|connection
operator|.
name|getLastModified
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"URL could not be opened: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.source.Source#getKey() 	 */
specifier|public
name|Object
name|getKey
parameter_list|()
block|{
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.source.Source#isValid() 	 */
specifier|public
name|int
name|isValid
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
name|long
name|modified
init|=
name|getLastModification
argument_list|()
decl_stmt|;
if|if
condition|(
name|modified
operator|==
literal|0
operator|&&
name|modified
operator|>
name|lastModified
condition|)
return|return
name|INVALID
return|;
else|else
return|return
name|VALID
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.source.Source#isValid(org.exist.source.Source) 	 */
specifier|public
name|int
name|isValid
parameter_list|(
name|Source
name|other
parameter_list|)
block|{
return|return
name|INVALID
return|;
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.source.Source#getReader() 	 */
specifier|public
name|Reader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
name|connection
operator|=
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|connection
operator|.
name|getInputStream
argument_list|()
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
return|return
name|reader
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"URL could not be opened: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
throw|throw
name|e
throw|;
block|}
block|}
comment|/* (non-Javadoc) 	 * @see org.exist.source.Source#getContent() 	 */
specifier|public
name|String
name|getContent
parameter_list|()
throws|throws
name|IOException
block|{
try|try
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
name|connection
operator|=
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
name|String
name|content
init|=
name|connection
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|connection
operator|=
literal|null
expr_stmt|;
return|return
name|content
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"URL could not be opened: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
if|if
condition|(
name|url
operator|==
literal|null
condition|)
return|return
literal|"[not set]"
return|;
return|return
name|url
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
end_class

end_unit

