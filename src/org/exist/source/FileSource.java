begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|source
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_comment
comment|/**  * A source implementation reading from the file system.  *   * @author wolf  */
end_comment

begin_class
specifier|public
class|class
name|FileSource
extends|extends
name|AbstractSource
block|{
specifier|private
name|File
name|file
decl_stmt|;
specifier|private
name|String
name|filePath
decl_stmt|;
specifier|private
name|long
name|lastModified
decl_stmt|;
specifier|private
name|String
name|encoding
decl_stmt|;
specifier|private
name|boolean
name|checkEncoding
init|=
literal|false
decl_stmt|;
specifier|public
name|FileSource
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|encoding
parameter_list|,
name|boolean
name|checkXQEncoding
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|filePath
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|this
operator|.
name|lastModified
operator|=
name|file
operator|.
name|lastModified
argument_list|()
expr_stmt|;
name|this
operator|.
name|encoding
operator|=
name|encoding
expr_stmt|;
name|this
operator|.
name|checkEncoding
operator|=
name|checkXQEncoding
expr_stmt|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.source.Source#getKey()      */
specifier|public
name|Object
name|getKey
parameter_list|()
block|{
return|return
name|filePath
return|;
block|}
specifier|public
name|String
name|getFilePath
parameter_list|()
block|{
return|return
name|filePath
return|;
block|}
specifier|public
name|File
name|getFile
parameter_list|()
block|{
return|return
name|file
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.source.Source#isValid()      */
specifier|public
name|int
name|isValid
parameter_list|(
name|DBBroker
name|broker
parameter_list|)
block|{
specifier|final
name|File
name|f
init|=
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|lastModified
argument_list|()
operator|>
name|lastModified
condition|)
block|{
return|return
name|INVALID
return|;
block|}
else|else
block|{
return|return
name|VALID
return|;
block|}
block|}
comment|/* (non-Javadoc)      * @see org.exist.source.Source#isValid(org.exist.source.Source)      */
specifier|public
name|int
name|isValid
parameter_list|(
name|Source
name|other
parameter_list|)
block|{
return|return
name|INVALID
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.source.Source#getReader()      */
specifier|public
name|Reader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
name|checkEncoding
argument_list|()
expr_stmt|;
return|return
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|filePath
argument_list|)
argument_list|,
name|encoding
argument_list|)
return|;
block|}
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|FileInputStream
argument_list|(
name|filePath
argument_list|)
return|;
block|}
comment|/* (non-Javadoc)      * @see org.exist.source.Source#getContent()      */
specifier|public
name|String
name|getContent
parameter_list|()
throws|throws
name|IOException
block|{
name|checkEncoding
argument_list|()
expr_stmt|;
specifier|final
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
operator|new
name|File
argument_list|(
name|filePath
argument_list|)
argument_list|)
decl_stmt|;
try|try
block|{
specifier|final
name|Reader
name|reader
init|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|encoding
argument_list|)
decl_stmt|;
specifier|final
name|char
index|[]
name|chars
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
specifier|final
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|int
name|read
decl_stmt|;
while|while
condition|(
operator|(
name|read
operator|=
name|reader
operator|.
name|read
argument_list|(
name|chars
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
name|buf
operator|.
name|append
argument_list|(
name|chars
argument_list|,
literal|0
argument_list|,
name|read
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|checkEncoding
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|checkEncoding
condition|)
block|{
specifier|final
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
try|try
block|{
name|String
name|checkedEnc
init|=
name|guessXQueryEncoding
argument_list|(
name|is
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkedEnc
operator|!=
literal|null
condition|)
block|{
name|encoding
operator|=
name|checkedEnc
expr_stmt|;
block|}
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
annotation|@
name|Override
specifier|public
name|QName
name|isModule
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|FileInputStream
name|is
init|=
operator|new
name|FileInputStream
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
try|try
block|{
return|return
name|getModuleDecl
argument_list|(
name|is
argument_list|)
return|;
block|}
finally|finally
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
name|filePath
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|validate
parameter_list|(
name|Subject
name|subject
parameter_list|,
name|int
name|perm
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
comment|// TODO protected?
block|}
block|}
end_class

end_unit

