begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|numbering
package|;
end_package

begin_class
specifier|public
class|class
name|MutableDLN
extends|extends
name|DLN
block|{
comment|// offset pointing to the first bit of the
comment|// last level written
specifier|protected
name|int
name|lastLevelOffset
init|=
operator|-
literal|1
decl_stmt|;
specifier|public
name|MutableDLN
parameter_list|()
block|{
name|this
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MutableDLN
parameter_list|(
name|int
name|id
parameter_list|)
block|{
name|bits
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
name|addLevelId
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MutableDLN
parameter_list|(
name|int
index|[]
name|id
parameter_list|)
block|{
name|this
argument_list|(
name|id
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|id
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|addLevelId
argument_list|(
name|id
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MutableDLN
parameter_list|(
name|MutableDLN
name|other
parameter_list|)
block|{
name|super
argument_list|(
name|other
argument_list|)
expr_stmt|;
name|this
operator|.
name|lastLevelOffset
operator|=
name|other
operator|.
name|lastLevelOffset
expr_stmt|;
block|}
specifier|public
name|MutableDLN
parameter_list|(
name|int
name|units
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|startOffset
parameter_list|)
block|{
name|super
argument_list|(
name|units
argument_list|,
name|data
argument_list|,
name|startOffset
argument_list|)
expr_stmt|;
block|}
specifier|public
name|MutableDLN
name|newChild
parameter_list|()
block|{
name|MutableDLN
name|child
init|=
operator|new
name|MutableDLN
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|child
operator|.
name|addLevelId
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|child
return|;
block|}
specifier|public
name|MutableDLN
name|nextSibling
parameter_list|()
block|{
name|MutableDLN
name|sibling
init|=
operator|new
name|MutableDLN
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|sibling
operator|.
name|incrementLevelId
argument_list|()
expr_stmt|;
return|return
name|sibling
return|;
block|}
specifier|public
name|void
name|addLevelId
parameter_list|(
name|int
name|levelId
parameter_list|)
block|{
name|lastLevelOffset
operator|=
name|bitIndex
expr_stmt|;
name|setCurrentLevelId
argument_list|(
name|levelId
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|incrementLevelId
parameter_list|()
block|{
name|bitIndex
operator|=
name|lastLevelOffset
expr_stmt|;
name|setCurrentLevelId
argument_list|(
name|getLevelId
argument_list|(
name|lastLevelOffset
operator|+
literal|1
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|MutableDLN
name|id
init|=
operator|new
name|MutableDLN
argument_list|()
decl_stmt|;
name|id
operator|.
name|setLevelId
argument_list|(
literal|0
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ID: "
operator|+
name|id
operator|.
name|toBitString
argument_list|()
operator|+
literal|" = "
operator|+
name|id
operator|.
name|getLevelId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|id
operator|.
name|setLevelId
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
name|i
operator|++
control|)
block|{
name|id
operator|.
name|incrementLevelId
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ID: "
operator|+
name|id
operator|.
name|toBitString
argument_list|()
operator|+
literal|" = "
operator|+
name|id
operator|.
name|getLevelId
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|id
operator|.
name|addLevelId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ID: "
operator|+
name|id
operator|.
name|toBitString
argument_list|()
operator|+
literal|" = "
operator|+
name|id
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|id
operator|=
operator|new
name|MutableDLN
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|id
operator|.
name|addLevelId
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|id
operator|.
name|addLevelId
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Levels: "
operator|+
name|id
operator|.
name|getLevelCount
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"ID: "
operator|+
name|id
operator|.
name|toString
argument_list|()
operator|+
literal|" = "
operator|+
name|id
operator|.
name|toBitString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

