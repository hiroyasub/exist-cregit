begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on May 25, 2004  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|schema
operator|.
name|internalaccess
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|schema
operator|.
name|SchemaAccess
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|AttributeDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|ElementDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|XMLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|reader
operator|.
name|SchemaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|/**  * Provides server-internal access to the schema store. This has the advantage of being a lot faster than  * taking the detour via the SchemaService. In addition to that you can also access schema definitions from   * places where you have lost track of the context collection.  *   * @author seb  *  */
end_comment

begin_class
specifier|public
class|class
name|InternalSchemaAccess
implements|implements
name|SchemaAccess
block|{
comment|/** 	* singleton instance: 	*/
specifier|private
specifier|static
name|InternalSchemaAccess
name|singleInstance
init|=
literal|null
decl_stmt|;
specifier|private
name|BrokerPool
name|brokerPool
init|=
literal|null
decl_stmt|;
comment|/** 	 * Key: String targetNamespace 	 */
specifier|private
name|Hashtable
name|schemaCache
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
comment|/** 	 * Key: QName of type 	 */
specifier|private
name|Hashtable
name|typeCache
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
comment|/** 	 * Key: QName of element 	 */
specifier|private
name|Hashtable
name|elementCache
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
comment|/** 	 * Key QName of attribute 	 */
specifier|private
name|Hashtable
name|attributeCache
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
comment|/** 	 *  	 */
specifier|private
name|InternalSchemaAccess
parameter_list|()
throws|throws
name|EXistException
block|{
name|super
argument_list|()
expr_stmt|;
name|brokerPool
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
block|}
specifier|public
specifier|static
name|InternalSchemaAccess
name|getSingleInstance
parameter_list|()
throws|throws
name|EXistException
block|{
if|if
condition|(
name|singleInstance
operator|==
literal|null
condition|)
block|{
name|singleInstance
operator|=
operator|new
name|InternalSchemaAccess
argument_list|()
expr_stmt|;
block|}
return|return
name|singleInstance
return|;
block|}
comment|/** 	 * Retrieve a document by name and serialize it into a string. 	 * @param docName the full path to the document 	 * @return the serialization of the XML document referred to by<code>docuName</code> 	 * @throws XMLDBException if there is a database error in the process 	 */
specifier|private
name|String
name|getDocumentAsString
parameter_list|(
name|String
name|docName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|DocumentImpl
name|doc
init|=
operator|(
name|DocumentImpl
operator|)
name|getDocumentAsDOM
argument_list|(
name|docName
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
return|return
name|serializer
operator|.
name|serialize
argument_list|(
name|doc
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error getting document "
operator|+
name|docName
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** 	 * Retrieve a document by name and return it as a Document. 	 * @param docName the full path to the document 	 * @return 	 * @throws XMLDBException 	 */
specifier|private
name|Document
name|getDocumentAsDOM
parameter_list|(
name|String
name|docName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|()
expr_stmt|;
name|DocumentImpl
name|doc
decl_stmt|;
return|return
operator|(
name|DocumentImpl
operator|)
name|broker
operator|.
name|getDocument
argument_list|(
name|docName
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error getting document "
operator|+
name|docName
argument_list|,
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|broker
operator|!=
literal|null
condition|)
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|/** Collection in which the schemas are stored */
specifier|private
specifier|static
specifier|final
name|String
name|SCHEMA_COLLECTION_PATH
init|=
literal|"/db/system/schema"
decl_stmt|;
comment|/** Index file mapping targetNamespace to resource name */
specifier|private
specifier|static
specifier|final
name|String
name|INDEX_NAME
init|=
name|SCHEMA_COLLECTION_PATH
operator|+
literal|"/.index"
decl_stmt|;
comment|/** 	 * Determines the filename (resource name) of the resource that stores the schema defining target namespace. 	 * @param targetNamespace 	 * @return the resource name without path 	 * @throws XMLDBException 	 */
specifier|private
name|String
name|getSchemaFilename
parameter_list|(
name|String
name|targetNamespace
parameter_list|)
throws|throws
name|XMLDBException
block|{
comment|//FIXME almost duplicate code with GenericSchemaService#getSchemaFilename!
if|if
condition|(
name|targetNamespace
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"null is not a valid namespace!"
argument_list|)
throw|;
name|Node
name|root
init|=
name|getDocumentAsDOM
argument_list|(
name|INDEX_NAME
argument_list|)
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"schema-index"
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|NodeList
name|schemas
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|schemas
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|schema
init|=
name|schemas
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"schema"
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|Node
name|targetNamespaceAttr
init|=
name|schema
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"targetNamespace"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|targetNamespaceAttr
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|targetNamespace
operator|.
name|equals
argument_list|(
name|targetNamespaceAttr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
operator|)
condition|)
return|return
name|schema
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"resourceName"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"invalid schema index. Unexpected root element "
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 * Retrieve a Castor representation of the schema 	 * @param targetNamespace 	 * @return Schema (as per the Castor implementation), null if the schema corresponding to NS targetNamespace is not known) 	 * @throws XMLDBException 	 */
specifier|public
name|Schema
name|getCastorSchema
parameter_list|(
name|String
name|targetNamespace
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Schema
name|castorSchema
init|=
operator|(
name|Schema
operator|)
name|schemaCache
operator|.
name|get
argument_list|(
name|targetNamespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|castorSchema
operator|==
literal|null
condition|)
block|{
name|String
name|schemaFilename
init|=
name|getSchemaFilename
argument_list|(
name|targetNamespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|schemaFilename
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|String
name|schema
init|=
name|getDocumentAsString
argument_list|(
name|SCHEMA_COLLECTION_PATH
operator|+
literal|"/"
operator|+
name|schemaFilename
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|castorSchema
operator|=
operator|(
operator|new
name|SchemaReader
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|schema
argument_list|)
argument_list|)
argument_list|)
operator|)
operator|.
name|read
argument_list|()
expr_stmt|;
if|if
condition|(
name|castorSchema
operator|!=
literal|null
condition|)
name|schemaCache
operator|.
name|put
argument_list|(
name|targetNamespace
argument_list|,
name|castorSchema
argument_list|)
expr_stmt|;
block|}
else|else
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Schema document for target namespace "
operator|+
name|targetNamespace
operator|+
literal|" not found even though it is in the index."
argument_list|,
literal|null
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error parsing schema "
operator|+
name|targetNamespace
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|castorSchema
return|;
block|}
specifier|public
name|void
name|putSchema
parameter_list|(
name|String
name|schemaContents
parameter_list|)
throws|throws
name|XMLDBException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"InternalSchemaAccess does not support storing of schemas."
argument_list|)
throw|;
block|}
specifier|public
name|boolean
name|validate
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
literal|false
return|;
block|}
comment|/** 	 * Find the (globally declared) type refered to by qname 	 */
specifier|public
name|XMLType
name|getType
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
operator|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"QName "
operator|+
name|qname
operator|.
name|toString
argument_list|()
operator|+
literal|" is not fully qualified."
argument_list|)
throw|;
name|XMLType
name|type
init|=
operator|(
name|XMLType
operator|)
name|typeCache
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|null
condition|)
block|{
name|Schema
name|schema
init|=
name|getCastorSchema
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|type
operator|=
name|schema
operator|.
name|getType
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|typeCache
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
return|return
name|type
return|;
block|}
comment|/** 	 * @return ElementDecl The element declaration (Castor) or null if the element qname is not known. 	 */
specifier|public
name|ElementDecl
name|getElement
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
operator|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"QName "
operator|+
name|qname
operator|.
name|toString
argument_list|()
operator|+
literal|" is not fully qualified."
argument_list|)
throw|;
name|ElementDecl
name|element
init|=
operator|(
name|ElementDecl
operator|)
name|elementCache
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|element
operator|==
literal|null
condition|)
block|{
name|Schema
name|schema
init|=
name|getCastorSchema
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|schema
operator|!=
literal|null
condition|)
block|{
name|element
operator|=
name|schema
operator|.
name|getElementDecl
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|element
operator|!=
literal|null
condition|)
name|elementCache
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|element
argument_list|)
expr_stmt|;
else|else
return|return
literal|null
return|;
block|}
else|else
block|{
return|return
literal|null
return|;
block|}
block|}
return|return
name|element
return|;
block|}
specifier|public
name|AttributeDecl
name|getAttribute
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
operator|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
operator|)
operator|||
operator|(
literal|""
operator|.
name|equals
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"QName "
operator|+
name|qname
operator|.
name|toString
argument_list|()
operator|+
literal|" is not fully qualified."
argument_list|)
throw|;
name|AttributeDecl
name|attribute
init|=
operator|(
name|AttributeDecl
operator|)
name|attributeCache
operator|.
name|get
argument_list|(
name|qname
argument_list|)
decl_stmt|;
if|if
condition|(
name|attribute
operator|==
literal|null
condition|)
block|{
name|Schema
name|schema
init|=
name|getCastorSchema
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
name|attribute
operator|=
name|schema
operator|.
name|getAttribute
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
expr_stmt|;
name|attributeCache
operator|.
name|put
argument_list|(
name|qname
argument_list|,
name|attribute
argument_list|)
expr_stmt|;
block|}
return|return
name|attribute
return|;
block|}
specifier|public
name|boolean
name|isKnownNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|getCastorSchema
argument_list|(
name|namespaceURI
argument_list|)
operator|!=
literal|null
return|;
block|}
block|}
end_class

end_unit

