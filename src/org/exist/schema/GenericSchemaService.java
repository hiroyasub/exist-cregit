begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * Created on Apr 10, 2004  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|filters
operator|.
name|StringInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|parsers
operator|.
name|DOMParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|AttributeDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|ElementDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|XMLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|reader
operator|.
name|SchemaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_comment
comment|/**  * @author seb  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GenericSchemaService
implements|implements
name|SchemaService
block|{
specifier|private
class|class
name|ValidationErrorHandler
implements|implements
name|ErrorHandler
block|{
specifier|private
name|ArrayList
name|warnings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
name|errors
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|addError
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|addError
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|addWarning
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/** 		 * @return 		 */
specifier|public
name|ArrayList
name|getErrors
parameter_list|()
block|{
return|return
name|errors
return|;
block|}
specifier|private
name|void
name|addError
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|getErrors
argument_list|()
operator|.
name|add
argument_list|(
literal|"Error: ("
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|", "
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/** 		 * @return 		 */
specifier|public
name|ArrayList
name|getWarnings
parameter_list|()
block|{
return|return
name|warnings
return|;
block|}
specifier|private
name|void
name|addWarning
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|getWarnings
argument_list|()
operator|.
name|add
argument_list|(
literal|"Warning: ("
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|", "
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XMLDBException
name|toException
parameter_list|()
block|{
name|String
name|errors
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getErrors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|errors
operator|+=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
return|return
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error validating: \n"
operator|+
name|errors
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|GenericSchemaService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|INDEX_RESOURCE_NAME
init|=
literal|".index"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXP_SCHEMA_LANGUAGE
init|=
literal|"http://java.sun.com/xml/jaxp/properties/schemaLanguage"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|W3C_XML_SCHEMA
init|=
literal|"http://www.w3.org/2001/XMLSchema"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXP_SCHEMA_SOURCE
init|=
literal|"http://java.sun.com/xml/jaxp/properties/schemaSource"
decl_stmt|;
specifier|private
name|Collection
name|parentCollection
decl_stmt|;
specifier|private
name|Collection
name|schemasCollection
decl_stmt|;
specifier|private
name|ArrayList
name|transientSchemas
init|=
literal|null
decl_stmt|;
specifier|public
name|GenericSchemaService
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|setParentCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|"SchemaService"
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|"1.0"
return|;
block|}
specifier|public
name|void
name|setCollection
parameter_list|(
name|Collection
name|arg0
parameter_list|)
throws|throws
name|XMLDBException
block|{
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|XMLDBException
block|{
block|}
specifier|private
name|XMLResource
name|getIndexResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|index
init|=
literal|null
decl_stmt|;
try|try
block|{
name|index
operator|=
operator|(
name|XMLResource
operator|)
name|getSchemasCollection
argument_list|()
operator|.
name|getResource
argument_list|(
name|INDEX_RESOURCE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
name|index
operator|=
operator|(
name|XMLResource
operator|)
name|schemasCollection
operator|.
name|createResource
argument_list|(
name|INDEX_RESOURCE_NAME
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|index
operator|.
name|setContent
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><schema-index/>"
argument_list|)
expr_stmt|;
name|getSchemasCollection
argument_list|()
operator|.
name|storeResource
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|private
name|String
name|getSchemaFilename
parameter_list|(
name|String
name|targetNamespace
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|targetNamespace
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"null is not a valid namespace!"
argument_list|)
throw|;
name|XMLResource
name|index
init|=
name|getIndexResource
argument_list|()
decl_stmt|;
name|String
name|filename
init|=
literal|null
decl_stmt|;
name|Node
name|root
init|=
name|index
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
if|if
condition|(
literal|"schema-index"
operator|.
name|equals
argument_list|(
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|NodeList
name|schemas
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|schemas
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|Node
name|schema
init|=
name|schemas
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
literal|"schema"
operator|.
name|equals
argument_list|(
name|schema
operator|.
name|getNodeName
argument_list|()
argument_list|)
condition|)
block|{
name|Node
name|targetNamespaceAttr
init|=
name|schema
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"targetNamespace"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|targetNamespaceAttr
operator|!=
literal|null
operator|)
operator|&&
operator|(
name|targetNamespace
operator|.
name|equals
argument_list|(
name|targetNamespaceAttr
operator|.
name|getNodeValue
argument_list|()
argument_list|)
operator|)
condition|)
return|return
name|schema
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"resourceName"
argument_list|)
operator|.
name|getNodeValue
argument_list|()
return|;
block|}
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"invalid schema index. Unexpected root element "
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
return|return
name|filename
return|;
block|}
specifier|private
name|Collection
name|getSchemasCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|schemasCollection
operator|==
literal|null
condition|)
block|{
name|Collection
name|parent
init|=
name|getParentCollection
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|.
name|getParentCollection
argument_list|()
operator|!=
literal|null
condition|)
name|parent
operator|=
name|parent
operator|.
name|getParentCollection
argument_list|()
expr_stmt|;
name|schemasCollection
operator|=
name|parent
operator|.
name|getChildCollection
argument_list|(
literal|"system"
argument_list|)
operator|.
name|getChildCollection
argument_list|(
literal|"schema"
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemasCollection
operator|==
literal|null
condition|)
block|{
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|getParentCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cms
operator|!=
literal|null
condition|)
block|{
name|cms
operator|.
name|setCollection
argument_list|(
name|parent
operator|.
name|getChildCollection
argument_list|(
literal|"system"
argument_list|)
argument_list|)
expr_stmt|;
name|schemasCollection
operator|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"schema"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Could not get CollectionManagementService."
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|schemasCollection
return|;
block|}
specifier|private
name|String
name|findTargetNamespace
parameter_list|(
name|String
name|schemaContents
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|String
name|targetNamespace
init|=
literal|null
decl_stmt|;
name|DOMParser
name|parser
init|=
operator|new
name|DOMParser
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|schemaContents
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|rootNode
init|=
name|parser
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Node
name|targetNamespaceAttr
init|=
name|rootNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"targetNamespace"
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetNamespaceAttr
operator|!=
literal|null
condition|)
name|targetNamespace
operator|=
name|targetNamespaceAttr
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error parsing schema: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error parsing schema: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|targetNamespace
return|;
block|}
specifier|public
name|void
name|putSchema
parameter_list|(
name|String
name|schemaContents
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|schemasCollection
init|=
name|getSchemasCollection
argument_list|()
decl_stmt|;
name|String
name|targetNamespace
init|=
name|findTargetNamespace
argument_list|(
name|schemaContents
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|getSchemaFilename
argument_list|(
name|targetNamespace
argument_list|)
decl_stmt|;
name|Resource
name|schemaResource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filename
operator|==
literal|null
condition|)
block|{
name|filename
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|schemaResource
operator|=
name|schemasCollection
operator|.
name|createResource
argument_list|(
name|filename
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|addToIndex
argument_list|(
name|targetNamespace
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
else|else
name|schemaResource
operator|=
operator|(
name|XMLResource
operator|)
name|schemasCollection
operator|.
name|getResource
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|schemaResource
operator|.
name|setContent
argument_list|(
name|schemaContents
argument_list|)
expr_stmt|;
name|schemasCollection
operator|.
name|storeResource
argument_list|(
name|schemaResource
argument_list|)
expr_stmt|;
name|schemasCollection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
specifier|private
name|void
name|addToIndex
parameter_list|(
name|String
name|targetNamespace
parameter_list|,
name|String
name|filename
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|index
init|=
name|getIndexResource
argument_list|()
decl_stmt|;
name|Node
name|rootNode
init|=
name|index
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
name|Document
name|doc
init|=
name|rootNode
operator|.
name|getOwnerDocument
argument_list|()
decl_stmt|;
name|Element
name|schemaNode
init|=
name|doc
operator|.
name|createElement
argument_list|(
literal|"schema"
argument_list|)
decl_stmt|;
comment|//		Attr targetNamespaceAttr = doc.createAttribute("targetNamespace");
comment|//		// jmv: targetNamespaceAttr.setNodeValue(targetNamespace);
comment|//		targetNamespaceAttr.setValue(targetNamespace); // jmv
comment|//		Attr resourceNameAttr = doc.createAttribute("resourceName");
comment|//		resourceNameAttr.setValue(filename); // jmv
comment|//		schemaNode.getAttributes().setNamedItem(targetNamespaceAttr);
comment|//		schemaNode.getAttributes().setNamedItem(resourceNameAttr);
name|schemaNode
operator|.
name|setAttribute
argument_list|(
literal|"targetNamespace"
argument_list|,
name|targetNamespace
argument_list|)
expr_stmt|;
name|schemaNode
operator|.
name|setAttribute
argument_list|(
literal|"resourceName"
argument_list|,
name|filename
argument_list|)
expr_stmt|;
name|rootNode
operator|.
name|appendChild
argument_list|(
name|schemaNode
argument_list|)
expr_stmt|;
name|index
operator|.
name|setContentAsDOM
argument_list|(
name|rootNode
argument_list|)
expr_stmt|;
name|getSchemasCollection
argument_list|()
operator|.
name|storeResource
argument_list|(
name|index
argument_list|)
expr_stmt|;
comment|// jmv: this doesn't update the .index document ???!!!
block|}
specifier|public
name|XMLResource
name|getSchema
parameter_list|(
name|String
name|targetNamespace
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|String
name|filename
init|=
name|getSchemaFilename
argument_list|(
name|targetNamespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|filename
operator|!=
literal|null
condition|)
return|return
operator|(
name|XMLResource
operator|)
name|getSchemasCollection
argument_list|()
operator|.
name|getResource
argument_list|(
name|filename
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
specifier|public
name|boolean
name|validateContents
parameter_list|(
name|String
name|contents
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|ValidationErrorHandler
name|errorHandler
init|=
operator|new
name|ValidationErrorHandler
argument_list|()
decl_stmt|;
name|docBuilder
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
operator|new
name|StringInputStream
argument_list|(
name|contents
argument_list|)
argument_list|)
decl_stmt|;
name|Set
name|namespaces
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|findNamespaces
argument_list|(
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|SchemaService
name|schemaService
init|=
operator|(
name|SchemaService
operator|)
name|getParentCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"SchemaService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ArrayList
name|schemas
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting schemas for validation ("
operator|+
name|namespaces
operator|.
name|size
argument_list|()
operator|+
literal|"): "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaces
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|namespaceURI
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|XMLResource
name|resource
init|=
name|schemaService
operator|.
name|getSchema
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|schemas
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
else|else
name|LOG
operator|.
name|warn
argument_list|(
literal|"No schema for target namespace "
operator|+
name|namespaceURI
operator|+
literal|" found."
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|setValidating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|factory
operator|.
name|setAttribute
argument_list|(
name|JAXP_SCHEMA_LANGUAGE
argument_list|,
name|W3C_XML_SCHEMA
argument_list|)
expr_stmt|;
name|InputSource
index|[]
name|schemaSources
init|=
operator|new
name|InputSource
index|[
name|schemas
operator|.
name|size
argument_list|()
operator|+
name|getTransientSchemas
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|schemas
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|schemaSources
index|[
name|i
index|]
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
operator|(
name|String
operator|)
name|schemas
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|getTransientSchemas
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
name|schemaSources
index|[
name|i
index|]
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setAttribute
argument_list|(
name|JAXP_SCHEMA_SOURCE
argument_list|,
name|schemaSources
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Parser does not support JAXP 1.2"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|docBuilder
operator|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|docBuilder
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
name|docBuilder
operator|.
name|parse
argument_list|(
operator|new
name|StringInputStream
argument_list|(
name|contents
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorHandler
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
throw|throw
name|errorHandler
operator|.
name|toException
argument_list|()
throw|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Parser config error validating contents."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"SAX error reading contents."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"IO error reading contents"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|validateResource
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Resource
name|doc
init|=
name|getParentCollection
argument_list|()
operator|.
name|getResource
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|"XMLResource"
operator|.
name|equals
argument_list|(
name|doc
operator|.
name|getResourceType
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
literal|"XMLView"
operator|.
name|equals
argument_list|(
name|doc
operator|.
name|getResourceType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|XMLResource
name|xmlResource
init|=
operator|(
name|XMLResource
operator|)
name|doc
decl_stmt|;
name|Node
name|root
init|=
name|xmlResource
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|validateContents
argument_list|(
operator|(
name|String
operator|)
name|xmlResource
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error validating resource "
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|WRONG_CONTENT_TYPE
argument_list|,
literal|"Can only validate XML documents, but "
operator|+
name|id
operator|+
literal|" is a "
operator|+
name|doc
operator|.
name|getResourceType
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * @param root 	 * @return 	 */
specifier|private
name|void
name|findNamespaces
parameter_list|(
name|Node
name|root
parameter_list|,
name|Set
name|namespaces
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"locating namespace in "
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|namespace
init|=
name|root
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
name|namespaces
operator|.
name|add
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|findNamespaces
argument_list|(
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|findNamespaces
argument_list|(
name|root
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
name|getParentCollection
parameter_list|()
block|{
return|return
name|parentCollection
return|;
block|}
specifier|public
name|void
name|setParentCollection
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|parentCollection
operator|=
name|collection
expr_stmt|;
block|}
comment|/** 	 * @return the attribute by name qname or null if no such attribute is known. 	 */
specifier|public
name|AttributeDecl
name|getAttribute
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|String
name|xquery
init|=
literal|"declare namespace xs=\""
operator|+
name|W3C_XML_SCHEMA
operator|+
literal|"\";"
operator|+
literal|"/xs:schema[@targetNamespace=\""
operator|+
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"\"]/xs:attribute[@name=\""
operator|+
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\"]"
decl_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|getSchemasCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|xquery
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getSize
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
if|else if
condition|(
name|result
operator|.
name|getSize
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Found multiple types by name "
operator|+
name|qname
argument_list|,
literal|null
argument_list|)
throw|;
else|else
block|{
comment|//return result.getResource(0);
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 * @return the element by name qname or null if no such element is known. 	 */
specifier|public
name|ElementDecl
name|getElement
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|String
name|xquery
init|=
literal|"declare namespace xs=\""
operator|+
name|W3C_XML_SCHEMA
operator|+
literal|"\";"
operator|+
literal|"/xs:schema[@targetNamespace=\""
operator|+
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|+
literal|"\"]/xs:element[@name=\""
operator|+
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|+
literal|"\"]"
decl_stmt|;
name|XQueryService
name|service
init|=
operator|(
name|XQueryService
operator|)
name|getSchemasCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XQueryService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ResourceSet
name|result
init|=
name|service
operator|.
name|query
argument_list|(
name|xquery
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|getSize
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
if|else if
condition|(
name|result
operator|.
name|getSize
argument_list|()
operator|>
literal|1
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Found multiple types by name "
operator|+
name|qname
argument_list|,
literal|null
argument_list|)
throw|;
else|else
block|{
comment|//return result.getResource(0);
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 * @return the type-definition by name qname or null if no such type-definition is known. 	 */
specifier|public
name|XMLType
name|getType
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLDBException
block|{
comment|/*String xquery = "declare namespace xs=\"" + W3C_XML_SCHEMA + "\";" +  			"/xs:schema[@targetNamespace=\"" + qname.getNamespaceURI() +  			"\"]/(xs:complexType|xs:simpleType)[@name=\"" + qname.getLocalPart() + "\"]"; 		XQueryService service = (XQueryService) getSchemasCollection().getService("XQueryService", "1.0"); 		ResourceSet result = service.query(xquery); 		if (result.getSize() == 0) return null; 		else if (result.getSize()> 1) throw new XMLDBException(ErrorCodes.VENDOR_ERROR, "Found multiple types by name " + qname, null); 		else { 			//return result.getResource(0); 			return new Object();			 		}*/
name|XMLResource
name|resource
init|=
name|getSchema
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
decl_stmt|;
try|try
block|{
name|Schema
name|schema
init|=
operator|(
operator|new
name|SchemaReader
argument_list|(
operator|(
name|String
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
operator|)
operator|.
name|read
argument_list|()
decl_stmt|;
return|return
name|schema
operator|.
name|getType
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error reading schema information for target namespace: "
operator|+
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/** 	 * 	 */
specifier|public
name|boolean
name|isKnownNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|getSchema
argument_list|(
name|namespaceURI
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|registerTransientSchema
parameter_list|(
name|String
name|schema
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|getTransientSchemas
argument_list|()
operator|.
name|add
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * @return 	 */
specifier|public
name|ArrayList
name|getTransientSchemas
parameter_list|()
block|{
if|if
condition|(
name|transientSchemas
operator|==
literal|null
condition|)
block|{
name|transientSchemas
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
return|return
name|transientSchemas
return|;
block|}
block|}
end_class

end_unit

