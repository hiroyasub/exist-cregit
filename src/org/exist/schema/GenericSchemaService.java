begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   * Created on Apr 10, 2004; Sebastian Bossung, TUHH  *  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|schema
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|TreeSet
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|namespace
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilder
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|DocumentBuilderFactory
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|parsers
operator|.
name|ParserConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|tools
operator|.
name|ant
operator|.
name|filters
operator|.
name|StringInputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|impl
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|parsers
operator|.
name|DOMParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|parsers
operator|.
name|SAXParser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|parsers
operator|.
name|XML11Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|parsers
operator|.
name|XMLGrammarPreparser
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|util
operator|.
name|SymbolTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XNIException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|grammars
operator|.
name|Grammar
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|grammars
operator|.
name|XMLGrammarDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|grammars
operator|.
name|XMLGrammarPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLParserConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|SchemaTypeSystem
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlBeans
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlbeans
operator|.
name|XmlObject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|AttributeDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|ElementDecl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|Schema
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|XMLType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exolab
operator|.
name|castor
operator|.
name|xml
operator|.
name|schema
operator|.
name|reader
operator|.
name|SchemaReader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|Resource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ResourceSet
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|CollectionManagementService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XMLResource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XPathQueryService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|modules
operator|.
name|XUpdateQueryService
import|;
end_import

begin_comment
comment|/**  * @author seb  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|GenericSchemaService
implements|implements
name|SchemaService
block|{
specifier|protected
class|class
name|GenericSchemaServiceXMLGrammarPool
implements|implements
name|XMLGrammarPool
block|{
comment|//TODO better exception handling.
comment|/**      * key: String grammartype value: HashMap of Grammars (equality by      * description)      */
specifier|private
name|HashMap
name|grammarCache
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
specifier|private
name|boolean
name|locked
init|=
literal|false
decl_stmt|;
specifier|private
name|SchemaService
name|owner
init|=
literal|null
decl_stmt|;
specifier|private
name|XMLGrammarPreparser
name|preparser
init|=
literal|null
decl_stmt|;
name|GenericSchemaServiceXMLGrammarPool
parameter_list|(
name|SchemaService
name|service
parameter_list|)
block|{
name|setOwner
argument_list|(
name|service
argument_list|)
expr_stmt|;
block|}
specifier|private
name|HashMap
name|getCachedGrammars
parameter_list|(
name|String
name|grammarType
parameter_list|)
block|{
name|HashMap
name|res
init|=
operator|(
name|HashMap
operator|)
name|getGrammarCache
argument_list|()
operator|.
name|get
argument_list|(
name|grammarType
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|null
condition|)
block|{
name|res
operator|=
operator|new
name|HashMap
argument_list|()
expr_stmt|;
name|getGrammarCache
argument_list|()
operator|.
name|put
argument_list|(
name|grammarType
argument_list|,
name|res
argument_list|)
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
specifier|private
name|void
name|cacheGrammar
parameter_list|(
name|String
name|grammarType
parameter_list|,
name|Grammar
name|grammar
parameter_list|)
block|{
name|getCachedGrammars
argument_list|(
name|grammarType
argument_list|)
operator|.
name|put
argument_list|(
name|grammar
operator|.
name|getGrammarDescription
argument_list|()
argument_list|,
name|grammar
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Grammar
index|[]
name|retrieveInitialGrammarSet
parameter_list|(
name|String
name|grammarType
parameter_list|)
block|{
name|HashMap
name|grammars
init|=
name|getCachedGrammars
argument_list|(
name|grammarType
argument_list|)
decl_stmt|;
return|return
name|convertToArray
argument_list|(
name|grammars
argument_list|)
return|;
block|}
specifier|protected
name|Grammar
index|[]
name|convertToArray
parameter_list|(
name|HashMap
name|grammars
parameter_list|)
block|{
comment|//TODO the result of this could be cached by grammarType
name|Grammar
index|[]
name|arr
init|=
operator|new
name|Grammar
index|[
name|grammars
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|Iterator
name|iter
init|=
name|grammars
operator|.
name|values
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|arr
index|[
name|i
index|]
operator|=
operator|(
name|Grammar
operator|)
name|iter
operator|.
name|next
argument_list|()
expr_stmt|;
block|}
return|return
name|arr
return|;
block|}
specifier|public
name|void
name|cacheGrammars
parameter_list|(
name|String
name|grammarType
parameter_list|,
name|Grammar
index|[]
name|grammars
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isLocked
argument_list|()
condition|)
block|{
name|HashMap
name|grammarMap
init|=
name|getCachedGrammars
argument_list|(
name|grammarType
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|grammars
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|grammarMap
operator|.
name|put
argument_list|(
name|grammars
index|[
name|i
index|]
operator|.
name|getGrammarDescription
argument_list|()
argument_list|,
name|grammars
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * called for grammars that are not yet in the pool      */
specifier|public
name|Grammar
name|retrieveGrammar
parameter_list|(
name|XMLGrammarDescription
name|desc
parameter_list|)
block|{
name|XMLResource
name|schemaResource
init|=
literal|null
decl_stmt|;
name|String
name|namespace
init|=
name|desc
operator|.
name|getNamespace
argument_list|()
decl_stmt|;
try|try
block|{
name|schemaResource
operator|=
name|getOwner
argument_list|()
operator|.
name|getSchema
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|e
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|" occured while retrieving Grammar: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|Grammar
name|g
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|schemaResource
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|XMLInputSource
name|schema
init|=
operator|new
name|XMLInputSource
argument_list|(
literal|null
argument_list|,
name|namespace
argument_list|,
name|namespace
argument_list|,
operator|new
name|StringReader
argument_list|(
operator|(
name|String
operator|)
name|schemaResource
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|g
operator|=
name|preparser
operator|.
name|preparseGrammar
argument_list|(
name|XMLGrammarDescription
operator|.
name|XML_SCHEMA
argument_list|,
name|schema
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XNIException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"XNIException loading schema: "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"XMLDBException loading schema: "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e1
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"IOException loading schema: "
operator|+
name|e1
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|g
return|;
block|}
comment|/**      * causes this pool not to cache grammars when cacheGrammars is invoked      *        */
specifier|public
name|void
name|lockPool
parameter_list|()
block|{
name|setLocked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|unlockPool
parameter_list|()
block|{
name|setLocked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|clear
parameter_list|()
block|{
name|getGrammarCache
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
comment|/**      * @return Returns the locked.      */
specifier|protected
name|boolean
name|isLocked
parameter_list|()
block|{
return|return
name|locked
return|;
block|}
comment|/**      * Causes this pool not to cache grammars.      *       * @param locked      *                 The locked to set.      */
specifier|protected
name|void
name|setLocked
parameter_list|(
name|boolean
name|locked
parameter_list|)
block|{
name|this
operator|.
name|locked
operator|=
name|locked
expr_stmt|;
block|}
comment|/**      * @return Returns the grammarCache.      */
specifier|protected
name|HashMap
name|getGrammarCache
parameter_list|()
block|{
return|return
name|grammarCache
return|;
block|}
comment|/**      * @param grammarCache      *                 The grammarCache to set.      */
specifier|protected
name|void
name|setGrammarCache
parameter_list|(
name|HashMap
name|grammarCache
parameter_list|)
block|{
name|this
operator|.
name|grammarCache
operator|=
name|grammarCache
expr_stmt|;
block|}
comment|/**      * @return Returns the owner.      */
specifier|protected
name|SchemaService
name|getOwner
parameter_list|()
block|{
return|return
name|owner
return|;
block|}
comment|/**      * @param owner      *                 The owner to set.      */
specifier|protected
name|void
name|setOwner
parameter_list|(
name|SchemaService
name|owner
parameter_list|)
block|{
name|this
operator|.
name|owner
operator|=
name|owner
expr_stmt|;
block|}
comment|// sb: as per a Xerces example:
specifier|private
specifier|static
specifier|final
name|int
name|BIG_PRIME
init|=
literal|2039
decl_stmt|;
comment|/** Property identifier: grammar pool. */
specifier|public
specifier|static
specifier|final
name|String
name|GRAMMAR_POOL
init|=
name|Constants
operator|.
name|XERCES_PROPERTY_PREFIX
operator|+
name|Constants
operator|.
name|XMLGRAMMAR_POOL_PROPERTY
decl_stmt|;
comment|/** Namespaces feature id (http://xml.org/sax/features/namespaces). */
specifier|protected
specifier|static
specifier|final
name|String
name|NAMESPACES_FEATURE_ID
init|=
literal|"http://xml.org/sax/features/namespaces"
decl_stmt|;
comment|/** Validation feature id (http://xml.org/sax/features/validation). */
specifier|protected
specifier|static
specifier|final
name|String
name|VALIDATION_FEATURE_ID
init|=
literal|"http://xml.org/sax/features/validation"
decl_stmt|;
comment|/**      * Schema validation feature id      * (http://apache.org/xml/features/validation/schema).      */
specifier|protected
specifier|static
specifier|final
name|String
name|SCHEMA_VALIDATION_FEATURE_ID
init|=
literal|"http://apache.org/xml/features/validation/schema"
decl_stmt|;
comment|/**      * Schema full checking feature id      * (http://apache.org/xml/features/validation/schema-full-checking).      */
specifier|protected
specifier|static
specifier|final
name|String
name|SCHEMA_FULL_CHECKING_FEATURE_ID
init|=
literal|"http://apache.org/xml/features/validation/schema-full-checking"
decl_stmt|;
comment|/**      * You can get a grammar by:<code>      * Grammar g = preparser.preparseGrammar(XMLGrammarDescription.XML_SCHEMA, stringToXIS((String)schemas.elementAt(i)));      *</code>      *       * @return Returns the preparser.      */
specifier|protected
name|XMLGrammarPreparser
name|getPreparser
parameter_list|()
block|{
if|if
condition|(
name|preparser
operator|==
literal|null
condition|)
block|{
comment|// The features here are like in the Xerces example XMLGrammarBuilder.
name|SymbolTable
name|sym
init|=
operator|new
name|SymbolTable
argument_list|(
name|BIG_PRIME
argument_list|)
decl_stmt|;
name|preparser
operator|=
operator|new
name|XMLGrammarPreparser
argument_list|(
name|sym
argument_list|)
expr_stmt|;
comment|// to also handle DTDs:
comment|// preparser.registerPreparser(XMLGrammarDescription.XML_DTD, null);
name|preparser
operator|.
name|registerPreparser
argument_list|(
name|XMLGrammarDescription
operator|.
name|XML_SCHEMA
argument_list|,
literal|null
argument_list|)
expr_stmt|;
name|preparser
operator|.
name|setProperty
argument_list|(
name|GRAMMAR_POOL
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|preparser
operator|.
name|setFeature
argument_list|(
name|NAMESPACES_FEATURE_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|preparser
operator|.
name|setFeature
argument_list|(
name|VALIDATION_FEATURE_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// note we can set schema features just in case...
name|preparser
operator|.
name|setFeature
argument_list|(
name|SCHEMA_VALIDATION_FEATURE_ID
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//TODO what does this mean? Figured this out from an example
name|preparser
operator|.
name|setFeature
argument_list|(
name|SCHEMA_FULL_CHECKING_FEATURE_ID
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|preparser
return|;
block|}
comment|/**      * @param preparser      *                 The preparser to set.      */
specifier|protected
name|void
name|setPreparser
parameter_list|(
name|XMLGrammarPreparser
name|preparser
parameter_list|)
block|{
name|this
operator|.
name|preparser
operator|=
name|preparser
expr_stmt|;
block|}
block|}
specifier|private
class|class
name|ValidationErrorHandler
implements|implements
name|ErrorHandler
block|{
specifier|private
name|ArrayList
name|warnings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
name|errors
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|addError
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|addError
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|addWarning
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return      */
specifier|public
name|ArrayList
name|getErrors
parameter_list|()
block|{
return|return
name|errors
return|;
block|}
specifier|private
name|void
name|addError
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|getErrors
argument_list|()
operator|.
name|add
argument_list|(
literal|"Error: ("
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|", "
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      * @return      */
specifier|public
name|ArrayList
name|getWarnings
parameter_list|()
block|{
return|return
name|warnings
return|;
block|}
specifier|private
name|void
name|addWarning
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|getWarnings
argument_list|()
operator|.
name|add
argument_list|(
literal|"Warning: ("
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|", "
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|public
name|XMLDBException
name|toException
parameter_list|()
block|{
name|String
name|errors
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getErrors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|errors
operator|+=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
return|return
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error validating: \n"
operator|+
name|errors
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
specifier|protected
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|GenericSchemaService
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|INDEX_COLLECTION_NAME
init|=
literal|"/db/system/schema/"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|INDEX_RESOURCE_NAME
init|=
literal|".index"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXP_SCHEMA_LANGUAGE
init|=
literal|"http://java.sun.com/xml/jaxp/properties/schemaLanguage"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|W3C_XML_SCHEMA
init|=
literal|"http://www.w3.org/2001/XMLSchema"
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|String
name|JAXP_SCHEMA_SOURCE
init|=
literal|"http://java.sun.com/xml/jaxp/properties/schemaSource"
decl_stmt|;
specifier|private
name|Collection
name|parentCollection
decl_stmt|;
specifier|private
name|Collection
name|schemasCollection
decl_stmt|;
specifier|private
name|ArrayList
name|transientSchemas
init|=
literal|null
decl_stmt|;
specifier|public
name|GenericSchemaService
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|setParentCollection
argument_list|(
name|collection
argument_list|)
expr_stmt|;
block|}
specifier|public
name|String
name|getName
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|"SchemaService"
return|;
block|}
specifier|public
name|String
name|getVersion
parameter_list|()
throws|throws
name|XMLDBException
block|{
return|return
literal|"1.0"
return|;
block|}
specifier|public
name|void
name|setCollection
parameter_list|(
name|Collection
name|arg0
parameter_list|)
throws|throws
name|XMLDBException
block|{
block|}
specifier|public
name|String
name|getProperty
parameter_list|(
name|String
name|arg0
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
literal|null
return|;
block|}
specifier|public
name|void
name|setProperty
parameter_list|(
name|String
name|arg0
parameter_list|,
name|String
name|arg1
parameter_list|)
throws|throws
name|XMLDBException
block|{
block|}
comment|/**    * Test whether the index resource ".index" already exists. If not, creates it    * and fills it with skeleton contents. Returns the (possible newly created)    * resource.    *     * @return @throws    *              XMLDBException    */
specifier|protected
name|XMLResource
name|testAndCreateIndexResource
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|index
init|=
literal|null
decl_stmt|;
try|try
block|{
name|index
operator|=
operator|(
name|XMLResource
operator|)
name|getSchemasCollection
argument_list|()
operator|.
name|getResource
argument_list|(
name|INDEX_RESOURCE_NAME
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
block|}
if|if
condition|(
name|index
operator|==
literal|null
condition|)
block|{
name|index
operator|=
operator|(
name|XMLResource
operator|)
name|schemasCollection
operator|.
name|createResource
argument_list|(
name|INDEX_RESOURCE_NAME
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|index
operator|.
name|setContent
argument_list|(
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\"?><schema-index/>"
argument_list|)
expr_stmt|;
name|getSchemasCollection
argument_list|()
operator|.
name|storeResource
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
return|return
name|index
return|;
block|}
specifier|protected
name|Collection
name|getSchemasCollection
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|schemasCollection
operator|==
literal|null
condition|)
block|{
name|Collection
name|parent
init|=
name|getParentCollection
argument_list|()
decl_stmt|;
while|while
condition|(
name|parent
operator|.
name|getParentCollection
argument_list|()
operator|!=
literal|null
condition|)
name|parent
operator|=
name|parent
operator|.
name|getParentCollection
argument_list|()
expr_stmt|;
name|schemasCollection
operator|=
name|parent
operator|.
name|getChildCollection
argument_list|(
literal|"system"
argument_list|)
operator|.
name|getChildCollection
argument_list|(
literal|"schema"
argument_list|)
expr_stmt|;
if|if
condition|(
name|schemasCollection
operator|==
literal|null
condition|)
block|{
name|CollectionManagementService
name|cms
init|=
operator|(
name|CollectionManagementService
operator|)
name|getParentCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"CollectionManagementService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cms
operator|!=
literal|null
condition|)
block|{
name|cms
operator|.
name|setCollection
argument_list|(
name|parent
operator|.
name|getChildCollection
argument_list|(
literal|"system"
argument_list|)
argument_list|)
expr_stmt|;
name|schemasCollection
operator|=
name|cms
operator|.
name|createCollection
argument_list|(
literal|"schema"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Could not get CollectionManagementService."
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
block|}
return|return
name|schemasCollection
return|;
block|}
comment|/**    * Finds the target namespace in the given schema.    *     * @param schemaContents    * @return @throws    *              XMLDBException    */
specifier|protected
name|String
name|findTargetNamespace
parameter_list|(
name|String
name|schemaContents
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|String
name|targetNamespace
init|=
literal|null
decl_stmt|;
name|DOMParser
name|parser
init|=
operator|new
name|DOMParser
argument_list|()
decl_stmt|;
try|try
block|{
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
name|schemaContents
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|Node
name|rootNode
init|=
name|parser
operator|.
name|getDocument
argument_list|()
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Node
name|targetNamespaceAttr
init|=
name|rootNode
operator|.
name|getAttributes
argument_list|()
operator|.
name|getNamedItem
argument_list|(
literal|"targetNamespace"
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetNamespaceAttr
operator|!=
literal|null
condition|)
name|targetNamespace
operator|=
name|targetNamespaceAttr
operator|.
name|getNodeValue
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error parsing schema: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error parsing schema: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
return|return
name|targetNamespace
return|;
block|}
comment|/**    * Add a schema to the schema store. The schema must have a target namespace    * because it can otherwise not be indexed.    */
specifier|public
name|void
name|putSchema
parameter_list|(
name|String
name|schemaContents
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Collection
name|schemasCollection
init|=
name|getSchemasCollection
argument_list|()
decl_stmt|;
name|String
name|targetNamespace
init|=
name|findTargetNamespace
argument_list|(
name|schemaContents
argument_list|)
decl_stmt|;
name|String
name|filename
init|=
name|getSchemaFilename
argument_list|(
name|targetNamespace
argument_list|)
decl_stmt|;
name|Resource
name|schemaResource
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|filename
operator|==
literal|null
condition|)
block|{
name|filename
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|System
operator|.
name|currentTimeMillis
argument_list|()
argument_list|)
expr_stmt|;
name|schemaResource
operator|=
name|schemasCollection
operator|.
name|createResource
argument_list|(
name|filename
argument_list|,
literal|"XMLResource"
argument_list|)
expr_stmt|;
name|addToIndex
argument_list|(
name|targetNamespace
argument_list|,
name|filename
argument_list|)
expr_stmt|;
block|}
else|else
name|schemaResource
operator|=
operator|(
name|XMLResource
operator|)
name|schemasCollection
operator|.
name|getResource
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|schemaResource
operator|.
name|setContent
argument_list|(
name|schemaContents
argument_list|)
expr_stmt|;
name|schemasCollection
operator|.
name|storeResource
argument_list|(
name|schemaResource
argument_list|)
expr_stmt|;
name|schemasCollection
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|/**    * Retrieves the schema as an XML resources.    *     * @return the schema with targetNamespace or null if that schema is not    *              known.    */
specifier|public
name|XMLResource
name|getSchema
parameter_list|(
name|String
name|targetNamespace
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|String
name|filename
init|=
name|getSchemaFilename
argument_list|(
name|targetNamespace
argument_list|)
decl_stmt|;
if|if
condition|(
name|filename
operator|!=
literal|null
condition|)
return|return
operator|(
name|XMLResource
operator|)
name|getSchemasCollection
argument_list|()
operator|.
name|getResource
argument_list|(
name|filename
argument_list|)
return|;
else|else
return|return
literal|null
return|;
block|}
comment|/**    * Validates the passed contents. Schemas are automatically obtained from the    * schema store. You can add transient ("temporary") schemas with the    *<code>registerTransientSchema</code> method.    *     * @throws XMLDBException    *                 if a database error occurs or the contents contains validation    *                 errors (these are wrapped in XMLDBExceptions).    */
specifier|public
name|boolean
name|validateContents
parameter_list|(
name|String
name|contents
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|DocumentBuilderFactory
name|factory
init|=
name|DocumentBuilderFactory
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|factory
operator|.
name|setNamespaceAware
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|DocumentBuilder
name|docBuilder
init|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
decl_stmt|;
name|ValidationErrorHandler
name|errorHandler
init|=
operator|new
name|ValidationErrorHandler
argument_list|()
decl_stmt|;
name|docBuilder
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
name|Document
name|document
init|=
name|docBuilder
operator|.
name|parse
argument_list|(
operator|new
name|StringInputStream
argument_list|(
name|contents
argument_list|)
argument_list|)
decl_stmt|;
name|Set
name|namespaces
init|=
operator|new
name|TreeSet
argument_list|()
decl_stmt|;
name|findNamespaces
argument_list|(
name|document
operator|.
name|getDocumentElement
argument_list|()
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|SchemaService
name|schemaService
init|=
operator|(
name|SchemaService
operator|)
name|getParentCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"SchemaService"
argument_list|,
literal|"1.0"
argument_list|)
decl_stmt|;
name|ArrayList
name|schemas
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Getting schemas for validation ("
operator|+
name|namespaces
operator|.
name|size
argument_list|()
operator|+
literal|"): "
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|namespaces
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|String
name|namespaceURI
init|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|XMLResource
name|resource
init|=
name|schemaService
operator|.
name|getSchema
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|schemas
operator|.
name|add
argument_list|(
operator|(
name|String
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|info
argument_list|(
name|namespaceURI
argument_list|)
expr_stmt|;
block|}
else|else
name|LOG
operator|.
name|warn
argument_list|(
literal|"No schema for target namespace "
operator|+
name|namespaceURI
operator|+
literal|" found."
argument_list|)
expr_stmt|;
block|}
name|factory
operator|.
name|setValidating
argument_list|(
literal|true
argument_list|)
expr_stmt|;
try|try
block|{
name|factory
operator|.
name|setAttribute
argument_list|(
name|JAXP_SCHEMA_LANGUAGE
argument_list|,
name|W3C_XML_SCHEMA
argument_list|)
expr_stmt|;
name|InputSource
index|[]
name|schemaSources
init|=
operator|new
name|InputSource
index|[
name|schemas
operator|.
name|size
argument_list|()
operator|+
name|getTransientSchemas
argument_list|()
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|schemas
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|schemaSources
index|[
name|i
index|]
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
operator|(
name|String
operator|)
name|schemas
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|getTransientSchemas
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
name|i
operator|++
control|)
name|schemaSources
index|[
name|i
index|]
operator|=
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
operator|(
name|String
operator|)
name|iter
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|factory
operator|.
name|setAttribute
argument_list|(
name|JAXP_SCHEMA_SOURCE
argument_list|,
name|schemaSources
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Parser does not support JAXP 1.2"
argument_list|,
name|e
argument_list|)
throw|;
block|}
name|docBuilder
operator|=
name|factory
operator|.
name|newDocumentBuilder
argument_list|()
expr_stmt|;
name|docBuilder
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
name|docBuilder
operator|.
name|parse
argument_list|(
operator|new
name|StringInputStream
argument_list|(
name|contents
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorHandler
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
throw|throw
name|errorHandler
operator|.
name|toException
argument_list|()
throw|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|ParserConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Parser config error validating contents."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"SAX error reading contents."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"IO error reading contents"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
specifier|public
name|boolean
name|validateContentsSinglePass
parameter_list|(
name|String
name|contents
parameter_list|)
throws|throws
name|XMLDBException
block|{
try|try
block|{
name|XMLParserConfiguration
name|config
init|=
operator|new
name|XML11Configuration
argument_list|()
decl_stmt|;
name|GenericSchemaServiceXMLGrammarPool
name|grammarPool
init|=
operator|new
name|GenericSchemaServiceXMLGrammarPool
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|config
operator|.
name|setProperty
argument_list|(
literal|"http://apache.org/xml/properties/internal/grammar-pool"
argument_list|,
name|grammarPool
argument_list|)
expr_stmt|;
name|SAXParser
name|parser
init|=
operator|new
name|SAXParser
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|ValidationErrorHandler
name|errorHandler
init|=
operator|new
name|ValidationErrorHandler
argument_list|()
decl_stmt|;
name|parser
operator|.
name|setErrorHandler
argument_list|(
name|errorHandler
argument_list|)
expr_stmt|;
name|parser
operator|.
name|parse
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringInputStream
argument_list|(
name|contents
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorHandler
operator|.
name|getErrors
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
throw|throw
name|errorHandler
operator|.
name|toException
argument_list|()
throw|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"SAX error reading contents."
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"IO error reading contents"
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    * Validates a resource given its id. Uses<code>validateContents</code>.    */
specifier|public
name|boolean
name|validateResource
parameter_list|(
name|String
name|id
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|Resource
name|doc
init|=
name|getParentCollection
argument_list|()
operator|.
name|getResource
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
literal|"XMLResource"
operator|.
name|equals
argument_list|(
name|doc
operator|.
name|getResourceType
argument_list|()
argument_list|)
operator|)
operator|||
operator|(
literal|"XMLView"
operator|.
name|equals
argument_list|(
name|doc
operator|.
name|getResourceType
argument_list|()
argument_list|)
operator|)
condition|)
block|{
name|XMLResource
name|xmlResource
init|=
operator|(
name|XMLResource
operator|)
name|doc
decl_stmt|;
name|Node
name|root
init|=
name|xmlResource
operator|.
name|getContentAsDOM
argument_list|()
decl_stmt|;
try|try
block|{
return|return
name|validateContents
argument_list|(
operator|(
name|String
operator|)
name|xmlResource
operator|.
name|getContent
argument_list|()
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|XMLDBException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error validating resource "
operator|+
name|id
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|WRONG_CONTENT_TYPE
argument_list|,
literal|"Can only validate XML documents, but "
operator|+
name|id
operator|+
literal|" is a "
operator|+
name|doc
operator|.
name|getResourceType
argument_list|()
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
comment|/**    * Searches an instance document for namespaces. All discovered namespaces are    * added to the<code>namespaces</code> Set.    *     * @param root    * @return    */
specifier|private
name|void
name|findNamespaces
parameter_list|(
name|Node
name|root
parameter_list|,
name|Set
name|namespaces
parameter_list|)
block|{
if|if
condition|(
name|root
operator|!=
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"locating namespace in "
operator|+
name|root
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|String
name|namespace
init|=
name|root
operator|.
name|getNamespaceURI
argument_list|()
decl_stmt|;
if|if
condition|(
name|namespace
operator|!=
literal|null
operator|&&
operator|!
literal|""
operator|.
name|equals
argument_list|(
name|namespace
argument_list|)
condition|)
name|namespaces
operator|.
name|add
argument_list|(
name|namespace
argument_list|)
expr_stmt|;
name|findNamespaces
argument_list|(
name|root
operator|.
name|getFirstChild
argument_list|()
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
name|findNamespaces
argument_list|(
name|root
operator|.
name|getNextSibling
argument_list|()
argument_list|,
name|namespaces
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|Collection
name|getParentCollection
parameter_list|()
block|{
return|return
name|parentCollection
return|;
block|}
specifier|public
name|void
name|setParentCollection
parameter_list|(
name|Collection
name|collection
parameter_list|)
block|{
name|parentCollection
operator|=
name|collection
expr_stmt|;
block|}
comment|/**    * @return the attribute by name qname or null if no such attribute is known.    */
specifier|public
name|AttributeDecl
name|getAttribute
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|getCastorSchema
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|getAttribute
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * @return the element by name qname or null if no such element is known.    */
specifier|public
name|ElementDecl
name|getElement
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|getCastorSchema
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|getElementDecl
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
comment|/**    * Query<code>collection("/db/system/schema"){YOUR_XPATH}/local-name()</code>    * will be executed. It must return "element", which means that your xpath    * must select an element declaration.    *     * @param xpath    * @throws XMLDBException    */
specifier|public
name|void
name|getElement
parameter_list|(
name|String
name|xpath
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XPathQueryService
name|qs
init|=
name|getXQueryService
argument_list|()
decl_stmt|;
name|ResourceSet
name|results
init|=
name|qs
operator|.
name|query
argument_list|(
literal|"declare default element namespace 'http://www.w3.org/2001/XMLSchema'; "
operator|+
literal|"document-uri(collection('/db/system/schema')"
operator|+
name|xpath
operator|+
literal|")"
argument_list|)
decl_stmt|;
if|if
condition|(
name|results
operator|.
name|getSize
argument_list|()
operator|==
literal|1
condition|)
block|{
name|Resource
name|resource
init|=
name|results
operator|.
name|getIterator
argument_list|()
operator|.
name|nextResource
argument_list|()
decl_stmt|;
name|String
name|documentId
init|=
name|resource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|documentId
operator|=
name|documentId
operator|.
name|substring
argument_list|(
name|INDEX_COLLECTION_NAME
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"Document id is "
operator|+
name|documentId
argument_list|)
expr_stmt|;
name|XMLResource
name|schemaResource
init|=
operator|(
name|XMLResource
operator|)
name|getSchemasCollection
argument_list|()
operator|.
name|getResource
argument_list|(
name|documentId
argument_list|)
decl_stmt|;
name|String
name|schema
init|=
name|schemaResource
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
try|try
block|{
name|SchemaTypeSystem
name|sts
init|=
name|XmlBeans
operator|.
name|compileXsd
argument_list|(
operator|new
name|XmlObject
index|[]
block|{
name|XmlObject
operator|.
name|Factory
operator|.
name|parse
argument_list|(
operator|new
name|StringInputStream
argument_list|(
name|schema
argument_list|)
argument_list|)
block|}
argument_list|,
name|XmlBeans
operator|.
name|getBuiltinTypeSystem
argument_list|()
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|String
name|s
init|=
name|sts
operator|.
name|compileQuery
argument_list|(
name|xpath
argument_list|,
literal|null
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XmlException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Cannot read schema. "
argument_list|,
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Cannot read schema. "
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
else|else
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Invalid number of results ("
operator|+
name|results
operator|.
name|getSize
argument_list|()
operator|+
literal|") while querying for element, expecting exactly 1."
argument_list|,
literal|null
argument_list|)
throw|;
block|}
block|}
comment|/**    * @return the type-definition by name qname or null if no such    *              type-definition is known.    */
specifier|public
name|XMLType
name|getType
parameter_list|(
name|QName
name|qname
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|getCastorSchema
argument_list|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
operator|.
name|getType
argument_list|(
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|Schema
name|getCastorSchema
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|XMLResource
name|resource
init|=
name|getSchema
argument_list|(
name|namespaceURI
argument_list|)
decl_stmt|;
try|try
block|{
comment|//TODO does the next line have to be this complicated?
name|Schema
name|schema
init|=
operator|(
operator|new
name|SchemaReader
argument_list|(
operator|new
name|InputSource
argument_list|(
operator|new
name|StringReader
argument_list|(
operator|(
name|String
operator|)
name|resource
operator|.
name|getContent
argument_list|()
argument_list|)
argument_list|)
argument_list|)
operator|)
operator|.
name|read
argument_list|()
decl_stmt|;
return|return
name|schema
return|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error reading schema information for target namespace: "
operator|+
name|namespaceURI
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**    *      */
specifier|public
name|boolean
name|isKnownNamespace
parameter_list|(
name|String
name|namespaceURI
parameter_list|)
throws|throws
name|XMLDBException
block|{
return|return
name|getSchema
argument_list|(
name|namespaceURI
argument_list|)
operator|!=
literal|null
return|;
block|}
specifier|public
name|void
name|registerTransientSchema
parameter_list|(
name|String
name|schema
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|getTransientSchemas
argument_list|()
operator|.
name|add
argument_list|(
name|schema
argument_list|)
expr_stmt|;
block|}
comment|/**    * @return    */
specifier|public
name|ArrayList
name|getTransientSchemas
parameter_list|()
block|{
if|if
condition|(
name|transientSchemas
operator|==
literal|null
condition|)
block|{
name|transientSchemas
operator|=
operator|new
name|ArrayList
argument_list|()
expr_stmt|;
block|}
return|return
name|transientSchemas
return|;
block|}
name|XUpdateQueryService
name|updateService
init|=
literal|null
decl_stmt|;
name|XPathQueryService
name|queryService
init|=
literal|null
decl_stmt|;
specifier|protected
name|String
name|getDocumentExpression
parameter_list|()
block|{
return|return
literal|"document('"
operator|+
name|INDEX_COLLECTION_NAME
operator|+
name|INDEX_RESOURCE_NAME
operator|+
literal|"')"
return|;
block|}
specifier|protected
name|String
name|getRetrieveIndexRecordQuery
parameter_list|(
name|String
name|targetNamespace
parameter_list|)
block|{
return|return
literal|"/schema-index/schema[@targetNamespace=\""
operator|+
name|targetNamespace
operator|+
literal|"\"]"
return|;
block|}
specifier|protected
name|String
name|getAppendSchemaXUpdate
parameter_list|(
name|String
name|targetNamespace
parameter_list|,
name|String
name|resourceName
parameter_list|)
block|{
return|return
literal|"<xupdate:modifications version=\"1.0\" xmlns:xupdate=\"http://www.xmldb.org/xupdate\">"
operator|+
literal|"<xupdate:append select=\""
operator|+
name|getDocumentExpression
argument_list|()
operator|+
literal|"/schema-index\">"
operator|+
literal|"<xupdate:element name=\"schema\">"
operator|+
literal|"<xupdate:attribute name=\"targetNamespace\">"
operator|+
name|targetNamespace
operator|+
literal|"</xupdate:attribute>"
operator|+
literal|"<xupdate:attribute name=\"resourceName\">"
operator|+
name|resourceName
operator|+
literal|"</xupdate:attribute>"
operator|+
literal|"</xupdate:element>"
operator|+
literal|"</xupdate:append>"
operator|+
literal|"</xupdate:modifications>"
return|;
block|}
comment|/**    * Retrieve the filename of the resource that stores the schema for    *<code>targetNamespace</code>    *     * @param targetNamespace    * @return the resource name or null if the schema is not in the index.    * @throws XMLDBException    */
specifier|protected
name|String
name|getSchemaFilename
parameter_list|(
name|String
name|targetNamespace
parameter_list|)
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|targetNamespace
operator|==
literal|null
condition|)
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"null is not a valid namespace!"
argument_list|)
throw|;
comment|// make sure, the index resource exists:
name|testAndCreateIndexResource
argument_list|()
expr_stmt|;
comment|// try to find the name of the resource that stores the respective schema:
name|String
name|query
init|=
name|getRetrieveIndexRecordQuery
argument_list|(
name|targetNamespace
argument_list|)
operator|+
literal|"/@resourceName"
decl_stmt|;
name|ResourceSet
name|set
init|=
name|getXQueryService
argument_list|()
operator|.
name|queryResource
argument_list|(
name|INDEX_RESOURCE_NAME
argument_list|,
name|query
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|getSize
argument_list|()
operator|==
literal|1
condition|)
block|{
name|ResourceIterator
name|iterator
init|=
name|set
operator|.
name|getIterator
argument_list|()
decl_stmt|;
return|return
name|iterator
operator|.
name|nextResource
argument_list|()
operator|.
name|getContent
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
if|else if
condition|(
name|set
operator|.
name|getSize
argument_list|()
operator|==
literal|0
condition|)
block|{
return|return
literal|null
return|;
block|}
else|else
throw|throw
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Multiple index entries for one targetNamespace in the schema index. The index is corrupt."
argument_list|)
throw|;
block|}
comment|/**    * Insert a new element in the schema-index. This method is called only if a    * new schema with a previously unknown target namespace is indexed. Known    * schemas are indexed by updating the existent resource.    *     * @param targetNamespace    *                 of the schema    * @param resourceName    *                 the name of the resource that stores the schema    * @throws XMLDBException    *      */
specifier|protected
name|void
name|addToIndex
parameter_list|(
name|String
name|targetNamespace
parameter_list|,
name|String
name|resourceName
parameter_list|)
throws|throws
name|XMLDBException
block|{
name|getXUpdateService
argument_list|()
operator|.
name|update
argument_list|(
name|getAppendSchemaXUpdate
argument_list|(
name|targetNamespace
argument_list|,
name|resourceName
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|XUpdateQueryService
name|getXUpdateService
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|updateService
operator|==
literal|null
condition|)
name|updateService
operator|=
operator|(
name|XUpdateQueryService
operator|)
name|getSchemasCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XUpdateQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
return|return
name|updateService
return|;
block|}
specifier|protected
name|XPathQueryService
name|getXQueryService
parameter_list|()
throws|throws
name|XMLDBException
block|{
if|if
condition|(
name|queryService
operator|==
literal|null
condition|)
name|queryService
operator|=
operator|(
name|XPathQueryService
operator|)
name|getSchemasCollection
argument_list|()
operator|.
name|getService
argument_list|(
literal|"XPathQueryService"
argument_list|,
literal|"1.0"
argument_list|)
expr_stmt|;
return|return
name|queryService
return|;
block|}
specifier|private
name|void
name|deleteIndex
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|Resource
name|index
init|=
name|getSchemasCollection
argument_list|()
operator|.
name|getResource
argument_list|(
name|INDEX_RESOURCE_NAME
argument_list|)
decl_stmt|;
name|getSchemasCollection
argument_list|()
operator|.
name|removeResource
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|rebuildIndex
parameter_list|()
throws|throws
name|XMLDBException
block|{
name|deleteIndex
argument_list|()
expr_stmt|;
name|Collection
name|collection
init|=
name|getSchemasCollection
argument_list|()
decl_stmt|;
name|String
index|[]
name|resourceNames
init|=
name|collection
operator|.
name|listResources
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resourceNames
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|XMLResource
name|schema
init|=
operator|(
name|XMLResource
operator|)
name|collection
operator|.
name|getResource
argument_list|(
operator|(
name|resourceNames
index|[
name|i
index|]
operator|)
argument_list|)
decl_stmt|;
name|String
name|targetNamespace
init|=
name|findTargetNamespace
argument_list|(
operator|(
name|String
operator|)
name|schema
operator|.
name|getContent
argument_list|()
argument_list|)
decl_stmt|;
name|addToIndex
argument_list|(
name|targetNamespace
argument_list|,
name|resourceNames
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

