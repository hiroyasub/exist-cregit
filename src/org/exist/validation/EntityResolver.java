begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|internal
operator|.
name|DatabaseResources
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLEntityResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|parser
operator|.
name|XMLInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XMLResourceIdentifier
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xerces
operator|.
name|xni
operator|.
name|XNIException
import|;
end_import

begin_comment
comment|/**  *  Specific grammar resolver for eXist. Currently supports XSD and DTD.  *  * XML Schemas and DTD grammars are stored in collections of the database:  *  /db/system/grammar/xsd  *  /db/system/grammar/dtd  *  * The XSD's are resolved automatically using xQuery. For DTD's (hey this is  * ancient stuff, these are no xml documents) separate data management is  * required. The details are stored in  *  *  /db/system/grammar/dtd/catalog/xml  *  * Extra bonus: an xQuery generating a catalogus with DTD's and XSD's  *  *  /db/system/grammar/xq/catalog.xq  *  * RelaxNG support can be added later.  *  * @author dizzzz  * @see org.apache.xerces.xni.parser.XMLEntityResolver  */
end_comment

begin_class
specifier|public
class|class
name|EntityResolver
implements|implements
name|XMLEntityResolver
block|{
comment|/* Local logger  */
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|EntityResolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
init|=
literal|null
decl_stmt|;
specifier|private
name|DatabaseResources
name|databaseResources
init|=
literal|null
decl_stmt|;
comment|/**      *  Initialize EntityResolver.      * @param pool  BrokerPool      */
specifier|public
name|EntityResolver
parameter_list|(
name|DatabaseResources
name|resources
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Initializing EntityResolver"
argument_list|)
expr_stmt|;
name|this
operator|.
name|databaseResources
operator|=
name|resources
expr_stmt|;
block|}
comment|/**      *  Resolve GRAMMAR specified with this GRAMMAR id      *      * @param  xrid             Grammar Identifier.      * @throws XNIException     Xerces exception, can be anything      * @throws IOException      Can be anything      * @return Inputsource containing grammar.      */
specifier|public
name|XMLInputSource
name|resolveEntity
parameter_list|(
name|XMLResourceIdentifier
name|xrid
parameter_list|)
throws|throws
name|XNIException
throws|,
name|IOException
block|{
name|XMLInputSource
name|xis
init|=
literal|null
decl_stmt|;
name|String
name|resourcePath
init|=
literal|null
decl_stmt|;
name|Reader
name|rd
init|=
literal|null
decl_stmt|;
name|int
name|type
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|xrid
operator|.
name|getNamespace
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Resolving namespace '"
operator|+
name|xrid
operator|.
name|getNamespace
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|type
operator|=
name|DatabaseResources
operator|.
name|GRAMMAR_XSD
expr_stmt|;
name|resourcePath
operator|=
name|databaseResources
operator|.
name|getGrammarPath
argument_list|(
name|type
argument_list|,
name|xrid
operator|.
name|getNamespace
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|xrid
operator|.
name|getPublicId
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Resolving publicId '"
operator|+
name|xrid
operator|.
name|getPublicId
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|type
operator|=
name|DatabaseResources
operator|.
name|GRAMMAR_DTD
expr_stmt|;
name|resourcePath
operator|=
name|databaseResources
operator|.
name|DTDBASE
operator|+
literal|"/"
operator|+
name|databaseResources
operator|.
name|getGrammarPath
argument_list|(
name|type
argument_list|,
name|xrid
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Fast escape; no logging, otherwise validation is slow!
return|return
literal|null
return|;
block|}
comment|// TODO: if resourcepath = null then default resolver must be checked.
if|if
condition|(
name|resourcePath
operator|==
literal|null
operator|||
name|resourcePath
operator|.
name|equals
argument_list|(
literal|"NONE"
argument_list|)
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Resource not found in database."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|logger
operator|.
name|debug
argument_list|(
literal|"resourcePath="
operator|+
name|resourcePath
argument_list|)
expr_stmt|;
comment|// TODO make this streaming, fortunately the grammarfiles are small.
comment|// Get grammar from database
name|rd
operator|=
operator|new
name|InputStreamReader
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|databaseResources
operator|.
name|getGrammar
argument_list|(
name|type
argument_list|,
name|resourcePath
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|rd
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Grammar not found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
name|xis
operator|=
operator|new
name|XMLInputSource
argument_list|(
name|xrid
operator|.
name|getPublicId
argument_list|()
argument_list|,
name|xrid
operator|.
name|getExpandedSystemId
argument_list|()
argument_list|,
name|xrid
operator|.
name|getBaseSystemId
argument_list|()
argument_list|,
name|rd
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
return|return
name|xis
return|;
block|}
block|}
end_class

end_unit

