begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|test
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringReader
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Assert
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|Test
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestCase
import|;
end_import

begin_import
import|import
name|junit
operator|.
name|framework
operator|.
name|TestSuite
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|ValidationReport
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|Validator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|internal
operator|.
name|DatabaseResources
import|;
end_import

begin_comment
comment|/**  *  * @author wessels  */
end_comment

begin_class
specifier|public
class|class
name|GrammarAccessTest
extends|extends
name|TestCase
block|{
specifier|private
specifier|final
specifier|static
name|String
name|ADDRESSBOOK_SCHEMA
init|=
literal|"<?xml version='1.0'?>"
operator|+
literal|"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'"
operator|+
literal|"    targetNamespace='http://jmvanel.free.fr/xsd/addressBook'"
operator|+
literal|"    xmlns='http://jmvanel.free.fr/xsd/addressBook' elementFormDefault='qualified'>"
operator|+
literal|"<xsd:attribute name='uselessAttribute' type='xsd:string'/>"
operator|+
literal|"<xsd:complexType name='record'> "
operator|+
literal|"<xsd:sequence> "
operator|+
literal|"<xsd:element name='cname' type='xsd:string'/>"
operator|+
literal|"<xsd:element name='email' type='xsd:string'/> "
operator|+
literal|"</xsd:sequence> "
operator|+
literal|"</xsd:complexType> "
operator|+
literal|"<xsd:element name='addressBook'>"
operator|+
literal|"<xsd:complexType> "
operator|+
literal|"<xsd:sequence> "
operator|+
literal|"<xsd:element name='owner' type='record'/>"
operator|+
literal|"<xsd:element name='person' type='record'"
operator|+
literal|"                       minOccurs='0' maxOccurs='unbounded'/>"
operator|+
literal|"</xsd:sequence></xsd:complexType> "
operator|+
literal|"</xsd:element> "
operator|+
literal|"</xsd:schema> "
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ADDRESSBOOK_DOCUMENT
init|=
literal|"<?xml version='1.0'?> "
operator|+
literal|"<addressBook xmlns='http://jmvanel.free.fr/xsd/addressBook'> "
operator|+
literal|"<owner> "
operator|+
literal|"<cname>John Punin</cname>"
operator|+
literal|"<email>puninj@cs.rpi.edu</email>"
operator|+
literal|"</owner> "
operator|+
literal|"<person> "
operator|+
literal|"<cname>Harrison Ford</cname>"
operator|+
literal|"<email>hford@famous.org</email> "
operator|+
literal|"</person> "
operator|+
literal|"<person> "
operator|+
literal|"<cname>Julia Roberts</cname>"
operator|+
literal|"<email>jr@pw.com</email> "
operator|+
literal|"</person> "
operator|+
literal|"</addressBook> "
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|ADDRESSBOOK_DOCUMENT_INVALID
init|=
literal|"<?xml version='1.0'?> "
operator|+
literal|"<addressBook xmlns='http://jmvanel.free.fr/xsd/addressBook'> "
operator|+
literal|"<owner> "
operator|+
literal|"<cname>John Punin</cname>"
operator|+
literal|"<email>puninj@cs.rpi.edu</email>"
operator|+
literal|"</owner> "
operator|+
literal|"<person> "
operator|+
literal|"<cname>Harrison Ford</cname>"
operator|+
literal|"<email>hford@famous.org</email> "
operator|+
literal|"</person> "
operator|+
literal|"<person> "
operator|+
literal|"<name>Julia Roberts</name>"
operator|+
literal|"<email>jr@pw.com</email> "
operator|+
literal|"</person> "
operator|+
literal|"</addressBook> "
decl_stmt|;
specifier|private
name|BrokerPool
name|pool
init|=
literal|null
decl_stmt|;
specifier|public
name|GrammarAccessTest
parameter_list|(
name|String
name|testName
parameter_list|)
block|{
name|super
argument_list|(
name|testName
argument_list|)
expr_stmt|;
block|}
specifier|protected
name|void
name|setUp
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> setUp"
argument_list|)
expr_stmt|;
name|pool
operator|=
name|startDB
argument_list|()
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|Test
name|suite
parameter_list|()
block|{
name|TestSuite
name|suite
init|=
operator|new
name|TestSuite
argument_list|(
name|GrammarAccessTest
operator|.
name|class
argument_list|)
decl_stmt|;
return|return
name|suite
return|;
block|}
specifier|protected
name|BrokerPool
name|startDB
parameter_list|()
throws|throws
name|Exception
block|{
name|String
name|home
decl_stmt|,
name|file
init|=
literal|"conf.xml"
decl_stmt|;
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"exist.home"
argument_list|)
expr_stmt|;
if|if
condition|(
name|home
operator|==
literal|null
condition|)
name|home
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
try|try
block|{
name|Configuration
name|config
init|=
operator|new
name|Configuration
argument_list|(
name|file
argument_list|,
name|home
argument_list|)
decl_stmt|;
name|BrokerPool
operator|.
name|configure
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|,
name|config
argument_list|)
expr_stmt|;
return|return
name|BrokerPool
operator|.
name|getInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|fail
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
literal|null
return|;
block|}
specifier|protected
name|File
name|writeToTempFile
parameter_list|(
name|String
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|result
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"EXISTVALIDATE"
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|StringReader
name|sr
init|=
operator|new
name|StringReader
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|FileWriter
name|fw
init|=
operator|new
name|FileWriter
argument_list|(
name|result
argument_list|)
decl_stmt|;
comment|// Transfer bytes from in to out
name|char
index|[]
name|buf
init|=
operator|new
name|char
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|sr
operator|.
name|read
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
literal|1024
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|fw
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|sr
operator|.
name|close
argument_list|()
expr_stmt|;
name|fw
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|File
name|writeToTempFile
parameter_list|(
name|InputStream
name|is
parameter_list|)
throws|throws
name|IOException
block|{
name|File
name|result
init|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"EXISTVALIDATE"
argument_list|,
literal|"tmp"
argument_list|)
decl_stmt|;
name|FileOutputStream
name|fos
init|=
operator|new
name|FileOutputStream
argument_list|(
name|result
argument_list|)
decl_stmt|;
comment|// Transfer bytes from in to out
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
literal|1024
index|]
decl_stmt|;
name|int
name|len
decl_stmt|;
while|while
condition|(
operator|(
name|len
operator|=
name|is
operator|.
name|read
argument_list|(
name|buf
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|fos
operator|.
name|write
argument_list|(
name|buf
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
name|fos
operator|.
name|close
argument_list|()
expr_stmt|;
name|result
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
specifier|protected
name|void
name|tearDown
parameter_list|()
throws|throws
name|Exception
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> tearDown"
argument_list|)
expr_stmt|;
name|BrokerPool
operator|.
name|stopAll
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<\n"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testInsertGrammar
parameter_list|()
throws|throws
name|IOException
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testInsertGrammar"
argument_list|)
expr_stmt|;
name|DatabaseResources
name|ga
init|=
operator|new
name|DatabaseResources
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|Validator
name|va
init|=
operator|new
name|Validator
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"pkg="
operator|+
name|this
operator|.
name|getClass
argument_list|()
operator|.
name|getPackage
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|ga
operator|.
name|insertGrammar
argument_list|(
name|writeToTempFile
argument_list|(
name|ADDRESSBOOK_SCHEMA
argument_list|)
argument_list|,
name|DatabaseResources
operator|.
name|GRAMMAR_XSD
argument_list|,
literal|"tmp/test.xsd"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsGrammarInDatabase
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testIsGrammarInDatabase"
argument_list|)
expr_stmt|;
name|DatabaseResources
name|ga
init|=
operator|new
name|DatabaseResources
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|Validator
name|va
init|=
operator|new
name|Validator
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|ga
operator|.
name|hasGrammar
argument_list|(
name|DatabaseResources
operator|.
name|GRAMMAR_XSD
argument_list|,
literal|"http://jmvanel.free.fr/xsd/addressBook"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testIsGrammarNotInDatabase
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testIsGrammarNotInDatabase"
argument_list|)
expr_stmt|;
name|DatabaseResources
name|ga
init|=
operator|new
name|DatabaseResources
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|Validator
name|va
init|=
operator|new
name|Validator
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|ga
operator|.
name|hasGrammar
argument_list|(
name|DatabaseResources
operator|.
name|GRAMMAR_XSD
argument_list|,
literal|"http://jmvanel.free.fr/xsd/addressBooky"
argument_list|)
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testValidateValidDocument
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testValidateValidDocument"
argument_list|)
expr_stmt|;
name|DatabaseResources
name|ga
init|=
operator|new
name|DatabaseResources
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|Validator
name|va
init|=
operator|new
name|Validator
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|ValidationReport
name|veh
init|=
name|va
operator|.
name|validate
argument_list|(
operator|new
name|StringReader
argument_list|(
name|ADDRESSBOOK_DOCUMENT
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertFalse
argument_list|(
name|veh
operator|.
name|hasErrorsAndWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|veh
operator|.
name|getErrorReport
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|testValidateInValidDocument
parameter_list|()
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|">>> testValidateInValidDocument"
argument_list|)
expr_stmt|;
name|DatabaseResources
name|ga
init|=
operator|new
name|DatabaseResources
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|Validator
name|va
init|=
operator|new
name|Validator
argument_list|(
name|pool
argument_list|)
decl_stmt|;
name|ValidationReport
name|veh2
init|=
name|va
operator|.
name|validate
argument_list|(
operator|new
name|StringReader
argument_list|(
name|ADDRESSBOOK_DOCUMENT_INVALID
argument_list|)
argument_list|)
decl_stmt|;
name|Assert
operator|.
name|assertTrue
argument_list|(
name|veh2
operator|.
name|hasErrorsAndWarnings
argument_list|()
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"<<<"
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

