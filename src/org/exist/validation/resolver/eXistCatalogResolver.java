begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|resolver
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|Source
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|TransformerException
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|resolver
operator|.
name|Catalog
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|resolver
operator|.
name|CatalogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|resolver
operator|.
name|tools
operator|.
name|CatalogResolver
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  *   Shared CatalogResolver to be used by the eXist database and the eXist  * Cocoon web interface. The configuration must be initialized once, typically  * performed by the database (Configuration class). Consequently the Cocoon  * interface can reuse the resolver.  *  * This resolver guarantees that only one apache.org catalog resolver is being  * initialized. At this moment the class is just a thin wrapper. To be changed  * in the near future: Grammar and catalog files can all be stored in the  * database itself.  *  * @see<a href="http://xml.apache.org/commons/components/resolver/"  *>Apache.org resolver</a>  * @see<a href="http://xml.apache.org/commons/components/resolver/resolver-article.html"  *>XML Entity and URI Resolvers</a>  *  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|eXistCatalogResolver
implements|implements
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|EntityResolver
implements|,
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|URIResolver
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|eXistCatalogResolver
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
specifier|static
name|CatalogResolver
name|catalogResolver
init|=
literal|null
decl_stmt|;
comment|/** Constructor. */
specifier|public
name|eXistCatalogResolver
parameter_list|()
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Initializing eXistCatalogResolver"
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initializing eXistCatalogResolver"
argument_list|)
expr_stmt|;
if|if
condition|(
name|catalogResolver
operator|==
literal|null
condition|)
block|{
name|catalogResolver
operator|=
operator|new
name|CatalogResolver
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Constructor.      *      * @param privateCatalog  TRUE for private catalog, FALSE if not.      */
specifier|public
name|eXistCatalogResolver
parameter_list|(
name|boolean
name|privateCatalog
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Initializing eXistCatalogResolver, privateCatalog="
operator|+
name|privateCatalog
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initializing eXistCatalogResolver, privateCatalog="
operator|+
name|privateCatalog
argument_list|)
expr_stmt|;
if|if
condition|(
name|catalogResolver
operator|==
literal|null
condition|)
block|{
name|catalogResolver
operator|=
operator|new
name|CatalogResolver
argument_list|()
expr_stmt|;
block|}
block|}
comment|/**      * Constructor.      *      * @param manager Specific catalogmanager to use.      */
specifier|public
name|eXistCatalogResolver
parameter_list|(
name|CatalogManager
name|manager
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Initializing eXistCatalogResolver, with manager."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Initializing eXistCatalogResolver, with manager."
argument_list|)
expr_stmt|;
if|if
condition|(
name|catalogResolver
operator|==
literal|null
condition|)
block|{
name|catalogResolver
operator|=
operator|new
name|CatalogResolver
argument_list|(
name|manager
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Return the underlying catalog      * @return catalog object.      */
specifier|public
name|Catalog
name|getCatalog
parameter_list|()
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Getting catalog from eXistCatalogResolver."
argument_list|)
expr_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"Getting catalog from eXistCatalogResolver."
argument_list|)
expr_stmt|;
name|Catalog
name|catalog
init|=
name|catalogResolver
operator|.
name|getCatalog
argument_list|()
decl_stmt|;
return|return
name|catalog
return|;
block|}
comment|/**      *  Resolve grammar specified by publicId and/or systemId.      *      * @see  org.xml.sax.EntityResolver#resolveEntity  resolveEntity      *      * @param  publicId  The public identifier of the external entity being      *                   referenced, or null if none was supplied.      * @param  systemId  The system identifier of the external entity being      *                   referenced.      * @throws SAXException     Any SAX exception, possibly wrapping another      *                          exception.      * @throws IOException      A Java-specific IO exception, possibly the      *                          result of creating a new InputStream or Reader      *                          for the InputSource.      * @return An InputSource object describing the new input source, or null      *         to request that the parser open a regular URI connection to the      *         system identifier.      */
specifier|public
name|InputSource
name|resolveEntity
parameter_list|(
name|String
name|publicId
parameter_list|,
name|String
name|systemId
parameter_list|)
throws|throws
name|SAXException
throws|,
name|IOException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"resolveEntity( publicId='"
operator|+
name|publicId
operator|+
literal|"', systemId='"
operator|+
name|systemId
operator|+
literal|"')."
argument_list|)
expr_stmt|;
name|InputSource
name|inputsource
init|=
name|catalogResolver
operator|.
name|resolveEntity
argument_list|(
name|publicId
argument_list|,
name|systemId
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"resolved publicId='"
operator|+
name|inputsource
operator|.
name|getPublicId
argument_list|()
operator|+
literal|"' systemId='"
operator|+
name|inputsource
operator|.
name|getSystemId
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
return|return
name|inputsource
return|;
block|}
comment|/**      *  An object that implements this interface that can be called by the      * processor to turn a URI used in document(), xsl:import, or xsl:include      * into a Source object.      *      * @see javax.xml.transform.URIResolver#resolve resolve      *      * @param  href  An href attribute, which may be relative or absolute.      * @param  base  The base URI in effect when the href attribute was      *               encountered.      * @throws TransformerException  if an error occurs when trying to resolve      *                               the URI.      * @return A Source object, or null if the href cannot be resolved, and the      *         processor should try to resolve the URI itself.      */
specifier|public
name|Source
name|resolve
parameter_list|(
name|String
name|href
parameter_list|,
name|String
name|base
parameter_list|)
throws|throws
name|TransformerException
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"resolve( href='"
operator|+
name|href
operator|+
literal|"', base='"
operator|+
name|base
operator|+
literal|"')."
argument_list|)
expr_stmt|;
name|Source
name|source
init|=
name|catalogResolver
operator|.
name|resolve
argument_list|(
name|href
argument_list|,
name|base
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"systemId="
operator|+
name|source
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|source
return|;
block|}
block|}
end_class

end_unit

