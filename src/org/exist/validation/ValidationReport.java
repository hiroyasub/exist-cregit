begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-04 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|ErrorCodes
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xmldb
operator|.
name|api
operator|.
name|base
operator|.
name|XMLDBException
import|;
end_import

begin_comment
comment|/**  * Report containing all validation info (errors, warnings).  * @author dizzz  * @see org.xml.sax.ErrorHandler  */
end_comment

begin_class
specifier|public
class|class
name|ValidationReport
implements|implements
name|ErrorHandler
block|{
specifier|private
name|ArrayList
name|warnings
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|ArrayList
name|errors
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
comment|/**      *  Receive notification of a recoverable error.      * @param exception The warning information encapsulated in a       *                      SAX parse exception.      * @throws SAXException Any SAX exception, possibly wrapping another       *                      exception.      */
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|addError
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Receive notification of a non-recoverable error.      *      * @param exception     The warning information encapsulated in a       *                      SAX parse exception.      * @throws SAXException Any SAX exception, possibly wrapping another       *                      exception.      */
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|addError
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**      * Receive notification of a warning.      *      * @param exception     The warning information encapsulated in a       *                      SAX parse exception.      * @throws SAXException Any SAX exception, possibly wrapping another       *                      exception.      */
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|addWarning
argument_list|(
name|exception
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Add error report to list      * @param e Exception      */
specifier|private
name|void
name|addError
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|getErrors
argument_list|()
operator|.
name|add
argument_list|(
literal|"Error: ("
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|", "
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Get errors      * @return List of errors      */
specifier|public
name|ArrayList
name|getErrors
parameter_list|()
block|{
return|return
name|errors
return|;
block|}
comment|/**      *  Add warning report to list      * @param e Exception      */
specifier|private
name|void
name|addWarning
parameter_list|(
name|SAXParseException
name|e
parameter_list|)
block|{
name|getWarnings
argument_list|()
operator|.
name|add
argument_list|(
literal|"Warning: ("
operator|+
name|e
operator|.
name|getLineNumber
argument_list|()
operator|+
literal|", "
operator|+
name|e
operator|.
name|getColumnNumber
argument_list|()
operator|+
literal|"): "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Get warnings      * @return List of warnings      */
specifier|public
name|ArrayList
name|getWarnings
parameter_list|()
block|{
return|return
name|warnings
return|;
block|}
comment|/**      *  Get report of all errors.      * @return Report of errors      */
specifier|public
name|String
name|getErrorReport
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getErrors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *  Get report of all warnings.      * @return Report of warnings      */
specifier|public
name|String
name|getWarningReport
parameter_list|()
block|{
name|StringBuffer
name|sb
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getWarnings
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|sb
operator|.
name|append
argument_list|(
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|sb
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *  Has validation errors.      * @return TRUE when there are validation errors.      */
specifier|public
name|boolean
name|hasErrors
parameter_list|()
block|{
return|return
operator|(
name|errors
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
comment|/**      *  Has validation warnings.      * @return TRUE when there are validation warnings.      */
specifier|public
name|boolean
name|hasWarnings
parameter_list|()
block|{
return|return
operator|(
name|warnings
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|)
return|;
block|}
comment|/**      *  Has validation errors and warnings.      * @return TRUE when there are errors and warnings.      */
specifier|public
name|boolean
name|hasErrorsAndWarnings
parameter_list|()
block|{
return|return
operator|(
name|hasErrors
argument_list|()
operator|||
name|hasWarnings
argument_list|()
operator|)
return|;
block|}
comment|/**      *  Get errors as exception      * @return XMLDBException object containing all errors.      */
specifier|public
name|XMLDBException
name|toException
parameter_list|()
block|{
name|String
name|errors
init|=
literal|""
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getErrors
argument_list|()
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
name|errors
operator|+=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
operator|+
literal|"\n"
expr_stmt|;
return|return
operator|new
name|XMLDBException
argument_list|(
name|ErrorCodes
operator|.
name|VENDOR_ERROR
argument_list|,
literal|"Error validating: \n"
operator|+
name|errors
argument_list|,
literal|null
argument_list|)
return|;
block|}
block|}
end_class

end_unit

