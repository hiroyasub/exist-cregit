begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|ErrorHandler
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXParseException
import|;
end_import

begin_comment
comment|/**  * Report containing all validation info (errors, warnings).  *  * @author Dannes Wessels (dizzzz@exist-db.org)  *  * @see org.xml.sax.ErrorHandler  */
end_comment

begin_class
specifier|public
class|class
name|ValidationReport
implements|implements
name|ErrorHandler
block|{
specifier|private
name|ArrayList
name|validationReport
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
specifier|private
name|long
name|duration
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
name|long
name|start
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
name|long
name|stop
init|=
operator|-
literal|1L
decl_stmt|;
specifier|private
name|Throwable
name|exception
init|=
literal|null
decl_stmt|;
specifier|private
name|ValidationReportItem
name|createValidationReportItem
parameter_list|(
name|int
name|type
parameter_list|,
name|SAXParseException
name|exception
parameter_list|)
block|{
name|ValidationReportItem
name|vri
init|=
operator|new
name|ValidationReportItem
argument_list|()
decl_stmt|;
name|vri
operator|.
name|setType
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|vri
operator|.
name|setLineNumber
argument_list|(
name|exception
operator|.
name|getLineNumber
argument_list|()
argument_list|)
expr_stmt|;
name|vri
operator|.
name|setColumnNumber
argument_list|(
name|exception
operator|.
name|getColumnNumber
argument_list|()
argument_list|)
expr_stmt|;
name|vri
operator|.
name|setMessage
argument_list|(
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
name|vri
operator|.
name|setPublicId
argument_list|(
name|exception
operator|.
name|getPublicId
argument_list|()
argument_list|)
expr_stmt|;
name|vri
operator|.
name|setSystemId
argument_list|(
name|exception
operator|.
name|getSystemId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|vri
return|;
block|}
comment|/**      *  Receive notification of a recoverable error.      * @param exception The warning information encapsulated in a      *                      SAX parse exception.      * @throws SAXException Any SAX exception, possibly wrapping another      *                      exception.      */
specifier|public
name|void
name|error
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|validationReport
operator|.
name|add
argument_list|(
name|createValidationReportItem
argument_list|(
name|ValidationReportItem
operator|.
name|ERROR
argument_list|,
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Receive notification of a non-recoverable error.      *      * @param exception     The warning information encapsulated in a      *                      SAX parse exception.      * @throws SAXException Any SAX exception, possibly wrapping another      *                      exception.      */
specifier|public
name|void
name|fatalError
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|validationReport
operator|.
name|add
argument_list|(
name|createValidationReportItem
argument_list|(
name|ValidationReportItem
operator|.
name|FATAL
argument_list|,
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Receive notification of a warning.      *      * @param exception     The warning information encapsulated in a      *                      SAX parse exception.      * @throws SAXException Any SAX exception, possibly wrapping another      *                      exception.      */
specifier|public
name|void
name|warning
parameter_list|(
name|SAXParseException
name|exception
parameter_list|)
throws|throws
name|SAXException
block|{
name|validationReport
operator|.
name|add
argument_list|(
name|createValidationReportItem
argument_list|(
name|ValidationReportItem
operator|.
name|WARNING
argument_list|,
name|exception
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|setException
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|this
operator|.
name|exception
operator|=
name|ex
expr_stmt|;
block|}
comment|/**      *  Give validation information of the XML document.      *      * @return FALSE if no errors and warnings occurred.      */
specifier|public
name|boolean
name|isValid
parameter_list|()
block|{
return|return
operator|(
operator|(
name|validationReport
operator|.
name|size
argument_list|()
operator|==
literal|0
operator|)
operator|&&
operator|(
name|exception
operator|==
literal|null
operator|)
operator|)
return|;
block|}
specifier|public
name|List
name|getReport
parameter_list|()
block|{
return|return
name|validationReport
return|;
block|}
specifier|public
name|List
name|getValidationReport
parameter_list|()
block|{
name|List
name|textReport
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|isValid
argument_list|()
condition|)
block|{
name|textReport
operator|.
name|add
argument_list|(
literal|"Document is valid."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|textReport
operator|.
name|add
argument_list|(
literal|"Document is not valid."
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|Iterator
name|iter
init|=
name|validationReport
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|textReport
operator|.
name|add
argument_list|(
name|iter
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|exception
operator|!=
literal|null
condition|)
block|{
name|textReport
operator|.
name|add
argument_list|(
literal|"Exception: "
operator|+
name|exception
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|textReport
operator|.
name|add
argument_list|(
literal|"Validated in "
operator|+
name|duration
operator|+
literal|" millisec."
argument_list|)
expr_stmt|;
return|return
name|textReport
return|;
block|}
specifier|public
name|String
index|[]
name|getValidationReportArray
parameter_list|()
block|{
name|List
name|validationReport
init|=
name|getValidationReport
argument_list|()
decl_stmt|;
name|String
name|report
index|[]
init|=
operator|new
name|String
index|[
name|validationReport
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|int
name|counter
init|=
literal|0
decl_stmt|;
for|for
control|(
name|Iterator
name|iter
init|=
name|validationReport
operator|.
name|iterator
argument_list|()
init|;
name|iter
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|report
index|[
name|counter
index|]
operator|=
name|iter
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
name|counter
operator|++
expr_stmt|;
block|}
return|return
name|report
return|;
block|}
specifier|public
name|void
name|setValidationDuration
parameter_list|(
name|long
name|time
parameter_list|)
block|{
name|duration
operator|=
name|time
expr_stmt|;
block|}
specifier|public
name|long
name|getValidationDuration
parameter_list|()
block|{
return|return
name|duration
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|validationReport
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|Iterator
name|reportIterator
init|=
name|getValidationReport
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|reportIterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|validationReport
operator|.
name|append
argument_list|(
name|reportIterator
operator|.
name|next
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|validationReport
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
return|return
name|validationReport
operator|.
name|toString
argument_list|()
return|;
block|}
name|void
name|start
parameter_list|()
block|{
name|start
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
block|}
name|void
name|stop
parameter_list|()
block|{
if|if
condition|(
name|getValidationDuration
argument_list|()
operator|==
operator|-
literal|1L
condition|)
block|{
comment|// not already stopped
name|stop
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|setValidationDuration
argument_list|(
name|stop
operator|-
name|start
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|setThrowable
parameter_list|(
name|Throwable
name|throwable
parameter_list|)
block|{
name|exception
operator|=
name|throwable
expr_stmt|;
block|}
block|}
end_class

end_unit

