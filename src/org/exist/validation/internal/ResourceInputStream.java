begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_comment
comment|/**  *  Wrapper between ResourceThread that writes data into outputstream and   * the  needed InputStream that is needed for the Validator. The glue is the  * circulair buffer BlockingOutputStream.  *  * @author dizzzz  * @see java.io.InputStream  * @see org.exist.validation.Validator  * @see org.exist.validation.internal.BlockingOutputStream  */
end_comment

begin_class
specifier|public
class|class
name|ResourceInputStream
extends|extends
name|InputStream
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|ResourceInputStream
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|BlockingOutputStream
name|bis
init|=
literal|null
decl_stmt|;
comment|/**      * Creates a new instance of ResourceInputStream.      *       * @param brokerPool          BrokerPool      * @param docUri    XML resource that must be streamed.      */
specifier|public
name|ResourceInputStream
parameter_list|(
name|BrokerPool
name|brokerPool
parameter_list|,
name|XmldbURI
name|docUri
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Initializing ResourceInputStream"
argument_list|)
expr_stmt|;
name|bis
operator|=
operator|new
name|BlockingOutputStream
argument_list|()
expr_stmt|;
name|ResourceThread
name|rt
init|=
operator|new
name|ResourceThread
argument_list|(
name|brokerPool
argument_list|,
name|docUri
argument_list|,
name|bis
argument_list|)
decl_stmt|;
name|rt
operator|.
name|start
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Initializing ResourceInputStream done"
argument_list|)
expr_stmt|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|bis
operator|.
name|read
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
specifier|public
name|int
name|read
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|bis
operator|.
name|read
argument_list|(
name|b
argument_list|,
literal|0
argument_list|,
name|b
operator|.
name|length
argument_list|)
return|;
block|}
comment|//    public void mark(int readlimit) {
comment|//
comment|//        bis.mark(readlimit);
comment|//    }
specifier|public
name|long
name|skip
parameter_list|(
name|long
name|n
parameter_list|)
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|super
operator|.
name|skip
argument_list|(
name|n
argument_list|)
return|;
block|}
specifier|public
name|void
name|reset
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|super
operator|.
name|reset
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|read
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|bis
operator|.
name|read
argument_list|()
return|;
block|}
comment|//    public boolean markSupported() {
comment|//
comment|//        boolean retValue;
comment|//
comment|//        retValue = bis.markSupported();
comment|//        return retValue;
comment|//    }
specifier|public
name|void
name|close
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|bis
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|//DWES
specifier|public
name|void
name|flush
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
name|bis
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
specifier|public
name|int
name|available
parameter_list|()
throws|throws
name|java
operator|.
name|io
operator|.
name|IOException
block|{
return|return
name|bis
operator|.
name|available
argument_list|()
return|;
block|}
block|}
end_class

end_unit

