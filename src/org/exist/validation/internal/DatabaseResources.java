begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URISyntaxException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|ClassLoaderSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|InputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  *  Helper class for accessing grammars.  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|DatabaseResources
block|{
specifier|public
specifier|static
name|String
name|FIND_XSD
init|=
literal|"org/exist/validation/internal/query/find_schema.xq"
decl_stmt|;
specifier|public
specifier|static
name|String
name|FIND_PUBLICID_IN_CATALOGS
init|=
literal|"org/exist/validation/internal/query/find_publicid_in_catalogs.xq"
decl_stmt|;
specifier|public
specifier|static
name|String
name|FIND_XSD_IN_CATALOG
init|=
literal|"org/exist/validation/internal/query/find_xsd_in_catalog.xq"
decl_stmt|;
specifier|public
specifier|static
name|String
name|FIND_DTD_IN_CATALOG
init|=
literal|"org/exist/validation/internal/query/find_dtd_in_catalog.xq"
decl_stmt|;
specifier|public
specifier|static
name|String
name|PUBLICID
init|=
literal|"publicId"
decl_stmt|;
specifier|public
specifier|static
name|String
name|TARGETNAMESPACE
init|=
literal|"targetNamespace"
decl_stmt|;
specifier|public
specifier|static
name|String
name|CATALOG
init|=
literal|"catalog"
decl_stmt|;
comment|/** Local reference to database  */
specifier|private
name|BrokerPool
name|brokerPool
init|=
literal|null
decl_stmt|;
comment|/** Local logger */
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DatabaseResources
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *  Convert sequence into list of strings. Java5 would make      * this method more safe to use.      *      * @param   sequence  Result of query.      * @return  List containing String objects.      */
specifier|public
name|List
name|getAllResults
parameter_list|(
name|Sequence
name|sequence
parameter_list|)
block|{
name|List
name|result
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
try|try
block|{
name|SequenceIterator
name|i
init|=
name|sequence
operator|.
name|iterate
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"xQuery issue."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|result
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      *  Get first entry of sequence as String. Java5 would make      * this method more safe to use.      *      * @param   sequence  Result of query.      * @return  String containing representation of 1st entry of sequence.      */
specifier|public
name|String
name|getFirstResult
parameter_list|(
name|Sequence
name|sequence
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SequenceIterator
name|i
init|=
name|sequence
operator|.
name|iterate
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Single query result: '"
operator|+
name|result
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"No query result."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"xQuery issue "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      *  Execute query with supplied parameters.      *      * namespace,  publicId,  catalogPath,       *      * @param collection    Collection in which query is executed.      * @param params        Map of parameters used in cquery      * @param queryPath     Path to xquery in classpath      * @return              Result of xQuery      */
specifier|public
name|Sequence
name|executeQuery
parameter_list|(
name|XmldbURI
name|collection
parameter_list|,
name|Map
name|params
parameter_list|,
name|String
name|queryPath
parameter_list|)
block|{
name|String
name|namespace
init|=
operator|(
name|String
operator|)
name|params
operator|.
name|get
argument_list|(
name|TARGETNAMESPACE
argument_list|)
decl_stmt|;
name|String
name|publicId
init|=
operator|(
name|String
operator|)
name|params
operator|.
name|get
argument_list|(
name|PUBLICID
argument_list|)
decl_stmt|;
name|String
name|catalogPath
init|=
operator|(
name|String
operator|)
name|params
operator|.
name|get
argument_list|(
name|CATALOG
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"collection="
operator|+
name|collection
operator|+
literal|" namespace="
operator|+
name|namespace
operator|+
literal|" publicId="
operator|+
name|publicId
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Sequence
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|SecurityManager
operator|.
name|SYSTEM_USER
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error getting DBBroker"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
name|CompiledXQuery
name|compiled
init|=
literal|null
decl_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
init|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|INTERNAL_PREFIX_LOOKUP
argument_list|)
decl_stmt|;
try|try
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
literal|"collection"
argument_list|,
name|collection
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|TARGETNAMESPACE
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publicId
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|PUBLICID
argument_list|,
name|publicId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|catalogPath
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|CATALOG
argument_list|,
name|catalogPath
argument_list|)
expr_stmt|;
block|}
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
operator|new
name|ClassLoaderSource
argument_list|(
name|queryPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
try|try
block|{
name|result
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|XPathException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Problem executing xquery"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|brokerPool
operator|!=
literal|null
condition|)
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      *  Find document path of XSD describing a namespace.      *      * @param collection    Start point for search, e.g. '/db'.      * @param namespace     Namespace that needs to be found.      * @return              Document path (e.g. '/db/foo/bar.xsd') if found,      *                      null if namespace could not be found.      */
specifier|public
name|String
name|getSchemaPath
parameter_list|(
name|XmldbURI
name|collection
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Find schema with namespace '"
operator|+
name|namespace
operator|+
literal|"' in '"
operator|+
name|collection
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|TARGETNAMESPACE
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|Sequence
name|result
init|=
name|executeQuery
argument_list|(
name|collection
argument_list|,
name|params
argument_list|,
name|FIND_XSD
argument_list|)
decl_stmt|;
return|return
name|getFirstResult
argument_list|(
name|result
argument_list|)
return|;
block|}
comment|/**      *  Find document catalogPath of DTD describing a publicId.      *      * @param collection    Start point for search, e.g. '/db'.      * @param publicId      PublicID that needs to be found.      * @return Document catalogPath (e.g. '/db/foo/bar.dtd') if found,      *                      null if publicID could not be found.      */
specifier|public
name|String
name|getDtdPath
parameter_list|(
name|XmldbURI
name|collection
parameter_list|,
name|String
name|publicId
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Find DTD with publicID '"
operator|+
name|publicId
operator|+
literal|"' in '"
operator|+
name|collection
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PUBLICID
argument_list|,
name|publicId
argument_list|)
expr_stmt|;
name|Sequence
name|result
init|=
name|executeQuery
argument_list|(
name|collection
argument_list|,
name|params
argument_list|,
name|FIND_PUBLICID_IN_CATALOGS
argument_list|)
decl_stmt|;
name|String
name|dtdPath
init|=
literal|null
decl_stmt|;
name|String
name|catalogPath
init|=
name|getFirstResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
comment|// Get from selected catalog file the publicId
if|if
condition|(
name|catalogPath
operator|!=
literal|null
condition|)
block|{
name|XmldbURI
name|col
init|=
literal|null
decl_stmt|;
try|try
block|{
name|col
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
literal|"xmldb:exist://"
operator|+
name|getCollectionPath
argument_list|(
name|catalogPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|ex
parameter_list|)
block|{
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
name|String
name|docName
init|=
name|getDocumentName
argument_list|(
name|catalogPath
argument_list|)
decl_stmt|;
name|dtdPath
operator|=
name|getDtdPathFromCatalog
argument_list|(
name|col
argument_list|,
name|docName
argument_list|,
name|publicId
argument_list|)
expr_stmt|;
block|}
return|return
name|dtdPath
return|;
block|}
comment|/**      *  Get document from database.      *      * @param documentPath  Path to the resource.      * @return              Byte array of resource, null if not found.      */
comment|//TODO: use XmldbURI
specifier|public
name|byte
index|[]
name|getResource
parameter_list|(
name|String
name|documentPath
parameter_list|)
block|{
name|XmldbURI
name|documentURI
decl_stmt|;
try|try
block|{
name|documentURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|MimeType
name|mime
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|documentURI
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|==
literal|null
condition|)
block|{
name|mime
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Get resource '"
operator|+
name|documentURI
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|SecurityManager
operator|.
name|SYSTEM_USER
argument_list|)
expr_stmt|;
if|if
condition|(
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
name|DocumentImpl
name|doc
init|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|documentURI
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
comment|// if document is not present, null is returned
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Xml document '"
operator|+
name|documentURI
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|reset
argument_list|()
expr_stmt|;
name|data
operator|=
name|serializer
operator|.
name|serialize
argument_list|(
name|doc
argument_list|)
operator|.
name|getBytes
argument_list|()
expr_stmt|;
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|BinaryDocument
name|binDoc
init|=
operator|(
name|BinaryDocument
operator|)
name|broker
operator|.
name|getXMLResource
argument_list|(
name|documentURI
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
decl_stmt|;
comment|// if document is not present, null is returned
if|if
condition|(
name|binDoc
operator|==
literal|null
condition|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Binary document '"
operator|+
name|documentURI
operator|+
literal|" does not exist."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|data
operator|=
name|broker
operator|.
name|getBinaryResource
argument_list|(
name|binDoc
argument_list|)
expr_stmt|;
name|binDoc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error opening document"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Error serializing document"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|brokerPool
operator|!=
literal|null
condition|)
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|data
return|;
block|}
comment|//TODO: use XmldbURI
specifier|public
name|boolean
name|insertResource
parameter_list|(
name|String
name|documentPath
parameter_list|,
name|byte
index|[]
name|grammar
parameter_list|)
block|{
name|boolean
name|insertIsSuccesfull
init|=
literal|false
decl_stmt|;
name|XmldbURI
name|documentURI
decl_stmt|;
try|try
block|{
name|documentURI
operator|=
name|XmldbURI
operator|.
name|xmldbUriFor
argument_list|(
name|documentPath
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|URISyntaxException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Invalid URI: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
literal|null
decl_stmt|;
name|Txn
name|transaction
init|=
literal|null
decl_stmt|;
try|try
block|{
name|MimeType
name|mime
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|documentURI
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|mime
operator|==
literal|null
condition|)
block|{
name|mime
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|SecurityManager
operator|.
name|SYSTEM_USER
argument_list|)
expr_stmt|;
name|transact
operator|=
name|brokerPool
operator|.
name|getTransactionManager
argument_list|()
expr_stmt|;
name|transaction
operator|=
name|transact
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|Collection
name|collection
init|=
name|broker
comment|//TODO : resolve URI against ".."
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|documentURI
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
decl_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
if|if
condition|(
name|mime
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|documentURI
operator|.
name|lastSegment
argument_list|()
argument_list|,
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|grammar
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
operator|new
name|InputSource
argument_list|(
operator|new
name|ByteArrayInputStream
argument_list|(
name|grammar
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// TODO : call mime-type stuff for good mimetypes
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|documentURI
operator|.
name|lastSegment
argument_list|()
argument_list|,
name|grammar
argument_list|,
name|mime
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|insertIsSuccesfull
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|ex
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|logger
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|brokerPool
operator|!=
literal|null
condition|)
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|insertIsSuccesfull
return|;
block|}
comment|/**      * Creates a new instance of DatabaseResources.      *      * @param pool  Instance shared broker pool.      */
specifier|public
name|DatabaseResources
parameter_list|(
name|BrokerPool
name|pool
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Initializing DatabaseResources"
argument_list|)
expr_stmt|;
name|this
operator|.
name|brokerPool
operator|=
name|pool
expr_stmt|;
block|}
comment|/**      *  Get document name from path.      *      *  /db/foo/bar/doc.xml gives doc.xml      *  xmldb:exist:///db/fo/bar/doc.xml gives doc.xml      *      * @param path  The Path      * @return  Document name.      */
specifier|static
specifier|public
name|String
name|getDocumentName
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|docName
init|=
literal|null
decl_stmt|;
name|int
name|separatorPos
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|separatorPos
operator|==
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
name|docName
operator|=
name|path
expr_stmt|;
block|}
else|else
block|{
name|docName
operator|=
name|path
operator|.
name|substring
argument_list|(
name|separatorPos
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|docName
return|;
block|}
comment|/**      *  Get collection pathname from path.      *      *  /db/foo/bar/doc.xml gives /db/foo/bar      *  xmldb:exist:///db/fo/bar/doc.xml gives xmldb:exist:///db/fo/bar      *      * @param path  The Path      * @return  Collection path name, "" if none available (doc.xml)      */
specifier|static
specifier|public
name|String
name|getCollectionPath
parameter_list|(
name|String
name|path
parameter_list|)
block|{
name|String
name|pathName
init|=
literal|null
decl_stmt|;
name|int
name|separatorPos
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
if|if
condition|(
name|separatorPos
operator|==
name|Constants
operator|.
name|STRING_NOT_FOUND
condition|)
block|{
comment|// no path
name|pathName
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|pathName
operator|=
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|separatorPos
argument_list|)
expr_stmt|;
block|}
return|return
name|pathName
return|;
block|}
comment|/**      *  Get schema path information from catalog.      *      * @param collection Collection containing the catalog file      * @param docName    Catalog filename      * @param namespace  This namespace needs to be resolved      * @return           Path to schema, or null if not found.      */
specifier|public
name|String
name|getSchemaPathFromCatalog
parameter_list|(
name|XmldbURI
name|collection
parameter_list|,
name|String
name|docName
parameter_list|,
name|String
name|namespace
parameter_list|)
block|{
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|TARGETNAMESPACE
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CATALOG
argument_list|,
name|collection
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|"/"
operator|+
name|docName
argument_list|)
expr_stmt|;
name|Sequence
name|result
init|=
name|executeQuery
argument_list|(
name|collection
argument_list|,
name|params
argument_list|,
name|FIND_XSD_IN_CATALOG
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|getFirstResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|collection
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
comment|/**      *  Get DTD path information from catalog.      *      * @param collection Collection containing the catalog file      * @param docName    Catalog filename      * @param publicId   This publicId needs to be resolved      * @return           Path to DTD, or null if not found.      */
specifier|public
name|String
name|getDtdPathFromCatalog
parameter_list|(
name|XmldbURI
name|collection
parameter_list|,
name|String
name|docName
parameter_list|,
name|String
name|publicId
parameter_list|)
block|{
name|Map
name|params
init|=
operator|new
name|HashMap
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PUBLICID
argument_list|,
name|publicId
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|CATALOG
argument_list|,
name|collection
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|"/"
operator|+
name|docName
argument_list|)
expr_stmt|;
name|Sequence
name|result
init|=
name|executeQuery
argument_list|(
name|collection
argument_list|,
name|params
argument_list|,
name|FIND_DTD_IN_CATALOG
argument_list|)
decl_stmt|;
name|String
name|path
init|=
name|getFirstResult
argument_list|(
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|!=
literal|null
operator|&&
operator|!
name|path
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|path
operator|=
name|collection
operator|.
name|getCollectionPath
argument_list|()
operator|+
literal|"/"
operator|+
name|path
expr_stmt|;
block|}
return|return
name|path
return|;
block|}
block|}
end_class

end_unit

