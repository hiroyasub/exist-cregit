begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|validation
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
operator|.
name|AccessContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|ClassLoaderSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|CompiledXQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQuery
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XQueryContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|Sequence
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|value
operator|.
name|SequenceIterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_comment
comment|/**  *  Helper class for accessing grammars.  *  * @author Dannes Wessels (dizzzz@exist-db.org)  */
end_comment

begin_class
specifier|public
class|class
name|DatabaseResources
block|{
specifier|public
specifier|final
specifier|static
name|String
name|QUERY_LOCATION
init|=
literal|"org/exist/validation/internal/query/"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FIND_XSD
init|=
name|QUERY_LOCATION
operator|+
literal|"find_schema_by_targetNamespace.xq"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|FIND_CATALOGS_WITH_DTD
init|=
name|QUERY_LOCATION
operator|+
literal|"find_catalogs_with_dtd.xq"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PUBLICID
init|=
literal|"publicId"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|TARGETNAMESPACE
init|=
literal|"targetNamespace"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|CATALOG
init|=
literal|"catalog"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|COLLECTION
init|=
literal|"collection"
decl_stmt|;
comment|/** Local reference to database  */
specifier|private
name|BrokerPool
name|brokerPool
init|=
literal|null
decl_stmt|;
comment|/** Local logger */
specifier|private
specifier|final
specifier|static
name|Logger
name|logger
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|DatabaseResources
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *  Convert sequence into list of strings.      *      * @param   sequence  Result of query.      * @return  List containing String objects.      */
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|getAllResults
parameter_list|(
name|Sequence
name|sequence
parameter_list|)
block|{
name|List
argument_list|<
name|String
argument_list|>
name|result
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
try|try
block|{
name|SequenceIterator
name|i
init|=
name|sequence
operator|.
name|iterate
argument_list|()
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|String
name|path
init|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
decl_stmt|;
name|result
operator|.
name|add
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"xQuery issue."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|result
operator|=
literal|null
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
comment|/**      *  Get first entry of sequence as String.      *      * @param   sequence  Result of query.      * @return  String containing representation of 1st entry of sequence.      */
specifier|public
name|String
name|getFirstResult
parameter_list|(
name|Sequence
name|sequence
parameter_list|)
block|{
name|String
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|SequenceIterator
name|i
init|=
name|sequence
operator|.
name|iterate
argument_list|()
decl_stmt|;
if|if
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|result
operator|=
name|i
operator|.
name|nextItem
argument_list|()
operator|.
name|getStringValue
argument_list|()
expr_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"Single query result: '"
operator|+
name|result
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"No query result."
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|XPathException
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"xQuery issue "
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
specifier|public
name|Sequence
name|executeQuery
parameter_list|(
name|String
name|queryPath
parameter_list|,
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|String
name|namespace
init|=
name|params
operator|.
name|get
argument_list|(
name|TARGETNAMESPACE
argument_list|)
decl_stmt|;
name|String
name|publicId
init|=
name|params
operator|.
name|get
argument_list|(
name|PUBLICID
argument_list|)
decl_stmt|;
name|String
name|catalogPath
init|=
name|params
operator|.
name|get
argument_list|(
name|CATALOG
argument_list|)
decl_stmt|;
name|String
name|collection
init|=
name|params
operator|.
name|get
argument_list|(
name|COLLECTION
argument_list|)
decl_stmt|;
name|logger
operator|.
name|debug
argument_list|(
literal|"collection="
operator|+
name|collection
operator|+
literal|" namespace="
operator|+
name|namespace
operator|+
literal|" publicId="
operator|+
name|publicId
operator|+
literal|" catalogPath="
operator|+
name|catalogPath
argument_list|)
expr_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|Sequence
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|brokerPool
operator|.
name|get
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|CompiledXQuery
name|compiled
init|=
literal|null
decl_stmt|;
name|XQuery
name|xquery
init|=
name|broker
operator|.
name|getXQueryService
argument_list|()
decl_stmt|;
name|XQueryContext
name|context
init|=
name|xquery
operator|.
name|newContext
argument_list|(
name|AccessContext
operator|.
name|INTERNAL_PREFIX_LOOKUP
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|namespace
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|TARGETNAMESPACE
argument_list|,
name|namespace
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|publicId
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|PUBLICID
argument_list|,
name|publicId
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|catalogPath
operator|!=
literal|null
condition|)
block|{
name|context
operator|.
name|declareVariable
argument_list|(
name|CATALOG
argument_list|,
name|catalogPath
argument_list|)
expr_stmt|;
block|}
name|compiled
operator|=
name|xquery
operator|.
name|compile
argument_list|(
name|context
argument_list|,
operator|new
name|ClassLoaderSource
argument_list|(
name|queryPath
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|=
name|xquery
operator|.
name|execute
argument_list|(
name|compiled
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|logger
operator|.
name|error
argument_list|(
literal|"Problem executing xquery"
argument_list|,
name|ex
argument_list|)
expr_stmt|;
name|result
operator|=
literal|null
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|brokerPool
operator|!=
literal|null
condition|)
block|{
name|brokerPool
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
comment|/**      * Creates a new instance of DatabaseResources.      *       *       *       * @param pool  Instance shared broker pool.      */
specifier|public
name|DatabaseResources
parameter_list|(
name|BrokerPool
name|pool
parameter_list|)
block|{
name|logger
operator|.
name|info
argument_list|(
literal|"Initializing DatabaseResources"
argument_list|)
expr_stmt|;
name|this
operator|.
name|brokerPool
operator|=
name|pool
expr_stmt|;
block|}
specifier|public
name|String
name|findXSD
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|targetNamespace
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Find schema with namespace '"
operator|+
name|targetNamespace
operator|+
literal|"' in '"
operator|+
name|collection
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|TARGETNAMESPACE
argument_list|,
name|targetNamespace
argument_list|)
expr_stmt|;
name|Sequence
name|result
init|=
name|executeQuery
argument_list|(
name|FIND_XSD
argument_list|,
name|params
argument_list|,
name|user
argument_list|)
decl_stmt|;
return|return
name|getFirstResult
argument_list|(
name|result
argument_list|)
return|;
block|}
specifier|public
name|String
name|findCatalogWithDTD
parameter_list|(
name|String
name|collection
parameter_list|,
name|String
name|publicId
parameter_list|,
name|User
name|user
parameter_list|)
block|{
name|logger
operator|.
name|debug
argument_list|(
literal|"Find DTD with public '"
operator|+
name|publicId
operator|+
literal|"' in '"
operator|+
name|collection
operator|+
literal|"'."
argument_list|)
expr_stmt|;
name|Map
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
name|params
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|String
argument_list|>
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|COLLECTION
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|params
operator|.
name|put
argument_list|(
name|PUBLICID
argument_list|,
name|publicId
argument_list|)
expr_stmt|;
name|Sequence
name|result
init|=
name|executeQuery
argument_list|(
name|FIND_CATALOGS_WITH_DTD
argument_list|,
name|params
argument_list|,
name|user
argument_list|)
decl_stmt|;
return|return
name|getFirstResult
argument_list|(
name|result
argument_list|)
return|;
block|}
block|}
end_class

end_unit

