begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationClass
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationFieldAsElement
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|ConfigurationReferenceBy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|SubjectImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|Realm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_class
annotation|@
name|ConfigurationClass
argument_list|(
literal|"account"
argument_list|)
specifier|public
specifier|abstract
class|class
name|AbstractAccount
extends|extends
name|AbstractPrincipal
implements|implements
name|Account
block|{
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"home"
argument_list|)
specifier|protected
name|XmldbURI
name|home
init|=
literal|null
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"group"
argument_list|)
annotation|@
name|ConfigurationReferenceBy
argument_list|(
literal|"name"
argument_list|)
specifier|protected
name|List
argument_list|<
name|Group
argument_list|>
name|groups
init|=
operator|new
name|ArrayList
argument_list|<
name|Group
argument_list|>
argument_list|()
decl_stmt|;
comment|//used for internal locking
specifier|private
name|boolean
name|accountLocked
init|=
literal|false
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"expired"
argument_list|)
specifier|private
name|boolean
name|accountExpired
init|=
literal|false
decl_stmt|;
comment|//	@ConfigurationFieldAsElement("credentials-expired")
specifier|private
name|boolean
name|credentialsExpired
init|=
literal|false
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"enabled"
argument_list|)
specifier|private
name|boolean
name|enabled
init|=
literal|true
decl_stmt|;
specifier|protected
name|Credential
name|_cred
init|=
literal|null
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|attributes
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
argument_list|()
decl_stmt|;
comment|/** 	 * Indicates if the user belongs to the dba group, i.e. is a superuser. 	 */
specifier|protected
name|boolean
name|hasDbaRole
init|=
literal|false
decl_stmt|;
specifier|public
name|AbstractAccount
parameter_list|(
name|AbstractRealm
name|realm
parameter_list|,
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
argument_list|(
name|realm
argument_list|,
name|realm
operator|.
name|collectionAccounts
argument_list|,
name|id
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
specifier|public
name|AbstractAccount
parameter_list|(
name|AbstractRealm
name|realm
parameter_list|,
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|super
argument_list|(
name|realm
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
block|}
specifier|public
name|boolean
name|checkCredentials
parameter_list|(
name|Object
name|credentials
parameter_list|)
block|{
return|return
name|_cred
operator|==
literal|null
condition|?
literal|false
else|:
name|_cred
operator|.
name|check
argument_list|(
name|credentials
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Group
name|addGroup
parameter_list|(
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|Group
name|group
init|=
name|realm
operator|.
name|getGroup
argument_list|(
literal|null
argument_list|,
name|name
argument_list|)
decl_stmt|;
return|return
name|addGroup
argument_list|(
name|group
argument_list|)
return|;
block|}
comment|//this method used by Configurator
specifier|protected
specifier|final
name|Group
name|addGroup
parameter_list|(
name|Configuration
name|conf
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|conf
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|String
name|name
init|=
name|conf
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
literal|null
condition|)
return|return
literal|null
return|;
return|return
name|addGroup
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|remGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
for|for
control|(
name|Group
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|group
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|groups
operator|.
name|remove
argument_list|(
name|group
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|SecurityManager
operator|.
name|DBA_GROUP
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
name|hasDbaRole
operator|=
literal|false
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|setGroups
parameter_list|(
name|String
index|[]
name|groups
parameter_list|)
block|{
comment|//		this.groups = groups;
comment|//		for (int i = 0; i< groups.length; i++)
comment|//			if (SecurityManager.DBA_GROUP.equals(groups[i]))
comment|//				hasDbaRole = true;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
index|[]
name|getGroups
parameter_list|()
block|{
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|String
index|[]
name|names
init|=
operator|new
name|String
index|[
name|groups
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|Group
name|role
range|:
name|groups
control|)
block|{
name|names
index|[
name|i
index|]
operator|=
name|role
operator|.
name|getName
argument_list|()
expr_stmt|;
name|i
operator|++
expr_stmt|;
block|}
return|return
name|names
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|groups
operator|==
literal|null
condition|)
return|return
literal|false
return|;
for|for
control|(
name|Group
name|group
range|:
name|groups
control|)
block|{
if|if
condition|(
name|group
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|name
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|boolean
name|hasDbaRole
parameter_list|()
block|{
return|return
name|hasDbaRole
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|getPrimaryGroup
parameter_list|()
block|{
if|if
condition|(
name|groups
operator|!=
literal|null
operator|&&
name|groups
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
return|return
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
operator|.
name|getName
argument_list|()
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
name|StringBuilder
name|buf
init|=
operator|new
name|StringBuilder
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<account name=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"id=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|home
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" home=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
block|}
else|else
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
if|if
condition|(
name|groups
operator|!=
literal|null
condition|)
block|{
for|for
control|(
name|Group
name|group
range|:
name|groups
control|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|"<group>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</group>"
argument_list|)
expr_stmt|;
block|}
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|XmldbURI
name|getHome
parameter_list|()
block|{
return|return
name|home
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|AbstractAccount
name|other
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|SubjectImpl
condition|)
block|{
name|other
operator|=
operator|(
operator|(
name|SubjectImpl
operator|)
name|obj
operator|)
operator|.
name|account
expr_stmt|;
block|}
if|else if
condition|(
name|obj
operator|instanceof
name|AbstractAccount
condition|)
block|{
name|other
operator|=
operator|(
name|AbstractAccount
operator|)
name|obj
expr_stmt|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|other
operator|!=
literal|null
condition|)
return|return
operator|(
name|realm
operator|==
name|other
operator|.
name|realm
operator|&&
name|name
operator|.
name|equals
argument_list|(
name|other
operator|.
name|name
argument_list|)
operator|)
return|;
comment|//id == other.id;
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Realm
name|getRealm
parameter_list|()
block|{
return|return
name|realm
return|;
block|}
comment|/** 	 * Add a named attribute. 	 * 	 * @param name 	 * @param value 	 */
annotation|@
name|Override
specifier|public
name|void
name|setAttribute
parameter_list|(
name|String
name|name
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|attributes
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * Get the named attribute value. 	 * 	 * @param name The String that is the name of the attribute. 	 * @return The value associated with the name or null if no value is associated with the name. 	 */
annotation|@
name|Override
specifier|public
name|Object
name|getAttribute
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|attributes
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/** 	 * Returns the set of attributes names. 	 * 	 * @return the Set of attribute names. 	 */
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|String
argument_list|>
name|getAttributeNames
parameter_list|()
block|{
return|return
name|attributes
operator|.
name|keySet
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|getDefaultGroup
parameter_list|()
block|{
if|if
condition|(
name|groups
operator|!=
literal|null
operator|&&
name|groups
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
return|return
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setHome
parameter_list|(
name|XmldbURI
name|homeCollection
parameter_list|)
block|{
name|home
operator|=
name|homeCollection
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAccountNonExpired
parameter_list|()
block|{
return|return
operator|!
name|accountExpired
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAccountNonLocked
parameter_list|()
block|{
return|return
operator|!
name|accountLocked
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCredentialsNonExpired
parameter_list|()
block|{
return|return
operator|!
name|credentialsExpired
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|enabled
return|;
block|}
block|}
end_class

end_unit

