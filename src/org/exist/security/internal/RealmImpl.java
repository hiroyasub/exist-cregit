begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|CollectionConfiguration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|GroupImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Realm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|User
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|UserImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|sync
operator|.
name|Sync
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Attr
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Document
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Node
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|RealmImpl
implements|implements
name|Realm
block|{
specifier|public
specifier|final
specifier|static
name|String
name|ID
init|=
literal|"eXist-db"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|String
name|ACL_FILE
init|=
literal|"users.xml"
decl_stmt|;
specifier|protected
specifier|final
specifier|static
name|XmldbURI
name|ACL_FILE_URI
init|=
name|XmldbURI
operator|.
name|create
argument_list|(
name|ACL_FILE
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|Group
argument_list|>
name|groups
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|Group
argument_list|>
argument_list|(
literal|65
argument_list|)
decl_stmt|;
specifier|private
name|Map
argument_list|<
name|String
argument_list|,
name|User
argument_list|>
name|users
init|=
operator|new
name|HashMap
argument_list|<
name|String
argument_list|,
name|User
argument_list|>
argument_list|(
literal|65
argument_list|)
decl_stmt|;
name|SecurityManagerImpl
name|sm
decl_stmt|;
comment|//	Configuration configuration;
name|RealmImpl
parameter_list|(
name|SecurityManagerImpl
name|sm
parameter_list|)
block|{
comment|//, Configuration conf
comment|//		configuration = Configurator.configure(this, conf);
name|this
operator|.
name|sm
operator|=
name|sm
expr_stmt|;
comment|//		// LOG.debug("creating system users");
comment|//		//Build-in accounts
comment|//		sm.DBA_ROLE = _addGroup(0, SecurityManager.DBA_GROUP);
comment|//		sm.SYSTEM_ACCOUNT = _addAccount(0, SecurityManager.DBA_USER, sm.DBA_ROLE);
comment|//
comment|//		//TODO: add if not exist
comment|//		sm.GUEST_ROLE = _addGroup(1, SecurityManager.GUEST_GROUP);
comment|//		sm.GUEST_ACCOUNT = _addAccount(1, SecurityManager.GUEST_USER, sm.GUEST_ROLE);
comment|//		sm.GUEST_ACCOUNT.setPassword(SecurityManager.GUEST_USER);
comment|//
comment|//		//TODO: add if not exist
comment|//		//UNDERSTAND: can it be without admin user?
comment|//		Account account = _addAccount(2, "admin", sm.DBA_ROLE);
comment|//		account.setDefaultRole(sm.DBA_ROLE);
comment|//		account.setPassword("");
block|}
comment|//	@Override
comment|//	public boolean isConfigured() {
comment|//		return configuration != null;
comment|//	}
comment|//
comment|//	@Override
comment|//	public Configuration getConfiguration() {
comment|//		return configuration;
comment|//	}
annotation|@
name|Override
specifier|public
name|String
name|getId
parameter_list|()
block|{
return|return
name|ID
return|;
block|}
specifier|public
name|void
name|attach
parameter_list|(
name|BrokerPool
name|db
parameter_list|)
throws|throws
name|EXistException
block|{
name|BrokerPool
name|pool
init|=
name|db
decl_stmt|;
name|DBBroker
name|broker
init|=
name|pool
operator|.
name|get
argument_list|(
name|pool
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getSystemAccount
argument_list|()
argument_list|)
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|pool
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Collection
name|sysCollection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|sysCollection
operator|==
literal|null
condition|)
block|{
name|txn
operator|=
name|transact
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|sysCollection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|txn
argument_list|,
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION_URI
argument_list|)
expr_stmt|;
if|if
condition|(
name|sysCollection
operator|==
literal|null
condition|)
return|return;
name|sysCollection
operator|.
name|setPermissions
argument_list|(
literal|0770
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|sysCollection
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
name|Document
name|acl
init|=
name|sysCollection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|ACL_FILE_URI
argument_list|)
decl_stmt|;
name|Element
name|docElement
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|acl
operator|!=
literal|null
condition|)
name|docElement
operator|=
name|acl
operator|.
name|getDocumentElement
argument_list|()
expr_stmt|;
if|if
condition|(
name|docElement
operator|==
literal|null
condition|)
block|{
name|_save
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// LOG.debug("loading acl");
name|Element
name|root
init|=
name|acl
operator|.
name|getDocumentElement
argument_list|()
decl_stmt|;
name|Attr
name|version
init|=
name|root
operator|.
name|getAttributeNode
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
name|int
name|major
init|=
literal|0
decl_stmt|;
name|int
name|minor
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|version
operator|!=
literal|null
condition|)
block|{
name|String
index|[]
name|numbers
init|=
name|version
operator|.
name|getValue
argument_list|()
operator|.
name|split
argument_list|(
literal|"\\."
argument_list|)
decl_stmt|;
name|major
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numbers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|minor
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|numbers
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|NodeList
name|nl
init|=
name|root
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Node
name|node
decl_stmt|;
name|Element
name|next
decl_stmt|;
name|User
name|account
init|=
literal|null
decl_stmt|;
name|Group
name|group
init|=
literal|null
decl_stmt|;
name|NodeList
name|ul
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|nl
operator|.
name|item
argument_list|(
name|i
argument_list|)
operator|.
name|getNodeType
argument_list|()
operator|!=
name|Node
operator|.
name|ELEMENT_NODE
condition|)
continue|continue;
name|next
operator|=
operator|(
name|Element
operator|)
name|nl
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|next
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"users"
argument_list|)
condition|)
block|{
name|ul
operator|=
name|next
operator|.
name|getChildNodes
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ul
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|node
operator|=
name|ul
operator|.
name|item
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|node
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"user"
argument_list|)
condition|)
block|{
name|account
operator|=
operator|new
name|UserImpl
argument_list|(
name|major
argument_list|,
name|minor
argument_list|,
operator|(
name|Element
operator|)
name|node
argument_list|)
expr_stmt|;
name|users
operator|.
name|put
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|,
name|account
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|else if
condition|(
name|next
operator|.
name|getTagName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"groups"
argument_list|)
condition|)
block|{
name|ul
operator|=
name|next
operator|.
name|getChildNodes
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|ul
operator|.
name|getLength
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|node
operator|=
name|ul
operator|.
name|item
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
operator|==
name|Node
operator|.
name|ELEMENT_NODE
operator|&&
name|node
operator|.
name|getLocalName
argument_list|()
operator|.
name|equals
argument_list|(
literal|"group"
argument_list|)
condition|)
block|{
name|group
operator|=
operator|new
name|GroupImpl
argument_list|(
operator|(
name|Element
operator|)
name|node
argument_list|)
expr_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
comment|// LOG.debug("loading acl failed: " + e.getMessage());
block|}
block|}
specifier|private
name|Group
name|_addGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|groups
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Group "
operator|+
name|name
operator|+
literal|" exist."
argument_list|)
throw|;
name|Group
name|group
init|=
operator|new
name|GroupImpl
argument_list|(
name|name
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
comment|//XXX: next id
name|groups
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
specifier|private
name|Group
name|_addGroup
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|)
block|{
if|if
condition|(
name|groups
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Group "
operator|+
name|name
operator|+
literal|" exist."
argument_list|)
throw|;
name|Group
name|group
init|=
operator|new
name|GroupImpl
argument_list|(
name|name
argument_list|,
name|id
argument_list|)
decl_stmt|;
name|groups
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|group
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
specifier|public
specifier|synchronized
name|Group
name|addGroup
parameter_list|(
name|String
name|name
parameter_list|)
block|{
name|Group
name|group
init|=
name|_addGroup
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|_save
argument_list|()
expr_stmt|;
return|return
name|group
return|;
block|}
specifier|public
specifier|synchronized
name|boolean
name|hasRole
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|groups
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|Group
name|getRole
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|groups
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|synchronized
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Group
argument_list|>
name|getRoles
parameter_list|()
block|{
return|return
name|groups
operator|.
name|values
argument_list|()
return|;
block|}
specifier|private
name|User
name|_addAccount
parameter_list|(
name|int
name|id
parameter_list|,
name|String
name|name
parameter_list|,
name|Group
name|defaultRole
parameter_list|)
block|{
if|if
condition|(
name|users
operator|.
name|containsKey
argument_list|(
name|name
argument_list|)
condition|)
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User "
operator|+
name|name
operator|+
literal|" exist."
argument_list|)
throw|;
name|User
name|account
init|=
operator|new
name|UserImpl
argument_list|(
name|id
argument_list|,
name|name
argument_list|,
name|defaultRole
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
comment|//XXX: this as first arg
name|users
operator|.
name|put
argument_list|(
name|name
argument_list|,
name|account
argument_list|)
expr_stmt|;
return|return
name|account
return|;
block|}
annotation|@
name|Override
specifier|public
name|User
name|getAccount
parameter_list|(
name|String
name|name
parameter_list|)
block|{
return|return
name|users
operator|.
name|get
argument_list|(
name|name
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|User
argument_list|>
name|getAccounts
parameter_list|()
block|{
return|return
name|users
operator|.
name|values
argument_list|()
return|;
block|}
specifier|public
specifier|synchronized
name|void
name|deleteAccount
parameter_list|(
name|User
name|user
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
name|user
operator|==
literal|null
condition|)
return|return;
name|user
operator|=
name|users
operator|.
name|remove
argument_list|(
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
comment|//		if(user != null)
comment|//			LOG.debug("user " + user.getName() + " removed");
comment|//		else
comment|//			LOG.debug("user not found");
name|_save
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|User
name|authenticate
parameter_list|(
name|String
name|accountName
parameter_list|,
name|Object
name|credentials
parameter_list|)
throws|throws
name|AuthenticationException
block|{
name|User
name|user
init|=
name|getAccount
argument_list|(
name|accountName
argument_list|)
decl_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Acount "
operator|+
name|accountName
operator|+
literal|" not found"
argument_list|)
throw|;
name|User
name|newUser
init|=
operator|new
name|UserImpl
argument_list|(
name|this
argument_list|,
operator|(
name|UserImpl
operator|)
name|user
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
name|newUser
operator|.
name|isAuthenticated
argument_list|()
condition|)
return|return
name|newUser
return|;
throw|throw
operator|new
name|AuthenticationException
argument_list|(
literal|"Wrong password for user ["
operator|+
name|accountName
operator|+
literal|"] "
argument_list|)
throw|;
block|}
specifier|private
name|void
name|_save
parameter_list|()
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|transact
init|=
name|sm
operator|.
name|getDatabase
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|=
name|sm
operator|.
name|getDatabase
argument_list|()
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
name|_save
argument_list|(
name|broker
argument_list|,
name|txn
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|EXistException
name|e
parameter_list|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
block|}
finally|finally
block|{
name|sm
operator|.
name|getDatabase
argument_list|()
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|synchronized
name|void
name|_save
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|)
throws|throws
name|EXistException
block|{
comment|//LOG.debug("storing acl file");
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<!-- Central user configuration. Editing this document will cause the security "
operator|+
literal|"to reload and update its internal database. Please handle with care! -->"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<auth version='1.0'>"
argument_list|)
expr_stmt|;
comment|// save groups
name|buf
operator|.
name|append
argument_list|(
literal|"<!-- Please do not remove the guest and admin groups -->"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<groups>"
argument_list|)
expr_stmt|;
for|for
control|(
name|Group
name|group
range|:
name|groups
operator|.
name|values
argument_list|()
control|)
name|buf
operator|.
name|append
argument_list|(
name|group
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</groups>"
argument_list|)
expr_stmt|;
comment|//save users
name|buf
operator|.
name|append
argument_list|(
literal|"<!-- Please do not remove the admin user. -->"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<users>"
argument_list|)
expr_stmt|;
for|for
control|(
name|User
name|account
range|:
name|users
operator|.
name|values
argument_list|()
control|)
name|buf
operator|.
name|append
argument_list|(
name|account
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</users>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</auth>"
argument_list|)
expr_stmt|;
comment|// store users.xml
comment|//broker.flush();
comment|//broker.sync(Sync.MAJOR_SYNC);
comment|//User currentUser = broker.getUser();
try|try
block|{
comment|//broker.setUser(getUser(DBA_USER));
name|Collection
name|sysCollection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION_URI
argument_list|)
decl_stmt|;
name|String
name|data
init|=
name|buf
operator|.
name|toString
argument_list|()
decl_stmt|;
name|IndexInfo
name|info
init|=
name|sysCollection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|ACL_FILE_URI
argument_list|,
name|data
argument_list|)
decl_stmt|;
comment|//TODO : unlock the collection here ?
name|DocumentImpl
name|doc
init|=
name|info
operator|.
name|getDocument
argument_list|()
decl_stmt|;
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|MimeType
operator|.
name|XML_TYPE
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|sysCollection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|data
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|doc
operator|.
name|setPermissions
argument_list|(
literal|0770
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|doc
operator|.
name|getCollection
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|TriggerException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|SAXException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|EXistException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
comment|//broker.setUser(currentUser);
block|}
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
name|broker
operator|.
name|sync
argument_list|(
name|Sync
operator|.
name|MAJOR_SYNC
argument_list|)
expr_stmt|;
block|}
specifier|private
name|void
name|createUserHome
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|transaction
parameter_list|,
name|User
name|account
parameter_list|)
throws|throws
name|EXistException
throws|,
name|PermissionDeniedException
throws|,
name|IOException
block|{
if|if
condition|(
name|account
operator|.
name|getHome
argument_list|()
operator|==
literal|null
condition|)
return|return;
name|User
name|currentUser
init|=
name|broker
operator|.
name|getUser
argument_list|()
decl_stmt|;
try|try
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|getAccount
argument_list|(
name|SecurityManager
operator|.
name|DBA_USER
argument_list|)
argument_list|)
expr_stmt|;
name|Collection
name|home
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|account
operator|.
name|getHome
argument_list|()
argument_list|)
decl_stmt|;
name|home
operator|.
name|getPermissions
argument_list|()
operator|.
name|setOwner
argument_list|(
name|account
argument_list|)
expr_stmt|;
name|CollectionConfiguration
name|config
init|=
name|home
operator|.
name|getConfiguration
argument_list|(
name|broker
argument_list|)
decl_stmt|;
name|String
name|role
init|=
operator|(
name|config
operator|!=
literal|null
operator|)
condition|?
name|config
operator|.
name|getDefCollGroup
argument_list|(
name|account
argument_list|)
else|:
name|account
operator|.
name|getPrimaryGroup
argument_list|()
decl_stmt|;
name|home
operator|.
name|getPermissions
argument_list|()
operator|.
name|setGroup
argument_list|(
name|role
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|home
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|broker
operator|.
name|setUser
argument_list|(
name|currentUser
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAccount
parameter_list|(
name|String
name|accountName
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
return|return
literal|false
return|;
block|}
block|}
end_class

end_unit

