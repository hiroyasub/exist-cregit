begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010-2011 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|gnu
operator|.
name|crypto
operator|.
name|hash
operator|.
name|MD5
import|;
end_import

begin_import
import|import
name|gnu
operator|.
name|crypto
operator|.
name|hash
operator|.
name|RipeMD160
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Base64
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|MessageDigester
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  * @author<a href="mailto:adam.retter@gmail.com">Adam Retter</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Password
implements|implements
name|Credential
block|{
comment|//TODO switch over to using jBCrypt
specifier|public
enum|enum
name|Hash
block|{
name|MD5
block|,
name|RIPEMD160
block|;     }
comment|//private
specifier|private
specifier|final
name|String
name|pw
decl_stmt|;
specifier|private
specifier|final
name|String
name|digestPw
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Hash
name|DEFAULT_ALGORITHM
init|=
name|Hash
operator|.
name|RIPEMD160
decl_stmt|;
specifier|private
specifier|final
name|Hash
name|algorithm
decl_stmt|;
specifier|final
name|Pattern
name|ptnHash
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"\\{([A-Z0-9]+)\\}(.*)"
argument_list|)
decl_stmt|;
specifier|final
name|Matcher
name|mtcHash
init|=
name|ptnHash
operator|.
name|matcher
argument_list|(
literal|""
argument_list|)
decl_stmt|;
specifier|public
name|Password
parameter_list|(
name|Account
name|account
parameter_list|,
name|String
name|password
parameter_list|)
block|{
if|if
condition|(
name|password
operator|==
literal|null
condition|)
block|{
name|this
operator|.
name|algorithm
operator|=
name|DEFAULT_ALGORITHM
expr_stmt|;
name|this
operator|.
name|pw
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|digestPw
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|mtcHash
operator|.
name|reset
argument_list|(
name|password
argument_list|)
expr_stmt|;
if|if
condition|(
name|mtcHash
operator|.
name|matches
argument_list|()
condition|)
block|{
name|this
operator|.
name|algorithm
operator|=
name|Hash
operator|.
name|valueOf
argument_list|(
name|mtcHash
operator|.
name|group
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|.
name|pw
operator|=
name|mtcHash
operator|.
name|group
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|this
operator|.
name|algorithm
operator|=
name|DEFAULT_ALGORITHM
expr_stmt|;
name|this
operator|.
name|pw
operator|=
name|hashAndEncode
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
name|this
operator|.
name|digestPw
operator|=
name|digest
argument_list|(
name|account
operator|.
name|getName
argument_list|()
argument_list|,
name|account
operator|.
name|getRealmId
argument_list|()
argument_list|,
name|pw
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDigest
parameter_list|()
block|{
return|return
name|digestPw
return|;
block|}
specifier|final
name|String
name|digest
parameter_list|(
name|String
name|username
parameter_list|,
name|String
name|realmId
parameter_list|,
name|String
name|p
parameter_list|)
block|{
return|return
name|MessageDigester
operator|.
name|byteArrayToHex
argument_list|(
name|hash
argument_list|(
name|username
operator|+
literal|":"
operator|+
name|realmId
operator|+
literal|":"
operator|+
name|p
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|String
name|hashAndEncode
parameter_list|(
name|String
name|p
parameter_list|)
block|{
comment|//base64 encode the hash
return|return
name|Base64
operator|.
name|encodeBase64String
argument_list|(
name|hash
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
block|}
specifier|final
name|byte
index|[]
name|hash
parameter_list|(
name|String
name|p
parameter_list|)
block|{
switch|switch
condition|(
name|algorithm
condition|)
block|{
case|case
name|RIPEMD160
case|:
return|return
name|ripemd160Hash
argument_list|(
name|p
argument_list|)
return|;
case|case
name|MD5
case|:
return|return
name|md5Hash
argument_list|(
name|p
argument_list|)
return|;
default|default:
return|return
literal|null
return|;
block|}
block|}
specifier|final
name|byte
index|[]
name|ripemd160Hash
parameter_list|(
name|String
name|p
parameter_list|)
block|{
comment|//ripemd 160 hash
specifier|final
name|RipeMD160
name|ripemd160
init|=
operator|new
name|RipeMD160
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
name|p
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|ripemd160
operator|.
name|update
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|hash
init|=
name|ripemd160
operator|.
name|digest
argument_list|()
decl_stmt|;
return|return
name|hash
return|;
block|}
specifier|final
name|byte
index|[]
name|md5Hash
parameter_list|(
name|String
name|p
parameter_list|)
block|{
comment|//ripemd 160 hash
specifier|final
name|MD5
name|md5
init|=
operator|new
name|MD5
argument_list|()
decl_stmt|;
specifier|final
name|byte
index|[]
name|data
init|=
name|p
operator|.
name|getBytes
argument_list|()
decl_stmt|;
name|md5
operator|.
name|update
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|data
operator|.
name|length
argument_list|)
expr_stmt|;
specifier|final
name|byte
index|[]
name|hash
init|=
name|md5
operator|.
name|digest
argument_list|()
decl_stmt|;
return|return
name|hash
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|check
parameter_list|(
name|Object
name|credentials
parameter_list|)
block|{
if|if
condition|(
name|credentials
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
comment|//workaround old style, remove -shabanovd
if|if
condition|(
name|credentials
operator|==
literal|null
condition|)
block|{
name|credentials
operator|=
literal|""
expr_stmt|;
block|}
if|if
condition|(
name|credentials
operator|instanceof
name|Password
operator|||
name|credentials
operator|instanceof
name|String
condition|)
block|{
return|return
name|equals
argument_list|(
name|credentials
argument_list|)
return|;
block|}
if|if
condition|(
name|credentials
operator|instanceof
name|char
index|[]
condition|)
block|{
return|return
name|equals
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
operator|(
name|char
index|[]
operator|)
name|credentials
argument_list|)
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
name|this
condition|)
block|{
return|return
literal|true
return|;
block|}
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|Password
condition|)
block|{
specifier|final
name|Password
name|p
init|=
operator|(
name|Password
operator|)
name|obj
decl_stmt|;
if|if
condition|(
name|algorithm
operator|!=
name|p
operator|.
name|algorithm
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Cannot compare passwords with different algorithms i.e. "
operator|+
name|algorithm
operator|+
literal|" and "
operator|+
name|p
operator|.
name|algorithm
argument_list|)
throw|;
block|}
return|return
operator|(
name|pw
operator|==
name|p
operator|.
name|pw
operator|||
operator|(
name|pw
operator|!=
literal|null
operator|&&
name|pw
operator|.
name|equals
argument_list|(
name|p
operator|.
name|pw
argument_list|)
operator|)
operator|)
return|;
block|}
if|if
condition|(
name|obj
operator|instanceof
name|String
condition|)
block|{
return|return
operator|(
name|hashAndEncode
argument_list|(
operator|(
name|String
operator|)
name|obj
argument_list|)
operator|)
operator|.
name|equals
argument_list|(
name|pw
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|toString
parameter_list|()
block|{
return|return
literal|"{"
operator|+
name|algorithm
operator|+
literal|"}"
operator|+
name|pw
return|;
block|}
block|}
end_class

end_unit

