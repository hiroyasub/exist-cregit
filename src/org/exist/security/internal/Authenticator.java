begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2009 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id:$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Serializable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletRequest
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpServletResponse
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSession
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSessionBindingEvent
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|servlet
operator|.
name|http
operator|.
name|HttpSessionBindingListener
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Request
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|Response
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|security
operator|.
name|Credential
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|security
operator|.
name|Password
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|security
operator|.
name|SSORealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|security
operator|.
name|UserRealm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|mortbay
operator|.
name|util
operator|.
name|StringUtil
import|;
end_import

begin_comment
comment|/**  * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Authenticator
extends|extends
name|org
operator|.
name|mortbay
operator|.
name|jetty
operator|.
name|security
operator|.
name|FormAuthenticator
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3435898377862122388L
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|Authenticator
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|AUTHENTICATED
init|=
literal|"org.exist.jetty.Auth"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|URI
init|=
literal|"org.exist.jetty.URI"
decl_stmt|;
comment|//    public final static String SECURITY_CHECK="/exist_security_check";
specifier|public
specifier|final
specifier|static
name|String
name|USERNAME
init|=
literal|"exist_username"
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|String
name|PASSWORD
init|=
literal|"exist_password"
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Principal
name|authenticate
parameter_list|(
name|UserRealm
name|realm
parameter_list|,
name|String
name|pathInContext
parameter_list|,
name|Request
name|request
parameter_list|,
name|Response
name|response
parameter_list|)
throws|throws
name|IOException
block|{
comment|// Setup session
name|HttpSession
name|session
init|=
name|request
operator|.
name|getSession
argument_list|(
name|response
operator|!=
literal|null
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
return|return
literal|null
return|;
if|if
condition|(
name|pathInContext
operator|.
name|endsWith
argument_list|(
name|__J_SECURITY_CHECK
argument_list|)
condition|)
block|{
comment|// Check the session object for login info.
name|EXistCredential
name|cred
init|=
operator|new
name|EXistCredential
argument_list|()
decl_stmt|;
name|cred
operator|.
name|authenticate
argument_list|(
name|realm
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
name|USERNAME
argument_list|)
argument_list|,
name|request
operator|.
name|getParameter
argument_list|(
name|PASSWORD
argument_list|)
argument_list|,
name|request
argument_list|)
expr_stmt|;
name|String
name|nuri
init|=
name|request
operator|.
name|getRequestURI
argument_list|()
decl_stmt|;
name|nuri
operator|=
name|nuri
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|nuri
operator|.
name|length
argument_list|()
operator|-
name|__J_SECURITY_CHECK
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|cred
operator|.
name|user
operator|!=
literal|null
condition|)
block|{
comment|// Authenticated OK
name|session
operator|.
name|removeAttribute
argument_list|(
name|URI
argument_list|)
expr_stmt|;
comment|// Remove popped return URI.
name|request
operator|.
name|setAuthType
argument_list|(
name|getAuthMethod
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUserPrincipal
argument_list|(
name|cred
operator|.
name|user
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|AUTHENTICATED
argument_list|,
name|cred
argument_list|)
expr_stmt|;
comment|// Sign-on to SSO mechanism
if|if
condition|(
name|realm
operator|instanceof
name|SSORealm
condition|)
operator|(
operator|(
name|SSORealm
operator|)
name|realm
operator|)
operator|.
name|setSingleSignOn
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|cred
operator|.
name|user
argument_list|,
operator|new
name|Password
argument_list|(
name|cred
operator|.
name|_password
argument_list|)
argument_list|)
expr_stmt|;
comment|// Redirect to original request
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
block|{
name|response
operator|.
name|setContentLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|response
operator|.
name|sendRedirect
argument_list|(
name|response
operator|.
name|encodeRedirectURL
argument_list|(
name|nuri
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Form authentication FAILED for "
operator|+
name|StringUtil
operator|.
name|printable
argument_list|(
name|cred
operator|.
name|_username
argument_list|)
argument_list|)
expr_stmt|;
comment|//                if (_formErrorPage==null) {
if|if
condition|(
name|response
operator|!=
literal|null
condition|)
name|response
operator|.
name|sendError
argument_list|(
name|HttpServletResponse
operator|.
name|SC_FORBIDDEN
argument_list|)
expr_stmt|;
comment|//                } else {
comment|//                    if (response != null)
comment|//                        response.setContentLength(0);
comment|//                        response.sendRedirect(response.encodeRedirectURL
comment|//                                          (URIUtil.addPaths(request.getContextPath(),
comment|//                                                        _formErrorPage)));
block|}
comment|// Security check is always false, only true after final redirection.
return|return
literal|null
return|;
block|}
comment|// Check if the session is already authenticated.
name|EXistCredential
name|cred
init|=
operator|(
name|EXistCredential
operator|)
name|session
operator|.
name|getAttribute
argument_list|(
name|AUTHENTICATED
argument_list|)
decl_stmt|;
if|if
condition|(
name|cred
operator|!=
literal|null
condition|)
block|{
comment|// We have a credential. Has it been distributed?
if|if
condition|(
name|cred
operator|.
name|user
operator|==
literal|null
condition|)
block|{
comment|// This credential appears to have been distributed.  Need to reauth
name|cred
operator|.
name|authenticate
argument_list|(
name|realm
argument_list|,
name|request
argument_list|)
expr_stmt|;
comment|// Sign-on to SSO mechanism
if|if
condition|(
name|cred
operator|.
name|user
operator|!=
literal|null
operator|&&
name|realm
operator|instanceof
name|SSORealm
condition|)
operator|(
operator|(
name|SSORealm
operator|)
name|realm
operator|)
operator|.
name|setSingleSignOn
argument_list|(
name|request
argument_list|,
name|response
argument_list|,
name|cred
operator|.
name|user
argument_list|,
operator|new
name|Password
argument_list|(
name|cred
operator|.
name|_password
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
operator|!
name|realm
operator|.
name|reauthenticate
argument_list|(
name|cred
operator|.
name|user
argument_list|)
condition|)
comment|// Else check that it is still authenticated.
name|cred
operator|.
name|user
operator|=
literal|null
expr_stmt|;
comment|// If this credential is still authenticated
if|if
condition|(
name|cred
operator|.
name|user
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"FORM Authenticated for "
operator|+
name|cred
operator|.
name|user
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAuthType
argument_list|(
name|getAuthMethod
argument_list|()
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUserPrincipal
argument_list|(
name|cred
operator|.
name|user
argument_list|)
expr_stmt|;
return|return
name|cred
operator|.
name|user
return|;
block|}
else|else
name|session
operator|.
name|setAttribute
argument_list|(
name|AUTHENTICATED
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|realm
operator|instanceof
name|SSORealm
condition|)
block|{
comment|// Try a single sign on.
name|Credential
name|credSSO
init|=
operator|(
operator|(
name|SSORealm
operator|)
name|realm
operator|)
operator|.
name|getSingleSignOn
argument_list|(
name|request
argument_list|,
name|response
argument_list|)
decl_stmt|;
if|if
condition|(
name|request
operator|.
name|getUserPrincipal
argument_list|()
operator|!=
literal|null
condition|)
block|{
name|cred
operator|=
operator|new
name|EXistCredential
argument_list|()
expr_stmt|;
name|cred
operator|.
name|user
operator|=
name|request
operator|.
name|getUserPrincipal
argument_list|()
expr_stmt|;
name|cred
operator|.
name|_username
operator|=
name|cred
operator|.
name|user
operator|.
name|getName
argument_list|()
expr_stmt|;
if|if
condition|(
name|credSSO
operator|!=
literal|null
condition|)
name|cred
operator|.
name|_password
operator|=
name|credSSO
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"SSO for "
operator|+
name|cred
operator|.
name|user
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAuthType
argument_list|(
name|getAuthMethod
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|setAttribute
argument_list|(
name|AUTHENTICATED
argument_list|,
name|cred
argument_list|)
expr_stmt|;
return|return
name|cred
operator|.
name|user
return|;
block|}
block|}
comment|//        // Don't authenticate authform or errorpage
comment|//        if (isLoginOrErrorPage(pathInContext))
comment|//            return SecurityHandler.__NOBODY;
comment|//
comment|//        // redirect to login page
comment|//        if (response!=null)
comment|//        {
comment|//            if (request.getQueryString()!=null)
comment|//                uri+="?"+request.getQueryString();
comment|//            session.setAttribute(URI,
comment|//                                 request.getScheme() +
comment|//                                 "://" + request.getServerName() +
comment|//                                 ":" + request.getServerPort() +
comment|//                                 URIUtil.addPaths(request.getContextPath(),uri));
comment|//            response.setContentLength(0);
comment|//            response.sendRedirect(response.encodeRedirectURL(URIUtil.addPaths(request.getContextPath(),
comment|//                                                                          _formLoginPage)));
comment|//        }
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAuthMethod
parameter_list|()
block|{
return|return
name|HttpServletRequest
operator|.
name|FORM_AUTH
return|;
block|}
specifier|private
specifier|static
class|class
name|EXistCredential
implements|implements
name|Serializable
implements|,
name|HttpSessionBindingListener
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3962684008216876908L
decl_stmt|;
specifier|private
name|Principal
name|user
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|_username
decl_stmt|;
specifier|private
name|String
name|_password
decl_stmt|;
specifier|private
name|boolean
name|authenticate
parameter_list|(
name|UserRealm
name|realm
parameter_list|,
name|String
name|username
parameter_list|,
name|String
name|password
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
name|_username
operator|=
name|username
expr_stmt|;
name|_password
operator|=
name|password
expr_stmt|;
name|user
operator|=
name|realm
operator|.
name|authenticate
argument_list|(
name|username
argument_list|,
name|password
argument_list|,
name|request
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|warn
argument_list|(
literal|"AUTH FAILURE: user "
operator|+
name|request
operator|.
name|getParameter
argument_list|(
name|USERNAME
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUserPrincipal
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
name|LOG
operator|.
name|debug
argument_list|(
literal|"Form authentication OK for "
operator|+
name|username
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|public
name|void
name|authenticate
parameter_list|(
name|UserRealm
name|realm
parameter_list|,
name|Request
name|request
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|valueBound
parameter_list|(
name|HttpSessionBindingEvent
name|event
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
annotation|@
name|Override
specifier|public
name|void
name|valueUnbound
parameter_list|(
name|HttpSessionBindingEvent
name|event
parameter_list|)
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
block|}
end_class

end_unit

