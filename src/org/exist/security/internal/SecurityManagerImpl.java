begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2015 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|scheduler
operator|.
name|JobDescription
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AbstractRealm
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|ReadLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|locks
operator|.
name|ReentrantReadWriteLock
operator|.
name|WriteLock
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|Database
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configurator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|annotation
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AuthenticationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Group
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SecurityManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Session
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Account
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Principal
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|SchemaType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|GroupAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|Realm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolService
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPoolServiceException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
operator|.
name|Int2ObjectHashMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobDataMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionContext
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|JobExecutionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|quartz
operator|.
name|SimpleTrigger
import|;
end_import

begin_comment
comment|/**  * SecurityManager is responsible for managing users and groups.  *   * There's only one SecurityManager for each database instance, which  * may be obtained by {@link BrokerPool#getSecurityManager()}.  *   * Users and groups are stored in the system collection, in document  * users.xml. While it is possible to edit this file by hand, it  * may lead to unexpected results, since SecurityManager reads   * users.xml only during database startup and shutdown.  */
end_comment

begin_comment
comment|//<!-- Central user configuration. Editing this document will cause the security to reload and update its internal database. Please handle with care! -->
end_comment

begin_class
annotation|@
name|ConfigurationClass
argument_list|(
literal|"security-manager"
argument_list|)
specifier|public
class|class
name|SecurityManagerImpl
implements|implements
name|SecurityManager
implements|,
name|BrokerPoolService
block|{
specifier|public
specifier|final
specifier|static
name|int
name|MAX_USER_ID
init|=
literal|1048571
decl_stmt|;
comment|//1 less than RealmImpl.UNKNOWN_ACCOUNT_ID
specifier|public
specifier|final
specifier|static
name|int
name|MAX_GROUP_ID
init|=
literal|1048572
decl_stmt|;
comment|//1 less than RealmImpl.UNKNOWN_GROUP_ID
specifier|public
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|SecurityManager
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|private
name|Database
name|db
decl_stmt|;
specifier|protected
name|PrincipalDbById
argument_list|<
name|Group
argument_list|>
name|groupsById
init|=
operator|new
name|PrincipalDbById
argument_list|<>
argument_list|()
decl_stmt|;
specifier|protected
name|PrincipalDbById
argument_list|<
name|Account
argument_list|>
name|usersById
init|=
operator|new
name|PrincipalDbById
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PrincipalLocks
argument_list|<
name|Account
argument_list|>
name|accountLocks
init|=
operator|new
name|PrincipalLocks
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|PrincipalLocks
argument_list|<
name|Group
argument_list|>
name|groupLocks
init|=
operator|new
name|PrincipalLocks
argument_list|<>
argument_list|()
decl_stmt|;
comment|//TODO: validate& remove if session timeout
specifier|private
name|SessionDb
name|sessions
init|=
operator|new
name|SessionDb
argument_list|()
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"last-account-id"
argument_list|)
specifier|protected
name|int
name|lastUserId
init|=
literal|0
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"last-group-id"
argument_list|)
specifier|protected
name|int
name|lastGroupId
init|=
literal|0
decl_stmt|;
annotation|@
name|ConfigurationFieldAsAttribute
argument_list|(
literal|"version"
argument_list|)
specifier|private
name|String
name|version
init|=
literal|"2.0"
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"authentication-entry-point"
argument_list|)
specifier|public
specifier|final
specifier|static
name|String
name|authenticationEntryPoint
init|=
literal|"/authentication/login"
decl_stmt|;
specifier|private
name|RealmImpl
name|defaultRealm
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"realm"
argument_list|)
annotation|@
name|ConfigurationFieldClassMask
argument_list|(
literal|"org.exist.security.realm.%1$s.%2$sRealm"
argument_list|)
specifier|private
name|List
argument_list|<
name|Realm
argument_list|>
name|realms
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|ConfigurationFieldAsElement
argument_list|(
literal|"events"
argument_list|)
comment|//@ConfigurationFieldClassMask("org.exist.security.internal.SMEvents")
specifier|private
name|SMEvents
name|events
init|=
literal|null
decl_stmt|;
specifier|private
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
specifier|private
name|Configuration
name|configuration
init|=
literal|null
decl_stmt|;
specifier|public
name|SecurityManagerImpl
parameter_list|(
specifier|final
name|Database
name|db
parameter_list|)
block|{
name|this
operator|.
name|db
operator|=
name|db
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|configure
parameter_list|(
specifier|final
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|Configuration
name|configuration
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
try|try
block|{
name|this
operator|.
name|defaultRealm
operator|=
operator|new
name|RealmImpl
argument_list|(
name|this
argument_list|,
literal|null
argument_list|)
expr_stmt|;
comment|//TODO: in-memory configuration???
name|realms
operator|.
name|add
argument_list|(
name|defaultRealm
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|ConfigurationException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BrokerPoolServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|prepare
parameter_list|(
specifier|final
name|BrokerPool
name|brokerPool
parameter_list|)
block|{
specifier|final
name|Properties
name|params
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
name|params
operator|.
name|put
argument_list|(
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|db
operator|.
name|getScheduler
argument_list|()
operator|.
name|createPeriodicJob
argument_list|(
name|TIMEOUT_CHECK_PERIOD
argument_list|,
operator|new
name|SessionsCheck
argument_list|()
argument_list|,
name|TIMEOUT_CHECK_PERIOD
argument_list|,
name|params
argument_list|,
name|SimpleTrigger
operator|.
name|REPEAT_INDEFINITELY
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|startSystem
parameter_list|(
specifier|final
name|DBBroker
name|systemBroker
parameter_list|)
throws|throws
name|BrokerPoolServiceException
block|{
try|try
block|{
name|attach
argument_list|(
name|systemBroker
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|BrokerPoolServiceException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Initialize the security manager.      *       * Checks if the file users.xml exists in the system collection of the database.      * If not, it is created with two default users: admin and guest.      *        * @param broker      */
annotation|@
name|Override
specifier|public
name|void
name|attach
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|EXistException
block|{
comment|//groups = new Int2ObjectHashMap<Group>(65);
comment|//users = new Int2ObjectHashMap<User>(65);
name|db
operator|=
name|broker
operator|.
name|getDatabase
argument_list|()
expr_stmt|;
comment|//TODO: check that db is same?
specifier|final
name|TransactionManager
name|transaction
init|=
name|db
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Collection
name|systemCollection
init|=
literal|null
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|txn
init|=
name|transaction
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|systemCollection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION_URI
argument_list|)
expr_stmt|;
if|if
condition|(
name|systemCollection
operator|==
literal|null
condition|)
block|{
name|systemCollection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|txn
argument_list|,
name|XmldbURI
operator|.
name|SYSTEM_COLLECTION_URI
argument_list|)
expr_stmt|;
if|if
condition|(
name|systemCollection
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|systemCollection
operator|.
name|setPermissions
argument_list|(
name|Permission
operator|.
name|DEFAULT_SYSTEM_COLLECTION_PERM
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|systemCollection
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading acl failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
try|try
init|(
specifier|final
name|Txn
name|txn
init|=
name|transaction
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|SECURITY_COLLECTION_URI
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|collection
operator|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|txn
argument_list|,
name|SECURITY_COLLECTION_URI
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
return|return;
block|}
comment|//if db corrupted it can lead to unrunnable issue
comment|//throw new ConfigurationException("Collection '/db/system/security' can't be created.");
name|collection
operator|.
name|setPermissions
argument_list|(
name|Permission
operator|.
name|DEFAULT_SYSTEM_SECURITY_COLLECTION_PERM
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|collection
argument_list|)
expr_stmt|;
block|}
name|transaction
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
name|LOG
operator|.
name|debug
argument_list|(
literal|"loading configuration failed: "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Configuration
name|_config_
init|=
name|Configurator
operator|.
name|parse
argument_list|(
name|this
argument_list|,
name|broker
argument_list|,
name|collection
argument_list|,
name|CONFIG_FILE_URI
argument_list|)
decl_stmt|;
name|configuration
operator|=
name|Configurator
operator|.
name|configure
argument_list|(
name|this
argument_list|,
name|_config_
argument_list|)
expr_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|realm
operator|.
name|start
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateAccount
parameter_list|(
specifier|final
name|Account
name|account
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|account
operator|.
name|getRealmId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Account must have realm id."
argument_list|)
throw|;
block|}
specifier|final
name|Lock
name|lock
init|=
name|accountLocks
operator|.
name|getWriteLock
argument_list|(
name|account
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|findRealmForRealmId
argument_list|(
name|account
operator|.
name|getRealmId
argument_list|()
argument_list|)
operator|.
name|updateAccount
argument_list|(
name|account
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|updateGroup
parameter_list|(
specifier|final
name|Group
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|group
operator|.
name|getRealmId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Group must have realm id."
argument_list|)
throw|;
block|}
specifier|final
name|Lock
name|lock
init|=
name|groupLocks
operator|.
name|getWriteLock
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|findRealmForRealmId
argument_list|(
name|group
operator|.
name|getRealmId
argument_list|()
argument_list|)
operator|.
name|updateGroup
argument_list|(
name|group
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|Group
name|group
init|=
name|getGroup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|group
operator|.
name|getRealmId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Group must have realm id."
argument_list|)
throw|;
block|}
specifier|final
name|Lock
name|lock
init|=
name|groupLocks
operator|.
name|getWriteLock
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|findRealmForRealmId
argument_list|(
name|group
operator|.
name|getRealmId
argument_list|()
argument_list|)
operator|.
name|deleteGroup
argument_list|(
name|group
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
return|return
name|deleteAccount
argument_list|(
name|getAccount
argument_list|(
name|name
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|deleteAccount
parameter_list|(
specifier|final
name|Account
name|account
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
if|if
condition|(
name|account
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|account
operator|.
name|getRealmId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Account must have realm id."
argument_list|)
throw|;
block|}
specifier|final
name|Lock
name|lock
init|=
name|accountLocks
operator|.
name|getWriteLock
argument_list|(
name|account
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|findRealmForRealmId
argument_list|(
name|account
operator|.
name|getRealmId
argument_list|()
argument_list|)
operator|.
name|deleteAccount
argument_list|(
name|account
argument_list|)
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Account
name|getAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
comment|//        if (SYSTEM.equals(name)) {
comment|//            return defaultRealm.ACCOUNT_SYSTEM;
comment|//        }
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
specifier|final
name|Account
name|account
init|=
name|realm
operator|.
name|getAccount
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|account
operator|!=
literal|null
condition|)
block|{
return|return
name|account
return|;
block|}
block|}
name|LOG
operator|.
name|debug
argument_list|(
literal|"Account for '"
operator|+
name|name
operator|+
literal|"' not found!"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Account
name|getAccount
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
return|return
name|usersById
operator|.
name|read
argument_list|(
name|principalDb
lambda|->
name|principalDb
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
if|if
condition|(
name|realm
operator|.
name|hasGroup
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGroup
parameter_list|(
specifier|final
name|Group
name|group
parameter_list|)
block|{
return|return
name|hasGroup
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|getGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
specifier|final
name|Group
name|group
init|=
name|realm
operator|.
name|getGroup
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|group
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Group
name|getGroup
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
return|return
name|groupsById
operator|.
name|read
argument_list|(
name|principalDb
lambda|->
name|principalDb
operator|.
name|get
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAdminPrivileges
parameter_list|(
specifier|final
name|Account
name|user
parameter_list|)
block|{
specifier|final
name|Lock
name|lock
init|=
name|accountLocks
operator|.
name|getReadLock
argument_list|(
name|user
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|user
operator|.
name|hasDbaRole
argument_list|()
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasAccount
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
block|{
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
if|if
condition|(
name|realm
operator|.
name|hasAccount
argument_list|(
name|name
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|Subject
name|authenticate
parameter_list|(
specifier|final
name|String
name|username
parameter_list|,
specifier|final
name|Object
name|credentials
parameter_list|)
throws|throws
name|AuthenticationException
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authentication try for '"
operator|+
name|username
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|username
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|ACCOUNT_NOT_FOUND
argument_list|,
literal|"Account NULL not found"
argument_list|)
throw|;
block|}
if|if
condition|(
literal|"jsessionid"
operator|.
name|equals
argument_list|(
name|username
argument_list|)
condition|)
block|{
if|if
condition|(
name|getSystemSubject
argument_list|()
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|credentials
argument_list|)
condition|)
block|{
return|return
name|getSystemSubject
argument_list|()
return|;
block|}
if|if
condition|(
name|getGuestSubject
argument_list|()
operator|.
name|getSessionId
argument_list|()
operator|.
name|equals
argument_list|(
name|credentials
argument_list|)
condition|)
block|{
return|return
name|getGuestSubject
argument_list|()
return|;
block|}
specifier|final
name|Subject
name|subject
init|=
name|sessions
operator|.
name|read
argument_list|(
name|db1
lambda|->
block|{
specifier|final
name|Session
name|session
init|=
name|db1
operator|.
name|get
argument_list|(
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|session
operator|.
name|isValid
argument_list|()
condition|)
block|{
return|return
name|session
operator|.
name|getSubject
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
decl_stmt|;
if|if
condition|(
name|subject
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|SESSION_NOT_FOUND
argument_list|,
literal|"Session ["
operator|+
name|credentials
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
name|events
operator|.
name|authenticated
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
comment|//TODO: validate session
return|return
name|subject
return|;
block|}
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
try|try
block|{
specifier|final
name|Subject
name|subject
init|=
name|realm
operator|.
name|authenticate
argument_list|(
name|username
argument_list|,
name|credentials
argument_list|)
decl_stmt|;
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Authenticated by '"
operator|+
name|realm
operator|.
name|getId
argument_list|()
operator|+
literal|"' as '"
operator|+
name|subject
operator|+
literal|"'."
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|events
operator|!=
literal|null
condition|)
block|{
name|events
operator|.
name|authenticated
argument_list|(
name|subject
argument_list|)
expr_stmt|;
block|}
return|return
name|subject
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|AuthenticationException
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|.
name|getType
argument_list|()
operator|!=
name|AuthenticationException
operator|.
name|ACCOUNT_NOT_FOUND
condition|)
block|{
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Realm '"
operator|+
name|realm
operator|.
name|getId
argument_list|()
operator|+
literal|"' threw exception for account '"
operator|+
name|username
operator|+
literal|"'. ["
operator|+
name|e
operator|.
name|getMessage
argument_list|()
operator|+
literal|"]"
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
block|}
block|}
if|if
condition|(
name|LOG
operator|.
name|isDebugEnabled
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Account '"
operator|+
name|username
operator|+
literal|"' not found, throw error"
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|AuthenticationException
argument_list|(
name|AuthenticationException
operator|.
name|ACCOUNT_NOT_FOUND
argument_list|,
literal|"Account ["
operator|+
name|username
operator|+
literal|"] not found"
argument_list|)
throw|;
block|}
specifier|protected
name|Subject
name|systemSubject
init|=
literal|null
decl_stmt|;
specifier|protected
name|Subject
name|guestSubject
init|=
literal|null
decl_stmt|;
annotation|@
name|Override
specifier|public
name|Subject
name|getSystemSubject
parameter_list|()
block|{
if|if
condition|(
name|systemSubject
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|systemSubject
operator|==
literal|null
condition|)
block|{
name|systemSubject
operator|=
operator|new
name|SubjectAccreditedImpl
argument_list|(
name|defaultRealm
operator|.
name|ACCOUNT_SYSTEM
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|systemSubject
return|;
block|}
annotation|@
name|Override
specifier|public
name|Subject
name|getGuestSubject
parameter_list|()
block|{
if|if
condition|(
name|guestSubject
operator|==
literal|null
condition|)
block|{
synchronized|synchronized
init|(
name|this
init|)
block|{
if|if
condition|(
name|guestSubject
operator|==
literal|null
condition|)
block|{
name|guestSubject
operator|=
operator|new
name|SubjectAccreditedImpl
argument_list|(
operator|(
name|AccountImpl
operator|)
name|defaultRealm
operator|.
name|getAccount
argument_list|(
name|SecurityManager
operator|.
name|GUEST_USER
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|guestSubject
return|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|getDBAGroup
parameter_list|()
block|{
return|return
name|defaultRealm
operator|.
name|GROUP_DBA
return|;
block|}
annotation|@
name|Override
specifier|public
name|Database
name|getDatabase
parameter_list|()
block|{
return|return
name|db
return|;
block|}
annotation|@
name|Override
specifier|public
name|Database
name|database
parameter_list|()
block|{
return|return
name|db
return|;
block|}
specifier|private
specifier|synchronized
name|int
name|getNextGroupId
parameter_list|()
block|{
if|if
condition|(
name|lastGroupId
operator|+
literal|1
operator|==
name|MAX_GROUP_ID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"System has no more group-ids available"
argument_list|)
throw|;
block|}
return|return
operator|++
name|lastGroupId
return|;
block|}
specifier|private
specifier|synchronized
name|int
name|getNextAccountId
parameter_list|()
block|{
if|if
condition|(
name|lastUserId
operator|+
literal|1
operator|==
name|MAX_USER_ID
condition|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"System has no more user-ids available"
argument_list|)
throw|;
block|}
return|return
operator|++
name|lastUserId
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|Account
argument_list|>
name|getGroupMembers
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|Account
argument_list|>
name|groupMembers
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|groupMembers
operator|.
name|addAll
argument_list|(
name|realm
operator|.
name|getAccounts
argument_list|()
operator|.
name|stream
argument_list|()
operator|.
name|filter
argument_list|(
name|account
lambda|->
name|account
operator|.
name|hasGroup
argument_list|(
name|groupName
argument_list|)
argument_list|)
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|groupMembers
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findAllGroupMembers
parameter_list|(
specifier|final
name|String
name|groupName
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|userNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|userNames
operator|.
name|addAll
argument_list|(
name|realm
operator|.
name|findAllGroupMembers
argument_list|(
name|groupName
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|userNames
return|;
block|}
annotation|@
name|Deprecated
comment|//use realm's getAccounts
annotation|@
name|Override
specifier|public
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Account
argument_list|>
name|getUsers
parameter_list|()
block|{
return|return
name|defaultRealm
operator|.
name|getAccounts
argument_list|()
return|;
block|}
annotation|@
name|Deprecated
comment|//use realm's getGroups
annotation|@
name|Override
specifier|public
name|java
operator|.
name|util
operator|.
name|Collection
argument_list|<
name|Group
argument_list|>
name|getGroups
parameter_list|()
block|{
return|return
name|defaultRealm
operator|.
name|getGroups
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
name|addGroup
argument_list|(
operator|new
name|GroupAider
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|addGroup
parameter_list|(
specifier|final
name|Group
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
if|if
condition|(
name|group
operator|.
name|getRealmId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Group must have realm id."
argument_list|)
throw|;
block|}
if|if
condition|(
name|group
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|group
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Group must have name."
argument_list|)
throw|;
block|}
specifier|final
name|int
name|id
decl_stmt|;
if|if
condition|(
name|group
operator|.
name|getId
argument_list|()
operator|!=
name|Group
operator|.
name|UNDEFINED_ID
condition|)
block|{
name|id
operator|=
name|group
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|getNextGroupId
argument_list|()
expr_stmt|;
block|}
specifier|final
name|AbstractRealm
name|registeredRealm
init|=
operator|(
name|AbstractRealm
operator|)
name|findRealmForRealmId
argument_list|(
name|group
operator|.
name|getRealmId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|registeredRealm
operator|.
name|hasGroup
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"The group '"
operator|+
name|group
operator|.
name|getName
argument_list|()
operator|+
literal|"' at realm '"
operator|+
name|group
operator|.
name|getRealmId
argument_list|()
operator|+
literal|"' already exist."
argument_list|)
throw|;
block|}
specifier|final
name|GroupImpl
name|newGroup
init|=
operator|new
name|GroupImpl
argument_list|(
name|registeredRealm
argument_list|,
name|id
argument_list|,
name|group
operator|.
name|getName
argument_list|()
argument_list|,
name|group
operator|.
name|getManagers
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
specifier|final
name|SchemaType
name|metadataKey
range|:
name|group
operator|.
name|getMetadataKeys
argument_list|()
control|)
block|{
specifier|final
name|String
name|metadataValue
init|=
name|group
operator|.
name|getMetadataValue
argument_list|(
name|metadataKey
argument_list|)
decl_stmt|;
name|newGroup
operator|.
name|setMetadataValue
argument_list|(
name|metadataKey
argument_list|,
name|metadataValue
argument_list|)
expr_stmt|;
block|}
specifier|final
name|Lock
name|lock
init|=
name|groupLocks
operator|.
name|getWriteLock
argument_list|(
name|newGroup
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|groupsById
operator|.
name|modify
argument_list|(
name|principalDb
lambda|->
name|principalDb
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|newGroup
argument_list|)
argument_list|)
expr_stmt|;
name|registeredRealm
operator|.
name|registerGroup
argument_list|(
name|newGroup
argument_list|)
expr_stmt|;
name|save
argument_list|()
expr_stmt|;
name|newGroup
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|newGroup
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Account
name|addAccount
parameter_list|(
specifier|final
name|Account
name|account
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
if|if
condition|(
name|account
operator|.
name|getRealmId
argument_list|()
operator|==
literal|null
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Account must have realm id."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Account must have realm id."
argument_list|)
throw|;
block|}
if|if
condition|(
name|account
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|account
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Account must have name."
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Account must have name."
argument_list|)
throw|;
block|}
specifier|final
name|int
name|id
decl_stmt|;
if|if
condition|(
name|account
operator|.
name|getId
argument_list|()
operator|!=
name|Account
operator|.
name|UNDEFINED_ID
condition|)
block|{
name|id
operator|=
name|account
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|getNextAccountId
argument_list|()
expr_stmt|;
block|}
specifier|final
name|AbstractRealm
name|registeredRealm
init|=
operator|(
name|AbstractRealm
operator|)
name|findRealmForRealmId
argument_list|(
name|account
operator|.
name|getRealmId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AccountImpl
name|newAccount
init|=
operator|new
name|AccountImpl
argument_list|(
name|registeredRealm
argument_list|,
name|id
argument_list|,
name|account
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|accountLocks
operator|.
name|getWriteLock
argument_list|(
name|newAccount
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|usersById
operator|.
name|modify
argument_list|(
name|principalDb
lambda|->
name|principalDb
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|newAccount
argument_list|)
argument_list|)
expr_stmt|;
name|registeredRealm
operator|.
name|registerAccount
argument_list|(
name|newAccount
argument_list|)
expr_stmt|;
comment|//XXX: one transaction?
name|save
argument_list|()
expr_stmt|;
name|newAccount
operator|.
name|save
argument_list|()
expr_stmt|;
return|return
name|newAccount
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|Account
name|addAccount
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
if|if
condition|(
name|account
operator|.
name|getRealmId
argument_list|()
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Account must have realm id."
argument_list|)
throw|;
block|}
if|if
condition|(
name|account
operator|.
name|getName
argument_list|()
operator|==
literal|null
operator|||
name|account
operator|.
name|getName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Account must have name."
argument_list|)
throw|;
block|}
specifier|final
name|int
name|id
decl_stmt|;
if|if
condition|(
name|account
operator|.
name|getId
argument_list|()
operator|!=
name|Account
operator|.
name|UNDEFINED_ID
condition|)
block|{
name|id
operator|=
name|account
operator|.
name|getId
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|id
operator|=
name|getNextAccountId
argument_list|()
expr_stmt|;
block|}
specifier|final
name|AbstractRealm
name|registeredRealm
init|=
operator|(
name|AbstractRealm
operator|)
name|findRealmForRealmId
argument_list|(
name|account
operator|.
name|getRealmId
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|AccountImpl
name|newAccount
init|=
operator|new
name|AccountImpl
argument_list|(
name|broker
argument_list|,
name|registeredRealm
argument_list|,
name|id
argument_list|,
name|account
argument_list|)
decl_stmt|;
specifier|final
name|Lock
name|lock
init|=
name|accountLocks
operator|.
name|getWriteLock
argument_list|(
name|newAccount
argument_list|)
decl_stmt|;
name|lock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|usersById
operator|.
name|modify
argument_list|(
name|principalDb
lambda|->
name|principalDb
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|newAccount
argument_list|)
argument_list|)
expr_stmt|;
name|registeredRealm
operator|.
name|registerAccount
argument_list|(
name|newAccount
argument_list|)
expr_stmt|;
comment|//XXX: one transaction?
name|save
argument_list|(
name|broker
argument_list|)
expr_stmt|;
name|newAccount
operator|.
name|save
argument_list|(
name|broker
argument_list|)
expr_stmt|;
return|return
name|newAccount
return|;
block|}
finally|finally
block|{
name|lock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|save
parameter_list|()
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|save
argument_list|()
expr_stmt|;
block|}
block|}
specifier|private
name|void
name|save
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
if|if
condition|(
name|configuration
operator|!=
literal|null
condition|)
block|{
name|configuration
operator|.
name|save
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isConfigured
parameter_list|()
block|{
return|return
name|configuration
operator|!=
literal|null
return|;
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
name|configuration
return|;
block|}
comment|//Session management part
specifier|public
specifier|final
specifier|static
name|long
name|TIMEOUT_CHECK_PERIOD
init|=
literal|20000
decl_stmt|;
comment|//20 sec
specifier|public
specifier|static
class|class
name|SessionsCheck
implements|implements
name|JobDescription
implements|,
name|org
operator|.
name|quartz
operator|.
name|Job
block|{
name|boolean
name|firstRun
init|=
literal|true
decl_stmt|;
specifier|public
name|SessionsCheck
parameter_list|()
block|{
block|}
specifier|public
name|String
name|getGroup
parameter_list|()
block|{
return|return
literal|"eXist.Security"
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
literal|"Sessions.Check"
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setName
parameter_list|(
name|String
name|name
parameter_list|)
block|{
block|}
annotation|@
name|Override
specifier|public
specifier|final
name|void
name|execute
parameter_list|(
specifier|final
name|JobExecutionContext
name|jec
parameter_list|)
throws|throws
name|JobExecutionException
block|{
specifier|final
name|JobDataMap
name|jobDataMap
init|=
name|jec
operator|.
name|getJobDetail
argument_list|()
operator|.
name|getJobDataMap
argument_list|()
decl_stmt|;
specifier|final
name|Properties
name|params
init|=
operator|(
name|Properties
operator|)
name|jobDataMap
operator|.
name|get
argument_list|(
literal|"params"
argument_list|)
decl_stmt|;
if|if
condition|(
name|params
operator|==
literal|null
condition|)
block|{
return|return;
block|}
specifier|final
name|SecurityManagerImpl
name|sm
init|=
operator|(
name|SecurityManagerImpl
operator|)
name|params
operator|.
name|get
argument_list|(
name|SecurityManagerImpl
operator|.
name|class
operator|.
name|getName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|sm
operator|==
literal|null
condition|)
block|{
return|return;
block|}
name|sm
operator|.
name|sessions
operator|.
name|modify
argument_list|(
name|db
lambda|->
block|{
specifier|final
name|Iterator
argument_list|<
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Session
argument_list|>
argument_list|>
name|it
init|=
name|db
operator|.
name|entrySet
argument_list|()
operator|.
name|iterator
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Session
argument_list|>
name|entry
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|entry
operator|==
literal|null
operator|||
operator|!
name|entry
operator|.
name|getValue
argument_list|()
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|registerSession
parameter_list|(
specifier|final
name|Session
name|session
parameter_list|)
block|{
name|sessions
operator|.
name|modify
argument_list|(
name|db
lambda|->
name|db
operator|.
name|put
argument_list|(
name|session
operator|.
name|getId
argument_list|()
argument_list|,
name|session
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|Subject
name|getSubjectBySessionId
parameter_list|(
name|String
name|sessionId
parameter_list|)
block|{
return|return
name|sessions
operator|.
name|read
argument_list|(
name|db
lambda|->
block|{
name|Session
name|session
init|=
name|db
operator|.
name|get
argument_list|(
name|sessionId
argument_list|)
decl_stmt|;
if|if
condition|(
name|session
operator|!=
literal|null
condition|)
block|{
return|return
name|session
operator|.
name|getSubject
argument_list|()
return|;
block|}
return|return
literal|null
return|;
block|}
argument_list|)
return|;
block|}
specifier|private
name|Realm
name|findRealmForRealmId
parameter_list|(
specifier|final
name|String
name|realmId
parameter_list|)
throws|throws
name|ConfigurationException
block|{
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
if|if
condition|(
name|realm
operator|.
name|getId
argument_list|()
operator|.
name|equals
argument_list|(
name|realmId
argument_list|)
condition|)
block|{
return|return
name|realm
return|;
block|}
block|}
throw|throw
operator|new
name|ConfigurationException
argument_list|(
literal|"Realm id = '"
operator|+
name|realmId
operator|+
literal|"' not found."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addGroup
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|Group
name|group
parameter_list|)
block|{
name|groupsById
operator|.
name|modify
argument_list|(
name|principalDb
lambda|->
name|principalDb
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|addUser
parameter_list|(
specifier|final
name|int
name|id
parameter_list|,
specifier|final
name|Account
name|account
parameter_list|)
block|{
name|usersById
operator|.
name|modify
argument_list|(
name|principalDb
lambda|->
name|principalDb
operator|.
name|put
argument_list|(
name|id
argument_list|,
name|account
argument_list|)
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGroup
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
return|return
name|groupsById
operator|.
name|read
argument_list|(
name|principalDb
lambda|->
name|principalDb
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasUser
parameter_list|(
specifier|final
name|int
name|id
parameter_list|)
block|{
return|return
name|usersById
operator|.
name|read
argument_list|(
name|principalDb
lambda|->
name|principalDb
operator|.
name|containsKey
argument_list|(
name|id
argument_list|)
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findUsernamesWhereNameStarts
parameter_list|(
specifier|final
name|String
name|startsWith
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|userNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|userNames
operator|.
name|addAll
argument_list|(
name|realm
operator|.
name|findUsernamesWhereNameStarts
argument_list|(
name|startsWith
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|userNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findUsernamesWhereUsernameStarts
parameter_list|(
specifier|final
name|String
name|startsWith
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|userNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|userNames
operator|.
name|addAll
argument_list|(
name|realm
operator|.
name|findUsernamesWhereUsernameStarts
argument_list|(
name|startsWith
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|userNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findUsernamesWhereNamePartStarts
parameter_list|(
specifier|final
name|String
name|startsWith
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|userNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|userNames
operator|.
name|addAll
argument_list|(
name|realm
operator|.
name|findUsernamesWhereNamePartStarts
argument_list|(
name|startsWith
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|userNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findGroupnamesWhereGroupnameContains
parameter_list|(
specifier|final
name|String
name|fragment
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|groupNames
operator|.
name|addAll
argument_list|(
name|realm
operator|.
name|findGroupnamesWhereGroupnameContains
argument_list|(
name|fragment
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|groupNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findGroupnamesWhereGroupnameStarts
parameter_list|(
specifier|final
name|String
name|startsWith
parameter_list|)
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|groupNames
operator|.
name|addAll
argument_list|(
name|realm
operator|.
name|findGroupnamesWhereGroupnameStarts
argument_list|(
name|startsWith
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|groupNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findAllGroupNames
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|groupNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|groupNames
operator|.
name|addAll
argument_list|(
name|realm
operator|.
name|findAllGroupNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|groupNames
return|;
block|}
annotation|@
name|Override
specifier|public
name|List
argument_list|<
name|String
argument_list|>
name|findAllUserNames
parameter_list|()
block|{
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|userNames
init|=
operator|new
name|ArrayList
argument_list|<>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|Realm
name|realm
range|:
name|realms
control|)
block|{
name|userNames
operator|.
name|addAll
argument_list|(
name|realm
operator|.
name|findAllUserNames
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|userNames
return|;
block|}
specifier|private
name|Map
argument_list|<
name|XmldbURI
argument_list|,
name|Integer
argument_list|>
name|saving
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
annotation|@
name|Override
specifier|public
name|void
name|processPramatterBeforeSave
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|XmldbURI
name|uri
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isRemoved
init|=
name|uri
operator|.
name|endsWith
argument_list|(
name|SecurityManager
operator|.
name|REMOVED_COLLECTION_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRemoved
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|removeLastSegment
argument_list|()
expr_stmt|;
block|}
specifier|final
name|boolean
name|isAccount
init|=
name|uri
operator|.
name|endsWith
argument_list|(
name|SecurityManager
operator|.
name|ACCOUNTS_COLLECTION_URI
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isGroup
init|=
name|uri
operator|.
name|endsWith
argument_list|(
name|SecurityManager
operator|.
name|GROUPS_COLLECTION_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAccount
operator|||
name|isGroup
condition|)
block|{
comment|//uri = uri.removeLastSegment();
comment|//String realmId = uri.lastSegment().toString();
comment|//AbstractRealm realm = (AbstractRealm)findRealmForRealmId(realmId);
specifier|final
name|Configuration
name|conf
init|=
name|Configurator
operator|.
name|parse
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|saving
operator|.
name|put
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
argument_list|,
name|conf
operator|.
name|getPropertyInteger
argument_list|(
literal|"id"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|processPramatter
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|DocumentImpl
name|document
parameter_list|)
throws|throws
name|ConfigurationException
block|{
name|XmldbURI
name|uri
init|=
name|document
operator|.
name|getCollection
argument_list|()
operator|.
name|getURI
argument_list|()
decl_stmt|;
comment|//System.out.println(document);
specifier|final
name|boolean
name|isRemoved
init|=
name|uri
operator|.
name|endsWith
argument_list|(
name|SecurityManager
operator|.
name|REMOVED_COLLECTION_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|isRemoved
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|removeLastSegment
argument_list|()
expr_stmt|;
block|}
specifier|final
name|boolean
name|isAccount
init|=
name|uri
operator|.
name|endsWith
argument_list|(
name|SecurityManager
operator|.
name|ACCOUNTS_COLLECTION_URI
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|isGroup
init|=
name|uri
operator|.
name|endsWith
argument_list|(
name|SecurityManager
operator|.
name|GROUPS_COLLECTION_URI
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAccount
operator|||
name|isGroup
condition|)
block|{
name|uri
operator|=
name|uri
operator|.
name|removeLastSegment
argument_list|()
expr_stmt|;
specifier|final
name|String
name|realmId
init|=
name|uri
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|final
name|AbstractRealm
name|realm
init|=
operator|(
name|AbstractRealm
operator|)
name|findRealmForRealmId
argument_list|(
name|realmId
argument_list|)
decl_stmt|;
specifier|final
name|Configuration
name|conf
init|=
name|Configurator
operator|.
name|parse
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
argument_list|,
name|document
argument_list|)
decl_stmt|;
name|Integer
name|id
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|isRemoved
condition|)
block|{
name|id
operator|=
name|conf
operator|.
name|getPropertyInteger
argument_list|(
literal|"id"
argument_list|)
expr_stmt|;
block|}
specifier|final
name|String
name|name
init|=
name|conf
operator|.
name|getProperty
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
if|if
condition|(
name|isAccount
condition|)
block|{
if|if
condition|(
name|isRemoved
operator|&&
name|id
operator|>
literal|2
operator|&&
operator|!
name|hasUser
argument_list|(
name|id
argument_list|)
condition|)
block|{
specifier|final
name|AccountImpl
name|account
init|=
operator|new
name|AccountImpl
argument_list|(
name|realm
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|account
operator|.
name|removed
operator|=
literal|true
expr_stmt|;
name|addUser
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|account
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|realm
operator|.
name|hasAccount
argument_list|(
name|name
argument_list|)
condition|)
block|{
specifier|final
name|Integer
name|oldId
init|=
name|saving
operator|.
name|get
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Integer
name|newId
init|=
name|conf
operator|.
name|getPropertyInteger
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
comment|//XXX: resolve conflicts on ids!!!
if|if
condition|(
operator|!
name|newId
operator|.
name|equals
argument_list|(
name|oldId
argument_list|)
condition|)
block|{
specifier|final
name|Account
name|current
init|=
name|realm
operator|.
name|getAccount
argument_list|(
name|name
argument_list|)
decl_stmt|;
name|accountLocks
operator|.
name|getWriteLock
argument_list|(
name|current
argument_list|)
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|usersById
operator|.
name|modify
argument_list|(
name|principalDb
lambda|->
block|{
name|principalDb
operator|.
name|remove
argument_list|(
name|oldId
argument_list|)
expr_stmt|;
name|principalDb
operator|.
name|put
argument_list|(
name|newId
argument_list|,
name|current
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|accountLocks
operator|.
name|getWriteLock
argument_list|(
name|current
argument_list|)
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
specifier|final
name|Account
name|account
init|=
operator|new
name|AccountImpl
argument_list|(
name|realm
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|addUser
argument_list|(
name|account
operator|.
name|getId
argument_list|()
argument_list|,
name|account
argument_list|)
expr_stmt|;
name|realm
operator|.
name|registerAccount
argument_list|(
name|account
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//this can't be! log any way
name|LOG
operator|.
name|error
argument_list|(
literal|"Account '"
operator|+
name|name
operator|+
literal|"' pressent at '"
operator|+
name|realmId
operator|+
literal|"' realm, but get event that new one created."
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|isGroup
condition|)
block|{
if|if
condition|(
name|isRemoved
operator|&&
name|id
operator|>
literal|2
operator|&&
operator|!
name|hasGroup
argument_list|(
name|id
argument_list|)
condition|)
block|{
specifier|final
name|GroupImpl
name|group
init|=
operator|new
name|GroupImpl
argument_list|(
name|realm
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|group
operator|.
name|removed
operator|=
literal|true
expr_stmt|;
name|addGroup
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|name
operator|!=
literal|null
operator|&&
operator|!
name|realm
operator|.
name|hasGroup
argument_list|(
name|name
argument_list|)
condition|)
block|{
specifier|final
name|GroupImpl
name|group
init|=
operator|new
name|GroupImpl
argument_list|(
name|realm
argument_list|,
name|conf
argument_list|)
decl_stmt|;
name|addGroup
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|group
argument_list|)
expr_stmt|;
name|realm
operator|.
name|registerGroup
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//this can't be! log any way
name|LOG
operator|.
name|error
argument_list|(
literal|"Group '"
operator|+
name|name
operator|+
literal|"' pressent at '"
operator|+
name|realmId
operator|+
literal|"' realm, but get event that new one created."
argument_list|)
expr_stmt|;
block|}
block|}
name|saving
operator|.
name|remove
argument_list|(
name|document
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getAuthenticationEntryPoint
parameter_list|()
block|{
return|return
name|authenticationEntryPoint
return|;
block|}
specifier|private
specifier|static
class|class
name|PrincipalLocks
parameter_list|<
name|T
extends|extends
name|Principal
parameter_list|>
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|Integer
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
name|locks
init|=
operator|new
name|HashMap
argument_list|<
name|Integer
argument_list|,
name|ReentrantReadWriteLock
argument_list|>
argument_list|()
decl_stmt|;
specifier|private
specifier|synchronized
name|ReentrantReadWriteLock
name|getLock
parameter_list|(
name|T
name|principal
parameter_list|)
block|{
name|ReentrantReadWriteLock
name|lock
init|=
name|locks
operator|.
name|get
argument_list|(
name|principal
operator|.
name|getId
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
condition|)
block|{
name|lock
operator|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
expr_stmt|;
name|locks
operator|.
name|put
argument_list|(
name|principal
operator|.
name|getId
argument_list|()
argument_list|,
name|lock
argument_list|)
expr_stmt|;
block|}
return|return
name|lock
return|;
block|}
specifier|public
name|ReadLock
name|getReadLock
parameter_list|(
name|T
name|principal
parameter_list|)
block|{
return|return
name|getLock
argument_list|(
name|principal
argument_list|)
operator|.
name|readLock
argument_list|()
return|;
block|}
specifier|public
name|WriteLock
name|getWriteLock
parameter_list|(
name|T
name|principal
parameter_list|)
block|{
return|return
name|getLock
argument_list|(
name|principal
argument_list|)
operator|.
name|writeLock
argument_list|()
return|;
block|}
block|}
specifier|protected
specifier|static
class|class
name|SessionDb
block|{
specifier|private
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Session
argument_list|>
name|db
init|=
operator|new
name|HashMap
argument_list|<>
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReadLock
name|readLock
init|=
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WriteLock
name|writeLock
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|read
parameter_list|(
specifier|final
name|SessionDbRead
argument_list|<
name|R
argument_list|>
name|readOp
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|readOp
operator|.
name|execute
argument_list|(
name|db
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|modify
parameter_list|(
specifier|final
name|SessionDbModify
name|writeOp
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|writeOp
operator|.
name|execute
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
interface|interface
name|SessionDbRead
parameter_list|<
name|R
parameter_list|>
block|{
name|R
name|execute
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Session
argument_list|>
name|db
parameter_list|)
function_decl|;
block|}
specifier|protected
interface|interface
name|SessionDbModify
block|{
name|void
name|execute
parameter_list|(
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Session
argument_list|>
name|db
parameter_list|)
function_decl|;
block|}
specifier|protected
specifier|static
class|class
name|PrincipalDbById
parameter_list|<
name|V
extends|extends
name|Principal
parameter_list|>
block|{
specifier|private
specifier|final
name|Int2ObjectHashMap
argument_list|<
name|V
argument_list|>
name|db
init|=
operator|new
name|Int2ObjectHashMap
argument_list|<>
argument_list|(
literal|65
argument_list|)
decl_stmt|;
specifier|private
specifier|final
name|ReentrantReadWriteLock
name|lock
init|=
operator|new
name|ReentrantReadWriteLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|ReadLock
name|readLock
init|=
name|lock
operator|.
name|readLock
argument_list|()
decl_stmt|;
specifier|private
specifier|final
name|WriteLock
name|writeLock
init|=
name|lock
operator|.
name|writeLock
argument_list|()
decl_stmt|;
specifier|public
parameter_list|<
name|R
parameter_list|>
name|R
name|read
parameter_list|(
specifier|final
name|PrincipalDbRead
argument_list|<
name|V
argument_list|,
name|R
argument_list|>
name|readOp
parameter_list|)
block|{
name|readLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
return|return
name|readOp
operator|.
name|execute
argument_list|(
name|db
argument_list|)
return|;
block|}
finally|finally
block|{
name|readLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
name|void
name|modify
parameter_list|(
specifier|final
name|PrincipalDbModify
argument_list|<
name|V
argument_list|>
name|writeOp
parameter_list|)
block|{
name|writeLock
operator|.
name|lock
argument_list|()
expr_stmt|;
try|try
block|{
name|writeOp
operator|.
name|execute
argument_list|(
name|db
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
name|writeLock
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
block|}
block|}
specifier|protected
interface|interface
name|PrincipalDbRead
parameter_list|<
name|V
extends|extends
name|Principal
parameter_list|,
name|R
parameter_list|>
block|{
name|R
name|execute
parameter_list|(
specifier|final
name|Int2ObjectHashMap
argument_list|<
name|V
argument_list|>
name|principalDb
parameter_list|)
function_decl|;
block|}
specifier|protected
interface|interface
name|PrincipalDbModify
parameter_list|<
name|V
extends|extends
name|Principal
parameter_list|>
block|{
name|void
name|execute
parameter_list|(
specifier|final
name|Int2ObjectHashMap
argument_list|<
name|V
argument_list|>
name|principalDb
parameter_list|)
function_decl|;
block|}
annotation|@
name|Override
specifier|public
name|Subject
name|getCurrentSubject
parameter_list|()
block|{
return|return
name|db
operator|.
name|getActiveBroker
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
specifier|synchronized
name|void
name|preAllocateAccountId
parameter_list|(
specifier|final
name|PrincipalIdReceiver
name|receiver
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|int
name|id
init|=
name|getNextAccountId
argument_list|()
decl_stmt|;
name|save
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|allocate
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
specifier|final
specifier|synchronized
name|void
name|preAllocateGroupId
parameter_list|(
specifier|final
name|PrincipalIdReceiver
name|receiver
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|EXistException
block|{
specifier|final
name|int
name|id
init|=
name|getNextGroupId
argument_list|()
decl_stmt|;
name|save
argument_list|()
expr_stmt|;
name|receiver
operator|.
name|allocate
argument_list|(
name|id
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

