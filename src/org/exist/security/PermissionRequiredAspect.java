begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2011 The eXist-db Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|org
operator|.
name|aspectj
operator|.
name|lang
operator|.
name|JoinPoint
import|;
end_import

begin_import
import|import
name|org
operator|.
name|aspectj
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Aspect
import|;
end_import

begin_import
import|import
name|org
operator|.
name|aspectj
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Before
import|;
end_import

begin_import
import|import
name|org
operator|.
name|aspectj
operator|.
name|lang
operator|.
name|annotation
operator|.
name|Pointcut
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionRequired
operator|.
name|UNDEFINED
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionRequired
operator|.
name|IS_DBA
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionRequired
operator|.
name|IS_OWNER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionRequired
operator|.
name|IS_MEMBER
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionRequired
operator|.
name|ACL_WRITE
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
annotation|@
name|Aspect
specifier|public
class|class
name|PermissionRequiredAspect
block|{
annotation|@
name|Pointcut
argument_list|(
literal|"execution(@org.exist.security.PermissionRequired * *(..))&& this(permission)&& @annotation(permissionRequired)"
argument_list|)
specifier|public
name|void
name|methodWithPermissionRequired
parameter_list|(
name|Permission
name|permission
parameter_list|,
name|PermissionRequired
name|permissionRequired
parameter_list|)
block|{
block|}
annotation|@
name|Before
argument_list|(
literal|"methodWithPermissionRequired(permission, permissionRequired)"
argument_list|)
specifier|public
name|void
name|enforcePermissions
parameter_list|(
name|JoinPoint
name|joinPoint
parameter_list|,
name|Permission
name|permission
parameter_list|,
name|PermissionRequired
name|permissionRequired
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
comment|//1) check if we should allow DBA access
if|if
condition|(
operator|(
operator|(
name|permissionRequired
operator|.
name|user
argument_list|()
operator|&
name|IS_DBA
operator|)
operator|==
name|IS_DBA
operator|)
operator|&&
name|permission
operator|.
name|isCurrentSubjectDBA
argument_list|()
condition|)
block|{
return|return;
block|}
comment|//2) check for owner access
if|if
condition|(
operator|(
name|permissionRequired
operator|.
name|user
argument_list|()
operator|&
name|IS_OWNER
operator|)
operator|==
name|IS_OWNER
operator|&&
name|permission
operator|.
name|isCurrentSubjectOwner
argument_list|()
condition|)
block|{
if|if
condition|(
name|permissionRequired
operator|.
name|group
argument_list|()
operator|==
name|UNDEFINED
condition|)
block|{
return|return;
block|}
else|else
block|{
comment|//check for group memebership
if|if
condition|(
name|permissionRequired
operator|.
name|group
argument_list|()
operator|==
name|IS_MEMBER
operator|&&
name|permission
operator|.
name|isCurrentSubjectInGroup
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
block|}
comment|//3) check for group access
if|if
condition|(
name|permissionRequired
operator|.
name|user
argument_list|()
operator|==
name|UNDEFINED
operator|&&
name|permissionRequired
operator|.
name|group
argument_list|()
operator|!=
name|UNDEFINED
condition|)
block|{
if|if
condition|(
name|permissionRequired
operator|.
name|group
argument_list|()
operator|==
name|IS_MEMBER
operator|&&
name|permission
operator|.
name|isCurrentSubjectInGroup
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
comment|//4) check for acl mode access
if|if
condition|(
name|permission
operator|instanceof
name|ACLPermission
operator|&&
name|permissionRequired
operator|.
name|mode
argument_list|()
operator|!=
name|UNDEFINED
condition|)
block|{
if|if
condition|(
operator|(
name|permissionRequired
operator|.
name|mode
argument_list|()
operator|&
name|ACL_WRITE
operator|)
operator|==
name|ACL_WRITE
operator|&&
operator|(
operator|(
name|ACLPermission
operator|)
name|permission
operator|)
operator|.
name|isCurrentSubjectCanWriteACL
argument_list|()
condition|)
block|{
return|return;
block|}
block|}
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"You do not have appropriate access rights to modify permissions on this object"
argument_list|)
throw|;
block|}
comment|//TODO change Pointcut so that @annotation values are directly bound. see - https://bugs.eclipse.org/bugs/show_bug.cgi?id=347684
comment|/*     @Pointcut("execution(@org.exist.security.PermissionRequired * *(..))&& this(permission)&& @annotation(org.exist.security.PermissionRequired(mode,user,group))")     public void methodWithPermissionRequired(Permission permission, int mode, int user, int group) {     }      @Before("methodWithPermissionRequired(permission, mode, user, group)")     public void enforcePermissions(JoinPoint joinPoint, Permission permission, int mode, int user, int group) {         System.out.println("POINTCUT");     }*/
block|}
end_class

end_unit

