begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|DatabaseConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|Element
import|;
end_import

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|NodeList
import|;
end_import

begin_comment
comment|/**  *  Description of the Class  *  *@author     Wolfgang Meier<wolfgang@exist-db.org>  *@created    18. August 2002  */
end_comment

begin_class
specifier|public
class|class
name|User
block|{
specifier|public
specifier|final
specifier|static
name|User
name|DEFAULT
init|=
operator|new
name|User
argument_list|(
literal|"guest"
argument_list|,
literal|null
argument_list|,
literal|"guest"
argument_list|)
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|GROUP
init|=
literal|"group"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|NAME
init|=
literal|"name"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|PASS
init|=
literal|"password"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|USER_ID
init|=
literal|"uid"
decl_stmt|;
specifier|private
specifier|final
specifier|static
name|String
name|HOME
init|=
literal|"home"
decl_stmt|;
specifier|private
name|ArrayList
name|groups
init|=
operator|new
name|ArrayList
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|private
name|String
name|password
init|=
literal|null
decl_stmt|;
specifier|private
name|String
name|user
decl_stmt|;
specifier|private
name|int
name|uid
init|=
operator|-
literal|1
decl_stmt|;
specifier|private
name|String
name|home
init|=
literal|null
decl_stmt|;
comment|/**      *  Create a new user with name and password      *      *@param  user      Description of the Parameter      *@param  password  Description of the Parameter      */
specifier|public
name|User
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
name|setPassword
argument_list|(
name|password
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Create a new user with name      *      *@param  user  Description of the Parameter      */
specifier|public
name|User
parameter_list|(
name|String
name|user
parameter_list|)
block|{
name|this
operator|.
name|user
operator|=
name|user
expr_stmt|;
block|}
comment|/**      *  Create a new user with name, password and primary group      *      *@param  user          Description of the Parameter      *@param  password      Description of the Parameter      *@param  primaryGroup  Description of the Parameter      */
specifier|public
name|User
parameter_list|(
name|String
name|user
parameter_list|,
name|String
name|password
parameter_list|,
name|String
name|primaryGroup
parameter_list|)
block|{
name|this
argument_list|(
name|user
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|addGroup
argument_list|(
name|primaryGroup
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Read a new user from the given DOM node      *      *@param  node                                Description of the Parameter      *@exception  DatabaseConfigurationException  Description of the Exception      */
specifier|public
name|User
parameter_list|(
name|Element
name|node
parameter_list|)
throws|throws
name|DatabaseConfigurationException
block|{
name|this
operator|.
name|user
operator|=
name|node
operator|.
name|getAttribute
argument_list|(
name|NAME
argument_list|)
expr_stmt|;
if|if
condition|(
name|user
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"user needs a name"
argument_list|)
throw|;
name|this
operator|.
name|password
operator|=
name|node
operator|.
name|getAttribute
argument_list|(
name|PASS
argument_list|)
expr_stmt|;
name|String
name|userId
init|=
name|node
operator|.
name|getAttribute
argument_list|(
name|USER_ID
argument_list|)
decl_stmt|;
if|if
condition|(
name|userId
operator|==
literal|null
condition|)
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"attribute id missing"
argument_list|)
throw|;
try|try
block|{
name|uid
operator|=
name|Integer
operator|.
name|parseInt
argument_list|(
name|userId
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|NumberFormatException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|DatabaseConfigurationException
argument_list|(
literal|"illegal user id: "
operator|+
name|userId
operator|+
literal|" for user "
operator|+
name|user
argument_list|)
throw|;
block|}
name|this
operator|.
name|home
operator|=
name|node
operator|.
name|getAttribute
argument_list|(
name|HOME
argument_list|)
expr_stmt|;
name|NodeList
name|gl
init|=
name|node
operator|.
name|getElementsByTagName
argument_list|(
name|GROUP
argument_list|)
decl_stmt|;
name|Element
name|group
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|gl
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|group
operator|=
operator|(
name|Element
operator|)
name|gl
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|group
operator|.
name|getFirstChild
argument_list|()
operator|.
name|getNodeValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      *  Add the user to a group      *      *@param  group  The feature to be added to the Group attribute      */
specifier|public
specifier|final
name|void
name|addGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|groups
operator|.
name|add
argument_list|(
name|group
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Get all groups this user belongs to      *      *@return    The groups value      */
specifier|public
specifier|final
name|Iterator
name|getGroups
parameter_list|()
block|{
return|return
name|groups
operator|.
name|iterator
argument_list|()
return|;
block|}
comment|/**      *  Get the user name      *      *@return    The user value      */
specifier|public
specifier|final
name|String
name|getName
parameter_list|()
block|{
return|return
name|user
return|;
block|}
specifier|public
specifier|final
name|int
name|getUID
parameter_list|()
block|{
return|return
name|uid
return|;
block|}
comment|/**      *  Get the user's password      *      *@return    Description of the Return Value      */
specifier|public
specifier|final
name|String
name|getPassword
parameter_list|()
block|{
return|return
name|password
return|;
block|}
comment|/**      *  Get the primary group this user belongs to      *      *@return    The primaryGroup value      */
specifier|public
specifier|final
name|String
name|getPrimaryGroup
parameter_list|()
block|{
if|if
condition|(
name|groups
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
return|return
literal|null
return|;
return|return
operator|(
name|String
operator|)
name|groups
operator|.
name|get
argument_list|(
literal|0
argument_list|)
return|;
block|}
comment|/**      *  Is the user a member of group?      *      *@param  group  Description of the Parameter      *@return        Description of the Return Value      */
specifier|public
specifier|final
name|boolean
name|hasGroup
parameter_list|(
name|String
name|group
parameter_list|)
block|{
name|String
name|g
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|getGroups
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|g
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
if|if
condition|(
name|g
operator|.
name|equals
argument_list|(
name|group
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
comment|/**      *  Sets the password attribute of the User object      *      *@param  passwd  The new password value      */
specifier|public
specifier|final
name|void
name|setPassword
parameter_list|(
name|String
name|passwd
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
operator|(
name|passwd
operator|==
literal|null
condition|?
literal|null
else|:
name|MD5
operator|.
name|md
argument_list|(
name|passwd
argument_list|)
operator|)
expr_stmt|;
block|}
comment|/**      *  Sets the passwordDigest attribute of the User object      *      *@param  passwd  The new passwordDigest value      */
specifier|public
specifier|final
name|void
name|setPasswordDigest
parameter_list|(
name|String
name|passwd
parameter_list|)
block|{
name|this
operator|.
name|password
operator|=
operator|(
name|passwd
operator|==
literal|null
operator|)
condition|?
literal|null
else|:
name|passwd
expr_stmt|;
block|}
comment|/**      *  Description of the Method      *      *@return    Description of the Return Value      */
specifier|public
specifier|final
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<user name=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|user
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\" "
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"uid=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|Integer
operator|.
name|toString
argument_list|(
name|uid
argument_list|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|password
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" password=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|password
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|home
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
literal|" home=\""
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"\">"
argument_list|)
expr_stmt|;
block|}
else|else
name|buf
operator|.
name|append
argument_list|(
literal|">"
argument_list|)
expr_stmt|;
name|String
name|group
decl_stmt|;
for|for
control|(
name|Iterator
name|i
init|=
name|groups
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|group
operator|=
operator|(
name|String
operator|)
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"<group>"
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
literal|"</group>"
argument_list|)
expr_stmt|;
block|}
name|buf
operator|.
name|append
argument_list|(
literal|"</user>"
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|final
name|boolean
name|validate
parameter_list|(
name|String
name|passwd
parameter_list|)
block|{
if|if
condition|(
name|password
operator|==
literal|null
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|passwd
operator|==
literal|null
condition|)
return|return
literal|false
return|;
return|return
name|MD5
operator|.
name|md
argument_list|(
name|passwd
argument_list|)
operator|.
name|equals
argument_list|(
name|password
argument_list|)
return|;
block|}
specifier|public
name|void
name|setUID
parameter_list|(
name|int
name|uid
parameter_list|)
block|{
name|this
operator|.
name|uid
operator|=
name|uid
expr_stmt|;
block|}
specifier|public
name|void
name|setHome
parameter_list|(
name|String
name|homeCollection
parameter_list|)
block|{
name|home
operator|=
name|homeCollection
expr_stmt|;
block|}
specifier|public
name|String
name|getHome
parameter_list|()
block|{
return|return
name|home
return|;
block|}
block|}
end_class

end_unit

