begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|reflect
operator|.
name|Method
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_comment
comment|/**  *  UUID or GUID generator. The random code is generated by java's  * UUID-class (when available Java5+), safehaus' UUIDGenerator (when evailable)  * or javaexchange's RandomGUID as a fallback. (code in exist available)  *  *<UL>  *<LI><a href="http://en.wikipedia.org/wiki/UUID">UUID</a></LI>  *<LI><a href="http://en.wikipedia.org/wiki/GUID">GUID</a></LI>  *<LI><a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/UUID.html">java.util.UUID</a></LI>  *<LI><a href="http://jug.safehaus.org/">Safehaus</a></LI>  *<LI><a href="http://www.javaexchange.com/aboutRandomGUID.html">JavaExchange</a></LI>  *</UL>  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|UUIDGenerator
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|UUIDGenerator
operator|.
name|class
argument_list|)
decl_stmt|;
comment|// http://java.sun.com/j2se/1.5.0/docs/api/java/util/UUID.html
specifier|private
specifier|static
name|String
name|getJavaUUID
parameter_list|()
block|{
comment|// Check does the class exist?
name|Class
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"java.util.UUID"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ClassNotFoundException
comment|// quick escape
name|LOG
operator|.
name|debug
argument_list|(
literal|"java.util.UUID not found"
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Get specific method
name|Method
name|method
init|=
literal|null
decl_stmt|;
try|try
block|{
name|method
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"randomUUID"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// SecurityException and NoSuchMethodException
comment|// quick escape
name|LOG
operator|.
name|error
argument_list|(
literal|"Method UUID.randomUUID not found."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Invoke method
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//IllegalAccessException and InvocationTargetException
comment|// quick escape
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not invoke method randomUUID."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|result
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// http://jug.safehaus.org/
specifier|private
specifier|static
name|String
name|getSafehausUUID
parameter_list|()
block|{
comment|//return UUIDGenerator.getInstance().generateRandomBasedUUID().toString();
comment|// Check does the class exist?
name|Class
name|clazz
init|=
literal|null
decl_stmt|;
try|try
block|{
name|clazz
operator|=
name|Class
operator|.
name|forName
argument_list|(
literal|"org.safehaus.uuid.UUIDGenerator"
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// ClassNotFoundException
comment|// quick escape
name|LOG
operator|.
name|debug
argument_list|(
literal|"org.safehaus.uuid.UUIDGenerator no found."
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Get specific method
name|Method
name|method
init|=
literal|null
decl_stmt|;
try|try
block|{
name|method
operator|=
name|clazz
operator|.
name|getMethod
argument_list|(
literal|"getInstance"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// SecurityException and NoSuchMethodException
comment|// quick escape
name|LOG
operator|.
name|error
argument_list|(
literal|"Method UUIDGenerator.getInstance not found."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Invoke method
name|Object
name|result
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result
operator|=
name|method
operator|.
name|invoke
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//IllegalAccessException and InvocationTargetException
comment|// quick escape
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not invoke method UUIDGenerator.getInstance."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Get class from object
name|Class
name|clazz2
init|=
name|result
operator|.
name|getClass
argument_list|()
decl_stmt|;
comment|// Get specific method
name|Method
name|method2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|method2
operator|=
name|clazz2
operator|.
name|getMethod
argument_list|(
literal|"generateRandomBasedUUID"
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|// SecurityException and NoSuchMethodException
comment|// quick escape
name|LOG
operator|.
name|error
argument_list|(
literal|"Method generateRandomBasedUUID not found."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
return|return
literal|null
return|;
block|}
comment|// Invoke method
name|Object
name|result2
init|=
literal|null
decl_stmt|;
try|try
block|{
name|result2
operator|=
name|method2
operator|.
name|invoke
argument_list|(
name|result
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
comment|//IllegalAccessException and InvocationTargetException
comment|// quick escape
name|LOG
operator|.
name|error
argument_list|(
literal|"Could not invoke method generateRandomBasedUUID."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
empty_stmt|;
return|return
literal|null
return|;
block|}
return|return
name|result2
operator|.
name|toString
argument_list|()
return|;
block|}
comment|// http://www.javaexchange.com/aboutRandomGUID.html
specifier|private
specifier|static
name|String
name|getJavaExchangeGUID
parameter_list|()
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Using org.exist.security.RandomGUID"
argument_list|)
expr_stmt|;
name|RandomGUID
name|rg
init|=
operator|new
name|RandomGUID
argument_list|(
literal|false
argument_list|)
decl_stmt|;
return|return
name|rg
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *  Generate random UUID code.      *      * @return UUID code, formatted as f271ec43-bf1f-4030-a269-b11576538f71      */
specifier|public
specifier|static
name|String
name|getUUID
parameter_list|()
block|{
name|String
name|uuid
init|=
name|getJavaUUID
argument_list|()
decl_stmt|;
comment|// Alternative implementation
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
name|uuid
operator|=
name|getSafehausUUID
argument_list|()
expr_stmt|;
block|}
comment|// Another alternative implementation
if|if
condition|(
name|uuid
operator|==
literal|null
condition|)
block|{
name|uuid
operator|=
name|getJavaExchangeGUID
argument_list|()
expr_stmt|;
block|}
return|return
name|uuid
return|;
block|}
block|}
end_class

end_unit

