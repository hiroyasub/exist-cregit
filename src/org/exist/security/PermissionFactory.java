begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2011 The eXist-db Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|triggers
operator|.
name|TriggerException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|persistent
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|aider
operator|.
name|ACEAider
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
operator|.
name|LockMode
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|function
operator|.
name|ConsumerE
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SyntaxException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|XPathException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AbstractUnixStylePermission
operator|.
name|SIMPLE_SYMBOLIC_MODE_PATTERN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|AbstractUnixStylePermission
operator|.
name|UNIX_SYMBOLIC_MODE_PATTERN
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
operator|.
name|*
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
operator|.
name|POSIX_CHOWN_RESTRICTED_PROPERTY
import|;
end_import

begin_comment
comment|/**  * Instantiates an appropriate Permission class based on the current configuration  *  * @author Adam Retter<adam@exist-db.org>  */
end_comment

begin_class
specifier|public
class|class
name|PermissionFactory
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|PermissionFactory
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Get the Default Resource permissions for the current Subject      * this includes incorporating their umask      */
specifier|public
specifier|static
name|Permission
name|getDefaultResourcePermission
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|)
block|{
comment|//TODO consider loading Permission.DEFAULT_PERM from conf.xml instead
specifier|final
name|Subject
name|currentSubject
init|=
name|sm
operator|.
name|getDatabase
argument_list|()
operator|.
name|getActiveBroker
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|Permission
operator|.
name|DEFAULT_RESOURCE_PERM
operator|&
operator|~
name|currentSubject
operator|.
name|getUserMask
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleACLPermission
argument_list|(
name|sm
argument_list|,
name|currentSubject
operator|.
name|getId
argument_list|()
argument_list|,
name|currentSubject
operator|.
name|getDefaultGroup
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|mode
argument_list|)
return|;
block|}
comment|/**      * Get the Default Collection permissions for the current Subject      * this includes incorporating their umask      */
specifier|public
specifier|static
name|Permission
name|getDefaultCollectionPermission
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|)
block|{
comment|//TODO consider loading Permission.DEFAULT_PERM from conf.xml instead
specifier|final
name|Subject
name|currentSubject
init|=
name|sm
operator|.
name|getDatabase
argument_list|()
operator|.
name|getActiveBroker
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
decl_stmt|;
specifier|final
name|int
name|mode
init|=
name|Permission
operator|.
name|DEFAULT_COLLECTION_PERM
operator|&
operator|~
name|currentSubject
operator|.
name|getUserMask
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleACLPermission
argument_list|(
name|sm
argument_list|,
name|currentSubject
operator|.
name|getId
argument_list|()
argument_list|,
name|currentSubject
operator|.
name|getDefaultGroup
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|mode
argument_list|)
return|;
block|}
comment|/**      * Get permissions for the current Subject      */
specifier|public
specifier|static
name|Permission
name|getPermission
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
block|{
specifier|final
name|Subject
name|currentSubject
init|=
name|sm
operator|.
name|getDatabase
argument_list|()
operator|.
name|getActiveBroker
argument_list|()
operator|.
name|getCurrentSubject
argument_list|()
decl_stmt|;
return|return
operator|new
name|SimpleACLPermission
argument_list|(
name|sm
argument_list|,
name|currentSubject
operator|.
name|getId
argument_list|()
argument_list|,
name|currentSubject
operator|.
name|getDefaultGroup
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
name|mode
argument_list|)
return|;
block|}
comment|/**      * Get permissions for the user, group and mode      */
specifier|public
specifier|static
name|Permission
name|getPermission
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|int
name|userId
parameter_list|,
specifier|final
name|int
name|groupId
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
block|{
return|return
operator|new
name|SimpleACLPermission
argument_list|(
name|sm
argument_list|,
name|userId
argument_list|,
name|groupId
argument_list|,
name|mode
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|Permission
name|getPermission
parameter_list|(
specifier|final
name|SecurityManager
name|sm
parameter_list|,
specifier|final
name|String
name|userName
parameter_list|,
specifier|final
name|String
name|groupName
parameter_list|,
specifier|final
name|int
name|mode
parameter_list|)
block|{
name|Permission
name|permission
init|=
literal|null
decl_stmt|;
try|try
block|{
specifier|final
name|Account
name|owner
init|=
name|sm
operator|.
name|getAccount
argument_list|(
name|userName
argument_list|)
decl_stmt|;
if|if
condition|(
name|owner
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"User was not found '"
operator|+
operator|(
name|userName
operator|==
literal|null
condition|?
literal|""
else|:
name|userName
operator|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
specifier|final
name|Group
name|group
init|=
name|sm
operator|.
name|getGroup
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Group was not found '"
operator|+
operator|(
name|userName
operator|==
literal|null
condition|?
literal|""
else|:
name|groupName
operator|)
operator|+
literal|"'"
argument_list|)
throw|;
block|}
name|permission
operator|=
operator|new
name|SimpleACLPermission
argument_list|(
name|sm
argument_list|,
name|owner
operator|.
name|getId
argument_list|()
argument_list|,
name|group
operator|.
name|getId
argument_list|()
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Throwable
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Exception while instantiating security permission class."
argument_list|,
name|ex
argument_list|)
expr_stmt|;
block|}
return|return
name|permission
return|;
block|}
specifier|public
specifier|static
name|void
name|updatePermissions
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|ConsumerE
argument_list|<
name|Permission
argument_list|,
name|PermissionDeniedException
argument_list|>
name|permissionModifier
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
specifier|final
name|TransactionManager
name|transact
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
try|try
init|(
specifier|final
name|Txn
name|transaction
init|=
name|transact
operator|.
name|beginTransaction
argument_list|()
init|)
block|{
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
try|try
block|{
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|pathUri
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
try|try
block|{
name|doc
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|pathUri
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
name|transact
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|XPathException
argument_list|(
literal|"Resource or collection '"
operator|+
name|pathUri
operator|.
name|toString
argument_list|()
operator|+
literal|"' does not exist."
argument_list|)
throw|;
block|}
comment|// keep a write lock in the transaction
name|transaction
operator|.
name|acquireLock
argument_list|(
name|doc
operator|.
name|getUpdateLock
argument_list|()
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|doc
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
name|permissionModifier
operator|.
name|accept
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|doc
operator|!=
literal|null
condition|)
block|{
name|doc
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// keep a write lock in the transaction
name|transaction
operator|.
name|acquireLock
argument_list|(
name|collection
operator|.
name|getLock
argument_list|()
argument_list|,
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|Permission
name|permissions
init|=
name|collection
operator|.
name|getPermissionsNoLock
argument_list|()
decl_stmt|;
name|permissionModifier
operator|.
name|accept
argument_list|(
name|permissions
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|transact
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
name|broker
operator|.
name|flush
argument_list|()
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
name|collection
operator|.
name|release
argument_list|(
name|LockMode
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|XPathException
decl||
name|PermissionDeniedException
decl||
name|IOException
decl||
name|TriggerException
decl||
name|TransactionException
decl||
name|LockException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Permission to modify permissions is denied for user '"
operator|+
name|broker
operator|.
name|getCurrentSubject
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"' on '"
operator|+
name|pathUri
operator|.
name|toString
argument_list|()
operator|+
literal|"': "
operator|+
name|e
operator|.
name|getMessage
argument_list|()
argument_list|,
name|e
argument_list|)
throw|;
block|}
block|}
comment|/**      * Changes the ownership of a resource in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param pathUri the URI to a resource in the database.      * @param owner the new owner for the resource.      * @param group thr new group for the resource.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chown
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|owner
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|pathUri
argument_list|,
name|permission
lambda|->
name|chown
argument_list|(
name|broker
argument_list|,
name|permission
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Changes the ownership of a Collection in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param collection the URI to a Collection in the database.      * @param owner the new owner for the collection.      * @param group thr new group for the collection.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chown
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|owner
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|chown
argument_list|(
name|broker
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
comment|/**      * Changes the ownership of a Document in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param document the URI to a Document in the database.      * @param owner the new owner for the document.      * @param group thr new group for the document.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chown
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|owner
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|chown
argument_list|(
name|broker
argument_list|,
name|document
operator|.
name|getPermissions
argument_list|()
argument_list|,
name|owner
argument_list|,
name|group
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|static
name|void
name|chown
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Permission
name|permission
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|owner
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
operator|(
operator|!
name|owner
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|!
name|group
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either owner or group must be provided"
argument_list|)
throw|;
block|}
specifier|final
name|boolean
name|changeOwner
init|=
name|owner
operator|.
name|map
argument_list|(
name|desiredOwner
lambda|->
operator|!
name|permission
operator|.
name|getOwner
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|desiredOwner
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
decl_stmt|;
specifier|final
name|boolean
name|changeGroup
init|=
name|group
operator|.
name|map
argument_list|(
name|desiredGroup
lambda|->
operator|!
name|permission
operator|.
name|getGroup
argument_list|()
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|desiredGroup
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|// enforce security checks
specifier|final
name|boolean
name|posixChownRestricted
init|=
name|broker
operator|.
name|getConfiguration
argument_list|()
operator|.
name|getProperty
argument_list|(
name|POSIX_CHOWN_RESTRICTED_PROPERTY
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|posixChownRestricted
condition|)
block|{
if|if
condition|(
name|changeOwner
operator|&&
operator|!
name|permission
operator|.
name|isCurrentSubjectDBA
argument_list|()
condition|)
block|{
comment|// Only a superuser process can change the user ID of the file.
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Only a DBA can change the user ID of a resource when posix-chown-restricted is in effect."
argument_list|)
throw|;
block|}
if|if
condition|(
name|changeGroup
operator|&&
operator|!
name|permission
operator|.
name|isCurrentSubjectDBA
argument_list|()
condition|)
block|{
comment|/*                     A non-superuser process can change the group ID of the file if the process owns the file                     (the effective user ID equals the user ID of the file)                  */
if|if
condition|(
operator|!
name|permission
operator|.
name|isCurrentSubjectOwner
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"You cannot change the group ID of a file you do not own when posix-chown-restricted is in effect."
argument_list|)
throw|;
block|}
comment|// and, group equals either the effective group ID of the process or one of the processâs supplementary group IDs.
specifier|final
name|int
name|desiredGroupId
init|=
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
operator|.
name|getGroup
argument_list|(
name|group
operator|.
name|get
argument_list|()
argument_list|)
operator|.
name|getId
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|permission
operator|.
name|isCurrentSubjectInGroup
argument_list|(
name|desiredGroupId
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"You cannot change the group ID of a file to a group of which you are not a member when posix-chown-restricted is in effect."
argument_list|)
throw|;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|changeOwner
condition|)
block|{
if|if
condition|(
operator|(
operator|!
name|permission
operator|.
name|isCurrentSubjectDBA
argument_list|()
operator|)
operator|&&
operator|!
name|permission
operator|.
name|isCurrentSubjectOwner
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Only a DBA or the resources owner can change the user ID of a resource."
argument_list|)
throw|;
block|}
block|}
if|if
condition|(
name|changeGroup
condition|)
block|{
if|if
condition|(
operator|(
operator|!
name|permission
operator|.
name|isCurrentSubjectDBA
argument_list|()
operator|)
operator|&&
operator|!
name|permission
operator|.
name|isCurrentSubjectOwner
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Only a DBA or the resources owner can change the group ID of a resource."
argument_list|)
throw|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|permission
operator|.
name|isCurrentSubjectDBA
argument_list|()
condition|)
block|{
comment|/*                 If this is called by a process other than a superuser process, on successful return,                 both the set-user-ID and the set-group-ID bits are cleared.                  MUST be done before changing the owner or group to prevent a privilege escalation attack              */
if|if
condition|(
name|permission
operator|.
name|isSetUid
argument_list|()
condition|)
block|{
name|permission
operator|.
name|setSetUid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|permission
operator|.
name|isSetGid
argument_list|()
condition|)
block|{
name|permission
operator|.
name|setSetGid
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
comment|// change the owner
if|if
condition|(
name|changeOwner
condition|)
block|{
name|permission
operator|.
name|setOwner
argument_list|(
name|owner
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// change the group
if|if
condition|(
name|changeGroup
condition|)
block|{
name|permission
operator|.
name|setGroup
argument_list|(
name|group
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Changes the mode of a resource in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param pathUri the URI to a resource in the database.      * @param modeStr the new mode for the resource.      * @param acl the new ACL for the resource.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chmod_str
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|modeStr
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|acl
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|pathUri
argument_list|,
name|permission
lambda|->
name|chmod_impl
argument_list|(
name|broker
argument_list|,
name|permission
argument_list|,
name|modeStr
operator|.
name|map
argument_list|(
name|Either
operator|::
name|Left
argument_list|)
argument_list|,
name|acl
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Changes the mode of a Collection in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param collection the URI to a Collection in the database.      * @param modeStr the new mode for the collection.      * @param acl the new ACL for the collection.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chmod_str
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|modeStr
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|acl
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|chmod_impl
argument_list|(
name|broker
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
argument_list|,
name|modeStr
operator|.
name|map
argument_list|(
name|Either
operator|::
name|Left
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
comment|/**      * Changes the mode of a Document in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param document the URI to a Document in the database.      * @param modeStr the new mode for the document.      * @param acl the new ACL for the document.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chmod_str
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|modeStr
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|acl
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|chmod_impl
argument_list|(
name|broker
argument_list|,
name|document
operator|.
name|getPermissions
argument_list|()
argument_list|,
name|modeStr
operator|.
name|map
argument_list|(
name|Either
operator|::
name|Left
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
comment|/**      * Changes the mode of a resource in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param pathUri the URI to a resource in the database.      * @param mode the new mode for the resource.      * @param acl the new ACL for the resource.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chmod
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|XmldbURI
name|pathUri
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|mode
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|acl
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|updatePermissions
argument_list|(
name|broker
argument_list|,
name|pathUri
argument_list|,
name|permission
lambda|->
name|chmod_impl
argument_list|(
name|broker
argument_list|,
name|permission
argument_list|,
name|mode
operator|.
name|map
argument_list|(
name|Either
operator|::
name|Right
argument_list|)
argument_list|,
name|acl
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/**      * Changes the mode of a Collection in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param collection the URI to a Collection in the database.      * @param mode the new mode for the collection.      * @param acl the new ACL for the collection.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chmod
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Collection
name|collection
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|mode
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|acl
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|chmod_impl
argument_list|(
name|broker
argument_list|,
name|collection
operator|.
name|getPermissions
argument_list|()
argument_list|,
name|mode
operator|.
name|map
argument_list|(
name|Either
operator|::
name|Right
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
comment|/**      * Changes the mode of a Document in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param document the URI to a Document in the database.      * @param mode the new mode for the document.      * @param acl the new ACL for the document.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chmod
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|document
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|mode
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|acl
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|chmod_impl
argument_list|(
name|broker
argument_list|,
name|document
operator|.
name|getPermissions
argument_list|()
argument_list|,
name|mode
operator|.
name|map
argument_list|(
name|Either
operator|::
name|Right
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
comment|/**      * Changes the mode of permissions in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param permissions the permissions in the database.      * @param mode the new mode for the permissions.      * @param acl the new ACL for the permissions.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chmod_str
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Permission
name|permissions
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|mode
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|acl
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|chmod_impl
argument_list|(
name|broker
argument_list|,
name|permissions
argument_list|,
name|mode
operator|.
name|map
argument_list|(
name|Either
operator|::
name|Left
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
comment|/**      * Changes the mode of permissions in the database      * inline with the rules of POSIX.1-2017 (Issue 7, 2018 edition).      *      * @param broker the database broker.      * @param permissions the permissions in the database.      * @param mode the new mode for the permissions.      * @param acl the new ACL for the permissions.      *      * @throws PermissionDeniedException if the calling process has insufficient permissions.      */
specifier|public
specifier|static
name|void
name|chmod
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Permission
name|permissions
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Integer
argument_list|>
name|mode
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|acl
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
name|chmod_impl
argument_list|(
name|broker
argument_list|,
name|permissions
argument_list|,
name|mode
operator|.
name|map
argument_list|(
name|Either
operator|::
name|Right
argument_list|)
argument_list|,
name|acl
argument_list|)
expr_stmt|;
block|}
specifier|private
specifier|static
name|void
name|chmod_impl
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|Permission
name|permission
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|Either
argument_list|<
name|String
argument_list|,
name|Integer
argument_list|>
argument_list|>
name|mode
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|List
argument_list|<
name|ACEAider
argument_list|>
argument_list|>
name|acl
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
if|if
condition|(
operator|(
operator|!
name|mode
operator|.
name|isPresent
argument_list|()
operator|)
operator|&&
operator|!
name|acl
operator|.
name|isPresent
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Either mode or acl must be provided"
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|boolean
name|changeMode
decl_stmt|;
if|if
condition|(
name|mode
operator|.
name|isPresent
argument_list|()
condition|)
block|{
if|if
condition|(
name|mode
operator|.
name|get
argument_list|()
operator|.
name|isLeft
argument_list|()
condition|)
block|{
specifier|final
name|Subject
name|effectiveUser
init|=
name|broker
operator|.
name|getCurrentSubject
argument_list|()
decl_stmt|;
specifier|final
name|Permission
name|other
init|=
operator|new
name|UnixStylePermission
argument_list|(
name|broker
operator|.
name|getBrokerPool
argument_list|()
operator|.
name|getSecurityManager
argument_list|()
argument_list|,
name|effectiveUser
operator|.
name|getId
argument_list|()
argument_list|,
name|effectiveUser
operator|.
name|getDefaultGroup
argument_list|()
operator|.
name|getId
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|other
operator|.
name|setMode
argument_list|(
name|mode
operator|.
name|get
argument_list|()
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
name|changeMode
operator|=
name|permission
operator|.
name|getMode
argument_list|()
operator|!=
name|other
operator|.
name|getMode
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|changeMode
operator|=
name|permission
operator|.
name|getMode
argument_list|()
operator|!=
name|mode
operator|.
name|get
argument_list|()
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
operator|.
name|intValue
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|changeMode
operator|=
literal|false
expr_stmt|;
block|}
specifier|final
name|boolean
name|changeAcl
init|=
name|acl
operator|.
name|map
argument_list|(
name|desiredAces
lambda|->
operator|!
name|aclEquals
argument_list|(
name|permission
argument_list|,
name|desiredAces
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
literal|false
argument_list|)
decl_stmt|;
comment|/*                 To change the permission bits of a file, the effective user ID of the process must be equal to the owner ID                 of the file, or the process must have superuser permissions.             */
if|if
condition|(
operator|(
operator|!
name|permission
operator|.
name|isCurrentSubjectDBA
argument_list|()
operator|)
operator|&&
operator|!
name|permission
operator|.
name|isCurrentSubjectOwner
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Only a DBA or the resources owner can change the mode of a resource."
argument_list|)
throw|;
block|}
comment|// change the mode
if|if
condition|(
name|changeMode
condition|)
block|{
specifier|final
name|boolean
name|matchedGroup
init|=
name|permission
operator|.
name|isCurrentSubjectInGroup
argument_list|()
decl_stmt|;
if|if
condition|(
name|permission
operator|.
name|isCurrentSubjectDBA
argument_list|()
operator|||
name|matchedGroup
condition|)
block|{
if|if
condition|(
name|mode
operator|.
name|get
argument_list|()
operator|.
name|isLeft
argument_list|()
condition|)
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|mode
operator|.
name|get
argument_list|()
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|mode
operator|.
name|get
argument_list|()
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|/*                     If the group ID of the file does not equal either the effective group ID of the process or one of                     the processâs supplementary group IDs and if the process does not have superuser privileges,                     then the set-group-ID bit is automatically turned off.                     This prevents a user from creating a set-group-ID file owned by a group that the user doesnât                     belong to.                 */
if|if
condition|(
name|mode
operator|.
name|get
argument_list|()
operator|.
name|isLeft
argument_list|()
condition|)
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|removeSetGid
argument_list|(
name|mode
operator|.
name|get
argument_list|()
operator|.
name|left
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|permission
operator|.
name|setMode
argument_list|(
name|removeSetGid
argument_list|(
name|mode
operator|.
name|get
argument_list|()
operator|.
name|right
argument_list|()
operator|.
name|get
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// change the acl
if|if
condition|(
name|changeAcl
condition|)
block|{
specifier|final
name|ACLPermission
name|aclPermission
init|=
operator|(
name|ACLPermission
operator|)
name|permission
decl_stmt|;
name|aclPermission
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
specifier|final
name|ACEAider
name|ace
range|:
name|acl
operator|.
name|get
argument_list|()
control|)
block|{
name|aclPermission
operator|.
name|addACE
argument_list|(
name|ace
operator|.
name|getAccessType
argument_list|()
argument_list|,
name|ace
operator|.
name|getTarget
argument_list|()
argument_list|,
name|ace
operator|.
name|getWho
argument_list|()
argument_list|,
name|ace
operator|.
name|getMode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|SyntaxException
name|se
parameter_list|)
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"Unrecognised mode syntax: "
operator|+
name|se
operator|.
name|getMessage
argument_list|()
argument_list|,
name|se
argument_list|)
throw|;
block|}
block|}
comment|/**      * Compares the ACEs in a permission's ACL against the provides ACEs.      *      * @param permission The permission ACL to compare against the otherAces.      * @param otherAces The ACEs to compare against the permissions's ACL.      *      * @return true if the {@code permission}'s ACL has the same ACEs as {@code otherAces}, false otherwise.      */
specifier|private
specifier|static
name|boolean
name|aclEquals
parameter_list|(
specifier|final
name|Permission
name|permission
parameter_list|,
specifier|final
name|List
argument_list|<
name|ACEAider
argument_list|>
name|otherAces
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|permission
operator|instanceof
name|ACLPermission
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|ACLPermission
name|aclPermission
init|=
operator|(
name|ACLPermission
operator|)
name|permission
decl_stmt|;
if|if
condition|(
name|aclPermission
operator|.
name|getACECount
argument_list|()
operator|!=
name|otherAces
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|otherAces
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|final
name|ACEAider
name|other
init|=
name|otherAces
operator|.
name|get
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|aclPermission
operator|.
name|getACEAccessType
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getAccessType
argument_list|()
operator|||
name|aclPermission
operator|.
name|getACETarget
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getTarget
argument_list|()
operator|||
operator|(
operator|!
name|aclPermission
operator|.
name|getACEWho
argument_list|(
name|i
argument_list|)
operator|.
name|equals
argument_list|(
name|other
operator|.
name|getWho
argument_list|()
argument_list|)
operator|)
operator|||
name|aclPermission
operator|.
name|getACEMode
argument_list|(
name|i
argument_list|)
operator|!=
name|other
operator|.
name|getMode
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
block|}
return|return
literal|true
return|;
block|}
comment|/**      * Removes any setGid bit from the provided mode string.      *      * @param modeStr The provided mode string.      *      * @return The mode string without a setGid bit.      */
specifier|private
specifier|static
name|String
name|removeSetGid
parameter_list|(
specifier|final
name|String
name|modeStr
parameter_list|)
block|{
if|if
condition|(
name|SIMPLE_SYMBOLIC_MODE_PATTERN
operator|.
name|matcher
argument_list|(
name|modeStr
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
specifier|final
name|char
name|groupExecute
init|=
name|modeStr
operator|.
name|charAt
argument_list|(
literal|5
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupExecute
operator|==
name|SETGID_CHAR_NO_EXEC
condition|)
block|{
return|return
name|modeStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|+
name|UNSET_CHAR
operator|+
name|modeStr
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
return|;
block|}
if|else if
condition|(
name|groupExecute
operator|==
name|SETGID_CHAR
condition|)
block|{
return|return
name|modeStr
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
literal|5
argument_list|)
operator|+
name|EXECUTE_CHAR
operator|+
name|modeStr
operator|.
name|substring
argument_list|(
literal|5
argument_list|)
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|UNIX_SYMBOLIC_MODE_PATTERN
operator|.
name|matcher
argument_list|(
name|modeStr
argument_list|)
operator|.
name|matches
argument_list|()
condition|)
block|{
comment|// check for 'g+s' or 'g=s'
specifier|final
name|Pattern
name|ptnExtractGroupMode
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^g]*(g\\+|=)([^,s]*s[^,s]*)[^g]*"
argument_list|)
decl_stmt|;
specifier|final
name|Matcher
name|mtcExtractGroupMode
init|=
name|ptnExtractGroupMode
operator|.
name|matcher
argument_list|(
name|modeStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtcExtractGroupMode
operator|.
name|matches
argument_list|()
condition|)
block|{
specifier|final
name|String
name|requestedGroupOp
init|=
name|mtcExtractGroupMode
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|requestedGroupMode
init|=
name|mtcExtractGroupMode
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|noSetGidGroupMode
init|=
name|requestedGroupMode
operator|.
name|replace
argument_list|(
literal|"s"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|noSetGidGroupMode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|modeStr
operator|.
name|replace
argument_list|(
name|requestedGroupOp
operator|+
name|requestedGroupMode
argument_list|,
literal|""
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|modeStr
operator|.
name|replace
argument_list|(
name|requestedGroupOp
operator|+
name|requestedGroupMode
argument_list|,
name|requestedGroupOp
operator|+
name|noSetGidGroupMode
argument_list|)
return|;
block|}
block|}
else|else
block|{
comment|// check for 'a+s' or 'a=s'
specifier|final
name|Pattern
name|ptnExtractAllMode
init|=
name|Pattern
operator|.
name|compile
argument_list|(
literal|"[^a]*a(\\+|=)([^,s]*s[^,s]*)[^a]*"
argument_list|)
decl_stmt|;
specifier|final
name|Matcher
name|mtcExtractAllMode
init|=
name|ptnExtractAllMode
operator|.
name|matcher
argument_list|(
name|modeStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|mtcExtractAllMode
operator|.
name|matches
argument_list|()
condition|)
block|{
specifier|final
name|String
name|requestedAllOpSymbol
init|=
name|mtcExtractAllMode
operator|.
name|group
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|final
name|String
name|requestedAllMode
init|=
name|mtcExtractAllMode
operator|.
name|group
argument_list|(
literal|2
argument_list|)
decl_stmt|;
specifier|final
name|String
name|noSetGidGroupMode
init|=
name|requestedAllMode
operator|.
name|replace
argument_list|(
literal|"s"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
return|return
name|USER_CHAR
operator|+
name|requestedAllOpSymbol
operator|+
name|requestedAllMode
operator|+
literal|","
operator|+
operator|(
name|noSetGidGroupMode
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
operator|(
name|GROUP_CHAR
operator|+
name|requestedAllOpSymbol
operator|+
name|noSetGidGroupMode
operator|+
literal|","
operator|)
operator|)
operator|+
name|OTHER_CHAR
operator|+
name|requestedAllMode
operator|+
name|requestedAllMode
return|;
block|}
block|}
block|}
comment|// NOTE: we don't need to do anything for EXIST_SYMBOLIC_MODE_PATTERN as it does not support setting setGid
block|}
return|return
name|modeStr
return|;
block|}
comment|/**      * Removes any setGid bit from the provided mode.      *      * @param mode The provided mode.      *      * @return The mode without a setGid bit.      */
specifier|private
specifier|static
name|int
name|removeSetGid
parameter_list|(
specifier|final
name|int
name|mode
parameter_list|)
block|{
return|return
name|mode
operator|&
operator|~
literal|0x800
return|;
block|}
block|}
end_class

end_unit

