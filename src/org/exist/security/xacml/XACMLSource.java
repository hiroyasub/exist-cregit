begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|xacml
package|;
end_package

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|source
operator|.
name|*
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_comment
comment|/**  * This class represents the source of some content.  It has  * a key, which uniquely identifies this source within its type.  * For possible type values, see {@link XACMLConstants XACMLConstants}.  */
end_comment

begin_class
specifier|public
class|class
name|XACMLSource
block|{
specifier|private
specifier|static
specifier|final
name|String
name|FILE_PROTOCOL
init|=
literal|"file"
decl_stmt|;
specifier|private
specifier|final
name|String
name|type
decl_stmt|;
specifier|private
specifier|final
name|String
name|key
decl_stmt|;
specifier|private
name|XACMLSource
parameter_list|()
block|{
name|this
argument_list|(
literal|null
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|private
name|XACMLSource
parameter_list|(
name|String
name|type
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|this
operator|.
name|type
operator|=
name|type
expr_stmt|;
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
block|}
specifier|public
specifier|static
name|XACMLSource
name|getInstance
parameter_list|(
name|Class
argument_list|<
name|?
argument_list|>
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Source class cannot be null"
argument_list|)
throw|;
return|return
name|getInstance
argument_list|(
name|source
operator|.
name|getName
argument_list|()
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XACMLSource
name|getInstance
parameter_list|(
name|String
name|sourceClassName
parameter_list|)
block|{
if|if
condition|(
name|sourceClassName
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Source class name cannot be null"
argument_list|)
throw|;
return|return
operator|new
name|XACMLSource
argument_list|(
name|XACMLConstants
operator|.
name|CLASS_SOURCE_TYPE
argument_list|,
name|sourceClassName
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|XACMLSource
name|getInstance
parameter_list|(
name|Source
name|source
parameter_list|)
block|{
if|if
condition|(
name|source
operator|==
literal|null
condition|)
throw|throw
operator|new
name|NullPointerException
argument_list|(
literal|"Source cannot be null"
argument_list|)
throw|;
if|if
condition|(
name|source
operator|instanceof
name|FileSource
condition|)
return|return
operator|new
name|XACMLSource
argument_list|(
name|XACMLConstants
operator|.
name|FILE_SOURCE_TYPE
argument_list|,
operator|(
operator|(
name|FileSource
operator|)
name|source
operator|)
operator|.
name|getFilePath
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|source
operator|instanceof
name|URLSource
condition|)
block|{
name|URL
name|url
init|=
operator|(
operator|(
name|URLSource
operator|)
name|source
operator|)
operator|.
name|getURL
argument_list|()
decl_stmt|;
name|String
name|protocol
init|=
name|url
operator|.
name|getProtocol
argument_list|()
decl_stmt|;
name|String
name|host
init|=
name|url
operator|.
name|getHost
argument_list|()
decl_stmt|;
if|if
condition|(
name|protocol
operator|.
name|equals
argument_list|(
name|FILE_PROTOCOL
argument_list|)
operator|&&
operator|(
name|host
operator|==
literal|null
operator|||
name|host
operator|.
name|length
argument_list|()
operator|==
literal|0
operator|||
name|host
operator|.
name|equals
argument_list|(
literal|"localhost"
argument_list|)
operator|||
name|host
operator|.
name|equals
argument_list|(
literal|"127.0.0.1"
argument_list|)
operator|)
condition|)
block|{
name|String
name|path
init|=
name|url
operator|.
name|getFile
argument_list|()
decl_stmt|;
return|return
operator|new
name|XACMLSource
argument_list|(
name|XACMLConstants
operator|.
name|FILE_SOURCE_TYPE
argument_list|,
name|path
argument_list|)
return|;
block|}
name|String
name|key
init|=
name|url
operator|.
name|toExternalForm
argument_list|()
decl_stmt|;
name|String
name|type
init|=
operator|(
name|source
operator|instanceof
name|ClassLoaderSource
operator|)
condition|?
name|XACMLConstants
operator|.
name|CLASSLOADER_SOURCE_TYPE
else|:
name|XACMLConstants
operator|.
name|URL_SOURCE_TYPE
decl_stmt|;
return|return
operator|new
name|XACMLSource
argument_list|(
name|type
argument_list|,
name|key
argument_list|)
return|;
block|}
if|if
condition|(
name|source
operator|instanceof
name|StringSource
operator|||
name|source
operator|instanceof
name|StringSourceWithMapKey
condition|)
return|return
operator|new
name|XACMLSource
argument_list|(
name|XACMLConstants
operator|.
name|STRING_SOURCE_TYPE
argument_list|,
name|XACMLConstants
operator|.
name|STRING_SOURCE_TYPE
argument_list|)
return|;
if|if
condition|(
name|source
operator|instanceof
name|CocoonSource
condition|)
block|{
name|String
name|key
init|=
operator|(
operator|(
name|CocoonSource
operator|)
name|source
operator|)
operator|.
name|getWrappedSource
argument_list|()
operator|.
name|getURI
argument_list|()
decl_stmt|;
return|return
operator|new
name|XACMLSource
argument_list|(
name|XACMLConstants
operator|.
name|COCOON_SOURCE_TYPE
argument_list|,
name|key
argument_list|)
return|;
block|}
if|if
condition|(
name|source
operator|instanceof
name|DBSource
condition|)
block|{
name|XmldbURI
name|key
init|=
operator|(
operator|(
name|DBSource
operator|)
name|source
operator|)
operator|.
name|getDocumentPath
argument_list|()
decl_stmt|;
comment|/* 			 * TODO: not sure what implications using toString here has, when the key 			 * is really an XmldbURI? 			 */
return|return
operator|new
name|XACMLSource
argument_list|(
name|XACMLConstants
operator|.
name|DB_SOURCE_TYPE
argument_list|,
name|key
operator|.
name|toString
argument_list|()
argument_list|)
return|;
block|}
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Unsupported source type '"
operator|+
name|source
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
operator|+
literal|"'"
argument_list|)
throw|;
block|}
specifier|public
name|String
name|getType
parameter_list|()
block|{
return|return
name|type
return|;
block|}
specifier|public
name|String
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|String
name|createId
parameter_list|()
block|{
return|return
name|type
operator|.
name|equals
argument_list|(
name|XACMLConstants
operator|.
name|STRING_SOURCE_TYPE
argument_list|)
condition|?
literal|"[constructed]"
else|:
operator|(
name|type
operator|+
literal|": '"
operator|+
name|key
operator|+
literal|"'"
operator|)
return|;
block|}
block|}
end_class

end_unit

