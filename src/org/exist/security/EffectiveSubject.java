begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2013 The eXist-db Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|security
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Arrays
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|HashSet
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Set
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|lang3
operator|.
name|ArrayUtils
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|Configuration
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|config
operator|.
name|ConfigurationException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|internal
operator|.
name|RealmImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|realm
operator|.
name|Realm
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_comment
comment|/**  * Represents an Effective User  *   * This is used during setUid and setGid operations  * to replace the Subject used by DBBroker  * with a subject which is potentially a composite  * of a user and/or group  *   * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
class|class
name|EffectiveSubject
implements|implements
name|Subject
block|{
specifier|private
specifier|final
name|Account
name|account
decl_stmt|;
specifier|private
specifier|final
name|Group
name|group
decl_stmt|;
specifier|public
name|EffectiveSubject
parameter_list|(
specifier|final
name|Account
name|account
parameter_list|)
block|{
name|this
argument_list|(
name|account
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|EffectiveSubject
parameter_list|(
specifier|final
name|Account
name|account
parameter_list|,
specifier|final
name|Group
name|group
parameter_list|)
block|{
name|this
operator|.
name|account
operator|=
name|account
expr_stmt|;
name|this
operator|.
name|group
operator|=
name|group
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getRealmId
parameter_list|()
block|{
return|return
name|account
operator|.
name|getRealmId
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Realm
name|getRealm
parameter_list|()
block|{
return|return
name|account
operator|.
name|getRealm
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getId
parameter_list|()
block|{
return|return
name|account
operator|.
name|getId
argument_list|()
return|;
comment|//TODO is this correct or need own reserved id?
block|}
annotation|@
name|Override
specifier|public
name|String
name|getUsername
parameter_list|()
block|{
return|return
name|account
operator|.
name|getUsername
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|account
operator|.
name|getName
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|authenticate
parameter_list|(
specifier|final
name|Object
name|credentials
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
comment|//<editor-fold desc="account status">
annotation|@
name|Override
specifier|public
name|boolean
name|isAuthenticated
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isExternallyAuthenticated
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAccountNonExpired
parameter_list|()
block|{
return|return
name|account
operator|.
name|isAccountNonExpired
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isAccountNonLocked
parameter_list|()
block|{
return|return
name|account
operator|.
name|isAccountNonLocked
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isCredentialsNonExpired
parameter_list|()
block|{
return|return
name|account
operator|.
name|isCredentialsNonExpired
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isEnabled
parameter_list|()
block|{
return|return
name|account
operator|.
name|isEnabled
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setEnabled
parameter_list|(
specifier|final
name|boolean
name|enabled
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot change the Enabled status of the Effective User."
argument_list|)
throw|;
block|}
comment|//</editor-fold>
annotation|@
name|Override
specifier|public
name|String
name|getSessionId
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The Effective User has no session!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Session
name|getSession
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The Effective User has no session!"
argument_list|)
throw|;
block|}
comment|//<editor-fold desc="group functions">
annotation|@
name|Override
specifier|public
name|String
index|[]
name|getGroups
parameter_list|()
block|{
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|String
argument_list|>
name|groups
init|=
operator|new
name|HashSet
argument_list|<
name|String
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|account
operator|.
name|getGroups
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|groups
operator|.
name|add
argument_list|(
name|group
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|groups
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|groups
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|account
operator|.
name|getGroups
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|int
index|[]
name|getGroupIds
parameter_list|()
block|{
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
specifier|final
name|Set
argument_list|<
name|Integer
argument_list|>
name|groupIds
init|=
operator|new
name|HashSet
argument_list|<
name|Integer
argument_list|>
argument_list|(
name|Arrays
operator|.
name|asList
argument_list|(
name|ArrayUtils
operator|.
name|toObject
argument_list|(
name|account
operator|.
name|getGroupIds
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|groupIds
operator|.
name|add
argument_list|(
name|group
operator|.
name|getId
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ArrayUtils
operator|.
name|toPrimitive
argument_list|(
name|groupIds
operator|.
name|toArray
argument_list|(
operator|new
name|Integer
index|[
name|groupIds
operator|.
name|size
argument_list|()
index|]
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|account
operator|.
name|getGroupIds
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasDbaRole
parameter_list|()
block|{
if|if
condition|(
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|account
operator|.
name|hasDbaRole
argument_list|()
operator|||
name|group
operator|.
name|getId
argument_list|()
operator|==
name|RealmImpl
operator|.
name|DBA_GROUP_ID
return|;
block|}
else|else
block|{
return|return
name|account
operator|.
name|hasDbaRole
argument_list|()
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPrimaryGroup
parameter_list|()
block|{
return|return
name|account
operator|.
name|getPrimaryGroup
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|getDefaultGroup
parameter_list|()
block|{
return|return
name|account
operator|.
name|getDefaultGroup
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|hasGroup
parameter_list|(
specifier|final
name|String
name|group
parameter_list|)
block|{
if|if
condition|(
name|this
operator|.
name|group
operator|!=
literal|null
condition|)
block|{
return|return
name|this
operator|.
name|group
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|group
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|account
operator|.
name|hasGroup
argument_list|(
name|group
argument_list|)
return|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|Group
name|addGroup
parameter_list|(
specifier|final
name|String
name|name
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot add a group to the Effective User"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|Group
name|addGroup
parameter_list|(
specifier|final
name|Group
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot add a group to the Effective User"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setPrimaryGroup
parameter_list|(
specifier|final
name|Group
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot add a group to the Effective User"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setGroups
parameter_list|(
specifier|final
name|String
index|[]
name|groups
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot set the groups of the Effective User"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|remGroup
parameter_list|(
specifier|final
name|String
name|group
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot remove a group from the Effective User"
argument_list|)
throw|;
block|}
comment|//</editor-fold>
annotation|@
name|Override
specifier|public
name|void
name|setPassword
parameter_list|(
specifier|final
name|String
name|passwd
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The Effective User has no password!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getPassword
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The Effective User has no password!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getDigestPassword
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"The Effective User has no password!"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|assertCanModifyAccount
parameter_list|(
specifier|final
name|Account
name|user
parameter_list|)
throws|throws
name|PermissionDeniedException
block|{
throw|throw
operator|new
name|PermissionDeniedException
argument_list|(
literal|"The Effective User account cannot be modified"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getUserMask
parameter_list|()
block|{
return|return
name|account
operator|.
name|getUserMask
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setUserMask
parameter_list|(
specifier|final
name|int
name|umask
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot set the UserMask of the Effective User"
argument_list|)
throw|;
comment|//To change body of generated methods, choose Tools | Templates.
block|}
comment|//<editor-fold desc="metadata">
annotation|@
name|Override
specifier|public
name|String
name|getMetadataValue
parameter_list|(
specifier|final
name|SchemaType
name|schemaType
parameter_list|)
block|{
return|return
name|account
operator|.
name|getMetadataValue
argument_list|(
name|schemaType
argument_list|)
return|;
block|}
annotation|@
name|Override
specifier|public
name|Set
argument_list|<
name|SchemaType
argument_list|>
name|getMetadataKeys
parameter_list|()
block|{
return|return
name|account
operator|.
name|getMetadataKeys
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|setMetadataValue
parameter_list|(
name|SchemaType
name|schemaType
parameter_list|,
name|String
name|value
parameter_list|)
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot modify the metadata of the Effective User"
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|clearMetadata
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot modify the metadata of the Effective User"
argument_list|)
throw|;
block|}
comment|//</editor-fold>
comment|//<editor-fold desc="persistence">
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|()
throws|throws
name|ConfigurationException
throws|,
name|PermissionDeniedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot perist the Effective User."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|save
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|)
throws|throws
name|ConfigurationException
throws|,
name|PermissionDeniedException
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|(
literal|"You cannot perist the Effective User."
argument_list|)
throw|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|isConfigured
parameter_list|()
block|{
return|return
literal|true
return|;
comment|//the effective user does not need configuring
block|}
annotation|@
name|Override
specifier|public
name|Configuration
name|getConfiguration
parameter_list|()
block|{
return|return
literal|null
return|;
comment|//the effective user does not need configuring
block|}
comment|//</editor-fold>
block|}
end_class

end_unit

