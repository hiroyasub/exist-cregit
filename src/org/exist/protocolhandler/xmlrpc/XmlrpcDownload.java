begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-07 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  *  * $Id: XmlrpcDownload.java 223 2007-04-21 22:13:05Z dizzzz $  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|protocolhandler
operator|.
name|xmlrpc
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Hashtable
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Vector
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpc
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xmlrpc
operator|.
name|XmlRpcClient
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|protocolhandler
operator|.
name|xmldb
operator|.
name|XmldbURL
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|io
operator|.
name|ExistIOException
import|;
end_import

begin_comment
comment|/**  *  Read document from using XMLRPC from remote database and write the data   * into an output stream.  *  * @author Dannes Wessels  */
end_comment

begin_class
specifier|public
class|class
name|XmlrpcDownload
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|Logger
operator|.
name|getLogger
argument_list|(
name|XmlrpcDownload
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      *  Write document referred by the URL to the output stream.      *       *       * @param xmldbURL Document location in database.      * @param os Stream to which the document is written.      * @throws ExistIOException      */
specifier|public
name|void
name|stream
parameter_list|(
name|XmldbURL
name|xmldbURL
parameter_list|,
name|OutputStream
name|os
parameter_list|)
throws|throws
name|IOException
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Begin document download"
argument_list|)
expr_stmt|;
try|try
block|{
comment|// Setup client client
name|XmlRpc
operator|.
name|setEncoding
argument_list|(
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|XmlRpcClient
name|client
init|=
operator|new
name|XmlRpcClient
argument_list|(
name|xmldbURL
operator|.
name|getXmlRpcURL
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|xmldbURL
operator|.
name|hasUserInfo
argument_list|()
condition|)
block|{
name|client
operator|.
name|setBasicAuthentication
argument_list|(
name|xmldbURL
operator|.
name|getUsername
argument_list|()
argument_list|,
name|xmldbURL
operator|.
name|getPassword
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Setup xml serializer
name|Hashtable
name|options
init|=
operator|new
name|Hashtable
argument_list|()
decl_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"indent"
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|options
operator|.
name|put
argument_list|(
literal|"encoding"
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
comment|// Setup client parameters
name|Vector
name|params
init|=
operator|new
name|Vector
argument_list|()
decl_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|xmldbURL
operator|.
name|getCollectionPath
argument_list|()
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|options
argument_list|)
expr_stmt|;
comment|// Shoot first method write data
name|Hashtable
name|ht
init|=
operator|(
name|Hashtable
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"getDocumentData"
argument_list|,
name|params
argument_list|)
decl_stmt|;
name|int
name|offset
init|=
operator|(
operator|(
name|Integer
operator|)
name|ht
operator|.
name|get
argument_list|(
literal|"offset"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
decl_stmt|;
name|byte
index|[]
name|data
init|=
operator|(
name|byte
index|[]
operator|)
name|ht
operator|.
name|get
argument_list|(
literal|"data"
argument_list|)
decl_stmt|;
name|String
name|handle
init|=
operator|(
name|String
operator|)
name|ht
operator|.
name|get
argument_list|(
literal|"handle"
argument_list|)
decl_stmt|;
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// When there is more data to download
while|while
condition|(
name|offset
operator|!=
literal|0
condition|)
block|{
comment|// Clean and re-setup client parameters
name|params
operator|.
name|clear
argument_list|()
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
name|handle
argument_list|)
expr_stmt|;
name|params
operator|.
name|addElement
argument_list|(
operator|new
name|Integer
argument_list|(
name|offset
argument_list|)
argument_list|)
expr_stmt|;
comment|// Get and write next chunk
name|ht
operator|=
operator|(
name|Hashtable
operator|)
name|client
operator|.
name|execute
argument_list|(
literal|"getNextChunk"
argument_list|,
name|params
argument_list|)
expr_stmt|;
name|data
operator|=
operator|(
name|byte
index|[]
operator|)
name|ht
operator|.
name|get
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|offset
operator|=
operator|(
operator|(
name|Integer
operator|)
name|ht
operator|.
name|get
argument_list|(
literal|"offset"
argument_list|)
operator|)
operator|.
name|intValue
argument_list|()
expr_stmt|;
name|os
operator|.
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|IOException
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
name|ex
throw|;
block|}
catch|catch
parameter_list|(
name|Exception
name|ex
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
name|ex
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|ExistIOException
argument_list|(
name|ex
operator|.
name|getMessage
argument_list|()
argument_list|,
name|ex
argument_list|)
throw|;
block|}
finally|finally
block|{
name|LOG
operator|.
name|debug
argument_list|(
literal|"Finished document download"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

