begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2016 The eXist Project  *  http://exist-db.org  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *  *  You should have received a copy of the GNU Lesser General Public  *  License along with this library; if not, write to the Free Software  *  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|com
operator|.
name|evolvedbinary
operator|.
name|j8fu
operator|.
name|Either
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Map
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter  */
end_comment

begin_class
specifier|public
class|class
name|HtmlToXmlParser
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|HtmlToXmlParser
operator|.
name|class
argument_list|)
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTML_TO_XML_PARSER_ELEMENT
init|=
literal|"html-to-xml"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTML_TO_XML_PARSER_CLASS_ATTRIBUTE
init|=
literal|"class"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTML_TO_XML_PARSER_PROPERTIES_ELEMENT
init|=
literal|"properties"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTML_TO_XML_PARSER_FEATURES_ELEMENT
init|=
literal|"features"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTML_TO_XML_PARSER_PROPERTY
init|=
literal|"parser.html-to-xml-parser"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTML_TO_XML_PARSER_PROPERTIES_PROPERTY
init|=
literal|"parser.html-to-xml-parser.properties"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|HTML_TO_XML_PARSER_FEATURES_PROPERTY
init|=
literal|"parser.html-to-xml-parser.features"
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|String
name|PARSER_ELEMENT_NAME
init|=
literal|"parser"
decl_stmt|;
comment|/**      * Returns the Configured HTML to XML parser      *      * @param config The configuration which specifies the classname of the parser to use      *      * @return If the configuration specifies a valid HTML to XML Parser and it      * is available on the classpath, then the result of instantiating it will be      * returned, otherwise {@link Optional#EMPTY}      */
specifier|public
specifier|static
name|Optional
argument_list|<
name|Either
argument_list|<
name|Throwable
argument_list|,
name|XMLReader
argument_list|>
argument_list|>
name|getHtmlToXmlParser
parameter_list|(
specifier|final
name|Configuration
name|config
parameter_list|)
block|{
specifier|final
name|Optional
argument_list|<
name|String
argument_list|>
name|parserClassName
init|=
name|Optional
operator|.
name|ofNullable
argument_list|(
operator|(
name|String
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|HTML_TO_XML_PARSER_PROPERTY
argument_list|)
argument_list|)
decl_stmt|;
comment|// instantiate the parser
specifier|final
name|Optional
argument_list|<
name|Either
argument_list|<
name|Throwable
argument_list|,
name|XMLReader
argument_list|>
argument_list|>
name|inst
init|=
name|parserClassName
operator|.
name|map
argument_list|(
name|cn
lambda|->
block|{
name|Either
argument_list|<
name|Throwable
argument_list|,
name|XMLReader
argument_list|>
name|result
decl_stmt|;
try|try
block|{
specifier|final
name|Class
name|clazz
init|=
name|Class
operator|.
name|forName
argument_list|(
name|cn
argument_list|)
decl_stmt|;
if|if
condition|(
name|XMLReader
operator|.
name|class
operator|.
name|isAssignableFrom
argument_list|(
name|clazz
argument_list|)
condition|)
block|{
specifier|final
name|XMLReader
name|reader
init|=
operator|(
name|XMLReader
operator|)
name|clazz
operator|.
name|newInstance
argument_list|()
decl_stmt|;
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|features
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|HTML_TO_XML_PARSER_FEATURES_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|features
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Boolean
argument_list|>
name|feature
range|:
name|features
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|reader
operator|.
name|setFeature
argument_list|(
name|feature
operator|.
name|getKey
argument_list|()
argument_list|,
name|feature
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|final
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|properties
init|=
operator|(
name|Map
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
operator|)
name|config
operator|.
name|getProperty
argument_list|(
name|HTML_TO_XML_PARSER_PROPERTIES_PROPERTY
argument_list|)
decl_stmt|;
if|if
condition|(
name|properties
operator|!=
literal|null
condition|)
block|{
for|for
control|(
specifier|final
name|Map
operator|.
name|Entry
argument_list|<
name|String
argument_list|,
name|Object
argument_list|>
name|property
range|:
name|properties
operator|.
name|entrySet
argument_list|()
control|)
block|{
name|reader
operator|.
name|setProperty
argument_list|(
name|property
operator|.
name|getKey
argument_list|()
argument_list|,
name|property
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|result
operator|=
name|Either
operator|.
name|Right
argument_list|(
name|reader
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|Either
operator|.
name|Left
argument_list|(
operator|new
name|ClassCastException
argument_list|(
name|cn
operator|+
literal|" does not implement org.xml.sax.XMLReader"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|ClassNotFoundException
decl||
name|InstantiationException
decl||
name|IllegalAccessException
decl||
name|SAXNotRecognizedException
decl||
name|SAXNotSupportedException
name|e
parameter_list|)
block|{
name|result
operator|=
name|Either
operator|.
name|Left
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
argument_list|)
decl_stmt|;
return|return
name|inst
return|;
block|}
block|}
end_class

end_unit

