begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|BufferedInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStreamReader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_comment
comment|/**  * This class extends {@link org.xml.sax.InputSource}, so  * it also manages {@link java.io.File} and  * {@link org.exist.util.VirtualTempFile} as input sources.  *   * @author jmfernandez  *  */
end_comment

begin_class
specifier|public
class|class
name|VirtualTempFileInputSource
extends|extends
name|EXistInputSource
block|{
specifier|private
name|VirtualTempFile
name|vtempFile
decl_stmt|;
specifier|private
name|File
name|file
decl_stmt|;
specifier|private
name|String
name|absolutePath
decl_stmt|;
specifier|public
name|VirtualTempFileInputSource
parameter_list|(
name|VirtualTempFile
name|vtempFile
parameter_list|)
throws|throws
name|IOException
block|{
name|this
argument_list|(
name|vtempFile
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VirtualTempFileInputSource
parameter_list|(
name|VirtualTempFile
name|vtempFile
parameter_list|,
name|String
name|encoding
parameter_list|)
throws|throws
name|IOException
block|{
name|this
operator|.
name|file
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|vtempFile
operator|=
name|vtempFile
expr_stmt|;
comment|// Temp file must be immutable from this point
name|vtempFile
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
name|super
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|vtempFile
operator|.
name|tempFile
operator|!=
literal|null
condition|)
block|{
name|absolutePath
operator|=
name|vtempFile
operator|.
name|tempFile
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|super
operator|.
name|setSystemId
argument_list|(
name|vtempFile
operator|.
name|tempFile
operator|.
name|toURI
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|absolutePath
operator|=
literal|""
expr_stmt|;
block|}
block|}
specifier|public
name|VirtualTempFileInputSource
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
argument_list|(
name|file
argument_list|,
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|VirtualTempFileInputSource
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|encoding
parameter_list|)
block|{
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
name|this
operator|.
name|vtempFile
operator|=
literal|null
expr_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
name|super
operator|.
name|setEncoding
argument_list|(
name|encoding
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|absolutePath
operator|=
name|file
operator|.
name|getAbsolutePath
argument_list|()
expr_stmt|;
name|super
operator|.
name|setSystemId
argument_list|(
name|file
operator|.
name|toURI
argument_list|()
operator|.
name|toASCIIString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
name|InputStream
name|getByteStream
parameter_list|()
block|{
name|InputStream
name|bs
init|=
literal|null
decl_stmt|;
comment|// An stream is something without a URI, like a memory buffer
try|try
block|{
if|if
condition|(
name|vtempFile
operator|!=
literal|null
condition|)
name|bs
operator|=
name|vtempFile
operator|.
name|getByteStream
argument_list|()
expr_stmt|;
if|else if
condition|(
name|file
operator|!=
literal|null
condition|)
name|bs
operator|=
operator|new
name|BufferedInputStream
argument_list|(
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
comment|// DoNothing(R)
block|}
return|return
name|bs
return|;
block|}
specifier|public
name|Reader
name|getCharacterStream
parameter_list|()
block|{
name|String
name|encoding
init|=
name|getEncoding
argument_list|()
decl_stmt|;
name|Reader
name|retval
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|encoding
operator|!=
literal|null
condition|)
block|{
name|InputStream
name|is
init|=
name|getByteStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|retval
operator|=
operator|new
name|InputStreamReader
argument_list|(
name|is
argument_list|,
name|encoding
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|uee
parameter_list|)
block|{
comment|// DoNothing(R)
block|}
block|}
block|}
return|return
name|retval
return|;
block|}
specifier|public
name|long
name|getByteStreamLength
parameter_list|()
block|{
name|long
name|length
init|=
operator|-
literal|1L
decl_stmt|;
if|if
condition|(
name|vtempFile
operator|!=
literal|null
condition|)
block|{
name|length
operator|=
name|vtempFile
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|else if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
name|length
operator|=
name|file
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
return|return
name|length
return|;
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided  	 */
specifier|public
name|void
name|setByteStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
comment|// Nothing, so collateral effects are avoided!
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided  	 */
specifier|public
name|void
name|setCharacterStream
parameter_list|(
name|Reader
name|r
parameter_list|)
block|{
comment|// Nothing, so collateral effects are avoided!
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided  	 */
specifier|public
name|void
name|setSystemId
parameter_list|(
name|String
name|systemId
parameter_list|)
block|{
comment|// Nothing, so collateral effects are avoided!
block|}
specifier|public
name|void
name|free
parameter_list|()
block|{
if|if
condition|(
name|vtempFile
operator|!=
literal|null
condition|)
block|{
name|vtempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
name|vtempFile
operator|=
literal|null
expr_stmt|;
block|}
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
name|file
operator|=
literal|null
expr_stmt|;
block|}
specifier|protected
name|void
name|finalize
parameter_list|()
throws|throws
name|Throwable
block|{
name|free
argument_list|()
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|String
name|getSymbolicPath
parameter_list|()
block|{
return|return
name|absolutePath
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|close
parameter_list|()
block|{
comment|// TODO Auto-generated method stub
block|}
block|}
end_class

end_unit

