begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001,  Wolfgang M. Meier (meier@ifs.tu-darmstadt.de)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  *  $Id:  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|w3c
operator|.
name|dom
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|StringWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|PrintWriter
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileInputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|ByteArrayOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|UnsupportedEncodingException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|OutputFormat
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|xml
operator|.
name|serialize
operator|.
name|XMLSerializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_comment
comment|/**  *  Description of the Class  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    18. Juli 2002  */
end_comment

begin_class
specifier|public
class|class
name|XMLUtil
block|{
specifier|public
specifier|final
specifier|static
name|String
name|dump
parameter_list|(
name|DocumentFragment
name|fragment
parameter_list|)
block|{
name|OutputFormat
name|format
init|=
operator|new
name|OutputFormat
argument_list|(
literal|"xml"
argument_list|,
literal|"UTF-8"
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|format
operator|.
name|setLineWidth
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|format
operator|.
name|setOmitXMLDeclaration
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|StringWriter
name|writer
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|XMLSerializer
name|serializer
init|=
operator|new
name|XMLSerializer
argument_list|(
name|writer
argument_list|,
name|format
argument_list|)
decl_stmt|;
try|try
block|{
name|serializer
operator|.
name|serialize
argument_list|(
name|fragment
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
block|}
return|return
name|writer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  new_doc   Description of the Parameter 	 *@param  node      Description of the Parameter 	 *@param  new_node  Description of the Parameter 	 */
specifier|public
specifier|final
specifier|static
name|void
name|copyChildren
parameter_list|(
name|Document
name|new_doc
parameter_list|,
name|Node
name|node
parameter_list|,
name|Node
name|new_node
parameter_list|)
block|{
name|NodeList
name|children
init|=
name|node
operator|.
name|getChildNodes
argument_list|()
decl_stmt|;
name|Node
name|child
decl_stmt|;
name|Node
name|new_child
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|getLength
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|child
operator|=
name|children
operator|.
name|item
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|child
operator|==
literal|null
condition|)
continue|continue;
switch|switch
condition|(
name|child
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
block|{
name|new_child
operator|=
name|copyNode
argument_list|(
name|new_doc
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|new_node
operator|.
name|appendChild
argument_list|(
name|new_child
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
block|{
name|new_child
operator|=
name|copyNode
argument_list|(
name|new_doc
argument_list|,
name|child
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Element
operator|)
name|new_node
operator|)
operator|.
name|setAttributeNode
argument_list|(
operator|(
name|Attr
operator|)
name|new_child
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
block|{
name|new_child
operator|=
name|copyNode
argument_list|(
name|new_doc
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|new_node
operator|.
name|appendChild
argument_list|(
name|new_child
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  new_doc  Description of the Parameter 	 *@param  node     Description of the Parameter 	 *@return          Description of the Return Value 	 */
specifier|public
specifier|final
specifier|static
name|Node
name|copyNode
parameter_list|(
name|Document
name|new_doc
parameter_list|,
name|Node
name|node
parameter_list|)
block|{
name|Node
name|new_node
decl_stmt|;
switch|switch
condition|(
name|node
operator|.
name|getNodeType
argument_list|()
condition|)
block|{
case|case
name|Node
operator|.
name|ELEMENT_NODE
case|:
name|new_node
operator|=
name|new_doc
operator|.
name|createElement
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
name|copyChildren
argument_list|(
name|new_doc
argument_list|,
name|node
argument_list|,
name|new_node
argument_list|)
expr_stmt|;
return|return
name|new_node
return|;
case|case
name|Node
operator|.
name|TEXT_NODE
case|:
name|new_node
operator|=
name|new_doc
operator|.
name|createTextNode
argument_list|(
operator|(
operator|(
name|Text
operator|)
name|node
operator|)
operator|.
name|getData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|new_node
return|;
case|case
name|Node
operator|.
name|ATTRIBUTE_NODE
case|:
name|new_node
operator|=
name|new_doc
operator|.
name|createAttribute
argument_list|(
name|node
operator|.
name|getNodeName
argument_list|()
argument_list|)
expr_stmt|;
operator|(
operator|(
name|Attr
operator|)
name|new_node
operator|)
operator|.
name|setValue
argument_list|(
operator|(
operator|(
name|Attr
operator|)
name|node
operator|)
operator|.
name|getValue
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|new_node
return|;
default|default :
return|return
literal|null
return|;
block|}
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  str  Description of the Parameter 	 *@return      Description of the Return Value 	 */
specifier|public
specifier|final
specifier|static
name|String
name|encodeAttrMarkup
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
switch|switch
condition|(
name|ch
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
case|case
literal|'&'
case|:
name|boolean
name|isEntity
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|1
init|;
name|j
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
if|if
condition|(
name|str
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
operator|==
literal|';'
condition|)
block|{
name|isEntity
operator|=
literal|true
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|Character
operator|.
name|isLetter
argument_list|(
name|str
operator|.
name|charAt
argument_list|(
name|j
argument_list|)
argument_list|)
condition|)
break|break;
block|}
if|if
condition|(
name|isEntity
condition|)
name|buf
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
else|else
name|buf
operator|.
name|append
argument_list|(
literal|"&amp;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'<'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"&lt;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'>'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"&gt;"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'"'
case|:
name|buf
operator|.
name|append
argument_list|(
literal|"&quot;"
argument_list|)
expr_stmt|;
break|break;
default|default :
name|buf
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
specifier|final
specifier|static
name|String
name|decodeAttrMarkup
parameter_list|(
name|String
name|str
parameter_list|)
block|{
name|StringBuffer
name|out
init|=
operator|new
name|StringBuffer
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|char
name|ch
decl_stmt|;
name|String
name|ent
decl_stmt|;
name|int
name|p
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|str
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
literal|'&'
condition|)
block|{
name|p
operator|=
name|str
operator|.
name|indexOf
argument_list|(
literal|';'
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
operator|-
literal|1
operator|<
name|p
condition|)
block|{
name|ent
operator|=
name|str
operator|.
name|substring
argument_list|(
name|i
operator|+
literal|1
argument_list|,
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
name|ent
operator|.
name|equals
argument_list|(
literal|"amp"
argument_list|)
condition|)
name|out
operator|.
name|append
argument_list|(
literal|'&'
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ent
operator|.
name|equals
argument_list|(
literal|"lt"
argument_list|)
condition|)
name|out
operator|.
name|append
argument_list|(
literal|'<'
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ent
operator|.
name|equals
argument_list|(
literal|"gt"
argument_list|)
condition|)
name|out
operator|.
name|append
argument_list|(
literal|'>'
argument_list|)
expr_stmt|;
if|else if
condition|(
name|ent
operator|.
name|equals
argument_list|(
literal|"quot"
argument_list|)
condition|)
name|out
operator|.
name|append
argument_list|(
literal|'"'
argument_list|)
expr_stmt|;
name|i
operator|=
name|p
expr_stmt|;
continue|continue;
block|}
block|}
name|out
operator|.
name|append
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
name|out
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  e  Description of the Parameter 	 *@return    Description of the Return Value 	 */
specifier|public
specifier|final
specifier|static
name|String
name|exceptionToString
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
name|StringWriter
name|sw
init|=
operator|new
name|StringWriter
argument_list|()
decl_stmt|;
name|e
operator|.
name|printStackTrace
argument_list|(
operator|new
name|PrintWriter
argument_list|(
name|sw
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|sw
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/** 	 *  Gets the encoding attribute of the XMLUtil class 	 * 	 *@param  xmlDecl  Description of the Parameter 	 *@return          The encoding value 	 */
specifier|public
specifier|final
specifier|static
name|String
name|getEncoding
parameter_list|(
name|String
name|xmlDecl
parameter_list|)
block|{
if|if
condition|(
name|xmlDecl
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|int
name|p0
init|=
name|xmlDecl
operator|.
name|indexOf
argument_list|(
literal|"encoding"
argument_list|)
decl_stmt|;
if|if
condition|(
name|p0
operator|<
literal|0
condition|)
return|return
literal|null
return|;
for|for
control|(
name|int
name|i
init|=
name|p0
operator|+
literal|8
init|;
name|i
operator|<
name|xmlDecl
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|Character
operator|.
name|isWhitespace
argument_list|(
name|xmlDecl
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
operator|||
name|xmlDecl
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'='
condition|)
continue|continue;
if|else if
condition|(
name|xmlDecl
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|==
literal|'"'
condition|)
block|{
while|while
condition|(
name|xmlDecl
operator|.
name|charAt
argument_list|(
operator|++
name|i
argument_list|)
operator|!=
literal|'"'
operator|&&
name|i
operator|<
name|xmlDecl
operator|.
name|length
argument_list|()
condition|)
name|buf
operator|.
name|append
argument_list|(
name|xmlDecl
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
else|else
return|return
literal|null
return|;
return|return
literal|null
return|;
block|}
comment|/** 	 *  Gets the firstChildId attribute of the XMLUtil class 	 * 	 *@param  doc  Description of the Parameter 	 *@param  gid  Description of the Parameter 	 *@return      The firstChildId value 	 */
specifier|public
specifier|final
specifier|static
name|long
name|getFirstChildId
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
specifier|final
name|int
name|level
init|=
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|<
literal|0
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"child index out of bounds"
argument_list|)
throw|;
specifier|final
name|int
name|order
init|=
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|order
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"level "
operator|+
operator|(
name|level
operator|+
literal|1
operator|)
operator|+
literal|" out of bounds: "
operator|+
name|gid
operator|+
literal|"; start = "
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
argument_list|)
expr_stmt|;
name|Thread
operator|.
name|dumpStack
argument_list|()
expr_stmt|;
block|}
return|return
operator|(
name|gid
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|)
operator|*
name|order
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|+
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|long
name|getParentId
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
specifier|final
name|int
name|level
init|=
name|doc
operator|.
name|getTreeLevel
argument_list|(
name|gid
argument_list|)
decl_stmt|;
if|if
condition|(
name|level
operator|<
literal|0
condition|)
block|{
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
literal|"unable to determine level for "
operator|+
name|gid
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
operator|(
name|gid
operator|-
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
argument_list|)
operator|)
operator|/
name|doc
operator|.
name|getTreeLevelOrder
argument_list|(
name|level
argument_list|)
operator|+
name|doc
operator|.
name|getLevelStartPoint
argument_list|(
name|level
operator|-
literal|1
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|boolean
name|isDescendantOrSelf
parameter_list|(
name|DocumentImpl
name|doc
parameter_list|,
name|long
name|ancestor
parameter_list|,
name|long
name|descendant
parameter_list|)
block|{
name|boolean
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ancestor
operator|==
name|descendant
condition|)
name|found
operator|=
literal|true
expr_stmt|;
while|while
condition|(
operator|(
operator|!
name|found
operator|)
operator|&&
operator|(
name|descendant
operator|=
name|getParentId
argument_list|(
name|doc
argument_list|,
name|descendant
argument_list|)
operator|)
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|descendant
operator|==
name|ancestor
condition|)
name|found
operator|=
literal|true
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
comment|/** 	 *  Gets the encoding attribute of the XMLUtil class 	 * 	 *@param  data  Description of the Parameter 	 *@return       The encoding value 	 */
specifier|public
specifier|final
specifier|static
name|String
name|getXMLDecl
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|boolean
name|foundTag
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
operator|&&
operator|!
name|foundTag
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|data
index|[
name|i
index|]
operator|==
literal|'<'
condition|)
block|{
name|foundTag
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|data
index|[
name|i
operator|+
literal|1
index|]
operator|==
literal|'?'
operator|&&
name|data
index|[
name|i
operator|+
literal|2
index|]
operator|==
literal|'x'
operator|&&
name|data
index|[
name|i
operator|+
literal|3
index|]
operator|==
literal|'m'
operator|&&
name|data
index|[
name|i
operator|+
literal|4
index|]
operator|==
literal|'l'
condition|)
for|for
control|(
name|int
name|j
init|=
name|i
operator|+
literal|5
init|;
name|j
operator|<
name|data
operator|.
name|length
condition|;
name|j
operator|++
control|)
if|if
condition|(
name|data
index|[
name|j
index|]
operator|==
literal|'?'
operator|&&
name|data
index|[
name|j
operator|+
literal|1
index|]
operator|==
literal|'>'
condition|)
block|{
name|String
name|xmlDecl
init|=
operator|new
name|String
argument_list|(
name|data
argument_list|,
name|i
argument_list|,
name|j
operator|-
name|i
operator|+
literal|2
argument_list|)
decl_stmt|;
return|return
name|xmlDecl
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
comment|/** 	 *  The main program for the XMLUtil class 	 * 	 *@param  args  The command line arguments 	 */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|q
init|=
literal|"//SPEECH[LINE&amp;= 'fenny snake']"
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|XMLUtil
operator|.
name|decodeAttrMarkup
argument_list|(
name|q
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  file             Description of the Parameter 	 *@return                  Description of the Return Value 	 *@exception  IOException  Description of the Exception 	 */
specifier|public
specifier|final
specifier|static
name|String
name|readFile
parameter_list|(
name|File
name|file
parameter_list|)
throws|throws
name|IOException
block|{
return|return
name|readFile
argument_list|(
name|file
argument_list|,
literal|"ISO-8859-1"
argument_list|)
return|;
block|}
comment|/** 	 *  Description of the Method 	 * 	 *@param  file             Description of the Parameter 	 *@param  defaultEncoding  Description of the Parameter 	 *@return                  Description of the Return Value 	 *@exception  IOException  Description of the Exception 	 */
specifier|public
specifier|static
name|String
name|readFile
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|defaultEncoding
parameter_list|)
throws|throws
name|IOException
block|{
comment|// read the file into a string
name|FileInputStream
name|in
init|=
operator|new
name|FileInputStream
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|byte
index|[]
name|chunk
init|=
operator|new
name|byte
index|[
literal|512
index|]
decl_stmt|;
name|ByteArrayOutputStream
name|out
init|=
operator|new
name|ByteArrayOutputStream
argument_list|()
decl_stmt|;
name|int
name|l
decl_stmt|;
do|do
block|{
name|l
operator|=
name|in
operator|.
name|read
argument_list|(
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|>
literal|0
condition|)
name|out
operator|.
name|write
argument_list|(
name|chunk
argument_list|,
literal|0
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|l
operator|>
operator|-
literal|1
condition|)
do|;
name|in
operator|.
name|close
argument_list|()
expr_stmt|;
name|byte
index|[]
name|data
init|=
name|out
operator|.
name|toByteArray
argument_list|()
decl_stmt|;
name|String
name|xmlDecl
init|=
name|getXMLDecl
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|String
name|enc
init|=
name|getEncoding
argument_list|(
name|xmlDecl
argument_list|)
decl_stmt|;
if|if
condition|(
name|enc
operator|==
literal|null
condition|)
name|enc
operator|=
name|defaultEncoding
expr_stmt|;
try|try
block|{
return|return
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|enc
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
name|UnsupportedEncodingException
name|e
parameter_list|)
block|{
return|return
operator|new
name|String
argument_list|(
name|out
operator|.
name|toByteArray
argument_list|()
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|static
name|String
name|parseValue
parameter_list|(
name|String
name|value
parameter_list|,
name|String
name|key
parameter_list|)
block|{
name|int
name|p
init|=
name|value
operator|.
name|indexOf
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
operator|<
literal|0
condition|)
return|return
literal|null
return|;
return|return
name|parseValue
argument_list|(
name|value
argument_list|,
name|p
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|String
name|parseValue
parameter_list|(
name|String
name|value
parameter_list|,
name|int
name|p
parameter_list|)
block|{
while|while
condition|(
operator|(
name|p
operator|<
name|value
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|(
name|value
operator|.
name|charAt
argument_list|(
operator|++
name|p
argument_list|)
operator|!=
literal|'"'
operator|)
condition|)
empty_stmt|;
if|if
condition|(
name|p
operator|==
name|value
operator|.
name|length
argument_list|()
condition|)
return|return
literal|null
return|;
name|int
name|e
init|=
operator|++
name|p
decl_stmt|;
while|while
condition|(
operator|(
name|e
operator|<
name|value
operator|.
name|length
argument_list|()
operator|)
operator|&&
operator|(
name|value
operator|.
name|charAt
argument_list|(
operator|++
name|e
argument_list|)
operator|!=
literal|'"'
operator|)
condition|)
empty_stmt|;
if|if
condition|(
name|e
operator|==
name|value
operator|.
name|length
argument_list|()
condition|)
return|return
literal|null
return|;
return|return
name|value
operator|.
name|substring
argument_list|(
name|p
argument_list|,
name|e
argument_list|)
return|;
block|}
block|}
end_class

end_unit

