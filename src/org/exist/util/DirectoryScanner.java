begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_class
specifier|public
class|class
name|DirectoryScanner
block|{
specifier|private
specifier|final
specifier|static
name|String
name|extractBaseDir
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
name|int
name|p
init|=
literal|0
decl_stmt|;
name|char
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|ch
operator|=
name|pattern
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
name|File
operator|.
name|separatorChar
operator|||
name|ch
operator|==
literal|':'
condition|)
block|{
name|p
operator|=
name|i
expr_stmt|;
continue|continue;
block|}
if|else if
condition|(
name|ch
operator|==
literal|'*'
operator|||
name|ch
operator|==
literal|'?'
condition|)
block|{
if|if
condition|(
name|p
operator|>
literal|0
condition|)
return|return
name|pattern
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|p
operator|+
literal|1
argument_list|)
return|;
block|}
block|}
return|return
literal|null
return|;
block|}
specifier|public
specifier|final
specifier|static
name|File
index|[]
name|scanDir
parameter_list|(
name|String
name|pattern
parameter_list|)
block|{
comment|//TODO : why this test ? File should make it ! -pb
name|pattern
operator|=
name|pattern
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
name|String
name|baseDir
init|=
name|extractBaseDir
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
if|if
condition|(
name|baseDir
operator|==
literal|null
condition|)
block|{
name|baseDir
operator|=
name|System
operator|.
name|getProperty
argument_list|(
literal|"user.dir"
argument_list|)
expr_stmt|;
name|pattern
operator|=
name|baseDir
operator|+
name|File
operator|.
name|separator
operator|+
name|pattern
expr_stmt|;
block|}
name|File
name|base
init|=
operator|new
name|File
argument_list|(
name|baseDir
argument_list|)
decl_stmt|;
return|return
name|scanDir
argument_list|(
name|base
argument_list|,
name|pattern
operator|.
name|substring
argument_list|(
name|baseDir
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|File
index|[]
name|scanDir
parameter_list|(
name|File
name|baseDir
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
comment|///TODO : why this test ? File should make it ! -pb
name|pattern
operator|=
name|pattern
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
name|File
operator|.
name|separatorChar
argument_list|)
expr_stmt|;
name|ArrayList
name|list
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
name|scanDir
argument_list|(
name|list
argument_list|,
name|baseDir
argument_list|,
literal|""
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
name|File
index|[]
name|files
init|=
operator|new
name|File
index|[
name|list
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
return|return
operator|(
name|File
index|[]
operator|)
name|list
operator|.
name|toArray
argument_list|(
name|files
argument_list|)
return|;
block|}
specifier|private
specifier|final
specifier|static
name|void
name|scanDir
parameter_list|(
name|ArrayList
name|list
parameter_list|,
name|File
name|dir
parameter_list|,
name|String
name|vpath
parameter_list|,
name|String
name|pattern
parameter_list|)
block|{
name|String
name|files
index|[]
init|=
name|dir
operator|.
name|list
argument_list|()
decl_stmt|;
name|File
name|file
decl_stmt|;
name|String
name|name
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|file
operator|=
operator|new
name|File
argument_list|(
name|dir
argument_list|,
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|name
operator|=
name|vpath
operator|+
name|files
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
operator|&&
name|matchStart
argument_list|(
name|pattern
argument_list|,
name|name
argument_list|)
condition|)
block|{
name|scanDir
argument_list|(
name|list
argument_list|,
name|file
argument_list|,
name|name
operator|+
name|File
operator|.
name|separator
argument_list|,
name|pattern
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|match
argument_list|(
name|pattern
argument_list|,
name|name
argument_list|)
condition|)
name|list
operator|.
name|add
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
specifier|static
name|boolean
name|match
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|SelectorUtils
operator|.
name|matchPath
argument_list|(
name|pattern
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
name|boolean
name|matchStart
parameter_list|(
name|String
name|pattern
parameter_list|,
name|String
name|name
parameter_list|)
block|{
return|return
name|SelectorUtils
operator|.
name|matchPatternStart
argument_list|(
name|pattern
argument_list|,
name|name
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
name|args
index|[]
parameter_list|)
block|{
name|File
name|files
index|[]
init|=
name|scanDir
argument_list|(
literal|"/home/*/xml/**/*.xml"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|files
index|[
name|i
index|]
operator|.
name|getAbsolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

