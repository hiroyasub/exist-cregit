begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2000/01,  Wolfgang Meier (meier@ifs.tu-darmstadt.de)  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  *  Description of the Class  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    11. September 2002  */
end_comment

begin_class
specifier|public
class|class
name|ByteConversion
block|{
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|BYTE
init|=
literal|0x0
decl_stmt|;
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|INT
init|=
literal|0x2
decl_stmt|;
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|LONG
init|=
literal|0x3
decl_stmt|;
comment|/**  Description of the Field */
specifier|public
specifier|final
specifier|static
name|int
name|SHORT
init|=
literal|0x1
decl_stmt|;
comment|/**      *  Description of the Method      *      *@param  data     Description of the Parameter      *@param  pointer  Description of the Parameter      *@param  len      Description of the Parameter      *@return          Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|String
name|UTF82String
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|pointer
parameter_list|,
name|int
name|len
parameter_list|)
block|{
comment|//int len = byteToShort( data, pointer );
name|pointer
operator|+=
literal|2
expr_stmt|;
name|char
index|[]
name|cdata
init|=
operator|new
name|char
index|[
name|len
index|]
decl_stmt|;
name|int
name|c
decl_stmt|;
name|int
name|d
decl_stmt|;
name|int
name|e
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
name|pos
operator|<
name|len
condition|;
name|pos
operator|++
control|)
block|{
name|c
operator|=
operator|(
name|int
operator|)
name|data
index|[
name|pointer
index|]
expr_stmt|;
name|pointer
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|==
literal|0
condition|)
break|break;
if|if
condition|(
name|c
operator|<
literal|0x80
condition|)
name|cdata
index|[
name|pos
index|]
operator|=
operator|(
name|char
operator|)
name|c
expr_stmt|;
if|else                 if
condition|(
name|c
operator|>
literal|0xDF
condition|)
block|{
name|d
operator|=
operator|(
name|int
operator|)
name|data
index|[
name|pointer
index|]
expr_stmt|;
name|pointer
operator|++
expr_stmt|;
name|e
operator|=
operator|(
name|int
operator|)
name|data
index|[
name|pointer
index|]
expr_stmt|;
name|pointer
operator|++
expr_stmt|;
name|cdata
index|[
name|pos
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
operator|(
name|c
operator|&
literal|0x0F
operator|)
operator|<<
literal|12
operator|)
operator||
operator|(
operator|(
name|d
operator|&
literal|0x3F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|e
operator|&
literal|0x3F
operator|)
operator|)
expr_stmt|;
block|}
else|else
block|{
name|d
operator|=
operator|(
name|int
operator|)
name|data
index|[
name|pointer
index|]
expr_stmt|;
name|pointer
operator|++
expr_stmt|;
name|cdata
index|[
name|pos
index|]
operator|=
operator|(
name|char
operator|)
operator|(
operator|(
operator|(
name|c
operator|&
literal|0x1F
operator|)
operator|<<
literal|6
operator|)
operator||
operator|(
name|d
operator|&
literal|0x3F
operator|)
operator|)
expr_stmt|;
block|}
block|}
return|return
operator|new
name|String
argument_list|(
name|cdata
argument_list|)
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  data   Description of the Parameter      *@param  start  Description of the Parameter      *@return        Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|int
name|byteToInt
parameter_list|(
name|byte
name|data
index|[]
parameter_list|,
name|int
name|start
parameter_list|)
block|{
return|return
operator|(
name|data
index|[
name|start
index|]
operator|&
literal|0xff
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|start
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|start
operator|+
literal|2
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
name|data
index|[
name|start
operator|+
literal|3
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|24
operator|)
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  data   Description of the Parameter      *@param  start  Description of the Parameter      *@return        Description of the Return Value      */
comment|/*      *  public final static long byteToLong( byte data[], int start ) {      *  long la[] = new long[8];      *  for ( short i = 0; i< 8; i++ )      *  la[i] = ( data[start + i]& 0xff );      *  return la[7] | ( la[6]<< 8 ) | ( la[5]<< 16 ) |      *  ( la[4]<< 24 ) | ( la[3]<< 32 ) |      *  ( la[2]<< 40 ) | ( la[1]<< 48 ) |      *  ( la[0]<< 56 );      *  }      */
comment|/**      *  Description of the Method      *      *@param  data   Description of the Parameter      *@param  start  Description of the Parameter      *@return        Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|long
name|byteToLong
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|)
block|{
return|return
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|data
index|[
name|start
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|56
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|data
index|[
name|start
operator|+
literal|1
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|48
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|data
index|[
name|start
operator|+
literal|2
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|40
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|data
index|[
name|start
operator|+
literal|3
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|32
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|data
index|[
name|start
operator|+
literal|4
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|24
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|data
index|[
name|start
operator|+
literal|5
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|16
operator|)
operator||
operator|(
operator|(
operator|(
operator|(
name|long
operator|)
name|data
index|[
name|start
operator|+
literal|6
index|]
operator|)
operator|&
literal|0xffL
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
operator|(
operator|(
name|long
operator|)
name|data
index|[
name|start
operator|+
literal|7
index|]
operator|)
operator|&
literal|0xffL
operator|)
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  data   Description of the Parameter      *@param  start  Description of the Parameter      *@return        Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|short
name|byteToShort
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|)
block|{
return|return
operator|(
name|short
operator|)
operator|(
operator|(
operator|(
name|data
index|[
name|start
operator|+
literal|1
index|]
operator|&
literal|0xff
operator|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|data
index|[
name|start
index|]
operator|&
literal|0xff
operator|)
operator|)
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  l         Description of the Parameter      *@param  sizeType  Description of the Parameter      *@return           Description of the Return Value      */
specifier|public
specifier|static
name|byte
index|[]
name|compress
parameter_list|(
name|int
name|sizeType
parameter_list|,
name|long
name|l
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|sizeType
condition|)
block|{
case|case
name|LONG
case|:
name|data
operator|=
name|longToByte
argument_list|(
name|l
argument_list|)
expr_stmt|;
break|break;
case|case
name|INT
case|:
name|data
operator|=
name|intToByte
argument_list|(
operator|(
name|int
operator|)
name|l
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|data
operator|=
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|l
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|data
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|l
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|public
specifier|static
name|byte
index|[]
name|compress
parameter_list|(
name|int
name|sizeType
parameter_list|,
name|int
name|i
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
literal|null
decl_stmt|;
switch|switch
condition|(
name|sizeType
condition|)
block|{
case|case
name|INT
case|:
name|data
operator|=
name|intToByte
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|SHORT
case|:
name|data
operator|=
name|shortToByte
argument_list|(
operator|(
name|short
operator|)
name|i
argument_list|)
expr_stmt|;
break|break;
case|case
name|BYTE
case|:
name|data
operator|=
operator|new
name|byte
index|[
literal|1
index|]
expr_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|i
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  data   Description of the Parameter      *@param  start  Description of the Parameter      *@return        Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|int
name|decodeLength
parameter_list|(
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|)
block|{
return|return
operator|(
name|int
operator|)
operator|(
name|data
index|[
name|start
index|]
operator|&
literal|0xf
operator|)
operator|+
operator|(
name|int
operator|)
operator|(
operator|(
name|data
index|[
name|start
index|]
operator|>>>
literal|4
operator|)
operator|&
literal|0xff
operator|)
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  sizeType  Description of the Parameter      *@param  data      Description of the Parameter      *@param  start     Description of the Parameter      *@return           Description of the Return Value      */
specifier|public
specifier|static
name|long
name|decompress
parameter_list|(
name|int
name|sizeType
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|)
block|{
switch|switch
condition|(
name|sizeType
condition|)
block|{
case|case
name|LONG
case|:
return|return
name|byteToLong
argument_list|(
name|data
argument_list|,
name|start
argument_list|)
return|;
case|case
name|INT
case|:
return|return
operator|(
name|long
operator|)
name|byteToInt
argument_list|(
name|data
argument_list|,
name|start
argument_list|)
return|;
case|case
name|SHORT
case|:
return|return
operator|(
name|long
operator|)
name|byteToShort
argument_list|(
name|data
argument_list|,
name|start
argument_list|)
return|;
case|case
name|BYTE
case|:
return|return
operator|(
name|long
operator|)
name|data
index|[
name|start
index|]
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  data  Description of the Parameter      *@return       Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|String
name|dumpToHex
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
for|for
control|(
name|short
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|length
condition|;
name|i
operator|++
control|)
block|{
name|byte
name|upper
init|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|data
index|[
name|i
index|]
operator|>>>
literal|4
operator|)
operator|&
literal|0xf
operator|)
decl_stmt|;
if|if
condition|(
name|upper
operator|<
literal|10
condition|)
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|0x30
operator|+
name|upper
operator|)
argument_list|)
expr_stmt|;
else|else
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|0x61
operator|+
name|upper
operator|-
literal|10
operator|)
argument_list|)
expr_stmt|;
name|byte
name|lower
init|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|data
index|[
name|i
index|]
operator|)
operator|&
literal|0xf
operator|)
decl_stmt|;
if|if
condition|(
name|lower
operator|<
literal|10
condition|)
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|0x30
operator|+
name|lower
operator|)
argument_list|)
expr_stmt|;
else|else
name|buf
operator|.
name|append
argument_list|(
operator|(
name|char
operator|)
operator|(
literal|0x61
operator|+
name|lower
operator|-
literal|10
operator|)
argument_list|)
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  docId  Description of the Parameter      *@param  gid    Description of the Parameter      *@return        Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|encodeNodeP
parameter_list|(
name|int
name|docId
parameter_list|,
name|long
name|gid
parameter_list|)
block|{
name|byte
index|[]
name|idata
init|=
name|trunc
argument_list|(
name|intToByte
argument_list|(
name|docId
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|ldata
init|=
name|trunc
argument_list|(
name|longToByte
argument_list|(
name|gid
argument_list|)
argument_list|)
decl_stmt|;
name|byte
index|[]
name|buf
init|=
operator|new
name|byte
index|[
name|idata
operator|.
name|length
operator|+
name|ldata
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
name|buf
index|[
literal|0
index|]
operator|=
name|len2byte
argument_list|(
name|idata
operator|.
name|length
argument_list|,
name|ldata
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|idata
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
literal|1
argument_list|,
name|idata
operator|.
name|length
argument_list|)
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|ldata
argument_list|,
literal|0
argument_list|,
name|buf
argument_list|,
name|idata
operator|.
name|length
operator|+
literal|1
argument_list|,
name|ldata
operator|.
name|length
argument_list|)
expr_stmt|;
return|return
name|buf
return|;
block|}
comment|/**      *  Gets the size attribute of the ByteConversion class      *      *@param  sizeType  Description of the Parameter      *@return           The size value      */
specifier|public
specifier|static
name|int
name|getSize
parameter_list|(
name|int
name|sizeType
parameter_list|)
block|{
switch|switch
condition|(
name|sizeType
condition|)
block|{
case|case
name|LONG
case|:
return|return
literal|8
return|;
case|case
name|INT
case|:
return|return
literal|4
return|;
case|case
name|SHORT
case|:
return|return
literal|2
return|;
case|case
name|BYTE
case|:
return|return
literal|1
return|;
block|}
return|return
operator|-
literal|1
return|;
block|}
comment|/**      *  Gets the type attribute of the ByteConversion class      *      *@param  l  Description of the Parameter      *@return    The type value      */
specifier|public
specifier|static
name|int
name|getSizeType
parameter_list|(
name|long
name|l
parameter_list|)
block|{
if|if
condition|(
name|l
operator|>
name|Integer
operator|.
name|MAX_VALUE
condition|)
return|return
name|LONG
return|;
if|else if
condition|(
name|l
operator|>
name|Short
operator|.
name|MAX_VALUE
condition|)
return|return
name|INT
return|;
if|else if
condition|(
name|l
operator|>
name|Byte
operator|.
name|MAX_VALUE
condition|)
return|return
name|SHORT
return|;
else|else
return|return
name|BYTE
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  v      Description of the Parameter      *@param  data   Description of the Parameter      *@param  start  Description of the Parameter      *@return        Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|intToByte
parameter_list|(
name|int
name|v
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|data
index|[
name|start
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  v  Description of the Parameter      *@return    Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|intToByte
parameter_list|(
name|int
name|v
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|4
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
return|return
name|data
return|;
block|}
specifier|private
specifier|final
specifier|static
name|byte
name|len2byte
parameter_list|(
name|int
name|len1
parameter_list|,
name|int
name|len2
parameter_list|)
block|{
name|byte
name|l1
init|=
operator|(
name|byte
operator|)
operator|(
name|len1
operator|&
literal|0xf
operator|)
decl_stmt|;
name|byte
name|l2
init|=
operator|(
name|byte
operator|)
operator|(
name|len2
operator|&
literal|0xf
operator|)
decl_stmt|;
return|return
operator|(
name|byte
operator|)
operator|(
name|l1
operator||
operator|(
name|l2
operator|<<
literal|4
operator|)
operator|)
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  v      Description of the Parameter      *@param  data   Description of the Parameter      *@param  start  Description of the Parameter      *@return        Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|longToByte
parameter_list|(
name|long
name|v
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|data
index|[
name|start
operator|+
literal|7
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|6
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|5
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|4
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|32
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|40
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|48
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|56
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  v  Description of the Parameter      *@return    Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|longToByte
parameter_list|(
name|long
name|v
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|8
index|]
decl_stmt|;
name|data
index|[
literal|7
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|6
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|5
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|16
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|4
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|24
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|3
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|32
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|2
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|40
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|48
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|56
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  v      Description of the Parameter      *@param  data   Description of the Parameter      *@param  start  Description of the Parameter      *@return        Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|shortToByte
parameter_list|(
name|short
name|v
parameter_list|,
name|byte
index|[]
name|data
parameter_list|,
name|int
name|start
parameter_list|)
block|{
name|data
index|[
name|start
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
name|start
operator|+
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  v  Description of the Parameter      *@return    Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|shortToByte
parameter_list|(
name|short
name|v
parameter_list|)
block|{
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
literal|2
index|]
decl_stmt|;
name|data
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|0
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
name|data
index|[
literal|1
index|]
operator|=
operator|(
name|byte
operator|)
operator|(
operator|(
name|v
operator|>>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  s  Description of the Parameter      *@return    Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|string2UTF8
parameter_list|(
name|String
name|s
parameter_list|)
block|{
name|int
name|sp
init|=
literal|0
decl_stmt|;
name|int
name|slen
init|=
name|s
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|c
decl_stmt|;
name|FastByteBuffer
name|buf
init|=
operator|new
name|FastByteBuffer
argument_list|()
decl_stmt|;
while|while
condition|(
name|sp
operator|<
name|slen
condition|)
block|{
name|c
operator|=
operator|(
name|int
operator|)
operator|(
name|s
operator|.
name|charAt
argument_list|(
name|sp
argument_list|)
operator|)
expr_stmt|;
name|sp
operator|++
expr_stmt|;
if|if
condition|(
name|c
operator|<
literal|0x80
condition|)
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
name|c
argument_list|)
expr_stmt|;
if|else                 if
condition|(
name|c
operator|>
literal|0x07FF
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
operator|(
name|c
operator|>>>
literal|12
operator|)
operator|&
literal|0x0F
operator|)
operator||
literal|0xE0
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
operator|(
name|c
operator|>>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
operator||
literal|0x80
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|c
operator|&
literal|0x3F
operator|)
operator||
literal|0x80
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
operator|(
name|c
operator|>>>
literal|6
operator|)
operator|&
literal|0x1F
operator|)
operator||
literal|0xC0
operator|)
argument_list|)
expr_stmt|;
name|buf
operator|.
name|append
argument_list|(
operator|(
name|byte
operator|)
operator|(
operator|(
name|c
operator|&
literal|0x3F
operator|)
operator||
literal|0x80
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
name|byte
index|[]
name|data
init|=
operator|new
name|byte
index|[
name|buf
operator|.
name|size
argument_list|()
index|]
decl_stmt|;
name|buf
operator|.
name|copyTo
argument_list|(
name|data
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|data
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  data  Description of the Parameter      *@return       Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|trunc
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|int
name|len
init|=
name|data
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|data
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
if|if
condition|(
name|data
index|[
name|i
index|]
operator|==
literal|0
condition|)
operator|--
name|len
expr_stmt|;
else|else
break|break;
name|byte
index|[]
name|ndata
init|=
operator|new
name|byte
index|[
name|len
operator|+
literal|1
index|]
decl_stmt|;
name|ndata
index|[
literal|0
index|]
operator|=
operator|(
name|byte
operator|)
name|len
expr_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|ndata
argument_list|,
literal|1
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|ndata
return|;
block|}
comment|/**      *  Description of the Method      *      *@param  data  Description of the Parameter      *@return       Description of the Return Value      */
specifier|public
specifier|final
specifier|static
name|byte
index|[]
name|truncate
parameter_list|(
name|byte
index|[]
name|data
parameter_list|)
block|{
name|int
name|len
init|=
name|data
operator|.
name|length
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|data
operator|.
name|length
operator|-
literal|1
init|;
name|i
operator|>
operator|-
literal|1
condition|;
name|i
operator|--
control|)
if|if
condition|(
name|data
index|[
name|i
index|]
operator|==
literal|0
condition|)
operator|--
name|len
expr_stmt|;
else|else
break|break;
if|if
condition|(
name|len
operator|==
literal|0
condition|)
return|return
literal|null
return|;
name|byte
index|[]
name|ndata
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|data
argument_list|,
literal|0
argument_list|,
name|ndata
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
return|return
name|ndata
return|;
block|}
block|}
end_class

end_unit

