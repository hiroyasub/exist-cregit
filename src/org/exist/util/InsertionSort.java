begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SwapVals
import|;
end_import

begin_comment
comment|/** 	This class implements a version  	of the insertion sort algorithm.  	The implementation is inspired on 	the work of Michael Maniscalco in 	C++ 	http://www.michael-maniscalco.com/sorting.htm 	 	@author JosÃ© MarÃ­a FernÃ¡ndez */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|InsertionSort
block|{
specifier|public
specifier|final
specifier|static
name|void
name|sortByNodeId
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|)
comment|//------------------------------------------------------------
block|{
comment|// First case, no element or only one!
if|if
condition|(
name|lo0
operator|>=
name|hi0
condition|)
return|return;
comment|// Second case, at least two elements
if|if
condition|(
name|a
index|[
name|lo0
index|]
operator|.
name|getGID
argument_list|()
operator|>
name|a
index|[
name|lo0
operator|+
literal|1
index|]
operator|.
name|getGID
argument_list|()
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo0
argument_list|,
name|lo0
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// 2b, just two elements
if|if
condition|(
name|lo0
operator|+
literal|1
operator|==
name|hi0
condition|)
return|return;
comment|// Last case, the general one
for|for
control|(
name|int
name|i
init|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|NodeProxy
name|temp
init|=
name|a
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|temp
operator|.
name|getGID
argument_list|()
operator|<
name|a
index|[
name|i
index|]
operator|.
name|getGID
argument_list|()
condition|)
block|{
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
name|i
init|;
name|j
operator|>=
name|lo0
operator|&&
name|temp
operator|.
name|getGID
argument_list|()
operator|<
name|a
index|[
name|j
index|]
operator|.
name|getGID
argument_list|()
condition|;
name|j
operator|--
control|)
block|{
name|a
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
block|}
name|a
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
name|void
name|sort
parameter_list|(
name|Comparable
index|[]
name|a
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|)
comment|//------------------------------------------------------------
block|{
comment|// First case, no element or only one!
if|if
condition|(
name|lo0
operator|>=
name|hi0
condition|)
return|return;
comment|// Second case, at least two elements
if|if
condition|(
name|a
index|[
name|lo0
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|lo0
operator|+
literal|1
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo0
argument_list|,
name|lo0
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// 2b, just two elements
if|if
condition|(
name|lo0
operator|+
literal|1
operator|==
name|hi0
condition|)
return|return;
comment|// Last case, the general one
for|for
control|(
name|int
name|i
init|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|Comparable
name|temp
init|=
name|a
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|temp
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
name|i
init|;
name|j
operator|>=
name|lo0
operator|&&
name|temp
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|j
index|]
argument_list|)
operator|<
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|a
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
block|}
name|a
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
name|void
name|sort
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|Comparator
name|comp
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|)
comment|//------------------------------------------------------------
block|{
comment|// First case, no element or only one!
if|if
condition|(
name|lo0
operator|>=
name|hi0
condition|)
return|return;
comment|// Second case, at least two elements
if|if
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|a
index|[
name|lo0
index|]
argument_list|,
name|a
index|[
name|lo0
operator|+
literal|1
index|]
argument_list|)
operator|>
literal|0
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo0
argument_list|,
name|lo0
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// 2b, just two elements
if|if
condition|(
name|lo0
operator|+
literal|1
operator|==
name|hi0
condition|)
return|return;
comment|// Last case, the general one
for|for
control|(
name|int
name|i
init|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|Object
name|temp
init|=
name|a
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|comp
operator|.
name|compare
argument_list|(
name|temp
argument_list|,
name|a
index|[
name|i
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
name|i
init|;
name|j
operator|>=
name|lo0
operator|&&
name|comp
operator|.
name|compare
argument_list|(
name|temp
argument_list|,
name|a
index|[
name|j
index|]
argument_list|)
operator|<
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|a
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
block|}
name|a
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|temp
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
name|void
name|sort
parameter_list|(
name|List
name|a
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|)
comment|//------------------------------------------------------------
block|{
comment|// First case, no element or only one!
if|if
condition|(
name|lo0
operator|>=
name|hi0
condition|)
return|return;
comment|// Second case, at least two elements
if|if
condition|(
operator|(
operator|(
name|Comparable
operator|)
name|a
operator|.
name|get
argument_list|(
name|lo0
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|lo0
operator|+
literal|1
argument_list|)
argument_list|)
operator|>
literal|0
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo0
argument_list|,
name|lo0
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// 2b, just two elements
if|if
condition|(
name|lo0
operator|+
literal|1
operator|==
name|hi0
condition|)
return|return;
comment|// Last case, the general one
for|for
control|(
name|int
name|i
init|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|Comparable
name|temp
init|=
operator|(
name|Comparable
operator|)
name|a
operator|.
name|get
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|temp
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|int
name|j
decl_stmt|;
for|for
control|(
name|j
operator|=
name|i
init|;
name|j
operator|>=
name|lo0
operator|&&
name|temp
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
operator|<
literal|0
condition|;
name|j
operator|--
control|)
block|{
name|a
operator|.
name|set
argument_list|(
name|j
operator|+
literal|1
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|a
operator|.
name|set
argument_list|(
name|j
operator|+
literal|1
argument_list|,
name|temp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|final
specifier|static
name|void
name|sort
parameter_list|(
name|long
name|a
index|[]
parameter_list|,
name|int
name|lo0
parameter_list|,
name|int
name|hi0
parameter_list|,
name|Object
name|b
index|[]
parameter_list|)
comment|//------------------------------------------------------------
block|{
comment|// First case, no element or only one!
if|if
condition|(
name|lo0
operator|>=
name|hi0
condition|)
return|return;
comment|// Second case, at least two elements
if|if
condition|(
name|a
index|[
name|lo0
index|]
operator|>
name|a
index|[
name|lo0
operator|+
literal|1
index|]
condition|)
block|{
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo0
argument_list|,
name|lo0
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|SwapVals
operator|.
name|swap
argument_list|(
name|b
argument_list|,
name|lo0
argument_list|,
name|lo0
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// 2b, just two elements
if|if
condition|(
name|lo0
operator|+
literal|1
operator|==
name|hi0
condition|)
return|return;
comment|// Last case, the general one
for|for
control|(
name|int
name|i
init|=
name|lo0
operator|+
literal|1
init|;
name|i
operator|<
name|hi0
condition|;
name|i
operator|++
control|)
block|{
name|long
name|tempa
init|=
name|a
index|[
name|i
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|tempa
operator|<
name|a
index|[
name|i
index|]
condition|)
block|{
name|int
name|j
decl_stmt|;
name|Object
name|tempb
init|=
literal|null
decl_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|tempb
operator|=
name|b
index|[
name|i
operator|+
literal|1
index|]
expr_stmt|;
for|for
control|(
name|j
operator|=
name|i
init|;
name|j
operator|>=
name|lo0
operator|&&
name|tempa
operator|<
name|a
index|[
name|j
index|]
condition|;
name|j
operator|--
control|)
block|{
name|a
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|a
index|[
name|j
index|]
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|b
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|b
index|[
name|j
index|]
expr_stmt|;
block|}
name|a
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|tempa
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|b
index|[
name|j
operator|+
literal|1
index|]
operator|=
name|tempb
expr_stmt|;
block|}
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|a
init|=
operator|new
name|String
index|[]
block|{
literal|"Rudi"
block|,
literal|"Herbert"
block|,
literal|"Anton"
block|,
literal|"Berta"
block|,
literal|"Olga"
block|,
literal|"Willi"
block|,
literal|"Heinz"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|l
operator|.
name|add
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ordering file "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
try|try
block|{
name|java
operator|.
name|io
operator|.
name|BufferedReader
name|is
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|BufferedReader
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|FileReader
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rr
decl_stmt|;
while|while
condition|(
operator|(
name|rr
operator|=
name|is
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|sort
argument_list|(
name|l
argument_list|,
literal|0
argument_list|,
name|l
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|b
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ellapsed time: "
operator|+
operator|(
name|b
operator|-
name|a
operator|)
operator|+
literal|" size: "
operator|+
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

