begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright 2004 The eXist Team  *  *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *  *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_comment
comment|/**  * Utility functions to have an indexed access for inserting and deletion  * of array items.  */
end_comment

begin_class
specifier|public
class|class
name|ArrayUtils
block|{
comment|/**      * Delete an integer inside an array of integers.      *       * @param vals array of integers      * @param idx index of integer to delete      * @return the array without the deleted integer      */
specifier|public
specifier|static
name|int
index|[]
name|deleteArrayInt
parameter_list|(
name|int
index|[]
name|vals
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|int
index|[]
name|newVals
init|=
operator|new
name|int
index|[
name|vals
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|newVals
operator|.
name|length
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|newVals
argument_list|,
name|idx
argument_list|,
name|newVals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
return|return
name|newVals
return|;
block|}
comment|/**      * Delete an long inside an array of longs.      *       * @param vals array of longs      * @param idx index of long to delete      * @return the array without the deleted long      */
specifier|public
specifier|static
name|long
index|[]
name|deleteArrayLong
parameter_list|(
name|long
index|[]
name|vals
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|long
index|[]
name|newVals
init|=
operator|new
name|long
index|[
name|vals
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|newVals
operator|.
name|length
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|newVals
argument_list|,
name|idx
argument_list|,
name|newVals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
return|return
name|newVals
return|;
block|}
comment|/**      *       * @param vals      * @param idx      * @return      */
specifier|public
specifier|static
name|short
index|[]
name|deleteArrayShort
parameter_list|(
name|short
index|[]
name|vals
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|short
index|[]
name|newVals
init|=
operator|new
name|short
index|[
name|vals
operator|.
name|length
operator|-
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|newVals
operator|.
name|length
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|newVals
argument_list|,
name|idx
argument_list|,
name|newVals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
return|return
name|newVals
return|;
block|}
comment|/**      *       * @param vals      * @param val      * @param idx      * @return      */
specifier|public
specifier|static
name|int
index|[]
name|insertArrayInt
parameter_list|(
name|int
index|[]
name|vals
parameter_list|,
name|int
name|val
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|int
index|[]
name|newVals
init|=
operator|new
name|int
index|[
name|vals
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|newVals
index|[
name|idx
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|vals
operator|.
name|length
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
argument_list|,
name|newVals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|vals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
return|return
name|newVals
return|;
block|}
comment|/**      *       * @param vals      * @param val      * @param idx      * @return      */
specifier|public
specifier|static
name|long
index|[]
name|insertArrayLong
parameter_list|(
name|long
index|[]
name|vals
parameter_list|,
name|long
name|val
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|long
index|[]
name|newVals
init|=
operator|new
name|long
index|[
name|vals
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|newVals
index|[
name|idx
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|vals
operator|.
name|length
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
argument_list|,
name|newVals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|vals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
return|return
name|newVals
return|;
block|}
comment|/**      *       * @param vals      * @param val      * @param idx      * @return      */
specifier|public
specifier|static
name|short
index|[]
name|insertArrayShort
parameter_list|(
name|short
index|[]
name|vals
parameter_list|,
name|short
name|val
parameter_list|,
name|int
name|idx
parameter_list|)
block|{
name|short
index|[]
name|newVals
init|=
operator|new
name|short
index|[
name|vals
operator|.
name|length
operator|+
literal|1
index|]
decl_stmt|;
if|if
condition|(
name|idx
operator|>
literal|0
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
literal|0
argument_list|,
name|newVals
argument_list|,
literal|0
argument_list|,
name|idx
argument_list|)
expr_stmt|;
name|newVals
index|[
name|idx
index|]
operator|=
name|val
expr_stmt|;
if|if
condition|(
name|idx
operator|<
name|vals
operator|.
name|length
condition|)
name|System
operator|.
name|arraycopy
argument_list|(
name|vals
argument_list|,
name|idx
argument_list|,
name|newVals
argument_list|,
name|idx
operator|+
literal|1
argument_list|,
name|vals
operator|.
name|length
operator|-
name|idx
argument_list|)
expr_stmt|;
return|return
name|newVals
return|;
block|}
block|}
end_class

end_unit

