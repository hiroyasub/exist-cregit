begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * FileUtils.java  *  * Created on December 10, 2007, 1:11 PM  *  * To change this template, choose Tools | Template Manager  * and open the template in the editor.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FileFilter
import|;
end_import

begin_comment
comment|/**  *  * @author alex  */
end_comment

begin_class
specifier|public
class|class
name|FileUtils
block|{
comment|// Why is this here?  Because we can't use generics because we're
comment|// still in the dark ages of Java 1.4
specifier|static
class|class
name|FileRef
block|{
name|File
name|file
decl_stmt|;
name|FileRef
name|next
decl_stmt|;
name|FileRef
parameter_list|(
name|FileRef
name|next
parameter_list|,
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
name|FileRef
parameter_list|(
name|File
name|file
parameter_list|)
block|{
name|this
operator|.
name|next
operator|=
literal|null
expr_stmt|;
name|this
operator|.
name|file
operator|=
name|file
expr_stmt|;
block|}
block|}
specifier|static
class|class
name|DeleteDir
block|{
name|FileRef
name|current
decl_stmt|;
name|boolean
name|ok
decl_stmt|;
name|DeleteDir
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
name|current
operator|=
operator|new
name|FileRef
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
specifier|public
name|boolean
name|delete
parameter_list|()
block|{
while|while
condition|(
name|ok
operator|&&
name|current
operator|!=
literal|null
condition|)
block|{
specifier|final
name|FileRef
name|work
init|=
name|current
decl_stmt|;
name|current
operator|.
name|file
operator|.
name|listFiles
argument_list|(
operator|new
name|FileFilter
argument_list|()
block|{
specifier|public
name|boolean
name|accept
parameter_list|(
name|File
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
name|current
operator|=
operator|new
name|FileRef
argument_list|(
name|current
argument_list|,
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ok
operator|=
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
argument_list|)
expr_stmt|;
if|if
condition|(
name|current
operator|==
name|work
condition|)
block|{
name|ok
operator|=
name|current
operator|.
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
block|}
block|}
return|return
name|ok
return|;
block|}
block|}
comment|/** Creates a new instance of FileUtils */
specifier|private
name|FileUtils
parameter_list|()
block|{
block|}
specifier|public
specifier|static
name|boolean
name|delete
parameter_list|(
name|File
name|dir
parameter_list|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|isDirectory
argument_list|()
condition|)
block|{
return|return
name|dir
operator|.
name|delete
argument_list|()
return|;
block|}
specifier|final
name|DeleteDir
name|doDelete
init|=
operator|new
name|DeleteDir
argument_list|(
name|dir
argument_list|)
decl_stmt|;
return|return
name|doDelete
operator|.
name|delete
argument_list|()
return|;
block|}
comment|/**     * @param path a path or uri     * @return the directory portion of a path by stripping the last '/' and     * anything following, unless the path has no '/', in which case '.' is returned,     * or ends with '/', in      * which case return the path unchanged.     */
specifier|public
specifier|static
name|String
name|dirname
parameter_list|(
name|String
name|path
parameter_list|)
block|{
specifier|final
name|int
name|islash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|islash
operator|>=
literal|0
operator|&&
name|islash
operator|<
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|islash
argument_list|)
return|;
block|}
if|else if
condition|(
name|islash
operator|>=
literal|0
condition|)
block|{
return|return
name|path
return|;
block|}
else|else
block|{
return|return
literal|"."
return|;
block|}
block|}
comment|/**     * @param path1     * @param path2     * @return path1 + path2, joined by a single file separator (or /, if a slash is already present).     */
specifier|public
specifier|static
name|String
name|addPaths
parameter_list|(
name|String
name|path1
parameter_list|,
name|String
name|path2
parameter_list|)
block|{
if|if
condition|(
name|path1
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path2
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
if|if
condition|(
name|path2
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path2
operator|.
name|startsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
return|return
name|path1
operator|+
name|path2
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|path1
operator|+
name|path2
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|path2
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path2
operator|.
name|startsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
return|return
name|path1
operator|+
name|path2
return|;
block|}
else|else
block|{
return|return
name|path1
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|path2
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

