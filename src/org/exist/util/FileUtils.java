begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|LogManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|logging
operator|.
name|log4j
operator|.
name|Logger
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|nio
operator|.
name|file
operator|.
name|attribute
operator|.
name|BasicFileAttributes
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Collectors
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|stream
operator|.
name|Stream
import|;
end_import

begin_comment
comment|/**  * @author Adam Retter<adam.retter@googlemail.com>  * @author alex  */
end_comment

begin_class
specifier|public
class|class
name|FileUtils
block|{
specifier|private
specifier|final
specifier|static
name|Logger
name|LOG
init|=
name|LogManager
operator|.
name|getLogger
argument_list|(
name|FileUtils
operator|.
name|class
argument_list|)
decl_stmt|;
comment|/**      * Deletes a path from the filesystem      *      * If the path is a directory its contents      * will be recursively deleted before it itself      * is deleted.      *      * Note that removal of a directory is not an atomic-operation      * and so if an error occurs during removal, some of the directories      * descendants may have already been removed      *      * @throws IOException if an error occurs whilst removing a file or directory      */
specifier|public
specifier|static
name|void
name|delete
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|path
argument_list|,
name|deleteDirVisitor
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Deletes a path from the filesystem      *      * If the path is a directory its contents      * will be recursively deleted before it itself      * is deleted      *      * This method will never throw an IOException, it      * instead returns `false` if an error occurs      * whilst removing a file or directory      *      * Note that removal of a directory is not an atomic-operation      * and so if an error occurs during removal, some of the directories      * descendants may have already been removed      *      * @return false if an error occurred, true otherwise      */
specifier|public
specifier|static
name|boolean
name|deleteQuietly
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
name|Files
operator|.
name|walkFileTree
argument_list|(
name|path
argument_list|,
name|deleteDirVisitor
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to delete: "
operator|+
name|path
operator|.
name|toAbsolutePath
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|private
specifier|final
specifier|static
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
name|deleteDirVisitor
init|=
operator|new
name|DeleteDirVisitor
argument_list|()
decl_stmt|;
specifier|private
specifier|static
class|class
name|DeleteDirVisitor
extends|extends
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
block|{
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|postVisitDirectory
parameter_list|(
specifier|final
name|Path
name|dir
parameter_list|,
specifier|final
name|IOException
name|exc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|exc
operator|!=
literal|null
condition|)
block|{
throw|throw
name|exc
throw|;
block|}
name|Files
operator|.
name|deleteIfExists
argument_list|(
name|dir
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
block|}
comment|/**      * Determine the size of a file or directory      *      * @return The size of the file or directory, or -1 if the file size cannot be determined      */
specifier|public
specifier|static
name|long
name|sizeQuietly
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
try|try
block|{
if|if
condition|(
operator|!
name|Files
operator|.
name|isDirectory
argument_list|(
name|path
argument_list|)
condition|)
block|{
return|return
name|Files
operator|.
name|size
argument_list|(
name|path
argument_list|)
return|;
block|}
else|else
block|{
specifier|final
name|DirSizeVisitor
name|dirSizeVisitor
init|=
operator|new
name|DirSizeVisitor
argument_list|()
decl_stmt|;
name|Files
operator|.
name|walkFileTree
argument_list|(
name|path
argument_list|,
name|dirSizeVisitor
argument_list|)
expr_stmt|;
return|return
name|dirSizeVisitor
operator|.
name|totalSize
argument_list|()
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|ioe
parameter_list|)
block|{
name|LOG
operator|.
name|error
argument_list|(
literal|"Unable to determine size of: "
operator|+
name|path
operator|.
name|toString
argument_list|()
argument_list|,
name|ioe
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
block|}
specifier|private
specifier|static
class|class
name|DirSizeVisitor
extends|extends
name|SimpleFileVisitor
argument_list|<
name|Path
argument_list|>
block|{
specifier|private
name|long
name|size
init|=
literal|0
decl_stmt|;
annotation|@
name|Override
specifier|public
name|FileVisitResult
name|visitFile
parameter_list|(
specifier|final
name|Path
name|file
parameter_list|,
specifier|final
name|BasicFileAttributes
name|attrs
parameter_list|)
throws|throws
name|IOException
block|{
name|size
operator|+=
name|Files
operator|.
name|size
argument_list|(
name|file
argument_list|)
expr_stmt|;
return|return
name|FileVisitResult
operator|.
name|CONTINUE
return|;
block|}
specifier|public
name|long
name|totalSize
parameter_list|()
block|{
return|return
name|size
return|;
block|}
block|}
comment|/**      * Attempts to resolve the child      * against the parent.      *      * If there is no parent, then the child      * is resolved relative to the CWD      *      * @return The resolved path      */
specifier|public
specifier|static
name|Path
name|resolve
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|Path
argument_list|>
name|parent
parameter_list|,
specifier|final
name|String
name|child
parameter_list|)
block|{
return|return
name|parent
operator|.
name|map
argument_list|(
name|p
lambda|->
name|p
operator|.
name|resolve
argument_list|(
name|child
argument_list|)
argument_list|)
operator|.
name|orElse
argument_list|(
name|Paths
operator|.
name|get
argument_list|(
name|child
argument_list|)
argument_list|)
return|;
block|}
comment|/**      * Get just the filename part of the path      *      * @return The filename      */
specifier|public
specifier|static
name|String
name|fileName
parameter_list|(
specifier|final
name|Path
name|path
parameter_list|)
block|{
return|return
name|path
operator|.
name|getFileName
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * A list of the entries in the directory. The listing is not recursive.      *      * @return The list of entries      */
specifier|public
specifier|static
name|List
argument_list|<
name|Path
argument_list|>
name|list
parameter_list|(
specifier|final
name|Path
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
try|try
init|(
specifier|final
name|Stream
argument_list|<
name|Path
argument_list|>
name|entries
init|=
name|Files
operator|.
name|list
argument_list|(
name|directory
argument_list|)
init|)
block|{
return|return
name|entries
operator|.
name|collect
argument_list|(
name|Collectors
operator|.
name|toList
argument_list|()
argument_list|)
return|;
block|}
block|}
comment|/**      * @param path a path or uri      * @return the directory portion of a path by stripping the last '/' and      * anything following, unless the path has no '/', in which case '.' is returned,      * or ends with '/', in      * which case return the path unchanged.      */
specifier|public
specifier|static
name|String
name|dirname
parameter_list|(
specifier|final
name|String
name|path
parameter_list|)
block|{
specifier|final
name|int
name|islash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|islash
operator|>=
literal|0
operator|&&
name|islash
operator|<
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
return|return
name|path
operator|.
name|substring
argument_list|(
literal|0
argument_list|,
name|islash
argument_list|)
return|;
block|}
if|else if
condition|(
name|islash
operator|>=
literal|0
condition|)
block|{
return|return
name|path
return|;
block|}
else|else
block|{
return|return
literal|"."
return|;
block|}
block|}
comment|/**      * @param path1      * @param path2      * @return path1 + path2, joined by a single file separator (or /, if a slash is already present).      */
specifier|public
specifier|static
name|String
name|addPaths
parameter_list|(
specifier|final
name|String
name|path1
parameter_list|,
specifier|final
name|String
name|path2
parameter_list|)
block|{
if|if
condition|(
name|path1
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path2
operator|.
name|endsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
if|if
condition|(
name|path2
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path2
operator|.
name|startsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
return|return
name|path1
operator|+
name|path2
operator|.
name|substring
argument_list|(
literal|1
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|path1
operator|+
name|path2
return|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|path2
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|path2
operator|.
name|startsWith
argument_list|(
name|File
operator|.
name|separator
argument_list|)
condition|)
block|{
return|return
name|path1
operator|+
name|path2
return|;
block|}
else|else
block|{
return|return
name|path1
operator|+
name|File
operator|.
name|separatorChar
operator|+
name|path2
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

