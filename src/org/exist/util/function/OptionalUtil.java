begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2016 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|function
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Optional
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Supplier
import|;
end_import

begin_comment
comment|/**  * Functional utility methods that are missing from {@link java.util.Optional}  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|OptionalUtil
block|{
comment|/**      * Return the left Optional if present, else thr right Optional      *      * @param left The left of the disjunction      * @param right The right of the disjunction      *      * @return left if present, else right      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|T
argument_list|>
name|left
parameter_list|,
specifier|final
name|Optional
argument_list|<
name|T
argument_list|>
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|left
return|;
block|}
else|else
block|{
return|return
name|right
return|;
block|}
block|}
comment|/**      * A lazy version of {@link OptionalUtil#or(Optional, Optional)}      *      * @param left The left of the disjunction      * @param right A lazily evaluated supplier of Optional for the right of the disjunction,      *              only evaluated if the left is empty      *      * @param left if present, else the evaluation of the the right      */
specifier|public
specifier|static
parameter_list|<
name|T
parameter_list|>
name|Optional
argument_list|<
name|T
argument_list|>
name|or
parameter_list|(
specifier|final
name|Optional
argument_list|<
name|T
argument_list|>
name|left
parameter_list|,
specifier|final
name|Supplier
argument_list|<
name|Optional
argument_list|<
name|T
argument_list|>
argument_list|>
name|right
parameter_list|)
block|{
if|if
condition|(
name|left
operator|.
name|isPresent
argument_list|()
condition|)
block|{
return|return
name|left
return|;
block|}
else|else
block|{
return|return
name|right
operator|.
name|get
argument_list|()
return|;
block|}
block|}
block|}
end_class

end_unit

