begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * eXist Open Source Native XML Database  * Copyright (C) 2001-2015 The eXist Project  * http://exist-db.org  *  * This program is free software; you can redistribute it and/or  * modify it under the terms of the GNU Lesser General Public License  * as published by the Free Software Foundation; either version 2  * of the License, or (at your option) any later version.  *  * This program is distributed in the hope that it will be useful,  * but WITHOUT ANY WARRANTY; without even the implied warranty of  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  * GNU Lesser General Public License for more details.  *  * You should have received a copy of the GNU Lesser General Public License  * along with this program; if not, write to the Free Software Foundation  * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|function
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|NoSuchElementException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|function
operator|.
name|Function
import|;
end_import

begin_comment
comment|/**  * A disjoint union, more basic than but similar to {@link scala.util.Either}  *  * @param<L> Type of left parameter  * @param<R> Type of right parameter  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|Either
parameter_list|<
name|L
parameter_list|,
name|R
parameter_list|>
block|{
specifier|private
specifier|final
name|boolean
name|isLeft
decl_stmt|;
name|Either
parameter_list|(
specifier|final
name|boolean
name|isLeft
parameter_list|)
block|{
name|this
operator|.
name|isLeft
operator|=
name|isLeft
expr_stmt|;
block|}
specifier|public
specifier|final
name|boolean
name|isLeft
parameter_list|()
block|{
return|return
name|isLeft
return|;
block|}
specifier|public
specifier|final
name|boolean
name|isRight
parameter_list|()
block|{
return|return
operator|!
name|isLeft
return|;
block|}
specifier|public
specifier|final
name|LeftProjection
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
name|left
parameter_list|()
block|{
return|return
operator|new
name|LeftProjection
argument_list|(
name|this
argument_list|)
return|;
block|}
specifier|public
specifier|final
name|RightProjection
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
name|right
parameter_list|()
block|{
return|return
operator|new
name|RightProjection
argument_list|(
name|this
argument_list|)
return|;
block|}
comment|/**      * Map on the right-hand-side of the disjunction      *      * @param f The function to map with      */
specifier|public
specifier|final
parameter_list|<
name|T
parameter_list|>
name|Either
argument_list|<
name|L
argument_list|,
name|T
argument_list|>
name|map
parameter_list|(
specifier|final
name|Function
argument_list|<
name|R
argument_list|,
name|T
argument_list|>
name|f
parameter_list|)
block|{
if|if
condition|(
name|isLeft
argument_list|()
condition|)
block|{
return|return
operator|(
name|Left
argument_list|<
name|L
argument_list|,
name|T
argument_list|>
operator|)
name|this
return|;
block|}
else|else
block|{
return|return
name|Right
argument_list|(
name|f
operator|.
name|apply
argument_list|(
operator|(
operator|(
name|Right
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
operator|)
name|this
operator|)
operator|.
name|value
argument_list|)
argument_list|)
return|;
block|}
block|}
comment|/**      * Bind through on the right-hand-side of this disjunction      *      * @param f the function to bind through      */
specifier|public
specifier|final
parameter_list|<
name|LL
extends|extends
name|L
parameter_list|,
name|T
parameter_list|>
name|Either
argument_list|<
name|LL
argument_list|,
name|T
argument_list|>
name|flatMap
parameter_list|(
specifier|final
name|Function
argument_list|<
name|R
argument_list|,
name|Either
argument_list|<
name|LL
argument_list|,
name|T
argument_list|>
argument_list|>
name|f
parameter_list|)
block|{
if|if
condition|(
name|isLeft
condition|)
block|{
return|return
operator|(
name|Left
argument_list|<
name|LL
argument_list|,
name|T
argument_list|>
operator|)
name|this
return|;
block|}
else|else
block|{
return|return
name|f
operator|.
name|apply
argument_list|(
operator|(
operator|(
name|Right
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
operator|)
name|this
operator|)
operator|.
name|value
argument_list|)
return|;
block|}
block|}
comment|/**      * Map on the left-hand-side of the disjunction      *      * @param f The function to map with      */
specifier|public
specifier|final
parameter_list|<
name|T
parameter_list|>
name|Either
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
name|leftMap
parameter_list|(
specifier|final
name|Function
argument_list|<
name|L
argument_list|,
name|T
argument_list|>
name|f
parameter_list|)
block|{
if|if
condition|(
name|isLeft
condition|)
block|{
return|return
name|Left
argument_list|(
name|f
operator|.
name|apply
argument_list|(
operator|(
operator|(
name|Left
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
operator|)
name|this
operator|)
operator|.
name|value
argument_list|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
operator|(
name|Right
argument_list|<
name|T
argument_list|,
name|R
argument_list|>
operator|)
name|this
return|;
block|}
block|}
comment|/**      * Catamorphism. Run the first given function if left,      * otherwise the second given function      *      *      * @param<T> The result type from performing the fold      * @param lf A function that may be applied to the left-hand-side      * @param rf A function that may be applied to the right-hand-side      */
specifier|public
specifier|final
parameter_list|<
name|T
parameter_list|>
name|T
name|fold
parameter_list|(
specifier|final
name|Function
argument_list|<
name|L
argument_list|,
name|T
argument_list|>
name|lf
parameter_list|,
specifier|final
name|Function
argument_list|<
name|R
argument_list|,
name|T
argument_list|>
name|rf
parameter_list|)
block|{
if|if
condition|(
name|isLeft
condition|)
block|{
return|return
name|lf
operator|.
name|apply
argument_list|(
operator|(
operator|(
name|Left
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
operator|)
name|this
operator|)
operator|.
name|value
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|rf
operator|.
name|apply
argument_list|(
operator|(
operator|(
name|Right
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
operator|)
name|this
operator|)
operator|.
name|value
argument_list|)
return|;
block|}
block|}
specifier|public
specifier|final
specifier|static
parameter_list|<
name|L
parameter_list|,
name|R
parameter_list|>
name|Either
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
name|Left
parameter_list|(
specifier|final
name|L
name|value
parameter_list|)
block|{
return|return
operator|new
name|Left
argument_list|<>
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
parameter_list|<
name|L
parameter_list|,
name|R
parameter_list|>
name|Either
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
name|Right
parameter_list|(
specifier|final
name|R
name|value
parameter_list|)
block|{
return|return
operator|new
name|Right
argument_list|<>
argument_list|(
name|value
argument_list|)
return|;
block|}
specifier|public
specifier|final
specifier|static
class|class
name|Left
parameter_list|<
name|L
parameter_list|,
name|R
parameter_list|>
extends|extends
name|Either
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
block|{
specifier|final
name|L
name|value
decl_stmt|;
specifier|private
name|Left
parameter_list|(
specifier|final
name|L
name|value
parameter_list|)
block|{
name|super
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
specifier|static
class|class
name|Right
parameter_list|<
name|L
parameter_list|,
name|R
parameter_list|>
extends|extends
name|Either
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
block|{
specifier|final
name|R
name|value
decl_stmt|;
specifier|private
name|Right
parameter_list|(
specifier|final
name|R
name|value
parameter_list|)
block|{
name|super
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
block|}
specifier|public
specifier|final
class|class
name|LeftProjection
parameter_list|<
name|L
parameter_list|,
name|R
parameter_list|>
block|{
specifier|final
name|Either
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
name|e
decl_stmt|;
specifier|private
name|LeftProjection
parameter_list|(
specifier|final
name|Either
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
name|e
parameter_list|)
block|{
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
block|}
specifier|public
specifier|final
name|L
name|get
parameter_list|()
block|{
if|if
condition|(
name|e
operator|.
name|isLeft
argument_list|()
condition|)
block|{
return|return
operator|(
operator|(
name|Left
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
operator|)
name|e
operator|)
operator|.
name|value
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"Either.left value on Right"
argument_list|)
throw|;
block|}
block|}
block|}
specifier|public
specifier|final
class|class
name|RightProjection
parameter_list|<
name|L
parameter_list|,
name|R
parameter_list|>
block|{
specifier|final
name|Either
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
name|e
decl_stmt|;
specifier|private
name|RightProjection
parameter_list|(
specifier|final
name|Either
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
name|e
parameter_list|)
block|{
name|this
operator|.
name|e
operator|=
name|e
expr_stmt|;
block|}
specifier|public
specifier|final
name|R
name|get
parameter_list|()
block|{
if|if
condition|(
name|e
operator|.
name|isRight
argument_list|()
condition|)
block|{
return|return
operator|(
operator|(
name|Right
argument_list|<
name|L
argument_list|,
name|R
argument_list|>
operator|)
name|e
operator|)
operator|.
name|value
return|;
block|}
else|else
block|{
throw|throw
operator|new
name|NoSuchElementException
argument_list|(
literal|"Either.right value on Left"
argument_list|)
throw|;
block|}
block|}
block|}
block|}
end_class

end_unit

