begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*    *  This code has been adapted from the jakarta ORO package. The original license  *  follows below:  *  * ====================================================================  * The Apache Software License, Version 1.1  *  * Copyright (c) 2000 The Apache Software Foundation.  All rights  * reserved.  *  * Redistribution and use in source and binary forms, with or without  * modification, are permitted provided that the following conditions  * are met:  *  * 1. Redistributions of source code must retain the above copyright  *    notice, this list of conditions and the following disclaimer.  *  * 2. Redistributions in binary form must reproduce the above copyright  *    notice, this list of conditions and the following disclaimer in  *    the documentation and/or other materials provided with the  *    distribution.  *  * 3. The end-user documentation included with the redistribution,  *    if any, must include the following acknowledgment:  *       "This product includes software developed by the  *        Apache Software Foundation (http://www.apache.org/)."  *    Alternately, this acknowledgment may appear in the software itself,  *    if and wherever such third-party acknowledgments normally appear.  *  * 4. The names "Apache" and "Apache Software Foundation", "Jakarta-Oro"   *    must not be used to endorse or promote products derived from this  *    software without prior written permission. For written  *    permission, please contact apache@apache.org.  *  * 5. Products derived from this software may not be called "Apache"   *    or "Jakarta-Oro", nor may "Apache" or "Jakarta-Oro" appear in their   *    name, without prior written permission of the Apache Software Foundation.  *  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  * DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  * USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  * OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  * SUCH DAMAGE.  * ====================================================================  *  * This software consists of voluntary contributions made by many  * individuals on behalf of the Apache Software Foundation.  For more  * information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  *   * $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Matcher
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|regex
operator|.
name|Pattern
import|;
end_import

begin_comment
comment|/**  * Translates a glob expression into a Java regular expression.  *   * The following syntax is supported for glob expressions:  *   *<ul>  *<li><b>*</b> - Matches zero or more instances of any character.  If the  *          STAR_CANNOT_MATCH_NULL_MASK option is used,<b>*</b> matches  *          one or more instances of any character.  *<li><b>?</b> - Matches one instance of any character. If the  *          QUESTION_MATCHES_ZERO_OR_ONE_MASK option is used,<b>?</b>  *          matches zero or one instances of any character.  *<li><b>[...]</b> - Matches any of characters enclosed by the brackets.  *<b> *</b> and<b>?</b> lose their special meanings within a  *          character class.  Additionaly if the first character following  *          the opening bracket is a<b>!</b> or a<b>^</b>, then any  *          character not in the character class is matched.  A<b>-</b>  *          between two characters can be used to denote a range.  A  *<b>-</b> at the beginning or end of the character class matches  *          itself rather than referring to a range.  A<b>]</b> immediately  *          following the opening<b>[</b> matches itself rather than  *          indicating the end of the character class, otherwise it must be  *          escaped with a backslash to refer to itself.  *<li><b>\</b> - A backslash matches itself in most situations.  But  *          when a special character such as a<b>*</b> follows it, a  *          backslash<em> escapes</em> the character, indicating that  *          the special chracter should be interpreted as a normal character  *          instead of its special meaning.  *<li> All other characters match themselves.  *</ul>  *   *<p>Please remember that the when you construct a Java string in Java code,  * the backslash character is itself a special Java character, and it must  * be double backslashed to represent single backslash in a regular  * expression.</p>  *   *<p>The original code is adapted from the jakarta ORO package.</p>  *   */
end_comment

begin_class
specifier|public
class|class
name|GlobToRegex
block|{
specifier|private
specifier|static
name|boolean
name|__isPerl5MetaCharacter
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
operator|(
name|ch
operator|==
literal|'*'
operator|||
name|ch
operator|==
literal|'?'
operator|||
name|ch
operator|==
literal|'+'
operator|||
name|ch
operator|==
literal|'['
operator|||
name|ch
operator|==
literal|']'
operator|||
name|ch
operator|==
literal|'('
operator|||
name|ch
operator|==
literal|')'
operator|||
name|ch
operator|==
literal|'|'
operator|||
name|ch
operator|==
literal|'^'
operator|||
name|ch
operator|==
literal|'$'
operator|||
name|ch
operator|==
literal|'.'
operator|||
name|ch
operator|==
literal|'{'
operator|||
name|ch
operator|==
literal|'}'
operator|||
name|ch
operator|==
literal|'\\'
operator|)
return|;
block|}
specifier|private
specifier|static
name|boolean
name|__isGlobMetaCharacter
parameter_list|(
name|char
name|ch
parameter_list|)
block|{
return|return
operator|(
name|ch
operator|==
literal|'*'
operator|||
name|ch
operator|==
literal|'?'
operator|||
name|ch
operator|==
literal|'['
operator|||
name|ch
operator|==
literal|']'
operator|)
return|;
block|}
comment|/**      * This static method is the basic engine of the Glob PatternCompiler      * implementation. It takes a glob expression in the form of a character      * array and converts it into a String representation of a Perl5 pattern.      * The method is made public so that programmers may use it for their own      * purposes. However, the GlobCompiler compile methods work by converting      * the glob pattern to a Perl5 pattern using this method, and then invoking      * the compile() method of an internally stored Perl5Compiler instance.      *<p>      *       * @param pattern      *            A character array representation of a Glob pattern.      * @return A String representation of a Perl5 pattern equivalent to the Glob      *         pattern.      */
specifier|public
specifier|static
name|String
name|globToRegexp
parameter_list|(
name|CharSequence
name|pattern
parameter_list|)
block|{
name|boolean
name|inCharSet
decl_stmt|,
name|starCannotMatchNull
init|=
literal|false
decl_stmt|,
name|questionMatchesZero
decl_stmt|;
name|int
name|ch
decl_stmt|;
name|StringBuffer
name|buffer
decl_stmt|;
name|buffer
operator|=
operator|new
name|StringBuffer
argument_list|(
literal|2
operator|*
name|pattern
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|inCharSet
operator|=
literal|false
expr_stmt|;
name|char
name|c
decl_stmt|;
for|for
control|(
name|ch
operator|=
literal|0
init|;
name|ch
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|;
name|ch
operator|++
control|)
block|{
name|c
operator|=
name|pattern
operator|.
name|charAt
argument_list|(
name|ch
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|c
condition|)
block|{
case|case
literal|'*'
case|:
if|if
condition|(
name|inCharSet
condition|)
name|buffer
operator|.
name|append
argument_list|(
literal|'*'
argument_list|)
expr_stmt|;
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".*"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'?'
case|:
if|if
condition|(
name|inCharSet
condition|)
name|buffer
operator|.
name|append
argument_list|(
literal|'?'
argument_list|)
expr_stmt|;
else|else
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|".?"
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'['
case|:
name|inCharSet
operator|=
literal|true
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|+
literal|1
operator|<
name|pattern
operator|.
name|length
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|pattern
operator|.
name|charAt
argument_list|(
name|ch
operator|+
literal|1
argument_list|)
condition|)
block|{
case|case
literal|'!'
case|:
case|case
literal|'^'
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|'^'
argument_list|)
expr_stmt|;
operator|++
name|ch
expr_stmt|;
continue|continue;
case|case
literal|']'
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|']'
argument_list|)
expr_stmt|;
operator|++
name|ch
expr_stmt|;
continue|continue;
block|}
block|}
break|break;
case|case
literal|']'
case|:
name|inCharSet
operator|=
literal|false
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
name|buffer
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
name|pattern
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|buffer
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|__isGlobMetaCharacter
argument_list|(
name|pattern
operator|.
name|charAt
argument_list|(
name|ch
operator|+
literal|1
argument_list|)
argument_list|)
condition|)
name|buffer
operator|.
name|append
argument_list|(
name|pattern
operator|.
name|charAt
argument_list|(
operator|++
name|ch
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|buffer
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
operator|!
name|inCharSet
operator|&&
name|__isPerl5MetaCharacter
argument_list|(
name|c
argument_list|)
condition|)
name|buffer
operator|.
name|append
argument_list|(
literal|'\\'
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|append
argument_list|(
name|c
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|buffer
operator|.
name|toString
argument_list|()
return|;
block|}
comment|/**      * @param args      */
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|String
name|glob
init|=
literal|"[gG]enerate? "
decl_stmt|;
name|String
name|re
init|=
name|globToRegexp
argument_list|(
name|glob
argument_list|)
decl_stmt|;
name|String
name|str
init|=
literal|"This is generated text"
decl_stmt|;
name|Pattern
name|pattern
init|=
name|Pattern
operator|.
name|compile
argument_list|(
name|re
argument_list|)
decl_stmt|;
name|Matcher
name|matcher
init|=
name|pattern
operator|.
name|matcher
argument_list|(
name|str
argument_list|)
decl_stmt|;
name|boolean
name|match
init|=
name|matcher
operator|.
name|find
argument_list|()
decl_stmt|;
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|str
operator|.
name|substring
argument_list|(
name|matcher
operator|.
name|start
argument_list|()
argument_list|,
name|matcher
operator|.
name|end
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

