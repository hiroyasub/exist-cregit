begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-05 The eXist Project  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Comparator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|NodeProxy
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|SwapVals
import|;
end_import

begin_comment
comment|/** 	This class implements a simple version  	of the heapsort algorithm, improved.  	The implementation is based on the 	implementation of J. Mohr, which was 	based on the implementation of a sorting 	framework by Cay Horstmann.  	@author José María Fernández */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|HeapSort
block|{
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|Comparable
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
comment|// Establish the heap property.
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|hi
operator|/
literal|2
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|hi
argument_list|,
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
for|for
control|(
name|i
operator|=
name|hi
init|;
name|i
operator|>
name|lo
condition|;
name|i
operator|--
control|)
block|{
comment|// a[1] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|fixHeap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|a
index|[
name|lo
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|Comparator
name|c
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
comment|// Establish the heap property.
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|hi
operator|/
literal|2
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|i
argument_list|,
name|hi
argument_list|,
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
for|for
control|(
name|i
operator|=
name|hi
init|;
name|i
operator|>
name|lo
condition|;
name|i
operator|--
control|)
block|{
comment|// a[1] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|fixHeap
argument_list|(
name|a
argument_list|,
name|c
argument_list|,
name|lo
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|a
index|[
name|lo
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|List
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
comment|// Establish the heap property.
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|hi
operator|/
literal|2
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|hi
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
for|for
control|(
name|i
operator|=
name|hi
init|;
name|i
operator|>
name|lo
condition|;
name|i
operator|--
control|)
block|{
comment|// a[1] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|fixHeap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|lo
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|,
name|Object
name|b
index|[]
parameter_list|)
block|{
comment|// Establish the heap property.
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|hi
operator|/
literal|2
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|i
argument_list|,
name|hi
argument_list|,
name|a
index|[
name|i
index|]
argument_list|,
operator|(
name|b
operator|!=
literal|null
operator|)
condition|?
name|b
index|[
name|i
index|]
else|:
literal|null
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
for|for
control|(
name|i
operator|=
name|hi
init|;
name|i
operator|>
name|lo
condition|;
name|i
operator|--
control|)
block|{
comment|// a[1] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|SwapVals
operator|.
name|swap
argument_list|(
name|b
argument_list|,
name|lo
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|fixHeap
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|lo
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|a
index|[
name|lo
index|]
argument_list|,
operator|(
name|b
operator|!=
literal|null
operator|)
condition|?
name|b
index|[
name|lo
index|]
else|:
literal|null
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|sort
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
comment|// Establish the heap property.
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|hi
operator|/
literal|2
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeap
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|hi
argument_list|,
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
for|for
control|(
name|i
operator|=
name|hi
init|;
name|i
operator|>
name|lo
condition|;
name|i
operator|--
control|)
block|{
comment|// a[1] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|fixHeap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|a
index|[
name|lo
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|public
specifier|static
name|void
name|sortByNodeId
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|lo
parameter_list|,
name|int
name|hi
parameter_list|)
block|{
comment|// Establish the heap property.
name|int
name|i
decl_stmt|;
for|for
control|(
name|i
operator|=
name|hi
operator|/
literal|2
init|;
name|i
operator|>=
name|lo
condition|;
name|i
operator|--
control|)
name|fixHeapByNodeId
argument_list|(
name|a
argument_list|,
name|i
argument_list|,
name|hi
argument_list|,
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
comment|// Now place the largest element last,
comment|// 2nd largest 2nd last, etc.
for|for
control|(
name|i
operator|=
name|hi
init|;
name|i
operator|>
name|lo
condition|;
name|i
operator|--
control|)
block|{
comment|// a[1] is the next-biggest element.
name|SwapVals
operator|.
name|swap
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
argument_list|)
expr_stmt|;
comment|// Heap shrinks by 1 element.
name|fixHeapByNodeId
argument_list|(
name|a
argument_list|,
name|lo
argument_list|,
name|i
operator|-
literal|1
argument_list|,
name|a
index|[
name|lo
index|]
argument_list|)
expr_stmt|;
block|}
block|}
specifier|private
specifier|static
name|void
name|fixHeap
parameter_list|(
name|Comparable
index|[]
name|a
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|end
parameter_list|,
name|Comparable
name|key
parameter_list|)
block|{
name|boolean
name|itera
decl_stmt|;
do|do
block|{
name|int
name|child
init|=
literal|2
operator|*
name|root
decl_stmt|;
comment|// left child
comment|// Find the larger child.
if|if
condition|(
name|child
operator|<
name|end
operator|&&
name|a
index|[
name|child
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|+
literal|1
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|child
operator|++
expr_stmt|;
comment|// right child is larger
block|}
comment|// If the larger child is larger than the
comment|// element at the root, move the larger child
comment|// to the root and filter the former root
comment|// element down into the "larger" subtree.
name|itera
operator|=
name|child
operator|<=
name|end
operator|&&
name|key
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
index|]
argument_list|)
operator|<
literal|0
expr_stmt|;
if|if
condition|(
name|itera
condition|)
block|{
name|a
index|[
name|root
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
name|root
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|a
index|[
name|root
index|]
operator|=
name|key
expr_stmt|;
block|}
block|}
do|while
condition|(
name|itera
condition|)
do|;
block|}
specifier|private
specifier|static
name|void
name|fixHeap
parameter_list|(
name|Object
index|[]
name|a
parameter_list|,
name|Comparator
name|c
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|end
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
name|boolean
name|itera
decl_stmt|;
do|do
block|{
name|int
name|child
init|=
literal|2
operator|*
name|root
decl_stmt|;
comment|// left child
comment|// Find the larger child.
if|if
condition|(
name|child
operator|<
name|end
operator|&&
name|c
operator|.
name|compare
argument_list|(
name|a
index|[
name|child
index|]
argument_list|,
name|a
index|[
name|child
operator|+
literal|1
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|child
operator|++
expr_stmt|;
comment|// right child is larger
block|}
comment|// If the larger child is larger than the
comment|// element at the root, move the larger child
comment|// to the root and filter the former root
comment|// element down into the "larger" subtree.
name|itera
operator|=
name|child
operator|<=
name|end
operator|&&
name|c
operator|.
name|compare
argument_list|(
name|key
argument_list|,
name|a
index|[
name|child
index|]
argument_list|)
operator|<
literal|0
expr_stmt|;
if|if
condition|(
name|itera
condition|)
block|{
name|a
index|[
name|root
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
name|root
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|a
index|[
name|root
index|]
operator|=
name|key
expr_stmt|;
block|}
block|}
do|while
condition|(
name|itera
condition|)
do|;
block|}
specifier|private
specifier|static
name|void
name|fixHeap
parameter_list|(
name|List
name|a
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|end
parameter_list|,
name|Object
name|key
parameter_list|)
block|{
name|boolean
name|itera
decl_stmt|;
do|do
block|{
name|int
name|child
init|=
literal|2
operator|*
name|root
decl_stmt|;
comment|// left child
comment|// Find the larger child.
if|if
condition|(
name|child
operator|<
name|end
operator|&&
operator|(
operator|(
name|Comparable
operator|)
name|a
operator|.
name|get
argument_list|(
name|child
argument_list|)
operator|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|child
operator|+
literal|1
argument_list|)
argument_list|)
operator|<
literal|0
condition|)
block|{
name|child
operator|++
expr_stmt|;
comment|// right child is larger
block|}
comment|// If the larger child is larger than the
comment|// element at the root, move the larger child
comment|// to the root and filter the former root
comment|// element down into the "larger" subtree.
name|itera
operator|=
name|child
operator|<=
name|end
operator|&&
operator|(
operator|(
name|Comparable
operator|)
name|key
operator|)
operator|.
name|compareTo
argument_list|(
name|a
operator|.
name|get
argument_list|(
name|child
argument_list|)
argument_list|)
operator|<
literal|0
expr_stmt|;
if|if
condition|(
name|itera
condition|)
block|{
name|a
operator|.
name|set
argument_list|(
name|root
argument_list|,
name|a
operator|.
name|get
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
name|root
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|a
operator|.
name|set
argument_list|(
name|root
argument_list|,
name|key
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|itera
condition|)
do|;
block|}
specifier|private
specifier|static
name|void
name|fixHeap
parameter_list|(
name|long
index|[]
name|a
parameter_list|,
name|Object
index|[]
name|b
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|end
parameter_list|,
name|long
name|key
parameter_list|,
name|Object
name|keyb
parameter_list|)
block|{
name|boolean
name|itera
decl_stmt|;
do|do
block|{
name|int
name|child
init|=
literal|2
operator|*
name|root
decl_stmt|;
comment|// left child
comment|// Find the larger child.
if|if
condition|(
name|child
operator|<
name|end
operator|&&
name|a
index|[
name|child
index|]
operator|<
name|a
index|[
name|child
operator|+
literal|1
index|]
condition|)
block|{
name|child
operator|++
expr_stmt|;
comment|// right child is larger
block|}
comment|// If the larger child is larger than the
comment|// element at the root, move the larger child
comment|// to the root and filter the former root
comment|// element down into the "larger" subtree.
name|itera
operator|=
name|child
operator|<=
name|end
operator|&&
name|key
operator|<
name|a
index|[
name|child
index|]
expr_stmt|;
if|if
condition|(
name|itera
condition|)
block|{
name|a
index|[
name|root
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|b
index|[
name|root
index|]
operator|=
name|b
index|[
name|child
index|]
expr_stmt|;
name|root
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|a
index|[
name|root
index|]
operator|=
name|key
expr_stmt|;
if|if
condition|(
name|b
operator|!=
literal|null
condition|)
name|b
index|[
name|root
index|]
operator|=
name|keyb
expr_stmt|;
block|}
block|}
do|while
condition|(
name|itera
condition|)
do|;
block|}
specifier|private
specifier|static
name|void
name|fixHeap
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|end
parameter_list|,
name|NodeProxy
name|key
parameter_list|)
block|{
name|boolean
name|itera
decl_stmt|;
do|do
block|{
name|int
name|child
init|=
literal|2
operator|*
name|root
decl_stmt|;
comment|// left child
comment|// Find the larger child.
if|if
condition|(
name|child
operator|<
name|end
operator|&&
name|a
index|[
name|child
index|]
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
operator|+
literal|1
index|]
argument_list|)
operator|<
literal|0
condition|)
block|{
name|child
operator|++
expr_stmt|;
comment|// right child is larger
block|}
comment|// If the larger child is larger than the
comment|// element at the root, move the larger child
comment|// to the root and filter the former root
comment|// element down into the "larger" subtree.
name|itera
operator|=
name|child
operator|<=
name|end
operator|&&
name|key
operator|.
name|compareTo
argument_list|(
name|a
index|[
name|child
index|]
argument_list|)
operator|<
literal|0
expr_stmt|;
if|if
condition|(
name|itera
condition|)
block|{
name|a
index|[
name|root
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
name|root
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|a
index|[
name|root
index|]
operator|=
name|key
expr_stmt|;
block|}
block|}
do|while
condition|(
name|itera
condition|)
do|;
block|}
specifier|private
specifier|static
name|void
name|fixHeapByNodeId
parameter_list|(
name|NodeProxy
index|[]
name|a
parameter_list|,
name|int
name|root
parameter_list|,
name|int
name|end
parameter_list|,
name|NodeProxy
name|key
parameter_list|)
block|{
name|boolean
name|itera
decl_stmt|;
do|do
block|{
name|int
name|child
init|=
literal|2
operator|*
name|root
decl_stmt|;
comment|// left child
comment|// Find the larger child.
if|if
condition|(
name|child
operator|<
name|end
operator|&&
name|a
index|[
name|child
index|]
operator|.
name|getGID
argument_list|()
operator|<
name|a
index|[
name|child
operator|+
literal|1
index|]
operator|.
name|getGID
argument_list|()
condition|)
block|{
name|child
operator|++
expr_stmt|;
comment|// right child is larger
block|}
comment|// If the larger child is larger than the
comment|// element at the root, move the larger child
comment|// to the root and filter the former root
comment|// element down into the "larger" subtree.
name|itera
operator|=
name|child
operator|<=
name|end
operator|&&
name|key
operator|.
name|getGID
argument_list|()
operator|<
name|a
index|[
name|child
index|]
operator|.
name|getGID
argument_list|()
expr_stmt|;
if|if
condition|(
name|itera
condition|)
block|{
name|a
index|[
name|root
index|]
operator|=
name|a
index|[
name|child
index|]
expr_stmt|;
name|root
operator|=
name|child
expr_stmt|;
block|}
else|else
block|{
name|a
index|[
name|root
index|]
operator|=
name|key
expr_stmt|;
block|}
block|}
do|while
condition|(
name|itera
condition|)
do|;
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
throws|throws
name|Exception
block|{
name|List
name|l
init|=
operator|new
name|ArrayList
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|length
operator|==
literal|0
condition|)
block|{
name|String
index|[]
name|a
init|=
operator|new
name|String
index|[]
block|{
literal|"Rudi"
block|,
literal|"Herbert"
block|,
literal|"Anton"
block|,
literal|"Berta"
block|,
literal|"Olga"
block|,
literal|"Willi"
block|,
literal|"Heinz"
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|a
operator|.
name|length
condition|;
name|i
operator|++
control|)
name|l
operator|.
name|add
argument_list|(
name|a
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ordering file "
operator|+
name|args
index|[
literal|0
index|]
operator|+
literal|"\n"
argument_list|)
expr_stmt|;
try|try
block|{
name|java
operator|.
name|io
operator|.
name|BufferedReader
name|is
init|=
operator|new
name|java
operator|.
name|io
operator|.
name|BufferedReader
argument_list|(
operator|new
name|java
operator|.
name|io
operator|.
name|FileReader
argument_list|(
name|args
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|String
name|rr
decl_stmt|;
while|while
condition|(
operator|(
name|rr
operator|=
name|is
operator|.
name|readLine
argument_list|()
operator|)
operator|!=
literal|null
condition|)
block|{
name|l
operator|.
name|add
argument_list|(
name|rr
argument_list|)
expr_stmt|;
block|}
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
name|e
parameter_list|)
block|{
block|}
block|}
name|long
name|a
decl_stmt|;
name|long
name|b
decl_stmt|;
name|a
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|sort
argument_list|(
name|l
argument_list|,
literal|0
argument_list|,
name|l
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|b
operator|=
name|System
operator|.
name|currentTimeMillis
argument_list|()
expr_stmt|;
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"Ellapsed time: "
operator|+
operator|(
name|b
operator|-
name|a
operator|)
operator|+
literal|" size: "
operator|+
name|l
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|l
operator|.
name|get
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

