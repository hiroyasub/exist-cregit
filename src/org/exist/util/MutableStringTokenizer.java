begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  * MutableStringTokenizer.java - Jun 8, 2003  *   * @author wolf  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_class
specifier|public
class|class
name|MutableStringTokenizer
block|{
specifier|private
name|CharSequence
name|buf_
decl_stmt|;
specifier|private
name|int
name|pos_
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|last_
init|=
literal|0
decl_stmt|;
specifier|private
name|String
name|tokens_
decl_stmt|;
specifier|public
name|MutableStringTokenizer
parameter_list|(
name|CharSequence
name|buf
parameter_list|,
name|String
name|tokens
parameter_list|)
block|{
name|buf_
operator|=
name|buf
expr_stmt|;
name|tokens_
operator|=
name|tokens
expr_stmt|;
block|}
specifier|public
name|MutableStringTokenizer
parameter_list|()
block|{
block|}
specifier|public
name|void
name|set
parameter_list|(
name|CharSequence
name|buf
parameter_list|)
block|{
name|buf_
operator|=
name|buf
expr_stmt|;
name|pos_
operator|=
literal|0
expr_stmt|;
name|last_
operator|=
literal|0
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|CharSequence
name|buf
parameter_list|,
name|String
name|tokens
parameter_list|)
block|{
name|set
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|tokens_
operator|=
name|tokens
expr_stmt|;
block|}
specifier|public
name|CharSequence
name|nextToken
parameter_list|()
block|{
if|if
condition|(
name|buf_
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|char
name|ch
decl_stmt|;
name|CharSequence
name|next
init|=
literal|null
decl_stmt|;
while|while
condition|(
name|pos_
operator|<
name|buf_
operator|.
name|length
argument_list|()
condition|)
block|{
name|ch
operator|=
name|buf_
operator|.
name|charAt
argument_list|(
name|pos_
argument_list|)
expr_stmt|;
if|if
condition|(
name|tokens_
operator|.
name|indexOf
argument_list|(
name|ch
argument_list|)
operator|>
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|pos_
operator|>
literal|0
condition|)
block|{
name|next
operator|=
operator|new
name|SharedCharSequence
argument_list|(
name|buf_
argument_list|,
name|last_
argument_list|,
name|pos_
argument_list|)
expr_stmt|;
name|last_
operator|=
operator|++
name|pos_
expr_stmt|;
return|return
name|next
return|;
block|}
else|else
operator|++
name|last_
expr_stmt|;
block|}
operator|++
name|pos_
expr_stmt|;
block|}
if|if
condition|(
name|pos_
operator|>
name|last_
condition|)
block|{
name|next
operator|=
operator|new
name|SharedCharSequence
argument_list|(
name|buf_
argument_list|,
name|last_
argument_list|,
name|pos_
argument_list|)
expr_stmt|;
name|last_
operator|=
name|pos_
expr_stmt|;
block|}
return|return
name|next
return|;
block|}
specifier|private
specifier|final
specifier|static
class|class
name|SharedCharSequence
implements|implements
name|CharSequence
block|{
name|CharSequence
name|buf_
init|=
literal|null
decl_stmt|;
name|int
name|start_
decl_stmt|;
name|int
name|end_
decl_stmt|;
specifier|public
name|SharedCharSequence
parameter_list|()
block|{
block|}
specifier|public
name|SharedCharSequence
parameter_list|(
name|CharSequence
name|buf
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|buf_
operator|=
name|buf
expr_stmt|;
name|start_
operator|=
name|start
expr_stmt|;
name|end_
operator|=
name|end
expr_stmt|;
block|}
specifier|public
name|void
name|set
parameter_list|(
name|CharSequence
name|buf
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|buf_
operator|=
name|buf
expr_stmt|;
name|start_
operator|=
name|start
expr_stmt|;
name|end_
operator|=
name|end
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		 * @see java.lang.CharSequence#charAt(int) 		 */
specifier|public
name|char
name|charAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|<
literal|0
operator|||
name|start_
operator|+
name|index
operator|>
name|end_
condition|)
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|(
name|String
operator|.
name|valueOf
argument_list|(
name|index
argument_list|)
argument_list|)
throw|;
return|return
name|buf_
operator|.
name|charAt
argument_list|(
name|start_
operator|+
name|index
argument_list|)
return|;
block|}
comment|/* (non-Javadoc) 		 * @see java.lang.Object#equals(java.lang.Object) 		 */
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
name|CharSequence
name|s
decl_stmt|;
if|if
condition|(
name|obj
operator|instanceof
name|CharSequence
condition|)
name|s
operator|=
operator|(
name|CharSequence
operator|)
name|obj
expr_stmt|;
else|else
name|s
operator|=
name|String
operator|.
name|valueOf
argument_list|(
name|obj
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|!=
name|length
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|s
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|s
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
operator|!=
name|buf_
operator|.
name|charAt
argument_list|(
name|start_
operator|+
name|i
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
comment|/* (non-Javadoc) 		 * @see java.lang.CharSequence#length() 		 */
specifier|public
name|int
name|length
parameter_list|()
block|{
return|return
name|end_
operator|-
name|start_
return|;
block|}
comment|/* (non-Javadoc) 		 * @see java.lang.CharSequence#subSequence(int, int) 		 */
specifier|public
name|CharSequence
name|subSequence
parameter_list|(
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
return|return
operator|new
name|SharedCharSequence
argument_list|(
name|buf_
argument_list|,
name|start_
operator|+
name|start
argument_list|,
name|start_
operator|+
name|end
argument_list|)
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|b
init|=
operator|new
name|StringBuffer
argument_list|(
name|length
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|start_
init|;
name|i
operator|<
name|end_
condition|;
name|i
operator|++
control|)
name|b
operator|.
name|append
argument_list|(
name|buf_
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|b
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
specifier|public
specifier|static
name|void
name|main
parameter_list|(
name|String
index|[]
name|args
parameter_list|)
block|{
name|MutableStringTokenizer
name|t
init|=
operator|new
name|MutableStringTokenizer
argument_list|(
literal|"/PLAY/SCENE/SPEECH/"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|CharSequence
name|s
decl_stmt|;
while|while
condition|(
operator|(
name|s
operator|=
name|t
operator|.
name|nextToken
argument_list|()
operator|)
operator|!=
literal|null
condition|)
name|System
operator|.
name|out
operator|.
name|println
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

