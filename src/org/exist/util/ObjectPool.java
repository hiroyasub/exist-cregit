begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  The Apache Software License, Version 1.1  *  *  *  Copyright (c) 1999 The Apache Software Foundation.  All rights  *  reserved.  *  *  Redistribution and use in source and binary forms, with or without  *  modification, are permitted provided that the following conditions  *  are met:  *  *  1. Redistributions of source code must retain the above copyright  *  notice, this list of conditions and the following disclaimer.  *  *  2. Redistributions in binary form must reproduce the above copyright  *  notice, this list of conditions and the following disclaimer in  *  the documentation and/or other materials provided with the  *  distribution.  *  *  3. The end-user documentation included with the redistribution,  *  if any, must include the following acknowledgment:  *  "This product includes software developed by the  *  Apache Software Foundation (http://www.apache.org/)."  *  Alternately, this acknowledgment may appear in the software itself,  *  if and wherever such third-party acknowledgments normally appear.  *  *  4. The names "Xalan" and "Apache Software Foundation" must  *  not be used to endorse or promote products derived from this  *  software without prior written permission. For written  *  permission, please contact apache@apache.org.  *  *  5. Products derived from this software may not be called "Apache",  *  nor may "Apache" appear in their name, without prior written  *  permission of the Apache Software Foundation.  *  *  THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED  *  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES  *  OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE  *  DISCLAIMED.  IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR  *  ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,  *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT  *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF  *  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND  *  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,  *  OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT  *  OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF  *  SUCH DAMAGE.  *  ====================================================================  *  *  This software consists of voluntary contributions made by many  *  individuals on behalf of the Apache Software Foundation and was  *  originally based on software copyright (c) 1999, Lotus  *  Development Corporation., http://www.lotus.com.  For more  *  information on the Apache Software Foundation, please see  *<http://www.apache.org/>.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|lang
operator|.
name|ref
operator|.
name|SoftReference
import|;
end_import

begin_comment
comment|/**  *<meta name="usage" content="internal"/> Pool of object of a given type to  *  pick from to help memory usage  *  *@author     Wolfgang Meier<meier@ifs.tu-darmstadt.de>  *@created    27. Juni 2002  */
end_comment

begin_class
specifier|public
class|class
name|ObjectPool
implements|implements
name|java
operator|.
name|io
operator|.
name|Serializable
block|{
comment|/**      *  Type of objects in this pool.      *      *@serial      */
specifier|private
specifier|final
name|Class
name|objectType
decl_stmt|;
comment|/**      *  Vector of given objects this points to.      *      *@serial      */
specifier|private
specifier|final
name|Vector
name|freeStack
decl_stmt|;
comment|/**      *  Constructor ObjectPool      *      *@param  type  Type of objects for this pool      */
specifier|public
name|ObjectPool
parameter_list|(
name|Class
name|type
parameter_list|)
block|{
name|objectType
operator|=
name|type
expr_stmt|;
name|freeStack
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Constructor ObjectPool      *      *@param  className  Fully qualified name of the type of objects for this      *      pool.      */
specifier|public
name|ObjectPool
parameter_list|(
name|String
name|className
parameter_list|)
block|{
try|try
block|{
name|objectType
operator|=
name|Class
operator|.
name|forName
argument_list|(
name|className
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|ClassNotFoundException
name|cnfe
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|cnfe
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|freeStack
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Constructor ObjectPool      *      *@param  type  Type of objects for this pool      *@param  size  Size of vector to allocate      */
specifier|public
name|ObjectPool
parameter_list|(
name|Class
name|type
parameter_list|,
name|int
name|size
parameter_list|)
block|{
name|objectType
operator|=
name|type
expr_stmt|;
name|freeStack
operator|=
operator|new
name|Vector
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
comment|/**  Constructor ObjectPool */
specifier|public
name|ObjectPool
parameter_list|()
block|{
name|objectType
operator|=
literal|null
expr_stmt|;
name|freeStack
operator|=
operator|new
name|Vector
argument_list|()
expr_stmt|;
block|}
comment|/**      *  Get an instance of the given object in this pool if available      *      *@return    an instance of the given object if available or null      */
specifier|public
specifier|synchronized
name|Object
name|getInstanceIfFree
parameter_list|()
block|{
comment|// Check if the pool is empty.
if|if
condition|(
operator|!
name|freeStack
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Object
name|obj
init|=
literal|null
decl_stmt|;
do|do
block|{
comment|// Remove object from end of free pool.
name|SoftReference
name|ref
init|=
operator|(
name|SoftReference
operator|)
name|freeStack
operator|.
name|lastElement
argument_list|()
decl_stmt|;
name|obj
operator|=
name|ref
operator|.
name|get
argument_list|()
expr_stmt|;
name|freeStack
operator|.
name|setSize
argument_list|(
name|freeStack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|obj
operator|==
literal|null
operator|&&
name|freeStack
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
do|;
return|return
name|obj
return|;
block|}
return|return
literal|null
return|;
block|}
comment|/**      *  Get an instance of the given object in this pool      *      *@return    An instance of the given object      */
specifier|public
specifier|synchronized
name|Object
name|getInstance
parameter_list|()
block|{
name|Object
name|obj
init|=
literal|null
decl_stmt|;
if|if
condition|(
operator|!
name|freeStack
operator|.
name|isEmpty
argument_list|()
condition|)
do|do
block|{
comment|// Remove object from end of free pool.
name|SoftReference
name|ref
init|=
operator|(
name|SoftReference
operator|)
name|freeStack
operator|.
name|lastElement
argument_list|()
decl_stmt|;
name|obj
operator|=
name|ref
operator|.
name|get
argument_list|()
expr_stmt|;
name|freeStack
operator|.
name|setSize
argument_list|(
name|freeStack
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|freeStack
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|obj
operator|==
literal|null
condition|)
do|;
if|if
condition|(
name|obj
operator|==
literal|null
condition|)
block|{
comment|// Create a new object if so.
try|try
block|{
return|return
name|objectType
operator|.
name|newInstance
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
name|InstantiationException
name|ex
parameter_list|)
block|{
block|}
catch|catch
parameter_list|(
name|IllegalAccessException
name|ex
parameter_list|)
block|{
block|}
comment|// Throw unchecked exception for error in pool configuration.
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"error creating new object in pool"
argument_list|)
throw|;
block|}
return|return
name|obj
return|;
block|}
comment|/**      *  Add an instance of the given object to the pool      *      *@param  obj  Object to add.      */
specifier|public
specifier|synchronized
name|void
name|freeInstance
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
comment|// Make sure the object is of the correct type.
comment|// Remove safety.  -sb
comment|// if (objectType.isInstance(obj))
comment|// {
name|freeStack
operator|.
name|addElement
argument_list|(
operator|new
name|SoftReference
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
comment|// }
comment|// else
comment|// {
comment|//  throw new IllegalArgumentException("argument type invalid for pool");
comment|// }
block|}
comment|/**  Description of the Method */
specifier|public
specifier|synchronized
name|void
name|reset
parameter_list|()
block|{
name|freeStack
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_class

end_unit

