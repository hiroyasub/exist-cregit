begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|InputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|File
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|Reader
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|zip
operator|.
name|GZIPInputStream
import|;
end_import

begin_comment
comment|/**  * This class extends InputSource to be able to deal with  * GZIP compressed files. Its main feature is that each time  * {@link #getByteStream()} is called, a new uncompressed  * stream is created from the compressed GZIP file.  * This is very useful for eXist, which works in two steps:  * validation and insertion.  *   * @author jmfernandez  *  */
end_comment

begin_class
specifier|public
specifier|final
class|class
name|GZIPInputSource
extends|extends
name|FileInputSource
block|{
comment|/** 	 * Empty constructor 	 */
specifier|public
name|GZIPInputSource
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
comment|/** 	 * Constructor which calls {@link #getGZIPFile()} 	 * @param gzipFile 	 * The file passed to {@link #getGZIPFile()} 	 */
specifier|public
name|GZIPInputSource
parameter_list|(
name|File
name|gzipFile
parameter_list|)
block|{
name|super
argument_list|(
name|gzipFile
argument_list|)
expr_stmt|;
block|}
comment|/** 	 * This method was re-implemented to open a 	 * new GZIPInputStream each time it is called. 	 * @return 	 * If the file was set, and it could be opened, and it was 	 * a correct gzip file, a GZIPInputStream object. 	 * null, otherwise. 	 */
specifier|public
name|InputStream
name|getByteStream
parameter_list|()
block|{
name|InputStream
name|retval
init|=
name|super
operator|.
name|getByteStream
argument_list|()
decl_stmt|;
if|if
condition|(
name|retval
operator|!=
literal|null
condition|)
block|{
try|try
block|{
name|retval
operator|=
operator|new
name|GZIPInputStream
argument_list|(
name|retval
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|retval
operator|=
literal|null
expr_stmt|;
comment|// No way to notify :-(
block|}
block|}
return|return
name|retval
return|;
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided  	 */
specifier|public
name|void
name|setByteStream
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
comment|// Nothing, so collateral effects are avoided!
block|}
comment|/** 	 * This method now does nothing, so collateral 	 * effects from superclass with this one are avoided  	 */
specifier|public
name|void
name|setCharacterStream
parameter_list|(
name|Reader
name|r
parameter_list|)
block|{
comment|// Nothing, so collateral effects are avoided!
block|}
specifier|public
name|long
name|getByteStreamLength
parameter_list|()
block|{
name|InputStream
name|str
init|=
name|getByteStream
argument_list|()
decl_stmt|;
name|byte
index|[]
name|buffer
init|=
operator|new
name|byte
index|[
literal|4096
index|]
decl_stmt|;
name|long
name|retval
init|=
literal|0
decl_stmt|;
name|int
name|readed
decl_stmt|;
try|try
block|{
while|while
condition|(
operator|(
name|readed
operator|=
name|str
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|buffer
operator|.
name|length
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|retval
operator|+=
name|readed
expr_stmt|;
block|}
name|str
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|ioe
parameter_list|)
block|{
name|retval
operator|=
operator|-
literal|1
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
block|}
end_class

end_unit

