begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_class
specifier|public
class|class
name|LongLinkedList
block|{
specifier|public
specifier|static
class|class
name|ListItem
implements|implements
name|Comparable
block|{
specifier|public
name|long
name|l
decl_stmt|;
specifier|public
name|ListItem
name|next
init|=
literal|null
decl_stmt|;
specifier|public
name|ListItem
name|prev
init|=
literal|null
decl_stmt|;
specifier|public
name|ListItem
parameter_list|()
block|{
block|}
specifier|public
name|ListItem
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|this
operator|.
name|l
operator|=
name|l
expr_stmt|;
block|}
specifier|public
name|long
name|getValue
parameter_list|()
block|{
return|return
name|l
return|;
block|}
specifier|public
name|ListItem
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
comment|/** 		 * @see java.lang.Comparable#compareTo(java.lang.Object) 		 */
specifier|public
name|int
name|compareTo
parameter_list|(
name|Object
name|o
parameter_list|)
block|{
specifier|final
name|long
name|ol
init|=
operator|(
operator|(
name|ListItem
operator|)
name|o
operator|)
operator|.
name|l
decl_stmt|;
if|if
condition|(
name|ol
operator|==
name|l
condition|)
return|return
name|Constants
operator|.
name|EQUAL
return|;
if|else if
condition|(
name|l
operator|<
name|ol
condition|)
return|return
name|Constants
operator|.
name|INFERIOR
return|;
else|else
return|return
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
block|}
specifier|protected
name|ListItem
name|first
init|=
literal|null
decl_stmt|;
specifier|protected
name|ListItem
name|last
init|=
literal|null
decl_stmt|;
specifier|protected
name|int
name|count
init|=
literal|0
decl_stmt|;
specifier|public
name|LongLinkedList
parameter_list|()
block|{
block|}
specifier|public
name|void
name|add
parameter_list|(
name|long
name|l
parameter_list|)
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|createListItem
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|last
operator|=
name|first
expr_stmt|;
block|}
else|else
block|{
name|ListItem
name|next
init|=
name|createListItem
argument_list|(
name|l
argument_list|)
decl_stmt|;
name|last
operator|.
name|next
operator|=
name|next
expr_stmt|;
name|next
operator|.
name|prev
operator|=
name|last
expr_stmt|;
name|last
operator|=
name|next
expr_stmt|;
block|}
operator|++
name|count
expr_stmt|;
block|}
specifier|public
name|int
name|getSize
parameter_list|()
block|{
return|return
name|count
return|;
block|}
specifier|public
name|ListItem
name|getFirst
parameter_list|()
block|{
return|return
name|first
return|;
block|}
specifier|public
name|ListItem
name|removeFirst
parameter_list|()
block|{
name|ListItem
name|temp
init|=
name|first
decl_stmt|;
name|first
operator|=
name|first
operator|.
name|next
expr_stmt|;
if|if
condition|(
name|first
operator|!=
literal|null
condition|)
name|first
operator|.
name|prev
operator|=
literal|null
expr_stmt|;
return|return
name|temp
return|;
block|}
specifier|public
name|long
name|getLast
parameter_list|()
block|{
if|if
condition|(
name|last
operator|!=
literal|null
condition|)
return|return
name|last
operator|.
name|l
return|;
else|else
return|return
operator|-
literal|1
return|;
block|}
specifier|public
name|boolean
name|contains
parameter_list|(
name|long
name|l
parameter_list|)
block|{
name|ListItem
name|next
init|=
name|first
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|next
operator|.
name|l
operator|==
name|l
condition|)
return|return
literal|true
return|;
name|next
operator|=
name|next
operator|.
name|next
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
specifier|public
name|long
index|[]
name|getData
parameter_list|()
block|{
name|long
index|[]
name|data
init|=
operator|new
name|long
index|[
name|count
index|]
decl_stmt|;
name|ListItem
name|next
init|=
name|first
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|data
index|[
name|i
operator|++
index|]
operator|=
name|next
operator|.
name|l
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|next
expr_stmt|;
block|}
return|return
name|data
return|;
block|}
specifier|public
name|String
name|toString
parameter_list|()
block|{
name|StringBuffer
name|buf
init|=
operator|new
name|StringBuffer
argument_list|()
decl_stmt|;
name|ListItem
name|next
init|=
name|first
decl_stmt|;
while|while
condition|(
name|next
operator|!=
literal|null
condition|)
block|{
name|buf
operator|.
name|append
argument_list|(
name|next
operator|.
name|l
argument_list|)
operator|.
name|append
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|next
operator|=
name|next
operator|.
name|next
expr_stmt|;
block|}
return|return
name|buf
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|LongLinkedListIterator
argument_list|()
return|;
block|}
specifier|protected
name|ListItem
name|createListItem
parameter_list|(
name|long
name|l
parameter_list|)
block|{
return|return
operator|new
name|ListItem
argument_list|(
name|l
argument_list|)
return|;
block|}
specifier|private
specifier|final
class|class
name|LongLinkedListIterator
implements|implements
name|Iterator
block|{
specifier|private
name|ListItem
name|next
init|=
name|first
decl_stmt|;
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|next
operator|!=
literal|null
return|;
block|}
specifier|public
name|Object
name|next
parameter_list|()
block|{
name|Object
name|temp
init|=
name|next
decl_stmt|;
name|next
operator|=
name|next
operator|.
name|next
expr_stmt|;
return|return
name|temp
return|;
block|}
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"not implemented"
argument_list|)
throw|;
block|}
block|}
block|}
end_class

end_unit

