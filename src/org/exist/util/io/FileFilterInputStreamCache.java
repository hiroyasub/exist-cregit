begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/* Copyright (c) 2012, Adam Retter All rights reserved.  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:     * Redistributions of source code must retain the above copyright       notice, this list of conditions and the following disclaimer.     * Redistributions in binary form must reproduce the above copyright       notice, this list of conditions and the following disclaimer in the       documentation and/or other materials provided with the distribution.     * Neither the name of Adam Retter Consulting nor the       names of its contributors may be used to endorse or promote products       derived from this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Adam Retter BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * Cache implementation for CachingFilterInputStream  * Backed by a Random Access File  *   * Probably slowed than MemoryMappedFileFilterInputStreamCache  * for multiple reads, but uses a fixed small amount of memory.  *  * @version 1.0  *  * @author Adam Retter<adam.retter@googlemail.com>  */
end_comment

begin_class
specifier|public
class|class
name|FileFilterInputStreamCache
implements|implements
name|FilterInputStreamCache
block|{
specifier|private
specifier|final
name|File
name|tempFile
decl_stmt|;
specifier|private
specifier|final
name|boolean
name|externalFile
decl_stmt|;
specifier|private
name|int
name|length
init|=
literal|0
decl_stmt|;
specifier|private
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|private
specifier|final
name|RandomAccessFile
name|raf
decl_stmt|;
specifier|public
name|FileFilterInputStreamCache
parameter_list|()
throws|throws
name|IOException
block|{
name|this
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
specifier|public
name|FileFilterInputStreamCache
parameter_list|(
name|File
name|f
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|f
operator|==
literal|null
condition|)
block|{
name|tempFile
operator|=
name|TemporaryFileManager
operator|.
name|getInstance
argument_list|()
operator|.
name|getTemporaryFile
argument_list|()
expr_stmt|;
name|externalFile
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|tempFile
operator|=
name|f
expr_stmt|;
name|externalFile
operator|=
literal|true
expr_stmt|;
block|}
name|this
operator|.
name|raf
operator|=
operator|new
name|RandomAccessFile
argument_list|(
name|tempFile
argument_list|,
literal|"rw"
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
comment|//force writing to be append only
if|if
condition|(
name|offset
operator|!=
name|length
condition|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|offset
operator|=
name|length
expr_stmt|;
block|}
name|raf
operator|.
name|write
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|length
operator|+=
name|len
expr_stmt|;
name|offset
operator|+=
name|len
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
comment|//force writing to be append only
if|if
condition|(
name|offset
operator|!=
name|length
condition|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|length
argument_list|)
expr_stmt|;
name|offset
operator|=
name|length
expr_stmt|;
block|}
name|raf
operator|.
name|write
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|length
operator|++
expr_stmt|;
name|offset
operator|++
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|getLength
parameter_list|()
block|{
return|return
name|length
return|;
block|}
annotation|@
name|Override
specifier|public
name|byte
name|get
parameter_list|(
name|int
name|off
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|off
operator|!=
name|offset
condition|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|off
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|off
expr_stmt|;
block|}
return|return
name|raf
operator|.
name|readByte
argument_list|()
return|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|copyTo
parameter_list|(
name|int
name|cacheOffset
parameter_list|,
name|byte
index|[]
name|b
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|cacheOffset
operator|!=
name|offset
condition|)
block|{
name|raf
operator|.
name|seek
argument_list|(
name|cacheOffset
argument_list|)
expr_stmt|;
name|this
operator|.
name|offset
operator|=
name|cacheOffset
expr_stmt|;
block|}
name|raf
operator|.
name|readFully
argument_list|(
name|b
argument_list|,
name|off
argument_list|,
name|len
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|invalidate
parameter_list|()
throws|throws
name|IOException
block|{
name|raf
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|tempFile
operator|!=
literal|null
operator|&&
operator|(
operator|!
name|externalFile
operator|)
condition|)
block|{
name|TemporaryFileManager
operator|.
name|getInstance
argument_list|()
operator|.
name|returnTemporaryFile
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

