begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2010-2012 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|*
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|MalformedURLException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URL
import|;
end_import

begin_import
import|import
name|java
operator|.
name|net
operator|.
name|URLConnection
import|;
end_import

begin_import
import|import
name|java
operator|.
name|security
operator|.
name|SecureRandom
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|ArrayList
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Date
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|List
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Properties
import|;
end_import

begin_import
import|import
name|javax
operator|.
name|xml
operator|.
name|transform
operator|.
name|OutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|EXistException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
operator|.
name|CollectionEntry
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|IndexInfo
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|BinaryDocument
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentImpl
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|DocumentMetadata
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|LockToken
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|PermissionDeniedException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Subject
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|BrokerPool
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|DBBroker
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|lock
operator|.
name|Lock
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|EXistOutputKeys
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|serializers
operator|.
name|Serializer
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|TransactionManager
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|storage
operator|.
name|txn
operator|.
name|Txn
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FileInputSource
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|LockException
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeTable
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|MimeType
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xmldb
operator|.
name|XmldbURI
import|;
end_import

begin_import
import|import
name|org
operator|.
name|xml
operator|.
name|sax
operator|.
name|SAXException
import|;
end_import

begin_import
import|import static
name|org
operator|.
name|exist
operator|.
name|security
operator|.
name|Permission
operator|.
name|*
import|;
end_import

begin_comment
comment|/**  * eXist's resource. It extend java.io.File  *   * @author<a href="mailto:shabanovd@gmail.com">Dmitriy Shabanov</a>  *  */
end_comment

begin_class
specifier|public
class|class
name|Resource
extends|extends
name|File
block|{
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
operator|-
literal|3450182389919974961L
decl_stmt|;
specifier|public
specifier|static
specifier|final
name|char
name|separatorChar
init|=
literal|'/'
decl_stmt|;
comment|//  default output properties for the XML serialization
specifier|public
specifier|final
specifier|static
name|Properties
name|XML_OUTPUT_PROPERTIES
init|=
operator|new
name|Properties
argument_list|()
decl_stmt|;
static|static
block|{
name|XML_OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|INDENT
argument_list|,
literal|"yes"
argument_list|)
expr_stmt|;
name|XML_OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|ENCODING
argument_list|,
literal|"UTF-8"
argument_list|)
expr_stmt|;
name|XML_OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|OutputKeys
operator|.
name|OMIT_XML_DECLARATION
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|XML_OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|EXPAND_XINCLUDES
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
name|XML_OUTPUT_PROPERTIES
operator|.
name|setProperty
argument_list|(
name|EXistOutputKeys
operator|.
name|PROCESS_XSL_PI
argument_list|,
literal|"no"
argument_list|)
expr_stmt|;
block|}
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_COLLECTION_PERM
init|=
literal|0777
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|DEFAULT_RESOURCE_PERM
init|=
literal|0644
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|SecureRandom
name|random
init|=
operator|new
name|SecureRandom
argument_list|()
decl_stmt|;
specifier|static
name|File
name|generateFile
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|File
name|dir
parameter_list|)
block|{
name|long
name|n
init|=
name|random
operator|.
name|nextLong
argument_list|()
decl_stmt|;
if|if
condition|(
name|n
operator|==
name|Long
operator|.
name|MIN_VALUE
condition|)
block|{
name|n
operator|=
literal|0
expr_stmt|;
comment|// corner case
block|}
else|else
block|{
name|n
operator|=
name|Math
operator|.
name|abs
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
return|return
operator|new
name|Resource
argument_list|(
name|dir
argument_list|,
name|prefix
operator|+
name|Long
operator|.
name|toString
argument_list|(
name|n
argument_list|)
operator|+
name|suffix
argument_list|)
return|;
block|}
specifier|public
specifier|static
name|File
name|createTempFile
parameter_list|(
name|String
name|prefix
parameter_list|,
name|String
name|suffix
parameter_list|,
name|File
name|directory
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|prefix
operator|.
name|length
argument_list|()
operator|<
literal|3
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"Prefix string too short"
argument_list|)
throw|;
block|}
if|if
condition|(
name|suffix
operator|==
literal|null
condition|)
block|{
name|suffix
operator|=
literal|".tmp"
expr_stmt|;
block|}
return|return
name|generateFile
argument_list|(
name|prefix
argument_list|,
name|suffix
argument_list|,
name|directory
argument_list|)
return|;
block|}
specifier|protected
name|XmldbURI
name|uri
decl_stmt|;
specifier|protected
name|boolean
name|initialized
init|=
literal|false
decl_stmt|;
specifier|private
name|Collection
name|collection
init|=
literal|null
decl_stmt|;
specifier|private
name|DocumentImpl
name|resource
init|=
literal|null
decl_stmt|;
name|File
name|file
init|=
literal|null
decl_stmt|;
specifier|public
name|Resource
parameter_list|(
name|XmldbURI
name|uri
parameter_list|)
block|{
name|super
argument_list|(
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|this
operator|.
name|uri
operator|=
name|uri
expr_stmt|;
block|}
specifier|public
name|Resource
parameter_list|(
name|String
name|uri
parameter_list|)
block|{
name|this
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|uri
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Resource
parameter_list|(
name|File
name|file
parameter_list|,
name|String
name|child
parameter_list|)
block|{
name|this
argument_list|(
operator|(
name|Resource
operator|)
name|file
argument_list|,
name|child
argument_list|)
expr_stmt|;
block|}
specifier|public
name|Resource
parameter_list|(
name|Resource
name|resource
parameter_list|,
name|String
name|child
parameter_list|)
block|{
name|this
argument_list|(
name|resource
operator|.
name|uri
operator|.
name|append
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
comment|//		this(child.startsWith("/db") ? XmldbURI.create(child) : resource.uri.append(child));
block|}
specifier|public
name|Resource
parameter_list|(
name|String
name|parent
parameter_list|,
name|String
name|child
parameter_list|)
block|{
name|this
argument_list|(
name|XmldbURI
operator|.
name|create
argument_list|(
name|parent
argument_list|)
operator|.
name|append
argument_list|(
name|child
argument_list|)
argument_list|)
expr_stmt|;
comment|//		this(child.startsWith("/db") ? XmldbURI.create(child) : XmldbURI.create(parent).append(child));
block|}
specifier|public
name|Resource
name|getParentFile
parameter_list|()
block|{
specifier|final
name|XmldbURI
name|parentPath
init|=
name|uri
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentPath
operator|==
name|XmldbURI
operator|.
name|EMPTY_URI
condition|)
block|{
if|if
condition|(
name|uri
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|DB
argument_list|)
condition|)
return|return
literal|null
return|;
return|return
operator|new
name|Resource
argument_list|(
name|XmldbURI
operator|.
name|DB
argument_list|)
return|;
block|}
return|return
operator|new
name|Resource
argument_list|(
name|parentPath
argument_list|)
return|;
block|}
specifier|public
name|Resource
name|getAbsoluteFile
parameter_list|()
block|{
return|return
name|this
return|;
comment|//UNDERSTAND: is it correct?
block|}
specifier|public
name|File
name|getCanonicalFile
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|this
return|;
comment|//        String canonPath = getCanonicalPath();
comment|//        return new File(canonPath, fs.prefixLength(canonPath));
block|}
specifier|public
name|String
name|getName
parameter_list|()
block|{
return|return
name|uri
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
specifier|private
name|void
name|closeFile
parameter_list|(
name|InputStream
name|is
parameter_list|)
block|{
if|if
condition|(
name|is
operator|==
literal|null
condition|)
block|{
return|return;
block|}
try|try
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
comment|//
block|}
block|}
specifier|public
name|boolean
name|mkdir
parameter_list|()
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|tm
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
specifier|final
name|Collection
name|parent_collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|toCollectionPathURI
argument_list|()
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parent_collection
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|tm
operator|=
name|db
operator|.
name|getTransactionManager
argument_list|()
expr_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|tm
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Collection
name|child
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|uri
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|)
decl_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|tm
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|tm
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|mkdirs
parameter_list|()
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|tm
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|Collection
name|collection
init|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|tm
operator|=
name|db
operator|.
name|getTransactionManager
argument_list|()
expr_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|tm
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
try|try
block|{
specifier|final
name|Collection
name|child
init|=
name|broker
operator|.
name|getOrCreateCollection
argument_list|(
name|transaction
argument_list|,
name|uri
operator|.
name|toCollectionPathURI
argument_list|()
argument_list|)
decl_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|transaction
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|tm
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|tm
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|isDirectory
parameter_list|()
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|resource
operator|==
literal|null
operator|)
return|;
block|}
specifier|public
name|boolean
name|isFile
parameter_list|()
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
name|resource
operator|!=
literal|null
operator|)
return|;
block|}
specifier|public
name|boolean
name|exists
parameter_list|()
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
operator|(
operator|(
name|collection
operator|!=
literal|null
operator|)
operator|||
operator|(
name|resource
operator|!=
literal|null
operator|)
operator|)
return|;
block|}
specifier|public
name|boolean
name|_renameTo
parameter_list|(
name|File
name|dest
parameter_list|)
block|{
specifier|final
name|XmldbURI
name|destinationPath
init|=
operator|(
operator|(
name|Resource
operator|)
name|dest
operator|)
operator|.
name|uri
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|tm
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
name|tm
operator|=
name|db
operator|.
name|getTransactionManager
argument_list|()
expr_stmt|;
name|Txn
name|transaction
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
name|destination
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
name|source
init|=
literal|null
decl_stmt|;
name|XmldbURI
name|newName
decl_stmt|;
try|try
block|{
name|source
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|uri
operator|.
name|removeLastSegment
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|DocumentImpl
name|doc
init|=
name|source
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|destination
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|destinationPath
operator|.
name|removeLastSegment
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|newName
operator|=
name|destinationPath
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
name|transaction
operator|=
name|tm
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|broker
operator|.
name|moveResource
argument_list|(
name|transaction
argument_list|,
name|doc
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
name|tm
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|transaction
operator|!=
literal|null
condition|)
block|{
name|tm
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|destination
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|boolean
name|renameTo
parameter_list|(
name|File
name|dest
parameter_list|)
block|{
comment|//    	System.out.println("rename from "+uri+" to "+dest.getPath());
specifier|final
name|XmldbURI
name|destinationPath
init|=
operator|(
operator|(
name|Resource
operator|)
name|dest
operator|)
operator|.
name|uri
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|tm
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
name|tm
operator|=
name|db
operator|.
name|getTransactionManager
argument_list|()
expr_stmt|;
name|Txn
name|transaction
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
name|destination
init|=
literal|null
decl_stmt|;
name|org
operator|.
name|exist
operator|.
name|collections
operator|.
name|Collection
name|source
init|=
literal|null
decl_stmt|;
name|XmldbURI
name|newName
decl_stmt|;
try|try
block|{
name|source
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|uri
operator|.
name|removeLastSegment
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|DocumentImpl
name|doc
init|=
name|source
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|destination
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|destinationPath
operator|.
name|removeLastSegment
argument_list|()
argument_list|,
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|destination
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
name|newName
operator|=
name|destinationPath
operator|.
name|lastSegment
argument_list|()
expr_stmt|;
name|transaction
operator|=
name|tm
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|moveResource
argument_list|(
name|broker
argument_list|,
name|transaction
argument_list|,
name|doc
argument_list|,
name|source
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
comment|//                resource = null;
comment|//                collection = null;
comment|//                initialized = false;
comment|//                uri = ((Resource)dest).uri;
name|tm
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|transaction
operator|!=
literal|null
condition|)
block|{
name|tm
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|source
operator|!=
literal|null
condition|)
block|{
name|source
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|destination
operator|!=
literal|null
condition|)
block|{
name|destination
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|WRITE_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|synchronized
name|File
name|serialize
parameter_list|(
specifier|final
name|DBBroker
name|broker
parameter_list|,
specifier|final
name|DocumentImpl
name|doc
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|!=
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|doc
operator|.
name|getFileURI
argument_list|()
operator|.
name|toString
argument_list|()
operator|+
literal|" locked."
argument_list|)
throw|;
block|}
try|try
block|{
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setUser
argument_list|(
name|broker
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|XML_OUTPUT_PROPERTIES
argument_list|)
expr_stmt|;
name|file
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"eXist-resource-"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
name|file
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
specifier|final
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|file
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|doc
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|file
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
specifier|protected
name|void
name|freeFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|isXML
argument_list|()
condition|)
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
comment|//XXX: understand why can't throw exception
comment|//throw new IOException();
return|return;
block|}
name|file
operator|.
name|delete
argument_list|()
expr_stmt|;
name|file
operator|=
literal|null
expr_stmt|;
block|}
block|}
specifier|protected
specifier|synchronized
name|void
name|uploadTmpFile
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|file
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|()
throw|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|tm
init|=
literal|null
decl_stmt|;
name|Txn
name|txn
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
name|tm
operator|=
name|db
operator|.
name|getTransactionManager
argument_list|()
expr_stmt|;
name|txn
operator|=
name|tm
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|FileInputSource
name|is
init|=
operator|new
name|FileInputSource
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|,
name|is
argument_list|)
decl_stmt|;
comment|//	        info.getDocument().getMetadata().setMimeType(mimeType.getName());
name|is
operator|=
operator|new
name|FileInputSource
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|is
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tm
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|e
operator|.
name|printStackTrace
argument_list|()
expr_stmt|;
if|if
condition|(
name|txn
operator|!=
literal|null
condition|)
block|{
name|tm
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
name|void
name|moveResource
parameter_list|(
name|DBBroker
name|broker
parameter_list|,
name|Txn
name|txn
parameter_list|,
name|DocumentImpl
name|doc
parameter_list|,
name|Collection
name|source
parameter_list|,
name|Collection
name|destination
parameter_list|,
name|XmldbURI
name|newName
parameter_list|)
throws|throws
name|PermissionDeniedException
throws|,
name|LockException
throws|,
name|IOException
throws|,
name|SAXException
throws|,
name|EXistException
block|{
specifier|final
name|MimeTable
name|mimeTable
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
decl_stmt|;
specifier|final
name|boolean
name|isXML
init|=
name|mimeTable
operator|.
name|isXMLContent
argument_list|(
name|newName
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|MimeType
name|mimeType
init|=
name|mimeTable
operator|.
name|getContentTypeFor
argument_list|(
name|newName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|!=
literal|null
operator|&&
operator|!
name|mimeType
operator|.
name|getName
argument_list|()
operator|.
name|equals
argument_list|(
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getMimeType
argument_list|()
argument_list|)
condition|)
block|{
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeXMLResource
argument_list|(
name|txn
argument_list|,
name|doc
argument_list|)
expr_stmt|;
name|doc
operator|=
name|source
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|isXML
condition|)
block|{
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|XML_FILE
condition|)
block|{
comment|//XML to XML
comment|//move to same type as it
name|broker
operator|.
name|moveResource
argument_list|(
name|txn
argument_list|,
name|doc
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//convert BINARY to XML
specifier|final
name|File
name|file
init|=
name|broker
operator|.
name|getBinaryFile
argument_list|(
operator|(
name|BinaryDocument
operator|)
name|doc
argument_list|)
decl_stmt|;
name|FileInputSource
name|is
init|=
operator|new
name|FileInputSource
argument_list|(
name|file
argument_list|)
decl_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|destination
operator|.
name|validateXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|newName
argument_list|,
name|is
argument_list|)
decl_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputSource
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|destination
operator|.
name|store
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|is
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|source
operator|.
name|removeBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
comment|//BINARY to BINARY
comment|//move to same type as it
name|broker
operator|.
name|moveResource
argument_list|(
name|txn
argument_list|,
name|doc
argument_list|,
name|destination
argument_list|,
name|newName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//convert XML to BINARY
comment|// xml file
specifier|final
name|Serializer
name|serializer
init|=
name|broker
operator|.
name|getSerializer
argument_list|()
decl_stmt|;
name|serializer
operator|.
name|setUser
argument_list|(
name|broker
operator|.
name|getSubject
argument_list|()
argument_list|)
expr_stmt|;
name|serializer
operator|.
name|setProperties
argument_list|(
name|XML_OUTPUT_PROPERTIES
argument_list|)
expr_stmt|;
name|File
name|tempFile
init|=
literal|null
decl_stmt|;
name|FileInputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
name|tempFile
operator|=
name|File
operator|.
name|createTempFile
argument_list|(
literal|"eXist-resource-"
argument_list|,
literal|".xml"
argument_list|)
expr_stmt|;
name|tempFile
operator|.
name|deleteOnExit
argument_list|()
expr_stmt|;
specifier|final
name|Writer
name|w
init|=
operator|new
name|OutputStreamWriter
argument_list|(
operator|new
name|FileOutputStream
argument_list|(
name|tempFile
argument_list|)
argument_list|,
literal|"UTF-8"
argument_list|)
decl_stmt|;
name|serializer
operator|.
name|serialize
argument_list|(
name|doc
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|flush
argument_list|()
expr_stmt|;
name|w
operator|.
name|close
argument_list|()
expr_stmt|;
name|is
operator|=
operator|new
name|FileInputStream
argument_list|(
name|tempFile
argument_list|)
expr_stmt|;
specifier|final
name|DocumentMetadata
name|meta
init|=
name|doc
operator|.
name|getMetadata
argument_list|()
decl_stmt|;
specifier|final
name|Date
name|created
init|=
operator|new
name|Date
argument_list|(
name|meta
operator|.
name|getCreated
argument_list|()
argument_list|)
decl_stmt|;
specifier|final
name|Date
name|lastModified
init|=
operator|new
name|Date
argument_list|(
name|meta
operator|.
name|getLastModified
argument_list|()
argument_list|)
decl_stmt|;
name|BinaryDocument
name|binary
init|=
name|destination
operator|.
name|validateBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|newName
argument_list|,
name|is
argument_list|,
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|created
argument_list|,
name|lastModified
argument_list|)
decl_stmt|;
name|binary
operator|=
name|destination
operator|.
name|addBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|binary
argument_list|,
name|is
argument_list|,
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|,
name|created
argument_list|,
name|lastModified
argument_list|)
expr_stmt|;
name|source
operator|.
name|removeXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|doc
operator|.
name|getFileURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
finally|finally
block|{
if|if
condition|(
name|is
operator|!=
literal|null
condition|)
block|{
name|is
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|tempFile
operator|!=
literal|null
condition|)
block|{
name|tempFile
operator|.
name|delete
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
specifier|public
name|boolean
name|delete
parameter_list|()
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|tm
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
name|tm
operator|=
name|db
operator|.
name|getTransactionManager
argument_list|()
expr_stmt|;
name|Txn
name|txn
init|=
literal|null
decl_stmt|;
try|try
block|{
name|collection
operator|=
name|broker
operator|.
name|openCollection
argument_list|(
name|uri
operator|.
name|removeLastSegment
argument_list|()
argument_list|,
name|Lock
operator|.
name|NO_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
comment|// keep the write lock in the transaction
comment|//transaction.registerLock(collection.getLock(), Lock.WRITE_LOCK);
specifier|final
name|DocumentImpl
name|doc
init|=
name|collection
operator|.
name|getDocument
argument_list|(
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|null
condition|)
block|{
return|return
literal|true
return|;
block|}
name|txn
operator|=
name|tm
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
if|if
condition|(
name|doc
operator|.
name|getResourceType
argument_list|()
operator|==
name|DocumentImpl
operator|.
name|BINARY_FILE
condition|)
block|{
name|collection
operator|.
name|removeBinaryResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|doc
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|.
name|removeXMLResource
argument_list|(
name|txn
argument_list|,
name|broker
argument_list|,
name|uri
operator|.
name|lastSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tm
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|txn
operator|!=
literal|null
condition|)
block|{
name|tm
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
return|return
literal|false
return|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
name|resource
operator|=
literal|null
expr_stmt|;
name|collection
operator|=
literal|null
expr_stmt|;
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
block|}
specifier|public
name|boolean
name|createNewFile
parameter_list|()
throws|throws
name|IOException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|TransactionManager
name|tm
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
comment|//			if (!uri.startsWith("/db"))
comment|//				uri = XmldbURI.DB.append(uri);
comment|//
try|try
block|{
if|if
condition|(
name|uri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"It collection, but should be resource: "
operator|+
name|uri
argument_list|)
throw|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|XmldbURI
name|collectionURI
init|=
name|uri
operator|.
name|removeLastSegment
argument_list|()
decl_stmt|;
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|collectionURI
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Collection not found: "
operator|+
name|collectionURI
argument_list|)
throw|;
block|}
specifier|final
name|XmldbURI
name|fileName
init|=
name|uri
operator|.
name|lastSegment
argument_list|()
decl_stmt|;
comment|//			try {
comment|//				resource = broker.getXMLResource(uri, Lock.READ_LOCK);
comment|//			} catch (final PermissionDeniedException e1) {
comment|//			} finally {
comment|//				if (resource != null) {
comment|//					resource.getUpdateLock().release(Lock.READ_LOCK);
comment|//					collection = resource.getCollection();
comment|//					initialized = true;
comment|//
comment|//					return false;
comment|//				}
comment|//			}
comment|//
try|try
block|{
name|resource
operator|=
name|broker
operator|.
name|getResource
argument_list|(
name|uri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e1
parameter_list|)
block|{
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
name|collection
operator|=
name|resource
operator|.
name|getCollection
argument_list|()
expr_stmt|;
name|initialized
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
name|MimeType
name|mimeType
init|=
name|MimeTable
operator|.
name|getInstance
argument_list|()
operator|.
name|getContentTypeFor
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|mimeType
operator|==
literal|null
condition|)
block|{
name|mimeType
operator|=
name|MimeType
operator|.
name|BINARY_TYPE
expr_stmt|;
block|}
name|tm
operator|=
name|db
operator|.
name|getTransactionManager
argument_list|()
expr_stmt|;
specifier|final
name|Txn
name|transaction
init|=
name|tm
operator|.
name|beginTransaction
argument_list|()
decl_stmt|;
name|InputStream
name|is
init|=
literal|null
decl_stmt|;
try|try
block|{
if|if
condition|(
name|mimeType
operator|.
name|isXMLType
argument_list|()
condition|)
block|{
comment|// store as xml resource
specifier|final
name|String
name|str
init|=
literal|"<empty/>"
decl_stmt|;
specifier|final
name|IndexInfo
name|info
init|=
name|collection
operator|.
name|validateXMLResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|fileName
argument_list|,
name|str
argument_list|)
decl_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getMetadata
argument_list|()
operator|.
name|setMimeType
argument_list|(
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|)
expr_stmt|;
name|info
operator|.
name|getDocument
argument_list|()
operator|.
name|getPermissions
argument_list|()
operator|.
name|setMode
argument_list|(
name|DEFAULT_RESOURCE_PERM
argument_list|)
expr_stmt|;
name|collection
operator|.
name|store
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|info
argument_list|,
name|str
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// store as binary resource
name|is
operator|=
operator|new
name|ByteArrayInputStream
argument_list|(
literal|""
operator|.
name|getBytes
argument_list|(
literal|"UTF-8"
argument_list|)
argument_list|)
expr_stmt|;
specifier|final
name|BinaryDocument
name|blob
init|=
operator|new
name|BinaryDocument
argument_list|(
name|db
argument_list|,
name|collection
argument_list|,
name|fileName
argument_list|)
decl_stmt|;
name|blob
operator|.
name|getPermissions
argument_list|()
operator|.
name|setMode
argument_list|(
name|DEFAULT_RESOURCE_PERM
argument_list|)
expr_stmt|;
name|collection
operator|.
name|addBinaryResource
argument_list|(
name|transaction
argument_list|,
name|broker
argument_list|,
name|blob
argument_list|,
name|is
argument_list|,
name|mimeType
operator|.
name|getName
argument_list|()
argument_list|,
literal|0L
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|,
operator|new
name|Date
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|tm
operator|.
name|commit
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
name|tm
operator|.
name|abort
argument_list|(
name|transaction
argument_list|)
expr_stmt|;
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
name|closeFile
argument_list|(
name|is
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
specifier|private
specifier|synchronized
name|void
name|init
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|initialized
condition|)
block|{
name|collection
operator|=
literal|null
expr_stmt|;
name|resource
operator|=
literal|null
expr_stmt|;
name|initialized
operator|=
literal|false
expr_stmt|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
comment|//collection
if|if
condition|(
name|uri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Resource not found: "
operator|+
name|uri
argument_list|)
throw|;
block|}
comment|//resource
block|}
else|else
block|{
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|uri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|//may be, it's collection ... checking ...
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Resource not found: "
operator|+
name|uri
argument_list|)
throw|;
block|}
block|}
else|else
block|{
name|collection
operator|=
name|resource
operator|.
name|getCollection
argument_list|()
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
specifier|private
name|Permission
name|getPermission
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
return|return
name|resource
operator|.
name|getPermissions
argument_list|()
return|;
block|}
if|if
condition|(
name|collection
operator|!=
literal|null
condition|)
block|{
return|return
name|collection
operator|.
name|getPermissions
argument_list|()
return|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
literal|"this never should happen"
argument_list|)
throw|;
block|}
specifier|private
name|Subject
name|getBrokerUser
parameter_list|()
throws|throws
name|IOException
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
return|return
name|broker
operator|.
name|getSubject
argument_list|()
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|Reader
name|getReader
parameter_list|()
throws|throws
name|IOException
block|{
specifier|final
name|InputStream
name|is
init|=
name|getConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
decl_stmt|;
specifier|final
name|BufferedInputStream
name|bis
init|=
operator|new
name|BufferedInputStream
argument_list|(
name|is
argument_list|)
decl_stmt|;
return|return
operator|new
name|InputStreamReader
argument_list|(
name|bis
argument_list|)
return|;
block|}
specifier|public
name|BufferedReader
name|getBufferedReader
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|BufferedReader
argument_list|(
name|getReader
argument_list|()
argument_list|)
return|;
block|}
specifier|private
name|URLConnection
name|connection
init|=
literal|null
decl_stmt|;
specifier|private
name|URLConnection
name|getConnection
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
name|connection
operator|==
literal|null
condition|)
block|{
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
specifier|final
name|Subject
name|subject
init|=
name|broker
operator|.
name|getSubject
argument_list|()
decl_stmt|;
specifier|final
name|URL
name|url
init|=
operator|new
name|URL
argument_list|(
literal|"xmldb:exist://jsessionid:"
operator|+
name|subject
operator|.
name|getSessionId
argument_list|()
operator|+
literal|"@"
operator|+
name|uri
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|connection
operator|=
name|url
operator|.
name|openConnection
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IllegalArgumentException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|MalformedURLException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|connection
return|;
block|}
specifier|public
name|InputStream
name|getInputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getConnection
argument_list|()
operator|.
name|getInputStream
argument_list|()
return|;
block|}
specifier|public
name|Writer
name|getWriter
parameter_list|()
throws|throws
name|IOException
block|{
return|return
operator|new
name|BufferedWriter
argument_list|(
operator|new
name|OutputStreamWriter
argument_list|(
name|getOutputStream
argument_list|(
literal|false
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|()
throws|throws
name|IOException
block|{
return|return
name|getOutputStream
argument_list|(
literal|false
argument_list|)
return|;
block|}
specifier|public
name|OutputStream
name|getOutputStream
parameter_list|(
name|boolean
name|append
parameter_list|)
throws|throws
name|IOException
block|{
comment|//XXX: code append
if|if
condition|(
name|append
condition|)
block|{
name|System
operator|.
name|err
operator|.
name|println
argument_list|(
literal|"BUG: OutputStream in append mode!"
argument_list|)
expr_stmt|;
block|}
return|return
name|getConnection
argument_list|()
operator|.
name|getOutputStream
argument_list|()
return|;
block|}
specifier|public
name|DocumentImpl
name|getDocument
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
return|return
name|resource
return|;
block|}
specifier|public
name|Collection
name|getCollection
parameter_list|()
throws|throws
name|IOException
block|{
if|if
condition|(
operator|!
name|initialized
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
try|try
block|{
if|if
condition|(
name|uri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
operator|.
name|removeLastSegment
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Collection not found: "
operator|+
name|uri
argument_list|)
throw|;
block|}
return|return
name|collection
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
return|return
name|collection
return|;
block|}
else|else
block|{
return|return
name|resource
operator|.
name|getCollection
argument_list|()
return|;
block|}
block|}
specifier|public
name|String
index|[]
name|list
parameter_list|()
block|{
if|if
condition|(
name|isDirectory
argument_list|()
condition|)
block|{
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
specifier|final
name|List
argument_list|<
name|String
argument_list|>
name|list
init|=
operator|new
name|ArrayList
argument_list|<
name|String
argument_list|>
argument_list|()
decl_stmt|;
for|for
control|(
specifier|final
name|CollectionEntry
name|entry
range|:
name|collection
operator|.
name|getEntries
argument_list|(
name|broker
argument_list|)
control|)
block|{
name|list
operator|.
name|add
argument_list|(
name|entry
operator|.
name|getUri
argument_list|()
operator|.
name|lastSegment
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|list
operator|.
name|toArray
argument_list|(
operator|new
name|String
index|[
name|list
operator|.
name|size
argument_list|()
index|]
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|PermissionDeniedException
name|e
parameter_list|)
block|{
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
operator|new
name|String
index|[
literal|0
index|]
return|;
block|}
comment|//    public String[] list(FilenameFilter filter) {
comment|//    	throw new IllegalAccessError("not implemeted");
comment|//    }
specifier|public
name|File
index|[]
name|listFiles
parameter_list|()
block|{
if|if
condition|(
operator|!
name|isDirectory
argument_list|()
condition|)
block|{
return|return
literal|null
return|;
block|}
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
return|return
literal|null
return|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
try|try
block|{
name|collection
operator|.
name|getLock
argument_list|()
operator|.
name|acquire
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
specifier|final
name|File
index|[]
name|children
init|=
operator|new
name|File
index|[
name|collection
operator|.
name|getChildCollectionCount
argument_list|(
name|broker
argument_list|)
operator|+
name|collection
operator|.
name|getDocumentCount
argument_list|(
name|broker
argument_list|)
index|]
decl_stmt|;
comment|//collections
name|int
name|j
init|=
literal|0
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|collection
operator|.
name|collectionIterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
name|children
index|[
name|j
index|]
operator|=
operator|new
name|Resource
argument_list|(
name|collection
operator|.
name|getURI
argument_list|()
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//collections
specifier|final
name|List
argument_list|<
name|XmldbURI
argument_list|>
name|allresources
init|=
operator|new
name|ArrayList
argument_list|<
name|XmldbURI
argument_list|>
argument_list|()
decl_stmt|;
name|DocumentImpl
name|doc
init|=
literal|null
decl_stmt|;
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|DocumentImpl
argument_list|>
name|i
init|=
name|collection
operator|.
name|iterator
argument_list|(
name|broker
argument_list|)
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
control|)
block|{
name|doc
operator|=
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
comment|// Include only when (1) locktoken is present or (2)
comment|// locktoken indicates that it is not a null resource
specifier|final
name|LockToken
name|lock
init|=
name|doc
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLockToken
argument_list|()
decl_stmt|;
if|if
condition|(
name|lock
operator|==
literal|null
operator|||
operator|(
operator|!
name|lock
operator|.
name|isNullResource
argument_list|()
operator|)
condition|)
block|{
name|allresources
operator|.
name|add
argument_list|(
name|doc
operator|.
name|getURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Copy content of list into String array.
for|for
control|(
specifier|final
name|Iterator
argument_list|<
name|XmldbURI
argument_list|>
name|i
init|=
name|allresources
operator|.
name|iterator
argument_list|()
init|;
name|i
operator|.
name|hasNext
argument_list|()
condition|;
name|j
operator|++
control|)
block|{
name|children
index|[
name|j
index|]
operator|=
operator|new
name|Resource
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|children
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|LockException
name|e
parameter_list|)
block|{
comment|//throw new IOException("Failed to acquire lock on collection '" + uri + "'");
return|return
literal|null
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
name|collection
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
return|return
literal|null
return|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|public
name|File
index|[]
name|listFiles
parameter_list|(
name|FilenameFilter
name|filter
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalAccessError
argument_list|(
literal|"not implemeted"
argument_list|)
throw|;
block|}
specifier|public
name|File
index|[]
name|listFiles
parameter_list|(
name|FileFilter
name|filter
parameter_list|)
block|{
throw|throw
operator|new
name|IllegalAccessError
argument_list|(
literal|"not implemeted"
argument_list|)
throw|;
block|}
specifier|public
specifier|synchronized
name|long
name|length
parameter_list|()
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|0L
return|;
block|}
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
comment|//report size for binary resource only
if|if
condition|(
name|resource
operator|instanceof
name|BinaryDocument
condition|)
block|{
return|return
name|resource
operator|.
name|getContentLength
argument_list|()
return|;
block|}
block|}
return|return
literal|0L
return|;
block|}
specifier|private
specifier|static
name|XmldbURI
name|normalize
parameter_list|(
specifier|final
name|XmldbURI
name|uri
parameter_list|)
block|{
return|return
name|uri
operator|.
name|startsWith
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
condition|?
name|uri
else|:
name|uri
operator|.
name|prepend
argument_list|(
name|XmldbURI
operator|.
name|ROOT_COLLECTION_URI
argument_list|)
return|;
block|}
specifier|public
name|String
name|getPath
parameter_list|()
block|{
return|return
name|normalize
argument_list|(
name|uri
argument_list|)
operator|.
name|toString
argument_list|()
return|;
comment|// uri.toString();
block|}
specifier|public
name|String
name|getAbsolutePath
parameter_list|()
block|{
return|return
name|normalize
argument_list|(
name|uri
argument_list|)
operator|.
name|toString
argument_list|()
return|;
comment|// uri.toString();
block|}
specifier|public
name|boolean
name|isXML
parameter_list|()
throws|throws
name|IOException
block|{
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
if|if
condition|(
name|resource
operator|instanceof
name|BinaryDocument
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
literal|true
return|;
block|}
block|}
return|return
literal|false
return|;
block|}
specifier|protected
name|File
name|getFile
parameter_list|()
throws|throws
name|FileNotFoundException
block|{
if|if
condition|(
name|isDirectory
argument_list|()
condition|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
literal|"unsupported operation for collection."
argument_list|)
throw|;
block|}
name|DocumentImpl
name|doc
decl_stmt|;
try|try
block|{
if|if
condition|(
operator|!
name|exists
argument_list|()
condition|)
block|{
name|createNewFile
argument_list|()
expr_stmt|;
block|}
name|doc
operator|=
name|getDocument
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
if|if
condition|(
name|doc
operator|instanceof
name|BinaryDocument
condition|)
block|{
return|return
name|broker
operator|.
name|getBinaryFile
argument_list|(
operator|(
operator|(
name|BinaryDocument
operator|)
name|doc
operator|)
argument_list|)
return|;
block|}
else|else
block|{
return|return
name|serialize
argument_list|(
name|broker
argument_list|,
name|doc
argument_list|)
return|;
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|FileNotFoundException
argument_list|(
name|e
operator|.
name|getMessage
argument_list|()
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
comment|//		throw new FileNotFoundException("unsupported operation for "+doc.getClass()+".");
block|}
specifier|public
name|boolean
name|setReadOnly
parameter_list|()
block|{
try|try
block|{
name|modifyMetadata
argument_list|(
operator|new
name|ModifyMetadata
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|DocumentImpl
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
name|perm
init|=
name|resource
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
try|try
block|{
name|perm
operator|.
name|setMode
argument_list|(
name|perm
operator|.
name|getMode
argument_list|()
operator||
operator|(
name|READ
operator|<<
literal|6
operator|)
operator|&
operator|~
operator|(
name|WRITE
operator|<<
literal|6
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Collection
name|collection
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
name|perm
init|=
name|collection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
try|try
block|{
name|perm
operator|.
name|setMode
argument_list|(
name|perm
operator|.
name|getMode
argument_list|()
operator||
operator|(
name|READ
operator|<<
literal|6
operator|)
operator|&
operator|~
operator|(
name|WRITE
operator|<<
literal|6
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|setExecutable
parameter_list|(
name|boolean
name|executable
parameter_list|,
name|boolean
name|ownerOnly
parameter_list|)
block|{
try|try
block|{
name|modifyMetadata
argument_list|(
operator|new
name|ModifyMetadata
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|DocumentImpl
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
name|perm
init|=
name|resource
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
try|try
block|{
name|perm
operator|.
name|setMode
argument_list|(
name|perm
operator|.
name|getMode
argument_list|()
operator||
operator|(
name|EXECUTE
operator|<<
literal|6
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Collection
name|collection
parameter_list|)
throws|throws
name|IOException
block|{
name|Permission
name|perm
init|=
name|collection
operator|.
name|getPermissions
argument_list|()
decl_stmt|;
try|try
block|{
name|perm
operator|.
name|setMode
argument_list|(
name|perm
operator|.
name|getMode
argument_list|()
operator||
operator|(
name|EXECUTE
operator|<<
literal|6
operator|)
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|PermissionDeniedException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|boolean
name|canExecute
parameter_list|()
block|{
try|try
block|{
return|return
name|getPermission
argument_list|()
operator|.
name|validate
argument_list|(
name|getBrokerUser
argument_list|()
argument_list|,
name|EXECUTE
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
specifier|public
name|boolean
name|canRead
parameter_list|()
block|{
try|try
block|{
return|return
name|getPermission
argument_list|()
operator|.
name|validate
argument_list|(
name|getBrokerUser
argument_list|()
argument_list|,
name|READ
argument_list|)
return|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
block|}
name|long
name|lastModified
init|=
literal|0L
decl_stmt|;
specifier|public
name|boolean
name|setLastModified
parameter_list|(
specifier|final
name|long
name|time
parameter_list|)
block|{
name|lastModified
operator|=
name|time
expr_stmt|;
try|try
block|{
name|modifyMetadata
argument_list|(
operator|new
name|ModifyMetadata
argument_list|()
block|{
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|DocumentImpl
name|resource
parameter_list|)
throws|throws
name|IOException
block|{
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|setLastModified
argument_list|(
name|time
argument_list|)
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|void
name|modify
parameter_list|(
name|Collection
name|collection
parameter_list|)
throws|throws
name|IOException
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"LastModified can't be set for collection."
argument_list|)
throw|;
block|}
block|}
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|IOException
name|e
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
name|long
name|lastModified
parameter_list|()
block|{
try|try
block|{
name|init
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
return|return
name|lastModified
return|;
block|}
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
return|return
name|resource
operator|.
name|getMetadata
argument_list|()
operator|.
name|getLastModified
argument_list|()
return|;
block|}
if|if
condition|(
name|collection
operator|!=
literal|null
operator|||
name|lastModified
operator|!=
literal|0
condition|)
block|{
comment|//TODO: need lastModified for collection
return|return
name|collection
operator|.
name|getCreationTime
argument_list|()
return|;
block|}
return|return
name|lastModified
return|;
block|}
interface|interface
name|ModifyMetadata
block|{
specifier|public
name|void
name|modify
parameter_list|(
name|DocumentImpl
name|resource
parameter_list|)
throws|throws
name|IOException
function_decl|;
specifier|public
name|void
name|modify
parameter_list|(
name|Collection
name|collection
parameter_list|)
throws|throws
name|IOException
function_decl|;
block|}
specifier|private
name|void
name|modifyMetadata
parameter_list|(
name|ModifyMetadata
name|method
parameter_list|)
throws|throws
name|IOException
block|{
comment|//    	if (initialized) {return;}
name|DBBroker
name|broker
init|=
literal|null
decl_stmt|;
name|BrokerPool
name|db
init|=
literal|null
decl_stmt|;
try|try
block|{
try|try
block|{
name|db
operator|=
name|BrokerPool
operator|.
name|getInstance
argument_list|()
expr_stmt|;
name|broker
operator|=
name|db
operator|.
name|get
argument_list|(
literal|null
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|final
name|EXistException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
specifier|final
name|TransactionManager
name|tm
init|=
name|db
operator|.
name|getTransactionManager
argument_list|()
decl_stmt|;
name|Txn
name|txn
init|=
literal|null
decl_stmt|;
try|try
block|{
comment|//collection
if|if
condition|(
name|uri
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Resource not found: "
operator|+
name|uri
argument_list|)
throw|;
block|}
comment|//resource
block|}
else|else
block|{
name|resource
operator|=
name|broker
operator|.
name|getXMLResource
argument_list|(
name|uri
argument_list|,
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
if|if
condition|(
name|resource
operator|==
literal|null
condition|)
block|{
comment|//may be, it's collection ... checking ...
name|collection
operator|=
name|broker
operator|.
name|getCollection
argument_list|(
name|uri
argument_list|)
expr_stmt|;
if|if
condition|(
name|collection
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|IOException
argument_list|(
literal|"Resource not found: "
operator|+
name|uri
argument_list|)
throw|;
block|}
name|txn
operator|=
name|tm
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|method
operator|.
name|modify
argument_list|(
name|collection
argument_list|)
expr_stmt|;
name|broker
operator|.
name|saveCollection
argument_list|(
name|txn
argument_list|,
name|collection
argument_list|)
expr_stmt|;
name|tm
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|collection
operator|=
name|resource
operator|.
name|getCollection
argument_list|()
expr_stmt|;
name|txn
operator|=
name|tm
operator|.
name|beginTransaction
argument_list|()
expr_stmt|;
name|method
operator|.
name|modify
argument_list|(
name|resource
argument_list|)
expr_stmt|;
name|broker
operator|.
name|storeMetadata
argument_list|(
name|txn
argument_list|,
name|resource
argument_list|)
expr_stmt|;
name|tm
operator|.
name|commit
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
block|}
block|}
catch|catch
parameter_list|(
specifier|final
name|IOException
name|e
parameter_list|)
block|{
if|if
condition|(
name|txn
operator|!=
literal|null
condition|)
block|{
name|tm
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
throw|throw
name|e
throw|;
block|}
catch|catch
parameter_list|(
specifier|final
name|Exception
name|e
parameter_list|)
block|{
if|if
condition|(
name|txn
operator|!=
literal|null
condition|)
block|{
name|tm
operator|.
name|abort
argument_list|(
name|txn
argument_list|)
expr_stmt|;
block|}
throw|throw
operator|new
name|IOException
argument_list|(
name|e
argument_list|)
throw|;
block|}
finally|finally
block|{
if|if
condition|(
name|resource
operator|!=
literal|null
condition|)
block|{
name|resource
operator|.
name|getUpdateLock
argument_list|()
operator|.
name|release
argument_list|(
name|Lock
operator|.
name|READ_LOCK
argument_list|)
expr_stmt|;
block|}
block|}
block|}
finally|finally
block|{
if|if
condition|(
name|db
operator|!=
literal|null
condition|)
block|{
name|db
operator|.
name|release
argument_list|(
name|broker
argument_list|)
expr_stmt|;
block|}
block|}
name|initialized
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_class

end_unit

