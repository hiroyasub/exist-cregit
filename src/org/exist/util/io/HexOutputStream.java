begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|io
package|;
end_package

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|FilterOutputStream
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|IOException
import|;
end_import

begin_import
import|import
name|java
operator|.
name|io
operator|.
name|OutputStream
import|;
end_import

begin_import
import|import
name|org
operator|.
name|apache
operator|.
name|commons
operator|.
name|codec
operator|.
name|binary
operator|.
name|Hex
import|;
end_import

begin_comment
comment|/**  * Based on org.apache.commons.codec.binary.Base64OutputStream  *  * @author Adam Retter<adam@existsolutions.com>  */
end_comment

begin_class
specifier|public
class|class
name|HexOutputStream
extends|extends
name|FilterOutputStream
block|{
specifier|private
specifier|final
name|Hex
name|hex
init|=
operator|new
name|Hex
argument_list|()
decl_stmt|;
comment|/**      * Creates a HexOutputStream such that all data written is Hex-encoded to the original provided OutputStream.      *      * @param out      *            OutputStream to wrap.      */
specifier|public
name|HexOutputStream
parameter_list|(
name|OutputStream
name|out
parameter_list|)
block|{
name|super
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes the specified<code>byte</code> to this output stream.      *      * @param i      *            source byte      * @throws IOException      *             if an I/O error occurs.      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|int
name|i
parameter_list|)
throws|throws
name|IOException
block|{
name|byte
name|singleByte
index|[]
init|=
operator|new
name|byte
index|[]
block|{
operator|(
name|byte
operator|)
name|i
block|}
decl_stmt|;
name|write
argument_list|(
name|singleByte
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|/**      * Writes<code>len</code> bytes from the specified<code>b</code> array starting at<code>offset</code> to this      * output stream.      *      * @param b      *            source byte array      * @param offset      *            where to start reading the bytes      * @param len      *            maximum number of bytes to write      *      * @throws IOException      *             if an I/O error occurs.      * @throws NullPointerException      *             if the byte array parameter is null      * @throws IndexOutOfBoundsException      *             if offset, len or buffer size are invalid      */
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
name|b
index|[]
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|len
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
if|else if
condition|(
name|offset
operator|<
literal|0
operator|||
name|len
operator|<
literal|0
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|else if
condition|(
name|offset
operator|>
name|b
operator|.
name|length
operator|||
name|offset
operator|+
name|len
operator|>
name|b
operator|.
name|length
condition|)
block|{
throw|throw
operator|new
name|IndexOutOfBoundsException
argument_list|()
throw|;
block|}
if|else if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|byte
name|data
index|[]
init|=
operator|new
name|byte
index|[
name|len
index|]
decl_stmt|;
name|System
operator|.
name|arraycopy
argument_list|(
name|b
argument_list|,
name|offset
argument_list|,
name|data
argument_list|,
literal|0
argument_list|,
name|len
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
block|}
block|}
annotation|@
name|Override
specifier|public
name|void
name|write
parameter_list|(
name|byte
index|[]
name|b
parameter_list|)
throws|throws
name|IOException
block|{
if|if
condition|(
name|b
operator|==
literal|null
condition|)
block|{
throw|throw
operator|new
name|NullPointerException
argument_list|()
throw|;
block|}
name|super
operator|.
name|write
argument_list|(
name|hex
operator|.
name|encode
argument_list|(
name|b
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_class

end_unit

