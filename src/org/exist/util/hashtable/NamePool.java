begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-2010 The eXist Project  *  http://exist-db.org  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentHashMap
import|;
end_import

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|concurrent
operator|.
name|ConcurrentMap
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|dom
operator|.
name|QName
import|;
end_import

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|xquery
operator|.
name|Constants
import|;
end_import

begin_comment
comment|/**  * @author Pieter Deelen  */
end_comment

begin_class
specifier|public
class|class
name|NamePool
block|{
specifier|private
name|ConcurrentMap
argument_list|<
name|WrappedQName
argument_list|,
name|QName
argument_list|>
name|pool
decl_stmt|;
specifier|public
name|NamePool
parameter_list|()
block|{
name|pool
operator|=
operator|new
name|ConcurrentHashMap
argument_list|<
name|WrappedQName
argument_list|,
name|QName
argument_list|>
argument_list|()
expr_stmt|;
block|}
specifier|public
name|QName
name|getSharedName
parameter_list|(
name|QName
name|name
parameter_list|)
block|{
specifier|final
name|WrappedQName
name|wrapped
init|=
operator|new
name|WrappedQName
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|final
name|QName
name|sharedName
init|=
name|pool
operator|.
name|putIfAbsent
argument_list|(
name|wrapped
argument_list|,
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|sharedName
operator|==
literal|null
condition|)
block|{
comment|// The name was not in the pool, return the name just added.
return|return
name|name
return|;
block|}
else|else
block|{
comment|// The name was in the pool, return the shared name.
return|return
name|sharedName
return|;
block|}
block|}
comment|/**      * QName ignores nameType and prefix when testing for equality.      * Wrap it to overwrite those methods.      */
specifier|private
specifier|static
class|class
name|WrappedQName
implements|implements
name|Comparable
argument_list|<
name|WrappedQName
argument_list|>
block|{
specifier|private
name|QName
name|qname
init|=
literal|null
decl_stmt|;
specifier|public
name|WrappedQName
parameter_list|(
specifier|final
name|QName
name|qname
parameter_list|)
block|{
name|this
operator|.
name|qname
operator|=
name|qname
expr_stmt|;
block|}
annotation|@
name|Override
specifier|public
name|int
name|compareTo
parameter_list|(
name|WrappedQName
name|other
parameter_list|)
block|{
if|if
condition|(
name|qname
operator|.
name|getNameType
argument_list|()
operator|!=
name|other
operator|.
name|qname
operator|.
name|getNameType
argument_list|()
condition|)
block|{
return|return
name|qname
operator|.
name|getNameType
argument_list|()
operator|<
name|other
operator|.
name|qname
operator|.
name|getNameType
argument_list|()
condition|?
name|Constants
operator|.
name|INFERIOR
else|:
name|Constants
operator|.
name|SUPERIOR
return|;
block|}
name|int
name|c
decl_stmt|;
if|if
condition|(
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c
operator|=
name|other
operator|.
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|?
name|Constants
operator|.
name|EQUAL
else|:
name|Constants
operator|.
name|INFERIOR
expr_stmt|;
block|}
if|else if
condition|(
name|other
operator|.
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|==
literal|null
condition|)
block|{
name|c
operator|=
name|Constants
operator|.
name|SUPERIOR
expr_stmt|;
block|}
else|else
block|{
name|c
operator|=
name|other
operator|.
name|qname
operator|.
name|getNamespaceURI
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|qname
operator|.
name|getNamespaceURI
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|c
operator|==
name|Constants
operator|.
name|EQUAL
condition|?
name|qname
operator|.
name|getLocalPart
argument_list|()
operator|.
name|compareTo
argument_list|(
name|other
operator|.
name|qname
operator|.
name|getLocalPart
argument_list|()
argument_list|)
else|:
name|c
return|;
block|}
annotation|@
name|Override
specifier|public
name|boolean
name|equals
parameter_list|(
name|Object
name|obj
parameter_list|)
block|{
if|if
condition|(
name|obj
operator|==
literal|null
operator|||
operator|!
operator|(
name|obj
operator|instanceof
name|WrappedQName
operator|)
condition|)
block|{
return|return
literal|false
return|;
block|}
specifier|final
name|WrappedQName
name|other
init|=
operator|(
name|WrappedQName
operator|)
name|obj
decl_stmt|;
specifier|final
name|int
name|cmp
init|=
name|compareTo
argument_list|(
name|other
argument_list|)
decl_stmt|;
if|if
condition|(
name|cmp
operator|!=
literal|0
condition|)
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|qname
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
name|other
operator|.
name|qname
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
return|;
block|}
if|else if
condition|(
name|other
operator|.
name|qname
operator|.
name|getPrefix
argument_list|()
operator|==
literal|null
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|qname
operator|.
name|getPrefix
argument_list|()
operator|.
name|equals
argument_list|(
name|other
operator|.
name|qname
operator|.
name|getPrefix
argument_list|()
argument_list|)
return|;
block|}
block|}
block|}
block|}
end_class

end_unit

