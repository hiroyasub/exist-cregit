begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2001-06 Wolfgang M. Meier  *  wolfgang@exist-db.org  *  http://exist.sourceforge.net  *    *  This program is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Lesser General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *    *  This program is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Lesser General Public License for more details.  *    *  You should have received a copy of the GNU Lesser General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  *    *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
package|;
end_package

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_comment
comment|/**  * Abstract base class for all hashtable implementations.  *   * @author Stephan KÃ¶rnig  * @author Wolfgang Meier  */
end_comment

begin_class
specifier|public
specifier|abstract
class|class
name|AbstractHashtable
parameter_list|<
name|K
parameter_list|,
name|V
parameter_list|>
block|{
specifier|private
specifier|final
name|int
name|defaultSize
init|=
literal|1031
decl_stmt|;
comment|// must be a prime number
comment|// marker for removed objects
specifier|protected
specifier|final
specifier|static
name|Object
name|REMOVED
init|=
operator|new
name|Object
argument_list|()
decl_stmt|;
specifier|protected
name|int
name|tabSize
decl_stmt|;
specifier|protected
name|int
name|items
decl_stmt|;
specifier|protected
name|int
name|maxRehash
init|=
literal|0
decl_stmt|;
comment|/** 	 * Create a new hashtable with default size (1031). 	 */
specifier|protected
name|AbstractHashtable
parameter_list|()
block|{
name|items
operator|=
literal|0
expr_stmt|;
name|tabSize
operator|=
name|defaultSize
expr_stmt|;
block|}
comment|/** 	 * Create a new hashtable using the specified size. 	 *  	 * The actual size will be next prime number following 	 * iSize * 1.5. 	 *  	 * @param iSize 	 */
specifier|protected
name|AbstractHashtable
parameter_list|(
name|int
name|iSize
parameter_list|)
block|{
name|items
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|iSize
operator|<
literal|1
condition|)
name|tabSize
operator|=
name|defaultSize
expr_stmt|;
else|else
block|{
if|if
condition|(
operator|!
name|isPrime
argument_list|(
name|iSize
argument_list|)
condition|)
block|{
name|iSize
operator|=
operator|(
name|iSize
operator|*
literal|3
operator|)
operator|/
literal|2
expr_stmt|;
name|iSize
operator|=
operator|(
name|int
operator|)
name|nextPrime
argument_list|(
operator|(
name|long
operator|)
name|iSize
argument_list|)
expr_stmt|;
block|}
name|tabSize
operator|=
name|iSize
expr_stmt|;
block|}
block|}
specifier|public
name|int
name|size
parameter_list|()
block|{
return|return
name|items
return|;
block|}
specifier|public
specifier|abstract
name|Iterator
argument_list|<
name|K
argument_list|>
name|iterator
parameter_list|()
function_decl|;
specifier|public
specifier|abstract
name|Iterator
argument_list|<
name|V
argument_list|>
name|valueIterator
parameter_list|()
function_decl|;
specifier|public
specifier|final
specifier|static
name|boolean
name|isPrime
parameter_list|(
name|long
name|number
parameter_list|)
block|{
if|if
condition|(
name|number
operator|<
literal|2
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|number
operator|==
literal|2
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|number
operator|%
literal|2
operator|==
literal|0
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|number
operator|==
literal|3
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|number
operator|%
literal|3
operator|==
literal|0
condition|)
return|return
literal|false
return|;
name|int
name|y
init|=
literal|2
decl_stmt|;
name|int
name|x
init|=
operator|(
name|int
operator|)
name|Math
operator|.
name|sqrt
argument_list|(
name|number
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|5
init|;
name|i
operator|<=
name|x
condition|;
name|i
operator|+=
name|y
operator|,
name|y
operator|=
literal|6
operator|-
name|y
control|)
block|{
if|if
condition|(
name|number
operator|%
name|i
operator|==
literal|0
condition|)
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
specifier|public
specifier|final
specifier|static
name|long
name|nextPrime
parameter_list|(
name|long
name|iVal
parameter_list|)
block|{
name|long
name|retval
init|=
name|iVal
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
operator|++
name|retval
expr_stmt|;
if|if
condition|(
name|isPrime
argument_list|(
name|retval
argument_list|)
condition|)
return|return
name|retval
return|;
block|}
block|}
specifier|public
name|int
name|getMaxRehash
parameter_list|()
block|{
return|return
name|maxRehash
return|;
block|}
specifier|protected
specifier|abstract
class|class
name|HashtableIterator
implements|implements
name|Iterator
block|{
specifier|public
specifier|final
specifier|static
name|int
name|KEYS
init|=
literal|0
decl_stmt|;
specifier|public
specifier|final
specifier|static
name|int
name|VALUES
init|=
literal|1
decl_stmt|;
name|int
name|returnType
init|=
name|KEYS
decl_stmt|;
specifier|public
name|HashtableIterator
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|this
operator|.
name|returnType
operator|=
name|type
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		 * @see java.util.Iterator#remove() 		 */
specifier|public
name|void
name|remove
parameter_list|()
block|{
throw|throw
operator|new
name|UnsupportedOperationException
argument_list|()
throw|;
block|}
block|}
specifier|protected
specifier|final
specifier|static
class|class
name|HashtableOverflowException
extends|extends
name|Exception
block|{
comment|/** 		 *  		 */
specifier|private
specifier|static
specifier|final
name|long
name|serialVersionUID
init|=
literal|5786963685159736475L
decl_stmt|;
specifier|public
name|HashtableOverflowException
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

