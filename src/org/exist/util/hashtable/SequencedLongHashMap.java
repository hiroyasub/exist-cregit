begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_comment
comment|/*  *  eXist Open Source Native XML Database  *  Copyright (C) 2000-04,  Wolfgang M. Meier (wolfgang@exist-db.org)  *  *  This library is free software; you can redistribute it and/or  *  modify it under the terms of the GNU Library General Public License  *  as published by the Free Software Foundation; either version 2  *  of the License, or (at your option) any later version.  *  *  This library is distributed in the hope that it will be useful,  *  but WITHOUT ANY WARRANTY; without even the implied warranty of  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the  *  GNU Library General Public License for more details.  *  *  You should have received a copy of the GNU General Public License  *  along with this program; if not, write to the Free Software  *  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.  *   *  $Id$  */
end_comment

begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|hashtable
package|;
end_package

begin_comment
comment|/**  * A hash map additionally providing access to entries in the order in which   * they were added. All entries are kept in a linked list.   *   * If a duplicate entry is added, the old entry is removed from the list and appended to the end. The  * map thus implements a "Last Recently Used" behaviour.  */
end_comment

begin_import
import|import
name|java
operator|.
name|util
operator|.
name|Iterator
import|;
end_import

begin_class
specifier|public
class|class
name|SequencedLongHashMap
extends|extends
name|Long2ObjectHashMap
block|{
specifier|public
specifier|final
specifier|static
class|class
name|Entry
block|{
name|long
name|key
decl_stmt|;
name|Object
name|value
decl_stmt|;
name|Entry
name|next
init|=
literal|null
decl_stmt|;
name|Entry
name|prev
init|=
literal|null
decl_stmt|;
specifier|public
name|Entry
parameter_list|(
name|long
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|this
operator|.
name|key
operator|=
name|key
expr_stmt|;
name|this
operator|.
name|value
operator|=
name|value
expr_stmt|;
block|}
specifier|public
name|Entry
name|getNext
parameter_list|()
block|{
return|return
name|next
return|;
block|}
specifier|public
name|long
name|getKey
parameter_list|()
block|{
return|return
name|key
return|;
block|}
specifier|public
name|Object
name|getValue
parameter_list|()
block|{
return|return
name|value
return|;
block|}
block|}
specifier|private
name|Entry
name|first
init|=
literal|null
decl_stmt|;
specifier|private
name|Entry
name|last
init|=
literal|null
decl_stmt|;
specifier|public
name|SequencedLongHashMap
parameter_list|()
block|{
name|super
argument_list|()
expr_stmt|;
block|}
specifier|public
name|SequencedLongHashMap
parameter_list|(
name|int
name|iSize
parameter_list|)
block|{
name|super
argument_list|(
name|iSize
argument_list|)
expr_stmt|;
block|}
specifier|public
name|void
name|put
parameter_list|(
name|long
name|key
parameter_list|,
name|Object
name|value
parameter_list|)
block|{
name|Entry
name|entry
init|=
operator|new
name|Entry
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
decl_stmt|;
name|Entry
name|duplicate
init|=
literal|null
decl_stmt|;
try|try
block|{
name|Object
name|old
init|=
name|insert
argument_list|(
name|key
argument_list|,
name|entry
argument_list|)
decl_stmt|;
if|if
condition|(
name|old
operator|!=
literal|null
operator|&&
operator|!
operator|(
name|old
operator|instanceof
name|Entry
operator|)
condition|)
throw|throw
operator|new
name|RuntimeException
argument_list|(
literal|"Found old object: "
operator|+
name|old
operator|.
name|getClass
argument_list|()
operator|.
name|getName
argument_list|()
argument_list|)
throw|;
name|duplicate
operator|=
operator|(
name|Entry
operator|)
name|old
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|HashtableOverflowException
name|e
parameter_list|)
block|{
throw|throw
operator|new
name|RuntimeException
argument_list|(
name|e
argument_list|)
throw|;
comment|//			long[] copyKeys = keys;
comment|//			Object[] copyValues = values;
comment|//			// enlarge the table with a prime value
comment|//			tabSize = (int) nextPrime(tabSize + tabSize / 2);
comment|//			keys = new long[tabSize];
comment|//			values = new Object[tabSize];
comment|//			items = 0;
comment|//
comment|//			try {
comment|//				for (int k = 0; k< copyValues.length; k++) {
comment|//					if (copyValues[k] != null&& copyValues[k] != REMOVED)
comment|//						insert(copyKeys[k], copyValues[k]);
comment|//				}
comment|//				duplicate = (Entry)insert(key, entry);
comment|//			} catch (HashtableOverflowException e1) {
comment|//			}
block|}
if|if
condition|(
name|duplicate
operator|!=
literal|null
condition|)
name|removeEntry
argument_list|(
name|duplicate
argument_list|)
expr_stmt|;
if|if
condition|(
name|first
operator|==
literal|null
condition|)
block|{
name|first
operator|=
name|entry
expr_stmt|;
name|last
operator|=
name|first
expr_stmt|;
block|}
else|else
block|{
name|last
operator|.
name|next
operator|=
name|entry
expr_stmt|;
name|entry
operator|.
name|prev
operator|=
name|last
expr_stmt|;
name|last
operator|=
name|entry
expr_stmt|;
block|}
block|}
specifier|public
name|Object
name|get
parameter_list|(
name|long
name|key
parameter_list|)
block|{
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|super
operator|.
name|get
argument_list|(
name|key
argument_list|)
decl_stmt|;
return|return
name|entry
operator|==
literal|null
condition|?
literal|null
else|:
name|entry
operator|.
name|value
return|;
block|}
specifier|public
name|Entry
name|getFirstEntry
parameter_list|()
block|{
return|return
name|first
return|;
block|}
specifier|public
name|Object
name|remove
parameter_list|(
name|long
name|key
parameter_list|)
block|{
name|Entry
name|entry
init|=
operator|(
name|Entry
operator|)
name|super
operator|.
name|remove
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|entry
operator|!=
literal|null
condition|)
block|{
name|removeEntry
argument_list|(
name|entry
argument_list|)
expr_stmt|;
return|return
name|entry
operator|.
name|value
return|;
block|}
else|else
return|return
literal|null
return|;
block|}
comment|/** 	 * Remove the first entry added to the map. 	 *  	 * @return 	 */
specifier|public
name|Object
name|removeFirst
parameter_list|()
block|{
if|if
condition|(
name|first
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|super
operator|.
name|remove
argument_list|(
name|first
operator|.
name|key
argument_list|)
expr_stmt|;
name|Entry
name|head
init|=
name|first
decl_stmt|;
name|first
operator|=
name|head
operator|.
name|next
expr_stmt|;
if|if
condition|(
name|head
operator|!=
literal|null
condition|)
name|head
operator|.
name|prev
operator|=
literal|null
expr_stmt|;
return|return
name|head
operator|.
name|value
return|;
block|}
specifier|public
name|void
name|removeEntry
parameter_list|(
name|Entry
name|entry
parameter_list|)
block|{
if|if
condition|(
name|entry
operator|.
name|prev
operator|==
literal|null
condition|)
block|{
if|if
condition|(
name|entry
operator|.
name|next
operator|==
literal|null
condition|)
block|{
name|first
operator|=
literal|null
expr_stmt|;
name|last
operator|=
literal|null
expr_stmt|;
block|}
else|else
block|{
name|entry
operator|.
name|next
operator|.
name|prev
operator|=
literal|null
expr_stmt|;
name|first
operator|=
name|entry
operator|.
name|next
expr_stmt|;
block|}
block|}
else|else
block|{
name|entry
operator|.
name|prev
operator|.
name|next
operator|=
name|entry
operator|.
name|next
expr_stmt|;
if|if
condition|(
name|entry
operator|.
name|next
operator|==
literal|null
condition|)
name|last
operator|=
name|entry
operator|.
name|prev
expr_stmt|;
else|else
name|entry
operator|.
name|next
operator|.
name|prev
operator|=
name|entry
operator|.
name|prev
expr_stmt|;
block|}
block|}
comment|/** 	 * Returns an iterator over all entries in the 	 * order in which they were inserted. 	 */
specifier|public
name|Iterator
name|iterator
parameter_list|()
block|{
return|return
operator|new
name|SequencedLongIterator
argument_list|(
name|Long2ObjectIterator
operator|.
name|KEYS
argument_list|)
return|;
block|}
specifier|public
name|Iterator
name|valueIterator
parameter_list|()
block|{
return|return
operator|new
name|SequencedLongIterator
argument_list|(
name|Long2ObjectIterator
operator|.
name|VALUES
argument_list|)
return|;
block|}
specifier|protected
class|class
name|SequencedLongIterator
extends|extends
name|HashtableIterator
block|{
specifier|private
name|Entry
name|current
decl_stmt|;
specifier|public
name|SequencedLongIterator
parameter_list|(
name|int
name|type
parameter_list|)
block|{
name|super
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|current
operator|=
name|first
expr_stmt|;
block|}
comment|/* (non-Javadoc) 		 * @see java.util.Iterator#hasNext() 		 */
specifier|public
name|boolean
name|hasNext
parameter_list|()
block|{
return|return
name|current
operator|!=
literal|null
return|;
block|}
comment|/* (non-Javadoc) 		 * @see org.exist.util.hashtable.Long2ObjectHashMap.Long2ObjectIterator#next() 		 */
specifier|public
name|Object
name|next
parameter_list|()
block|{
if|if
condition|(
name|current
operator|==
literal|null
condition|)
return|return
literal|null
return|;
name|Entry
name|next
init|=
name|current
decl_stmt|;
name|current
operator|=
name|current
operator|.
name|next
expr_stmt|;
if|if
condition|(
name|returnType
operator|==
name|VALUES
condition|)
block|{
return|return
name|next
operator|.
name|value
return|;
block|}
else|else
return|return
operator|new
name|Long
argument_list|(
name|next
operator|.
name|key
argument_list|)
return|;
block|}
block|}
block|}
end_class

end_unit

