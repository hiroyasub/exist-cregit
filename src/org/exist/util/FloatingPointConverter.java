begin_unit|revision:1.0.0;language:Java;cregit-version:0.0.1
begin_package
package|package
name|org
operator|.
name|exist
operator|.
name|util
package|;
end_package

begin_import
import|import
name|org
operator|.
name|exist
operator|.
name|util
operator|.
name|FastStringBuffer
import|;
end_import

begin_comment
comment|/**  * This class is derived from AppenderHelper by Jack Shirazi in the O'Reilly book  * Java Performance Tuning. It is used in Saxon for conversion of doubles and floats  * to strings, adapted to follow the XPath rules.  *<p/>  * The AppenderHelper class works around several inefficencies  * in the Java distribution.  *<p/>  * The following items really need to be added to Java to eliminate  * the use of AppenderHelper:  *<ul>  *<li>Object needs the method<code>appendTo(StringBuffer,int)</code>  *<li>The classes in the Java distribution need to improve their conversions to Strings  *</ul>  * (As an aside, there should really be an<code>Appender</code> interface, which  * StringBuffer implements with all the<code>append</code> methods defined.)  *<p/>  * Instead, AppenderHelper supports the efficient appending of object's string  * representation to a StringBuffer. Basically this means that all the basic  * data types have their own conversion algorithms in this class which are  * considerably more efficient than the Java ones (except char which, of course,  * doesn't need conversion) and, in addition, several classes also have  * specialized conversion algorithms.  *<p/>  * In addition, the whole thing is fully extensible (though I would prefer that  * it were made redundant by correct implementations in Java).  *<p/>  * As an example  *<pre>  * StringBuffer s = new StringBuffer();  * s.append(567);  *</pre>  * maps to  *<pre>  * StringBuffer s = new StringBuffer();  * AppenderHelper a = AppenderHelper.SINGLETON;  * a.append(s,567);  *</pre>  * The difference is that in the first StringBuffer append, the StringBuffer  * append first asks Integer to convert the int 567 into a String. This conversion  * is not very efficient, and apart from being not as fast as it could be, also  * creates another temporary StringBuffer during the conversion (which in turn creates  * another internal char array). So for appending one int to the StringBuffer  * we get three temporary objects, the space they use, and a not particularly  * optimized conversion algorithm.  *<p/>  * On the other hand, in the second AppenderHelper example, we create no extra  * objects at all, and use an optimized conversion algorithm. Which means that even  * though we have to call the StringBuffer append(char) lots of times, it is  * still faster and uses less resources from the VM (and yes, the two are related,  * one reason it is faster is because it uses less VM resources).  *<p/>  * The easisest way to add support for using AppenderHelper with classes  * you have control over is to implement the Appendable interface.  *<p/>  * For classes you do not control, you need to implement an AppendConverter  * class, and register it with the AppenderHelper.  *<p/>  * But NOTE that if you do not need efficient conversion of objects (because  * you do not do much StringBuffer appending, or it happens in a part of the  * application that has plenty of spare time and resources), then there is no  * need to change the way you do things at the moment.  *<p/>  * AppenderHelper can be used in a very similar way to StringBuffer, e.g.  *<pre>  * StringBuffer s = new StringBuffer();  * AppenderHelper a = AppenderHelper.SINGLETON;  * a.append(s,567).append(s," is ").append(s,33.5).append(s,'%');  *</pre>  * and there is also a StringBufferWrapper class if you are feeling really lazy.  *<p/>  * All data type conversions are specifically optimized by AppenderHelper.  * In addition, the classes specifically optimized by AppenderHelper (and so  * which do not need AppendConverter classes for them) are: all the classes  * coresponding to the basic datatypes (e.g. Integer, etc.); Object; java.util.Vector.  *<p/>  * Note however that subclasses of these types are not specially optimized unless  * the correct overloaded append method is called, i.e. if java.util.Stack were not  * registered (which it is) then  *<pre>  * StringBuffer s = new StringBuffer();  * AppenderHelper a = AppenderHelper.SINGLETON;  * java.util.Stack stack = new java.util.Stack();  * a.append(s,stack);  *</pre>  *<em>would</em> be optimized because that calls the  *<code>AppenderHelper.append(StringBuffer,java.util.Vector)</code> method, but  *<pre>  * StringBuffer s = new StringBuffer();  * AppenderHelper a = AppenderHelper.SINGLETON;  * java.util.Stack stack = new java.util.Stack();  * a.append(s,(Object) stack);  *</pre>  * would<em>not</em> be optimized because that calls the  *<code>AppenderHelper.append(StringBuffer,Object)</code> method, which  * requires the passed object's class to be registered for the correct AppendConverter  * to be used.  *<p/>  * AppenderHelper is an application (i.e. has a runnable<code>main</code> method)  * which can be run to see examples of the improvements it brings.  *  */
end_comment

begin_class
specifier|public
class|class
name|FloatingPointConverter
block|{
specifier|public
specifier|static
name|FloatingPointConverter
name|THE_INSTANCE
init|=
operator|new
name|FloatingPointConverter
argument_list|()
decl_stmt|;
comment|/**      * char array holding the characters for the string "-Infinity".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|NEGATIVE_INFINITY
init|=
block|{
literal|'-'
block|,
literal|'I'
block|,
literal|'N'
block|,
literal|'F'
block|}
decl_stmt|;
comment|/**      * char array holding the characters for the string "Infinity".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|POSITIVE_INFINITY
init|=
block|{
literal|'I'
block|,
literal|'N'
block|,
literal|'F'
block|}
decl_stmt|;
comment|/**      * char array holding the characters for the string "NaN".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|NaN
init|=
block|{
literal|'N'
block|,
literal|'a'
block|,
literal|'N'
block|}
decl_stmt|;
comment|/**      * char array holding the characters for the string "0.0".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DOUBLE_ZERO
init|=
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'0'
block|}
decl_stmt|;
comment|/**      * char array holding the characters for the string "0.00".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DOUBLE_ZERO2
init|=
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'0'
block|,
literal|'0'
block|}
decl_stmt|;
comment|/**      * char array holding the characters for the string "0.000".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DOUBLE_ZERO3
init|=
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
decl_stmt|;
comment|/**      * char array holding the characters for the string "0.0000".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DOUBLE_ZERO4
init|=
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
decl_stmt|;
comment|/**      * char array holding the characters for the string "0.00000".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DOUBLE_ZERO5
init|=
block|{
literal|'0'
block|,
literal|'.'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
decl_stmt|;
comment|/**      * char array holding the characters for the string "0.".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DOUBLE_ZERO0
init|=
block|{
literal|'0'
block|,
literal|'.'
block|}
decl_stmt|;
comment|/**      * char array holding the characters for the string ".0".      */
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|DOT_ZERO
init|=
block|{
literal|'.'
block|,
literal|'0'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|doubleSignMask
init|=
literal|0x8000000000000000L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|long
name|doubleExpMask
init|=
literal|0x7ff0000000000000L
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|doubleExpShift
init|=
literal|52
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|doubleExpBias
init|=
literal|1023
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|floatSignMask
init|=
literal|0x80000000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|floatExpMask
init|=
literal|0x7f800000
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|floatExpShift
init|=
literal|23
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|int
name|floatExpBias
init|=
literal|127
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|char
index|[]
name|charForDigit
init|=
block|{
literal|'0'
block|,
literal|'1'
block|,
literal|'2'
block|,
literal|'3'
block|,
literal|'4'
block|,
literal|'5'
block|,
literal|'6'
block|,
literal|'7'
block|,
literal|'8'
block|,
literal|'9'
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|float
index|[]
name|f_magnitudes
init|=
block|{
literal|1e-44F
block|,
literal|1e-43F
block|,
literal|1e-42F
block|,
literal|1e-41F
block|,
literal|1e-40F
block|,
literal|1e-39F
block|,
literal|1e-38F
block|,
literal|1e-37F
block|,
literal|1e-36F
block|,
literal|1e-35F
block|,
literal|1e-34F
block|,
literal|1e-33F
block|,
literal|1e-32F
block|,
literal|1e-31F
block|,
literal|1e-30F
block|,
literal|1e-29F
block|,
literal|1e-28F
block|,
literal|1e-27F
block|,
literal|1e-26F
block|,
literal|1e-25F
block|,
literal|1e-24F
block|,
literal|1e-23F
block|,
literal|1e-22F
block|,
literal|1e-21F
block|,
literal|1e-20F
block|,
literal|1e-19F
block|,
literal|1e-18F
block|,
literal|1e-17F
block|,
literal|1e-16F
block|,
literal|1e-15F
block|,
literal|1e-14F
block|,
literal|1e-13F
block|,
literal|1e-12F
block|,
literal|1e-11F
block|,
literal|1e-10F
block|,
literal|1e-9F
block|,
literal|1e-8F
block|,
literal|1e-7F
block|,
literal|1e-6F
block|,
literal|1e-5F
block|,
literal|1e-4F
block|,
literal|1e-3F
block|,
literal|1e-2F
block|,
literal|1e-1F
block|,
literal|1e0F
block|,
literal|1e1F
block|,
literal|1e2F
block|,
literal|1e3F
block|,
literal|1e4F
block|,
literal|1e5F
block|,
literal|1e6F
block|,
literal|1e7F
block|,
literal|1e8F
block|,
literal|1e9F
block|,
literal|1e10F
block|,
literal|1e11F
block|,
literal|1e12F
block|,
literal|1e13F
block|,
literal|1e14F
block|,
literal|1e15F
block|,
literal|1e16F
block|,
literal|1e17F
block|,
literal|1e18F
block|,
literal|1e19F
block|,
literal|1e20F
block|,
literal|1e21F
block|,
literal|1e22F
block|,
literal|1e23F
block|,
literal|1e24F
block|,
literal|1e25F
block|,
literal|1e26F
block|,
literal|1e27F
block|,
literal|1e28F
block|,
literal|1e29F
block|,
literal|1e30F
block|,
literal|1e31F
block|,
literal|1e32F
block|,
literal|1e33F
block|,
literal|1e34F
block|,
literal|1e35F
block|,
literal|1e36F
block|,
literal|1e37F
block|,
literal|1e38F
block|}
decl_stmt|;
specifier|private
specifier|static
specifier|final
name|double
index|[]
name|d_magnitudes
init|=
block|{
literal|1e-323D
block|,
literal|1e-322D
block|,
literal|1e-321D
block|,
literal|1e-320D
block|,
literal|1e-319D
block|,
literal|1e-318D
block|,
literal|1e-317D
block|,
literal|1e-316D
block|,
literal|1e-315D
block|,
literal|1e-314D
block|,
literal|1e-313D
block|,
literal|1e-312D
block|,
literal|1e-311D
block|,
literal|1e-310D
block|,
literal|1e-309D
block|,
literal|1e-308D
block|,
literal|1e-307D
block|,
literal|1e-306D
block|,
literal|1e-305D
block|,
literal|1e-304D
block|,
literal|1e-303D
block|,
literal|1e-302D
block|,
literal|1e-301D
block|,
literal|1e-300D
block|,
literal|1e-299D
block|,
literal|1e-298D
block|,
literal|1e-297D
block|,
literal|1e-296D
block|,
literal|1e-295D
block|,
literal|1e-294D
block|,
literal|1e-293D
block|,
literal|1e-292D
block|,
literal|1e-291D
block|,
literal|1e-290D
block|,
literal|1e-289D
block|,
literal|1e-288D
block|,
literal|1e-287D
block|,
literal|1e-286D
block|,
literal|1e-285D
block|,
literal|1e-284D
block|,
literal|1e-283D
block|,
literal|1e-282D
block|,
literal|1e-281D
block|,
literal|1e-280D
block|,
literal|1e-279D
block|,
literal|1e-278D
block|,
literal|1e-277D
block|,
literal|1e-276D
block|,
literal|1e-275D
block|,
literal|1e-274D
block|,
literal|1e-273D
block|,
literal|1e-272D
block|,
literal|1e-271D
block|,
literal|1e-270D
block|,
literal|1e-269D
block|,
literal|1e-268D
block|,
literal|1e-267D
block|,
literal|1e-266D
block|,
literal|1e-265D
block|,
literal|1e-264D
block|,
literal|1e-263D
block|,
literal|1e-262D
block|,
literal|1e-261D
block|,
literal|1e-260D
block|,
literal|1e-259D
block|,
literal|1e-258D
block|,
literal|1e-257D
block|,
literal|1e-256D
block|,
literal|1e-255D
block|,
literal|1e-254D
block|,
literal|1e-253D
block|,
literal|1e-252D
block|,
literal|1e-251D
block|,
literal|1e-250D
block|,
literal|1e-249D
block|,
literal|1e-248D
block|,
literal|1e-247D
block|,
literal|1e-246D
block|,
literal|1e-245D
block|,
literal|1e-244D
block|,
literal|1e-243D
block|,
literal|1e-242D
block|,
literal|1e-241D
block|,
literal|1e-240D
block|,
literal|1e-239D
block|,
literal|1e-238D
block|,
literal|1e-237D
block|,
literal|1e-236D
block|,
literal|1e-235D
block|,
literal|1e-234D
block|,
literal|1e-233D
block|,
literal|1e-232D
block|,
literal|1e-231D
block|,
literal|1e-230D
block|,
literal|1e-229D
block|,
literal|1e-228D
block|,
literal|1e-227D
block|,
literal|1e-226D
block|,
literal|1e-225D
block|,
literal|1e-224D
block|,
literal|1e-223D
block|,
literal|1e-222D
block|,
literal|1e-221D
block|,
literal|1e-220D
block|,
literal|1e-219D
block|,
literal|1e-218D
block|,
literal|1e-217D
block|,
literal|1e-216D
block|,
literal|1e-215D
block|,
literal|1e-214D
block|,
literal|1e-213D
block|,
literal|1e-212D
block|,
literal|1e-211D
block|,
literal|1e-210D
block|,
literal|1e-209D
block|,
literal|1e-208D
block|,
literal|1e-207D
block|,
literal|1e-206D
block|,
literal|1e-205D
block|,
literal|1e-204D
block|,
literal|1e-203D
block|,
literal|1e-202D
block|,
literal|1e-201D
block|,
literal|1e-200D
block|,
literal|1e-199D
block|,
literal|1e-198D
block|,
literal|1e-197D
block|,
literal|1e-196D
block|,
literal|1e-195D
block|,
literal|1e-194D
block|,
literal|1e-193D
block|,
literal|1e-192D
block|,
literal|1e-191D
block|,
literal|1e-190D
block|,
literal|1e-189D
block|,
literal|1e-188D
block|,
literal|1e-187D
block|,
literal|1e-186D
block|,
literal|1e-185D
block|,
literal|1e-184D
block|,
literal|1e-183D
block|,
literal|1e-182D
block|,
literal|1e-181D
block|,
literal|1e-180D
block|,
literal|1e-179D
block|,
literal|1e-178D
block|,
literal|1e-177D
block|,
literal|1e-176D
block|,
literal|1e-175D
block|,
literal|1e-174D
block|,
literal|1e-173D
block|,
literal|1e-172D
block|,
literal|1e-171D
block|,
literal|1e-170D
block|,
literal|1e-169D
block|,
literal|1e-168D
block|,
literal|1e-167D
block|,
literal|1e-166D
block|,
literal|1e-165D
block|,
literal|1e-164D
block|,
literal|1e-163D
block|,
literal|1e-162D
block|,
literal|1e-161D
block|,
literal|1e-160D
block|,
literal|1e-159D
block|,
literal|1e-158D
block|,
literal|1e-157D
block|,
literal|1e-156D
block|,
literal|1e-155D
block|,
literal|1e-154D
block|,
literal|1e-153D
block|,
literal|1e-152D
block|,
literal|1e-151D
block|,
literal|1e-150D
block|,
literal|1e-149D
block|,
literal|1e-148D
block|,
literal|1e-147D
block|,
literal|1e-146D
block|,
literal|1e-145D
block|,
literal|1e-144D
block|,
literal|1e-143D
block|,
literal|1e-142D
block|,
literal|1e-141D
block|,
literal|1e-140D
block|,
literal|1e-139D
block|,
literal|1e-138D
block|,
literal|1e-137D
block|,
literal|1e-136D
block|,
literal|1e-135D
block|,
literal|1e-134D
block|,
literal|1e-133D
block|,
literal|1e-132D
block|,
literal|1e-131D
block|,
literal|1e-130D
block|,
literal|1e-129D
block|,
literal|1e-128D
block|,
literal|1e-127D
block|,
literal|1e-126D
block|,
literal|1e-125D
block|,
literal|1e-124D
block|,
literal|1e-123D
block|,
literal|1e-122D
block|,
literal|1e-121D
block|,
literal|1e-120D
block|,
literal|1e-119D
block|,
literal|1e-118D
block|,
literal|1e-117D
block|,
literal|1e-116D
block|,
literal|1e-115D
block|,
literal|1e-114D
block|,
literal|1e-113D
block|,
literal|1e-112D
block|,
literal|1e-111D
block|,
literal|1e-110D
block|,
literal|1e-109D
block|,
literal|1e-108D
block|,
literal|1e-107D
block|,
literal|1e-106D
block|,
literal|1e-105D
block|,
literal|1e-104D
block|,
literal|1e-103D
block|,
literal|1e-102D
block|,
literal|1e-101D
block|,
literal|1e-100D
block|,
literal|1e-99D
block|,
literal|1e-98D
block|,
literal|1e-97D
block|,
literal|1e-96D
block|,
literal|1e-95D
block|,
literal|1e-94D
block|,
literal|1e-93D
block|,
literal|1e-92D
block|,
literal|1e-91D
block|,
literal|1e-90D
block|,
literal|1e-89D
block|,
literal|1e-88D
block|,
literal|1e-87D
block|,
literal|1e-86D
block|,
literal|1e-85D
block|,
literal|1e-84D
block|,
literal|1e-83D
block|,
literal|1e-82D
block|,
literal|1e-81D
block|,
literal|1e-80D
block|,
literal|1e-79D
block|,
literal|1e-78D
block|,
literal|1e-77D
block|,
literal|1e-76D
block|,
literal|1e-75D
block|,
literal|1e-74D
block|,
literal|1e-73D
block|,
literal|1e-72D
block|,
literal|1e-71D
block|,
literal|1e-70D
block|,
literal|1e-69D
block|,
literal|1e-68D
block|,
literal|1e-67D
block|,
literal|1e-66D
block|,
literal|1e-65D
block|,
literal|1e-64D
block|,
literal|1e-63D
block|,
literal|1e-62D
block|,
literal|1e-61D
block|,
literal|1e-60D
block|,
literal|1e-59D
block|,
literal|1e-58D
block|,
literal|1e-57D
block|,
literal|1e-56D
block|,
literal|1e-55D
block|,
literal|1e-54D
block|,
literal|1e-53D
block|,
literal|1e-52D
block|,
literal|1e-51D
block|,
literal|1e-50D
block|,
literal|1e-49D
block|,
literal|1e-48D
block|,
literal|1e-47D
block|,
literal|1e-46D
block|,
literal|1e-45D
block|,
literal|1e-44D
block|,
literal|1e-43D
block|,
literal|1e-42D
block|,
literal|1e-41D
block|,
literal|1e-40D
block|,
literal|1e-39D
block|,
literal|1e-38D
block|,
literal|1e-37D
block|,
literal|1e-36D
block|,
literal|1e-35D
block|,
literal|1e-34D
block|,
literal|1e-33D
block|,
literal|1e-32D
block|,
literal|1e-31D
block|,
literal|1e-30D
block|,
literal|1e-29D
block|,
literal|1e-28D
block|,
literal|1e-27D
block|,
literal|1e-26D
block|,
literal|1e-25D
block|,
literal|1e-24D
block|,
literal|1e-23D
block|,
literal|1e-22D
block|,
literal|1e-21D
block|,
literal|1e-20D
block|,
literal|1e-19D
block|,
literal|1e-18D
block|,
literal|1e-17D
block|,
literal|1e-16D
block|,
literal|1e-15D
block|,
literal|1e-14D
block|,
literal|1e-13D
block|,
literal|1e-12D
block|,
literal|1e-11D
block|,
literal|1e-10D
block|,
literal|1e-9D
block|,
literal|1e-8D
block|,
literal|1e-7D
block|,
literal|1e-6D
block|,
literal|1e-5D
block|,
literal|1e-4D
block|,
literal|1e-3D
block|,
literal|1e-2D
block|,
literal|1e-1D
block|,
literal|1e0D
block|,
literal|1e1D
block|,
literal|1e2D
block|,
literal|1e3D
block|,
literal|1e4D
block|,
literal|1e5D
block|,
literal|1e6D
block|,
literal|1e7D
block|,
literal|1e8D
block|,
literal|1e9D
block|,
literal|1e10D
block|,
literal|1e11D
block|,
literal|1e12D
block|,
literal|1e13D
block|,
literal|1e14D
block|,
literal|1e15D
block|,
literal|1e16D
block|,
literal|1e17D
block|,
literal|1e18D
block|,
literal|1e19D
block|,
literal|1e20D
block|,
literal|1e21D
block|,
literal|1e22D
block|,
literal|1e23D
block|,
literal|1e24D
block|,
literal|1e25D
block|,
literal|1e26D
block|,
literal|1e27D
block|,
literal|1e28D
block|,
literal|1e29D
block|,
literal|1e30D
block|,
literal|1e31D
block|,
literal|1e32D
block|,
literal|1e33D
block|,
literal|1e34D
block|,
literal|1e35D
block|,
literal|1e36D
block|,
literal|1e37D
block|,
literal|1e38D
block|,
literal|1e39D
block|,
literal|1e40D
block|,
literal|1e41D
block|,
literal|1e42D
block|,
literal|1e43D
block|,
literal|1e44D
block|,
literal|1e45D
block|,
literal|1e46D
block|,
literal|1e47D
block|,
literal|1e48D
block|,
literal|1e49D
block|,
literal|1e50D
block|,
literal|1e51D
block|,
literal|1e52D
block|,
literal|1e53D
block|,
literal|1e54D
block|,
literal|1e55D
block|,
literal|1e56D
block|,
literal|1e57D
block|,
literal|1e58D
block|,
literal|1e59D
block|,
literal|1e60D
block|,
literal|1e61D
block|,
literal|1e62D
block|,
literal|1e63D
block|,
literal|1e64D
block|,
literal|1e65D
block|,
literal|1e66D
block|,
literal|1e67D
block|,
literal|1e68D
block|,
literal|1e69D
block|,
literal|1e70D
block|,
literal|1e71D
block|,
literal|1e72D
block|,
literal|1e73D
block|,
literal|1e74D
block|,
literal|1e75D
block|,
literal|1e76D
block|,
literal|1e77D
block|,
literal|1e78D
block|,
literal|1e79D
block|,
literal|1e80D
block|,
literal|1e81D
block|,
literal|1e82D
block|,
literal|1e83D
block|,
literal|1e84D
block|,
literal|1e85D
block|,
literal|1e86D
block|,
literal|1e87D
block|,
literal|1e88D
block|,
literal|1e89D
block|,
literal|1e90D
block|,
literal|1e91D
block|,
literal|1e92D
block|,
literal|1e93D
block|,
literal|1e94D
block|,
literal|1e95D
block|,
literal|1e96D
block|,
literal|1e97D
block|,
literal|1e98D
block|,
literal|1e99D
block|,
literal|1e100D
block|,
literal|1e101D
block|,
literal|1e102D
block|,
literal|1e103D
block|,
literal|1e104D
block|,
literal|1e105D
block|,
literal|1e106D
block|,
literal|1e107D
block|,
literal|1e108D
block|,
literal|1e109D
block|,
literal|1e110D
block|,
literal|1e111D
block|,
literal|1e112D
block|,
literal|1e113D
block|,
literal|1e114D
block|,
literal|1e115D
block|,
literal|1e116D
block|,
literal|1e117D
block|,
literal|1e118D
block|,
literal|1e119D
block|,
literal|1e120D
block|,
literal|1e121D
block|,
literal|1e122D
block|,
literal|1e123D
block|,
literal|1e124D
block|,
literal|1e125D
block|,
literal|1e126D
block|,
literal|1e127D
block|,
literal|1e128D
block|,
literal|1e129D
block|,
literal|1e130D
block|,
literal|1e131D
block|,
literal|1e132D
block|,
literal|1e133D
block|,
literal|1e134D
block|,
literal|1e135D
block|,
literal|1e136D
block|,
literal|1e137D
block|,
literal|1e138D
block|,
literal|1e139D
block|,
literal|1e140D
block|,
literal|1e141D
block|,
literal|1e142D
block|,
literal|1e143D
block|,
literal|1e144D
block|,
literal|1e145D
block|,
literal|1e146D
block|,
literal|1e147D
block|,
literal|1e148D
block|,
literal|1e149D
block|,
literal|1e150D
block|,
literal|1e151D
block|,
literal|1e152D
block|,
literal|1e153D
block|,
literal|1e154D
block|,
literal|1e155D
block|,
literal|1e156D
block|,
literal|1e157D
block|,
literal|1e158D
block|,
literal|1e159D
block|,
literal|1e160D
block|,
literal|1e161D
block|,
literal|1e162D
block|,
literal|1e163D
block|,
literal|1e164D
block|,
literal|1e165D
block|,
literal|1e166D
block|,
literal|1e167D
block|,
literal|1e168D
block|,
literal|1e169D
block|,
literal|1e170D
block|,
literal|1e171D
block|,
literal|1e172D
block|,
literal|1e173D
block|,
literal|1e174D
block|,
literal|1e175D
block|,
literal|1e176D
block|,
literal|1e177D
block|,
literal|1e178D
block|,
literal|1e179D
block|,
literal|1e180D
block|,
literal|1e181D
block|,
literal|1e182D
block|,
literal|1e183D
block|,
literal|1e184D
block|,
literal|1e185D
block|,
literal|1e186D
block|,
literal|1e187D
block|,
literal|1e188D
block|,
literal|1e189D
block|,
literal|1e190D
block|,
literal|1e191D
block|,
literal|1e192D
block|,
literal|1e193D
block|,
literal|1e194D
block|,
literal|1e195D
block|,
literal|1e196D
block|,
literal|1e197D
block|,
literal|1e198D
block|,
literal|1e199D
block|,
literal|1e200D
block|,
literal|1e201D
block|,
literal|1e202D
block|,
literal|1e203D
block|,
literal|1e204D
block|,
literal|1e205D
block|,
literal|1e206D
block|,
literal|1e207D
block|,
literal|1e208D
block|,
literal|1e209D
block|,
literal|1e210D
block|,
literal|1e211D
block|,
literal|1e212D
block|,
literal|1e213D
block|,
literal|1e214D
block|,
literal|1e215D
block|,
literal|1e216D
block|,
literal|1e217D
block|,
literal|1e218D
block|,
literal|1e219D
block|,
literal|1e220D
block|,
literal|1e221D
block|,
literal|1e222D
block|,
literal|1e223D
block|,
literal|1e224D
block|,
literal|1e225D
block|,
literal|1e226D
block|,
literal|1e227D
block|,
literal|1e228D
block|,
literal|1e229D
block|,
literal|1e230D
block|,
literal|1e231D
block|,
literal|1e232D
block|,
literal|1e233D
block|,
literal|1e234D
block|,
literal|1e235D
block|,
literal|1e236D
block|,
literal|1e237D
block|,
literal|1e238D
block|,
literal|1e239D
block|,
literal|1e240D
block|,
literal|1e241D
block|,
literal|1e242D
block|,
literal|1e243D
block|,
literal|1e244D
block|,
literal|1e245D
block|,
literal|1e246D
block|,
literal|1e247D
block|,
literal|1e248D
block|,
literal|1e249D
block|,
literal|1e250D
block|,
literal|1e251D
block|,
literal|1e252D
block|,
literal|1e253D
block|,
literal|1e254D
block|,
literal|1e255D
block|,
literal|1e256D
block|,
literal|1e257D
block|,
literal|1e258D
block|,
literal|1e259D
block|,
literal|1e260D
block|,
literal|1e261D
block|,
literal|1e262D
block|,
literal|1e263D
block|,
literal|1e264D
block|,
literal|1e265D
block|,
literal|1e266D
block|,
literal|1e267D
block|,
literal|1e268D
block|,
literal|1e269D
block|,
literal|1e270D
block|,
literal|1e271D
block|,
literal|1e272D
block|,
literal|1e273D
block|,
literal|1e274D
block|,
literal|1e275D
block|,
literal|1e276D
block|,
literal|1e277D
block|,
literal|1e278D
block|,
literal|1e279D
block|,
literal|1e280D
block|,
literal|1e281D
block|,
literal|1e282D
block|,
literal|1e283D
block|,
literal|1e284D
block|,
literal|1e285D
block|,
literal|1e286D
block|,
literal|1e287D
block|,
literal|1e288D
block|,
literal|1e289D
block|,
literal|1e290D
block|,
literal|1e291D
block|,
literal|1e292D
block|,
literal|1e293D
block|,
literal|1e294D
block|,
literal|1e295D
block|,
literal|1e296D
block|,
literal|1e297D
block|,
literal|1e298D
block|,
literal|1e299D
block|,
literal|1e300D
block|,
literal|1e301D
block|,
literal|1e302D
block|,
literal|1e303D
block|,
literal|1e304D
block|,
literal|1e305D
block|,
literal|1e306D
block|,
literal|1e307D
block|,
literal|1e308D
block|}
decl_stmt|;
comment|/**      * AppenderHelper is a singleton, so the constructor is private      */
specifier|private
name|FloatingPointConverter
parameter_list|()
block|{
block|}
comment|/**      * Appends the string representation of the      * double argument to the string buffer.      *      * @param s the StringBuffer to append the object to.      * @param value the double to be appended.      * @return the FastStringBuffer      * @see StringBuffer#append(double)      */
specifier|public
name|FastStringBuffer
name|append
parameter_list|(
name|FastStringBuffer
name|s
parameter_list|,
name|double
name|value
parameter_list|)
block|{
name|double
name|d
init|=
name|value
decl_stmt|;
if|if
condition|(
name|d
operator|==
name|Double
operator|.
name|NEGATIVE_INFINITY
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
name|Double
operator|.
name|POSITIVE_INFINITY
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|!=
name|d
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|NaN
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
literal|0.0
condition|)
block|{
if|if
condition|(
operator|(
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|d
argument_list|)
operator|&
name|doubleSignMask
operator|)
operator|!=
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
name|Double
operator|.
name|MAX_VALUE
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"1.7976931348623157E308"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
operator|-
name|Double
operator|.
name|MAX_VALUE
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"-1.7976931348623157E308"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
name|Double
operator|.
name|MIN_VALUE
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"4.9E-324"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
operator|-
name|Double
operator|.
name|MIN_VALUE
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"-4.9E-324"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|d
operator|=
operator|-
name|d
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>=
literal|0.000001
operator|&&
name|d
operator|<
literal|1000000.0
condition|)
block|{
comment|// don't use exponential notation in this range
if|if
condition|(
name|d
operator|<
literal|1
condition|)
block|{
if|if
condition|(
name|d
operator|<
literal|0.00001
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E23
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO5
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|0.0001
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E22
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO4
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|0.001
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E21
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO3
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|0.01
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E20
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO2
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|0.1
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E19
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E18
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO0
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// d>= 1
if|if
condition|(
name|d
operator|<
literal|10
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E17
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|100
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E16
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|1000
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E15
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|10000
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E14
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|100000
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E13
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E12
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// use exponential notation
name|int
name|magnitude
init|=
name|magnitude
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|long
name|i
decl_stmt|;
if|if
condition|(
name|magnitude
operator|<
operator|-
literal|305
condition|)
block|{
name|i
operator|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E18
operator|/
name|d_magnitudes
index|[
name|magnitude
operator|+
literal|324
index|]
operator|)
expr_stmt|;
block|}
else|else
block|{
name|i
operator|=
operator|(
name|long
operator|)
operator|(
name|d
operator|/
name|d_magnitudes
index|[
name|magnitude
operator|+
literal|323
operator|-
literal|17
index|]
operator|)
expr_stmt|;
block|}
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|s
argument_list|,
name|magnitude
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check that the value is OK
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|8
condition|)
block|{
name|double
name|reconstructed
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|reconstructed
condition|)
block|{
name|snapDouble
argument_list|(
name|s
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
if|else if
condition|(
name|value
operator|>
literal|0
condition|?
name|value
operator|<
name|reconstructed
else|:
name|value
operator|>
name|reconstructed
condition|)
block|{
comment|//                System.err.println("*** double " + d + "(" + Double.doubleToLongBits(value) + ")" +
comment|//                    " incorrectly formatted as " + s + "(" + Double.doubleToLongBits(reconstructed) + ")");
name|nudgeDownDouble
argument_list|(
name|s
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|//                System.err.println("*** adjusted to " + s);
return|return
name|s
return|;
block|}
else|else
block|{
comment|//                System.err.println("*** double " + value + "(" + Double.doubleToLongBits(value) + ")" +
comment|//                    " incorrectly formatted as " + s + "(" + Double.doubleToLongBits(reconstructed) + ")");
name|nudgeUpDouble
argument_list|(
name|s
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|//                System.err.println("*** adjusted to " + s);
return|return
name|s
return|;
block|}
block|}
return|return
name|s
return|;
block|}
comment|/**      * Appends the string representation of the      * float argument to the string buffer.      *      * @param s the StringBuffer to append the object to.      * @param value the float to be appended.      * @return this AppenderHelper      * @see StringBuffer#append(float)      */
specifier|public
name|FastStringBuffer
name|append
parameter_list|(
name|FastStringBuffer
name|s
parameter_list|,
name|float
name|value
parameter_list|)
block|{
name|float
name|d
init|=
name|value
decl_stmt|;
if|if
condition|(
name|d
operator|==
name|Float
operator|.
name|NEGATIVE_INFINITY
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|NEGATIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
name|Float
operator|.
name|POSITIVE_INFINITY
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|POSITIVE_INFINITY
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|!=
name|d
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|NaN
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
literal|0.0
condition|)
block|{
if|if
condition|(
operator|(
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|d
argument_list|)
operator|&
name|floatSignMask
operator|)
operator|!=
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
name|Float
operator|.
name|MAX_VALUE
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"3.4028235E38"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
operator|-
name|Float
operator|.
name|MAX_VALUE
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"-3.4028235E38"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
name|Float
operator|.
name|MIN_VALUE
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"1.4E-45"
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|==
operator|-
name|Float
operator|.
name|MIN_VALUE
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|"-1.4E-45"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|d
operator|<
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|d
operator|=
operator|-
name|d
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>=
literal|0.000001F
operator|&&
name|d
operator|<
literal|1000000.0F
condition|)
block|{
if|if
condition|(
name|d
operator|<
literal|1F
condition|)
block|{
if|if
condition|(
name|d
operator|<
literal|0.00001F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E15F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO5
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|0.0001F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E14F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO4
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|0.001F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E13F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO3
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|0.01F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E12F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO2
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|0.1F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E11F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E10F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|DOUBLE_ZERO0
argument_list|)
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
operator|-
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// d>= 1F
if|if
condition|(
name|d
operator|<
literal|10F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E9F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|1
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|100F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E8F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|2
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|1000F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E7F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|3
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|10000F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E6F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|4
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|d
operator|<
literal|100000F
condition|)
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E5F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|5
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|long
name|i
init|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E4F
operator|)
decl_stmt|;
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|6
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|// use exponential notation
name|int
name|magnitude
init|=
name|magnitude
argument_list|(
name|d
argument_list|)
decl_stmt|;
name|long
name|i
decl_stmt|;
if|if
condition|(
name|magnitude
operator|<
operator|-
literal|35
condition|)
block|{
name|i
operator|=
operator|(
name|long
operator|)
operator|(
name|d
operator|*
literal|1E10F
operator|/
name|f_magnitudes
index|[
name|magnitude
operator|+
literal|45
index|]
operator|)
expr_stmt|;
block|}
else|else
block|{
name|i
operator|=
operator|(
name|long
operator|)
operator|(
name|d
operator|/
name|f_magnitudes
index|[
name|magnitude
operator|+
literal|44
operator|-
literal|9
index|]
operator|)
expr_stmt|;
block|}
name|i
operator|=
name|i
operator|%
literal|100
operator|>=
literal|50
condition|?
operator|(
name|i
operator|/
literal|100
operator|)
operator|+
literal|1
else|:
name|i
operator|/
literal|100
expr_stmt|;
name|appendFractDigits
argument_list|(
name|s
argument_list|,
name|i
argument_list|,
literal|1
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
literal|'E'
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|s
argument_list|,
name|magnitude
argument_list|)
expr_stmt|;
block|}
block|}
comment|// check that the value is OK
if|if
condition|(
name|s
operator|.
name|length
argument_list|()
operator|>
literal|5
condition|)
block|{
name|float
name|reconstructed
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|s
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|==
name|reconstructed
condition|)
block|{
name|snapFloat
argument_list|(
name|s
argument_list|,
name|value
argument_list|)
expr_stmt|;
return|return
name|s
return|;
block|}
if|else if
condition|(
name|value
operator|>
literal|0
condition|?
name|value
operator|<
name|reconstructed
else|:
name|value
operator|>
name|reconstructed
condition|)
block|{
comment|//                System.err.println(new StringBuffer(100).append("*** float ").append(value).append('(')
comment|//                        .append(Float.floatToIntBits(value)).append(')')
comment|//                        .append(" incorrectly formatted as ")
comment|//                        .append(s).append('(').append(Float.floatToIntBits(reconstructed))
comment|//                        .append(')').toString());
name|nudgeDownFloat
argument_list|(
name|s
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|//                System.err.println("*** adjusted to " + s);
return|return
name|s
return|;
block|}
else|else
block|{
comment|//                System.err.println(new StringBuffer(100)
comment|//                        .append("*** float ").append(value).append('(')
comment|//                        .append(Float.floatToIntBits(value)).append(')')
comment|//                        .append(" incorrectly formatted as ").append(s)
comment|//                        .append('(').append(Float.floatToIntBits(reconstructed))
comment|//                        .append(')').toString());
name|nudgeUpFloat
argument_list|(
name|s
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|//                System.err.println("*** adjusted to " + s);
return|return
name|s
return|;
block|}
block|}
return|return
name|s
return|;
block|}
specifier|private
name|FloatingPointConverter
name|append
parameter_list|(
name|FastStringBuffer
name|s
parameter_list|,
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|i
operator|==
name|Integer
operator|.
name|MIN_VALUE
condition|)
block|{
comment|//cannot make this positive due to integer overflow
name|s
operator|.
name|append
argument_list|(
literal|"-2147483648"
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
name|s
operator|.
name|append
argument_list|(
literal|'-'
argument_list|)
expr_stmt|;
name|i
operator|=
operator|-
name|i
expr_stmt|;
block|}
name|int
name|c
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|10
condition|)
block|{
comment|//one digit
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|100
condition|)
block|{
comment|//two digits
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|1000
condition|)
block|{
comment|//three digits
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|/
literal|100
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|=
name|i
operator|%
literal|100
operator|)
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|c
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|10000
condition|)
block|{
comment|//four digits
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|/
literal|1000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|=
name|i
operator|%
literal|1000
operator|)
operator|/
literal|100
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100
operator|)
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|c
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|100000
condition|)
block|{
comment|//five digits
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|/
literal|10000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|=
name|i
operator|%
literal|10000
operator|)
operator|/
literal|1000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|1000
operator|)
operator|/
literal|100
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100
operator|)
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|c
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|1000000
condition|)
block|{
comment|//six digits
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|/
literal|100000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|=
name|i
operator|%
literal|100000
operator|)
operator|/
literal|10000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|10000
operator|)
operator|/
literal|1000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|1000
operator|)
operator|/
literal|100
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100
operator|)
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|c
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|10000000
condition|)
block|{
comment|//seven digits
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|/
literal|1000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|=
name|i
operator|%
literal|1000000
operator|)
operator|/
literal|100000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100000
operator|)
operator|/
literal|10000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|10000
operator|)
operator|/
literal|1000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|1000
operator|)
operator|/
literal|100
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100
operator|)
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|c
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|100000000
condition|)
block|{
comment|//eight digits
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|/
literal|10000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|=
name|i
operator|%
literal|10000000
operator|)
operator|/
literal|1000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|1000000
operator|)
operator|/
literal|100000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100000
operator|)
operator|/
literal|10000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|10000
operator|)
operator|/
literal|1000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|1000
operator|)
operator|/
literal|100
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100
operator|)
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|c
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|1000000000
condition|)
block|{
comment|//nine digits
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|/
literal|100000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|=
name|i
operator|%
literal|100000000
operator|)
operator|/
literal|10000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|10000000
operator|)
operator|/
literal|1000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|1000000
operator|)
operator|/
literal|100000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100000
operator|)
operator|/
literal|10000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|10000
operator|)
operator|/
literal|1000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|1000
operator|)
operator|/
literal|100
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100
operator|)
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|c
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
else|else
block|{
comment|//ten digits
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|i
operator|/
literal|1000000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|=
name|i
operator|%
literal|1000000000
operator|)
operator|/
literal|100000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100000000
operator|)
operator|/
literal|10000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|10000000
operator|)
operator|/
literal|1000000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|1000000
operator|)
operator|/
literal|100000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100000
operator|)
operator|/
literal|10000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|10000
operator|)
operator|/
literal|1000
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|1000
operator|)
operator|/
literal|100
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|c
operator|%=
literal|100
operator|)
operator|/
literal|10
index|]
argument_list|)
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
name|c
operator|%
literal|10
index|]
argument_list|)
expr_stmt|;
return|return
name|this
return|;
block|}
block|}
specifier|private
specifier|static
specifier|final
name|char
index|[]
index|[]
name|ZEROS
init|=
block|{
block|{}
block|,
block|{
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,
block|{
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|,
literal|'0'
block|}
block|,     }
decl_stmt|;
specifier|private
specifier|static
name|void
name|appendFractDigits
parameter_list|(
name|FastStringBuffer
name|s
parameter_list|,
name|long
name|i
parameter_list|,
name|int
name|decimalOffset
parameter_list|,
name|boolean
name|requirePoint
parameter_list|)
block|{
name|long
name|mag
init|=
name|magnitude
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|long
name|c
decl_stmt|;
while|while
condition|(
name|i
operator|>
literal|0
condition|)
block|{
name|c
operator|=
name|i
operator|/
name|mag
expr_stmt|;
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|int
operator|)
name|c
index|]
argument_list|)
expr_stmt|;
name|decimalOffset
operator|--
expr_stmt|;
if|if
condition|(
name|decimalOffset
operator|==
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
expr_stmt|;
block|}
name|c
operator|*=
name|mag
expr_stmt|;
if|if
condition|(
name|c
operator|<=
name|i
condition|)
block|{
name|i
operator|-=
name|c
expr_stmt|;
block|}
name|mag
operator|=
name|mag
operator|/
literal|10
expr_stmt|;
block|}
if|if
condition|(
name|i
operator|!=
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|charForDigit
index|[
operator|(
name|int
operator|)
name|i
index|]
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|decimalOffset
operator|>
literal|0
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|ZEROS
index|[
name|decimalOffset
index|]
argument_list|)
expr_stmt|;
name|decimalOffset
operator|=
literal|1
expr_stmt|;
block|}
name|decimalOffset
operator|--
expr_stmt|;
if|if
condition|(
name|decimalOffset
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|requirePoint
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
name|DOT_ZERO
argument_list|)
expr_stmt|;
block|}
block|}
if|else if
condition|(
name|decimalOffset
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|requirePoint
condition|)
block|{
name|s
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// remove the trailing decimal point if there's nothing to follow it
name|s
operator|.
name|setLength
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|private
specifier|static
name|int
name|magnitude
parameter_list|(
name|double
name|d
parameter_list|)
block|{
return|return
name|magnitude
argument_list|(
name|d
argument_list|,
name|Double
operator|.
name|doubleToLongBits
argument_list|(
name|d
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|magnitude
parameter_list|(
name|double
name|d
parameter_list|,
name|long
name|doubleToLongBits
parameter_list|)
block|{
name|int
name|magnitude
init|=
operator|(
name|int
operator|)
operator|(
operator|(
operator|(
operator|(
name|doubleToLongBits
operator|&
name|doubleExpMask
operator|)
operator|>>
name|doubleExpShift
operator|)
operator|-
name|doubleExpBias
operator|)
operator|*
literal|0.301029995663981
operator|)
decl_stmt|;
if|if
condition|(
name|magnitude
operator|<
operator|-
literal|323
condition|)
block|{
name|magnitude
operator|=
operator|-
literal|323
expr_stmt|;
block|}
if|else if
condition|(
name|magnitude
operator|>
literal|308
condition|)
block|{
name|magnitude
operator|=
literal|308
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>=
name|d_magnitudes
index|[
name|magnitude
operator|+
literal|323
index|]
condition|)
block|{
while|while
condition|(
name|magnitude
operator|<
literal|309
operator|&&
name|d
operator|>=
name|d_magnitudes
index|[
name|magnitude
operator|+
literal|323
index|]
condition|)
block|{
name|magnitude
operator|++
expr_stmt|;
block|}
name|magnitude
operator|--
expr_stmt|;
return|return
name|magnitude
return|;
block|}
else|else
block|{
while|while
condition|(
name|magnitude
operator|>
operator|-
literal|324
operator|&&
name|d
operator|<
name|d_magnitudes
index|[
name|magnitude
operator|+
literal|323
index|]
condition|)
block|{
name|magnitude
operator|--
expr_stmt|;
block|}
return|return
name|magnitude
return|;
block|}
block|}
specifier|private
specifier|static
name|int
name|magnitude
parameter_list|(
name|float
name|d
parameter_list|)
block|{
return|return
name|magnitude
argument_list|(
name|d
argument_list|,
name|Float
operator|.
name|floatToIntBits
argument_list|(
name|d
argument_list|)
argument_list|)
return|;
block|}
specifier|private
specifier|static
name|int
name|magnitude
parameter_list|(
name|float
name|d
parameter_list|,
name|int
name|floatToIntBits
parameter_list|)
block|{
name|int
name|magnitude
init|=
operator|(
name|int
operator|)
operator|(
operator|(
operator|(
operator|(
name|floatToIntBits
operator|&
name|floatExpMask
operator|)
operator|>>
name|floatExpShift
operator|)
operator|-
name|floatExpBias
operator|)
operator|*
literal|0.301029995663981
operator|)
decl_stmt|;
if|if
condition|(
name|magnitude
operator|<
operator|-
literal|44
condition|)
block|{
name|magnitude
operator|=
operator|-
literal|44
expr_stmt|;
block|}
if|else if
condition|(
name|magnitude
operator|>
literal|38
condition|)
block|{
name|magnitude
operator|=
literal|38
expr_stmt|;
block|}
if|if
condition|(
name|d
operator|>=
name|f_magnitudes
index|[
name|magnitude
operator|+
literal|44
index|]
condition|)
block|{
while|while
condition|(
name|magnitude
operator|<
literal|39
operator|&&
name|d
operator|>=
name|f_magnitudes
index|[
name|magnitude
operator|+
literal|44
index|]
condition|)
block|{
name|magnitude
operator|++
expr_stmt|;
block|}
name|magnitude
operator|--
expr_stmt|;
return|return
name|magnitude
return|;
block|}
else|else
block|{
while|while
condition|(
name|magnitude
operator|>
operator|-
literal|45
operator|&&
name|d
operator|<
name|f_magnitudes
index|[
name|magnitude
operator|+
literal|44
index|]
condition|)
block|{
name|magnitude
operator|--
expr_stmt|;
block|}
return|return
name|magnitude
return|;
block|}
block|}
comment|/**      * Assumes i is positive. Returns the magnitude of i in base 10.      */
specifier|private
specifier|static
name|long
name|magnitude
parameter_list|(
name|long
name|i
parameter_list|)
block|{
if|if
condition|(
name|i
operator|<
literal|10L
condition|)
block|{
return|return
literal|1
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|100L
condition|)
block|{
return|return
literal|10L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|1000L
condition|)
block|{
return|return
literal|100L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|10000L
condition|)
block|{
return|return
literal|1000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|100000L
condition|)
block|{
return|return
literal|10000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|1000000L
condition|)
block|{
return|return
literal|100000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|10000000L
condition|)
block|{
return|return
literal|1000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|100000000L
condition|)
block|{
return|return
literal|10000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|1000000000L
condition|)
block|{
return|return
literal|100000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|10000000000L
condition|)
block|{
return|return
literal|1000000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|100000000000L
condition|)
block|{
return|return
literal|10000000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|1000000000000L
condition|)
block|{
return|return
literal|100000000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|10000000000000L
condition|)
block|{
return|return
literal|1000000000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|100000000000000L
condition|)
block|{
return|return
literal|10000000000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|1000000000000000L
condition|)
block|{
return|return
literal|100000000000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|10000000000000000L
condition|)
block|{
return|return
literal|1000000000000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|100000000000000000L
condition|)
block|{
return|return
literal|10000000000000000L
return|;
block|}
if|else if
condition|(
name|i
operator|<
literal|1000000000000000000L
condition|)
block|{
return|return
literal|100000000000000000L
return|;
block|}
else|else
block|{
return|return
literal|1000000000000000000L
return|;
block|}
block|}
comment|/**      * Adjust a value upwards (away from zero) until it equals the original value      * @param in the buffer holding the value      * @param original the original double      * @return true if the value is now equal      */
specifier|private
specifier|static
name|boolean
name|nudgeUpDouble
parameter_list|(
name|FastStringBuffer
name|in
parameter_list|,
name|double
name|original
parameter_list|)
block|{
comment|//        System.err.println("NudgeUp " + in.toString() + " original " + original);
name|int
name|e
init|=
name|in
operator|.
name|indexOf
argument_list|(
literal|'E'
argument_list|)
decl_stmt|;
name|int
name|last
decl_stmt|;
if|if
condition|(
name|e
operator|>=
literal|0
condition|)
block|{
name|last
operator|=
name|e
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|increment
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|double
name|reconstructed
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|in
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reconstructed
operator|==
name|original
condition|)
block|{
name|snapDouble
argument_list|(
name|in
argument_list|,
name|original
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|original
operator|>
literal|0
condition|?
name|reconstructed
operator|>
name|original
else|:
name|reconstructed
operator|<
name|original
condition|)
block|{
name|decrement
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|==
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|in
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|.
name|insertCharAt
argument_list|(
name|last
operator|+
literal|1
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ok
init|=
name|nudgeUpDouble
argument_list|(
name|in
argument_list|,
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
comment|/**      * Adjust a value downwards (towards zero) until it equals the original value      * @param in the buffer holding the value      * @param original the original double      * @return true if the value is now equal      */
specifier|private
specifier|static
name|boolean
name|nudgeDownDouble
parameter_list|(
name|FastStringBuffer
name|in
parameter_list|,
name|double
name|original
parameter_list|)
block|{
comment|//        System.err.println("NudgeDown " + in.toString() + " original " + original);
name|int
name|e
init|=
name|in
operator|.
name|indexOf
argument_list|(
literal|'E'
argument_list|)
decl_stmt|;
name|int
name|last
decl_stmt|;
if|if
condition|(
name|e
operator|>=
literal|0
condition|)
block|{
name|last
operator|=
name|e
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|decrement
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|double
name|reconstructed
init|=
name|Double
operator|.
name|parseDouble
argument_list|(
name|in
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reconstructed
operator|==
name|original
condition|)
block|{
name|snapDouble
argument_list|(
name|in
argument_list|,
name|original
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|original
operator|>
literal|0
condition|?
name|reconstructed
operator|<
name|original
else|:
name|reconstructed
operator|>
name|original
condition|)
block|{
name|increment
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|==
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|in
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|.
name|insertCharAt
argument_list|(
name|last
operator|+
literal|1
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ok
init|=
name|nudgeDownDouble
argument_list|(
name|in
argument_list|,
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
comment|/**      * Adjust a value upwards (away from zero) until it equals the original value      * @param in the buffer holding the value      * @param original the original double      * @return true if the value is now equal      */
specifier|private
specifier|static
name|boolean
name|nudgeUpFloat
parameter_list|(
name|FastStringBuffer
name|in
parameter_list|,
name|float
name|original
parameter_list|)
block|{
comment|//        System.err.println("NudgeUp " + in.toString() + " original " + original);
name|int
name|e
init|=
name|in
operator|.
name|indexOf
argument_list|(
literal|'E'
argument_list|)
decl_stmt|;
name|int
name|last
decl_stmt|;
if|if
condition|(
name|e
operator|>=
literal|0
condition|)
block|{
name|last
operator|=
name|e
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|increment
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|double
name|reconstructed
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|in
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reconstructed
operator|==
name|original
condition|)
block|{
name|snapFloat
argument_list|(
name|in
argument_list|,
name|original
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|original
operator|>
literal|0
condition|?
name|reconstructed
operator|>
name|original
else|:
name|reconstructed
operator|<
name|original
condition|)
block|{
name|decrement
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|==
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|in
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|.
name|insertCharAt
argument_list|(
name|last
operator|+
literal|1
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ok
init|=
name|nudgeUpFloat
argument_list|(
name|in
argument_list|,
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
comment|/**      * Adjust a value downwards (towards zero) until it equals the original value      * @param in the buffer holding the value      * @param original the original double      * @return true if the value is now equal      */
specifier|private
specifier|static
name|boolean
name|nudgeDownFloat
parameter_list|(
name|FastStringBuffer
name|in
parameter_list|,
name|float
name|original
parameter_list|)
block|{
comment|//        System.err.println("NudgeDown " + in.toString() + " original " + original);
name|int
name|e
init|=
name|in
operator|.
name|indexOf
argument_list|(
literal|'E'
argument_list|)
decl_stmt|;
name|int
name|last
decl_stmt|;
if|if
condition|(
name|e
operator|>=
literal|0
condition|)
block|{
name|last
operator|=
name|e
operator|-
literal|1
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
expr_stmt|;
block|}
while|while
condition|(
literal|true
condition|)
block|{
name|decrement
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
expr_stmt|;
name|double
name|reconstructed
init|=
name|Float
operator|.
name|parseFloat
argument_list|(
name|in
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reconstructed
operator|==
name|original
condition|)
block|{
name|snapFloat
argument_list|(
name|in
argument_list|,
name|original
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|else if
condition|(
name|original
operator|>
literal|0
condition|?
name|reconstructed
operator|<
name|original
else|:
name|reconstructed
operator|>
name|original
condition|)
block|{
name|increment
argument_list|(
name|in
argument_list|,
name|last
argument_list|)
expr_stmt|;
if|if
condition|(
name|last
operator|==
name|in
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
block|{
name|in
operator|.
name|append
argument_list|(
literal|'0'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|in
operator|.
name|insertCharAt
argument_list|(
name|last
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
block|}
name|boolean
name|ok
init|=
name|nudgeDownFloat
argument_list|(
name|in
argument_list|,
name|original
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
return|return
literal|true
return|;
block|}
block|}
block|}
block|}
comment|/**      * Strip any trailing zeros from the representation, and try to round to a smaller      * number of digits if this doesn't alter the value      */
specifier|private
specifier|static
name|void
name|snapDouble
parameter_list|(
name|FastStringBuffer
name|in
parameter_list|,
name|double
name|original
parameter_list|)
block|{
name|int
name|last
decl_stmt|;
name|int
name|dot
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|zeroes
init|=
literal|0
decl_stmt|;
name|int
name|nines
init|=
literal|0
decl_stmt|;
name|int
name|e
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|len
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
case|case
literal|'0'
case|:
name|zeroes
operator|++
expr_stmt|;
break|break;
case|case
literal|'9'
case|:
name|nines
operator|++
expr_stmt|;
break|break;
case|case
literal|'.'
case|:
name|dot
operator|=
name|i
expr_stmt|;
break|break;
case|case
literal|'E'
case|:
name|e
operator|=
name|i
expr_stmt|;
break|break;
default|default:
comment|// no-op
block|}
block|}
if|if
condition|(
name|dot
operator|<
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|e
operator|>=
literal|0
condition|)
block|{
name|last
operator|=
name|e
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|in
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|zeroes
operator|>=
literal|5
condition|)
block|{
comment|// try to snap to an adjacent number with fewer digits
if|if
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|3
argument_list|)
operator|==
literal|'0'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|2
argument_list|)
operator|==
literal|'0'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|1
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|in
operator|.
name|setCharAt
argument_list|(
name|last
operator|-
literal|1
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|in
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
name|original
condition|)
block|{
name|in
operator|.
name|setCharAt
argument_list|(
name|last
operator|-
literal|1
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
if|else if
condition|(
name|nines
operator|>=
literal|5
condition|)
block|{
comment|// try to snap to an adjacent number with fewer digits
if|if
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|3
argument_list|)
operator|==
literal|'9'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|2
argument_list|)
operator|==
literal|'9'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|1
argument_list|)
operator|==
literal|'9'
condition|)
block|{
name|increment
argument_list|(
name|in
argument_list|,
name|last
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|Double
operator|.
name|parseDouble
argument_list|(
name|in
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
name|original
condition|)
block|{
name|decrement
argument_list|(
name|in
argument_list|,
name|last
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|last
operator|--
expr_stmt|;
while|while
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|last
argument_list|)
operator|==
literal|'0'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|1
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|in
operator|.
name|removeCharAt
argument_list|(
name|last
operator|--
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Strip any trailing zeros from the representation, and try to round to a smaller      * number of digits if this doesn't alter the value      */
specifier|private
specifier|static
name|void
name|snapFloat
parameter_list|(
name|FastStringBuffer
name|in
parameter_list|,
name|float
name|original
parameter_list|)
block|{
name|int
name|last
decl_stmt|;
name|int
name|dot
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|zeroes
init|=
literal|0
decl_stmt|;
name|int
name|nines
init|=
literal|0
decl_stmt|;
name|int
name|e
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|len
init|=
name|in
operator|.
name|length
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
name|i
operator|++
control|)
block|{
switch|switch
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|i
argument_list|)
condition|)
block|{
case|case
literal|'0'
case|:
name|zeroes
operator|++
expr_stmt|;
break|break;
case|case
literal|'9'
case|:
name|nines
operator|++
expr_stmt|;
break|break;
case|case
literal|'.'
case|:
name|dot
operator|=
name|i
expr_stmt|;
break|break;
case|case
literal|'E'
case|:
name|e
operator|=
name|i
expr_stmt|;
break|break;
default|default:
comment|// no-op
block|}
block|}
if|if
condition|(
name|dot
operator|<
literal|0
condition|)
block|{
return|return;
block|}
if|if
condition|(
name|e
operator|>=
literal|0
condition|)
block|{
name|last
operator|=
name|e
expr_stmt|;
block|}
else|else
block|{
name|last
operator|=
name|in
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|zeroes
operator|>=
literal|2
condition|)
block|{
comment|// try to snap to an adjacent number with fewer digits
if|if
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|3
argument_list|)
operator|==
literal|'0'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|2
argument_list|)
operator|==
literal|'0'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|1
argument_list|)
operator|==
literal|'1'
condition|)
block|{
name|in
operator|.
name|setCharAt
argument_list|(
name|last
operator|-
literal|1
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|in
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
name|original
condition|)
block|{
name|in
operator|.
name|setCharAt
argument_list|(
name|last
operator|-
literal|1
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
if|else if
condition|(
name|nines
operator|>=
literal|2
condition|)
block|{
comment|// try to snap to an adjacent number with fewer digits
if|if
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|3
argument_list|)
operator|==
literal|'9'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|2
argument_list|)
operator|==
literal|'9'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|1
argument_list|)
operator|==
literal|'9'
condition|)
block|{
name|increment
argument_list|(
name|in
argument_list|,
name|last
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|Float
operator|.
name|parseFloat
argument_list|(
name|in
operator|.
name|toString
argument_list|()
argument_list|)
operator|!=
name|original
condition|)
block|{
name|decrement
argument_list|(
name|in
argument_list|,
name|last
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
name|last
operator|--
expr_stmt|;
while|while
condition|(
name|in
operator|.
name|charAt
argument_list|(
name|last
argument_list|)
operator|==
literal|'0'
operator|&&
name|in
operator|.
name|charAt
argument_list|(
name|last
operator|-
literal|1
argument_list|)
operator|!=
literal|'.'
condition|)
block|{
name|in
operator|.
name|removeCharAt
argument_list|(
name|last
operator|--
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Increment the digit at a given position in a buffer holding a float or double      * (the absolute value is incremented, not the signed value)      * @param in the input butter      * @param position the position of the digit to be incremented      */
specifier|private
specifier|static
name|void
name|increment
parameter_list|(
name|FastStringBuffer
name|in
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|char
name|c
init|=
name|in
operator|.
name|charAt
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'.'
condition|)
block|{
name|increment
argument_list|(
name|in
argument_list|,
name|position
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|==
literal|'9'
condition|)
block|{
name|in
operator|.
name|setCharAt
argument_list|(
name|position
argument_list|,
literal|'0'
argument_list|)
expr_stmt|;
if|if
condition|(
name|position
operator|==
literal|0
condition|)
block|{
name|in
operator|.
name|insertCharAt
argument_list|(
literal|0
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|increment
argument_list|(
name|in
argument_list|,
name|position
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|in
operator|.
name|setCharAt
argument_list|(
name|position
argument_list|,
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
name|c
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|/**      * Decrement the digit at a given position in a buffer holding a float or double      * (the absolute value is decremented, not the signed value)      * @param in the input butter      * @param position the position of the digit to be incremented      */
specifier|private
specifier|static
name|void
name|decrement
parameter_list|(
name|FastStringBuffer
name|in
parameter_list|,
name|int
name|position
parameter_list|)
block|{
name|char
name|c
init|=
name|in
operator|.
name|charAt
argument_list|(
name|position
argument_list|)
decl_stmt|;
if|if
condition|(
name|c
operator|==
literal|'.'
condition|)
block|{
name|decrement
argument_list|(
name|in
argument_list|,
name|position
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|else if
condition|(
name|c
operator|==
literal|'0'
condition|)
block|{
name|in
operator|.
name|setCharAt
argument_list|(
name|position
argument_list|,
literal|'9'
argument_list|)
expr_stmt|;
if|if
condition|(
name|position
operator|==
literal|0
condition|)
block|{
throw|throw
operator|new
name|IllegalArgumentException
argument_list|(
literal|"cannot decrement zero"
argument_list|)
throw|;
block|}
else|else
block|{
name|decrement
argument_list|(
name|in
argument_list|,
name|position
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|in
operator|.
name|setCharAt
argument_list|(
name|position
argument_list|,
operator|(
name|char
operator|)
operator|(
operator|(
name|int
operator|)
name|c
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_class

end_unit

